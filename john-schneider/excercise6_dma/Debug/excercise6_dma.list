
excercise6_dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d34  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000049c  08007df8  08007df8  00017df8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008294  08008294  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08008294  08008294  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008294  08008294  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008294  08008294  00018294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008298  08008298  00018298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800829c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  200001dc  08008478  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000035c  08008478  0002035c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e11  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a8b  00000000  00000000  0002a015  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000840  00000000  00000000  0002baa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000788  00000000  00000000  0002c2e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012cf4  00000000  00000000  0002ca68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ad1d  00000000  00000000  0003f75c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006d327  00000000  00000000  0004a479  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b77a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002dd0  00000000  00000000  000b77f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001dc 	.word	0x200001dc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007ddc 	.word	0x08007ddc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e0 	.word	0x200001e0
 8000104:	08007ddc 	.word	0x08007ddc

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f000 ff0d 	bl	800125c <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 fe5d 	bl	800110c <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 feff 	bl	800125c <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 fef5 	bl	800125c <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 fe85 	bl	8001190 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 fe7b 	bl	8001190 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_dadd>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	464f      	mov	r7, r9
 80004ac:	4646      	mov	r6, r8
 80004ae:	46d6      	mov	lr, sl
 80004b0:	000d      	movs	r5, r1
 80004b2:	0004      	movs	r4, r0
 80004b4:	b5c0      	push	{r6, r7, lr}
 80004b6:	001f      	movs	r7, r3
 80004b8:	0011      	movs	r1, r2
 80004ba:	0328      	lsls	r0, r5, #12
 80004bc:	0f62      	lsrs	r2, r4, #29
 80004be:	0a40      	lsrs	r0, r0, #9
 80004c0:	4310      	orrs	r0, r2
 80004c2:	007a      	lsls	r2, r7, #1
 80004c4:	0d52      	lsrs	r2, r2, #21
 80004c6:	00e3      	lsls	r3, r4, #3
 80004c8:	033c      	lsls	r4, r7, #12
 80004ca:	4691      	mov	r9, r2
 80004cc:	0a64      	lsrs	r4, r4, #9
 80004ce:	0ffa      	lsrs	r2, r7, #31
 80004d0:	0f4f      	lsrs	r7, r1, #29
 80004d2:	006e      	lsls	r6, r5, #1
 80004d4:	4327      	orrs	r7, r4
 80004d6:	4692      	mov	sl, r2
 80004d8:	46b8      	mov	r8, r7
 80004da:	0d76      	lsrs	r6, r6, #21
 80004dc:	0fed      	lsrs	r5, r5, #31
 80004de:	00c9      	lsls	r1, r1, #3
 80004e0:	4295      	cmp	r5, r2
 80004e2:	d100      	bne.n	80004e6 <__aeabi_dadd+0x3e>
 80004e4:	e099      	b.n	800061a <__aeabi_dadd+0x172>
 80004e6:	464c      	mov	r4, r9
 80004e8:	1b34      	subs	r4, r6, r4
 80004ea:	46a4      	mov	ip, r4
 80004ec:	2c00      	cmp	r4, #0
 80004ee:	dc00      	bgt.n	80004f2 <__aeabi_dadd+0x4a>
 80004f0:	e07c      	b.n	80005ec <__aeabi_dadd+0x144>
 80004f2:	464a      	mov	r2, r9
 80004f4:	2a00      	cmp	r2, #0
 80004f6:	d100      	bne.n	80004fa <__aeabi_dadd+0x52>
 80004f8:	e0b8      	b.n	800066c <__aeabi_dadd+0x1c4>
 80004fa:	4ac5      	ldr	r2, [pc, #788]	; (8000810 <__aeabi_dadd+0x368>)
 80004fc:	4296      	cmp	r6, r2
 80004fe:	d100      	bne.n	8000502 <__aeabi_dadd+0x5a>
 8000500:	e11c      	b.n	800073c <__aeabi_dadd+0x294>
 8000502:	2280      	movs	r2, #128	; 0x80
 8000504:	003c      	movs	r4, r7
 8000506:	0412      	lsls	r2, r2, #16
 8000508:	4314      	orrs	r4, r2
 800050a:	46a0      	mov	r8, r4
 800050c:	4662      	mov	r2, ip
 800050e:	2a38      	cmp	r2, #56	; 0x38
 8000510:	dd00      	ble.n	8000514 <__aeabi_dadd+0x6c>
 8000512:	e161      	b.n	80007d8 <__aeabi_dadd+0x330>
 8000514:	2a1f      	cmp	r2, #31
 8000516:	dd00      	ble.n	800051a <__aeabi_dadd+0x72>
 8000518:	e1cc      	b.n	80008b4 <__aeabi_dadd+0x40c>
 800051a:	4664      	mov	r4, ip
 800051c:	2220      	movs	r2, #32
 800051e:	1b12      	subs	r2, r2, r4
 8000520:	4644      	mov	r4, r8
 8000522:	4094      	lsls	r4, r2
 8000524:	000f      	movs	r7, r1
 8000526:	46a1      	mov	r9, r4
 8000528:	4664      	mov	r4, ip
 800052a:	4091      	lsls	r1, r2
 800052c:	40e7      	lsrs	r7, r4
 800052e:	464c      	mov	r4, r9
 8000530:	1e4a      	subs	r2, r1, #1
 8000532:	4191      	sbcs	r1, r2
 8000534:	433c      	orrs	r4, r7
 8000536:	4642      	mov	r2, r8
 8000538:	4321      	orrs	r1, r4
 800053a:	4664      	mov	r4, ip
 800053c:	40e2      	lsrs	r2, r4
 800053e:	1a80      	subs	r0, r0, r2
 8000540:	1a5c      	subs	r4, r3, r1
 8000542:	42a3      	cmp	r3, r4
 8000544:	419b      	sbcs	r3, r3
 8000546:	425f      	negs	r7, r3
 8000548:	1bc7      	subs	r7, r0, r7
 800054a:	023b      	lsls	r3, r7, #8
 800054c:	d400      	bmi.n	8000550 <__aeabi_dadd+0xa8>
 800054e:	e0d0      	b.n	80006f2 <__aeabi_dadd+0x24a>
 8000550:	027f      	lsls	r7, r7, #9
 8000552:	0a7f      	lsrs	r7, r7, #9
 8000554:	2f00      	cmp	r7, #0
 8000556:	d100      	bne.n	800055a <__aeabi_dadd+0xb2>
 8000558:	e0ff      	b.n	800075a <__aeabi_dadd+0x2b2>
 800055a:	0038      	movs	r0, r7
 800055c:	f001 fe5a 	bl	8002214 <__clzsi2>
 8000560:	0001      	movs	r1, r0
 8000562:	3908      	subs	r1, #8
 8000564:	2320      	movs	r3, #32
 8000566:	0022      	movs	r2, r4
 8000568:	1a5b      	subs	r3, r3, r1
 800056a:	408f      	lsls	r7, r1
 800056c:	40da      	lsrs	r2, r3
 800056e:	408c      	lsls	r4, r1
 8000570:	4317      	orrs	r7, r2
 8000572:	42b1      	cmp	r1, r6
 8000574:	da00      	bge.n	8000578 <__aeabi_dadd+0xd0>
 8000576:	e0ff      	b.n	8000778 <__aeabi_dadd+0x2d0>
 8000578:	1b89      	subs	r1, r1, r6
 800057a:	1c4b      	adds	r3, r1, #1
 800057c:	2b1f      	cmp	r3, #31
 800057e:	dd00      	ble.n	8000582 <__aeabi_dadd+0xda>
 8000580:	e0a8      	b.n	80006d4 <__aeabi_dadd+0x22c>
 8000582:	2220      	movs	r2, #32
 8000584:	0039      	movs	r1, r7
 8000586:	1ad2      	subs	r2, r2, r3
 8000588:	0020      	movs	r0, r4
 800058a:	4094      	lsls	r4, r2
 800058c:	4091      	lsls	r1, r2
 800058e:	40d8      	lsrs	r0, r3
 8000590:	1e62      	subs	r2, r4, #1
 8000592:	4194      	sbcs	r4, r2
 8000594:	40df      	lsrs	r7, r3
 8000596:	2600      	movs	r6, #0
 8000598:	4301      	orrs	r1, r0
 800059a:	430c      	orrs	r4, r1
 800059c:	0763      	lsls	r3, r4, #29
 800059e:	d009      	beq.n	80005b4 <__aeabi_dadd+0x10c>
 80005a0:	230f      	movs	r3, #15
 80005a2:	4023      	ands	r3, r4
 80005a4:	2b04      	cmp	r3, #4
 80005a6:	d005      	beq.n	80005b4 <__aeabi_dadd+0x10c>
 80005a8:	1d23      	adds	r3, r4, #4
 80005aa:	42a3      	cmp	r3, r4
 80005ac:	41a4      	sbcs	r4, r4
 80005ae:	4264      	negs	r4, r4
 80005b0:	193f      	adds	r7, r7, r4
 80005b2:	001c      	movs	r4, r3
 80005b4:	023b      	lsls	r3, r7, #8
 80005b6:	d400      	bmi.n	80005ba <__aeabi_dadd+0x112>
 80005b8:	e09e      	b.n	80006f8 <__aeabi_dadd+0x250>
 80005ba:	4b95      	ldr	r3, [pc, #596]	; (8000810 <__aeabi_dadd+0x368>)
 80005bc:	3601      	adds	r6, #1
 80005be:	429e      	cmp	r6, r3
 80005c0:	d100      	bne.n	80005c4 <__aeabi_dadd+0x11c>
 80005c2:	e0b7      	b.n	8000734 <__aeabi_dadd+0x28c>
 80005c4:	4a93      	ldr	r2, [pc, #588]	; (8000814 <__aeabi_dadd+0x36c>)
 80005c6:	08e4      	lsrs	r4, r4, #3
 80005c8:	4017      	ands	r7, r2
 80005ca:	077b      	lsls	r3, r7, #29
 80005cc:	0571      	lsls	r1, r6, #21
 80005ce:	027f      	lsls	r7, r7, #9
 80005d0:	4323      	orrs	r3, r4
 80005d2:	0b3f      	lsrs	r7, r7, #12
 80005d4:	0d4a      	lsrs	r2, r1, #21
 80005d6:	0512      	lsls	r2, r2, #20
 80005d8:	433a      	orrs	r2, r7
 80005da:	07ed      	lsls	r5, r5, #31
 80005dc:	432a      	orrs	r2, r5
 80005de:	0018      	movs	r0, r3
 80005e0:	0011      	movs	r1, r2
 80005e2:	bce0      	pop	{r5, r6, r7}
 80005e4:	46ba      	mov	sl, r7
 80005e6:	46b1      	mov	r9, r6
 80005e8:	46a8      	mov	r8, r5
 80005ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005ec:	2c00      	cmp	r4, #0
 80005ee:	d04b      	beq.n	8000688 <__aeabi_dadd+0x1e0>
 80005f0:	464c      	mov	r4, r9
 80005f2:	1ba4      	subs	r4, r4, r6
 80005f4:	46a4      	mov	ip, r4
 80005f6:	2e00      	cmp	r6, #0
 80005f8:	d000      	beq.n	80005fc <__aeabi_dadd+0x154>
 80005fa:	e123      	b.n	8000844 <__aeabi_dadd+0x39c>
 80005fc:	0004      	movs	r4, r0
 80005fe:	431c      	orrs	r4, r3
 8000600:	d100      	bne.n	8000604 <__aeabi_dadd+0x15c>
 8000602:	e1af      	b.n	8000964 <__aeabi_dadd+0x4bc>
 8000604:	4662      	mov	r2, ip
 8000606:	1e54      	subs	r4, r2, #1
 8000608:	2a01      	cmp	r2, #1
 800060a:	d100      	bne.n	800060e <__aeabi_dadd+0x166>
 800060c:	e215      	b.n	8000a3a <__aeabi_dadd+0x592>
 800060e:	4d80      	ldr	r5, [pc, #512]	; (8000810 <__aeabi_dadd+0x368>)
 8000610:	45ac      	cmp	ip, r5
 8000612:	d100      	bne.n	8000616 <__aeabi_dadd+0x16e>
 8000614:	e1c8      	b.n	80009a8 <__aeabi_dadd+0x500>
 8000616:	46a4      	mov	ip, r4
 8000618:	e11b      	b.n	8000852 <__aeabi_dadd+0x3aa>
 800061a:	464a      	mov	r2, r9
 800061c:	1ab2      	subs	r2, r6, r2
 800061e:	4694      	mov	ip, r2
 8000620:	2a00      	cmp	r2, #0
 8000622:	dc00      	bgt.n	8000626 <__aeabi_dadd+0x17e>
 8000624:	e0ac      	b.n	8000780 <__aeabi_dadd+0x2d8>
 8000626:	464a      	mov	r2, r9
 8000628:	2a00      	cmp	r2, #0
 800062a:	d043      	beq.n	80006b4 <__aeabi_dadd+0x20c>
 800062c:	4a78      	ldr	r2, [pc, #480]	; (8000810 <__aeabi_dadd+0x368>)
 800062e:	4296      	cmp	r6, r2
 8000630:	d100      	bne.n	8000634 <__aeabi_dadd+0x18c>
 8000632:	e1af      	b.n	8000994 <__aeabi_dadd+0x4ec>
 8000634:	2280      	movs	r2, #128	; 0x80
 8000636:	003c      	movs	r4, r7
 8000638:	0412      	lsls	r2, r2, #16
 800063a:	4314      	orrs	r4, r2
 800063c:	46a0      	mov	r8, r4
 800063e:	4662      	mov	r2, ip
 8000640:	2a38      	cmp	r2, #56	; 0x38
 8000642:	dc67      	bgt.n	8000714 <__aeabi_dadd+0x26c>
 8000644:	2a1f      	cmp	r2, #31
 8000646:	dc00      	bgt.n	800064a <__aeabi_dadd+0x1a2>
 8000648:	e15f      	b.n	800090a <__aeabi_dadd+0x462>
 800064a:	4647      	mov	r7, r8
 800064c:	3a20      	subs	r2, #32
 800064e:	40d7      	lsrs	r7, r2
 8000650:	4662      	mov	r2, ip
 8000652:	2a20      	cmp	r2, #32
 8000654:	d005      	beq.n	8000662 <__aeabi_dadd+0x1ba>
 8000656:	4664      	mov	r4, ip
 8000658:	2240      	movs	r2, #64	; 0x40
 800065a:	1b12      	subs	r2, r2, r4
 800065c:	4644      	mov	r4, r8
 800065e:	4094      	lsls	r4, r2
 8000660:	4321      	orrs	r1, r4
 8000662:	1e4a      	subs	r2, r1, #1
 8000664:	4191      	sbcs	r1, r2
 8000666:	000c      	movs	r4, r1
 8000668:	433c      	orrs	r4, r7
 800066a:	e057      	b.n	800071c <__aeabi_dadd+0x274>
 800066c:	003a      	movs	r2, r7
 800066e:	430a      	orrs	r2, r1
 8000670:	d100      	bne.n	8000674 <__aeabi_dadd+0x1cc>
 8000672:	e105      	b.n	8000880 <__aeabi_dadd+0x3d8>
 8000674:	0022      	movs	r2, r4
 8000676:	3a01      	subs	r2, #1
 8000678:	2c01      	cmp	r4, #1
 800067a:	d100      	bne.n	800067e <__aeabi_dadd+0x1d6>
 800067c:	e182      	b.n	8000984 <__aeabi_dadd+0x4dc>
 800067e:	4c64      	ldr	r4, [pc, #400]	; (8000810 <__aeabi_dadd+0x368>)
 8000680:	45a4      	cmp	ip, r4
 8000682:	d05b      	beq.n	800073c <__aeabi_dadd+0x294>
 8000684:	4694      	mov	ip, r2
 8000686:	e741      	b.n	800050c <__aeabi_dadd+0x64>
 8000688:	4c63      	ldr	r4, [pc, #396]	; (8000818 <__aeabi_dadd+0x370>)
 800068a:	1c77      	adds	r7, r6, #1
 800068c:	4227      	tst	r7, r4
 800068e:	d000      	beq.n	8000692 <__aeabi_dadd+0x1ea>
 8000690:	e0c4      	b.n	800081c <__aeabi_dadd+0x374>
 8000692:	0004      	movs	r4, r0
 8000694:	431c      	orrs	r4, r3
 8000696:	2e00      	cmp	r6, #0
 8000698:	d000      	beq.n	800069c <__aeabi_dadd+0x1f4>
 800069a:	e169      	b.n	8000970 <__aeabi_dadd+0x4c8>
 800069c:	2c00      	cmp	r4, #0
 800069e:	d100      	bne.n	80006a2 <__aeabi_dadd+0x1fa>
 80006a0:	e1bf      	b.n	8000a22 <__aeabi_dadd+0x57a>
 80006a2:	4644      	mov	r4, r8
 80006a4:	430c      	orrs	r4, r1
 80006a6:	d000      	beq.n	80006aa <__aeabi_dadd+0x202>
 80006a8:	e1d0      	b.n	8000a4c <__aeabi_dadd+0x5a4>
 80006aa:	0742      	lsls	r2, r0, #29
 80006ac:	08db      	lsrs	r3, r3, #3
 80006ae:	4313      	orrs	r3, r2
 80006b0:	08c0      	lsrs	r0, r0, #3
 80006b2:	e029      	b.n	8000708 <__aeabi_dadd+0x260>
 80006b4:	003a      	movs	r2, r7
 80006b6:	430a      	orrs	r2, r1
 80006b8:	d100      	bne.n	80006bc <__aeabi_dadd+0x214>
 80006ba:	e170      	b.n	800099e <__aeabi_dadd+0x4f6>
 80006bc:	4662      	mov	r2, ip
 80006be:	4664      	mov	r4, ip
 80006c0:	3a01      	subs	r2, #1
 80006c2:	2c01      	cmp	r4, #1
 80006c4:	d100      	bne.n	80006c8 <__aeabi_dadd+0x220>
 80006c6:	e0e0      	b.n	800088a <__aeabi_dadd+0x3e2>
 80006c8:	4c51      	ldr	r4, [pc, #324]	; (8000810 <__aeabi_dadd+0x368>)
 80006ca:	45a4      	cmp	ip, r4
 80006cc:	d100      	bne.n	80006d0 <__aeabi_dadd+0x228>
 80006ce:	e161      	b.n	8000994 <__aeabi_dadd+0x4ec>
 80006d0:	4694      	mov	ip, r2
 80006d2:	e7b4      	b.n	800063e <__aeabi_dadd+0x196>
 80006d4:	003a      	movs	r2, r7
 80006d6:	391f      	subs	r1, #31
 80006d8:	40ca      	lsrs	r2, r1
 80006da:	0011      	movs	r1, r2
 80006dc:	2b20      	cmp	r3, #32
 80006de:	d003      	beq.n	80006e8 <__aeabi_dadd+0x240>
 80006e0:	2240      	movs	r2, #64	; 0x40
 80006e2:	1ad3      	subs	r3, r2, r3
 80006e4:	409f      	lsls	r7, r3
 80006e6:	433c      	orrs	r4, r7
 80006e8:	1e63      	subs	r3, r4, #1
 80006ea:	419c      	sbcs	r4, r3
 80006ec:	2700      	movs	r7, #0
 80006ee:	2600      	movs	r6, #0
 80006f0:	430c      	orrs	r4, r1
 80006f2:	0763      	lsls	r3, r4, #29
 80006f4:	d000      	beq.n	80006f8 <__aeabi_dadd+0x250>
 80006f6:	e753      	b.n	80005a0 <__aeabi_dadd+0xf8>
 80006f8:	46b4      	mov	ip, r6
 80006fa:	08e4      	lsrs	r4, r4, #3
 80006fc:	077b      	lsls	r3, r7, #29
 80006fe:	4323      	orrs	r3, r4
 8000700:	08f8      	lsrs	r0, r7, #3
 8000702:	4a43      	ldr	r2, [pc, #268]	; (8000810 <__aeabi_dadd+0x368>)
 8000704:	4594      	cmp	ip, r2
 8000706:	d01d      	beq.n	8000744 <__aeabi_dadd+0x29c>
 8000708:	4662      	mov	r2, ip
 800070a:	0307      	lsls	r7, r0, #12
 800070c:	0552      	lsls	r2, r2, #21
 800070e:	0b3f      	lsrs	r7, r7, #12
 8000710:	0d52      	lsrs	r2, r2, #21
 8000712:	e760      	b.n	80005d6 <__aeabi_dadd+0x12e>
 8000714:	4644      	mov	r4, r8
 8000716:	430c      	orrs	r4, r1
 8000718:	1e62      	subs	r2, r4, #1
 800071a:	4194      	sbcs	r4, r2
 800071c:	18e4      	adds	r4, r4, r3
 800071e:	429c      	cmp	r4, r3
 8000720:	419b      	sbcs	r3, r3
 8000722:	425f      	negs	r7, r3
 8000724:	183f      	adds	r7, r7, r0
 8000726:	023b      	lsls	r3, r7, #8
 8000728:	d5e3      	bpl.n	80006f2 <__aeabi_dadd+0x24a>
 800072a:	4b39      	ldr	r3, [pc, #228]	; (8000810 <__aeabi_dadd+0x368>)
 800072c:	3601      	adds	r6, #1
 800072e:	429e      	cmp	r6, r3
 8000730:	d000      	beq.n	8000734 <__aeabi_dadd+0x28c>
 8000732:	e0b5      	b.n	80008a0 <__aeabi_dadd+0x3f8>
 8000734:	0032      	movs	r2, r6
 8000736:	2700      	movs	r7, #0
 8000738:	2300      	movs	r3, #0
 800073a:	e74c      	b.n	80005d6 <__aeabi_dadd+0x12e>
 800073c:	0742      	lsls	r2, r0, #29
 800073e:	08db      	lsrs	r3, r3, #3
 8000740:	4313      	orrs	r3, r2
 8000742:	08c0      	lsrs	r0, r0, #3
 8000744:	001a      	movs	r2, r3
 8000746:	4302      	orrs	r2, r0
 8000748:	d100      	bne.n	800074c <__aeabi_dadd+0x2a4>
 800074a:	e1e1      	b.n	8000b10 <__aeabi_dadd+0x668>
 800074c:	2780      	movs	r7, #128	; 0x80
 800074e:	033f      	lsls	r7, r7, #12
 8000750:	4307      	orrs	r7, r0
 8000752:	033f      	lsls	r7, r7, #12
 8000754:	4a2e      	ldr	r2, [pc, #184]	; (8000810 <__aeabi_dadd+0x368>)
 8000756:	0b3f      	lsrs	r7, r7, #12
 8000758:	e73d      	b.n	80005d6 <__aeabi_dadd+0x12e>
 800075a:	0020      	movs	r0, r4
 800075c:	f001 fd5a 	bl	8002214 <__clzsi2>
 8000760:	0001      	movs	r1, r0
 8000762:	3118      	adds	r1, #24
 8000764:	291f      	cmp	r1, #31
 8000766:	dc00      	bgt.n	800076a <__aeabi_dadd+0x2c2>
 8000768:	e6fc      	b.n	8000564 <__aeabi_dadd+0xbc>
 800076a:	3808      	subs	r0, #8
 800076c:	4084      	lsls	r4, r0
 800076e:	0027      	movs	r7, r4
 8000770:	2400      	movs	r4, #0
 8000772:	42b1      	cmp	r1, r6
 8000774:	db00      	blt.n	8000778 <__aeabi_dadd+0x2d0>
 8000776:	e6ff      	b.n	8000578 <__aeabi_dadd+0xd0>
 8000778:	4a26      	ldr	r2, [pc, #152]	; (8000814 <__aeabi_dadd+0x36c>)
 800077a:	1a76      	subs	r6, r6, r1
 800077c:	4017      	ands	r7, r2
 800077e:	e70d      	b.n	800059c <__aeabi_dadd+0xf4>
 8000780:	2a00      	cmp	r2, #0
 8000782:	d02f      	beq.n	80007e4 <__aeabi_dadd+0x33c>
 8000784:	464a      	mov	r2, r9
 8000786:	1b92      	subs	r2, r2, r6
 8000788:	4694      	mov	ip, r2
 800078a:	2e00      	cmp	r6, #0
 800078c:	d100      	bne.n	8000790 <__aeabi_dadd+0x2e8>
 800078e:	e0ad      	b.n	80008ec <__aeabi_dadd+0x444>
 8000790:	4a1f      	ldr	r2, [pc, #124]	; (8000810 <__aeabi_dadd+0x368>)
 8000792:	4591      	cmp	r9, r2
 8000794:	d100      	bne.n	8000798 <__aeabi_dadd+0x2f0>
 8000796:	e10f      	b.n	80009b8 <__aeabi_dadd+0x510>
 8000798:	2280      	movs	r2, #128	; 0x80
 800079a:	0412      	lsls	r2, r2, #16
 800079c:	4310      	orrs	r0, r2
 800079e:	4662      	mov	r2, ip
 80007a0:	2a38      	cmp	r2, #56	; 0x38
 80007a2:	dd00      	ble.n	80007a6 <__aeabi_dadd+0x2fe>
 80007a4:	e10f      	b.n	80009c6 <__aeabi_dadd+0x51e>
 80007a6:	2a1f      	cmp	r2, #31
 80007a8:	dd00      	ble.n	80007ac <__aeabi_dadd+0x304>
 80007aa:	e180      	b.n	8000aae <__aeabi_dadd+0x606>
 80007ac:	4664      	mov	r4, ip
 80007ae:	2220      	movs	r2, #32
 80007b0:	001e      	movs	r6, r3
 80007b2:	1b12      	subs	r2, r2, r4
 80007b4:	4667      	mov	r7, ip
 80007b6:	0004      	movs	r4, r0
 80007b8:	4093      	lsls	r3, r2
 80007ba:	4094      	lsls	r4, r2
 80007bc:	40fe      	lsrs	r6, r7
 80007be:	1e5a      	subs	r2, r3, #1
 80007c0:	4193      	sbcs	r3, r2
 80007c2:	40f8      	lsrs	r0, r7
 80007c4:	4334      	orrs	r4, r6
 80007c6:	431c      	orrs	r4, r3
 80007c8:	4480      	add	r8, r0
 80007ca:	1864      	adds	r4, r4, r1
 80007cc:	428c      	cmp	r4, r1
 80007ce:	41bf      	sbcs	r7, r7
 80007d0:	427f      	negs	r7, r7
 80007d2:	464e      	mov	r6, r9
 80007d4:	4447      	add	r7, r8
 80007d6:	e7a6      	b.n	8000726 <__aeabi_dadd+0x27e>
 80007d8:	4642      	mov	r2, r8
 80007da:	430a      	orrs	r2, r1
 80007dc:	0011      	movs	r1, r2
 80007de:	1e4a      	subs	r2, r1, #1
 80007e0:	4191      	sbcs	r1, r2
 80007e2:	e6ad      	b.n	8000540 <__aeabi_dadd+0x98>
 80007e4:	4c0c      	ldr	r4, [pc, #48]	; (8000818 <__aeabi_dadd+0x370>)
 80007e6:	1c72      	adds	r2, r6, #1
 80007e8:	4222      	tst	r2, r4
 80007ea:	d000      	beq.n	80007ee <__aeabi_dadd+0x346>
 80007ec:	e0a1      	b.n	8000932 <__aeabi_dadd+0x48a>
 80007ee:	0002      	movs	r2, r0
 80007f0:	431a      	orrs	r2, r3
 80007f2:	2e00      	cmp	r6, #0
 80007f4:	d000      	beq.n	80007f8 <__aeabi_dadd+0x350>
 80007f6:	e0fa      	b.n	80009ee <__aeabi_dadd+0x546>
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	d100      	bne.n	80007fe <__aeabi_dadd+0x356>
 80007fc:	e145      	b.n	8000a8a <__aeabi_dadd+0x5e2>
 80007fe:	003a      	movs	r2, r7
 8000800:	430a      	orrs	r2, r1
 8000802:	d000      	beq.n	8000806 <__aeabi_dadd+0x35e>
 8000804:	e146      	b.n	8000a94 <__aeabi_dadd+0x5ec>
 8000806:	0742      	lsls	r2, r0, #29
 8000808:	08db      	lsrs	r3, r3, #3
 800080a:	4313      	orrs	r3, r2
 800080c:	08c0      	lsrs	r0, r0, #3
 800080e:	e77b      	b.n	8000708 <__aeabi_dadd+0x260>
 8000810:	000007ff 	.word	0x000007ff
 8000814:	ff7fffff 	.word	0xff7fffff
 8000818:	000007fe 	.word	0x000007fe
 800081c:	4647      	mov	r7, r8
 800081e:	1a5c      	subs	r4, r3, r1
 8000820:	1bc2      	subs	r2, r0, r7
 8000822:	42a3      	cmp	r3, r4
 8000824:	41bf      	sbcs	r7, r7
 8000826:	427f      	negs	r7, r7
 8000828:	46b9      	mov	r9, r7
 800082a:	0017      	movs	r7, r2
 800082c:	464a      	mov	r2, r9
 800082e:	1abf      	subs	r7, r7, r2
 8000830:	023a      	lsls	r2, r7, #8
 8000832:	d500      	bpl.n	8000836 <__aeabi_dadd+0x38e>
 8000834:	e08d      	b.n	8000952 <__aeabi_dadd+0x4aa>
 8000836:	0023      	movs	r3, r4
 8000838:	433b      	orrs	r3, r7
 800083a:	d000      	beq.n	800083e <__aeabi_dadd+0x396>
 800083c:	e68a      	b.n	8000554 <__aeabi_dadd+0xac>
 800083e:	2000      	movs	r0, #0
 8000840:	2500      	movs	r5, #0
 8000842:	e761      	b.n	8000708 <__aeabi_dadd+0x260>
 8000844:	4cb4      	ldr	r4, [pc, #720]	; (8000b18 <__aeabi_dadd+0x670>)
 8000846:	45a1      	cmp	r9, r4
 8000848:	d100      	bne.n	800084c <__aeabi_dadd+0x3a4>
 800084a:	e0ad      	b.n	80009a8 <__aeabi_dadd+0x500>
 800084c:	2480      	movs	r4, #128	; 0x80
 800084e:	0424      	lsls	r4, r4, #16
 8000850:	4320      	orrs	r0, r4
 8000852:	4664      	mov	r4, ip
 8000854:	2c38      	cmp	r4, #56	; 0x38
 8000856:	dc3d      	bgt.n	80008d4 <__aeabi_dadd+0x42c>
 8000858:	4662      	mov	r2, ip
 800085a:	2c1f      	cmp	r4, #31
 800085c:	dd00      	ble.n	8000860 <__aeabi_dadd+0x3b8>
 800085e:	e0b7      	b.n	80009d0 <__aeabi_dadd+0x528>
 8000860:	2520      	movs	r5, #32
 8000862:	001e      	movs	r6, r3
 8000864:	1b2d      	subs	r5, r5, r4
 8000866:	0004      	movs	r4, r0
 8000868:	40ab      	lsls	r3, r5
 800086a:	40ac      	lsls	r4, r5
 800086c:	40d6      	lsrs	r6, r2
 800086e:	40d0      	lsrs	r0, r2
 8000870:	4642      	mov	r2, r8
 8000872:	1e5d      	subs	r5, r3, #1
 8000874:	41ab      	sbcs	r3, r5
 8000876:	4334      	orrs	r4, r6
 8000878:	1a12      	subs	r2, r2, r0
 800087a:	4690      	mov	r8, r2
 800087c:	4323      	orrs	r3, r4
 800087e:	e02c      	b.n	80008da <__aeabi_dadd+0x432>
 8000880:	0742      	lsls	r2, r0, #29
 8000882:	08db      	lsrs	r3, r3, #3
 8000884:	4313      	orrs	r3, r2
 8000886:	08c0      	lsrs	r0, r0, #3
 8000888:	e73b      	b.n	8000702 <__aeabi_dadd+0x25a>
 800088a:	185c      	adds	r4, r3, r1
 800088c:	429c      	cmp	r4, r3
 800088e:	419b      	sbcs	r3, r3
 8000890:	4440      	add	r0, r8
 8000892:	425b      	negs	r3, r3
 8000894:	18c7      	adds	r7, r0, r3
 8000896:	2601      	movs	r6, #1
 8000898:	023b      	lsls	r3, r7, #8
 800089a:	d400      	bmi.n	800089e <__aeabi_dadd+0x3f6>
 800089c:	e729      	b.n	80006f2 <__aeabi_dadd+0x24a>
 800089e:	2602      	movs	r6, #2
 80008a0:	4a9e      	ldr	r2, [pc, #632]	; (8000b1c <__aeabi_dadd+0x674>)
 80008a2:	0863      	lsrs	r3, r4, #1
 80008a4:	4017      	ands	r7, r2
 80008a6:	2201      	movs	r2, #1
 80008a8:	4014      	ands	r4, r2
 80008aa:	431c      	orrs	r4, r3
 80008ac:	07fb      	lsls	r3, r7, #31
 80008ae:	431c      	orrs	r4, r3
 80008b0:	087f      	lsrs	r7, r7, #1
 80008b2:	e673      	b.n	800059c <__aeabi_dadd+0xf4>
 80008b4:	4644      	mov	r4, r8
 80008b6:	3a20      	subs	r2, #32
 80008b8:	40d4      	lsrs	r4, r2
 80008ba:	4662      	mov	r2, ip
 80008bc:	2a20      	cmp	r2, #32
 80008be:	d005      	beq.n	80008cc <__aeabi_dadd+0x424>
 80008c0:	4667      	mov	r7, ip
 80008c2:	2240      	movs	r2, #64	; 0x40
 80008c4:	1bd2      	subs	r2, r2, r7
 80008c6:	4647      	mov	r7, r8
 80008c8:	4097      	lsls	r7, r2
 80008ca:	4339      	orrs	r1, r7
 80008cc:	1e4a      	subs	r2, r1, #1
 80008ce:	4191      	sbcs	r1, r2
 80008d0:	4321      	orrs	r1, r4
 80008d2:	e635      	b.n	8000540 <__aeabi_dadd+0x98>
 80008d4:	4303      	orrs	r3, r0
 80008d6:	1e58      	subs	r0, r3, #1
 80008d8:	4183      	sbcs	r3, r0
 80008da:	1acc      	subs	r4, r1, r3
 80008dc:	42a1      	cmp	r1, r4
 80008de:	41bf      	sbcs	r7, r7
 80008e0:	4643      	mov	r3, r8
 80008e2:	427f      	negs	r7, r7
 80008e4:	4655      	mov	r5, sl
 80008e6:	464e      	mov	r6, r9
 80008e8:	1bdf      	subs	r7, r3, r7
 80008ea:	e62e      	b.n	800054a <__aeabi_dadd+0xa2>
 80008ec:	0002      	movs	r2, r0
 80008ee:	431a      	orrs	r2, r3
 80008f0:	d100      	bne.n	80008f4 <__aeabi_dadd+0x44c>
 80008f2:	e0bd      	b.n	8000a70 <__aeabi_dadd+0x5c8>
 80008f4:	4662      	mov	r2, ip
 80008f6:	4664      	mov	r4, ip
 80008f8:	3a01      	subs	r2, #1
 80008fa:	2c01      	cmp	r4, #1
 80008fc:	d100      	bne.n	8000900 <__aeabi_dadd+0x458>
 80008fe:	e0e5      	b.n	8000acc <__aeabi_dadd+0x624>
 8000900:	4c85      	ldr	r4, [pc, #532]	; (8000b18 <__aeabi_dadd+0x670>)
 8000902:	45a4      	cmp	ip, r4
 8000904:	d058      	beq.n	80009b8 <__aeabi_dadd+0x510>
 8000906:	4694      	mov	ip, r2
 8000908:	e749      	b.n	800079e <__aeabi_dadd+0x2f6>
 800090a:	4664      	mov	r4, ip
 800090c:	2220      	movs	r2, #32
 800090e:	1b12      	subs	r2, r2, r4
 8000910:	4644      	mov	r4, r8
 8000912:	4094      	lsls	r4, r2
 8000914:	000f      	movs	r7, r1
 8000916:	46a1      	mov	r9, r4
 8000918:	4664      	mov	r4, ip
 800091a:	4091      	lsls	r1, r2
 800091c:	40e7      	lsrs	r7, r4
 800091e:	464c      	mov	r4, r9
 8000920:	1e4a      	subs	r2, r1, #1
 8000922:	4191      	sbcs	r1, r2
 8000924:	433c      	orrs	r4, r7
 8000926:	4642      	mov	r2, r8
 8000928:	430c      	orrs	r4, r1
 800092a:	4661      	mov	r1, ip
 800092c:	40ca      	lsrs	r2, r1
 800092e:	1880      	adds	r0, r0, r2
 8000930:	e6f4      	b.n	800071c <__aeabi_dadd+0x274>
 8000932:	4c79      	ldr	r4, [pc, #484]	; (8000b18 <__aeabi_dadd+0x670>)
 8000934:	42a2      	cmp	r2, r4
 8000936:	d100      	bne.n	800093a <__aeabi_dadd+0x492>
 8000938:	e6fd      	b.n	8000736 <__aeabi_dadd+0x28e>
 800093a:	1859      	adds	r1, r3, r1
 800093c:	4299      	cmp	r1, r3
 800093e:	419b      	sbcs	r3, r3
 8000940:	4440      	add	r0, r8
 8000942:	425f      	negs	r7, r3
 8000944:	19c7      	adds	r7, r0, r7
 8000946:	07fc      	lsls	r4, r7, #31
 8000948:	0849      	lsrs	r1, r1, #1
 800094a:	0016      	movs	r6, r2
 800094c:	430c      	orrs	r4, r1
 800094e:	087f      	lsrs	r7, r7, #1
 8000950:	e6cf      	b.n	80006f2 <__aeabi_dadd+0x24a>
 8000952:	1acc      	subs	r4, r1, r3
 8000954:	42a1      	cmp	r1, r4
 8000956:	41bf      	sbcs	r7, r7
 8000958:	4643      	mov	r3, r8
 800095a:	427f      	negs	r7, r7
 800095c:	1a18      	subs	r0, r3, r0
 800095e:	4655      	mov	r5, sl
 8000960:	1bc7      	subs	r7, r0, r7
 8000962:	e5f7      	b.n	8000554 <__aeabi_dadd+0xac>
 8000964:	08c9      	lsrs	r1, r1, #3
 8000966:	077b      	lsls	r3, r7, #29
 8000968:	4655      	mov	r5, sl
 800096a:	430b      	orrs	r3, r1
 800096c:	08f8      	lsrs	r0, r7, #3
 800096e:	e6c8      	b.n	8000702 <__aeabi_dadd+0x25a>
 8000970:	2c00      	cmp	r4, #0
 8000972:	d000      	beq.n	8000976 <__aeabi_dadd+0x4ce>
 8000974:	e081      	b.n	8000a7a <__aeabi_dadd+0x5d2>
 8000976:	4643      	mov	r3, r8
 8000978:	430b      	orrs	r3, r1
 800097a:	d115      	bne.n	80009a8 <__aeabi_dadd+0x500>
 800097c:	2080      	movs	r0, #128	; 0x80
 800097e:	2500      	movs	r5, #0
 8000980:	0300      	lsls	r0, r0, #12
 8000982:	e6e3      	b.n	800074c <__aeabi_dadd+0x2a4>
 8000984:	1a5c      	subs	r4, r3, r1
 8000986:	42a3      	cmp	r3, r4
 8000988:	419b      	sbcs	r3, r3
 800098a:	1bc7      	subs	r7, r0, r7
 800098c:	425b      	negs	r3, r3
 800098e:	2601      	movs	r6, #1
 8000990:	1aff      	subs	r7, r7, r3
 8000992:	e5da      	b.n	800054a <__aeabi_dadd+0xa2>
 8000994:	0742      	lsls	r2, r0, #29
 8000996:	08db      	lsrs	r3, r3, #3
 8000998:	4313      	orrs	r3, r2
 800099a:	08c0      	lsrs	r0, r0, #3
 800099c:	e6d2      	b.n	8000744 <__aeabi_dadd+0x29c>
 800099e:	0742      	lsls	r2, r0, #29
 80009a0:	08db      	lsrs	r3, r3, #3
 80009a2:	4313      	orrs	r3, r2
 80009a4:	08c0      	lsrs	r0, r0, #3
 80009a6:	e6ac      	b.n	8000702 <__aeabi_dadd+0x25a>
 80009a8:	4643      	mov	r3, r8
 80009aa:	4642      	mov	r2, r8
 80009ac:	08c9      	lsrs	r1, r1, #3
 80009ae:	075b      	lsls	r3, r3, #29
 80009b0:	4655      	mov	r5, sl
 80009b2:	430b      	orrs	r3, r1
 80009b4:	08d0      	lsrs	r0, r2, #3
 80009b6:	e6c5      	b.n	8000744 <__aeabi_dadd+0x29c>
 80009b8:	4643      	mov	r3, r8
 80009ba:	4642      	mov	r2, r8
 80009bc:	075b      	lsls	r3, r3, #29
 80009be:	08c9      	lsrs	r1, r1, #3
 80009c0:	430b      	orrs	r3, r1
 80009c2:	08d0      	lsrs	r0, r2, #3
 80009c4:	e6be      	b.n	8000744 <__aeabi_dadd+0x29c>
 80009c6:	4303      	orrs	r3, r0
 80009c8:	001c      	movs	r4, r3
 80009ca:	1e63      	subs	r3, r4, #1
 80009cc:	419c      	sbcs	r4, r3
 80009ce:	e6fc      	b.n	80007ca <__aeabi_dadd+0x322>
 80009d0:	0002      	movs	r2, r0
 80009d2:	3c20      	subs	r4, #32
 80009d4:	40e2      	lsrs	r2, r4
 80009d6:	0014      	movs	r4, r2
 80009d8:	4662      	mov	r2, ip
 80009da:	2a20      	cmp	r2, #32
 80009dc:	d003      	beq.n	80009e6 <__aeabi_dadd+0x53e>
 80009de:	2540      	movs	r5, #64	; 0x40
 80009e0:	1aad      	subs	r5, r5, r2
 80009e2:	40a8      	lsls	r0, r5
 80009e4:	4303      	orrs	r3, r0
 80009e6:	1e58      	subs	r0, r3, #1
 80009e8:	4183      	sbcs	r3, r0
 80009ea:	4323      	orrs	r3, r4
 80009ec:	e775      	b.n	80008da <__aeabi_dadd+0x432>
 80009ee:	2a00      	cmp	r2, #0
 80009f0:	d0e2      	beq.n	80009b8 <__aeabi_dadd+0x510>
 80009f2:	003a      	movs	r2, r7
 80009f4:	430a      	orrs	r2, r1
 80009f6:	d0cd      	beq.n	8000994 <__aeabi_dadd+0x4ec>
 80009f8:	0742      	lsls	r2, r0, #29
 80009fa:	08db      	lsrs	r3, r3, #3
 80009fc:	4313      	orrs	r3, r2
 80009fe:	2280      	movs	r2, #128	; 0x80
 8000a00:	08c0      	lsrs	r0, r0, #3
 8000a02:	0312      	lsls	r2, r2, #12
 8000a04:	4210      	tst	r0, r2
 8000a06:	d006      	beq.n	8000a16 <__aeabi_dadd+0x56e>
 8000a08:	08fc      	lsrs	r4, r7, #3
 8000a0a:	4214      	tst	r4, r2
 8000a0c:	d103      	bne.n	8000a16 <__aeabi_dadd+0x56e>
 8000a0e:	0020      	movs	r0, r4
 8000a10:	08cb      	lsrs	r3, r1, #3
 8000a12:	077a      	lsls	r2, r7, #29
 8000a14:	4313      	orrs	r3, r2
 8000a16:	0f5a      	lsrs	r2, r3, #29
 8000a18:	00db      	lsls	r3, r3, #3
 8000a1a:	0752      	lsls	r2, r2, #29
 8000a1c:	08db      	lsrs	r3, r3, #3
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	e690      	b.n	8000744 <__aeabi_dadd+0x29c>
 8000a22:	4643      	mov	r3, r8
 8000a24:	430b      	orrs	r3, r1
 8000a26:	d100      	bne.n	8000a2a <__aeabi_dadd+0x582>
 8000a28:	e709      	b.n	800083e <__aeabi_dadd+0x396>
 8000a2a:	4643      	mov	r3, r8
 8000a2c:	4642      	mov	r2, r8
 8000a2e:	08c9      	lsrs	r1, r1, #3
 8000a30:	075b      	lsls	r3, r3, #29
 8000a32:	4655      	mov	r5, sl
 8000a34:	430b      	orrs	r3, r1
 8000a36:	08d0      	lsrs	r0, r2, #3
 8000a38:	e666      	b.n	8000708 <__aeabi_dadd+0x260>
 8000a3a:	1acc      	subs	r4, r1, r3
 8000a3c:	42a1      	cmp	r1, r4
 8000a3e:	4189      	sbcs	r1, r1
 8000a40:	1a3f      	subs	r7, r7, r0
 8000a42:	4249      	negs	r1, r1
 8000a44:	4655      	mov	r5, sl
 8000a46:	2601      	movs	r6, #1
 8000a48:	1a7f      	subs	r7, r7, r1
 8000a4a:	e57e      	b.n	800054a <__aeabi_dadd+0xa2>
 8000a4c:	4642      	mov	r2, r8
 8000a4e:	1a5c      	subs	r4, r3, r1
 8000a50:	1a87      	subs	r7, r0, r2
 8000a52:	42a3      	cmp	r3, r4
 8000a54:	4192      	sbcs	r2, r2
 8000a56:	4252      	negs	r2, r2
 8000a58:	1abf      	subs	r7, r7, r2
 8000a5a:	023a      	lsls	r2, r7, #8
 8000a5c:	d53d      	bpl.n	8000ada <__aeabi_dadd+0x632>
 8000a5e:	1acc      	subs	r4, r1, r3
 8000a60:	42a1      	cmp	r1, r4
 8000a62:	4189      	sbcs	r1, r1
 8000a64:	4643      	mov	r3, r8
 8000a66:	4249      	negs	r1, r1
 8000a68:	1a1f      	subs	r7, r3, r0
 8000a6a:	4655      	mov	r5, sl
 8000a6c:	1a7f      	subs	r7, r7, r1
 8000a6e:	e595      	b.n	800059c <__aeabi_dadd+0xf4>
 8000a70:	077b      	lsls	r3, r7, #29
 8000a72:	08c9      	lsrs	r1, r1, #3
 8000a74:	430b      	orrs	r3, r1
 8000a76:	08f8      	lsrs	r0, r7, #3
 8000a78:	e643      	b.n	8000702 <__aeabi_dadd+0x25a>
 8000a7a:	4644      	mov	r4, r8
 8000a7c:	08db      	lsrs	r3, r3, #3
 8000a7e:	430c      	orrs	r4, r1
 8000a80:	d130      	bne.n	8000ae4 <__aeabi_dadd+0x63c>
 8000a82:	0742      	lsls	r2, r0, #29
 8000a84:	4313      	orrs	r3, r2
 8000a86:	08c0      	lsrs	r0, r0, #3
 8000a88:	e65c      	b.n	8000744 <__aeabi_dadd+0x29c>
 8000a8a:	077b      	lsls	r3, r7, #29
 8000a8c:	08c9      	lsrs	r1, r1, #3
 8000a8e:	430b      	orrs	r3, r1
 8000a90:	08f8      	lsrs	r0, r7, #3
 8000a92:	e639      	b.n	8000708 <__aeabi_dadd+0x260>
 8000a94:	185c      	adds	r4, r3, r1
 8000a96:	429c      	cmp	r4, r3
 8000a98:	419b      	sbcs	r3, r3
 8000a9a:	4440      	add	r0, r8
 8000a9c:	425b      	negs	r3, r3
 8000a9e:	18c7      	adds	r7, r0, r3
 8000aa0:	023b      	lsls	r3, r7, #8
 8000aa2:	d400      	bmi.n	8000aa6 <__aeabi_dadd+0x5fe>
 8000aa4:	e625      	b.n	80006f2 <__aeabi_dadd+0x24a>
 8000aa6:	4b1d      	ldr	r3, [pc, #116]	; (8000b1c <__aeabi_dadd+0x674>)
 8000aa8:	2601      	movs	r6, #1
 8000aaa:	401f      	ands	r7, r3
 8000aac:	e621      	b.n	80006f2 <__aeabi_dadd+0x24a>
 8000aae:	0004      	movs	r4, r0
 8000ab0:	3a20      	subs	r2, #32
 8000ab2:	40d4      	lsrs	r4, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	2a20      	cmp	r2, #32
 8000ab8:	d004      	beq.n	8000ac4 <__aeabi_dadd+0x61c>
 8000aba:	2240      	movs	r2, #64	; 0x40
 8000abc:	4666      	mov	r6, ip
 8000abe:	1b92      	subs	r2, r2, r6
 8000ac0:	4090      	lsls	r0, r2
 8000ac2:	4303      	orrs	r3, r0
 8000ac4:	1e5a      	subs	r2, r3, #1
 8000ac6:	4193      	sbcs	r3, r2
 8000ac8:	431c      	orrs	r4, r3
 8000aca:	e67e      	b.n	80007ca <__aeabi_dadd+0x322>
 8000acc:	185c      	adds	r4, r3, r1
 8000ace:	428c      	cmp	r4, r1
 8000ad0:	4189      	sbcs	r1, r1
 8000ad2:	4440      	add	r0, r8
 8000ad4:	4249      	negs	r1, r1
 8000ad6:	1847      	adds	r7, r0, r1
 8000ad8:	e6dd      	b.n	8000896 <__aeabi_dadd+0x3ee>
 8000ada:	0023      	movs	r3, r4
 8000adc:	433b      	orrs	r3, r7
 8000ade:	d100      	bne.n	8000ae2 <__aeabi_dadd+0x63a>
 8000ae0:	e6ad      	b.n	800083e <__aeabi_dadd+0x396>
 8000ae2:	e606      	b.n	80006f2 <__aeabi_dadd+0x24a>
 8000ae4:	0744      	lsls	r4, r0, #29
 8000ae6:	4323      	orrs	r3, r4
 8000ae8:	2480      	movs	r4, #128	; 0x80
 8000aea:	08c0      	lsrs	r0, r0, #3
 8000aec:	0324      	lsls	r4, r4, #12
 8000aee:	4220      	tst	r0, r4
 8000af0:	d008      	beq.n	8000b04 <__aeabi_dadd+0x65c>
 8000af2:	4642      	mov	r2, r8
 8000af4:	08d6      	lsrs	r6, r2, #3
 8000af6:	4226      	tst	r6, r4
 8000af8:	d104      	bne.n	8000b04 <__aeabi_dadd+0x65c>
 8000afa:	4655      	mov	r5, sl
 8000afc:	0030      	movs	r0, r6
 8000afe:	08cb      	lsrs	r3, r1, #3
 8000b00:	0751      	lsls	r1, r2, #29
 8000b02:	430b      	orrs	r3, r1
 8000b04:	0f5a      	lsrs	r2, r3, #29
 8000b06:	00db      	lsls	r3, r3, #3
 8000b08:	08db      	lsrs	r3, r3, #3
 8000b0a:	0752      	lsls	r2, r2, #29
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	e619      	b.n	8000744 <__aeabi_dadd+0x29c>
 8000b10:	2300      	movs	r3, #0
 8000b12:	4a01      	ldr	r2, [pc, #4]	; (8000b18 <__aeabi_dadd+0x670>)
 8000b14:	001f      	movs	r7, r3
 8000b16:	e55e      	b.n	80005d6 <__aeabi_dadd+0x12e>
 8000b18:	000007ff 	.word	0x000007ff
 8000b1c:	ff7fffff 	.word	0xff7fffff

08000b20 <__aeabi_ddiv>:
 8000b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b22:	4657      	mov	r7, sl
 8000b24:	464e      	mov	r6, r9
 8000b26:	4645      	mov	r5, r8
 8000b28:	46de      	mov	lr, fp
 8000b2a:	b5e0      	push	{r5, r6, r7, lr}
 8000b2c:	4681      	mov	r9, r0
 8000b2e:	0005      	movs	r5, r0
 8000b30:	030c      	lsls	r4, r1, #12
 8000b32:	0048      	lsls	r0, r1, #1
 8000b34:	4692      	mov	sl, r2
 8000b36:	001f      	movs	r7, r3
 8000b38:	b085      	sub	sp, #20
 8000b3a:	0b24      	lsrs	r4, r4, #12
 8000b3c:	0d40      	lsrs	r0, r0, #21
 8000b3e:	0fce      	lsrs	r6, r1, #31
 8000b40:	2800      	cmp	r0, #0
 8000b42:	d100      	bne.n	8000b46 <__aeabi_ddiv+0x26>
 8000b44:	e156      	b.n	8000df4 <__aeabi_ddiv+0x2d4>
 8000b46:	4bd4      	ldr	r3, [pc, #848]	; (8000e98 <__aeabi_ddiv+0x378>)
 8000b48:	4298      	cmp	r0, r3
 8000b4a:	d100      	bne.n	8000b4e <__aeabi_ddiv+0x2e>
 8000b4c:	e172      	b.n	8000e34 <__aeabi_ddiv+0x314>
 8000b4e:	0f6b      	lsrs	r3, r5, #29
 8000b50:	00e4      	lsls	r4, r4, #3
 8000b52:	431c      	orrs	r4, r3
 8000b54:	2380      	movs	r3, #128	; 0x80
 8000b56:	041b      	lsls	r3, r3, #16
 8000b58:	4323      	orrs	r3, r4
 8000b5a:	4698      	mov	r8, r3
 8000b5c:	4bcf      	ldr	r3, [pc, #828]	; (8000e9c <__aeabi_ddiv+0x37c>)
 8000b5e:	00ed      	lsls	r5, r5, #3
 8000b60:	469b      	mov	fp, r3
 8000b62:	2300      	movs	r3, #0
 8000b64:	4699      	mov	r9, r3
 8000b66:	4483      	add	fp, r0
 8000b68:	9300      	str	r3, [sp, #0]
 8000b6a:	033c      	lsls	r4, r7, #12
 8000b6c:	007b      	lsls	r3, r7, #1
 8000b6e:	4650      	mov	r0, sl
 8000b70:	0b24      	lsrs	r4, r4, #12
 8000b72:	0d5b      	lsrs	r3, r3, #21
 8000b74:	0fff      	lsrs	r7, r7, #31
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d100      	bne.n	8000b7c <__aeabi_ddiv+0x5c>
 8000b7a:	e11f      	b.n	8000dbc <__aeabi_ddiv+0x29c>
 8000b7c:	4ac6      	ldr	r2, [pc, #792]	; (8000e98 <__aeabi_ddiv+0x378>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d100      	bne.n	8000b84 <__aeabi_ddiv+0x64>
 8000b82:	e162      	b.n	8000e4a <__aeabi_ddiv+0x32a>
 8000b84:	49c5      	ldr	r1, [pc, #788]	; (8000e9c <__aeabi_ddiv+0x37c>)
 8000b86:	0f42      	lsrs	r2, r0, #29
 8000b88:	468c      	mov	ip, r1
 8000b8a:	00e4      	lsls	r4, r4, #3
 8000b8c:	4659      	mov	r1, fp
 8000b8e:	4314      	orrs	r4, r2
 8000b90:	2280      	movs	r2, #128	; 0x80
 8000b92:	4463      	add	r3, ip
 8000b94:	0412      	lsls	r2, r2, #16
 8000b96:	1acb      	subs	r3, r1, r3
 8000b98:	4314      	orrs	r4, r2
 8000b9a:	469b      	mov	fp, r3
 8000b9c:	00c2      	lsls	r2, r0, #3
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	0033      	movs	r3, r6
 8000ba2:	407b      	eors	r3, r7
 8000ba4:	469a      	mov	sl, r3
 8000ba6:	464b      	mov	r3, r9
 8000ba8:	2b0f      	cmp	r3, #15
 8000baa:	d827      	bhi.n	8000bfc <__aeabi_ddiv+0xdc>
 8000bac:	49bc      	ldr	r1, [pc, #752]	; (8000ea0 <__aeabi_ddiv+0x380>)
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	58cb      	ldr	r3, [r1, r3]
 8000bb2:	469f      	mov	pc, r3
 8000bb4:	46b2      	mov	sl, r6
 8000bb6:	9b00      	ldr	r3, [sp, #0]
 8000bb8:	2b02      	cmp	r3, #2
 8000bba:	d016      	beq.n	8000bea <__aeabi_ddiv+0xca>
 8000bbc:	2b03      	cmp	r3, #3
 8000bbe:	d100      	bne.n	8000bc2 <__aeabi_ddiv+0xa2>
 8000bc0:	e28e      	b.n	80010e0 <__aeabi_ddiv+0x5c0>
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d000      	beq.n	8000bc8 <__aeabi_ddiv+0xa8>
 8000bc6:	e0d9      	b.n	8000d7c <__aeabi_ddiv+0x25c>
 8000bc8:	2300      	movs	r3, #0
 8000bca:	2400      	movs	r4, #0
 8000bcc:	2500      	movs	r5, #0
 8000bce:	4652      	mov	r2, sl
 8000bd0:	051b      	lsls	r3, r3, #20
 8000bd2:	4323      	orrs	r3, r4
 8000bd4:	07d2      	lsls	r2, r2, #31
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	0028      	movs	r0, r5
 8000bda:	0019      	movs	r1, r3
 8000bdc:	b005      	add	sp, #20
 8000bde:	bcf0      	pop	{r4, r5, r6, r7}
 8000be0:	46bb      	mov	fp, r7
 8000be2:	46b2      	mov	sl, r6
 8000be4:	46a9      	mov	r9, r5
 8000be6:	46a0      	mov	r8, r4
 8000be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bea:	2400      	movs	r4, #0
 8000bec:	2500      	movs	r5, #0
 8000bee:	4baa      	ldr	r3, [pc, #680]	; (8000e98 <__aeabi_ddiv+0x378>)
 8000bf0:	e7ed      	b.n	8000bce <__aeabi_ddiv+0xae>
 8000bf2:	46ba      	mov	sl, r7
 8000bf4:	46a0      	mov	r8, r4
 8000bf6:	0015      	movs	r5, r2
 8000bf8:	9000      	str	r0, [sp, #0]
 8000bfa:	e7dc      	b.n	8000bb6 <__aeabi_ddiv+0x96>
 8000bfc:	4544      	cmp	r4, r8
 8000bfe:	d200      	bcs.n	8000c02 <__aeabi_ddiv+0xe2>
 8000c00:	e1c7      	b.n	8000f92 <__aeabi_ddiv+0x472>
 8000c02:	d100      	bne.n	8000c06 <__aeabi_ddiv+0xe6>
 8000c04:	e1c2      	b.n	8000f8c <__aeabi_ddiv+0x46c>
 8000c06:	2301      	movs	r3, #1
 8000c08:	425b      	negs	r3, r3
 8000c0a:	469c      	mov	ip, r3
 8000c0c:	002e      	movs	r6, r5
 8000c0e:	4640      	mov	r0, r8
 8000c10:	2500      	movs	r5, #0
 8000c12:	44e3      	add	fp, ip
 8000c14:	0223      	lsls	r3, r4, #8
 8000c16:	0e14      	lsrs	r4, r2, #24
 8000c18:	431c      	orrs	r4, r3
 8000c1a:	0c1b      	lsrs	r3, r3, #16
 8000c1c:	4699      	mov	r9, r3
 8000c1e:	0423      	lsls	r3, r4, #16
 8000c20:	0c1f      	lsrs	r7, r3, #16
 8000c22:	0212      	lsls	r2, r2, #8
 8000c24:	4649      	mov	r1, r9
 8000c26:	9200      	str	r2, [sp, #0]
 8000c28:	9701      	str	r7, [sp, #4]
 8000c2a:	f7ff fb0f 	bl	800024c <__aeabi_uidivmod>
 8000c2e:	0002      	movs	r2, r0
 8000c30:	437a      	muls	r2, r7
 8000c32:	040b      	lsls	r3, r1, #16
 8000c34:	0c31      	lsrs	r1, r6, #16
 8000c36:	4680      	mov	r8, r0
 8000c38:	4319      	orrs	r1, r3
 8000c3a:	428a      	cmp	r2, r1
 8000c3c:	d907      	bls.n	8000c4e <__aeabi_ddiv+0x12e>
 8000c3e:	2301      	movs	r3, #1
 8000c40:	425b      	negs	r3, r3
 8000c42:	469c      	mov	ip, r3
 8000c44:	1909      	adds	r1, r1, r4
 8000c46:	44e0      	add	r8, ip
 8000c48:	428c      	cmp	r4, r1
 8000c4a:	d800      	bhi.n	8000c4e <__aeabi_ddiv+0x12e>
 8000c4c:	e207      	b.n	800105e <__aeabi_ddiv+0x53e>
 8000c4e:	1a88      	subs	r0, r1, r2
 8000c50:	4649      	mov	r1, r9
 8000c52:	f7ff fafb 	bl	800024c <__aeabi_uidivmod>
 8000c56:	0409      	lsls	r1, r1, #16
 8000c58:	468c      	mov	ip, r1
 8000c5a:	0431      	lsls	r1, r6, #16
 8000c5c:	4666      	mov	r6, ip
 8000c5e:	9a01      	ldr	r2, [sp, #4]
 8000c60:	0c09      	lsrs	r1, r1, #16
 8000c62:	4342      	muls	r2, r0
 8000c64:	0003      	movs	r3, r0
 8000c66:	4331      	orrs	r1, r6
 8000c68:	428a      	cmp	r2, r1
 8000c6a:	d904      	bls.n	8000c76 <__aeabi_ddiv+0x156>
 8000c6c:	1909      	adds	r1, r1, r4
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	428c      	cmp	r4, r1
 8000c72:	d800      	bhi.n	8000c76 <__aeabi_ddiv+0x156>
 8000c74:	e1ed      	b.n	8001052 <__aeabi_ddiv+0x532>
 8000c76:	1a88      	subs	r0, r1, r2
 8000c78:	4642      	mov	r2, r8
 8000c7a:	0412      	lsls	r2, r2, #16
 8000c7c:	431a      	orrs	r2, r3
 8000c7e:	4690      	mov	r8, r2
 8000c80:	4641      	mov	r1, r8
 8000c82:	9b00      	ldr	r3, [sp, #0]
 8000c84:	040e      	lsls	r6, r1, #16
 8000c86:	0c1b      	lsrs	r3, r3, #16
 8000c88:	001f      	movs	r7, r3
 8000c8a:	9302      	str	r3, [sp, #8]
 8000c8c:	9b00      	ldr	r3, [sp, #0]
 8000c8e:	0c36      	lsrs	r6, r6, #16
 8000c90:	041b      	lsls	r3, r3, #16
 8000c92:	0c19      	lsrs	r1, r3, #16
 8000c94:	000b      	movs	r3, r1
 8000c96:	4373      	muls	r3, r6
 8000c98:	0c12      	lsrs	r2, r2, #16
 8000c9a:	437e      	muls	r6, r7
 8000c9c:	9103      	str	r1, [sp, #12]
 8000c9e:	4351      	muls	r1, r2
 8000ca0:	437a      	muls	r2, r7
 8000ca2:	0c1f      	lsrs	r7, r3, #16
 8000ca4:	46bc      	mov	ip, r7
 8000ca6:	1876      	adds	r6, r6, r1
 8000ca8:	4466      	add	r6, ip
 8000caa:	42b1      	cmp	r1, r6
 8000cac:	d903      	bls.n	8000cb6 <__aeabi_ddiv+0x196>
 8000cae:	2180      	movs	r1, #128	; 0x80
 8000cb0:	0249      	lsls	r1, r1, #9
 8000cb2:	468c      	mov	ip, r1
 8000cb4:	4462      	add	r2, ip
 8000cb6:	0c31      	lsrs	r1, r6, #16
 8000cb8:	188a      	adds	r2, r1, r2
 8000cba:	0431      	lsls	r1, r6, #16
 8000cbc:	041e      	lsls	r6, r3, #16
 8000cbe:	0c36      	lsrs	r6, r6, #16
 8000cc0:	198e      	adds	r6, r1, r6
 8000cc2:	4290      	cmp	r0, r2
 8000cc4:	d302      	bcc.n	8000ccc <__aeabi_ddiv+0x1ac>
 8000cc6:	d112      	bne.n	8000cee <__aeabi_ddiv+0x1ce>
 8000cc8:	42b5      	cmp	r5, r6
 8000cca:	d210      	bcs.n	8000cee <__aeabi_ddiv+0x1ce>
 8000ccc:	4643      	mov	r3, r8
 8000cce:	1e59      	subs	r1, r3, #1
 8000cd0:	9b00      	ldr	r3, [sp, #0]
 8000cd2:	469c      	mov	ip, r3
 8000cd4:	4465      	add	r5, ip
 8000cd6:	001f      	movs	r7, r3
 8000cd8:	429d      	cmp	r5, r3
 8000cda:	419b      	sbcs	r3, r3
 8000cdc:	425b      	negs	r3, r3
 8000cde:	191b      	adds	r3, r3, r4
 8000ce0:	18c0      	adds	r0, r0, r3
 8000ce2:	4284      	cmp	r4, r0
 8000ce4:	d200      	bcs.n	8000ce8 <__aeabi_ddiv+0x1c8>
 8000ce6:	e1a0      	b.n	800102a <__aeabi_ddiv+0x50a>
 8000ce8:	d100      	bne.n	8000cec <__aeabi_ddiv+0x1cc>
 8000cea:	e19b      	b.n	8001024 <__aeabi_ddiv+0x504>
 8000cec:	4688      	mov	r8, r1
 8000cee:	1bae      	subs	r6, r5, r6
 8000cf0:	42b5      	cmp	r5, r6
 8000cf2:	41ad      	sbcs	r5, r5
 8000cf4:	1a80      	subs	r0, r0, r2
 8000cf6:	426d      	negs	r5, r5
 8000cf8:	1b40      	subs	r0, r0, r5
 8000cfa:	4284      	cmp	r4, r0
 8000cfc:	d100      	bne.n	8000d00 <__aeabi_ddiv+0x1e0>
 8000cfe:	e1d5      	b.n	80010ac <__aeabi_ddiv+0x58c>
 8000d00:	4649      	mov	r1, r9
 8000d02:	f7ff faa3 	bl	800024c <__aeabi_uidivmod>
 8000d06:	9a01      	ldr	r2, [sp, #4]
 8000d08:	040b      	lsls	r3, r1, #16
 8000d0a:	4342      	muls	r2, r0
 8000d0c:	0c31      	lsrs	r1, r6, #16
 8000d0e:	0005      	movs	r5, r0
 8000d10:	4319      	orrs	r1, r3
 8000d12:	428a      	cmp	r2, r1
 8000d14:	d900      	bls.n	8000d18 <__aeabi_ddiv+0x1f8>
 8000d16:	e16c      	b.n	8000ff2 <__aeabi_ddiv+0x4d2>
 8000d18:	1a88      	subs	r0, r1, r2
 8000d1a:	4649      	mov	r1, r9
 8000d1c:	f7ff fa96 	bl	800024c <__aeabi_uidivmod>
 8000d20:	9a01      	ldr	r2, [sp, #4]
 8000d22:	0436      	lsls	r6, r6, #16
 8000d24:	4342      	muls	r2, r0
 8000d26:	0409      	lsls	r1, r1, #16
 8000d28:	0c36      	lsrs	r6, r6, #16
 8000d2a:	0003      	movs	r3, r0
 8000d2c:	430e      	orrs	r6, r1
 8000d2e:	42b2      	cmp	r2, r6
 8000d30:	d900      	bls.n	8000d34 <__aeabi_ddiv+0x214>
 8000d32:	e153      	b.n	8000fdc <__aeabi_ddiv+0x4bc>
 8000d34:	9803      	ldr	r0, [sp, #12]
 8000d36:	1ab6      	subs	r6, r6, r2
 8000d38:	0002      	movs	r2, r0
 8000d3a:	042d      	lsls	r5, r5, #16
 8000d3c:	431d      	orrs	r5, r3
 8000d3e:	9f02      	ldr	r7, [sp, #8]
 8000d40:	042b      	lsls	r3, r5, #16
 8000d42:	0c1b      	lsrs	r3, r3, #16
 8000d44:	435a      	muls	r2, r3
 8000d46:	437b      	muls	r3, r7
 8000d48:	469c      	mov	ip, r3
 8000d4a:	0c29      	lsrs	r1, r5, #16
 8000d4c:	4348      	muls	r0, r1
 8000d4e:	0c13      	lsrs	r3, r2, #16
 8000d50:	4484      	add	ip, r0
 8000d52:	4463      	add	r3, ip
 8000d54:	4379      	muls	r1, r7
 8000d56:	4298      	cmp	r0, r3
 8000d58:	d903      	bls.n	8000d62 <__aeabi_ddiv+0x242>
 8000d5a:	2080      	movs	r0, #128	; 0x80
 8000d5c:	0240      	lsls	r0, r0, #9
 8000d5e:	4684      	mov	ip, r0
 8000d60:	4461      	add	r1, ip
 8000d62:	0c18      	lsrs	r0, r3, #16
 8000d64:	0412      	lsls	r2, r2, #16
 8000d66:	041b      	lsls	r3, r3, #16
 8000d68:	0c12      	lsrs	r2, r2, #16
 8000d6a:	1841      	adds	r1, r0, r1
 8000d6c:	189b      	adds	r3, r3, r2
 8000d6e:	428e      	cmp	r6, r1
 8000d70:	d200      	bcs.n	8000d74 <__aeabi_ddiv+0x254>
 8000d72:	e0ff      	b.n	8000f74 <__aeabi_ddiv+0x454>
 8000d74:	d100      	bne.n	8000d78 <__aeabi_ddiv+0x258>
 8000d76:	e0fa      	b.n	8000f6e <__aeabi_ddiv+0x44e>
 8000d78:	2301      	movs	r3, #1
 8000d7a:	431d      	orrs	r5, r3
 8000d7c:	4a49      	ldr	r2, [pc, #292]	; (8000ea4 <__aeabi_ddiv+0x384>)
 8000d7e:	445a      	add	r2, fp
 8000d80:	2a00      	cmp	r2, #0
 8000d82:	dc00      	bgt.n	8000d86 <__aeabi_ddiv+0x266>
 8000d84:	e0aa      	b.n	8000edc <__aeabi_ddiv+0x3bc>
 8000d86:	076b      	lsls	r3, r5, #29
 8000d88:	d000      	beq.n	8000d8c <__aeabi_ddiv+0x26c>
 8000d8a:	e13d      	b.n	8001008 <__aeabi_ddiv+0x4e8>
 8000d8c:	08ed      	lsrs	r5, r5, #3
 8000d8e:	4643      	mov	r3, r8
 8000d90:	01db      	lsls	r3, r3, #7
 8000d92:	d506      	bpl.n	8000da2 <__aeabi_ddiv+0x282>
 8000d94:	4642      	mov	r2, r8
 8000d96:	4b44      	ldr	r3, [pc, #272]	; (8000ea8 <__aeabi_ddiv+0x388>)
 8000d98:	401a      	ands	r2, r3
 8000d9a:	4690      	mov	r8, r2
 8000d9c:	2280      	movs	r2, #128	; 0x80
 8000d9e:	00d2      	lsls	r2, r2, #3
 8000da0:	445a      	add	r2, fp
 8000da2:	4b42      	ldr	r3, [pc, #264]	; (8000eac <__aeabi_ddiv+0x38c>)
 8000da4:	429a      	cmp	r2, r3
 8000da6:	dd00      	ble.n	8000daa <__aeabi_ddiv+0x28a>
 8000da8:	e71f      	b.n	8000bea <__aeabi_ddiv+0xca>
 8000daa:	4643      	mov	r3, r8
 8000dac:	075b      	lsls	r3, r3, #29
 8000dae:	431d      	orrs	r5, r3
 8000db0:	4643      	mov	r3, r8
 8000db2:	0552      	lsls	r2, r2, #21
 8000db4:	025c      	lsls	r4, r3, #9
 8000db6:	0b24      	lsrs	r4, r4, #12
 8000db8:	0d53      	lsrs	r3, r2, #21
 8000dba:	e708      	b.n	8000bce <__aeabi_ddiv+0xae>
 8000dbc:	4652      	mov	r2, sl
 8000dbe:	4322      	orrs	r2, r4
 8000dc0:	d100      	bne.n	8000dc4 <__aeabi_ddiv+0x2a4>
 8000dc2:	e07b      	b.n	8000ebc <__aeabi_ddiv+0x39c>
 8000dc4:	2c00      	cmp	r4, #0
 8000dc6:	d100      	bne.n	8000dca <__aeabi_ddiv+0x2aa>
 8000dc8:	e0fa      	b.n	8000fc0 <__aeabi_ddiv+0x4a0>
 8000dca:	0020      	movs	r0, r4
 8000dcc:	f001 fa22 	bl	8002214 <__clzsi2>
 8000dd0:	0002      	movs	r2, r0
 8000dd2:	3a0b      	subs	r2, #11
 8000dd4:	231d      	movs	r3, #29
 8000dd6:	0001      	movs	r1, r0
 8000dd8:	1a9b      	subs	r3, r3, r2
 8000dda:	4652      	mov	r2, sl
 8000ddc:	3908      	subs	r1, #8
 8000dde:	40da      	lsrs	r2, r3
 8000de0:	408c      	lsls	r4, r1
 8000de2:	4314      	orrs	r4, r2
 8000de4:	4652      	mov	r2, sl
 8000de6:	408a      	lsls	r2, r1
 8000de8:	4b31      	ldr	r3, [pc, #196]	; (8000eb0 <__aeabi_ddiv+0x390>)
 8000dea:	4458      	add	r0, fp
 8000dec:	469b      	mov	fp, r3
 8000dee:	4483      	add	fp, r0
 8000df0:	2000      	movs	r0, #0
 8000df2:	e6d5      	b.n	8000ba0 <__aeabi_ddiv+0x80>
 8000df4:	464b      	mov	r3, r9
 8000df6:	4323      	orrs	r3, r4
 8000df8:	4698      	mov	r8, r3
 8000dfa:	d044      	beq.n	8000e86 <__aeabi_ddiv+0x366>
 8000dfc:	2c00      	cmp	r4, #0
 8000dfe:	d100      	bne.n	8000e02 <__aeabi_ddiv+0x2e2>
 8000e00:	e0ce      	b.n	8000fa0 <__aeabi_ddiv+0x480>
 8000e02:	0020      	movs	r0, r4
 8000e04:	f001 fa06 	bl	8002214 <__clzsi2>
 8000e08:	0001      	movs	r1, r0
 8000e0a:	0002      	movs	r2, r0
 8000e0c:	390b      	subs	r1, #11
 8000e0e:	231d      	movs	r3, #29
 8000e10:	1a5b      	subs	r3, r3, r1
 8000e12:	4649      	mov	r1, r9
 8000e14:	0010      	movs	r0, r2
 8000e16:	40d9      	lsrs	r1, r3
 8000e18:	3808      	subs	r0, #8
 8000e1a:	4084      	lsls	r4, r0
 8000e1c:	000b      	movs	r3, r1
 8000e1e:	464d      	mov	r5, r9
 8000e20:	4323      	orrs	r3, r4
 8000e22:	4698      	mov	r8, r3
 8000e24:	4085      	lsls	r5, r0
 8000e26:	4823      	ldr	r0, [pc, #140]	; (8000eb4 <__aeabi_ddiv+0x394>)
 8000e28:	1a83      	subs	r3, r0, r2
 8000e2a:	469b      	mov	fp, r3
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	4699      	mov	r9, r3
 8000e30:	9300      	str	r3, [sp, #0]
 8000e32:	e69a      	b.n	8000b6a <__aeabi_ddiv+0x4a>
 8000e34:	464b      	mov	r3, r9
 8000e36:	4323      	orrs	r3, r4
 8000e38:	4698      	mov	r8, r3
 8000e3a:	d11d      	bne.n	8000e78 <__aeabi_ddiv+0x358>
 8000e3c:	2308      	movs	r3, #8
 8000e3e:	4699      	mov	r9, r3
 8000e40:	3b06      	subs	r3, #6
 8000e42:	2500      	movs	r5, #0
 8000e44:	4683      	mov	fp, r0
 8000e46:	9300      	str	r3, [sp, #0]
 8000e48:	e68f      	b.n	8000b6a <__aeabi_ddiv+0x4a>
 8000e4a:	4652      	mov	r2, sl
 8000e4c:	4322      	orrs	r2, r4
 8000e4e:	d109      	bne.n	8000e64 <__aeabi_ddiv+0x344>
 8000e50:	2302      	movs	r3, #2
 8000e52:	4649      	mov	r1, r9
 8000e54:	4319      	orrs	r1, r3
 8000e56:	4b18      	ldr	r3, [pc, #96]	; (8000eb8 <__aeabi_ddiv+0x398>)
 8000e58:	4689      	mov	r9, r1
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	2400      	movs	r4, #0
 8000e5e:	2002      	movs	r0, #2
 8000e60:	44e3      	add	fp, ip
 8000e62:	e69d      	b.n	8000ba0 <__aeabi_ddiv+0x80>
 8000e64:	2303      	movs	r3, #3
 8000e66:	464a      	mov	r2, r9
 8000e68:	431a      	orrs	r2, r3
 8000e6a:	4b13      	ldr	r3, [pc, #76]	; (8000eb8 <__aeabi_ddiv+0x398>)
 8000e6c:	4691      	mov	r9, r2
 8000e6e:	469c      	mov	ip, r3
 8000e70:	4652      	mov	r2, sl
 8000e72:	2003      	movs	r0, #3
 8000e74:	44e3      	add	fp, ip
 8000e76:	e693      	b.n	8000ba0 <__aeabi_ddiv+0x80>
 8000e78:	230c      	movs	r3, #12
 8000e7a:	4699      	mov	r9, r3
 8000e7c:	3b09      	subs	r3, #9
 8000e7e:	46a0      	mov	r8, r4
 8000e80:	4683      	mov	fp, r0
 8000e82:	9300      	str	r3, [sp, #0]
 8000e84:	e671      	b.n	8000b6a <__aeabi_ddiv+0x4a>
 8000e86:	2304      	movs	r3, #4
 8000e88:	4699      	mov	r9, r3
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	469b      	mov	fp, r3
 8000e8e:	3301      	adds	r3, #1
 8000e90:	2500      	movs	r5, #0
 8000e92:	9300      	str	r3, [sp, #0]
 8000e94:	e669      	b.n	8000b6a <__aeabi_ddiv+0x4a>
 8000e96:	46c0      	nop			; (mov r8, r8)
 8000e98:	000007ff 	.word	0x000007ff
 8000e9c:	fffffc01 	.word	0xfffffc01
 8000ea0:	08007e00 	.word	0x08007e00
 8000ea4:	000003ff 	.word	0x000003ff
 8000ea8:	feffffff 	.word	0xfeffffff
 8000eac:	000007fe 	.word	0x000007fe
 8000eb0:	000003f3 	.word	0x000003f3
 8000eb4:	fffffc0d 	.word	0xfffffc0d
 8000eb8:	fffff801 	.word	0xfffff801
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	4319      	orrs	r1, r3
 8000ec2:	4689      	mov	r9, r1
 8000ec4:	2400      	movs	r4, #0
 8000ec6:	2001      	movs	r0, #1
 8000ec8:	e66a      	b.n	8000ba0 <__aeabi_ddiv+0x80>
 8000eca:	2300      	movs	r3, #0
 8000ecc:	2480      	movs	r4, #128	; 0x80
 8000ece:	469a      	mov	sl, r3
 8000ed0:	2500      	movs	r5, #0
 8000ed2:	4b8a      	ldr	r3, [pc, #552]	; (80010fc <__aeabi_ddiv+0x5dc>)
 8000ed4:	0324      	lsls	r4, r4, #12
 8000ed6:	e67a      	b.n	8000bce <__aeabi_ddiv+0xae>
 8000ed8:	2501      	movs	r5, #1
 8000eda:	426d      	negs	r5, r5
 8000edc:	2301      	movs	r3, #1
 8000ede:	1a9b      	subs	r3, r3, r2
 8000ee0:	2b38      	cmp	r3, #56	; 0x38
 8000ee2:	dd00      	ble.n	8000ee6 <__aeabi_ddiv+0x3c6>
 8000ee4:	e670      	b.n	8000bc8 <__aeabi_ddiv+0xa8>
 8000ee6:	2b1f      	cmp	r3, #31
 8000ee8:	dc00      	bgt.n	8000eec <__aeabi_ddiv+0x3cc>
 8000eea:	e0bf      	b.n	800106c <__aeabi_ddiv+0x54c>
 8000eec:	211f      	movs	r1, #31
 8000eee:	4249      	negs	r1, r1
 8000ef0:	1a8a      	subs	r2, r1, r2
 8000ef2:	4641      	mov	r1, r8
 8000ef4:	40d1      	lsrs	r1, r2
 8000ef6:	000a      	movs	r2, r1
 8000ef8:	2b20      	cmp	r3, #32
 8000efa:	d004      	beq.n	8000f06 <__aeabi_ddiv+0x3e6>
 8000efc:	4641      	mov	r1, r8
 8000efe:	4b80      	ldr	r3, [pc, #512]	; (8001100 <__aeabi_ddiv+0x5e0>)
 8000f00:	445b      	add	r3, fp
 8000f02:	4099      	lsls	r1, r3
 8000f04:	430d      	orrs	r5, r1
 8000f06:	1e6b      	subs	r3, r5, #1
 8000f08:	419d      	sbcs	r5, r3
 8000f0a:	2307      	movs	r3, #7
 8000f0c:	432a      	orrs	r2, r5
 8000f0e:	001d      	movs	r5, r3
 8000f10:	2400      	movs	r4, #0
 8000f12:	4015      	ands	r5, r2
 8000f14:	4213      	tst	r3, r2
 8000f16:	d100      	bne.n	8000f1a <__aeabi_ddiv+0x3fa>
 8000f18:	e0d4      	b.n	80010c4 <__aeabi_ddiv+0x5a4>
 8000f1a:	210f      	movs	r1, #15
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	4011      	ands	r1, r2
 8000f20:	2904      	cmp	r1, #4
 8000f22:	d100      	bne.n	8000f26 <__aeabi_ddiv+0x406>
 8000f24:	e0cb      	b.n	80010be <__aeabi_ddiv+0x59e>
 8000f26:	1d11      	adds	r1, r2, #4
 8000f28:	4291      	cmp	r1, r2
 8000f2a:	4192      	sbcs	r2, r2
 8000f2c:	4252      	negs	r2, r2
 8000f2e:	189b      	adds	r3, r3, r2
 8000f30:	000a      	movs	r2, r1
 8000f32:	0219      	lsls	r1, r3, #8
 8000f34:	d400      	bmi.n	8000f38 <__aeabi_ddiv+0x418>
 8000f36:	e0c2      	b.n	80010be <__aeabi_ddiv+0x59e>
 8000f38:	2301      	movs	r3, #1
 8000f3a:	2400      	movs	r4, #0
 8000f3c:	2500      	movs	r5, #0
 8000f3e:	e646      	b.n	8000bce <__aeabi_ddiv+0xae>
 8000f40:	2380      	movs	r3, #128	; 0x80
 8000f42:	4641      	mov	r1, r8
 8000f44:	031b      	lsls	r3, r3, #12
 8000f46:	4219      	tst	r1, r3
 8000f48:	d008      	beq.n	8000f5c <__aeabi_ddiv+0x43c>
 8000f4a:	421c      	tst	r4, r3
 8000f4c:	d106      	bne.n	8000f5c <__aeabi_ddiv+0x43c>
 8000f4e:	431c      	orrs	r4, r3
 8000f50:	0324      	lsls	r4, r4, #12
 8000f52:	46ba      	mov	sl, r7
 8000f54:	0015      	movs	r5, r2
 8000f56:	4b69      	ldr	r3, [pc, #420]	; (80010fc <__aeabi_ddiv+0x5dc>)
 8000f58:	0b24      	lsrs	r4, r4, #12
 8000f5a:	e638      	b.n	8000bce <__aeabi_ddiv+0xae>
 8000f5c:	2480      	movs	r4, #128	; 0x80
 8000f5e:	4643      	mov	r3, r8
 8000f60:	0324      	lsls	r4, r4, #12
 8000f62:	431c      	orrs	r4, r3
 8000f64:	0324      	lsls	r4, r4, #12
 8000f66:	46b2      	mov	sl, r6
 8000f68:	4b64      	ldr	r3, [pc, #400]	; (80010fc <__aeabi_ddiv+0x5dc>)
 8000f6a:	0b24      	lsrs	r4, r4, #12
 8000f6c:	e62f      	b.n	8000bce <__aeabi_ddiv+0xae>
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d100      	bne.n	8000f74 <__aeabi_ddiv+0x454>
 8000f72:	e703      	b.n	8000d7c <__aeabi_ddiv+0x25c>
 8000f74:	19a6      	adds	r6, r4, r6
 8000f76:	1e68      	subs	r0, r5, #1
 8000f78:	42a6      	cmp	r6, r4
 8000f7a:	d200      	bcs.n	8000f7e <__aeabi_ddiv+0x45e>
 8000f7c:	e08d      	b.n	800109a <__aeabi_ddiv+0x57a>
 8000f7e:	428e      	cmp	r6, r1
 8000f80:	d200      	bcs.n	8000f84 <__aeabi_ddiv+0x464>
 8000f82:	e0a3      	b.n	80010cc <__aeabi_ddiv+0x5ac>
 8000f84:	d100      	bne.n	8000f88 <__aeabi_ddiv+0x468>
 8000f86:	e0b3      	b.n	80010f0 <__aeabi_ddiv+0x5d0>
 8000f88:	0005      	movs	r5, r0
 8000f8a:	e6f5      	b.n	8000d78 <__aeabi_ddiv+0x258>
 8000f8c:	42aa      	cmp	r2, r5
 8000f8e:	d900      	bls.n	8000f92 <__aeabi_ddiv+0x472>
 8000f90:	e639      	b.n	8000c06 <__aeabi_ddiv+0xe6>
 8000f92:	4643      	mov	r3, r8
 8000f94:	07de      	lsls	r6, r3, #31
 8000f96:	0858      	lsrs	r0, r3, #1
 8000f98:	086b      	lsrs	r3, r5, #1
 8000f9a:	431e      	orrs	r6, r3
 8000f9c:	07ed      	lsls	r5, r5, #31
 8000f9e:	e639      	b.n	8000c14 <__aeabi_ddiv+0xf4>
 8000fa0:	4648      	mov	r0, r9
 8000fa2:	f001 f937 	bl	8002214 <__clzsi2>
 8000fa6:	0001      	movs	r1, r0
 8000fa8:	0002      	movs	r2, r0
 8000faa:	3115      	adds	r1, #21
 8000fac:	3220      	adds	r2, #32
 8000fae:	291c      	cmp	r1, #28
 8000fb0:	dc00      	bgt.n	8000fb4 <__aeabi_ddiv+0x494>
 8000fb2:	e72c      	b.n	8000e0e <__aeabi_ddiv+0x2ee>
 8000fb4:	464b      	mov	r3, r9
 8000fb6:	3808      	subs	r0, #8
 8000fb8:	4083      	lsls	r3, r0
 8000fba:	2500      	movs	r5, #0
 8000fbc:	4698      	mov	r8, r3
 8000fbe:	e732      	b.n	8000e26 <__aeabi_ddiv+0x306>
 8000fc0:	f001 f928 	bl	8002214 <__clzsi2>
 8000fc4:	0003      	movs	r3, r0
 8000fc6:	001a      	movs	r2, r3
 8000fc8:	3215      	adds	r2, #21
 8000fca:	3020      	adds	r0, #32
 8000fcc:	2a1c      	cmp	r2, #28
 8000fce:	dc00      	bgt.n	8000fd2 <__aeabi_ddiv+0x4b2>
 8000fd0:	e700      	b.n	8000dd4 <__aeabi_ddiv+0x2b4>
 8000fd2:	4654      	mov	r4, sl
 8000fd4:	3b08      	subs	r3, #8
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	409c      	lsls	r4, r3
 8000fda:	e705      	b.n	8000de8 <__aeabi_ddiv+0x2c8>
 8000fdc:	1936      	adds	r6, r6, r4
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	42b4      	cmp	r4, r6
 8000fe2:	d900      	bls.n	8000fe6 <__aeabi_ddiv+0x4c6>
 8000fe4:	e6a6      	b.n	8000d34 <__aeabi_ddiv+0x214>
 8000fe6:	42b2      	cmp	r2, r6
 8000fe8:	d800      	bhi.n	8000fec <__aeabi_ddiv+0x4cc>
 8000fea:	e6a3      	b.n	8000d34 <__aeabi_ddiv+0x214>
 8000fec:	1e83      	subs	r3, r0, #2
 8000fee:	1936      	adds	r6, r6, r4
 8000ff0:	e6a0      	b.n	8000d34 <__aeabi_ddiv+0x214>
 8000ff2:	1909      	adds	r1, r1, r4
 8000ff4:	3d01      	subs	r5, #1
 8000ff6:	428c      	cmp	r4, r1
 8000ff8:	d900      	bls.n	8000ffc <__aeabi_ddiv+0x4dc>
 8000ffa:	e68d      	b.n	8000d18 <__aeabi_ddiv+0x1f8>
 8000ffc:	428a      	cmp	r2, r1
 8000ffe:	d800      	bhi.n	8001002 <__aeabi_ddiv+0x4e2>
 8001000:	e68a      	b.n	8000d18 <__aeabi_ddiv+0x1f8>
 8001002:	1e85      	subs	r5, r0, #2
 8001004:	1909      	adds	r1, r1, r4
 8001006:	e687      	b.n	8000d18 <__aeabi_ddiv+0x1f8>
 8001008:	230f      	movs	r3, #15
 800100a:	402b      	ands	r3, r5
 800100c:	2b04      	cmp	r3, #4
 800100e:	d100      	bne.n	8001012 <__aeabi_ddiv+0x4f2>
 8001010:	e6bc      	b.n	8000d8c <__aeabi_ddiv+0x26c>
 8001012:	2305      	movs	r3, #5
 8001014:	425b      	negs	r3, r3
 8001016:	42ab      	cmp	r3, r5
 8001018:	419b      	sbcs	r3, r3
 800101a:	3504      	adds	r5, #4
 800101c:	425b      	negs	r3, r3
 800101e:	08ed      	lsrs	r5, r5, #3
 8001020:	4498      	add	r8, r3
 8001022:	e6b4      	b.n	8000d8e <__aeabi_ddiv+0x26e>
 8001024:	42af      	cmp	r7, r5
 8001026:	d900      	bls.n	800102a <__aeabi_ddiv+0x50a>
 8001028:	e660      	b.n	8000cec <__aeabi_ddiv+0x1cc>
 800102a:	4282      	cmp	r2, r0
 800102c:	d804      	bhi.n	8001038 <__aeabi_ddiv+0x518>
 800102e:	d000      	beq.n	8001032 <__aeabi_ddiv+0x512>
 8001030:	e65c      	b.n	8000cec <__aeabi_ddiv+0x1cc>
 8001032:	42ae      	cmp	r6, r5
 8001034:	d800      	bhi.n	8001038 <__aeabi_ddiv+0x518>
 8001036:	e659      	b.n	8000cec <__aeabi_ddiv+0x1cc>
 8001038:	2302      	movs	r3, #2
 800103a:	425b      	negs	r3, r3
 800103c:	469c      	mov	ip, r3
 800103e:	9b00      	ldr	r3, [sp, #0]
 8001040:	44e0      	add	r8, ip
 8001042:	469c      	mov	ip, r3
 8001044:	4465      	add	r5, ip
 8001046:	429d      	cmp	r5, r3
 8001048:	419b      	sbcs	r3, r3
 800104a:	425b      	negs	r3, r3
 800104c:	191b      	adds	r3, r3, r4
 800104e:	18c0      	adds	r0, r0, r3
 8001050:	e64d      	b.n	8000cee <__aeabi_ddiv+0x1ce>
 8001052:	428a      	cmp	r2, r1
 8001054:	d800      	bhi.n	8001058 <__aeabi_ddiv+0x538>
 8001056:	e60e      	b.n	8000c76 <__aeabi_ddiv+0x156>
 8001058:	1e83      	subs	r3, r0, #2
 800105a:	1909      	adds	r1, r1, r4
 800105c:	e60b      	b.n	8000c76 <__aeabi_ddiv+0x156>
 800105e:	428a      	cmp	r2, r1
 8001060:	d800      	bhi.n	8001064 <__aeabi_ddiv+0x544>
 8001062:	e5f4      	b.n	8000c4e <__aeabi_ddiv+0x12e>
 8001064:	1e83      	subs	r3, r0, #2
 8001066:	4698      	mov	r8, r3
 8001068:	1909      	adds	r1, r1, r4
 800106a:	e5f0      	b.n	8000c4e <__aeabi_ddiv+0x12e>
 800106c:	4925      	ldr	r1, [pc, #148]	; (8001104 <__aeabi_ddiv+0x5e4>)
 800106e:	0028      	movs	r0, r5
 8001070:	4459      	add	r1, fp
 8001072:	408d      	lsls	r5, r1
 8001074:	4642      	mov	r2, r8
 8001076:	408a      	lsls	r2, r1
 8001078:	1e69      	subs	r1, r5, #1
 800107a:	418d      	sbcs	r5, r1
 800107c:	4641      	mov	r1, r8
 800107e:	40d8      	lsrs	r0, r3
 8001080:	40d9      	lsrs	r1, r3
 8001082:	4302      	orrs	r2, r0
 8001084:	432a      	orrs	r2, r5
 8001086:	000b      	movs	r3, r1
 8001088:	0751      	lsls	r1, r2, #29
 800108a:	d100      	bne.n	800108e <__aeabi_ddiv+0x56e>
 800108c:	e751      	b.n	8000f32 <__aeabi_ddiv+0x412>
 800108e:	210f      	movs	r1, #15
 8001090:	4011      	ands	r1, r2
 8001092:	2904      	cmp	r1, #4
 8001094:	d000      	beq.n	8001098 <__aeabi_ddiv+0x578>
 8001096:	e746      	b.n	8000f26 <__aeabi_ddiv+0x406>
 8001098:	e74b      	b.n	8000f32 <__aeabi_ddiv+0x412>
 800109a:	0005      	movs	r5, r0
 800109c:	428e      	cmp	r6, r1
 800109e:	d000      	beq.n	80010a2 <__aeabi_ddiv+0x582>
 80010a0:	e66a      	b.n	8000d78 <__aeabi_ddiv+0x258>
 80010a2:	9a00      	ldr	r2, [sp, #0]
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d000      	beq.n	80010aa <__aeabi_ddiv+0x58a>
 80010a8:	e666      	b.n	8000d78 <__aeabi_ddiv+0x258>
 80010aa:	e667      	b.n	8000d7c <__aeabi_ddiv+0x25c>
 80010ac:	4a16      	ldr	r2, [pc, #88]	; (8001108 <__aeabi_ddiv+0x5e8>)
 80010ae:	445a      	add	r2, fp
 80010b0:	2a00      	cmp	r2, #0
 80010b2:	dc00      	bgt.n	80010b6 <__aeabi_ddiv+0x596>
 80010b4:	e710      	b.n	8000ed8 <__aeabi_ddiv+0x3b8>
 80010b6:	2301      	movs	r3, #1
 80010b8:	2500      	movs	r5, #0
 80010ba:	4498      	add	r8, r3
 80010bc:	e667      	b.n	8000d8e <__aeabi_ddiv+0x26e>
 80010be:	075d      	lsls	r5, r3, #29
 80010c0:	025b      	lsls	r3, r3, #9
 80010c2:	0b1c      	lsrs	r4, r3, #12
 80010c4:	08d2      	lsrs	r2, r2, #3
 80010c6:	2300      	movs	r3, #0
 80010c8:	4315      	orrs	r5, r2
 80010ca:	e580      	b.n	8000bce <__aeabi_ddiv+0xae>
 80010cc:	9800      	ldr	r0, [sp, #0]
 80010ce:	3d02      	subs	r5, #2
 80010d0:	0042      	lsls	r2, r0, #1
 80010d2:	4282      	cmp	r2, r0
 80010d4:	41bf      	sbcs	r7, r7
 80010d6:	427f      	negs	r7, r7
 80010d8:	193c      	adds	r4, r7, r4
 80010da:	1936      	adds	r6, r6, r4
 80010dc:	9200      	str	r2, [sp, #0]
 80010de:	e7dd      	b.n	800109c <__aeabi_ddiv+0x57c>
 80010e0:	2480      	movs	r4, #128	; 0x80
 80010e2:	4643      	mov	r3, r8
 80010e4:	0324      	lsls	r4, r4, #12
 80010e6:	431c      	orrs	r4, r3
 80010e8:	0324      	lsls	r4, r4, #12
 80010ea:	4b04      	ldr	r3, [pc, #16]	; (80010fc <__aeabi_ddiv+0x5dc>)
 80010ec:	0b24      	lsrs	r4, r4, #12
 80010ee:	e56e      	b.n	8000bce <__aeabi_ddiv+0xae>
 80010f0:	9a00      	ldr	r2, [sp, #0]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d3ea      	bcc.n	80010cc <__aeabi_ddiv+0x5ac>
 80010f6:	0005      	movs	r5, r0
 80010f8:	e7d3      	b.n	80010a2 <__aeabi_ddiv+0x582>
 80010fa:	46c0      	nop			; (mov r8, r8)
 80010fc:	000007ff 	.word	0x000007ff
 8001100:	0000043e 	.word	0x0000043e
 8001104:	0000041e 	.word	0x0000041e
 8001108:	000003ff 	.word	0x000003ff

0800110c <__eqdf2>:
 800110c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800110e:	464e      	mov	r6, r9
 8001110:	4645      	mov	r5, r8
 8001112:	46de      	mov	lr, fp
 8001114:	4657      	mov	r7, sl
 8001116:	4690      	mov	r8, r2
 8001118:	b5e0      	push	{r5, r6, r7, lr}
 800111a:	0017      	movs	r7, r2
 800111c:	031a      	lsls	r2, r3, #12
 800111e:	0b12      	lsrs	r2, r2, #12
 8001120:	0005      	movs	r5, r0
 8001122:	4684      	mov	ip, r0
 8001124:	4819      	ldr	r0, [pc, #100]	; (800118c <__eqdf2+0x80>)
 8001126:	030e      	lsls	r6, r1, #12
 8001128:	004c      	lsls	r4, r1, #1
 800112a:	4691      	mov	r9, r2
 800112c:	005a      	lsls	r2, r3, #1
 800112e:	0fdb      	lsrs	r3, r3, #31
 8001130:	469b      	mov	fp, r3
 8001132:	0b36      	lsrs	r6, r6, #12
 8001134:	0d64      	lsrs	r4, r4, #21
 8001136:	0fc9      	lsrs	r1, r1, #31
 8001138:	0d52      	lsrs	r2, r2, #21
 800113a:	4284      	cmp	r4, r0
 800113c:	d019      	beq.n	8001172 <__eqdf2+0x66>
 800113e:	4282      	cmp	r2, r0
 8001140:	d010      	beq.n	8001164 <__eqdf2+0x58>
 8001142:	2001      	movs	r0, #1
 8001144:	4294      	cmp	r4, r2
 8001146:	d10e      	bne.n	8001166 <__eqdf2+0x5a>
 8001148:	454e      	cmp	r6, r9
 800114a:	d10c      	bne.n	8001166 <__eqdf2+0x5a>
 800114c:	2001      	movs	r0, #1
 800114e:	45c4      	cmp	ip, r8
 8001150:	d109      	bne.n	8001166 <__eqdf2+0x5a>
 8001152:	4559      	cmp	r1, fp
 8001154:	d017      	beq.n	8001186 <__eqdf2+0x7a>
 8001156:	2c00      	cmp	r4, #0
 8001158:	d105      	bne.n	8001166 <__eqdf2+0x5a>
 800115a:	0030      	movs	r0, r6
 800115c:	4328      	orrs	r0, r5
 800115e:	1e43      	subs	r3, r0, #1
 8001160:	4198      	sbcs	r0, r3
 8001162:	e000      	b.n	8001166 <__eqdf2+0x5a>
 8001164:	2001      	movs	r0, #1
 8001166:	bcf0      	pop	{r4, r5, r6, r7}
 8001168:	46bb      	mov	fp, r7
 800116a:	46b2      	mov	sl, r6
 800116c:	46a9      	mov	r9, r5
 800116e:	46a0      	mov	r8, r4
 8001170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001172:	0033      	movs	r3, r6
 8001174:	2001      	movs	r0, #1
 8001176:	432b      	orrs	r3, r5
 8001178:	d1f5      	bne.n	8001166 <__eqdf2+0x5a>
 800117a:	42a2      	cmp	r2, r4
 800117c:	d1f3      	bne.n	8001166 <__eqdf2+0x5a>
 800117e:	464b      	mov	r3, r9
 8001180:	433b      	orrs	r3, r7
 8001182:	d1f0      	bne.n	8001166 <__eqdf2+0x5a>
 8001184:	e7e2      	b.n	800114c <__eqdf2+0x40>
 8001186:	2000      	movs	r0, #0
 8001188:	e7ed      	b.n	8001166 <__eqdf2+0x5a>
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	000007ff 	.word	0x000007ff

08001190 <__gedf2>:
 8001190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001192:	4647      	mov	r7, r8
 8001194:	46ce      	mov	lr, r9
 8001196:	0004      	movs	r4, r0
 8001198:	0018      	movs	r0, r3
 800119a:	0016      	movs	r6, r2
 800119c:	031b      	lsls	r3, r3, #12
 800119e:	0b1b      	lsrs	r3, r3, #12
 80011a0:	4d2d      	ldr	r5, [pc, #180]	; (8001258 <__gedf2+0xc8>)
 80011a2:	004a      	lsls	r2, r1, #1
 80011a4:	4699      	mov	r9, r3
 80011a6:	b580      	push	{r7, lr}
 80011a8:	0043      	lsls	r3, r0, #1
 80011aa:	030f      	lsls	r7, r1, #12
 80011ac:	46a4      	mov	ip, r4
 80011ae:	46b0      	mov	r8, r6
 80011b0:	0b3f      	lsrs	r7, r7, #12
 80011b2:	0d52      	lsrs	r2, r2, #21
 80011b4:	0fc9      	lsrs	r1, r1, #31
 80011b6:	0d5b      	lsrs	r3, r3, #21
 80011b8:	0fc0      	lsrs	r0, r0, #31
 80011ba:	42aa      	cmp	r2, r5
 80011bc:	d021      	beq.n	8001202 <__gedf2+0x72>
 80011be:	42ab      	cmp	r3, r5
 80011c0:	d013      	beq.n	80011ea <__gedf2+0x5a>
 80011c2:	2a00      	cmp	r2, #0
 80011c4:	d122      	bne.n	800120c <__gedf2+0x7c>
 80011c6:	433c      	orrs	r4, r7
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d102      	bne.n	80011d2 <__gedf2+0x42>
 80011cc:	464d      	mov	r5, r9
 80011ce:	432e      	orrs	r6, r5
 80011d0:	d022      	beq.n	8001218 <__gedf2+0x88>
 80011d2:	2c00      	cmp	r4, #0
 80011d4:	d010      	beq.n	80011f8 <__gedf2+0x68>
 80011d6:	4281      	cmp	r1, r0
 80011d8:	d022      	beq.n	8001220 <__gedf2+0x90>
 80011da:	2002      	movs	r0, #2
 80011dc:	3901      	subs	r1, #1
 80011de:	4008      	ands	r0, r1
 80011e0:	3801      	subs	r0, #1
 80011e2:	bcc0      	pop	{r6, r7}
 80011e4:	46b9      	mov	r9, r7
 80011e6:	46b0      	mov	r8, r6
 80011e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011ea:	464d      	mov	r5, r9
 80011ec:	432e      	orrs	r6, r5
 80011ee:	d129      	bne.n	8001244 <__gedf2+0xb4>
 80011f0:	2a00      	cmp	r2, #0
 80011f2:	d1f0      	bne.n	80011d6 <__gedf2+0x46>
 80011f4:	433c      	orrs	r4, r7
 80011f6:	d1ee      	bne.n	80011d6 <__gedf2+0x46>
 80011f8:	2800      	cmp	r0, #0
 80011fa:	d1f2      	bne.n	80011e2 <__gedf2+0x52>
 80011fc:	2001      	movs	r0, #1
 80011fe:	4240      	negs	r0, r0
 8001200:	e7ef      	b.n	80011e2 <__gedf2+0x52>
 8001202:	003d      	movs	r5, r7
 8001204:	4325      	orrs	r5, r4
 8001206:	d11d      	bne.n	8001244 <__gedf2+0xb4>
 8001208:	4293      	cmp	r3, r2
 800120a:	d0ee      	beq.n	80011ea <__gedf2+0x5a>
 800120c:	2b00      	cmp	r3, #0
 800120e:	d1e2      	bne.n	80011d6 <__gedf2+0x46>
 8001210:	464c      	mov	r4, r9
 8001212:	4326      	orrs	r6, r4
 8001214:	d1df      	bne.n	80011d6 <__gedf2+0x46>
 8001216:	e7e0      	b.n	80011da <__gedf2+0x4a>
 8001218:	2000      	movs	r0, #0
 800121a:	2c00      	cmp	r4, #0
 800121c:	d0e1      	beq.n	80011e2 <__gedf2+0x52>
 800121e:	e7dc      	b.n	80011da <__gedf2+0x4a>
 8001220:	429a      	cmp	r2, r3
 8001222:	dc0a      	bgt.n	800123a <__gedf2+0xaa>
 8001224:	dbe8      	blt.n	80011f8 <__gedf2+0x68>
 8001226:	454f      	cmp	r7, r9
 8001228:	d8d7      	bhi.n	80011da <__gedf2+0x4a>
 800122a:	d00e      	beq.n	800124a <__gedf2+0xba>
 800122c:	2000      	movs	r0, #0
 800122e:	454f      	cmp	r7, r9
 8001230:	d2d7      	bcs.n	80011e2 <__gedf2+0x52>
 8001232:	2900      	cmp	r1, #0
 8001234:	d0e2      	beq.n	80011fc <__gedf2+0x6c>
 8001236:	0008      	movs	r0, r1
 8001238:	e7d3      	b.n	80011e2 <__gedf2+0x52>
 800123a:	4243      	negs	r3, r0
 800123c:	4158      	adcs	r0, r3
 800123e:	0040      	lsls	r0, r0, #1
 8001240:	3801      	subs	r0, #1
 8001242:	e7ce      	b.n	80011e2 <__gedf2+0x52>
 8001244:	2002      	movs	r0, #2
 8001246:	4240      	negs	r0, r0
 8001248:	e7cb      	b.n	80011e2 <__gedf2+0x52>
 800124a:	45c4      	cmp	ip, r8
 800124c:	d8c5      	bhi.n	80011da <__gedf2+0x4a>
 800124e:	2000      	movs	r0, #0
 8001250:	45c4      	cmp	ip, r8
 8001252:	d2c6      	bcs.n	80011e2 <__gedf2+0x52>
 8001254:	e7ed      	b.n	8001232 <__gedf2+0xa2>
 8001256:	46c0      	nop			; (mov r8, r8)
 8001258:	000007ff 	.word	0x000007ff

0800125c <__ledf2>:
 800125c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800125e:	4647      	mov	r7, r8
 8001260:	46ce      	mov	lr, r9
 8001262:	0004      	movs	r4, r0
 8001264:	0018      	movs	r0, r3
 8001266:	0016      	movs	r6, r2
 8001268:	031b      	lsls	r3, r3, #12
 800126a:	0b1b      	lsrs	r3, r3, #12
 800126c:	4d2c      	ldr	r5, [pc, #176]	; (8001320 <__ledf2+0xc4>)
 800126e:	004a      	lsls	r2, r1, #1
 8001270:	4699      	mov	r9, r3
 8001272:	b580      	push	{r7, lr}
 8001274:	0043      	lsls	r3, r0, #1
 8001276:	030f      	lsls	r7, r1, #12
 8001278:	46a4      	mov	ip, r4
 800127a:	46b0      	mov	r8, r6
 800127c:	0b3f      	lsrs	r7, r7, #12
 800127e:	0d52      	lsrs	r2, r2, #21
 8001280:	0fc9      	lsrs	r1, r1, #31
 8001282:	0d5b      	lsrs	r3, r3, #21
 8001284:	0fc0      	lsrs	r0, r0, #31
 8001286:	42aa      	cmp	r2, r5
 8001288:	d00d      	beq.n	80012a6 <__ledf2+0x4a>
 800128a:	42ab      	cmp	r3, r5
 800128c:	d010      	beq.n	80012b0 <__ledf2+0x54>
 800128e:	2a00      	cmp	r2, #0
 8001290:	d127      	bne.n	80012e2 <__ledf2+0x86>
 8001292:	433c      	orrs	r4, r7
 8001294:	2b00      	cmp	r3, #0
 8001296:	d111      	bne.n	80012bc <__ledf2+0x60>
 8001298:	464d      	mov	r5, r9
 800129a:	432e      	orrs	r6, r5
 800129c:	d10e      	bne.n	80012bc <__ledf2+0x60>
 800129e:	2000      	movs	r0, #0
 80012a0:	2c00      	cmp	r4, #0
 80012a2:	d015      	beq.n	80012d0 <__ledf2+0x74>
 80012a4:	e00e      	b.n	80012c4 <__ledf2+0x68>
 80012a6:	003d      	movs	r5, r7
 80012a8:	4325      	orrs	r5, r4
 80012aa:	d110      	bne.n	80012ce <__ledf2+0x72>
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d118      	bne.n	80012e2 <__ledf2+0x86>
 80012b0:	464d      	mov	r5, r9
 80012b2:	432e      	orrs	r6, r5
 80012b4:	d10b      	bne.n	80012ce <__ledf2+0x72>
 80012b6:	2a00      	cmp	r2, #0
 80012b8:	d102      	bne.n	80012c0 <__ledf2+0x64>
 80012ba:	433c      	orrs	r4, r7
 80012bc:	2c00      	cmp	r4, #0
 80012be:	d00b      	beq.n	80012d8 <__ledf2+0x7c>
 80012c0:	4281      	cmp	r1, r0
 80012c2:	d014      	beq.n	80012ee <__ledf2+0x92>
 80012c4:	2002      	movs	r0, #2
 80012c6:	3901      	subs	r1, #1
 80012c8:	4008      	ands	r0, r1
 80012ca:	3801      	subs	r0, #1
 80012cc:	e000      	b.n	80012d0 <__ledf2+0x74>
 80012ce:	2002      	movs	r0, #2
 80012d0:	bcc0      	pop	{r6, r7}
 80012d2:	46b9      	mov	r9, r7
 80012d4:	46b0      	mov	r8, r6
 80012d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012d8:	2800      	cmp	r0, #0
 80012da:	d1f9      	bne.n	80012d0 <__ledf2+0x74>
 80012dc:	2001      	movs	r0, #1
 80012de:	4240      	negs	r0, r0
 80012e0:	e7f6      	b.n	80012d0 <__ledf2+0x74>
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1ec      	bne.n	80012c0 <__ledf2+0x64>
 80012e6:	464c      	mov	r4, r9
 80012e8:	4326      	orrs	r6, r4
 80012ea:	d1e9      	bne.n	80012c0 <__ledf2+0x64>
 80012ec:	e7ea      	b.n	80012c4 <__ledf2+0x68>
 80012ee:	429a      	cmp	r2, r3
 80012f0:	dd04      	ble.n	80012fc <__ledf2+0xa0>
 80012f2:	4243      	negs	r3, r0
 80012f4:	4158      	adcs	r0, r3
 80012f6:	0040      	lsls	r0, r0, #1
 80012f8:	3801      	subs	r0, #1
 80012fa:	e7e9      	b.n	80012d0 <__ledf2+0x74>
 80012fc:	429a      	cmp	r2, r3
 80012fe:	dbeb      	blt.n	80012d8 <__ledf2+0x7c>
 8001300:	454f      	cmp	r7, r9
 8001302:	d8df      	bhi.n	80012c4 <__ledf2+0x68>
 8001304:	d006      	beq.n	8001314 <__ledf2+0xb8>
 8001306:	2000      	movs	r0, #0
 8001308:	454f      	cmp	r7, r9
 800130a:	d2e1      	bcs.n	80012d0 <__ledf2+0x74>
 800130c:	2900      	cmp	r1, #0
 800130e:	d0e5      	beq.n	80012dc <__ledf2+0x80>
 8001310:	0008      	movs	r0, r1
 8001312:	e7dd      	b.n	80012d0 <__ledf2+0x74>
 8001314:	45c4      	cmp	ip, r8
 8001316:	d8d5      	bhi.n	80012c4 <__ledf2+0x68>
 8001318:	2000      	movs	r0, #0
 800131a:	45c4      	cmp	ip, r8
 800131c:	d2d8      	bcs.n	80012d0 <__ledf2+0x74>
 800131e:	e7f5      	b.n	800130c <__ledf2+0xb0>
 8001320:	000007ff 	.word	0x000007ff

08001324 <__aeabi_dmul>:
 8001324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001326:	4657      	mov	r7, sl
 8001328:	464e      	mov	r6, r9
 800132a:	4645      	mov	r5, r8
 800132c:	46de      	mov	lr, fp
 800132e:	b5e0      	push	{r5, r6, r7, lr}
 8001330:	4698      	mov	r8, r3
 8001332:	030c      	lsls	r4, r1, #12
 8001334:	004b      	lsls	r3, r1, #1
 8001336:	0006      	movs	r6, r0
 8001338:	4692      	mov	sl, r2
 800133a:	b087      	sub	sp, #28
 800133c:	0b24      	lsrs	r4, r4, #12
 800133e:	0d5b      	lsrs	r3, r3, #21
 8001340:	0fcf      	lsrs	r7, r1, #31
 8001342:	2b00      	cmp	r3, #0
 8001344:	d100      	bne.n	8001348 <__aeabi_dmul+0x24>
 8001346:	e15c      	b.n	8001602 <__aeabi_dmul+0x2de>
 8001348:	4ad9      	ldr	r2, [pc, #868]	; (80016b0 <__aeabi_dmul+0x38c>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d100      	bne.n	8001350 <__aeabi_dmul+0x2c>
 800134e:	e175      	b.n	800163c <__aeabi_dmul+0x318>
 8001350:	0f42      	lsrs	r2, r0, #29
 8001352:	00e4      	lsls	r4, r4, #3
 8001354:	4314      	orrs	r4, r2
 8001356:	2280      	movs	r2, #128	; 0x80
 8001358:	0412      	lsls	r2, r2, #16
 800135a:	4314      	orrs	r4, r2
 800135c:	4ad5      	ldr	r2, [pc, #852]	; (80016b4 <__aeabi_dmul+0x390>)
 800135e:	00c5      	lsls	r5, r0, #3
 8001360:	4694      	mov	ip, r2
 8001362:	4463      	add	r3, ip
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	2300      	movs	r3, #0
 8001368:	4699      	mov	r9, r3
 800136a:	469b      	mov	fp, r3
 800136c:	4643      	mov	r3, r8
 800136e:	4642      	mov	r2, r8
 8001370:	031e      	lsls	r6, r3, #12
 8001372:	0fd2      	lsrs	r2, r2, #31
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	4650      	mov	r0, sl
 8001378:	4690      	mov	r8, r2
 800137a:	0b36      	lsrs	r6, r6, #12
 800137c:	0d5b      	lsrs	r3, r3, #21
 800137e:	d100      	bne.n	8001382 <__aeabi_dmul+0x5e>
 8001380:	e120      	b.n	80015c4 <__aeabi_dmul+0x2a0>
 8001382:	4acb      	ldr	r2, [pc, #812]	; (80016b0 <__aeabi_dmul+0x38c>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d100      	bne.n	800138a <__aeabi_dmul+0x66>
 8001388:	e162      	b.n	8001650 <__aeabi_dmul+0x32c>
 800138a:	49ca      	ldr	r1, [pc, #808]	; (80016b4 <__aeabi_dmul+0x390>)
 800138c:	0f42      	lsrs	r2, r0, #29
 800138e:	468c      	mov	ip, r1
 8001390:	9900      	ldr	r1, [sp, #0]
 8001392:	4463      	add	r3, ip
 8001394:	00f6      	lsls	r6, r6, #3
 8001396:	468c      	mov	ip, r1
 8001398:	4316      	orrs	r6, r2
 800139a:	2280      	movs	r2, #128	; 0x80
 800139c:	449c      	add	ip, r3
 800139e:	0412      	lsls	r2, r2, #16
 80013a0:	4663      	mov	r3, ip
 80013a2:	4316      	orrs	r6, r2
 80013a4:	00c2      	lsls	r2, r0, #3
 80013a6:	2000      	movs	r0, #0
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	9900      	ldr	r1, [sp, #0]
 80013ac:	4643      	mov	r3, r8
 80013ae:	3101      	adds	r1, #1
 80013b0:	468c      	mov	ip, r1
 80013b2:	4649      	mov	r1, r9
 80013b4:	407b      	eors	r3, r7
 80013b6:	9301      	str	r3, [sp, #4]
 80013b8:	290f      	cmp	r1, #15
 80013ba:	d826      	bhi.n	800140a <__aeabi_dmul+0xe6>
 80013bc:	4bbe      	ldr	r3, [pc, #760]	; (80016b8 <__aeabi_dmul+0x394>)
 80013be:	0089      	lsls	r1, r1, #2
 80013c0:	5859      	ldr	r1, [r3, r1]
 80013c2:	468f      	mov	pc, r1
 80013c4:	4643      	mov	r3, r8
 80013c6:	9301      	str	r3, [sp, #4]
 80013c8:	0034      	movs	r4, r6
 80013ca:	0015      	movs	r5, r2
 80013cc:	4683      	mov	fp, r0
 80013ce:	465b      	mov	r3, fp
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d016      	beq.n	8001402 <__aeabi_dmul+0xde>
 80013d4:	2b03      	cmp	r3, #3
 80013d6:	d100      	bne.n	80013da <__aeabi_dmul+0xb6>
 80013d8:	e203      	b.n	80017e2 <__aeabi_dmul+0x4be>
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d000      	beq.n	80013e0 <__aeabi_dmul+0xbc>
 80013de:	e0cd      	b.n	800157c <__aeabi_dmul+0x258>
 80013e0:	2200      	movs	r2, #0
 80013e2:	2400      	movs	r4, #0
 80013e4:	2500      	movs	r5, #0
 80013e6:	9b01      	ldr	r3, [sp, #4]
 80013e8:	0512      	lsls	r2, r2, #20
 80013ea:	4322      	orrs	r2, r4
 80013ec:	07db      	lsls	r3, r3, #31
 80013ee:	431a      	orrs	r2, r3
 80013f0:	0028      	movs	r0, r5
 80013f2:	0011      	movs	r1, r2
 80013f4:	b007      	add	sp, #28
 80013f6:	bcf0      	pop	{r4, r5, r6, r7}
 80013f8:	46bb      	mov	fp, r7
 80013fa:	46b2      	mov	sl, r6
 80013fc:	46a9      	mov	r9, r5
 80013fe:	46a0      	mov	r8, r4
 8001400:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001402:	2400      	movs	r4, #0
 8001404:	2500      	movs	r5, #0
 8001406:	4aaa      	ldr	r2, [pc, #680]	; (80016b0 <__aeabi_dmul+0x38c>)
 8001408:	e7ed      	b.n	80013e6 <__aeabi_dmul+0xc2>
 800140a:	0c28      	lsrs	r0, r5, #16
 800140c:	042d      	lsls	r5, r5, #16
 800140e:	0c2d      	lsrs	r5, r5, #16
 8001410:	002b      	movs	r3, r5
 8001412:	0c11      	lsrs	r1, r2, #16
 8001414:	0412      	lsls	r2, r2, #16
 8001416:	0c12      	lsrs	r2, r2, #16
 8001418:	4353      	muls	r3, r2
 800141a:	4698      	mov	r8, r3
 800141c:	0013      	movs	r3, r2
 800141e:	002f      	movs	r7, r5
 8001420:	4343      	muls	r3, r0
 8001422:	4699      	mov	r9, r3
 8001424:	434f      	muls	r7, r1
 8001426:	444f      	add	r7, r9
 8001428:	46bb      	mov	fp, r7
 800142a:	4647      	mov	r7, r8
 800142c:	000b      	movs	r3, r1
 800142e:	0c3f      	lsrs	r7, r7, #16
 8001430:	46ba      	mov	sl, r7
 8001432:	4343      	muls	r3, r0
 8001434:	44da      	add	sl, fp
 8001436:	9302      	str	r3, [sp, #8]
 8001438:	45d1      	cmp	r9, sl
 800143a:	d904      	bls.n	8001446 <__aeabi_dmul+0x122>
 800143c:	2780      	movs	r7, #128	; 0x80
 800143e:	027f      	lsls	r7, r7, #9
 8001440:	46b9      	mov	r9, r7
 8001442:	444b      	add	r3, r9
 8001444:	9302      	str	r3, [sp, #8]
 8001446:	4653      	mov	r3, sl
 8001448:	0c1b      	lsrs	r3, r3, #16
 800144a:	469b      	mov	fp, r3
 800144c:	4653      	mov	r3, sl
 800144e:	041f      	lsls	r7, r3, #16
 8001450:	4643      	mov	r3, r8
 8001452:	041b      	lsls	r3, r3, #16
 8001454:	0c1b      	lsrs	r3, r3, #16
 8001456:	4698      	mov	r8, r3
 8001458:	003b      	movs	r3, r7
 800145a:	4443      	add	r3, r8
 800145c:	9304      	str	r3, [sp, #16]
 800145e:	0c33      	lsrs	r3, r6, #16
 8001460:	0436      	lsls	r6, r6, #16
 8001462:	0c36      	lsrs	r6, r6, #16
 8001464:	4698      	mov	r8, r3
 8001466:	0033      	movs	r3, r6
 8001468:	4343      	muls	r3, r0
 800146a:	4699      	mov	r9, r3
 800146c:	4643      	mov	r3, r8
 800146e:	4343      	muls	r3, r0
 8001470:	002f      	movs	r7, r5
 8001472:	469a      	mov	sl, r3
 8001474:	4643      	mov	r3, r8
 8001476:	4377      	muls	r7, r6
 8001478:	435d      	muls	r5, r3
 800147a:	0c38      	lsrs	r0, r7, #16
 800147c:	444d      	add	r5, r9
 800147e:	1945      	adds	r5, r0, r5
 8001480:	45a9      	cmp	r9, r5
 8001482:	d903      	bls.n	800148c <__aeabi_dmul+0x168>
 8001484:	2380      	movs	r3, #128	; 0x80
 8001486:	025b      	lsls	r3, r3, #9
 8001488:	4699      	mov	r9, r3
 800148a:	44ca      	add	sl, r9
 800148c:	043f      	lsls	r7, r7, #16
 800148e:	0c28      	lsrs	r0, r5, #16
 8001490:	0c3f      	lsrs	r7, r7, #16
 8001492:	042d      	lsls	r5, r5, #16
 8001494:	19ed      	adds	r5, r5, r7
 8001496:	0c27      	lsrs	r7, r4, #16
 8001498:	0424      	lsls	r4, r4, #16
 800149a:	0c24      	lsrs	r4, r4, #16
 800149c:	0003      	movs	r3, r0
 800149e:	0020      	movs	r0, r4
 80014a0:	4350      	muls	r0, r2
 80014a2:	437a      	muls	r2, r7
 80014a4:	4691      	mov	r9, r2
 80014a6:	003a      	movs	r2, r7
 80014a8:	4453      	add	r3, sl
 80014aa:	9305      	str	r3, [sp, #20]
 80014ac:	0c03      	lsrs	r3, r0, #16
 80014ae:	469a      	mov	sl, r3
 80014b0:	434a      	muls	r2, r1
 80014b2:	4361      	muls	r1, r4
 80014b4:	4449      	add	r1, r9
 80014b6:	4451      	add	r1, sl
 80014b8:	44ab      	add	fp, r5
 80014ba:	4589      	cmp	r9, r1
 80014bc:	d903      	bls.n	80014c6 <__aeabi_dmul+0x1a2>
 80014be:	2380      	movs	r3, #128	; 0x80
 80014c0:	025b      	lsls	r3, r3, #9
 80014c2:	4699      	mov	r9, r3
 80014c4:	444a      	add	r2, r9
 80014c6:	0400      	lsls	r0, r0, #16
 80014c8:	0c0b      	lsrs	r3, r1, #16
 80014ca:	0c00      	lsrs	r0, r0, #16
 80014cc:	0409      	lsls	r1, r1, #16
 80014ce:	1809      	adds	r1, r1, r0
 80014d0:	0020      	movs	r0, r4
 80014d2:	4699      	mov	r9, r3
 80014d4:	4643      	mov	r3, r8
 80014d6:	4370      	muls	r0, r6
 80014d8:	435c      	muls	r4, r3
 80014da:	437e      	muls	r6, r7
 80014dc:	435f      	muls	r7, r3
 80014de:	0c03      	lsrs	r3, r0, #16
 80014e0:	4698      	mov	r8, r3
 80014e2:	19a4      	adds	r4, r4, r6
 80014e4:	4444      	add	r4, r8
 80014e6:	444a      	add	r2, r9
 80014e8:	9703      	str	r7, [sp, #12]
 80014ea:	42a6      	cmp	r6, r4
 80014ec:	d904      	bls.n	80014f8 <__aeabi_dmul+0x1d4>
 80014ee:	2380      	movs	r3, #128	; 0x80
 80014f0:	025b      	lsls	r3, r3, #9
 80014f2:	4698      	mov	r8, r3
 80014f4:	4447      	add	r7, r8
 80014f6:	9703      	str	r7, [sp, #12]
 80014f8:	0423      	lsls	r3, r4, #16
 80014fa:	9e02      	ldr	r6, [sp, #8]
 80014fc:	469a      	mov	sl, r3
 80014fe:	9b05      	ldr	r3, [sp, #20]
 8001500:	445e      	add	r6, fp
 8001502:	4698      	mov	r8, r3
 8001504:	42ae      	cmp	r6, r5
 8001506:	41ad      	sbcs	r5, r5
 8001508:	1876      	adds	r6, r6, r1
 800150a:	428e      	cmp	r6, r1
 800150c:	4189      	sbcs	r1, r1
 800150e:	0400      	lsls	r0, r0, #16
 8001510:	0c00      	lsrs	r0, r0, #16
 8001512:	4450      	add	r0, sl
 8001514:	4440      	add	r0, r8
 8001516:	426d      	negs	r5, r5
 8001518:	1947      	adds	r7, r0, r5
 800151a:	46b8      	mov	r8, r7
 800151c:	4693      	mov	fp, r2
 800151e:	4249      	negs	r1, r1
 8001520:	4689      	mov	r9, r1
 8001522:	44c3      	add	fp, r8
 8001524:	44d9      	add	r9, fp
 8001526:	4298      	cmp	r0, r3
 8001528:	4180      	sbcs	r0, r0
 800152a:	45a8      	cmp	r8, r5
 800152c:	41ad      	sbcs	r5, r5
 800152e:	4593      	cmp	fp, r2
 8001530:	4192      	sbcs	r2, r2
 8001532:	4589      	cmp	r9, r1
 8001534:	4189      	sbcs	r1, r1
 8001536:	426d      	negs	r5, r5
 8001538:	4240      	negs	r0, r0
 800153a:	4328      	orrs	r0, r5
 800153c:	0c24      	lsrs	r4, r4, #16
 800153e:	4252      	negs	r2, r2
 8001540:	4249      	negs	r1, r1
 8001542:	430a      	orrs	r2, r1
 8001544:	9b03      	ldr	r3, [sp, #12]
 8001546:	1900      	adds	r0, r0, r4
 8001548:	1880      	adds	r0, r0, r2
 800154a:	18c7      	adds	r7, r0, r3
 800154c:	464b      	mov	r3, r9
 800154e:	0ddc      	lsrs	r4, r3, #23
 8001550:	9b04      	ldr	r3, [sp, #16]
 8001552:	0275      	lsls	r5, r6, #9
 8001554:	431d      	orrs	r5, r3
 8001556:	1e6a      	subs	r2, r5, #1
 8001558:	4195      	sbcs	r5, r2
 800155a:	464b      	mov	r3, r9
 800155c:	0df6      	lsrs	r6, r6, #23
 800155e:	027f      	lsls	r7, r7, #9
 8001560:	4335      	orrs	r5, r6
 8001562:	025a      	lsls	r2, r3, #9
 8001564:	433c      	orrs	r4, r7
 8001566:	4315      	orrs	r5, r2
 8001568:	01fb      	lsls	r3, r7, #7
 800156a:	d400      	bmi.n	800156e <__aeabi_dmul+0x24a>
 800156c:	e11c      	b.n	80017a8 <__aeabi_dmul+0x484>
 800156e:	2101      	movs	r1, #1
 8001570:	086a      	lsrs	r2, r5, #1
 8001572:	400d      	ands	r5, r1
 8001574:	4315      	orrs	r5, r2
 8001576:	07e2      	lsls	r2, r4, #31
 8001578:	4315      	orrs	r5, r2
 800157a:	0864      	lsrs	r4, r4, #1
 800157c:	494f      	ldr	r1, [pc, #316]	; (80016bc <__aeabi_dmul+0x398>)
 800157e:	4461      	add	r1, ip
 8001580:	2900      	cmp	r1, #0
 8001582:	dc00      	bgt.n	8001586 <__aeabi_dmul+0x262>
 8001584:	e0b0      	b.n	80016e8 <__aeabi_dmul+0x3c4>
 8001586:	076b      	lsls	r3, r5, #29
 8001588:	d009      	beq.n	800159e <__aeabi_dmul+0x27a>
 800158a:	220f      	movs	r2, #15
 800158c:	402a      	ands	r2, r5
 800158e:	2a04      	cmp	r2, #4
 8001590:	d005      	beq.n	800159e <__aeabi_dmul+0x27a>
 8001592:	1d2a      	adds	r2, r5, #4
 8001594:	42aa      	cmp	r2, r5
 8001596:	41ad      	sbcs	r5, r5
 8001598:	426d      	negs	r5, r5
 800159a:	1964      	adds	r4, r4, r5
 800159c:	0015      	movs	r5, r2
 800159e:	01e3      	lsls	r3, r4, #7
 80015a0:	d504      	bpl.n	80015ac <__aeabi_dmul+0x288>
 80015a2:	2180      	movs	r1, #128	; 0x80
 80015a4:	4a46      	ldr	r2, [pc, #280]	; (80016c0 <__aeabi_dmul+0x39c>)
 80015a6:	00c9      	lsls	r1, r1, #3
 80015a8:	4014      	ands	r4, r2
 80015aa:	4461      	add	r1, ip
 80015ac:	4a45      	ldr	r2, [pc, #276]	; (80016c4 <__aeabi_dmul+0x3a0>)
 80015ae:	4291      	cmp	r1, r2
 80015b0:	dd00      	ble.n	80015b4 <__aeabi_dmul+0x290>
 80015b2:	e726      	b.n	8001402 <__aeabi_dmul+0xde>
 80015b4:	0762      	lsls	r2, r4, #29
 80015b6:	08ed      	lsrs	r5, r5, #3
 80015b8:	0264      	lsls	r4, r4, #9
 80015ba:	0549      	lsls	r1, r1, #21
 80015bc:	4315      	orrs	r5, r2
 80015be:	0b24      	lsrs	r4, r4, #12
 80015c0:	0d4a      	lsrs	r2, r1, #21
 80015c2:	e710      	b.n	80013e6 <__aeabi_dmul+0xc2>
 80015c4:	4652      	mov	r2, sl
 80015c6:	4332      	orrs	r2, r6
 80015c8:	d100      	bne.n	80015cc <__aeabi_dmul+0x2a8>
 80015ca:	e07f      	b.n	80016cc <__aeabi_dmul+0x3a8>
 80015cc:	2e00      	cmp	r6, #0
 80015ce:	d100      	bne.n	80015d2 <__aeabi_dmul+0x2ae>
 80015d0:	e0dc      	b.n	800178c <__aeabi_dmul+0x468>
 80015d2:	0030      	movs	r0, r6
 80015d4:	f000 fe1e 	bl	8002214 <__clzsi2>
 80015d8:	0002      	movs	r2, r0
 80015da:	3a0b      	subs	r2, #11
 80015dc:	231d      	movs	r3, #29
 80015de:	0001      	movs	r1, r0
 80015e0:	1a9b      	subs	r3, r3, r2
 80015e2:	4652      	mov	r2, sl
 80015e4:	3908      	subs	r1, #8
 80015e6:	40da      	lsrs	r2, r3
 80015e8:	408e      	lsls	r6, r1
 80015ea:	4316      	orrs	r6, r2
 80015ec:	4652      	mov	r2, sl
 80015ee:	408a      	lsls	r2, r1
 80015f0:	9b00      	ldr	r3, [sp, #0]
 80015f2:	4935      	ldr	r1, [pc, #212]	; (80016c8 <__aeabi_dmul+0x3a4>)
 80015f4:	1a18      	subs	r0, r3, r0
 80015f6:	0003      	movs	r3, r0
 80015f8:	468c      	mov	ip, r1
 80015fa:	4463      	add	r3, ip
 80015fc:	2000      	movs	r0, #0
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	e6d3      	b.n	80013aa <__aeabi_dmul+0x86>
 8001602:	0025      	movs	r5, r4
 8001604:	4305      	orrs	r5, r0
 8001606:	d04a      	beq.n	800169e <__aeabi_dmul+0x37a>
 8001608:	2c00      	cmp	r4, #0
 800160a:	d100      	bne.n	800160e <__aeabi_dmul+0x2ea>
 800160c:	e0b0      	b.n	8001770 <__aeabi_dmul+0x44c>
 800160e:	0020      	movs	r0, r4
 8001610:	f000 fe00 	bl	8002214 <__clzsi2>
 8001614:	0001      	movs	r1, r0
 8001616:	0002      	movs	r2, r0
 8001618:	390b      	subs	r1, #11
 800161a:	231d      	movs	r3, #29
 800161c:	0010      	movs	r0, r2
 800161e:	1a5b      	subs	r3, r3, r1
 8001620:	0031      	movs	r1, r6
 8001622:	0035      	movs	r5, r6
 8001624:	3808      	subs	r0, #8
 8001626:	4084      	lsls	r4, r0
 8001628:	40d9      	lsrs	r1, r3
 800162a:	4085      	lsls	r5, r0
 800162c:	430c      	orrs	r4, r1
 800162e:	4826      	ldr	r0, [pc, #152]	; (80016c8 <__aeabi_dmul+0x3a4>)
 8001630:	1a83      	subs	r3, r0, r2
 8001632:	9300      	str	r3, [sp, #0]
 8001634:	2300      	movs	r3, #0
 8001636:	4699      	mov	r9, r3
 8001638:	469b      	mov	fp, r3
 800163a:	e697      	b.n	800136c <__aeabi_dmul+0x48>
 800163c:	0005      	movs	r5, r0
 800163e:	4325      	orrs	r5, r4
 8001640:	d126      	bne.n	8001690 <__aeabi_dmul+0x36c>
 8001642:	2208      	movs	r2, #8
 8001644:	9300      	str	r3, [sp, #0]
 8001646:	2302      	movs	r3, #2
 8001648:	2400      	movs	r4, #0
 800164a:	4691      	mov	r9, r2
 800164c:	469b      	mov	fp, r3
 800164e:	e68d      	b.n	800136c <__aeabi_dmul+0x48>
 8001650:	4652      	mov	r2, sl
 8001652:	9b00      	ldr	r3, [sp, #0]
 8001654:	4332      	orrs	r2, r6
 8001656:	d110      	bne.n	800167a <__aeabi_dmul+0x356>
 8001658:	4915      	ldr	r1, [pc, #84]	; (80016b0 <__aeabi_dmul+0x38c>)
 800165a:	2600      	movs	r6, #0
 800165c:	468c      	mov	ip, r1
 800165e:	4463      	add	r3, ip
 8001660:	4649      	mov	r1, r9
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	2302      	movs	r3, #2
 8001666:	4319      	orrs	r1, r3
 8001668:	4689      	mov	r9, r1
 800166a:	2002      	movs	r0, #2
 800166c:	e69d      	b.n	80013aa <__aeabi_dmul+0x86>
 800166e:	465b      	mov	r3, fp
 8001670:	9701      	str	r7, [sp, #4]
 8001672:	2b02      	cmp	r3, #2
 8001674:	d000      	beq.n	8001678 <__aeabi_dmul+0x354>
 8001676:	e6ad      	b.n	80013d4 <__aeabi_dmul+0xb0>
 8001678:	e6c3      	b.n	8001402 <__aeabi_dmul+0xde>
 800167a:	4a0d      	ldr	r2, [pc, #52]	; (80016b0 <__aeabi_dmul+0x38c>)
 800167c:	2003      	movs	r0, #3
 800167e:	4694      	mov	ip, r2
 8001680:	4463      	add	r3, ip
 8001682:	464a      	mov	r2, r9
 8001684:	9300      	str	r3, [sp, #0]
 8001686:	2303      	movs	r3, #3
 8001688:	431a      	orrs	r2, r3
 800168a:	4691      	mov	r9, r2
 800168c:	4652      	mov	r2, sl
 800168e:	e68c      	b.n	80013aa <__aeabi_dmul+0x86>
 8001690:	220c      	movs	r2, #12
 8001692:	9300      	str	r3, [sp, #0]
 8001694:	2303      	movs	r3, #3
 8001696:	0005      	movs	r5, r0
 8001698:	4691      	mov	r9, r2
 800169a:	469b      	mov	fp, r3
 800169c:	e666      	b.n	800136c <__aeabi_dmul+0x48>
 800169e:	2304      	movs	r3, #4
 80016a0:	4699      	mov	r9, r3
 80016a2:	2300      	movs	r3, #0
 80016a4:	9300      	str	r3, [sp, #0]
 80016a6:	3301      	adds	r3, #1
 80016a8:	2400      	movs	r4, #0
 80016aa:	469b      	mov	fp, r3
 80016ac:	e65e      	b.n	800136c <__aeabi_dmul+0x48>
 80016ae:	46c0      	nop			; (mov r8, r8)
 80016b0:	000007ff 	.word	0x000007ff
 80016b4:	fffffc01 	.word	0xfffffc01
 80016b8:	08007e40 	.word	0x08007e40
 80016bc:	000003ff 	.word	0x000003ff
 80016c0:	feffffff 	.word	0xfeffffff
 80016c4:	000007fe 	.word	0x000007fe
 80016c8:	fffffc0d 	.word	0xfffffc0d
 80016cc:	4649      	mov	r1, r9
 80016ce:	2301      	movs	r3, #1
 80016d0:	4319      	orrs	r1, r3
 80016d2:	4689      	mov	r9, r1
 80016d4:	2600      	movs	r6, #0
 80016d6:	2001      	movs	r0, #1
 80016d8:	e667      	b.n	80013aa <__aeabi_dmul+0x86>
 80016da:	2300      	movs	r3, #0
 80016dc:	2480      	movs	r4, #128	; 0x80
 80016de:	2500      	movs	r5, #0
 80016e0:	4a43      	ldr	r2, [pc, #268]	; (80017f0 <__aeabi_dmul+0x4cc>)
 80016e2:	9301      	str	r3, [sp, #4]
 80016e4:	0324      	lsls	r4, r4, #12
 80016e6:	e67e      	b.n	80013e6 <__aeabi_dmul+0xc2>
 80016e8:	2001      	movs	r0, #1
 80016ea:	1a40      	subs	r0, r0, r1
 80016ec:	2838      	cmp	r0, #56	; 0x38
 80016ee:	dd00      	ble.n	80016f2 <__aeabi_dmul+0x3ce>
 80016f0:	e676      	b.n	80013e0 <__aeabi_dmul+0xbc>
 80016f2:	281f      	cmp	r0, #31
 80016f4:	dd5b      	ble.n	80017ae <__aeabi_dmul+0x48a>
 80016f6:	221f      	movs	r2, #31
 80016f8:	0023      	movs	r3, r4
 80016fa:	4252      	negs	r2, r2
 80016fc:	1a51      	subs	r1, r2, r1
 80016fe:	40cb      	lsrs	r3, r1
 8001700:	0019      	movs	r1, r3
 8001702:	2820      	cmp	r0, #32
 8001704:	d003      	beq.n	800170e <__aeabi_dmul+0x3ea>
 8001706:	4a3b      	ldr	r2, [pc, #236]	; (80017f4 <__aeabi_dmul+0x4d0>)
 8001708:	4462      	add	r2, ip
 800170a:	4094      	lsls	r4, r2
 800170c:	4325      	orrs	r5, r4
 800170e:	1e6a      	subs	r2, r5, #1
 8001710:	4195      	sbcs	r5, r2
 8001712:	002a      	movs	r2, r5
 8001714:	430a      	orrs	r2, r1
 8001716:	2107      	movs	r1, #7
 8001718:	000d      	movs	r5, r1
 800171a:	2400      	movs	r4, #0
 800171c:	4015      	ands	r5, r2
 800171e:	4211      	tst	r1, r2
 8001720:	d05b      	beq.n	80017da <__aeabi_dmul+0x4b6>
 8001722:	210f      	movs	r1, #15
 8001724:	2400      	movs	r4, #0
 8001726:	4011      	ands	r1, r2
 8001728:	2904      	cmp	r1, #4
 800172a:	d053      	beq.n	80017d4 <__aeabi_dmul+0x4b0>
 800172c:	1d11      	adds	r1, r2, #4
 800172e:	4291      	cmp	r1, r2
 8001730:	4192      	sbcs	r2, r2
 8001732:	4252      	negs	r2, r2
 8001734:	18a4      	adds	r4, r4, r2
 8001736:	000a      	movs	r2, r1
 8001738:	0223      	lsls	r3, r4, #8
 800173a:	d54b      	bpl.n	80017d4 <__aeabi_dmul+0x4b0>
 800173c:	2201      	movs	r2, #1
 800173e:	2400      	movs	r4, #0
 8001740:	2500      	movs	r5, #0
 8001742:	e650      	b.n	80013e6 <__aeabi_dmul+0xc2>
 8001744:	2380      	movs	r3, #128	; 0x80
 8001746:	031b      	lsls	r3, r3, #12
 8001748:	421c      	tst	r4, r3
 800174a:	d009      	beq.n	8001760 <__aeabi_dmul+0x43c>
 800174c:	421e      	tst	r6, r3
 800174e:	d107      	bne.n	8001760 <__aeabi_dmul+0x43c>
 8001750:	4333      	orrs	r3, r6
 8001752:	031c      	lsls	r4, r3, #12
 8001754:	4643      	mov	r3, r8
 8001756:	0015      	movs	r5, r2
 8001758:	0b24      	lsrs	r4, r4, #12
 800175a:	4a25      	ldr	r2, [pc, #148]	; (80017f0 <__aeabi_dmul+0x4cc>)
 800175c:	9301      	str	r3, [sp, #4]
 800175e:	e642      	b.n	80013e6 <__aeabi_dmul+0xc2>
 8001760:	2280      	movs	r2, #128	; 0x80
 8001762:	0312      	lsls	r2, r2, #12
 8001764:	4314      	orrs	r4, r2
 8001766:	0324      	lsls	r4, r4, #12
 8001768:	4a21      	ldr	r2, [pc, #132]	; (80017f0 <__aeabi_dmul+0x4cc>)
 800176a:	0b24      	lsrs	r4, r4, #12
 800176c:	9701      	str	r7, [sp, #4]
 800176e:	e63a      	b.n	80013e6 <__aeabi_dmul+0xc2>
 8001770:	f000 fd50 	bl	8002214 <__clzsi2>
 8001774:	0001      	movs	r1, r0
 8001776:	0002      	movs	r2, r0
 8001778:	3115      	adds	r1, #21
 800177a:	3220      	adds	r2, #32
 800177c:	291c      	cmp	r1, #28
 800177e:	dc00      	bgt.n	8001782 <__aeabi_dmul+0x45e>
 8001780:	e74b      	b.n	800161a <__aeabi_dmul+0x2f6>
 8001782:	0034      	movs	r4, r6
 8001784:	3808      	subs	r0, #8
 8001786:	2500      	movs	r5, #0
 8001788:	4084      	lsls	r4, r0
 800178a:	e750      	b.n	800162e <__aeabi_dmul+0x30a>
 800178c:	f000 fd42 	bl	8002214 <__clzsi2>
 8001790:	0003      	movs	r3, r0
 8001792:	001a      	movs	r2, r3
 8001794:	3215      	adds	r2, #21
 8001796:	3020      	adds	r0, #32
 8001798:	2a1c      	cmp	r2, #28
 800179a:	dc00      	bgt.n	800179e <__aeabi_dmul+0x47a>
 800179c:	e71e      	b.n	80015dc <__aeabi_dmul+0x2b8>
 800179e:	4656      	mov	r6, sl
 80017a0:	3b08      	subs	r3, #8
 80017a2:	2200      	movs	r2, #0
 80017a4:	409e      	lsls	r6, r3
 80017a6:	e723      	b.n	80015f0 <__aeabi_dmul+0x2cc>
 80017a8:	9b00      	ldr	r3, [sp, #0]
 80017aa:	469c      	mov	ip, r3
 80017ac:	e6e6      	b.n	800157c <__aeabi_dmul+0x258>
 80017ae:	4912      	ldr	r1, [pc, #72]	; (80017f8 <__aeabi_dmul+0x4d4>)
 80017b0:	0022      	movs	r2, r4
 80017b2:	4461      	add	r1, ip
 80017b4:	002e      	movs	r6, r5
 80017b6:	408d      	lsls	r5, r1
 80017b8:	408a      	lsls	r2, r1
 80017ba:	40c6      	lsrs	r6, r0
 80017bc:	1e69      	subs	r1, r5, #1
 80017be:	418d      	sbcs	r5, r1
 80017c0:	4332      	orrs	r2, r6
 80017c2:	432a      	orrs	r2, r5
 80017c4:	40c4      	lsrs	r4, r0
 80017c6:	0753      	lsls	r3, r2, #29
 80017c8:	d0b6      	beq.n	8001738 <__aeabi_dmul+0x414>
 80017ca:	210f      	movs	r1, #15
 80017cc:	4011      	ands	r1, r2
 80017ce:	2904      	cmp	r1, #4
 80017d0:	d1ac      	bne.n	800172c <__aeabi_dmul+0x408>
 80017d2:	e7b1      	b.n	8001738 <__aeabi_dmul+0x414>
 80017d4:	0765      	lsls	r5, r4, #29
 80017d6:	0264      	lsls	r4, r4, #9
 80017d8:	0b24      	lsrs	r4, r4, #12
 80017da:	08d2      	lsrs	r2, r2, #3
 80017dc:	4315      	orrs	r5, r2
 80017de:	2200      	movs	r2, #0
 80017e0:	e601      	b.n	80013e6 <__aeabi_dmul+0xc2>
 80017e2:	2280      	movs	r2, #128	; 0x80
 80017e4:	0312      	lsls	r2, r2, #12
 80017e6:	4314      	orrs	r4, r2
 80017e8:	0324      	lsls	r4, r4, #12
 80017ea:	4a01      	ldr	r2, [pc, #4]	; (80017f0 <__aeabi_dmul+0x4cc>)
 80017ec:	0b24      	lsrs	r4, r4, #12
 80017ee:	e5fa      	b.n	80013e6 <__aeabi_dmul+0xc2>
 80017f0:	000007ff 	.word	0x000007ff
 80017f4:	0000043e 	.word	0x0000043e
 80017f8:	0000041e 	.word	0x0000041e

080017fc <__aeabi_dsub>:
 80017fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017fe:	4657      	mov	r7, sl
 8001800:	464e      	mov	r6, r9
 8001802:	4645      	mov	r5, r8
 8001804:	46de      	mov	lr, fp
 8001806:	b5e0      	push	{r5, r6, r7, lr}
 8001808:	001e      	movs	r6, r3
 800180a:	0017      	movs	r7, r2
 800180c:	004a      	lsls	r2, r1, #1
 800180e:	030b      	lsls	r3, r1, #12
 8001810:	0d52      	lsrs	r2, r2, #21
 8001812:	0a5b      	lsrs	r3, r3, #9
 8001814:	4690      	mov	r8, r2
 8001816:	0f42      	lsrs	r2, r0, #29
 8001818:	431a      	orrs	r2, r3
 800181a:	0fcd      	lsrs	r5, r1, #31
 800181c:	4ccd      	ldr	r4, [pc, #820]	; (8001b54 <__aeabi_dsub+0x358>)
 800181e:	0331      	lsls	r1, r6, #12
 8001820:	00c3      	lsls	r3, r0, #3
 8001822:	4694      	mov	ip, r2
 8001824:	0070      	lsls	r0, r6, #1
 8001826:	0f7a      	lsrs	r2, r7, #29
 8001828:	0a49      	lsrs	r1, r1, #9
 800182a:	00ff      	lsls	r7, r7, #3
 800182c:	469a      	mov	sl, r3
 800182e:	46b9      	mov	r9, r7
 8001830:	0d40      	lsrs	r0, r0, #21
 8001832:	0ff6      	lsrs	r6, r6, #31
 8001834:	4311      	orrs	r1, r2
 8001836:	42a0      	cmp	r0, r4
 8001838:	d100      	bne.n	800183c <__aeabi_dsub+0x40>
 800183a:	e0b1      	b.n	80019a0 <__aeabi_dsub+0x1a4>
 800183c:	2201      	movs	r2, #1
 800183e:	4056      	eors	r6, r2
 8001840:	46b3      	mov	fp, r6
 8001842:	42b5      	cmp	r5, r6
 8001844:	d100      	bne.n	8001848 <__aeabi_dsub+0x4c>
 8001846:	e088      	b.n	800195a <__aeabi_dsub+0x15e>
 8001848:	4642      	mov	r2, r8
 800184a:	1a12      	subs	r2, r2, r0
 800184c:	2a00      	cmp	r2, #0
 800184e:	dc00      	bgt.n	8001852 <__aeabi_dsub+0x56>
 8001850:	e0ae      	b.n	80019b0 <__aeabi_dsub+0x1b4>
 8001852:	2800      	cmp	r0, #0
 8001854:	d100      	bne.n	8001858 <__aeabi_dsub+0x5c>
 8001856:	e0c1      	b.n	80019dc <__aeabi_dsub+0x1e0>
 8001858:	48be      	ldr	r0, [pc, #760]	; (8001b54 <__aeabi_dsub+0x358>)
 800185a:	4580      	cmp	r8, r0
 800185c:	d100      	bne.n	8001860 <__aeabi_dsub+0x64>
 800185e:	e151      	b.n	8001b04 <__aeabi_dsub+0x308>
 8001860:	2080      	movs	r0, #128	; 0x80
 8001862:	0400      	lsls	r0, r0, #16
 8001864:	4301      	orrs	r1, r0
 8001866:	2a38      	cmp	r2, #56	; 0x38
 8001868:	dd00      	ble.n	800186c <__aeabi_dsub+0x70>
 800186a:	e17b      	b.n	8001b64 <__aeabi_dsub+0x368>
 800186c:	2a1f      	cmp	r2, #31
 800186e:	dd00      	ble.n	8001872 <__aeabi_dsub+0x76>
 8001870:	e1ee      	b.n	8001c50 <__aeabi_dsub+0x454>
 8001872:	2020      	movs	r0, #32
 8001874:	003e      	movs	r6, r7
 8001876:	1a80      	subs	r0, r0, r2
 8001878:	000c      	movs	r4, r1
 800187a:	40d6      	lsrs	r6, r2
 800187c:	40d1      	lsrs	r1, r2
 800187e:	4087      	lsls	r7, r0
 8001880:	4662      	mov	r2, ip
 8001882:	4084      	lsls	r4, r0
 8001884:	1a52      	subs	r2, r2, r1
 8001886:	1e78      	subs	r0, r7, #1
 8001888:	4187      	sbcs	r7, r0
 800188a:	4694      	mov	ip, r2
 800188c:	4334      	orrs	r4, r6
 800188e:	4327      	orrs	r7, r4
 8001890:	1bdc      	subs	r4, r3, r7
 8001892:	42a3      	cmp	r3, r4
 8001894:	419b      	sbcs	r3, r3
 8001896:	4662      	mov	r2, ip
 8001898:	425b      	negs	r3, r3
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	4699      	mov	r9, r3
 800189e:	464b      	mov	r3, r9
 80018a0:	021b      	lsls	r3, r3, #8
 80018a2:	d400      	bmi.n	80018a6 <__aeabi_dsub+0xaa>
 80018a4:	e118      	b.n	8001ad8 <__aeabi_dsub+0x2dc>
 80018a6:	464b      	mov	r3, r9
 80018a8:	0258      	lsls	r0, r3, #9
 80018aa:	0a43      	lsrs	r3, r0, #9
 80018ac:	4699      	mov	r9, r3
 80018ae:	464b      	mov	r3, r9
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d100      	bne.n	80018b6 <__aeabi_dsub+0xba>
 80018b4:	e137      	b.n	8001b26 <__aeabi_dsub+0x32a>
 80018b6:	4648      	mov	r0, r9
 80018b8:	f000 fcac 	bl	8002214 <__clzsi2>
 80018bc:	0001      	movs	r1, r0
 80018be:	3908      	subs	r1, #8
 80018c0:	2320      	movs	r3, #32
 80018c2:	0022      	movs	r2, r4
 80018c4:	4648      	mov	r0, r9
 80018c6:	1a5b      	subs	r3, r3, r1
 80018c8:	40da      	lsrs	r2, r3
 80018ca:	4088      	lsls	r0, r1
 80018cc:	408c      	lsls	r4, r1
 80018ce:	4643      	mov	r3, r8
 80018d0:	4310      	orrs	r0, r2
 80018d2:	4588      	cmp	r8, r1
 80018d4:	dd00      	ble.n	80018d8 <__aeabi_dsub+0xdc>
 80018d6:	e136      	b.n	8001b46 <__aeabi_dsub+0x34a>
 80018d8:	1ac9      	subs	r1, r1, r3
 80018da:	1c4b      	adds	r3, r1, #1
 80018dc:	2b1f      	cmp	r3, #31
 80018de:	dd00      	ble.n	80018e2 <__aeabi_dsub+0xe6>
 80018e0:	e0ea      	b.n	8001ab8 <__aeabi_dsub+0x2bc>
 80018e2:	2220      	movs	r2, #32
 80018e4:	0026      	movs	r6, r4
 80018e6:	1ad2      	subs	r2, r2, r3
 80018e8:	0001      	movs	r1, r0
 80018ea:	4094      	lsls	r4, r2
 80018ec:	40de      	lsrs	r6, r3
 80018ee:	40d8      	lsrs	r0, r3
 80018f0:	2300      	movs	r3, #0
 80018f2:	4091      	lsls	r1, r2
 80018f4:	1e62      	subs	r2, r4, #1
 80018f6:	4194      	sbcs	r4, r2
 80018f8:	4681      	mov	r9, r0
 80018fa:	4698      	mov	r8, r3
 80018fc:	4331      	orrs	r1, r6
 80018fe:	430c      	orrs	r4, r1
 8001900:	0763      	lsls	r3, r4, #29
 8001902:	d009      	beq.n	8001918 <__aeabi_dsub+0x11c>
 8001904:	230f      	movs	r3, #15
 8001906:	4023      	ands	r3, r4
 8001908:	2b04      	cmp	r3, #4
 800190a:	d005      	beq.n	8001918 <__aeabi_dsub+0x11c>
 800190c:	1d23      	adds	r3, r4, #4
 800190e:	42a3      	cmp	r3, r4
 8001910:	41a4      	sbcs	r4, r4
 8001912:	4264      	negs	r4, r4
 8001914:	44a1      	add	r9, r4
 8001916:	001c      	movs	r4, r3
 8001918:	464b      	mov	r3, r9
 800191a:	021b      	lsls	r3, r3, #8
 800191c:	d400      	bmi.n	8001920 <__aeabi_dsub+0x124>
 800191e:	e0de      	b.n	8001ade <__aeabi_dsub+0x2e2>
 8001920:	4641      	mov	r1, r8
 8001922:	4b8c      	ldr	r3, [pc, #560]	; (8001b54 <__aeabi_dsub+0x358>)
 8001924:	3101      	adds	r1, #1
 8001926:	4299      	cmp	r1, r3
 8001928:	d100      	bne.n	800192c <__aeabi_dsub+0x130>
 800192a:	e0e7      	b.n	8001afc <__aeabi_dsub+0x300>
 800192c:	464b      	mov	r3, r9
 800192e:	488a      	ldr	r0, [pc, #552]	; (8001b58 <__aeabi_dsub+0x35c>)
 8001930:	08e4      	lsrs	r4, r4, #3
 8001932:	4003      	ands	r3, r0
 8001934:	0018      	movs	r0, r3
 8001936:	0549      	lsls	r1, r1, #21
 8001938:	075b      	lsls	r3, r3, #29
 800193a:	0240      	lsls	r0, r0, #9
 800193c:	4323      	orrs	r3, r4
 800193e:	0d4a      	lsrs	r2, r1, #21
 8001940:	0b04      	lsrs	r4, r0, #12
 8001942:	0512      	lsls	r2, r2, #20
 8001944:	07ed      	lsls	r5, r5, #31
 8001946:	4322      	orrs	r2, r4
 8001948:	432a      	orrs	r2, r5
 800194a:	0018      	movs	r0, r3
 800194c:	0011      	movs	r1, r2
 800194e:	bcf0      	pop	{r4, r5, r6, r7}
 8001950:	46bb      	mov	fp, r7
 8001952:	46b2      	mov	sl, r6
 8001954:	46a9      	mov	r9, r5
 8001956:	46a0      	mov	r8, r4
 8001958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800195a:	4642      	mov	r2, r8
 800195c:	1a12      	subs	r2, r2, r0
 800195e:	2a00      	cmp	r2, #0
 8001960:	dd52      	ble.n	8001a08 <__aeabi_dsub+0x20c>
 8001962:	2800      	cmp	r0, #0
 8001964:	d100      	bne.n	8001968 <__aeabi_dsub+0x16c>
 8001966:	e09c      	b.n	8001aa2 <__aeabi_dsub+0x2a6>
 8001968:	45a0      	cmp	r8, r4
 800196a:	d100      	bne.n	800196e <__aeabi_dsub+0x172>
 800196c:	e0ca      	b.n	8001b04 <__aeabi_dsub+0x308>
 800196e:	2080      	movs	r0, #128	; 0x80
 8001970:	0400      	lsls	r0, r0, #16
 8001972:	4301      	orrs	r1, r0
 8001974:	2a38      	cmp	r2, #56	; 0x38
 8001976:	dd00      	ble.n	800197a <__aeabi_dsub+0x17e>
 8001978:	e149      	b.n	8001c0e <__aeabi_dsub+0x412>
 800197a:	2a1f      	cmp	r2, #31
 800197c:	dc00      	bgt.n	8001980 <__aeabi_dsub+0x184>
 800197e:	e197      	b.n	8001cb0 <__aeabi_dsub+0x4b4>
 8001980:	0010      	movs	r0, r2
 8001982:	000e      	movs	r6, r1
 8001984:	3820      	subs	r0, #32
 8001986:	40c6      	lsrs	r6, r0
 8001988:	2a20      	cmp	r2, #32
 800198a:	d004      	beq.n	8001996 <__aeabi_dsub+0x19a>
 800198c:	2040      	movs	r0, #64	; 0x40
 800198e:	1a82      	subs	r2, r0, r2
 8001990:	4091      	lsls	r1, r2
 8001992:	430f      	orrs	r7, r1
 8001994:	46b9      	mov	r9, r7
 8001996:	464c      	mov	r4, r9
 8001998:	1e62      	subs	r2, r4, #1
 800199a:	4194      	sbcs	r4, r2
 800199c:	4334      	orrs	r4, r6
 800199e:	e13a      	b.n	8001c16 <__aeabi_dsub+0x41a>
 80019a0:	000a      	movs	r2, r1
 80019a2:	433a      	orrs	r2, r7
 80019a4:	d028      	beq.n	80019f8 <__aeabi_dsub+0x1fc>
 80019a6:	46b3      	mov	fp, r6
 80019a8:	42b5      	cmp	r5, r6
 80019aa:	d02b      	beq.n	8001a04 <__aeabi_dsub+0x208>
 80019ac:	4a6b      	ldr	r2, [pc, #428]	; (8001b5c <__aeabi_dsub+0x360>)
 80019ae:	4442      	add	r2, r8
 80019b0:	2a00      	cmp	r2, #0
 80019b2:	d05d      	beq.n	8001a70 <__aeabi_dsub+0x274>
 80019b4:	4642      	mov	r2, r8
 80019b6:	4644      	mov	r4, r8
 80019b8:	1a82      	subs	r2, r0, r2
 80019ba:	2c00      	cmp	r4, #0
 80019bc:	d000      	beq.n	80019c0 <__aeabi_dsub+0x1c4>
 80019be:	e0f5      	b.n	8001bac <__aeabi_dsub+0x3b0>
 80019c0:	4665      	mov	r5, ip
 80019c2:	431d      	orrs	r5, r3
 80019c4:	d100      	bne.n	80019c8 <__aeabi_dsub+0x1cc>
 80019c6:	e19c      	b.n	8001d02 <__aeabi_dsub+0x506>
 80019c8:	1e55      	subs	r5, r2, #1
 80019ca:	2a01      	cmp	r2, #1
 80019cc:	d100      	bne.n	80019d0 <__aeabi_dsub+0x1d4>
 80019ce:	e1fb      	b.n	8001dc8 <__aeabi_dsub+0x5cc>
 80019d0:	4c60      	ldr	r4, [pc, #384]	; (8001b54 <__aeabi_dsub+0x358>)
 80019d2:	42a2      	cmp	r2, r4
 80019d4:	d100      	bne.n	80019d8 <__aeabi_dsub+0x1dc>
 80019d6:	e1bd      	b.n	8001d54 <__aeabi_dsub+0x558>
 80019d8:	002a      	movs	r2, r5
 80019da:	e0f0      	b.n	8001bbe <__aeabi_dsub+0x3c2>
 80019dc:	0008      	movs	r0, r1
 80019de:	4338      	orrs	r0, r7
 80019e0:	d100      	bne.n	80019e4 <__aeabi_dsub+0x1e8>
 80019e2:	e0c3      	b.n	8001b6c <__aeabi_dsub+0x370>
 80019e4:	1e50      	subs	r0, r2, #1
 80019e6:	2a01      	cmp	r2, #1
 80019e8:	d100      	bne.n	80019ec <__aeabi_dsub+0x1f0>
 80019ea:	e1a8      	b.n	8001d3e <__aeabi_dsub+0x542>
 80019ec:	4c59      	ldr	r4, [pc, #356]	; (8001b54 <__aeabi_dsub+0x358>)
 80019ee:	42a2      	cmp	r2, r4
 80019f0:	d100      	bne.n	80019f4 <__aeabi_dsub+0x1f8>
 80019f2:	e087      	b.n	8001b04 <__aeabi_dsub+0x308>
 80019f4:	0002      	movs	r2, r0
 80019f6:	e736      	b.n	8001866 <__aeabi_dsub+0x6a>
 80019f8:	2201      	movs	r2, #1
 80019fa:	4056      	eors	r6, r2
 80019fc:	46b3      	mov	fp, r6
 80019fe:	42b5      	cmp	r5, r6
 8001a00:	d000      	beq.n	8001a04 <__aeabi_dsub+0x208>
 8001a02:	e721      	b.n	8001848 <__aeabi_dsub+0x4c>
 8001a04:	4a55      	ldr	r2, [pc, #340]	; (8001b5c <__aeabi_dsub+0x360>)
 8001a06:	4442      	add	r2, r8
 8001a08:	2a00      	cmp	r2, #0
 8001a0a:	d100      	bne.n	8001a0e <__aeabi_dsub+0x212>
 8001a0c:	e0b5      	b.n	8001b7a <__aeabi_dsub+0x37e>
 8001a0e:	4642      	mov	r2, r8
 8001a10:	4644      	mov	r4, r8
 8001a12:	1a82      	subs	r2, r0, r2
 8001a14:	2c00      	cmp	r4, #0
 8001a16:	d100      	bne.n	8001a1a <__aeabi_dsub+0x21e>
 8001a18:	e138      	b.n	8001c8c <__aeabi_dsub+0x490>
 8001a1a:	4e4e      	ldr	r6, [pc, #312]	; (8001b54 <__aeabi_dsub+0x358>)
 8001a1c:	42b0      	cmp	r0, r6
 8001a1e:	d100      	bne.n	8001a22 <__aeabi_dsub+0x226>
 8001a20:	e1de      	b.n	8001de0 <__aeabi_dsub+0x5e4>
 8001a22:	2680      	movs	r6, #128	; 0x80
 8001a24:	4664      	mov	r4, ip
 8001a26:	0436      	lsls	r6, r6, #16
 8001a28:	4334      	orrs	r4, r6
 8001a2a:	46a4      	mov	ip, r4
 8001a2c:	2a38      	cmp	r2, #56	; 0x38
 8001a2e:	dd00      	ble.n	8001a32 <__aeabi_dsub+0x236>
 8001a30:	e196      	b.n	8001d60 <__aeabi_dsub+0x564>
 8001a32:	2a1f      	cmp	r2, #31
 8001a34:	dd00      	ble.n	8001a38 <__aeabi_dsub+0x23c>
 8001a36:	e224      	b.n	8001e82 <__aeabi_dsub+0x686>
 8001a38:	2620      	movs	r6, #32
 8001a3a:	1ab4      	subs	r4, r6, r2
 8001a3c:	46a2      	mov	sl, r4
 8001a3e:	4664      	mov	r4, ip
 8001a40:	4656      	mov	r6, sl
 8001a42:	40b4      	lsls	r4, r6
 8001a44:	46a1      	mov	r9, r4
 8001a46:	001c      	movs	r4, r3
 8001a48:	464e      	mov	r6, r9
 8001a4a:	40d4      	lsrs	r4, r2
 8001a4c:	4326      	orrs	r6, r4
 8001a4e:	0034      	movs	r4, r6
 8001a50:	4656      	mov	r6, sl
 8001a52:	40b3      	lsls	r3, r6
 8001a54:	1e5e      	subs	r6, r3, #1
 8001a56:	41b3      	sbcs	r3, r6
 8001a58:	431c      	orrs	r4, r3
 8001a5a:	4663      	mov	r3, ip
 8001a5c:	40d3      	lsrs	r3, r2
 8001a5e:	18c9      	adds	r1, r1, r3
 8001a60:	19e4      	adds	r4, r4, r7
 8001a62:	42bc      	cmp	r4, r7
 8001a64:	41bf      	sbcs	r7, r7
 8001a66:	427f      	negs	r7, r7
 8001a68:	46b9      	mov	r9, r7
 8001a6a:	4680      	mov	r8, r0
 8001a6c:	4489      	add	r9, r1
 8001a6e:	e0d8      	b.n	8001c22 <__aeabi_dsub+0x426>
 8001a70:	4640      	mov	r0, r8
 8001a72:	4c3b      	ldr	r4, [pc, #236]	; (8001b60 <__aeabi_dsub+0x364>)
 8001a74:	3001      	adds	r0, #1
 8001a76:	4220      	tst	r0, r4
 8001a78:	d000      	beq.n	8001a7c <__aeabi_dsub+0x280>
 8001a7a:	e0b4      	b.n	8001be6 <__aeabi_dsub+0x3ea>
 8001a7c:	4640      	mov	r0, r8
 8001a7e:	2800      	cmp	r0, #0
 8001a80:	d000      	beq.n	8001a84 <__aeabi_dsub+0x288>
 8001a82:	e144      	b.n	8001d0e <__aeabi_dsub+0x512>
 8001a84:	4660      	mov	r0, ip
 8001a86:	4318      	orrs	r0, r3
 8001a88:	d100      	bne.n	8001a8c <__aeabi_dsub+0x290>
 8001a8a:	e190      	b.n	8001dae <__aeabi_dsub+0x5b2>
 8001a8c:	0008      	movs	r0, r1
 8001a8e:	4338      	orrs	r0, r7
 8001a90:	d000      	beq.n	8001a94 <__aeabi_dsub+0x298>
 8001a92:	e1aa      	b.n	8001dea <__aeabi_dsub+0x5ee>
 8001a94:	4661      	mov	r1, ip
 8001a96:	08db      	lsrs	r3, r3, #3
 8001a98:	0749      	lsls	r1, r1, #29
 8001a9a:	430b      	orrs	r3, r1
 8001a9c:	4661      	mov	r1, ip
 8001a9e:	08cc      	lsrs	r4, r1, #3
 8001aa0:	e027      	b.n	8001af2 <__aeabi_dsub+0x2f6>
 8001aa2:	0008      	movs	r0, r1
 8001aa4:	4338      	orrs	r0, r7
 8001aa6:	d061      	beq.n	8001b6c <__aeabi_dsub+0x370>
 8001aa8:	1e50      	subs	r0, r2, #1
 8001aaa:	2a01      	cmp	r2, #1
 8001aac:	d100      	bne.n	8001ab0 <__aeabi_dsub+0x2b4>
 8001aae:	e139      	b.n	8001d24 <__aeabi_dsub+0x528>
 8001ab0:	42a2      	cmp	r2, r4
 8001ab2:	d027      	beq.n	8001b04 <__aeabi_dsub+0x308>
 8001ab4:	0002      	movs	r2, r0
 8001ab6:	e75d      	b.n	8001974 <__aeabi_dsub+0x178>
 8001ab8:	0002      	movs	r2, r0
 8001aba:	391f      	subs	r1, #31
 8001abc:	40ca      	lsrs	r2, r1
 8001abe:	0011      	movs	r1, r2
 8001ac0:	2b20      	cmp	r3, #32
 8001ac2:	d003      	beq.n	8001acc <__aeabi_dsub+0x2d0>
 8001ac4:	2240      	movs	r2, #64	; 0x40
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	4098      	lsls	r0, r3
 8001aca:	4304      	orrs	r4, r0
 8001acc:	1e63      	subs	r3, r4, #1
 8001ace:	419c      	sbcs	r4, r3
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	4699      	mov	r9, r3
 8001ad4:	4698      	mov	r8, r3
 8001ad6:	430c      	orrs	r4, r1
 8001ad8:	0763      	lsls	r3, r4, #29
 8001ada:	d000      	beq.n	8001ade <__aeabi_dsub+0x2e2>
 8001adc:	e712      	b.n	8001904 <__aeabi_dsub+0x108>
 8001ade:	464b      	mov	r3, r9
 8001ae0:	464a      	mov	r2, r9
 8001ae2:	08e4      	lsrs	r4, r4, #3
 8001ae4:	075b      	lsls	r3, r3, #29
 8001ae6:	4323      	orrs	r3, r4
 8001ae8:	08d4      	lsrs	r4, r2, #3
 8001aea:	4642      	mov	r2, r8
 8001aec:	4919      	ldr	r1, [pc, #100]	; (8001b54 <__aeabi_dsub+0x358>)
 8001aee:	428a      	cmp	r2, r1
 8001af0:	d00e      	beq.n	8001b10 <__aeabi_dsub+0x314>
 8001af2:	0324      	lsls	r4, r4, #12
 8001af4:	0552      	lsls	r2, r2, #21
 8001af6:	0b24      	lsrs	r4, r4, #12
 8001af8:	0d52      	lsrs	r2, r2, #21
 8001afa:	e722      	b.n	8001942 <__aeabi_dsub+0x146>
 8001afc:	000a      	movs	r2, r1
 8001afe:	2400      	movs	r4, #0
 8001b00:	2300      	movs	r3, #0
 8001b02:	e71e      	b.n	8001942 <__aeabi_dsub+0x146>
 8001b04:	08db      	lsrs	r3, r3, #3
 8001b06:	4662      	mov	r2, ip
 8001b08:	0752      	lsls	r2, r2, #29
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	4662      	mov	r2, ip
 8001b0e:	08d4      	lsrs	r4, r2, #3
 8001b10:	001a      	movs	r2, r3
 8001b12:	4322      	orrs	r2, r4
 8001b14:	d100      	bne.n	8001b18 <__aeabi_dsub+0x31c>
 8001b16:	e1fc      	b.n	8001f12 <__aeabi_dsub+0x716>
 8001b18:	2280      	movs	r2, #128	; 0x80
 8001b1a:	0312      	lsls	r2, r2, #12
 8001b1c:	4314      	orrs	r4, r2
 8001b1e:	0324      	lsls	r4, r4, #12
 8001b20:	4a0c      	ldr	r2, [pc, #48]	; (8001b54 <__aeabi_dsub+0x358>)
 8001b22:	0b24      	lsrs	r4, r4, #12
 8001b24:	e70d      	b.n	8001942 <__aeabi_dsub+0x146>
 8001b26:	0020      	movs	r0, r4
 8001b28:	f000 fb74 	bl	8002214 <__clzsi2>
 8001b2c:	0001      	movs	r1, r0
 8001b2e:	3118      	adds	r1, #24
 8001b30:	291f      	cmp	r1, #31
 8001b32:	dc00      	bgt.n	8001b36 <__aeabi_dsub+0x33a>
 8001b34:	e6c4      	b.n	80018c0 <__aeabi_dsub+0xc4>
 8001b36:	3808      	subs	r0, #8
 8001b38:	4084      	lsls	r4, r0
 8001b3a:	4643      	mov	r3, r8
 8001b3c:	0020      	movs	r0, r4
 8001b3e:	2400      	movs	r4, #0
 8001b40:	4588      	cmp	r8, r1
 8001b42:	dc00      	bgt.n	8001b46 <__aeabi_dsub+0x34a>
 8001b44:	e6c8      	b.n	80018d8 <__aeabi_dsub+0xdc>
 8001b46:	4a04      	ldr	r2, [pc, #16]	; (8001b58 <__aeabi_dsub+0x35c>)
 8001b48:	1a5b      	subs	r3, r3, r1
 8001b4a:	4010      	ands	r0, r2
 8001b4c:	4698      	mov	r8, r3
 8001b4e:	4681      	mov	r9, r0
 8001b50:	e6d6      	b.n	8001900 <__aeabi_dsub+0x104>
 8001b52:	46c0      	nop			; (mov r8, r8)
 8001b54:	000007ff 	.word	0x000007ff
 8001b58:	ff7fffff 	.word	0xff7fffff
 8001b5c:	fffff801 	.word	0xfffff801
 8001b60:	000007fe 	.word	0x000007fe
 8001b64:	430f      	orrs	r7, r1
 8001b66:	1e7a      	subs	r2, r7, #1
 8001b68:	4197      	sbcs	r7, r2
 8001b6a:	e691      	b.n	8001890 <__aeabi_dsub+0x94>
 8001b6c:	4661      	mov	r1, ip
 8001b6e:	08db      	lsrs	r3, r3, #3
 8001b70:	0749      	lsls	r1, r1, #29
 8001b72:	430b      	orrs	r3, r1
 8001b74:	4661      	mov	r1, ip
 8001b76:	08cc      	lsrs	r4, r1, #3
 8001b78:	e7b8      	b.n	8001aec <__aeabi_dsub+0x2f0>
 8001b7a:	4640      	mov	r0, r8
 8001b7c:	4cd3      	ldr	r4, [pc, #844]	; (8001ecc <__aeabi_dsub+0x6d0>)
 8001b7e:	3001      	adds	r0, #1
 8001b80:	4220      	tst	r0, r4
 8001b82:	d000      	beq.n	8001b86 <__aeabi_dsub+0x38a>
 8001b84:	e0a2      	b.n	8001ccc <__aeabi_dsub+0x4d0>
 8001b86:	4640      	mov	r0, r8
 8001b88:	2800      	cmp	r0, #0
 8001b8a:	d000      	beq.n	8001b8e <__aeabi_dsub+0x392>
 8001b8c:	e101      	b.n	8001d92 <__aeabi_dsub+0x596>
 8001b8e:	4660      	mov	r0, ip
 8001b90:	4318      	orrs	r0, r3
 8001b92:	d100      	bne.n	8001b96 <__aeabi_dsub+0x39a>
 8001b94:	e15e      	b.n	8001e54 <__aeabi_dsub+0x658>
 8001b96:	0008      	movs	r0, r1
 8001b98:	4338      	orrs	r0, r7
 8001b9a:	d000      	beq.n	8001b9e <__aeabi_dsub+0x3a2>
 8001b9c:	e15f      	b.n	8001e5e <__aeabi_dsub+0x662>
 8001b9e:	4661      	mov	r1, ip
 8001ba0:	08db      	lsrs	r3, r3, #3
 8001ba2:	0749      	lsls	r1, r1, #29
 8001ba4:	430b      	orrs	r3, r1
 8001ba6:	4661      	mov	r1, ip
 8001ba8:	08cc      	lsrs	r4, r1, #3
 8001baa:	e7a2      	b.n	8001af2 <__aeabi_dsub+0x2f6>
 8001bac:	4dc8      	ldr	r5, [pc, #800]	; (8001ed0 <__aeabi_dsub+0x6d4>)
 8001bae:	42a8      	cmp	r0, r5
 8001bb0:	d100      	bne.n	8001bb4 <__aeabi_dsub+0x3b8>
 8001bb2:	e0cf      	b.n	8001d54 <__aeabi_dsub+0x558>
 8001bb4:	2580      	movs	r5, #128	; 0x80
 8001bb6:	4664      	mov	r4, ip
 8001bb8:	042d      	lsls	r5, r5, #16
 8001bba:	432c      	orrs	r4, r5
 8001bbc:	46a4      	mov	ip, r4
 8001bbe:	2a38      	cmp	r2, #56	; 0x38
 8001bc0:	dc56      	bgt.n	8001c70 <__aeabi_dsub+0x474>
 8001bc2:	2a1f      	cmp	r2, #31
 8001bc4:	dd00      	ble.n	8001bc8 <__aeabi_dsub+0x3cc>
 8001bc6:	e0d1      	b.n	8001d6c <__aeabi_dsub+0x570>
 8001bc8:	2520      	movs	r5, #32
 8001bca:	001e      	movs	r6, r3
 8001bcc:	1aad      	subs	r5, r5, r2
 8001bce:	4664      	mov	r4, ip
 8001bd0:	40ab      	lsls	r3, r5
 8001bd2:	40ac      	lsls	r4, r5
 8001bd4:	40d6      	lsrs	r6, r2
 8001bd6:	1e5d      	subs	r5, r3, #1
 8001bd8:	41ab      	sbcs	r3, r5
 8001bda:	4334      	orrs	r4, r6
 8001bdc:	4323      	orrs	r3, r4
 8001bde:	4664      	mov	r4, ip
 8001be0:	40d4      	lsrs	r4, r2
 8001be2:	1b09      	subs	r1, r1, r4
 8001be4:	e049      	b.n	8001c7a <__aeabi_dsub+0x47e>
 8001be6:	4660      	mov	r0, ip
 8001be8:	1bdc      	subs	r4, r3, r7
 8001bea:	1a46      	subs	r6, r0, r1
 8001bec:	42a3      	cmp	r3, r4
 8001bee:	4180      	sbcs	r0, r0
 8001bf0:	4240      	negs	r0, r0
 8001bf2:	4681      	mov	r9, r0
 8001bf4:	0030      	movs	r0, r6
 8001bf6:	464e      	mov	r6, r9
 8001bf8:	1b80      	subs	r0, r0, r6
 8001bfa:	4681      	mov	r9, r0
 8001bfc:	0200      	lsls	r0, r0, #8
 8001bfe:	d476      	bmi.n	8001cee <__aeabi_dsub+0x4f2>
 8001c00:	464b      	mov	r3, r9
 8001c02:	4323      	orrs	r3, r4
 8001c04:	d000      	beq.n	8001c08 <__aeabi_dsub+0x40c>
 8001c06:	e652      	b.n	80018ae <__aeabi_dsub+0xb2>
 8001c08:	2400      	movs	r4, #0
 8001c0a:	2500      	movs	r5, #0
 8001c0c:	e771      	b.n	8001af2 <__aeabi_dsub+0x2f6>
 8001c0e:	4339      	orrs	r1, r7
 8001c10:	000c      	movs	r4, r1
 8001c12:	1e62      	subs	r2, r4, #1
 8001c14:	4194      	sbcs	r4, r2
 8001c16:	18e4      	adds	r4, r4, r3
 8001c18:	429c      	cmp	r4, r3
 8001c1a:	419b      	sbcs	r3, r3
 8001c1c:	425b      	negs	r3, r3
 8001c1e:	4463      	add	r3, ip
 8001c20:	4699      	mov	r9, r3
 8001c22:	464b      	mov	r3, r9
 8001c24:	021b      	lsls	r3, r3, #8
 8001c26:	d400      	bmi.n	8001c2a <__aeabi_dsub+0x42e>
 8001c28:	e756      	b.n	8001ad8 <__aeabi_dsub+0x2dc>
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	469c      	mov	ip, r3
 8001c2e:	4ba8      	ldr	r3, [pc, #672]	; (8001ed0 <__aeabi_dsub+0x6d4>)
 8001c30:	44e0      	add	r8, ip
 8001c32:	4598      	cmp	r8, r3
 8001c34:	d038      	beq.n	8001ca8 <__aeabi_dsub+0x4ac>
 8001c36:	464b      	mov	r3, r9
 8001c38:	48a6      	ldr	r0, [pc, #664]	; (8001ed4 <__aeabi_dsub+0x6d8>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	4003      	ands	r3, r0
 8001c3e:	0018      	movs	r0, r3
 8001c40:	0863      	lsrs	r3, r4, #1
 8001c42:	4014      	ands	r4, r2
 8001c44:	431c      	orrs	r4, r3
 8001c46:	07c3      	lsls	r3, r0, #31
 8001c48:	431c      	orrs	r4, r3
 8001c4a:	0843      	lsrs	r3, r0, #1
 8001c4c:	4699      	mov	r9, r3
 8001c4e:	e657      	b.n	8001900 <__aeabi_dsub+0x104>
 8001c50:	0010      	movs	r0, r2
 8001c52:	000e      	movs	r6, r1
 8001c54:	3820      	subs	r0, #32
 8001c56:	40c6      	lsrs	r6, r0
 8001c58:	2a20      	cmp	r2, #32
 8001c5a:	d004      	beq.n	8001c66 <__aeabi_dsub+0x46a>
 8001c5c:	2040      	movs	r0, #64	; 0x40
 8001c5e:	1a82      	subs	r2, r0, r2
 8001c60:	4091      	lsls	r1, r2
 8001c62:	430f      	orrs	r7, r1
 8001c64:	46b9      	mov	r9, r7
 8001c66:	464f      	mov	r7, r9
 8001c68:	1e7a      	subs	r2, r7, #1
 8001c6a:	4197      	sbcs	r7, r2
 8001c6c:	4337      	orrs	r7, r6
 8001c6e:	e60f      	b.n	8001890 <__aeabi_dsub+0x94>
 8001c70:	4662      	mov	r2, ip
 8001c72:	431a      	orrs	r2, r3
 8001c74:	0013      	movs	r3, r2
 8001c76:	1e5a      	subs	r2, r3, #1
 8001c78:	4193      	sbcs	r3, r2
 8001c7a:	1afc      	subs	r4, r7, r3
 8001c7c:	42a7      	cmp	r7, r4
 8001c7e:	41bf      	sbcs	r7, r7
 8001c80:	427f      	negs	r7, r7
 8001c82:	1bcb      	subs	r3, r1, r7
 8001c84:	4699      	mov	r9, r3
 8001c86:	465d      	mov	r5, fp
 8001c88:	4680      	mov	r8, r0
 8001c8a:	e608      	b.n	800189e <__aeabi_dsub+0xa2>
 8001c8c:	4666      	mov	r6, ip
 8001c8e:	431e      	orrs	r6, r3
 8001c90:	d100      	bne.n	8001c94 <__aeabi_dsub+0x498>
 8001c92:	e0be      	b.n	8001e12 <__aeabi_dsub+0x616>
 8001c94:	1e56      	subs	r6, r2, #1
 8001c96:	2a01      	cmp	r2, #1
 8001c98:	d100      	bne.n	8001c9c <__aeabi_dsub+0x4a0>
 8001c9a:	e109      	b.n	8001eb0 <__aeabi_dsub+0x6b4>
 8001c9c:	4c8c      	ldr	r4, [pc, #560]	; (8001ed0 <__aeabi_dsub+0x6d4>)
 8001c9e:	42a2      	cmp	r2, r4
 8001ca0:	d100      	bne.n	8001ca4 <__aeabi_dsub+0x4a8>
 8001ca2:	e119      	b.n	8001ed8 <__aeabi_dsub+0x6dc>
 8001ca4:	0032      	movs	r2, r6
 8001ca6:	e6c1      	b.n	8001a2c <__aeabi_dsub+0x230>
 8001ca8:	4642      	mov	r2, r8
 8001caa:	2400      	movs	r4, #0
 8001cac:	2300      	movs	r3, #0
 8001cae:	e648      	b.n	8001942 <__aeabi_dsub+0x146>
 8001cb0:	2020      	movs	r0, #32
 8001cb2:	000c      	movs	r4, r1
 8001cb4:	1a80      	subs	r0, r0, r2
 8001cb6:	003e      	movs	r6, r7
 8001cb8:	4087      	lsls	r7, r0
 8001cba:	4084      	lsls	r4, r0
 8001cbc:	40d6      	lsrs	r6, r2
 8001cbe:	1e78      	subs	r0, r7, #1
 8001cc0:	4187      	sbcs	r7, r0
 8001cc2:	40d1      	lsrs	r1, r2
 8001cc4:	4334      	orrs	r4, r6
 8001cc6:	433c      	orrs	r4, r7
 8001cc8:	448c      	add	ip, r1
 8001cca:	e7a4      	b.n	8001c16 <__aeabi_dsub+0x41a>
 8001ccc:	4a80      	ldr	r2, [pc, #512]	; (8001ed0 <__aeabi_dsub+0x6d4>)
 8001cce:	4290      	cmp	r0, r2
 8001cd0:	d100      	bne.n	8001cd4 <__aeabi_dsub+0x4d8>
 8001cd2:	e0e9      	b.n	8001ea8 <__aeabi_dsub+0x6ac>
 8001cd4:	19df      	adds	r7, r3, r7
 8001cd6:	429f      	cmp	r7, r3
 8001cd8:	419b      	sbcs	r3, r3
 8001cda:	4461      	add	r1, ip
 8001cdc:	425b      	negs	r3, r3
 8001cde:	18c9      	adds	r1, r1, r3
 8001ce0:	07cc      	lsls	r4, r1, #31
 8001ce2:	087f      	lsrs	r7, r7, #1
 8001ce4:	084b      	lsrs	r3, r1, #1
 8001ce6:	4699      	mov	r9, r3
 8001ce8:	4680      	mov	r8, r0
 8001cea:	433c      	orrs	r4, r7
 8001cec:	e6f4      	b.n	8001ad8 <__aeabi_dsub+0x2dc>
 8001cee:	1afc      	subs	r4, r7, r3
 8001cf0:	42a7      	cmp	r7, r4
 8001cf2:	41bf      	sbcs	r7, r7
 8001cf4:	4663      	mov	r3, ip
 8001cf6:	427f      	negs	r7, r7
 8001cf8:	1ac9      	subs	r1, r1, r3
 8001cfa:	1bcb      	subs	r3, r1, r7
 8001cfc:	4699      	mov	r9, r3
 8001cfe:	465d      	mov	r5, fp
 8001d00:	e5d5      	b.n	80018ae <__aeabi_dsub+0xb2>
 8001d02:	08ff      	lsrs	r7, r7, #3
 8001d04:	074b      	lsls	r3, r1, #29
 8001d06:	465d      	mov	r5, fp
 8001d08:	433b      	orrs	r3, r7
 8001d0a:	08cc      	lsrs	r4, r1, #3
 8001d0c:	e6ee      	b.n	8001aec <__aeabi_dsub+0x2f0>
 8001d0e:	4662      	mov	r2, ip
 8001d10:	431a      	orrs	r2, r3
 8001d12:	d000      	beq.n	8001d16 <__aeabi_dsub+0x51a>
 8001d14:	e082      	b.n	8001e1c <__aeabi_dsub+0x620>
 8001d16:	000b      	movs	r3, r1
 8001d18:	433b      	orrs	r3, r7
 8001d1a:	d11b      	bne.n	8001d54 <__aeabi_dsub+0x558>
 8001d1c:	2480      	movs	r4, #128	; 0x80
 8001d1e:	2500      	movs	r5, #0
 8001d20:	0324      	lsls	r4, r4, #12
 8001d22:	e6f9      	b.n	8001b18 <__aeabi_dsub+0x31c>
 8001d24:	19dc      	adds	r4, r3, r7
 8001d26:	429c      	cmp	r4, r3
 8001d28:	419b      	sbcs	r3, r3
 8001d2a:	4461      	add	r1, ip
 8001d2c:	4689      	mov	r9, r1
 8001d2e:	425b      	negs	r3, r3
 8001d30:	4499      	add	r9, r3
 8001d32:	464b      	mov	r3, r9
 8001d34:	021b      	lsls	r3, r3, #8
 8001d36:	d444      	bmi.n	8001dc2 <__aeabi_dsub+0x5c6>
 8001d38:	2301      	movs	r3, #1
 8001d3a:	4698      	mov	r8, r3
 8001d3c:	e6cc      	b.n	8001ad8 <__aeabi_dsub+0x2dc>
 8001d3e:	1bdc      	subs	r4, r3, r7
 8001d40:	4662      	mov	r2, ip
 8001d42:	42a3      	cmp	r3, r4
 8001d44:	419b      	sbcs	r3, r3
 8001d46:	1a51      	subs	r1, r2, r1
 8001d48:	425b      	negs	r3, r3
 8001d4a:	1acb      	subs	r3, r1, r3
 8001d4c:	4699      	mov	r9, r3
 8001d4e:	2301      	movs	r3, #1
 8001d50:	4698      	mov	r8, r3
 8001d52:	e5a4      	b.n	800189e <__aeabi_dsub+0xa2>
 8001d54:	08ff      	lsrs	r7, r7, #3
 8001d56:	074b      	lsls	r3, r1, #29
 8001d58:	465d      	mov	r5, fp
 8001d5a:	433b      	orrs	r3, r7
 8001d5c:	08cc      	lsrs	r4, r1, #3
 8001d5e:	e6d7      	b.n	8001b10 <__aeabi_dsub+0x314>
 8001d60:	4662      	mov	r2, ip
 8001d62:	431a      	orrs	r2, r3
 8001d64:	0014      	movs	r4, r2
 8001d66:	1e63      	subs	r3, r4, #1
 8001d68:	419c      	sbcs	r4, r3
 8001d6a:	e679      	b.n	8001a60 <__aeabi_dsub+0x264>
 8001d6c:	0015      	movs	r5, r2
 8001d6e:	4664      	mov	r4, ip
 8001d70:	3d20      	subs	r5, #32
 8001d72:	40ec      	lsrs	r4, r5
 8001d74:	46a0      	mov	r8, r4
 8001d76:	2a20      	cmp	r2, #32
 8001d78:	d005      	beq.n	8001d86 <__aeabi_dsub+0x58a>
 8001d7a:	2540      	movs	r5, #64	; 0x40
 8001d7c:	4664      	mov	r4, ip
 8001d7e:	1aaa      	subs	r2, r5, r2
 8001d80:	4094      	lsls	r4, r2
 8001d82:	4323      	orrs	r3, r4
 8001d84:	469a      	mov	sl, r3
 8001d86:	4654      	mov	r4, sl
 8001d88:	1e63      	subs	r3, r4, #1
 8001d8a:	419c      	sbcs	r4, r3
 8001d8c:	4643      	mov	r3, r8
 8001d8e:	4323      	orrs	r3, r4
 8001d90:	e773      	b.n	8001c7a <__aeabi_dsub+0x47e>
 8001d92:	4662      	mov	r2, ip
 8001d94:	431a      	orrs	r2, r3
 8001d96:	d023      	beq.n	8001de0 <__aeabi_dsub+0x5e4>
 8001d98:	000a      	movs	r2, r1
 8001d9a:	433a      	orrs	r2, r7
 8001d9c:	d000      	beq.n	8001da0 <__aeabi_dsub+0x5a4>
 8001d9e:	e0a0      	b.n	8001ee2 <__aeabi_dsub+0x6e6>
 8001da0:	4662      	mov	r2, ip
 8001da2:	08db      	lsrs	r3, r3, #3
 8001da4:	0752      	lsls	r2, r2, #29
 8001da6:	4313      	orrs	r3, r2
 8001da8:	4662      	mov	r2, ip
 8001daa:	08d4      	lsrs	r4, r2, #3
 8001dac:	e6b0      	b.n	8001b10 <__aeabi_dsub+0x314>
 8001dae:	000b      	movs	r3, r1
 8001db0:	433b      	orrs	r3, r7
 8001db2:	d100      	bne.n	8001db6 <__aeabi_dsub+0x5ba>
 8001db4:	e728      	b.n	8001c08 <__aeabi_dsub+0x40c>
 8001db6:	08ff      	lsrs	r7, r7, #3
 8001db8:	074b      	lsls	r3, r1, #29
 8001dba:	465d      	mov	r5, fp
 8001dbc:	433b      	orrs	r3, r7
 8001dbe:	08cc      	lsrs	r4, r1, #3
 8001dc0:	e697      	b.n	8001af2 <__aeabi_dsub+0x2f6>
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	4698      	mov	r8, r3
 8001dc6:	e736      	b.n	8001c36 <__aeabi_dsub+0x43a>
 8001dc8:	1afc      	subs	r4, r7, r3
 8001dca:	42a7      	cmp	r7, r4
 8001dcc:	41bf      	sbcs	r7, r7
 8001dce:	4663      	mov	r3, ip
 8001dd0:	427f      	negs	r7, r7
 8001dd2:	1ac9      	subs	r1, r1, r3
 8001dd4:	1bcb      	subs	r3, r1, r7
 8001dd6:	4699      	mov	r9, r3
 8001dd8:	2301      	movs	r3, #1
 8001dda:	465d      	mov	r5, fp
 8001ddc:	4698      	mov	r8, r3
 8001dde:	e55e      	b.n	800189e <__aeabi_dsub+0xa2>
 8001de0:	074b      	lsls	r3, r1, #29
 8001de2:	08ff      	lsrs	r7, r7, #3
 8001de4:	433b      	orrs	r3, r7
 8001de6:	08cc      	lsrs	r4, r1, #3
 8001de8:	e692      	b.n	8001b10 <__aeabi_dsub+0x314>
 8001dea:	1bdc      	subs	r4, r3, r7
 8001dec:	4660      	mov	r0, ip
 8001dee:	42a3      	cmp	r3, r4
 8001df0:	41b6      	sbcs	r6, r6
 8001df2:	1a40      	subs	r0, r0, r1
 8001df4:	4276      	negs	r6, r6
 8001df6:	1b80      	subs	r0, r0, r6
 8001df8:	4681      	mov	r9, r0
 8001dfa:	0200      	lsls	r0, r0, #8
 8001dfc:	d560      	bpl.n	8001ec0 <__aeabi_dsub+0x6c4>
 8001dfe:	1afc      	subs	r4, r7, r3
 8001e00:	42a7      	cmp	r7, r4
 8001e02:	41bf      	sbcs	r7, r7
 8001e04:	4663      	mov	r3, ip
 8001e06:	427f      	negs	r7, r7
 8001e08:	1ac9      	subs	r1, r1, r3
 8001e0a:	1bcb      	subs	r3, r1, r7
 8001e0c:	4699      	mov	r9, r3
 8001e0e:	465d      	mov	r5, fp
 8001e10:	e576      	b.n	8001900 <__aeabi_dsub+0x104>
 8001e12:	08ff      	lsrs	r7, r7, #3
 8001e14:	074b      	lsls	r3, r1, #29
 8001e16:	433b      	orrs	r3, r7
 8001e18:	08cc      	lsrs	r4, r1, #3
 8001e1a:	e667      	b.n	8001aec <__aeabi_dsub+0x2f0>
 8001e1c:	000a      	movs	r2, r1
 8001e1e:	08db      	lsrs	r3, r3, #3
 8001e20:	433a      	orrs	r2, r7
 8001e22:	d100      	bne.n	8001e26 <__aeabi_dsub+0x62a>
 8001e24:	e66f      	b.n	8001b06 <__aeabi_dsub+0x30a>
 8001e26:	4662      	mov	r2, ip
 8001e28:	0752      	lsls	r2, r2, #29
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	4662      	mov	r2, ip
 8001e2e:	08d4      	lsrs	r4, r2, #3
 8001e30:	2280      	movs	r2, #128	; 0x80
 8001e32:	0312      	lsls	r2, r2, #12
 8001e34:	4214      	tst	r4, r2
 8001e36:	d007      	beq.n	8001e48 <__aeabi_dsub+0x64c>
 8001e38:	08c8      	lsrs	r0, r1, #3
 8001e3a:	4210      	tst	r0, r2
 8001e3c:	d104      	bne.n	8001e48 <__aeabi_dsub+0x64c>
 8001e3e:	465d      	mov	r5, fp
 8001e40:	0004      	movs	r4, r0
 8001e42:	08fb      	lsrs	r3, r7, #3
 8001e44:	0749      	lsls	r1, r1, #29
 8001e46:	430b      	orrs	r3, r1
 8001e48:	0f5a      	lsrs	r2, r3, #29
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	08db      	lsrs	r3, r3, #3
 8001e4e:	0752      	lsls	r2, r2, #29
 8001e50:	4313      	orrs	r3, r2
 8001e52:	e65d      	b.n	8001b10 <__aeabi_dsub+0x314>
 8001e54:	074b      	lsls	r3, r1, #29
 8001e56:	08ff      	lsrs	r7, r7, #3
 8001e58:	433b      	orrs	r3, r7
 8001e5a:	08cc      	lsrs	r4, r1, #3
 8001e5c:	e649      	b.n	8001af2 <__aeabi_dsub+0x2f6>
 8001e5e:	19dc      	adds	r4, r3, r7
 8001e60:	429c      	cmp	r4, r3
 8001e62:	419b      	sbcs	r3, r3
 8001e64:	4461      	add	r1, ip
 8001e66:	4689      	mov	r9, r1
 8001e68:	425b      	negs	r3, r3
 8001e6a:	4499      	add	r9, r3
 8001e6c:	464b      	mov	r3, r9
 8001e6e:	021b      	lsls	r3, r3, #8
 8001e70:	d400      	bmi.n	8001e74 <__aeabi_dsub+0x678>
 8001e72:	e631      	b.n	8001ad8 <__aeabi_dsub+0x2dc>
 8001e74:	464a      	mov	r2, r9
 8001e76:	4b17      	ldr	r3, [pc, #92]	; (8001ed4 <__aeabi_dsub+0x6d8>)
 8001e78:	401a      	ands	r2, r3
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	4691      	mov	r9, r2
 8001e7e:	4698      	mov	r8, r3
 8001e80:	e62a      	b.n	8001ad8 <__aeabi_dsub+0x2dc>
 8001e82:	0016      	movs	r6, r2
 8001e84:	4664      	mov	r4, ip
 8001e86:	3e20      	subs	r6, #32
 8001e88:	40f4      	lsrs	r4, r6
 8001e8a:	46a0      	mov	r8, r4
 8001e8c:	2a20      	cmp	r2, #32
 8001e8e:	d005      	beq.n	8001e9c <__aeabi_dsub+0x6a0>
 8001e90:	2640      	movs	r6, #64	; 0x40
 8001e92:	4664      	mov	r4, ip
 8001e94:	1ab2      	subs	r2, r6, r2
 8001e96:	4094      	lsls	r4, r2
 8001e98:	4323      	orrs	r3, r4
 8001e9a:	469a      	mov	sl, r3
 8001e9c:	4654      	mov	r4, sl
 8001e9e:	1e63      	subs	r3, r4, #1
 8001ea0:	419c      	sbcs	r4, r3
 8001ea2:	4643      	mov	r3, r8
 8001ea4:	431c      	orrs	r4, r3
 8001ea6:	e5db      	b.n	8001a60 <__aeabi_dsub+0x264>
 8001ea8:	0002      	movs	r2, r0
 8001eaa:	2400      	movs	r4, #0
 8001eac:	2300      	movs	r3, #0
 8001eae:	e548      	b.n	8001942 <__aeabi_dsub+0x146>
 8001eb0:	19dc      	adds	r4, r3, r7
 8001eb2:	42bc      	cmp	r4, r7
 8001eb4:	41bf      	sbcs	r7, r7
 8001eb6:	4461      	add	r1, ip
 8001eb8:	4689      	mov	r9, r1
 8001eba:	427f      	negs	r7, r7
 8001ebc:	44b9      	add	r9, r7
 8001ebe:	e738      	b.n	8001d32 <__aeabi_dsub+0x536>
 8001ec0:	464b      	mov	r3, r9
 8001ec2:	4323      	orrs	r3, r4
 8001ec4:	d100      	bne.n	8001ec8 <__aeabi_dsub+0x6cc>
 8001ec6:	e69f      	b.n	8001c08 <__aeabi_dsub+0x40c>
 8001ec8:	e606      	b.n	8001ad8 <__aeabi_dsub+0x2dc>
 8001eca:	46c0      	nop			; (mov r8, r8)
 8001ecc:	000007fe 	.word	0x000007fe
 8001ed0:	000007ff 	.word	0x000007ff
 8001ed4:	ff7fffff 	.word	0xff7fffff
 8001ed8:	08ff      	lsrs	r7, r7, #3
 8001eda:	074b      	lsls	r3, r1, #29
 8001edc:	433b      	orrs	r3, r7
 8001ede:	08cc      	lsrs	r4, r1, #3
 8001ee0:	e616      	b.n	8001b10 <__aeabi_dsub+0x314>
 8001ee2:	4662      	mov	r2, ip
 8001ee4:	08db      	lsrs	r3, r3, #3
 8001ee6:	0752      	lsls	r2, r2, #29
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	4662      	mov	r2, ip
 8001eec:	08d4      	lsrs	r4, r2, #3
 8001eee:	2280      	movs	r2, #128	; 0x80
 8001ef0:	0312      	lsls	r2, r2, #12
 8001ef2:	4214      	tst	r4, r2
 8001ef4:	d007      	beq.n	8001f06 <__aeabi_dsub+0x70a>
 8001ef6:	08c8      	lsrs	r0, r1, #3
 8001ef8:	4210      	tst	r0, r2
 8001efa:	d104      	bne.n	8001f06 <__aeabi_dsub+0x70a>
 8001efc:	465d      	mov	r5, fp
 8001efe:	0004      	movs	r4, r0
 8001f00:	08fb      	lsrs	r3, r7, #3
 8001f02:	0749      	lsls	r1, r1, #29
 8001f04:	430b      	orrs	r3, r1
 8001f06:	0f5a      	lsrs	r2, r3, #29
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	0752      	lsls	r2, r2, #29
 8001f0c:	08db      	lsrs	r3, r3, #3
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	e5fe      	b.n	8001b10 <__aeabi_dsub+0x314>
 8001f12:	2300      	movs	r3, #0
 8001f14:	4a01      	ldr	r2, [pc, #4]	; (8001f1c <__aeabi_dsub+0x720>)
 8001f16:	001c      	movs	r4, r3
 8001f18:	e513      	b.n	8001942 <__aeabi_dsub+0x146>
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	000007ff 	.word	0x000007ff

08001f20 <__aeabi_dcmpun>:
 8001f20:	b570      	push	{r4, r5, r6, lr}
 8001f22:	0005      	movs	r5, r0
 8001f24:	480c      	ldr	r0, [pc, #48]	; (8001f58 <__aeabi_dcmpun+0x38>)
 8001f26:	031c      	lsls	r4, r3, #12
 8001f28:	0016      	movs	r6, r2
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	030a      	lsls	r2, r1, #12
 8001f2e:	0049      	lsls	r1, r1, #1
 8001f30:	0b12      	lsrs	r2, r2, #12
 8001f32:	0d49      	lsrs	r1, r1, #21
 8001f34:	0b24      	lsrs	r4, r4, #12
 8001f36:	0d5b      	lsrs	r3, r3, #21
 8001f38:	4281      	cmp	r1, r0
 8001f3a:	d008      	beq.n	8001f4e <__aeabi_dcmpun+0x2e>
 8001f3c:	4a06      	ldr	r2, [pc, #24]	; (8001f58 <__aeabi_dcmpun+0x38>)
 8001f3e:	2000      	movs	r0, #0
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d103      	bne.n	8001f4c <__aeabi_dcmpun+0x2c>
 8001f44:	0020      	movs	r0, r4
 8001f46:	4330      	orrs	r0, r6
 8001f48:	1e43      	subs	r3, r0, #1
 8001f4a:	4198      	sbcs	r0, r3
 8001f4c:	bd70      	pop	{r4, r5, r6, pc}
 8001f4e:	2001      	movs	r0, #1
 8001f50:	432a      	orrs	r2, r5
 8001f52:	d1fb      	bne.n	8001f4c <__aeabi_dcmpun+0x2c>
 8001f54:	e7f2      	b.n	8001f3c <__aeabi_dcmpun+0x1c>
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	000007ff 	.word	0x000007ff

08001f5c <__aeabi_d2iz>:
 8001f5c:	000a      	movs	r2, r1
 8001f5e:	b530      	push	{r4, r5, lr}
 8001f60:	4c13      	ldr	r4, [pc, #76]	; (8001fb0 <__aeabi_d2iz+0x54>)
 8001f62:	0053      	lsls	r3, r2, #1
 8001f64:	0309      	lsls	r1, r1, #12
 8001f66:	0005      	movs	r5, r0
 8001f68:	0b09      	lsrs	r1, r1, #12
 8001f6a:	2000      	movs	r0, #0
 8001f6c:	0d5b      	lsrs	r3, r3, #21
 8001f6e:	0fd2      	lsrs	r2, r2, #31
 8001f70:	42a3      	cmp	r3, r4
 8001f72:	dd04      	ble.n	8001f7e <__aeabi_d2iz+0x22>
 8001f74:	480f      	ldr	r0, [pc, #60]	; (8001fb4 <__aeabi_d2iz+0x58>)
 8001f76:	4283      	cmp	r3, r0
 8001f78:	dd02      	ble.n	8001f80 <__aeabi_d2iz+0x24>
 8001f7a:	4b0f      	ldr	r3, [pc, #60]	; (8001fb8 <__aeabi_d2iz+0x5c>)
 8001f7c:	18d0      	adds	r0, r2, r3
 8001f7e:	bd30      	pop	{r4, r5, pc}
 8001f80:	2080      	movs	r0, #128	; 0x80
 8001f82:	0340      	lsls	r0, r0, #13
 8001f84:	4301      	orrs	r1, r0
 8001f86:	480d      	ldr	r0, [pc, #52]	; (8001fbc <__aeabi_d2iz+0x60>)
 8001f88:	1ac0      	subs	r0, r0, r3
 8001f8a:	281f      	cmp	r0, #31
 8001f8c:	dd08      	ble.n	8001fa0 <__aeabi_d2iz+0x44>
 8001f8e:	480c      	ldr	r0, [pc, #48]	; (8001fc0 <__aeabi_d2iz+0x64>)
 8001f90:	1ac3      	subs	r3, r0, r3
 8001f92:	40d9      	lsrs	r1, r3
 8001f94:	000b      	movs	r3, r1
 8001f96:	4258      	negs	r0, r3
 8001f98:	2a00      	cmp	r2, #0
 8001f9a:	d1f0      	bne.n	8001f7e <__aeabi_d2iz+0x22>
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	e7ee      	b.n	8001f7e <__aeabi_d2iz+0x22>
 8001fa0:	4c08      	ldr	r4, [pc, #32]	; (8001fc4 <__aeabi_d2iz+0x68>)
 8001fa2:	40c5      	lsrs	r5, r0
 8001fa4:	46a4      	mov	ip, r4
 8001fa6:	4463      	add	r3, ip
 8001fa8:	4099      	lsls	r1, r3
 8001faa:	000b      	movs	r3, r1
 8001fac:	432b      	orrs	r3, r5
 8001fae:	e7f2      	b.n	8001f96 <__aeabi_d2iz+0x3a>
 8001fb0:	000003fe 	.word	0x000003fe
 8001fb4:	0000041d 	.word	0x0000041d
 8001fb8:	7fffffff 	.word	0x7fffffff
 8001fbc:	00000433 	.word	0x00000433
 8001fc0:	00000413 	.word	0x00000413
 8001fc4:	fffffbed 	.word	0xfffffbed

08001fc8 <__aeabi_i2d>:
 8001fc8:	b570      	push	{r4, r5, r6, lr}
 8001fca:	2800      	cmp	r0, #0
 8001fcc:	d016      	beq.n	8001ffc <__aeabi_i2d+0x34>
 8001fce:	17c3      	asrs	r3, r0, #31
 8001fd0:	18c5      	adds	r5, r0, r3
 8001fd2:	405d      	eors	r5, r3
 8001fd4:	0fc4      	lsrs	r4, r0, #31
 8001fd6:	0028      	movs	r0, r5
 8001fd8:	f000 f91c 	bl	8002214 <__clzsi2>
 8001fdc:	4a11      	ldr	r2, [pc, #68]	; (8002024 <__aeabi_i2d+0x5c>)
 8001fde:	1a12      	subs	r2, r2, r0
 8001fe0:	280a      	cmp	r0, #10
 8001fe2:	dc16      	bgt.n	8002012 <__aeabi_i2d+0x4a>
 8001fe4:	0003      	movs	r3, r0
 8001fe6:	002e      	movs	r6, r5
 8001fe8:	3315      	adds	r3, #21
 8001fea:	409e      	lsls	r6, r3
 8001fec:	230b      	movs	r3, #11
 8001fee:	1a18      	subs	r0, r3, r0
 8001ff0:	40c5      	lsrs	r5, r0
 8001ff2:	0552      	lsls	r2, r2, #21
 8001ff4:	032d      	lsls	r5, r5, #12
 8001ff6:	0b2d      	lsrs	r5, r5, #12
 8001ff8:	0d53      	lsrs	r3, r2, #21
 8001ffa:	e003      	b.n	8002004 <__aeabi_i2d+0x3c>
 8001ffc:	2400      	movs	r4, #0
 8001ffe:	2300      	movs	r3, #0
 8002000:	2500      	movs	r5, #0
 8002002:	2600      	movs	r6, #0
 8002004:	051b      	lsls	r3, r3, #20
 8002006:	432b      	orrs	r3, r5
 8002008:	07e4      	lsls	r4, r4, #31
 800200a:	4323      	orrs	r3, r4
 800200c:	0030      	movs	r0, r6
 800200e:	0019      	movs	r1, r3
 8002010:	bd70      	pop	{r4, r5, r6, pc}
 8002012:	380b      	subs	r0, #11
 8002014:	4085      	lsls	r5, r0
 8002016:	0552      	lsls	r2, r2, #21
 8002018:	032d      	lsls	r5, r5, #12
 800201a:	2600      	movs	r6, #0
 800201c:	0b2d      	lsrs	r5, r5, #12
 800201e:	0d53      	lsrs	r3, r2, #21
 8002020:	e7f0      	b.n	8002004 <__aeabi_i2d+0x3c>
 8002022:	46c0      	nop			; (mov r8, r8)
 8002024:	0000041e 	.word	0x0000041e

08002028 <__aeabi_ui2d>:
 8002028:	b510      	push	{r4, lr}
 800202a:	1e04      	subs	r4, r0, #0
 800202c:	d010      	beq.n	8002050 <__aeabi_ui2d+0x28>
 800202e:	f000 f8f1 	bl	8002214 <__clzsi2>
 8002032:	4b0f      	ldr	r3, [pc, #60]	; (8002070 <__aeabi_ui2d+0x48>)
 8002034:	1a1b      	subs	r3, r3, r0
 8002036:	280a      	cmp	r0, #10
 8002038:	dc11      	bgt.n	800205e <__aeabi_ui2d+0x36>
 800203a:	220b      	movs	r2, #11
 800203c:	0021      	movs	r1, r4
 800203e:	1a12      	subs	r2, r2, r0
 8002040:	40d1      	lsrs	r1, r2
 8002042:	3015      	adds	r0, #21
 8002044:	030a      	lsls	r2, r1, #12
 8002046:	055b      	lsls	r3, r3, #21
 8002048:	4084      	lsls	r4, r0
 800204a:	0b12      	lsrs	r2, r2, #12
 800204c:	0d5b      	lsrs	r3, r3, #21
 800204e:	e001      	b.n	8002054 <__aeabi_ui2d+0x2c>
 8002050:	2300      	movs	r3, #0
 8002052:	2200      	movs	r2, #0
 8002054:	051b      	lsls	r3, r3, #20
 8002056:	4313      	orrs	r3, r2
 8002058:	0020      	movs	r0, r4
 800205a:	0019      	movs	r1, r3
 800205c:	bd10      	pop	{r4, pc}
 800205e:	0022      	movs	r2, r4
 8002060:	380b      	subs	r0, #11
 8002062:	4082      	lsls	r2, r0
 8002064:	055b      	lsls	r3, r3, #21
 8002066:	0312      	lsls	r2, r2, #12
 8002068:	2400      	movs	r4, #0
 800206a:	0b12      	lsrs	r2, r2, #12
 800206c:	0d5b      	lsrs	r3, r3, #21
 800206e:	e7f1      	b.n	8002054 <__aeabi_ui2d+0x2c>
 8002070:	0000041e 	.word	0x0000041e

08002074 <__aeabi_f2d>:
 8002074:	b570      	push	{r4, r5, r6, lr}
 8002076:	0043      	lsls	r3, r0, #1
 8002078:	0246      	lsls	r6, r0, #9
 800207a:	0fc4      	lsrs	r4, r0, #31
 800207c:	20fe      	movs	r0, #254	; 0xfe
 800207e:	0e1b      	lsrs	r3, r3, #24
 8002080:	1c59      	adds	r1, r3, #1
 8002082:	0a75      	lsrs	r5, r6, #9
 8002084:	4208      	tst	r0, r1
 8002086:	d00c      	beq.n	80020a2 <__aeabi_f2d+0x2e>
 8002088:	22e0      	movs	r2, #224	; 0xe0
 800208a:	0092      	lsls	r2, r2, #2
 800208c:	4694      	mov	ip, r2
 800208e:	076d      	lsls	r5, r5, #29
 8002090:	0b36      	lsrs	r6, r6, #12
 8002092:	4463      	add	r3, ip
 8002094:	051b      	lsls	r3, r3, #20
 8002096:	4333      	orrs	r3, r6
 8002098:	07e4      	lsls	r4, r4, #31
 800209a:	4323      	orrs	r3, r4
 800209c:	0028      	movs	r0, r5
 800209e:	0019      	movs	r1, r3
 80020a0:	bd70      	pop	{r4, r5, r6, pc}
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d114      	bne.n	80020d0 <__aeabi_f2d+0x5c>
 80020a6:	2d00      	cmp	r5, #0
 80020a8:	d01b      	beq.n	80020e2 <__aeabi_f2d+0x6e>
 80020aa:	0028      	movs	r0, r5
 80020ac:	f000 f8b2 	bl	8002214 <__clzsi2>
 80020b0:	280a      	cmp	r0, #10
 80020b2:	dc1c      	bgt.n	80020ee <__aeabi_f2d+0x7a>
 80020b4:	230b      	movs	r3, #11
 80020b6:	002e      	movs	r6, r5
 80020b8:	1a1b      	subs	r3, r3, r0
 80020ba:	40de      	lsrs	r6, r3
 80020bc:	0003      	movs	r3, r0
 80020be:	3315      	adds	r3, #21
 80020c0:	409d      	lsls	r5, r3
 80020c2:	4a0e      	ldr	r2, [pc, #56]	; (80020fc <__aeabi_f2d+0x88>)
 80020c4:	0336      	lsls	r6, r6, #12
 80020c6:	1a12      	subs	r2, r2, r0
 80020c8:	0552      	lsls	r2, r2, #21
 80020ca:	0b36      	lsrs	r6, r6, #12
 80020cc:	0d53      	lsrs	r3, r2, #21
 80020ce:	e7e1      	b.n	8002094 <__aeabi_f2d+0x20>
 80020d0:	2d00      	cmp	r5, #0
 80020d2:	d009      	beq.n	80020e8 <__aeabi_f2d+0x74>
 80020d4:	2280      	movs	r2, #128	; 0x80
 80020d6:	0b36      	lsrs	r6, r6, #12
 80020d8:	0312      	lsls	r2, r2, #12
 80020da:	4b09      	ldr	r3, [pc, #36]	; (8002100 <__aeabi_f2d+0x8c>)
 80020dc:	076d      	lsls	r5, r5, #29
 80020de:	4316      	orrs	r6, r2
 80020e0:	e7d8      	b.n	8002094 <__aeabi_f2d+0x20>
 80020e2:	2300      	movs	r3, #0
 80020e4:	2600      	movs	r6, #0
 80020e6:	e7d5      	b.n	8002094 <__aeabi_f2d+0x20>
 80020e8:	2600      	movs	r6, #0
 80020ea:	4b05      	ldr	r3, [pc, #20]	; (8002100 <__aeabi_f2d+0x8c>)
 80020ec:	e7d2      	b.n	8002094 <__aeabi_f2d+0x20>
 80020ee:	0003      	movs	r3, r0
 80020f0:	3b0b      	subs	r3, #11
 80020f2:	409d      	lsls	r5, r3
 80020f4:	002e      	movs	r6, r5
 80020f6:	2500      	movs	r5, #0
 80020f8:	e7e3      	b.n	80020c2 <__aeabi_f2d+0x4e>
 80020fa:	46c0      	nop			; (mov r8, r8)
 80020fc:	00000389 	.word	0x00000389
 8002100:	000007ff 	.word	0x000007ff

08002104 <__aeabi_d2f>:
 8002104:	0002      	movs	r2, r0
 8002106:	004b      	lsls	r3, r1, #1
 8002108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800210a:	0d5b      	lsrs	r3, r3, #21
 800210c:	030c      	lsls	r4, r1, #12
 800210e:	4e3d      	ldr	r6, [pc, #244]	; (8002204 <__aeabi_d2f+0x100>)
 8002110:	0a64      	lsrs	r4, r4, #9
 8002112:	0f40      	lsrs	r0, r0, #29
 8002114:	1c5f      	adds	r7, r3, #1
 8002116:	0fc9      	lsrs	r1, r1, #31
 8002118:	4304      	orrs	r4, r0
 800211a:	00d5      	lsls	r5, r2, #3
 800211c:	4237      	tst	r7, r6
 800211e:	d00a      	beq.n	8002136 <__aeabi_d2f+0x32>
 8002120:	4839      	ldr	r0, [pc, #228]	; (8002208 <__aeabi_d2f+0x104>)
 8002122:	181e      	adds	r6, r3, r0
 8002124:	2efe      	cmp	r6, #254	; 0xfe
 8002126:	dd16      	ble.n	8002156 <__aeabi_d2f+0x52>
 8002128:	20ff      	movs	r0, #255	; 0xff
 800212a:	2400      	movs	r4, #0
 800212c:	05c0      	lsls	r0, r0, #23
 800212e:	4320      	orrs	r0, r4
 8002130:	07c9      	lsls	r1, r1, #31
 8002132:	4308      	orrs	r0, r1
 8002134:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002136:	2b00      	cmp	r3, #0
 8002138:	d106      	bne.n	8002148 <__aeabi_d2f+0x44>
 800213a:	432c      	orrs	r4, r5
 800213c:	d026      	beq.n	800218c <__aeabi_d2f+0x88>
 800213e:	2205      	movs	r2, #5
 8002140:	0192      	lsls	r2, r2, #6
 8002142:	0a54      	lsrs	r4, r2, #9
 8002144:	b2d8      	uxtb	r0, r3
 8002146:	e7f1      	b.n	800212c <__aeabi_d2f+0x28>
 8002148:	4325      	orrs	r5, r4
 800214a:	d0ed      	beq.n	8002128 <__aeabi_d2f+0x24>
 800214c:	2080      	movs	r0, #128	; 0x80
 800214e:	03c0      	lsls	r0, r0, #15
 8002150:	4304      	orrs	r4, r0
 8002152:	20ff      	movs	r0, #255	; 0xff
 8002154:	e7ea      	b.n	800212c <__aeabi_d2f+0x28>
 8002156:	2e00      	cmp	r6, #0
 8002158:	dd1b      	ble.n	8002192 <__aeabi_d2f+0x8e>
 800215a:	0192      	lsls	r2, r2, #6
 800215c:	1e53      	subs	r3, r2, #1
 800215e:	419a      	sbcs	r2, r3
 8002160:	00e4      	lsls	r4, r4, #3
 8002162:	0f6d      	lsrs	r5, r5, #29
 8002164:	4322      	orrs	r2, r4
 8002166:	432a      	orrs	r2, r5
 8002168:	0753      	lsls	r3, r2, #29
 800216a:	d048      	beq.n	80021fe <__aeabi_d2f+0xfa>
 800216c:	230f      	movs	r3, #15
 800216e:	4013      	ands	r3, r2
 8002170:	2b04      	cmp	r3, #4
 8002172:	d000      	beq.n	8002176 <__aeabi_d2f+0x72>
 8002174:	3204      	adds	r2, #4
 8002176:	2380      	movs	r3, #128	; 0x80
 8002178:	04db      	lsls	r3, r3, #19
 800217a:	4013      	ands	r3, r2
 800217c:	d03f      	beq.n	80021fe <__aeabi_d2f+0xfa>
 800217e:	1c70      	adds	r0, r6, #1
 8002180:	2efe      	cmp	r6, #254	; 0xfe
 8002182:	d0d1      	beq.n	8002128 <__aeabi_d2f+0x24>
 8002184:	0192      	lsls	r2, r2, #6
 8002186:	0a54      	lsrs	r4, r2, #9
 8002188:	b2c0      	uxtb	r0, r0
 800218a:	e7cf      	b.n	800212c <__aeabi_d2f+0x28>
 800218c:	2000      	movs	r0, #0
 800218e:	2400      	movs	r4, #0
 8002190:	e7cc      	b.n	800212c <__aeabi_d2f+0x28>
 8002192:	0032      	movs	r2, r6
 8002194:	3217      	adds	r2, #23
 8002196:	db22      	blt.n	80021de <__aeabi_d2f+0xda>
 8002198:	2080      	movs	r0, #128	; 0x80
 800219a:	0400      	lsls	r0, r0, #16
 800219c:	4320      	orrs	r0, r4
 800219e:	241e      	movs	r4, #30
 80021a0:	1ba4      	subs	r4, r4, r6
 80021a2:	2c1f      	cmp	r4, #31
 80021a4:	dd1d      	ble.n	80021e2 <__aeabi_d2f+0xde>
 80021a6:	2202      	movs	r2, #2
 80021a8:	4252      	negs	r2, r2
 80021aa:	1b96      	subs	r6, r2, r6
 80021ac:	0002      	movs	r2, r0
 80021ae:	40f2      	lsrs	r2, r6
 80021b0:	0016      	movs	r6, r2
 80021b2:	2c20      	cmp	r4, #32
 80021b4:	d004      	beq.n	80021c0 <__aeabi_d2f+0xbc>
 80021b6:	4a15      	ldr	r2, [pc, #84]	; (800220c <__aeabi_d2f+0x108>)
 80021b8:	4694      	mov	ip, r2
 80021ba:	4463      	add	r3, ip
 80021bc:	4098      	lsls	r0, r3
 80021be:	4305      	orrs	r5, r0
 80021c0:	002a      	movs	r2, r5
 80021c2:	1e53      	subs	r3, r2, #1
 80021c4:	419a      	sbcs	r2, r3
 80021c6:	4332      	orrs	r2, r6
 80021c8:	2600      	movs	r6, #0
 80021ca:	0753      	lsls	r3, r2, #29
 80021cc:	d1ce      	bne.n	800216c <__aeabi_d2f+0x68>
 80021ce:	2480      	movs	r4, #128	; 0x80
 80021d0:	0013      	movs	r3, r2
 80021d2:	04e4      	lsls	r4, r4, #19
 80021d4:	2001      	movs	r0, #1
 80021d6:	4023      	ands	r3, r4
 80021d8:	4222      	tst	r2, r4
 80021da:	d1d3      	bne.n	8002184 <__aeabi_d2f+0x80>
 80021dc:	e7b0      	b.n	8002140 <__aeabi_d2f+0x3c>
 80021de:	2300      	movs	r3, #0
 80021e0:	e7ad      	b.n	800213e <__aeabi_d2f+0x3a>
 80021e2:	4a0b      	ldr	r2, [pc, #44]	; (8002210 <__aeabi_d2f+0x10c>)
 80021e4:	4694      	mov	ip, r2
 80021e6:	002a      	movs	r2, r5
 80021e8:	40e2      	lsrs	r2, r4
 80021ea:	0014      	movs	r4, r2
 80021ec:	002a      	movs	r2, r5
 80021ee:	4463      	add	r3, ip
 80021f0:	409a      	lsls	r2, r3
 80021f2:	4098      	lsls	r0, r3
 80021f4:	1e55      	subs	r5, r2, #1
 80021f6:	41aa      	sbcs	r2, r5
 80021f8:	4302      	orrs	r2, r0
 80021fa:	4322      	orrs	r2, r4
 80021fc:	e7e4      	b.n	80021c8 <__aeabi_d2f+0xc4>
 80021fe:	0033      	movs	r3, r6
 8002200:	e79e      	b.n	8002140 <__aeabi_d2f+0x3c>
 8002202:	46c0      	nop			; (mov r8, r8)
 8002204:	000007fe 	.word	0x000007fe
 8002208:	fffffc80 	.word	0xfffffc80
 800220c:	fffffca2 	.word	0xfffffca2
 8002210:	fffffc82 	.word	0xfffffc82

08002214 <__clzsi2>:
 8002214:	211c      	movs	r1, #28
 8002216:	2301      	movs	r3, #1
 8002218:	041b      	lsls	r3, r3, #16
 800221a:	4298      	cmp	r0, r3
 800221c:	d301      	bcc.n	8002222 <__clzsi2+0xe>
 800221e:	0c00      	lsrs	r0, r0, #16
 8002220:	3910      	subs	r1, #16
 8002222:	0a1b      	lsrs	r3, r3, #8
 8002224:	4298      	cmp	r0, r3
 8002226:	d301      	bcc.n	800222c <__clzsi2+0x18>
 8002228:	0a00      	lsrs	r0, r0, #8
 800222a:	3908      	subs	r1, #8
 800222c:	091b      	lsrs	r3, r3, #4
 800222e:	4298      	cmp	r0, r3
 8002230:	d301      	bcc.n	8002236 <__clzsi2+0x22>
 8002232:	0900      	lsrs	r0, r0, #4
 8002234:	3904      	subs	r1, #4
 8002236:	a202      	add	r2, pc, #8	; (adr r2, 8002240 <__clzsi2+0x2c>)
 8002238:	5c10      	ldrb	r0, [r2, r0]
 800223a:	1840      	adds	r0, r0, r1
 800223c:	4770      	bx	lr
 800223e:	46c0      	nop			; (mov r8, r8)
 8002240:	02020304 	.word	0x02020304
 8002244:	01010101 	.word	0x01010101
	...

08002250 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002254:	f000 fbea 	bl	8002a2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002258:	f000 f85a 	bl	8002310 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800225c:	f000 f96a 	bl	8002534 <MX_GPIO_Init>
  MX_DMA_Init();
 8002260:	f000 f94a 	bl	80024f8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002264:	f000 f918 	bl	8002498 <MX_USART1_UART_Init>
  MX_ADC_Init();
 8002268:	f000 f8ba 	bl	80023e0 <MX_ADC_Init>
  /*
   Start the ADC DMA transfer into the adc_value that contains one adc value

   Delay to allow for the process to complete.
   */
  HAL_ADC_Start_DMA(&hadc,&adc_value,1);
 800226c:	4920      	ldr	r1, [pc, #128]	; (80022f0 <main+0xa0>)
 800226e:	4b21      	ldr	r3, [pc, #132]	; (80022f4 <main+0xa4>)
 8002270:	2201      	movs	r2, #1
 8002272:	0018      	movs	r0, r3
 8002274:	f000 fda2 	bl	8002dbc <HAL_ADC_Start_DMA>
  HAL_Delay(1);
 8002278:	2001      	movs	r0, #1
 800227a:	f000 fc3b 	bl	8002af4 <HAL_Delay>
	  /*
	   Convert the internal ADC value into voltage

	   Store the voltage into a formatted string
	  */
	  voltage = (adc_value * 3) / 4095.0;
 800227e:	4b1c      	ldr	r3, [pc, #112]	; (80022f0 <main+0xa0>)
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	0013      	movs	r3, r2
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	189b      	adds	r3, r3, r2
 8002288:	0018      	movs	r0, r3
 800228a:	f7ff fecd 	bl	8002028 <__aeabi_ui2d>
 800228e:	2200      	movs	r2, #0
 8002290:	4b19      	ldr	r3, [pc, #100]	; (80022f8 <main+0xa8>)
 8002292:	f7fe fc45 	bl	8000b20 <__aeabi_ddiv>
 8002296:	0002      	movs	r2, r0
 8002298:	000b      	movs	r3, r1
 800229a:	0010      	movs	r0, r2
 800229c:	0019      	movs	r1, r3
 800229e:	f7ff ff31 	bl	8002104 <__aeabi_d2f>
 80022a2:	1c02      	adds	r2, r0, #0
 80022a4:	4b15      	ldr	r3, [pc, #84]	; (80022fc <main+0xac>)
 80022a6:	601a      	str	r2, [r3, #0]

	  uart_buf_len = sprintf(uart_buf, "%f V\r\n", voltage);
 80022a8:	4b14      	ldr	r3, [pc, #80]	; (80022fc <main+0xac>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	1c18      	adds	r0, r3, #0
 80022ae:	f7ff fee1 	bl	8002074 <__aeabi_f2d>
 80022b2:	0002      	movs	r2, r0
 80022b4:	000b      	movs	r3, r1
 80022b6:	4912      	ldr	r1, [pc, #72]	; (8002300 <main+0xb0>)
 80022b8:	4812      	ldr	r0, [pc, #72]	; (8002304 <main+0xb4>)
 80022ba:	f003 fa63 	bl	8005784 <siprintf>
 80022be:	0002      	movs	r2, r0
 80022c0:	4b11      	ldr	r3, [pc, #68]	; (8002308 <main+0xb8>)
 80022c2:	601a      	str	r2, [r3, #0]
	  Start the next ADC DMA process to be converted in next iteration

	  Delay for one second to allow for DMA to complete and to reduce output stream.
	  */
	  // Transmit the voltage value over UART
	  HAL_UART_Transmit(&huart1, (uint8_t*)uart_buf, uart_buf_len, HAL_MAX_DELAY);
 80022c4:	4b10      	ldr	r3, [pc, #64]	; (8002308 <main+0xb8>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	b29a      	uxth	r2, r3
 80022ca:	2301      	movs	r3, #1
 80022cc:	425b      	negs	r3, r3
 80022ce:	490d      	ldr	r1, [pc, #52]	; (8002304 <main+0xb4>)
 80022d0:	480e      	ldr	r0, [pc, #56]	; (800230c <main+0xbc>)
 80022d2:	f002 f9a7 	bl	8004624 <HAL_UART_Transmit>
	  HAL_ADC_Start_DMA(&hadc, &adc_value, 1);
 80022d6:	4906      	ldr	r1, [pc, #24]	; (80022f0 <main+0xa0>)
 80022d8:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <main+0xa4>)
 80022da:	2201      	movs	r2, #1
 80022dc:	0018      	movs	r0, r3
 80022de:	f000 fd6d 	bl	8002dbc <HAL_ADC_Start_DMA>
	  HAL_Delay(1000);
 80022e2:	23fa      	movs	r3, #250	; 0xfa
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	0018      	movs	r0, r3
 80022e8:	f000 fc04 	bl	8002af4 <HAL_Delay>
	  voltage = (adc_value * 3) / 4095.0;
 80022ec:	e7c7      	b.n	800227e <main+0x2e>
 80022ee:	46c0      	nop			; (mov r8, r8)
 80022f0:	20000304 	.word	0x20000304
 80022f4:	200001f8 	.word	0x200001f8
 80022f8:	40affe00 	.word	0x40affe00
 80022fc:	2000033c 	.word	0x2000033c
 8002300:	08007df8 	.word	0x08007df8
 8002304:	20000308 	.word	0x20000308
 8002308:	20000340 	.word	0x20000340
 800230c:	2000027c 	.word	0x2000027c

08002310 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002310:	b590      	push	{r4, r7, lr}
 8002312:	b097      	sub	sp, #92	; 0x5c
 8002314:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002316:	2428      	movs	r4, #40	; 0x28
 8002318:	193b      	adds	r3, r7, r4
 800231a:	0018      	movs	r0, r3
 800231c:	2330      	movs	r3, #48	; 0x30
 800231e:	001a      	movs	r2, r3
 8002320:	2100      	movs	r1, #0
 8002322:	f002 fdb9 	bl	8004e98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002326:	2318      	movs	r3, #24
 8002328:	18fb      	adds	r3, r7, r3
 800232a:	0018      	movs	r0, r3
 800232c:	2310      	movs	r3, #16
 800232e:	001a      	movs	r2, r3
 8002330:	2100      	movs	r1, #0
 8002332:	f002 fdb1 	bl	8004e98 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002336:	1d3b      	adds	r3, r7, #4
 8002338:	0018      	movs	r0, r3
 800233a:	2314      	movs	r3, #20
 800233c:	001a      	movs	r2, r3
 800233e:	2100      	movs	r1, #0
 8002340:	f002 fdaa 	bl	8004e98 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8002344:	0021      	movs	r1, r4
 8002346:	187b      	adds	r3, r7, r1
 8002348:	2212      	movs	r2, #18
 800234a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800234c:	187b      	adds	r3, r7, r1
 800234e:	2201      	movs	r2, #1
 8002350:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8002352:	187b      	adds	r3, r7, r1
 8002354:	2201      	movs	r2, #1
 8002356:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002358:	187b      	adds	r3, r7, r1
 800235a:	2210      	movs	r2, #16
 800235c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800235e:	187b      	adds	r3, r7, r1
 8002360:	2210      	movs	r2, #16
 8002362:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002364:	187b      	adds	r3, r7, r1
 8002366:	2202      	movs	r2, #2
 8002368:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800236a:	187b      	adds	r3, r7, r1
 800236c:	2200      	movs	r2, #0
 800236e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002370:	187b      	adds	r3, r7, r1
 8002372:	22a0      	movs	r2, #160	; 0xa0
 8002374:	0392      	lsls	r2, r2, #14
 8002376:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002378:	187b      	adds	r3, r7, r1
 800237a:	2200      	movs	r2, #0
 800237c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800237e:	187b      	adds	r3, r7, r1
 8002380:	0018      	movs	r0, r3
 8002382:	f001 fbbf 	bl	8003b04 <HAL_RCC_OscConfig>
 8002386:	1e03      	subs	r3, r0, #0
 8002388:	d001      	beq.n	800238e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800238a:	f000 f953 	bl	8002634 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800238e:	2118      	movs	r1, #24
 8002390:	187b      	adds	r3, r7, r1
 8002392:	2207      	movs	r2, #7
 8002394:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002396:	187b      	adds	r3, r7, r1
 8002398:	2202      	movs	r2, #2
 800239a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800239c:	187b      	adds	r3, r7, r1
 800239e:	2200      	movs	r2, #0
 80023a0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80023a2:	187b      	adds	r3, r7, r1
 80023a4:	2200      	movs	r2, #0
 80023a6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80023a8:	187b      	adds	r3, r7, r1
 80023aa:	2101      	movs	r1, #1
 80023ac:	0018      	movs	r0, r3
 80023ae:	f001 fec3 	bl	8004138 <HAL_RCC_ClockConfig>
 80023b2:	1e03      	subs	r3, r0, #0
 80023b4:	d001      	beq.n	80023ba <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80023b6:	f000 f93d 	bl	8002634 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80023ba:	1d3b      	adds	r3, r7, #4
 80023bc:	2201      	movs	r2, #1
 80023be:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80023c0:	1d3b      	adds	r3, r7, #4
 80023c2:	2200      	movs	r2, #0
 80023c4:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023c6:	1d3b      	adds	r3, r7, #4
 80023c8:	0018      	movs	r0, r3
 80023ca:	f001 fff9 	bl	80043c0 <HAL_RCCEx_PeriphCLKConfig>
 80023ce:	1e03      	subs	r3, r0, #0
 80023d0:	d001      	beq.n	80023d6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80023d2:	f000 f92f 	bl	8002634 <Error_Handler>
  }
}
 80023d6:	46c0      	nop			; (mov r8, r8)
 80023d8:	46bd      	mov	sp, r7
 80023da:	b017      	add	sp, #92	; 0x5c
 80023dc:	bd90      	pop	{r4, r7, pc}
	...

080023e0 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80023e6:	1d3b      	adds	r3, r7, #4
 80023e8:	0018      	movs	r0, r3
 80023ea:	230c      	movs	r3, #12
 80023ec:	001a      	movs	r2, r3
 80023ee:	2100      	movs	r1, #0
 80023f0:	f002 fd52 	bl	8004e98 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80023f4:	4b26      	ldr	r3, [pc, #152]	; (8002490 <MX_ADC_Init+0xb0>)
 80023f6:	4a27      	ldr	r2, [pc, #156]	; (8002494 <MX_ADC_Init+0xb4>)
 80023f8:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80023fa:	4b25      	ldr	r3, [pc, #148]	; (8002490 <MX_ADC_Init+0xb0>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002400:	4b23      	ldr	r3, [pc, #140]	; (8002490 <MX_ADC_Init+0xb0>)
 8002402:	2200      	movs	r2, #0
 8002404:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002406:	4b22      	ldr	r3, [pc, #136]	; (8002490 <MX_ADC_Init+0xb0>)
 8002408:	2200      	movs	r2, #0
 800240a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800240c:	4b20      	ldr	r3, [pc, #128]	; (8002490 <MX_ADC_Init+0xb0>)
 800240e:	2201      	movs	r2, #1
 8002410:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002412:	4b1f      	ldr	r3, [pc, #124]	; (8002490 <MX_ADC_Init+0xb0>)
 8002414:	2204      	movs	r2, #4
 8002416:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002418:	4b1d      	ldr	r3, [pc, #116]	; (8002490 <MX_ADC_Init+0xb0>)
 800241a:	2200      	movs	r2, #0
 800241c:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800241e:	4b1c      	ldr	r3, [pc, #112]	; (8002490 <MX_ADC_Init+0xb0>)
 8002420:	2200      	movs	r2, #0
 8002422:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002424:	4b1a      	ldr	r3, [pc, #104]	; (8002490 <MX_ADC_Init+0xb0>)
 8002426:	2200      	movs	r2, #0
 8002428:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800242a:	4b19      	ldr	r3, [pc, #100]	; (8002490 <MX_ADC_Init+0xb0>)
 800242c:	2200      	movs	r2, #0
 800242e:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002430:	4b17      	ldr	r3, [pc, #92]	; (8002490 <MX_ADC_Init+0xb0>)
 8002432:	22c2      	movs	r2, #194	; 0xc2
 8002434:	32ff      	adds	r2, #255	; 0xff
 8002436:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002438:	4b15      	ldr	r3, [pc, #84]	; (8002490 <MX_ADC_Init+0xb0>)
 800243a:	2200      	movs	r2, #0
 800243c:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 800243e:	4b14      	ldr	r3, [pc, #80]	; (8002490 <MX_ADC_Init+0xb0>)
 8002440:	2224      	movs	r2, #36	; 0x24
 8002442:	2101      	movs	r1, #1
 8002444:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002446:	4b12      	ldr	r3, [pc, #72]	; (8002490 <MX_ADC_Init+0xb0>)
 8002448:	2201      	movs	r2, #1
 800244a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800244c:	4b10      	ldr	r3, [pc, #64]	; (8002490 <MX_ADC_Init+0xb0>)
 800244e:	0018      	movs	r0, r3
 8002450:	f000 fb74 	bl	8002b3c <HAL_ADC_Init>
 8002454:	1e03      	subs	r3, r0, #0
 8002456:	d001      	beq.n	800245c <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8002458:	f000 f8ec 	bl	8002634 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800245c:	1d3b      	adds	r3, r7, #4
 800245e:	2206      	movs	r2, #6
 8002460:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002462:	1d3b      	adds	r3, r7, #4
 8002464:	2280      	movs	r2, #128	; 0x80
 8002466:	0152      	lsls	r2, r2, #5
 8002468:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800246a:	1d3b      	adds	r3, r7, #4
 800246c:	2280      	movs	r2, #128	; 0x80
 800246e:	0552      	lsls	r2, r2, #21
 8002470:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002472:	1d3a      	adds	r2, r7, #4
 8002474:	4b06      	ldr	r3, [pc, #24]	; (8002490 <MX_ADC_Init+0xb0>)
 8002476:	0011      	movs	r1, r2
 8002478:	0018      	movs	r0, r3
 800247a:	f000 fd29 	bl	8002ed0 <HAL_ADC_ConfigChannel>
 800247e:	1e03      	subs	r3, r0, #0
 8002480:	d001      	beq.n	8002486 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8002482:	f000 f8d7 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002486:	46c0      	nop			; (mov r8, r8)
 8002488:	46bd      	mov	sp, r7
 800248a:	b004      	add	sp, #16
 800248c:	bd80      	pop	{r7, pc}
 800248e:	46c0      	nop			; (mov r8, r8)
 8002490:	200001f8 	.word	0x200001f8
 8002494:	40012400 	.word	0x40012400

08002498 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800249c:	4b14      	ldr	r3, [pc, #80]	; (80024f0 <MX_USART1_UART_Init+0x58>)
 800249e:	4a15      	ldr	r2, [pc, #84]	; (80024f4 <MX_USART1_UART_Init+0x5c>)
 80024a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80024a2:	4b13      	ldr	r3, [pc, #76]	; (80024f0 <MX_USART1_UART_Init+0x58>)
 80024a4:	22e1      	movs	r2, #225	; 0xe1
 80024a6:	0252      	lsls	r2, r2, #9
 80024a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80024aa:	4b11      	ldr	r3, [pc, #68]	; (80024f0 <MX_USART1_UART_Init+0x58>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80024b0:	4b0f      	ldr	r3, [pc, #60]	; (80024f0 <MX_USART1_UART_Init+0x58>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80024b6:	4b0e      	ldr	r3, [pc, #56]	; (80024f0 <MX_USART1_UART_Init+0x58>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80024bc:	4b0c      	ldr	r3, [pc, #48]	; (80024f0 <MX_USART1_UART_Init+0x58>)
 80024be:	220c      	movs	r2, #12
 80024c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024c2:	4b0b      	ldr	r3, [pc, #44]	; (80024f0 <MX_USART1_UART_Init+0x58>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80024c8:	4b09      	ldr	r3, [pc, #36]	; (80024f0 <MX_USART1_UART_Init+0x58>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024ce:	4b08      	ldr	r3, [pc, #32]	; (80024f0 <MX_USART1_UART_Init+0x58>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024d4:	4b06      	ldr	r3, [pc, #24]	; (80024f0 <MX_USART1_UART_Init+0x58>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80024da:	4b05      	ldr	r3, [pc, #20]	; (80024f0 <MX_USART1_UART_Init+0x58>)
 80024dc:	0018      	movs	r0, r3
 80024de:	f002 f84d 	bl	800457c <HAL_UART_Init>
 80024e2:	1e03      	subs	r3, r0, #0
 80024e4:	d001      	beq.n	80024ea <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80024e6:	f000 f8a5 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80024ea:	46c0      	nop			; (mov r8, r8)
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	2000027c 	.word	0x2000027c
 80024f4:	40013800 	.word	0x40013800

080024f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024fe:	4b0c      	ldr	r3, [pc, #48]	; (8002530 <MX_DMA_Init+0x38>)
 8002500:	695a      	ldr	r2, [r3, #20]
 8002502:	4b0b      	ldr	r3, [pc, #44]	; (8002530 <MX_DMA_Init+0x38>)
 8002504:	2101      	movs	r1, #1
 8002506:	430a      	orrs	r2, r1
 8002508:	615a      	str	r2, [r3, #20]
 800250a:	4b09      	ldr	r3, [pc, #36]	; (8002530 <MX_DMA_Init+0x38>)
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	2201      	movs	r2, #1
 8002510:	4013      	ands	r3, r2
 8002512:	607b      	str	r3, [r7, #4]
 8002514:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002516:	2200      	movs	r2, #0
 8002518:	2100      	movs	r1, #0
 800251a:	2009      	movs	r0, #9
 800251c:	f000 ff9a 	bl	8003454 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002520:	2009      	movs	r0, #9
 8002522:	f000 ffac 	bl	800347e <HAL_NVIC_EnableIRQ>

}
 8002526:	46c0      	nop			; (mov r8, r8)
 8002528:	46bd      	mov	sp, r7
 800252a:	b002      	add	sp, #8
 800252c:	bd80      	pop	{r7, pc}
 800252e:	46c0      	nop			; (mov r8, r8)
 8002530:	40021000 	.word	0x40021000

08002534 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002534:	b590      	push	{r4, r7, lr}
 8002536:	b089      	sub	sp, #36	; 0x24
 8002538:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800253a:	240c      	movs	r4, #12
 800253c:	193b      	adds	r3, r7, r4
 800253e:	0018      	movs	r0, r3
 8002540:	2314      	movs	r3, #20
 8002542:	001a      	movs	r2, r3
 8002544:	2100      	movs	r1, #0
 8002546:	f002 fca7 	bl	8004e98 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800254a:	4b26      	ldr	r3, [pc, #152]	; (80025e4 <MX_GPIO_Init+0xb0>)
 800254c:	695a      	ldr	r2, [r3, #20]
 800254e:	4b25      	ldr	r3, [pc, #148]	; (80025e4 <MX_GPIO_Init+0xb0>)
 8002550:	2180      	movs	r1, #128	; 0x80
 8002552:	0289      	lsls	r1, r1, #10
 8002554:	430a      	orrs	r2, r1
 8002556:	615a      	str	r2, [r3, #20]
 8002558:	4b22      	ldr	r3, [pc, #136]	; (80025e4 <MX_GPIO_Init+0xb0>)
 800255a:	695a      	ldr	r2, [r3, #20]
 800255c:	2380      	movs	r3, #128	; 0x80
 800255e:	029b      	lsls	r3, r3, #10
 8002560:	4013      	ands	r3, r2
 8002562:	60bb      	str	r3, [r7, #8]
 8002564:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002566:	4b1f      	ldr	r3, [pc, #124]	; (80025e4 <MX_GPIO_Init+0xb0>)
 8002568:	695a      	ldr	r2, [r3, #20]
 800256a:	4b1e      	ldr	r3, [pc, #120]	; (80025e4 <MX_GPIO_Init+0xb0>)
 800256c:	2180      	movs	r1, #128	; 0x80
 800256e:	0309      	lsls	r1, r1, #12
 8002570:	430a      	orrs	r2, r1
 8002572:	615a      	str	r2, [r3, #20]
 8002574:	4b1b      	ldr	r3, [pc, #108]	; (80025e4 <MX_GPIO_Init+0xb0>)
 8002576:	695a      	ldr	r2, [r3, #20]
 8002578:	2380      	movs	r3, #128	; 0x80
 800257a:	031b      	lsls	r3, r3, #12
 800257c:	4013      	ands	r3, r2
 800257e:	607b      	str	r3, [r7, #4]
 8002580:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8002582:	23c0      	movs	r3, #192	; 0xc0
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	4818      	ldr	r0, [pc, #96]	; (80025e8 <MX_GPIO_Init+0xb4>)
 8002588:	2200      	movs	r2, #0
 800258a:	0019      	movs	r1, r3
 800258c:	f001 fa9c 	bl	8003ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002590:	193b      	adds	r3, r7, r4
 8002592:	2201      	movs	r2, #1
 8002594:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002596:	193b      	adds	r3, r7, r4
 8002598:	2290      	movs	r2, #144	; 0x90
 800259a:	0352      	lsls	r2, r2, #13
 800259c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259e:	193b      	adds	r3, r7, r4
 80025a0:	2200      	movs	r2, #0
 80025a2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80025a4:	193a      	adds	r2, r7, r4
 80025a6:	2390      	movs	r3, #144	; 0x90
 80025a8:	05db      	lsls	r3, r3, #23
 80025aa:	0011      	movs	r1, r2
 80025ac:	0018      	movs	r0, r3
 80025ae:	f001 f91b 	bl	80037e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 80025b2:	0021      	movs	r1, r4
 80025b4:	187b      	adds	r3, r7, r1
 80025b6:	22c0      	movs	r2, #192	; 0xc0
 80025b8:	0092      	lsls	r2, r2, #2
 80025ba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025bc:	187b      	adds	r3, r7, r1
 80025be:	2201      	movs	r2, #1
 80025c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c2:	187b      	adds	r3, r7, r1
 80025c4:	2200      	movs	r2, #0
 80025c6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c8:	187b      	adds	r3, r7, r1
 80025ca:	2200      	movs	r2, #0
 80025cc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025ce:	187b      	adds	r3, r7, r1
 80025d0:	4a05      	ldr	r2, [pc, #20]	; (80025e8 <MX_GPIO_Init+0xb4>)
 80025d2:	0019      	movs	r1, r3
 80025d4:	0010      	movs	r0, r2
 80025d6:	f001 f907 	bl	80037e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80025da:	46c0      	nop			; (mov r8, r8)
 80025dc:	46bd      	mov	sp, r7
 80025de:	b009      	add	sp, #36	; 0x24
 80025e0:	bd90      	pop	{r4, r7, pc}
 80025e2:	46c0      	nop			; (mov r8, r8)
 80025e4:	40021000 	.word	0x40021000
 80025e8:	48000800 	.word	0x48000800

080025ec <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */

// Called when first half of buffer is filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80025f4:	2380      	movs	r3, #128	; 0x80
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4804      	ldr	r0, [pc, #16]	; (800260c <HAL_ADC_ConvHalfCpltCallback+0x20>)
 80025fa:	2201      	movs	r2, #1
 80025fc:	0019      	movs	r1, r3
 80025fe:	f001 fa63 	bl	8003ac8 <HAL_GPIO_WritePin>
}
 8002602:	46c0      	nop			; (mov r8, r8)
 8002604:	46bd      	mov	sp, r7
 8002606:	b002      	add	sp, #8
 8002608:	bd80      	pop	{r7, pc}
 800260a:	46c0      	nop			; (mov r8, r8)
 800260c:	48000800 	.word	0x48000800

08002610 <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8002618:	2380      	movs	r3, #128	; 0x80
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	4804      	ldr	r0, [pc, #16]	; (8002630 <HAL_ADC_ConvCpltCallback+0x20>)
 800261e:	2200      	movs	r2, #0
 8002620:	0019      	movs	r1, r3
 8002622:	f001 fa51 	bl	8003ac8 <HAL_GPIO_WritePin>
}
 8002626:	46c0      	nop			; (mov r8, r8)
 8002628:	46bd      	mov	sp, r7
 800262a:	b002      	add	sp, #8
 800262c:	bd80      	pop	{r7, pc}
 800262e:	46c0      	nop			; (mov r8, r8)
 8002630:	48000800 	.word	0x48000800

08002634 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002638:	b672      	cpsid	i
}
 800263a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800263c:	e7fe      	b.n	800263c <Error_Handler+0x8>
	...

08002640 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002646:	4b0f      	ldr	r3, [pc, #60]	; (8002684 <HAL_MspInit+0x44>)
 8002648:	699a      	ldr	r2, [r3, #24]
 800264a:	4b0e      	ldr	r3, [pc, #56]	; (8002684 <HAL_MspInit+0x44>)
 800264c:	2101      	movs	r1, #1
 800264e:	430a      	orrs	r2, r1
 8002650:	619a      	str	r2, [r3, #24]
 8002652:	4b0c      	ldr	r3, [pc, #48]	; (8002684 <HAL_MspInit+0x44>)
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	2201      	movs	r2, #1
 8002658:	4013      	ands	r3, r2
 800265a:	607b      	str	r3, [r7, #4]
 800265c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800265e:	4b09      	ldr	r3, [pc, #36]	; (8002684 <HAL_MspInit+0x44>)
 8002660:	69da      	ldr	r2, [r3, #28]
 8002662:	4b08      	ldr	r3, [pc, #32]	; (8002684 <HAL_MspInit+0x44>)
 8002664:	2180      	movs	r1, #128	; 0x80
 8002666:	0549      	lsls	r1, r1, #21
 8002668:	430a      	orrs	r2, r1
 800266a:	61da      	str	r2, [r3, #28]
 800266c:	4b05      	ldr	r3, [pc, #20]	; (8002684 <HAL_MspInit+0x44>)
 800266e:	69da      	ldr	r2, [r3, #28]
 8002670:	2380      	movs	r3, #128	; 0x80
 8002672:	055b      	lsls	r3, r3, #21
 8002674:	4013      	ands	r3, r2
 8002676:	603b      	str	r3, [r7, #0]
 8002678:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800267a:	46c0      	nop			; (mov r8, r8)
 800267c:	46bd      	mov	sp, r7
 800267e:	b002      	add	sp, #8
 8002680:	bd80      	pop	{r7, pc}
 8002682:	46c0      	nop			; (mov r8, r8)
 8002684:	40021000 	.word	0x40021000

08002688 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002688:	b590      	push	{r4, r7, lr}
 800268a:	b08b      	sub	sp, #44	; 0x2c
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002690:	2414      	movs	r4, #20
 8002692:	193b      	adds	r3, r7, r4
 8002694:	0018      	movs	r0, r3
 8002696:	2314      	movs	r3, #20
 8002698:	001a      	movs	r2, r3
 800269a:	2100      	movs	r1, #0
 800269c:	f002 fbfc 	bl	8004e98 <memset>
  if(hadc->Instance==ADC1)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a2d      	ldr	r2, [pc, #180]	; (800275c <HAL_ADC_MspInit+0xd4>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d153      	bne.n	8002752 <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80026aa:	4b2d      	ldr	r3, [pc, #180]	; (8002760 <HAL_ADC_MspInit+0xd8>)
 80026ac:	699a      	ldr	r2, [r3, #24]
 80026ae:	4b2c      	ldr	r3, [pc, #176]	; (8002760 <HAL_ADC_MspInit+0xd8>)
 80026b0:	2180      	movs	r1, #128	; 0x80
 80026b2:	0089      	lsls	r1, r1, #2
 80026b4:	430a      	orrs	r2, r1
 80026b6:	619a      	str	r2, [r3, #24]
 80026b8:	4b29      	ldr	r3, [pc, #164]	; (8002760 <HAL_ADC_MspInit+0xd8>)
 80026ba:	699a      	ldr	r2, [r3, #24]
 80026bc:	2380      	movs	r3, #128	; 0x80
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	4013      	ands	r3, r2
 80026c2:	613b      	str	r3, [r7, #16]
 80026c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c6:	4b26      	ldr	r3, [pc, #152]	; (8002760 <HAL_ADC_MspInit+0xd8>)
 80026c8:	695a      	ldr	r2, [r3, #20]
 80026ca:	4b25      	ldr	r3, [pc, #148]	; (8002760 <HAL_ADC_MspInit+0xd8>)
 80026cc:	2180      	movs	r1, #128	; 0x80
 80026ce:	0289      	lsls	r1, r1, #10
 80026d0:	430a      	orrs	r2, r1
 80026d2:	615a      	str	r2, [r3, #20]
 80026d4:	4b22      	ldr	r3, [pc, #136]	; (8002760 <HAL_ADC_MspInit+0xd8>)
 80026d6:	695a      	ldr	r2, [r3, #20]
 80026d8:	2380      	movs	r3, #128	; 0x80
 80026da:	029b      	lsls	r3, r3, #10
 80026dc:	4013      	ands	r3, r2
 80026de:	60fb      	str	r3, [r7, #12]
 80026e0:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA6     ------> ADC_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80026e2:	193b      	adds	r3, r7, r4
 80026e4:	2240      	movs	r2, #64	; 0x40
 80026e6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026e8:	193b      	adds	r3, r7, r4
 80026ea:	2203      	movs	r2, #3
 80026ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ee:	193b      	adds	r3, r7, r4
 80026f0:	2200      	movs	r2, #0
 80026f2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f4:	193a      	adds	r2, r7, r4
 80026f6:	2390      	movs	r3, #144	; 0x90
 80026f8:	05db      	lsls	r3, r3, #23
 80026fa:	0011      	movs	r1, r2
 80026fc:	0018      	movs	r0, r3
 80026fe:	f001 f873 	bl	80037e8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8002702:	4b18      	ldr	r3, [pc, #96]	; (8002764 <HAL_ADC_MspInit+0xdc>)
 8002704:	4a18      	ldr	r2, [pc, #96]	; (8002768 <HAL_ADC_MspInit+0xe0>)
 8002706:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002708:	4b16      	ldr	r3, [pc, #88]	; (8002764 <HAL_ADC_MspInit+0xdc>)
 800270a:	2200      	movs	r2, #0
 800270c:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800270e:	4b15      	ldr	r3, [pc, #84]	; (8002764 <HAL_ADC_MspInit+0xdc>)
 8002710:	2200      	movs	r2, #0
 8002712:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8002714:	4b13      	ldr	r3, [pc, #76]	; (8002764 <HAL_ADC_MspInit+0xdc>)
 8002716:	2280      	movs	r2, #128	; 0x80
 8002718:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800271a:	4b12      	ldr	r3, [pc, #72]	; (8002764 <HAL_ADC_MspInit+0xdc>)
 800271c:	2280      	movs	r2, #128	; 0x80
 800271e:	0052      	lsls	r2, r2, #1
 8002720:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002722:	4b10      	ldr	r3, [pc, #64]	; (8002764 <HAL_ADC_MspInit+0xdc>)
 8002724:	2280      	movs	r2, #128	; 0x80
 8002726:	00d2      	lsls	r2, r2, #3
 8002728:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 800272a:	4b0e      	ldr	r3, [pc, #56]	; (8002764 <HAL_ADC_MspInit+0xdc>)
 800272c:	2200      	movs	r2, #0
 800272e:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8002730:	4b0c      	ldr	r3, [pc, #48]	; (8002764 <HAL_ADC_MspInit+0xdc>)
 8002732:	2200      	movs	r2, #0
 8002734:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8002736:	4b0b      	ldr	r3, [pc, #44]	; (8002764 <HAL_ADC_MspInit+0xdc>)
 8002738:	0018      	movs	r0, r3
 800273a:	f000 febd 	bl	80034b8 <HAL_DMA_Init>
 800273e:	1e03      	subs	r3, r0, #0
 8002740:	d001      	beq.n	8002746 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8002742:	f7ff ff77 	bl	8002634 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a06      	ldr	r2, [pc, #24]	; (8002764 <HAL_ADC_MspInit+0xdc>)
 800274a:	631a      	str	r2, [r3, #48]	; 0x30
 800274c:	4b05      	ldr	r3, [pc, #20]	; (8002764 <HAL_ADC_MspInit+0xdc>)
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002752:	46c0      	nop			; (mov r8, r8)
 8002754:	46bd      	mov	sp, r7
 8002756:	b00b      	add	sp, #44	; 0x2c
 8002758:	bd90      	pop	{r4, r7, pc}
 800275a:	46c0      	nop			; (mov r8, r8)
 800275c:	40012400 	.word	0x40012400
 8002760:	40021000 	.word	0x40021000
 8002764:	20000238 	.word	0x20000238
 8002768:	40020008 	.word	0x40020008

0800276c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800276c:	b590      	push	{r4, r7, lr}
 800276e:	b08b      	sub	sp, #44	; 0x2c
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002774:	2414      	movs	r4, #20
 8002776:	193b      	adds	r3, r7, r4
 8002778:	0018      	movs	r0, r3
 800277a:	2314      	movs	r3, #20
 800277c:	001a      	movs	r2, r3
 800277e:	2100      	movs	r1, #0
 8002780:	f002 fb8a 	bl	8004e98 <memset>
  if(huart->Instance==USART1)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a1d      	ldr	r2, [pc, #116]	; (8002800 <HAL_UART_MspInit+0x94>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d133      	bne.n	80027f6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800278e:	4b1d      	ldr	r3, [pc, #116]	; (8002804 <HAL_UART_MspInit+0x98>)
 8002790:	699a      	ldr	r2, [r3, #24]
 8002792:	4b1c      	ldr	r3, [pc, #112]	; (8002804 <HAL_UART_MspInit+0x98>)
 8002794:	2180      	movs	r1, #128	; 0x80
 8002796:	01c9      	lsls	r1, r1, #7
 8002798:	430a      	orrs	r2, r1
 800279a:	619a      	str	r2, [r3, #24]
 800279c:	4b19      	ldr	r3, [pc, #100]	; (8002804 <HAL_UART_MspInit+0x98>)
 800279e:	699a      	ldr	r2, [r3, #24]
 80027a0:	2380      	movs	r3, #128	; 0x80
 80027a2:	01db      	lsls	r3, r3, #7
 80027a4:	4013      	ands	r3, r2
 80027a6:	613b      	str	r3, [r7, #16]
 80027a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027aa:	4b16      	ldr	r3, [pc, #88]	; (8002804 <HAL_UART_MspInit+0x98>)
 80027ac:	695a      	ldr	r2, [r3, #20]
 80027ae:	4b15      	ldr	r3, [pc, #84]	; (8002804 <HAL_UART_MspInit+0x98>)
 80027b0:	2180      	movs	r1, #128	; 0x80
 80027b2:	0289      	lsls	r1, r1, #10
 80027b4:	430a      	orrs	r2, r1
 80027b6:	615a      	str	r2, [r3, #20]
 80027b8:	4b12      	ldr	r3, [pc, #72]	; (8002804 <HAL_UART_MspInit+0x98>)
 80027ba:	695a      	ldr	r2, [r3, #20]
 80027bc:	2380      	movs	r3, #128	; 0x80
 80027be:	029b      	lsls	r3, r3, #10
 80027c0:	4013      	ands	r3, r2
 80027c2:	60fb      	str	r3, [r7, #12]
 80027c4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80027c6:	193b      	adds	r3, r7, r4
 80027c8:	22c0      	movs	r2, #192	; 0xc0
 80027ca:	00d2      	lsls	r2, r2, #3
 80027cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ce:	0021      	movs	r1, r4
 80027d0:	187b      	adds	r3, r7, r1
 80027d2:	2202      	movs	r2, #2
 80027d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d6:	187b      	adds	r3, r7, r1
 80027d8:	2200      	movs	r2, #0
 80027da:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027dc:	187b      	adds	r3, r7, r1
 80027de:	2203      	movs	r2, #3
 80027e0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80027e2:	187b      	adds	r3, r7, r1
 80027e4:	2201      	movs	r2, #1
 80027e6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027e8:	187a      	adds	r2, r7, r1
 80027ea:	2390      	movs	r3, #144	; 0x90
 80027ec:	05db      	lsls	r3, r3, #23
 80027ee:	0011      	movs	r1, r2
 80027f0:	0018      	movs	r0, r3
 80027f2:	f000 fff9 	bl	80037e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80027f6:	46c0      	nop			; (mov r8, r8)
 80027f8:	46bd      	mov	sp, r7
 80027fa:	b00b      	add	sp, #44	; 0x2c
 80027fc:	bd90      	pop	{r4, r7, pc}
 80027fe:	46c0      	nop			; (mov r8, r8)
 8002800:	40013800 	.word	0x40013800
 8002804:	40021000 	.word	0x40021000

08002808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800280c:	e7fe      	b.n	800280c <NMI_Handler+0x4>

0800280e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002812:	e7fe      	b.n	8002812 <HardFault_Handler+0x4>

08002814 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002818:	46c0      	nop			; (mov r8, r8)
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002822:	46c0      	nop			; (mov r8, r8)
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800282c:	f000 f946 	bl	8002abc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002830:	46c0      	nop			; (mov r8, r8)
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
	...

08002838 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 800283c:	4b03      	ldr	r3, [pc, #12]	; (800284c <DMA1_Channel1_IRQHandler+0x14>)
 800283e:	0018      	movs	r0, r3
 8002840:	f000 fee8 	bl	8003614 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002844:	46c0      	nop			; (mov r8, r8)
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	46c0      	nop			; (mov r8, r8)
 800284c:	20000238 	.word	0x20000238

08002850 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  return 1;
 8002854:	2301      	movs	r3, #1
}
 8002856:	0018      	movs	r0, r3
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <_kill>:

int _kill(int pid, int sig)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002866:	f002 faed 	bl	8004e44 <__errno>
 800286a:	0003      	movs	r3, r0
 800286c:	2216      	movs	r2, #22
 800286e:	601a      	str	r2, [r3, #0]
  return -1;
 8002870:	2301      	movs	r3, #1
 8002872:	425b      	negs	r3, r3
}
 8002874:	0018      	movs	r0, r3
 8002876:	46bd      	mov	sp, r7
 8002878:	b002      	add	sp, #8
 800287a:	bd80      	pop	{r7, pc}

0800287c <_exit>:

void _exit (int status)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002884:	2301      	movs	r3, #1
 8002886:	425a      	negs	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	0011      	movs	r1, r2
 800288c:	0018      	movs	r0, r3
 800288e:	f7ff ffe5 	bl	800285c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002892:	e7fe      	b.n	8002892 <_exit+0x16>

08002894 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028a0:	2300      	movs	r3, #0
 80028a2:	617b      	str	r3, [r7, #20]
 80028a4:	e00a      	b.n	80028bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80028a6:	e000      	b.n	80028aa <_read+0x16>
 80028a8:	bf00      	nop
 80028aa:	0001      	movs	r1, r0
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	1c5a      	adds	r2, r3, #1
 80028b0:	60ba      	str	r2, [r7, #8]
 80028b2:	b2ca      	uxtb	r2, r1
 80028b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	3301      	adds	r3, #1
 80028ba:	617b      	str	r3, [r7, #20]
 80028bc:	697a      	ldr	r2, [r7, #20]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	dbf0      	blt.n	80028a6 <_read+0x12>
  }

  return len;
 80028c4:	687b      	ldr	r3, [r7, #4]
}
 80028c6:	0018      	movs	r0, r3
 80028c8:	46bd      	mov	sp, r7
 80028ca:	b006      	add	sp, #24
 80028cc:	bd80      	pop	{r7, pc}

080028ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b086      	sub	sp, #24
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	60f8      	str	r0, [r7, #12]
 80028d6:	60b9      	str	r1, [r7, #8]
 80028d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028da:	2300      	movs	r3, #0
 80028dc:	617b      	str	r3, [r7, #20]
 80028de:	e009      	b.n	80028f4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	1c5a      	adds	r2, r3, #1
 80028e4:	60ba      	str	r2, [r7, #8]
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	0018      	movs	r0, r3
 80028ea:	e000      	b.n	80028ee <_write+0x20>
 80028ec:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	3301      	adds	r3, #1
 80028f2:	617b      	str	r3, [r7, #20]
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	dbf1      	blt.n	80028e0 <_write+0x12>
  }
  return len;
 80028fc:	687b      	ldr	r3, [r7, #4]
}
 80028fe:	0018      	movs	r0, r3
 8002900:	46bd      	mov	sp, r7
 8002902:	b006      	add	sp, #24
 8002904:	bd80      	pop	{r7, pc}

08002906 <_close>:

int _close(int file)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	b082      	sub	sp, #8
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800290e:	2301      	movs	r3, #1
 8002910:	425b      	negs	r3, r3
}
 8002912:	0018      	movs	r0, r3
 8002914:	46bd      	mov	sp, r7
 8002916:	b002      	add	sp, #8
 8002918:	bd80      	pop	{r7, pc}

0800291a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b082      	sub	sp, #8
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
 8002922:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	2280      	movs	r2, #128	; 0x80
 8002928:	0192      	lsls	r2, r2, #6
 800292a:	605a      	str	r2, [r3, #4]
  return 0;
 800292c:	2300      	movs	r3, #0
}
 800292e:	0018      	movs	r0, r3
 8002930:	46bd      	mov	sp, r7
 8002932:	b002      	add	sp, #8
 8002934:	bd80      	pop	{r7, pc}

08002936 <_isatty>:

int _isatty(int file)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b082      	sub	sp, #8
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800293e:	2301      	movs	r3, #1
}
 8002940:	0018      	movs	r0, r3
 8002942:	46bd      	mov	sp, r7
 8002944:	b002      	add	sp, #8
 8002946:	bd80      	pop	{r7, pc}

08002948 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002954:	2300      	movs	r3, #0
}
 8002956:	0018      	movs	r0, r3
 8002958:	46bd      	mov	sp, r7
 800295a:	b004      	add	sp, #16
 800295c:	bd80      	pop	{r7, pc}
	...

08002960 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002968:	4a14      	ldr	r2, [pc, #80]	; (80029bc <_sbrk+0x5c>)
 800296a:	4b15      	ldr	r3, [pc, #84]	; (80029c0 <_sbrk+0x60>)
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002974:	4b13      	ldr	r3, [pc, #76]	; (80029c4 <_sbrk+0x64>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d102      	bne.n	8002982 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800297c:	4b11      	ldr	r3, [pc, #68]	; (80029c4 <_sbrk+0x64>)
 800297e:	4a12      	ldr	r2, [pc, #72]	; (80029c8 <_sbrk+0x68>)
 8002980:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002982:	4b10      	ldr	r3, [pc, #64]	; (80029c4 <_sbrk+0x64>)
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	18d3      	adds	r3, r2, r3
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	429a      	cmp	r2, r3
 800298e:	d207      	bcs.n	80029a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002990:	f002 fa58 	bl	8004e44 <__errno>
 8002994:	0003      	movs	r3, r0
 8002996:	220c      	movs	r2, #12
 8002998:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800299a:	2301      	movs	r3, #1
 800299c:	425b      	negs	r3, r3
 800299e:	e009      	b.n	80029b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029a0:	4b08      	ldr	r3, [pc, #32]	; (80029c4 <_sbrk+0x64>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029a6:	4b07      	ldr	r3, [pc, #28]	; (80029c4 <_sbrk+0x64>)
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	18d2      	adds	r2, r2, r3
 80029ae:	4b05      	ldr	r3, [pc, #20]	; (80029c4 <_sbrk+0x64>)
 80029b0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80029b2:	68fb      	ldr	r3, [r7, #12]
}
 80029b4:	0018      	movs	r0, r3
 80029b6:	46bd      	mov	sp, r7
 80029b8:	b006      	add	sp, #24
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	20002000 	.word	0x20002000
 80029c0:	00000400 	.word	0x00000400
 80029c4:	20000344 	.word	0x20000344
 80029c8:	20000360 	.word	0x20000360

080029cc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80029d0:	46c0      	nop			; (mov r8, r8)
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
	...

080029d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80029d8:	480d      	ldr	r0, [pc, #52]	; (8002a10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80029da:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 80029dc:	f7ff fff6 	bl	80029cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029e0:	480c      	ldr	r0, [pc, #48]	; (8002a14 <LoopForever+0x6>)
  ldr r1, =_edata
 80029e2:	490d      	ldr	r1, [pc, #52]	; (8002a18 <LoopForever+0xa>)
  ldr r2, =_sidata
 80029e4:	4a0d      	ldr	r2, [pc, #52]	; (8002a1c <LoopForever+0xe>)
  movs r3, #0
 80029e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029e8:	e002      	b.n	80029f0 <LoopCopyDataInit>

080029ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029ee:	3304      	adds	r3, #4

080029f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029f4:	d3f9      	bcc.n	80029ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029f6:	4a0a      	ldr	r2, [pc, #40]	; (8002a20 <LoopForever+0x12>)
  ldr r4, =_ebss
 80029f8:	4c0a      	ldr	r4, [pc, #40]	; (8002a24 <LoopForever+0x16>)
  movs r3, #0
 80029fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029fc:	e001      	b.n	8002a02 <LoopFillZerobss>

080029fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a00:	3204      	adds	r2, #4

08002a02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a04:	d3fb      	bcc.n	80029fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002a06:	f002 fa23 	bl	8004e50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a0a:	f7ff fc21 	bl	8002250 <main>

08002a0e <LoopForever>:

LoopForever:
    b LoopForever
 8002a0e:	e7fe      	b.n	8002a0e <LoopForever>
  ldr   r0, =_estack
 8002a10:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002a14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a18:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002a1c:	0800829c 	.word	0x0800829c
  ldr r2, =_sbss
 8002a20:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002a24:	2000035c 	.word	0x2000035c

08002a28 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a28:	e7fe      	b.n	8002a28 <ADC1_COMP_IRQHandler>
	...

08002a2c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a30:	4b07      	ldr	r3, [pc, #28]	; (8002a50 <HAL_Init+0x24>)
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	4b06      	ldr	r3, [pc, #24]	; (8002a50 <HAL_Init+0x24>)
 8002a36:	2110      	movs	r1, #16
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002a3c:	2000      	movs	r0, #0
 8002a3e:	f000 f809 	bl	8002a54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a42:	f7ff fdfd 	bl	8002640 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	0018      	movs	r0, r3
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	46c0      	nop			; (mov r8, r8)
 8002a50:	40022000 	.word	0x40022000

08002a54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a54:	b590      	push	{r4, r7, lr}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a5c:	4b14      	ldr	r3, [pc, #80]	; (8002ab0 <HAL_InitTick+0x5c>)
 8002a5e:	681c      	ldr	r4, [r3, #0]
 8002a60:	4b14      	ldr	r3, [pc, #80]	; (8002ab4 <HAL_InitTick+0x60>)
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	0019      	movs	r1, r3
 8002a66:	23fa      	movs	r3, #250	; 0xfa
 8002a68:	0098      	lsls	r0, r3, #2
 8002a6a:	f7fd fb69 	bl	8000140 <__udivsi3>
 8002a6e:	0003      	movs	r3, r0
 8002a70:	0019      	movs	r1, r3
 8002a72:	0020      	movs	r0, r4
 8002a74:	f7fd fb64 	bl	8000140 <__udivsi3>
 8002a78:	0003      	movs	r3, r0
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	f000 fd0f 	bl	800349e <HAL_SYSTICK_Config>
 8002a80:	1e03      	subs	r3, r0, #0
 8002a82:	d001      	beq.n	8002a88 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e00f      	b.n	8002aa8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2b03      	cmp	r3, #3
 8002a8c:	d80b      	bhi.n	8002aa6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a8e:	6879      	ldr	r1, [r7, #4]
 8002a90:	2301      	movs	r3, #1
 8002a92:	425b      	negs	r3, r3
 8002a94:	2200      	movs	r2, #0
 8002a96:	0018      	movs	r0, r3
 8002a98:	f000 fcdc 	bl	8003454 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a9c:	4b06      	ldr	r3, [pc, #24]	; (8002ab8 <HAL_InitTick+0x64>)
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	e000      	b.n	8002aa8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
}
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	b003      	add	sp, #12
 8002aae:	bd90      	pop	{r4, r7, pc}
 8002ab0:	20000000 	.word	0x20000000
 8002ab4:	20000008 	.word	0x20000008
 8002ab8:	20000004 	.word	0x20000004

08002abc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ac0:	4b05      	ldr	r3, [pc, #20]	; (8002ad8 <HAL_IncTick+0x1c>)
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	001a      	movs	r2, r3
 8002ac6:	4b05      	ldr	r3, [pc, #20]	; (8002adc <HAL_IncTick+0x20>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	18d2      	adds	r2, r2, r3
 8002acc:	4b03      	ldr	r3, [pc, #12]	; (8002adc <HAL_IncTick+0x20>)
 8002ace:	601a      	str	r2, [r3, #0]
}
 8002ad0:	46c0      	nop			; (mov r8, r8)
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	46c0      	nop			; (mov r8, r8)
 8002ad8:	20000008 	.word	0x20000008
 8002adc:	20000348 	.word	0x20000348

08002ae0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ae4:	4b02      	ldr	r3, [pc, #8]	; (8002af0 <HAL_GetTick+0x10>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
}
 8002ae8:	0018      	movs	r0, r3
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	46c0      	nop			; (mov r8, r8)
 8002af0:	20000348 	.word	0x20000348

08002af4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002afc:	f7ff fff0 	bl	8002ae0 <HAL_GetTick>
 8002b00:	0003      	movs	r3, r0
 8002b02:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	d005      	beq.n	8002b1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b0e:	4b0a      	ldr	r3, [pc, #40]	; (8002b38 <HAL_Delay+0x44>)
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	001a      	movs	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	189b      	adds	r3, r3, r2
 8002b18:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002b1a:	46c0      	nop			; (mov r8, r8)
 8002b1c:	f7ff ffe0 	bl	8002ae0 <HAL_GetTick>
 8002b20:	0002      	movs	r2, r0
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d8f7      	bhi.n	8002b1c <HAL_Delay+0x28>
  {
  }
}
 8002b2c:	46c0      	nop			; (mov r8, r8)
 8002b2e:	46c0      	nop			; (mov r8, r8)
 8002b30:	46bd      	mov	sp, r7
 8002b32:	b004      	add	sp, #16
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	46c0      	nop			; (mov r8, r8)
 8002b38:	20000008 	.word	0x20000008

08002b3c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b44:	230f      	movs	r3, #15
 8002b46:	18fb      	adds	r3, r7, r3
 8002b48:	2200      	movs	r2, #0
 8002b4a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e125      	b.n	8002da6 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d10a      	bne.n	8002b78 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2234      	movs	r2, #52	; 0x34
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	0018      	movs	r0, r3
 8002b74:	f7ff fd88 	bl	8002688 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b7c:	2210      	movs	r2, #16
 8002b7e:	4013      	ands	r3, r2
 8002b80:	d000      	beq.n	8002b84 <HAL_ADC_Init+0x48>
 8002b82:	e103      	b.n	8002d8c <HAL_ADC_Init+0x250>
 8002b84:	230f      	movs	r3, #15
 8002b86:	18fb      	adds	r3, r7, r3
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d000      	beq.n	8002b90 <HAL_ADC_Init+0x54>
 8002b8e:	e0fd      	b.n	8002d8c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	2204      	movs	r2, #4
 8002b98:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8002b9a:	d000      	beq.n	8002b9e <HAL_ADC_Init+0x62>
 8002b9c:	e0f6      	b.n	8002d8c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba2:	4a83      	ldr	r2, [pc, #524]	; (8002db0 <HAL_ADC_Init+0x274>)
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	431a      	orrs	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	2203      	movs	r2, #3
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d112      	bne.n	8002be2 <HAL_ADC_Init+0xa6>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d009      	beq.n	8002bde <HAL_ADC_Init+0xa2>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68da      	ldr	r2, [r3, #12]
 8002bd0:	2380      	movs	r3, #128	; 0x80
 8002bd2:	021b      	lsls	r3, r3, #8
 8002bd4:	401a      	ands	r2, r3
 8002bd6:	2380      	movs	r3, #128	; 0x80
 8002bd8:	021b      	lsls	r3, r3, #8
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d101      	bne.n	8002be2 <HAL_ADC_Init+0xa6>
 8002bde:	2301      	movs	r3, #1
 8002be0:	e000      	b.n	8002be4 <HAL_ADC_Init+0xa8>
 8002be2:	2300      	movs	r3, #0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d116      	bne.n	8002c16 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	2218      	movs	r2, #24
 8002bf0:	4393      	bics	r3, r2
 8002bf2:	0019      	movs	r1, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689a      	ldr	r2, [r3, #8]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	0899      	lsrs	r1, r3, #2
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685a      	ldr	r2, [r3, #4]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	430a      	orrs	r2, r1
 8002c14:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68da      	ldr	r2, [r3, #12]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4964      	ldr	r1, [pc, #400]	; (8002db4 <HAL_ADC_Init+0x278>)
 8002c22:	400a      	ands	r2, r1
 8002c24:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	7e1b      	ldrb	r3, [r3, #24]
 8002c2a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	7e5b      	ldrb	r3, [r3, #25]
 8002c30:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c32:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	7e9b      	ldrb	r3, [r3, #26]
 8002c38:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002c3a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d002      	beq.n	8002c4a <HAL_ADC_Init+0x10e>
 8002c44:	2380      	movs	r3, #128	; 0x80
 8002c46:	015b      	lsls	r3, r3, #5
 8002c48:	e000      	b.n	8002c4c <HAL_ADC_Init+0x110>
 8002c4a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002c4c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002c52:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d101      	bne.n	8002c60 <HAL_ADC_Init+0x124>
 8002c5c:	2304      	movs	r3, #4
 8002c5e:	e000      	b.n	8002c62 <HAL_ADC_Init+0x126>
 8002c60:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8002c62:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2124      	movs	r1, #36	; 0x24
 8002c68:	5c5b      	ldrb	r3, [r3, r1]
 8002c6a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002c6c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c6e:	68ba      	ldr	r2, [r7, #8]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	7edb      	ldrb	r3, [r3, #27]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d115      	bne.n	8002ca8 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	7e9b      	ldrb	r3, [r3, #26]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d105      	bne.n	8002c90 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	2280      	movs	r2, #128	; 0x80
 8002c88:	0252      	lsls	r2, r2, #9
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	60bb      	str	r3, [r7, #8]
 8002c8e:	e00b      	b.n	8002ca8 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c94:	2220      	movs	r2, #32
 8002c96:	431a      	orrs	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	69da      	ldr	r2, [r3, #28]
 8002cac:	23c2      	movs	r3, #194	; 0xc2
 8002cae:	33ff      	adds	r3, #255	; 0xff
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d007      	beq.n	8002cc4 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	68ba      	ldr	r2, [r7, #8]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68d9      	ldr	r1, [r3, #12]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68ba      	ldr	r2, [r7, #8]
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cd8:	2380      	movs	r3, #128	; 0x80
 8002cda:	055b      	lsls	r3, r3, #21
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d01b      	beq.n	8002d18 <HAL_ADC_Init+0x1dc>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d017      	beq.n	8002d18 <HAL_ADC_Init+0x1dc>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d013      	beq.n	8002d18 <HAL_ADC_Init+0x1dc>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf4:	2b03      	cmp	r3, #3
 8002cf6:	d00f      	beq.n	8002d18 <HAL_ADC_Init+0x1dc>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfc:	2b04      	cmp	r3, #4
 8002cfe:	d00b      	beq.n	8002d18 <HAL_ADC_Init+0x1dc>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d04:	2b05      	cmp	r3, #5
 8002d06:	d007      	beq.n	8002d18 <HAL_ADC_Init+0x1dc>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0c:	2b06      	cmp	r3, #6
 8002d0e:	d003      	beq.n	8002d18 <HAL_ADC_Init+0x1dc>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d14:	2b07      	cmp	r3, #7
 8002d16:	d112      	bne.n	8002d3e <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	695a      	ldr	r2, [r3, #20]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2107      	movs	r1, #7
 8002d24:	438a      	bics	r2, r1
 8002d26:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6959      	ldr	r1, [r3, #20]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d32:	2207      	movs	r2, #7
 8002d34:	401a      	ands	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	4a1c      	ldr	r2, [pc, #112]	; (8002db8 <HAL_ADC_Init+0x27c>)
 8002d46:	4013      	ands	r3, r2
 8002d48:	68ba      	ldr	r2, [r7, #8]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d10b      	bne.n	8002d66 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d58:	2203      	movs	r2, #3
 8002d5a:	4393      	bics	r3, r2
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002d64:	e01c      	b.n	8002da0 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d6a:	2212      	movs	r2, #18
 8002d6c:	4393      	bics	r3, r2
 8002d6e:	2210      	movs	r2, #16
 8002d70:	431a      	orrs	r2, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	431a      	orrs	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8002d82:	230f      	movs	r3, #15
 8002d84:	18fb      	adds	r3, r7, r3
 8002d86:	2201      	movs	r2, #1
 8002d88:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002d8a:	e009      	b.n	8002da0 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d90:	2210      	movs	r2, #16
 8002d92:	431a      	orrs	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8002d98:	230f      	movs	r3, #15
 8002d9a:	18fb      	adds	r3, r7, r3
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002da0:	230f      	movs	r3, #15
 8002da2:	18fb      	adds	r3, r7, r3
 8002da4:	781b      	ldrb	r3, [r3, #0]
}
 8002da6:	0018      	movs	r0, r3
 8002da8:	46bd      	mov	sp, r7
 8002daa:	b004      	add	sp, #16
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	46c0      	nop			; (mov r8, r8)
 8002db0:	fffffefd 	.word	0xfffffefd
 8002db4:	fffe0219 	.word	0xfffe0219
 8002db8:	833fffe7 	.word	0x833fffe7

08002dbc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002dbc:	b590      	push	{r4, r7, lr}
 8002dbe:	b087      	sub	sp, #28
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dc8:	2317      	movs	r3, #23
 8002dca:	18fb      	adds	r3, r7, r3
 8002dcc:	2200      	movs	r2, #0
 8002dce:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	2204      	movs	r2, #4
 8002dd8:	4013      	ands	r3, r2
 8002dda:	d15e      	bne.n	8002e9a <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2234      	movs	r2, #52	; 0x34
 8002de0:	5c9b      	ldrb	r3, [r3, r2]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d101      	bne.n	8002dea <HAL_ADC_Start_DMA+0x2e>
 8002de6:	2302      	movs	r3, #2
 8002de8:	e05e      	b.n	8002ea8 <HAL_ADC_Start_DMA+0xec>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2234      	movs	r2, #52	; 0x34
 8002dee:	2101      	movs	r1, #1
 8002df0:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	7e5b      	ldrb	r3, [r3, #25]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d007      	beq.n	8002e0a <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002dfa:	2317      	movs	r3, #23
 8002dfc:	18fc      	adds	r4, r7, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	0018      	movs	r0, r3
 8002e02:	f000 f973 	bl	80030ec <ADC_Enable>
 8002e06:	0003      	movs	r3, r0
 8002e08:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002e0a:	2317      	movs	r3, #23
 8002e0c:	18fb      	adds	r3, r7, r3
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d146      	bne.n	8002ea2 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e18:	4a25      	ldr	r2, [pc, #148]	; (8002eb0 <HAL_ADC_Start_DMA+0xf4>)
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	2280      	movs	r2, #128	; 0x80
 8002e1e:	0052      	lsls	r2, r2, #1
 8002e20:	431a      	orrs	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2234      	movs	r2, #52	; 0x34
 8002e30:	2100      	movs	r1, #0
 8002e32:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e38:	4a1e      	ldr	r2, [pc, #120]	; (8002eb4 <HAL_ADC_Start_DMA+0xf8>)
 8002e3a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e40:	4a1d      	ldr	r2, [pc, #116]	; (8002eb8 <HAL_ADC_Start_DMA+0xfc>)
 8002e42:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e48:	4a1c      	ldr	r2, [pc, #112]	; (8002ebc <HAL_ADC_Start_DMA+0x100>)
 8002e4a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	221c      	movs	r2, #28
 8002e52:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	685a      	ldr	r2, [r3, #4]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2110      	movs	r1, #16
 8002e60:	430a      	orrs	r2, r1
 8002e62:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	68da      	ldr	r2, [r3, #12]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2101      	movs	r1, #1
 8002e70:	430a      	orrs	r2, r1
 8002e72:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	3340      	adds	r3, #64	; 0x40
 8002e7e:	0019      	movs	r1, r3
 8002e80:	68ba      	ldr	r2, [r7, #8]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f000 fb60 	bl	8003548 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	689a      	ldr	r2, [r3, #8]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2104      	movs	r1, #4
 8002e94:	430a      	orrs	r2, r1
 8002e96:	609a      	str	r2, [r3, #8]
 8002e98:	e003      	b.n	8002ea2 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002e9a:	2317      	movs	r3, #23
 8002e9c:	18fb      	adds	r3, r7, r3
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002ea2:	2317      	movs	r3, #23
 8002ea4:	18fb      	adds	r3, r7, r3
 8002ea6:	781b      	ldrb	r3, [r3, #0]
}
 8002ea8:	0018      	movs	r0, r3
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	b007      	add	sp, #28
 8002eae:	bd90      	pop	{r4, r7, pc}
 8002eb0:	fffff0fe 	.word	0xfffff0fe
 8002eb4:	080031f5 	.word	0x080031f5
 8002eb8:	080032a9 	.word	0x080032a9
 8002ebc:	080032c7 	.word	0x080032c7

08002ec0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002ec8:	46c0      	nop			; (mov r8, r8)
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	b002      	add	sp, #8
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002eda:	230f      	movs	r3, #15
 8002edc:	18fb      	adds	r3, r7, r3
 8002ede:	2200      	movs	r2, #0
 8002ee0:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eea:	2380      	movs	r3, #128	; 0x80
 8002eec:	055b      	lsls	r3, r3, #21
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d011      	beq.n	8002f16 <HAL_ADC_ConfigChannel+0x46>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d00d      	beq.n	8002f16 <HAL_ADC_ConfigChannel+0x46>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d009      	beq.n	8002f16 <HAL_ADC_ConfigChannel+0x46>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f06:	2b03      	cmp	r3, #3
 8002f08:	d005      	beq.n	8002f16 <HAL_ADC_ConfigChannel+0x46>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0e:	2b04      	cmp	r3, #4
 8002f10:	d001      	beq.n	8002f16 <HAL_ADC_ConfigChannel+0x46>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2234      	movs	r2, #52	; 0x34
 8002f1a:	5c9b      	ldrb	r3, [r3, r2]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d101      	bne.n	8002f24 <HAL_ADC_ConfigChannel+0x54>
 8002f20:	2302      	movs	r3, #2
 8002f22:	e0d0      	b.n	80030c6 <HAL_ADC_ConfigChannel+0x1f6>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2234      	movs	r2, #52	; 0x34
 8002f28:	2101      	movs	r1, #1
 8002f2a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	2204      	movs	r2, #4
 8002f34:	4013      	ands	r3, r2
 8002f36:	d000      	beq.n	8002f3a <HAL_ADC_ConfigChannel+0x6a>
 8002f38:	e0b4      	b.n	80030a4 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	4a64      	ldr	r2, [pc, #400]	; (80030d0 <HAL_ADC_ConfigChannel+0x200>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d100      	bne.n	8002f46 <HAL_ADC_ConfigChannel+0x76>
 8002f44:	e082      	b.n	800304c <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2201      	movs	r2, #1
 8002f52:	409a      	lsls	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f60:	2380      	movs	r3, #128	; 0x80
 8002f62:	055b      	lsls	r3, r3, #21
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d037      	beq.n	8002fd8 <HAL_ADC_ConfigChannel+0x108>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d033      	beq.n	8002fd8 <HAL_ADC_ConfigChannel+0x108>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d02f      	beq.n	8002fd8 <HAL_ADC_ConfigChannel+0x108>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7c:	2b03      	cmp	r3, #3
 8002f7e:	d02b      	beq.n	8002fd8 <HAL_ADC_ConfigChannel+0x108>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f84:	2b04      	cmp	r3, #4
 8002f86:	d027      	beq.n	8002fd8 <HAL_ADC_ConfigChannel+0x108>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f8c:	2b05      	cmp	r3, #5
 8002f8e:	d023      	beq.n	8002fd8 <HAL_ADC_ConfigChannel+0x108>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f94:	2b06      	cmp	r3, #6
 8002f96:	d01f      	beq.n	8002fd8 <HAL_ADC_ConfigChannel+0x108>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9c:	2b07      	cmp	r3, #7
 8002f9e:	d01b      	beq.n	8002fd8 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	689a      	ldr	r2, [r3, #8]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	2107      	movs	r1, #7
 8002fac:	400b      	ands	r3, r1
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d012      	beq.n	8002fd8 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	695a      	ldr	r2, [r3, #20]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2107      	movs	r1, #7
 8002fbe:	438a      	bics	r2, r1
 8002fc0:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	6959      	ldr	r1, [r3, #20]
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	2207      	movs	r2, #7
 8002fce:	401a      	ands	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2b10      	cmp	r3, #16
 8002fde:	d007      	beq.n	8002ff0 <HAL_ADC_ConfigChannel+0x120>
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2b11      	cmp	r3, #17
 8002fe6:	d003      	beq.n	8002ff0 <HAL_ADC_ConfigChannel+0x120>
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2b12      	cmp	r3, #18
 8002fee:	d163      	bne.n	80030b8 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002ff0:	4b38      	ldr	r3, [pc, #224]	; (80030d4 <HAL_ADC_ConfigChannel+0x204>)
 8002ff2:	6819      	ldr	r1, [r3, #0]
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2b10      	cmp	r3, #16
 8002ffa:	d009      	beq.n	8003010 <HAL_ADC_ConfigChannel+0x140>
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2b11      	cmp	r3, #17
 8003002:	d102      	bne.n	800300a <HAL_ADC_ConfigChannel+0x13a>
 8003004:	2380      	movs	r3, #128	; 0x80
 8003006:	03db      	lsls	r3, r3, #15
 8003008:	e004      	b.n	8003014 <HAL_ADC_ConfigChannel+0x144>
 800300a:	2380      	movs	r3, #128	; 0x80
 800300c:	045b      	lsls	r3, r3, #17
 800300e:	e001      	b.n	8003014 <HAL_ADC_ConfigChannel+0x144>
 8003010:	2380      	movs	r3, #128	; 0x80
 8003012:	041b      	lsls	r3, r3, #16
 8003014:	4a2f      	ldr	r2, [pc, #188]	; (80030d4 <HAL_ADC_ConfigChannel+0x204>)
 8003016:	430b      	orrs	r3, r1
 8003018:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2b10      	cmp	r3, #16
 8003020:	d14a      	bne.n	80030b8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003022:	4b2d      	ldr	r3, [pc, #180]	; (80030d8 <HAL_ADC_ConfigChannel+0x208>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	492d      	ldr	r1, [pc, #180]	; (80030dc <HAL_ADC_ConfigChannel+0x20c>)
 8003028:	0018      	movs	r0, r3
 800302a:	f7fd f889 	bl	8000140 <__udivsi3>
 800302e:	0003      	movs	r3, r0
 8003030:	001a      	movs	r2, r3
 8003032:	0013      	movs	r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	189b      	adds	r3, r3, r2
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800303c:	e002      	b.n	8003044 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	3b01      	subs	r3, #1
 8003042:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1f9      	bne.n	800303e <HAL_ADC_ConfigChannel+0x16e>
 800304a:	e035      	b.n	80030b8 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2101      	movs	r1, #1
 8003058:	4099      	lsls	r1, r3
 800305a:	000b      	movs	r3, r1
 800305c:	43d9      	mvns	r1, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	400a      	ands	r2, r1
 8003064:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2b10      	cmp	r3, #16
 800306c:	d007      	beq.n	800307e <HAL_ADC_ConfigChannel+0x1ae>
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2b11      	cmp	r3, #17
 8003074:	d003      	beq.n	800307e <HAL_ADC_ConfigChannel+0x1ae>
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2b12      	cmp	r3, #18
 800307c:	d11c      	bne.n	80030b8 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800307e:	4b15      	ldr	r3, [pc, #84]	; (80030d4 <HAL_ADC_ConfigChannel+0x204>)
 8003080:	6819      	ldr	r1, [r3, #0]
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2b10      	cmp	r3, #16
 8003088:	d007      	beq.n	800309a <HAL_ADC_ConfigChannel+0x1ca>
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2b11      	cmp	r3, #17
 8003090:	d101      	bne.n	8003096 <HAL_ADC_ConfigChannel+0x1c6>
 8003092:	4b13      	ldr	r3, [pc, #76]	; (80030e0 <HAL_ADC_ConfigChannel+0x210>)
 8003094:	e002      	b.n	800309c <HAL_ADC_ConfigChannel+0x1cc>
 8003096:	4b13      	ldr	r3, [pc, #76]	; (80030e4 <HAL_ADC_ConfigChannel+0x214>)
 8003098:	e000      	b.n	800309c <HAL_ADC_ConfigChannel+0x1cc>
 800309a:	4b13      	ldr	r3, [pc, #76]	; (80030e8 <HAL_ADC_ConfigChannel+0x218>)
 800309c:	4a0d      	ldr	r2, [pc, #52]	; (80030d4 <HAL_ADC_ConfigChannel+0x204>)
 800309e:	400b      	ands	r3, r1
 80030a0:	6013      	str	r3, [r2, #0]
 80030a2:	e009      	b.n	80030b8 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a8:	2220      	movs	r2, #32
 80030aa:	431a      	orrs	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80030b0:	230f      	movs	r3, #15
 80030b2:	18fb      	adds	r3, r7, r3
 80030b4:	2201      	movs	r2, #1
 80030b6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2234      	movs	r2, #52	; 0x34
 80030bc:	2100      	movs	r1, #0
 80030be:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80030c0:	230f      	movs	r3, #15
 80030c2:	18fb      	adds	r3, r7, r3
 80030c4:	781b      	ldrb	r3, [r3, #0]
}
 80030c6:	0018      	movs	r0, r3
 80030c8:	46bd      	mov	sp, r7
 80030ca:	b004      	add	sp, #16
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	46c0      	nop			; (mov r8, r8)
 80030d0:	00001001 	.word	0x00001001
 80030d4:	40012708 	.word	0x40012708
 80030d8:	20000000 	.word	0x20000000
 80030dc:	000f4240 	.word	0x000f4240
 80030e0:	ffbfffff 	.word	0xffbfffff
 80030e4:	feffffff 	.word	0xfeffffff
 80030e8:	ff7fffff 	.word	0xff7fffff

080030ec <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030f4:	2300      	movs	r3, #0
 80030f6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80030f8:	2300      	movs	r3, #0
 80030fa:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	2203      	movs	r2, #3
 8003104:	4013      	ands	r3, r2
 8003106:	2b01      	cmp	r3, #1
 8003108:	d112      	bne.n	8003130 <ADC_Enable+0x44>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2201      	movs	r2, #1
 8003112:	4013      	ands	r3, r2
 8003114:	2b01      	cmp	r3, #1
 8003116:	d009      	beq.n	800312c <ADC_Enable+0x40>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68da      	ldr	r2, [r3, #12]
 800311e:	2380      	movs	r3, #128	; 0x80
 8003120:	021b      	lsls	r3, r3, #8
 8003122:	401a      	ands	r2, r3
 8003124:	2380      	movs	r3, #128	; 0x80
 8003126:	021b      	lsls	r3, r3, #8
 8003128:	429a      	cmp	r2, r3
 800312a:	d101      	bne.n	8003130 <ADC_Enable+0x44>
 800312c:	2301      	movs	r3, #1
 800312e:	e000      	b.n	8003132 <ADC_Enable+0x46>
 8003130:	2300      	movs	r3, #0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d152      	bne.n	80031dc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	4a2a      	ldr	r2, [pc, #168]	; (80031e8 <ADC_Enable+0xfc>)
 800313e:	4013      	ands	r3, r2
 8003140:	d00d      	beq.n	800315e <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003146:	2210      	movs	r2, #16
 8003148:	431a      	orrs	r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003152:	2201      	movs	r2, #1
 8003154:	431a      	orrs	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e03f      	b.n	80031de <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	689a      	ldr	r2, [r3, #8]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2101      	movs	r1, #1
 800316a:	430a      	orrs	r2, r1
 800316c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800316e:	4b1f      	ldr	r3, [pc, #124]	; (80031ec <ADC_Enable+0x100>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	491f      	ldr	r1, [pc, #124]	; (80031f0 <ADC_Enable+0x104>)
 8003174:	0018      	movs	r0, r3
 8003176:	f7fc ffe3 	bl	8000140 <__udivsi3>
 800317a:	0003      	movs	r3, r0
 800317c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800317e:	e002      	b.n	8003186 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	3b01      	subs	r3, #1
 8003184:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d1f9      	bne.n	8003180 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 800318c:	f7ff fca8 	bl	8002ae0 <HAL_GetTick>
 8003190:	0003      	movs	r3, r0
 8003192:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003194:	e01b      	b.n	80031ce <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003196:	f7ff fca3 	bl	8002ae0 <HAL_GetTick>
 800319a:	0002      	movs	r2, r0
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d914      	bls.n	80031ce <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2201      	movs	r2, #1
 80031ac:	4013      	ands	r3, r2
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d00d      	beq.n	80031ce <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b6:	2210      	movs	r2, #16
 80031b8:	431a      	orrs	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c2:	2201      	movs	r2, #1
 80031c4:	431a      	orrs	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e007      	b.n	80031de <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2201      	movs	r2, #1
 80031d6:	4013      	ands	r3, r2
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d1dc      	bne.n	8003196 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	0018      	movs	r0, r3
 80031e0:	46bd      	mov	sp, r7
 80031e2:	b004      	add	sp, #16
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	46c0      	nop			; (mov r8, r8)
 80031e8:	80000017 	.word	0x80000017
 80031ec:	20000000 	.word	0x20000000
 80031f0:	000f4240 	.word	0x000f4240

080031f4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003200:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003206:	2250      	movs	r2, #80	; 0x50
 8003208:	4013      	ands	r3, r2
 800320a:	d140      	bne.n	800328e <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003210:	2280      	movs	r2, #128	; 0x80
 8003212:	0092      	lsls	r2, r2, #2
 8003214:	431a      	orrs	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68da      	ldr	r2, [r3, #12]
 8003220:	23c0      	movs	r3, #192	; 0xc0
 8003222:	011b      	lsls	r3, r3, #4
 8003224:	4013      	ands	r3, r2
 8003226:	d12d      	bne.n	8003284 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800322c:	2b00      	cmp	r3, #0
 800322e:	d129      	bne.n	8003284 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2208      	movs	r2, #8
 8003238:	4013      	ands	r3, r2
 800323a:	2b08      	cmp	r3, #8
 800323c:	d122      	bne.n	8003284 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	2204      	movs	r2, #4
 8003246:	4013      	ands	r3, r2
 8003248:	d110      	bne.n	800326c <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	685a      	ldr	r2, [r3, #4]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	210c      	movs	r1, #12
 8003256:	438a      	bics	r2, r1
 8003258:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325e:	4a11      	ldr	r2, [pc, #68]	; (80032a4 <ADC_DMAConvCplt+0xb0>)
 8003260:	4013      	ands	r3, r2
 8003262:	2201      	movs	r2, #1
 8003264:	431a      	orrs	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	639a      	str	r2, [r3, #56]	; 0x38
 800326a:	e00b      	b.n	8003284 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003270:	2220      	movs	r2, #32
 8003272:	431a      	orrs	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800327c:	2201      	movs	r2, #1
 800327e:	431a      	orrs	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	0018      	movs	r0, r3
 8003288:	f7ff f9c2 	bl	8002610 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 800328c:	e005      	b.n	800329a <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	0010      	movs	r0, r2
 8003298:	4798      	blx	r3
}
 800329a:	46c0      	nop			; (mov r8, r8)
 800329c:	46bd      	mov	sp, r7
 800329e:	b004      	add	sp, #16
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	46c0      	nop			; (mov r8, r8)
 80032a4:	fffffefe 	.word	0xfffffefe

080032a8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b4:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	0018      	movs	r0, r3
 80032ba:	f7ff f997 	bl	80025ec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032be:	46c0      	nop			; (mov r8, r8)
 80032c0:	46bd      	mov	sp, r7
 80032c2:	b004      	add	sp, #16
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b084      	sub	sp, #16
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d8:	2240      	movs	r2, #64	; 0x40
 80032da:	431a      	orrs	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e4:	2204      	movs	r2, #4
 80032e6:	431a      	orrs	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	0018      	movs	r0, r3
 80032f0:	f7ff fde6 	bl	8002ec0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032f4:	46c0      	nop			; (mov r8, r8)
 80032f6:	46bd      	mov	sp, r7
 80032f8:	b004      	add	sp, #16
 80032fa:	bd80      	pop	{r7, pc}

080032fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	0002      	movs	r2, r0
 8003304:	1dfb      	adds	r3, r7, #7
 8003306:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003308:	1dfb      	adds	r3, r7, #7
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	2b7f      	cmp	r3, #127	; 0x7f
 800330e:	d809      	bhi.n	8003324 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003310:	1dfb      	adds	r3, r7, #7
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	001a      	movs	r2, r3
 8003316:	231f      	movs	r3, #31
 8003318:	401a      	ands	r2, r3
 800331a:	4b04      	ldr	r3, [pc, #16]	; (800332c <__NVIC_EnableIRQ+0x30>)
 800331c:	2101      	movs	r1, #1
 800331e:	4091      	lsls	r1, r2
 8003320:	000a      	movs	r2, r1
 8003322:	601a      	str	r2, [r3, #0]
  }
}
 8003324:	46c0      	nop			; (mov r8, r8)
 8003326:	46bd      	mov	sp, r7
 8003328:	b002      	add	sp, #8
 800332a:	bd80      	pop	{r7, pc}
 800332c:	e000e100 	.word	0xe000e100

08003330 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003330:	b590      	push	{r4, r7, lr}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	0002      	movs	r2, r0
 8003338:	6039      	str	r1, [r7, #0]
 800333a:	1dfb      	adds	r3, r7, #7
 800333c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800333e:	1dfb      	adds	r3, r7, #7
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	2b7f      	cmp	r3, #127	; 0x7f
 8003344:	d828      	bhi.n	8003398 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003346:	4a2f      	ldr	r2, [pc, #188]	; (8003404 <__NVIC_SetPriority+0xd4>)
 8003348:	1dfb      	adds	r3, r7, #7
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	b25b      	sxtb	r3, r3
 800334e:	089b      	lsrs	r3, r3, #2
 8003350:	33c0      	adds	r3, #192	; 0xc0
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	589b      	ldr	r3, [r3, r2]
 8003356:	1dfa      	adds	r2, r7, #7
 8003358:	7812      	ldrb	r2, [r2, #0]
 800335a:	0011      	movs	r1, r2
 800335c:	2203      	movs	r2, #3
 800335e:	400a      	ands	r2, r1
 8003360:	00d2      	lsls	r2, r2, #3
 8003362:	21ff      	movs	r1, #255	; 0xff
 8003364:	4091      	lsls	r1, r2
 8003366:	000a      	movs	r2, r1
 8003368:	43d2      	mvns	r2, r2
 800336a:	401a      	ands	r2, r3
 800336c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	019b      	lsls	r3, r3, #6
 8003372:	22ff      	movs	r2, #255	; 0xff
 8003374:	401a      	ands	r2, r3
 8003376:	1dfb      	adds	r3, r7, #7
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	0018      	movs	r0, r3
 800337c:	2303      	movs	r3, #3
 800337e:	4003      	ands	r3, r0
 8003380:	00db      	lsls	r3, r3, #3
 8003382:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003384:	481f      	ldr	r0, [pc, #124]	; (8003404 <__NVIC_SetPriority+0xd4>)
 8003386:	1dfb      	adds	r3, r7, #7
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	b25b      	sxtb	r3, r3
 800338c:	089b      	lsrs	r3, r3, #2
 800338e:	430a      	orrs	r2, r1
 8003390:	33c0      	adds	r3, #192	; 0xc0
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003396:	e031      	b.n	80033fc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003398:	4a1b      	ldr	r2, [pc, #108]	; (8003408 <__NVIC_SetPriority+0xd8>)
 800339a:	1dfb      	adds	r3, r7, #7
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	0019      	movs	r1, r3
 80033a0:	230f      	movs	r3, #15
 80033a2:	400b      	ands	r3, r1
 80033a4:	3b08      	subs	r3, #8
 80033a6:	089b      	lsrs	r3, r3, #2
 80033a8:	3306      	adds	r3, #6
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	18d3      	adds	r3, r2, r3
 80033ae:	3304      	adds	r3, #4
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	1dfa      	adds	r2, r7, #7
 80033b4:	7812      	ldrb	r2, [r2, #0]
 80033b6:	0011      	movs	r1, r2
 80033b8:	2203      	movs	r2, #3
 80033ba:	400a      	ands	r2, r1
 80033bc:	00d2      	lsls	r2, r2, #3
 80033be:	21ff      	movs	r1, #255	; 0xff
 80033c0:	4091      	lsls	r1, r2
 80033c2:	000a      	movs	r2, r1
 80033c4:	43d2      	mvns	r2, r2
 80033c6:	401a      	ands	r2, r3
 80033c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	019b      	lsls	r3, r3, #6
 80033ce:	22ff      	movs	r2, #255	; 0xff
 80033d0:	401a      	ands	r2, r3
 80033d2:	1dfb      	adds	r3, r7, #7
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	0018      	movs	r0, r3
 80033d8:	2303      	movs	r3, #3
 80033da:	4003      	ands	r3, r0
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033e0:	4809      	ldr	r0, [pc, #36]	; (8003408 <__NVIC_SetPriority+0xd8>)
 80033e2:	1dfb      	adds	r3, r7, #7
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	001c      	movs	r4, r3
 80033e8:	230f      	movs	r3, #15
 80033ea:	4023      	ands	r3, r4
 80033ec:	3b08      	subs	r3, #8
 80033ee:	089b      	lsrs	r3, r3, #2
 80033f0:	430a      	orrs	r2, r1
 80033f2:	3306      	adds	r3, #6
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	18c3      	adds	r3, r0, r3
 80033f8:	3304      	adds	r3, #4
 80033fa:	601a      	str	r2, [r3, #0]
}
 80033fc:	46c0      	nop			; (mov r8, r8)
 80033fe:	46bd      	mov	sp, r7
 8003400:	b003      	add	sp, #12
 8003402:	bd90      	pop	{r4, r7, pc}
 8003404:	e000e100 	.word	0xe000e100
 8003408:	e000ed00 	.word	0xe000ed00

0800340c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	1e5a      	subs	r2, r3, #1
 8003418:	2380      	movs	r3, #128	; 0x80
 800341a:	045b      	lsls	r3, r3, #17
 800341c:	429a      	cmp	r2, r3
 800341e:	d301      	bcc.n	8003424 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003420:	2301      	movs	r3, #1
 8003422:	e010      	b.n	8003446 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003424:	4b0a      	ldr	r3, [pc, #40]	; (8003450 <SysTick_Config+0x44>)
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	3a01      	subs	r2, #1
 800342a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800342c:	2301      	movs	r3, #1
 800342e:	425b      	negs	r3, r3
 8003430:	2103      	movs	r1, #3
 8003432:	0018      	movs	r0, r3
 8003434:	f7ff ff7c 	bl	8003330 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003438:	4b05      	ldr	r3, [pc, #20]	; (8003450 <SysTick_Config+0x44>)
 800343a:	2200      	movs	r2, #0
 800343c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800343e:	4b04      	ldr	r3, [pc, #16]	; (8003450 <SysTick_Config+0x44>)
 8003440:	2207      	movs	r2, #7
 8003442:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003444:	2300      	movs	r3, #0
}
 8003446:	0018      	movs	r0, r3
 8003448:	46bd      	mov	sp, r7
 800344a:	b002      	add	sp, #8
 800344c:	bd80      	pop	{r7, pc}
 800344e:	46c0      	nop			; (mov r8, r8)
 8003450:	e000e010 	.word	0xe000e010

08003454 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	60b9      	str	r1, [r7, #8]
 800345c:	607a      	str	r2, [r7, #4]
 800345e:	210f      	movs	r1, #15
 8003460:	187b      	adds	r3, r7, r1
 8003462:	1c02      	adds	r2, r0, #0
 8003464:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003466:	68ba      	ldr	r2, [r7, #8]
 8003468:	187b      	adds	r3, r7, r1
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	b25b      	sxtb	r3, r3
 800346e:	0011      	movs	r1, r2
 8003470:	0018      	movs	r0, r3
 8003472:	f7ff ff5d 	bl	8003330 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8003476:	46c0      	nop			; (mov r8, r8)
 8003478:	46bd      	mov	sp, r7
 800347a:	b004      	add	sp, #16
 800347c:	bd80      	pop	{r7, pc}

0800347e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b082      	sub	sp, #8
 8003482:	af00      	add	r7, sp, #0
 8003484:	0002      	movs	r2, r0
 8003486:	1dfb      	adds	r3, r7, #7
 8003488:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800348a:	1dfb      	adds	r3, r7, #7
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	b25b      	sxtb	r3, r3
 8003490:	0018      	movs	r0, r3
 8003492:	f7ff ff33 	bl	80032fc <__NVIC_EnableIRQ>
}
 8003496:	46c0      	nop			; (mov r8, r8)
 8003498:	46bd      	mov	sp, r7
 800349a:	b002      	add	sp, #8
 800349c:	bd80      	pop	{r7, pc}

0800349e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b082      	sub	sp, #8
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	0018      	movs	r0, r3
 80034aa:	f7ff ffaf 	bl	800340c <SysTick_Config>
 80034ae:	0003      	movs	r3, r0
}
 80034b0:	0018      	movs	r0, r3
 80034b2:	46bd      	mov	sp, r7
 80034b4:	b002      	add	sp, #8
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80034c0:	2300      	movs	r3, #0
 80034c2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e036      	b.n	800353c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2221      	movs	r2, #33	; 0x21
 80034d2:	2102      	movs	r1, #2
 80034d4:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	4a18      	ldr	r2, [pc, #96]	; (8003544 <HAL_DMA_Init+0x8c>)
 80034e2:	4013      	ands	r3, r2
 80034e4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80034ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	695b      	ldr	r3, [r3, #20]
 8003500:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003506:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	69db      	ldr	r3, [r3, #28]
 800350c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	4313      	orrs	r3, r2
 8003512:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	0018      	movs	r0, r3
 8003520:	f000 f946 	bl	80037b0 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2221      	movs	r2, #33	; 0x21
 800352e:	2101      	movs	r1, #1
 8003530:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2220      	movs	r2, #32
 8003536:	2100      	movs	r1, #0
 8003538:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	0018      	movs	r0, r3
 800353e:	46bd      	mov	sp, r7
 8003540:	b004      	add	sp, #16
 8003542:	bd80      	pop	{r7, pc}
 8003544:	ffffc00f 	.word	0xffffc00f

08003548 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b086      	sub	sp, #24
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
 8003554:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003556:	2317      	movs	r3, #23
 8003558:	18fb      	adds	r3, r7, r3
 800355a:	2200      	movs	r2, #0
 800355c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2220      	movs	r2, #32
 8003562:	5c9b      	ldrb	r3, [r3, r2]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d101      	bne.n	800356c <HAL_DMA_Start_IT+0x24>
 8003568:	2302      	movs	r3, #2
 800356a:	e04f      	b.n	800360c <HAL_DMA_Start_IT+0xc4>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2220      	movs	r2, #32
 8003570:	2101      	movs	r1, #1
 8003572:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2221      	movs	r2, #33	; 0x21
 8003578:	5c9b      	ldrb	r3, [r3, r2]
 800357a:	b2db      	uxtb	r3, r3
 800357c:	2b01      	cmp	r3, #1
 800357e:	d13a      	bne.n	80035f6 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2221      	movs	r2, #33	; 0x21
 8003584:	2102      	movs	r1, #2
 8003586:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2200      	movs	r2, #0
 800358c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2101      	movs	r1, #1
 800359a:	438a      	bics	r2, r1
 800359c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	68b9      	ldr	r1, [r7, #8]
 80035a4:	68f8      	ldr	r0, [r7, #12]
 80035a6:	f000 f8d7 	bl	8003758 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d008      	beq.n	80035c4 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	210e      	movs	r1, #14
 80035be:	430a      	orrs	r2, r1
 80035c0:	601a      	str	r2, [r3, #0]
 80035c2:	e00f      	b.n	80035e4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	210a      	movs	r1, #10
 80035d0:	430a      	orrs	r2, r1
 80035d2:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2104      	movs	r1, #4
 80035e0:	438a      	bics	r2, r1
 80035e2:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2101      	movs	r1, #1
 80035f0:	430a      	orrs	r2, r1
 80035f2:	601a      	str	r2, [r3, #0]
 80035f4:	e007      	b.n	8003606 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2220      	movs	r2, #32
 80035fa:	2100      	movs	r1, #0
 80035fc:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80035fe:	2317      	movs	r3, #23
 8003600:	18fb      	adds	r3, r7, r3
 8003602:	2202      	movs	r2, #2
 8003604:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8003606:	2317      	movs	r3, #23
 8003608:	18fb      	adds	r3, r7, r3
 800360a:	781b      	ldrb	r3, [r3, #0]
}
 800360c:	0018      	movs	r0, r3
 800360e:	46bd      	mov	sp, r7
 8003610:	b006      	add	sp, #24
 8003612:	bd80      	pop	{r7, pc}

08003614 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003630:	2204      	movs	r2, #4
 8003632:	409a      	lsls	r2, r3
 8003634:	0013      	movs	r3, r2
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	4013      	ands	r3, r2
 800363a:	d024      	beq.n	8003686 <HAL_DMA_IRQHandler+0x72>
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	2204      	movs	r2, #4
 8003640:	4013      	ands	r3, r2
 8003642:	d020      	beq.n	8003686 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2220      	movs	r2, #32
 800364c:	4013      	ands	r3, r2
 800364e:	d107      	bne.n	8003660 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2104      	movs	r1, #4
 800365c:	438a      	bics	r2, r1
 800365e:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003668:	2104      	movs	r1, #4
 800366a:	4091      	lsls	r1, r2
 800366c:	000a      	movs	r2, r1
 800366e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003674:	2b00      	cmp	r3, #0
 8003676:	d100      	bne.n	800367a <HAL_DMA_IRQHandler+0x66>
 8003678:	e06a      	b.n	8003750 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	0010      	movs	r0, r2
 8003682:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003684:	e064      	b.n	8003750 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368a:	2202      	movs	r2, #2
 800368c:	409a      	lsls	r2, r3
 800368e:	0013      	movs	r3, r2
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	4013      	ands	r3, r2
 8003694:	d02b      	beq.n	80036ee <HAL_DMA_IRQHandler+0xda>
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	2202      	movs	r2, #2
 800369a:	4013      	ands	r3, r2
 800369c:	d027      	beq.n	80036ee <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2220      	movs	r2, #32
 80036a6:	4013      	ands	r3, r2
 80036a8:	d10b      	bne.n	80036c2 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	210a      	movs	r1, #10
 80036b6:	438a      	bics	r2, r1
 80036b8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2221      	movs	r2, #33	; 0x21
 80036be:	2101      	movs	r1, #1
 80036c0:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ca:	2102      	movs	r1, #2
 80036cc:	4091      	lsls	r1, r2
 80036ce:	000a      	movs	r2, r1
 80036d0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2220      	movs	r2, #32
 80036d6:	2100      	movs	r1, #0
 80036d8:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d036      	beq.n	8003750 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	0010      	movs	r0, r2
 80036ea:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80036ec:	e030      	b.n	8003750 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f2:	2208      	movs	r2, #8
 80036f4:	409a      	lsls	r2, r3
 80036f6:	0013      	movs	r3, r2
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	4013      	ands	r3, r2
 80036fc:	d028      	beq.n	8003750 <HAL_DMA_IRQHandler+0x13c>
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	2208      	movs	r2, #8
 8003702:	4013      	ands	r3, r2
 8003704:	d024      	beq.n	8003750 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	210e      	movs	r1, #14
 8003712:	438a      	bics	r2, r1
 8003714:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800371e:	2101      	movs	r1, #1
 8003720:	4091      	lsls	r1, r2
 8003722:	000a      	movs	r2, r1
 8003724:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2221      	movs	r2, #33	; 0x21
 8003730:	2101      	movs	r1, #1
 8003732:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2220      	movs	r2, #32
 8003738:	2100      	movs	r1, #0
 800373a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003740:	2b00      	cmp	r3, #0
 8003742:	d005      	beq.n	8003750 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	0010      	movs	r0, r2
 800374c:	4798      	blx	r3
    }
  }
}
 800374e:	e7ff      	b.n	8003750 <HAL_DMA_IRQHandler+0x13c>
 8003750:	46c0      	nop			; (mov r8, r8)
 8003752:	46bd      	mov	sp, r7
 8003754:	b004      	add	sp, #16
 8003756:	bd80      	pop	{r7, pc}

08003758 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
 8003764:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800376e:	2101      	movs	r1, #1
 8003770:	4091      	lsls	r1, r2
 8003772:	000a      	movs	r2, r1
 8003774:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	683a      	ldr	r2, [r7, #0]
 800377c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2b10      	cmp	r3, #16
 8003784:	d108      	bne.n	8003798 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68ba      	ldr	r2, [r7, #8]
 8003794:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003796:	e007      	b.n	80037a8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68ba      	ldr	r2, [r7, #8]
 800379e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	60da      	str	r2, [r3, #12]
}
 80037a8:	46c0      	nop			; (mov r8, r8)
 80037aa:	46bd      	mov	sp, r7
 80037ac:	b004      	add	sp, #16
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a08      	ldr	r2, [pc, #32]	; (80037e0 <DMA_CalcBaseAndBitshift+0x30>)
 80037be:	4694      	mov	ip, r2
 80037c0:	4463      	add	r3, ip
 80037c2:	2114      	movs	r1, #20
 80037c4:	0018      	movs	r0, r3
 80037c6:	f7fc fcbb 	bl	8000140 <__udivsi3>
 80037ca:	0003      	movs	r3, r0
 80037cc:	009a      	lsls	r2, r3, #2
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a03      	ldr	r2, [pc, #12]	; (80037e4 <DMA_CalcBaseAndBitshift+0x34>)
 80037d6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80037d8:	46c0      	nop			; (mov r8, r8)
 80037da:	46bd      	mov	sp, r7
 80037dc:	b002      	add	sp, #8
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	bffdfff8 	.word	0xbffdfff8
 80037e4:	40020000 	.word	0x40020000

080037e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037f2:	2300      	movs	r3, #0
 80037f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037f6:	e14f      	b.n	8003a98 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2101      	movs	r1, #1
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	4091      	lsls	r1, r2
 8003802:	000a      	movs	r2, r1
 8003804:	4013      	ands	r3, r2
 8003806:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d100      	bne.n	8003810 <HAL_GPIO_Init+0x28>
 800380e:	e140      	b.n	8003a92 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	2203      	movs	r2, #3
 8003816:	4013      	ands	r3, r2
 8003818:	2b01      	cmp	r3, #1
 800381a:	d005      	beq.n	8003828 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	2203      	movs	r2, #3
 8003822:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003824:	2b02      	cmp	r3, #2
 8003826:	d130      	bne.n	800388a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	2203      	movs	r2, #3
 8003834:	409a      	lsls	r2, r3
 8003836:	0013      	movs	r3, r2
 8003838:	43da      	mvns	r2, r3
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	4013      	ands	r3, r2
 800383e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	68da      	ldr	r2, [r3, #12]
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	409a      	lsls	r2, r3
 800384a:	0013      	movs	r3, r2
 800384c:	693a      	ldr	r2, [r7, #16]
 800384e:	4313      	orrs	r3, r2
 8003850:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800385e:	2201      	movs	r2, #1
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	409a      	lsls	r2, r3
 8003864:	0013      	movs	r3, r2
 8003866:	43da      	mvns	r2, r3
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	4013      	ands	r3, r2
 800386c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	091b      	lsrs	r3, r3, #4
 8003874:	2201      	movs	r2, #1
 8003876:	401a      	ands	r2, r3
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	409a      	lsls	r2, r3
 800387c:	0013      	movs	r3, r2
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	4313      	orrs	r3, r2
 8003882:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	693a      	ldr	r2, [r7, #16]
 8003888:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	2203      	movs	r2, #3
 8003890:	4013      	ands	r3, r2
 8003892:	2b03      	cmp	r3, #3
 8003894:	d017      	beq.n	80038c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	2203      	movs	r2, #3
 80038a2:	409a      	lsls	r2, r3
 80038a4:	0013      	movs	r3, r2
 80038a6:	43da      	mvns	r2, r3
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	4013      	ands	r3, r2
 80038ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	689a      	ldr	r2, [r3, #8]
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	005b      	lsls	r3, r3, #1
 80038b6:	409a      	lsls	r2, r3
 80038b8:	0013      	movs	r3, r2
 80038ba:	693a      	ldr	r2, [r7, #16]
 80038bc:	4313      	orrs	r3, r2
 80038be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	693a      	ldr	r2, [r7, #16]
 80038c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	2203      	movs	r2, #3
 80038cc:	4013      	ands	r3, r2
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d123      	bne.n	800391a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	08da      	lsrs	r2, r3, #3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	3208      	adds	r2, #8
 80038da:	0092      	lsls	r2, r2, #2
 80038dc:	58d3      	ldr	r3, [r2, r3]
 80038de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	2207      	movs	r2, #7
 80038e4:	4013      	ands	r3, r2
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	220f      	movs	r2, #15
 80038ea:	409a      	lsls	r2, r3
 80038ec:	0013      	movs	r3, r2
 80038ee:	43da      	mvns	r2, r3
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	4013      	ands	r3, r2
 80038f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	691a      	ldr	r2, [r3, #16]
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	2107      	movs	r1, #7
 80038fe:	400b      	ands	r3, r1
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	409a      	lsls	r2, r3
 8003904:	0013      	movs	r3, r2
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	4313      	orrs	r3, r2
 800390a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	08da      	lsrs	r2, r3, #3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	3208      	adds	r2, #8
 8003914:	0092      	lsls	r2, r2, #2
 8003916:	6939      	ldr	r1, [r7, #16]
 8003918:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	2203      	movs	r2, #3
 8003926:	409a      	lsls	r2, r3
 8003928:	0013      	movs	r3, r2
 800392a:	43da      	mvns	r2, r3
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	4013      	ands	r3, r2
 8003930:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	2203      	movs	r2, #3
 8003938:	401a      	ands	r2, r3
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	005b      	lsls	r3, r3, #1
 800393e:	409a      	lsls	r2, r3
 8003940:	0013      	movs	r3, r2
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	4313      	orrs	r3, r2
 8003946:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	23c0      	movs	r3, #192	; 0xc0
 8003954:	029b      	lsls	r3, r3, #10
 8003956:	4013      	ands	r3, r2
 8003958:	d100      	bne.n	800395c <HAL_GPIO_Init+0x174>
 800395a:	e09a      	b.n	8003a92 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800395c:	4b54      	ldr	r3, [pc, #336]	; (8003ab0 <HAL_GPIO_Init+0x2c8>)
 800395e:	699a      	ldr	r2, [r3, #24]
 8003960:	4b53      	ldr	r3, [pc, #332]	; (8003ab0 <HAL_GPIO_Init+0x2c8>)
 8003962:	2101      	movs	r1, #1
 8003964:	430a      	orrs	r2, r1
 8003966:	619a      	str	r2, [r3, #24]
 8003968:	4b51      	ldr	r3, [pc, #324]	; (8003ab0 <HAL_GPIO_Init+0x2c8>)
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	2201      	movs	r2, #1
 800396e:	4013      	ands	r3, r2
 8003970:	60bb      	str	r3, [r7, #8]
 8003972:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003974:	4a4f      	ldr	r2, [pc, #316]	; (8003ab4 <HAL_GPIO_Init+0x2cc>)
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	089b      	lsrs	r3, r3, #2
 800397a:	3302      	adds	r3, #2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	589b      	ldr	r3, [r3, r2]
 8003980:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	2203      	movs	r2, #3
 8003986:	4013      	ands	r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	220f      	movs	r2, #15
 800398c:	409a      	lsls	r2, r3
 800398e:	0013      	movs	r3, r2
 8003990:	43da      	mvns	r2, r3
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	4013      	ands	r3, r2
 8003996:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	2390      	movs	r3, #144	; 0x90
 800399c:	05db      	lsls	r3, r3, #23
 800399e:	429a      	cmp	r2, r3
 80039a0:	d013      	beq.n	80039ca <HAL_GPIO_Init+0x1e2>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a44      	ldr	r2, [pc, #272]	; (8003ab8 <HAL_GPIO_Init+0x2d0>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d00d      	beq.n	80039c6 <HAL_GPIO_Init+0x1de>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a43      	ldr	r2, [pc, #268]	; (8003abc <HAL_GPIO_Init+0x2d4>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d007      	beq.n	80039c2 <HAL_GPIO_Init+0x1da>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a42      	ldr	r2, [pc, #264]	; (8003ac0 <HAL_GPIO_Init+0x2d8>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d101      	bne.n	80039be <HAL_GPIO_Init+0x1d6>
 80039ba:	2303      	movs	r3, #3
 80039bc:	e006      	b.n	80039cc <HAL_GPIO_Init+0x1e4>
 80039be:	2305      	movs	r3, #5
 80039c0:	e004      	b.n	80039cc <HAL_GPIO_Init+0x1e4>
 80039c2:	2302      	movs	r3, #2
 80039c4:	e002      	b.n	80039cc <HAL_GPIO_Init+0x1e4>
 80039c6:	2301      	movs	r3, #1
 80039c8:	e000      	b.n	80039cc <HAL_GPIO_Init+0x1e4>
 80039ca:	2300      	movs	r3, #0
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	2103      	movs	r1, #3
 80039d0:	400a      	ands	r2, r1
 80039d2:	0092      	lsls	r2, r2, #2
 80039d4:	4093      	lsls	r3, r2
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	4313      	orrs	r3, r2
 80039da:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80039dc:	4935      	ldr	r1, [pc, #212]	; (8003ab4 <HAL_GPIO_Init+0x2cc>)
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	089b      	lsrs	r3, r3, #2
 80039e2:	3302      	adds	r3, #2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039ea:	4b36      	ldr	r3, [pc, #216]	; (8003ac4 <HAL_GPIO_Init+0x2dc>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	43da      	mvns	r2, r3
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	4013      	ands	r3, r2
 80039f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	685a      	ldr	r2, [r3, #4]
 80039fe:	2380      	movs	r3, #128	; 0x80
 8003a00:	035b      	lsls	r3, r3, #13
 8003a02:	4013      	ands	r3, r2
 8003a04:	d003      	beq.n	8003a0e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003a0e:	4b2d      	ldr	r3, [pc, #180]	; (8003ac4 <HAL_GPIO_Init+0x2dc>)
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003a14:	4b2b      	ldr	r3, [pc, #172]	; (8003ac4 <HAL_GPIO_Init+0x2dc>)
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	43da      	mvns	r2, r3
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	4013      	ands	r3, r2
 8003a22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685a      	ldr	r2, [r3, #4]
 8003a28:	2380      	movs	r3, #128	; 0x80
 8003a2a:	039b      	lsls	r3, r3, #14
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	d003      	beq.n	8003a38 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003a38:	4b22      	ldr	r3, [pc, #136]	; (8003ac4 <HAL_GPIO_Init+0x2dc>)
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8003a3e:	4b21      	ldr	r3, [pc, #132]	; (8003ac4 <HAL_GPIO_Init+0x2dc>)
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	43da      	mvns	r2, r3
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	685a      	ldr	r2, [r3, #4]
 8003a52:	2380      	movs	r3, #128	; 0x80
 8003a54:	029b      	lsls	r3, r3, #10
 8003a56:	4013      	ands	r3, r2
 8003a58:	d003      	beq.n	8003a62 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003a62:	4b18      	ldr	r3, [pc, #96]	; (8003ac4 <HAL_GPIO_Init+0x2dc>)
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8003a68:	4b16      	ldr	r3, [pc, #88]	; (8003ac4 <HAL_GPIO_Init+0x2dc>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	43da      	mvns	r2, r3
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	4013      	ands	r3, r2
 8003a76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685a      	ldr	r2, [r3, #4]
 8003a7c:	2380      	movs	r3, #128	; 0x80
 8003a7e:	025b      	lsls	r3, r3, #9
 8003a80:	4013      	ands	r3, r2
 8003a82:	d003      	beq.n	8003a8c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003a84:	693a      	ldr	r2, [r7, #16]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003a8c:	4b0d      	ldr	r3, [pc, #52]	; (8003ac4 <HAL_GPIO_Init+0x2dc>)
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	3301      	adds	r3, #1
 8003a96:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	40da      	lsrs	r2, r3
 8003aa0:	1e13      	subs	r3, r2, #0
 8003aa2:	d000      	beq.n	8003aa6 <HAL_GPIO_Init+0x2be>
 8003aa4:	e6a8      	b.n	80037f8 <HAL_GPIO_Init+0x10>
  } 
}
 8003aa6:	46c0      	nop			; (mov r8, r8)
 8003aa8:	46c0      	nop			; (mov r8, r8)
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	b006      	add	sp, #24
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	40021000 	.word	0x40021000
 8003ab4:	40010000 	.word	0x40010000
 8003ab8:	48000400 	.word	0x48000400
 8003abc:	48000800 	.word	0x48000800
 8003ac0:	48000c00 	.word	0x48000c00
 8003ac4:	40010400 	.word	0x40010400

08003ac8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	0008      	movs	r0, r1
 8003ad2:	0011      	movs	r1, r2
 8003ad4:	1cbb      	adds	r3, r7, #2
 8003ad6:	1c02      	adds	r2, r0, #0
 8003ad8:	801a      	strh	r2, [r3, #0]
 8003ada:	1c7b      	adds	r3, r7, #1
 8003adc:	1c0a      	adds	r2, r1, #0
 8003ade:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ae0:	1c7b      	adds	r3, r7, #1
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d004      	beq.n	8003af2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ae8:	1cbb      	adds	r3, r7, #2
 8003aea:	881a      	ldrh	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003af0:	e003      	b.n	8003afa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003af2:	1cbb      	adds	r3, r7, #2
 8003af4:	881a      	ldrh	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003afa:	46c0      	nop			; (mov r8, r8)
 8003afc:	46bd      	mov	sp, r7
 8003afe:	b002      	add	sp, #8
 8003b00:	bd80      	pop	{r7, pc}
	...

08003b04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b088      	sub	sp, #32
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e301      	b.n	800411a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	d100      	bne.n	8003b22 <HAL_RCC_OscConfig+0x1e>
 8003b20:	e08d      	b.n	8003c3e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003b22:	4bc3      	ldr	r3, [pc, #780]	; (8003e30 <HAL_RCC_OscConfig+0x32c>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	220c      	movs	r2, #12
 8003b28:	4013      	ands	r3, r2
 8003b2a:	2b04      	cmp	r3, #4
 8003b2c:	d00e      	beq.n	8003b4c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b2e:	4bc0      	ldr	r3, [pc, #768]	; (8003e30 <HAL_RCC_OscConfig+0x32c>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	220c      	movs	r2, #12
 8003b34:	4013      	ands	r3, r2
 8003b36:	2b08      	cmp	r3, #8
 8003b38:	d116      	bne.n	8003b68 <HAL_RCC_OscConfig+0x64>
 8003b3a:	4bbd      	ldr	r3, [pc, #756]	; (8003e30 <HAL_RCC_OscConfig+0x32c>)
 8003b3c:	685a      	ldr	r2, [r3, #4]
 8003b3e:	2380      	movs	r3, #128	; 0x80
 8003b40:	025b      	lsls	r3, r3, #9
 8003b42:	401a      	ands	r2, r3
 8003b44:	2380      	movs	r3, #128	; 0x80
 8003b46:	025b      	lsls	r3, r3, #9
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d10d      	bne.n	8003b68 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b4c:	4bb8      	ldr	r3, [pc, #736]	; (8003e30 <HAL_RCC_OscConfig+0x32c>)
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	2380      	movs	r3, #128	; 0x80
 8003b52:	029b      	lsls	r3, r3, #10
 8003b54:	4013      	ands	r3, r2
 8003b56:	d100      	bne.n	8003b5a <HAL_RCC_OscConfig+0x56>
 8003b58:	e070      	b.n	8003c3c <HAL_RCC_OscConfig+0x138>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d000      	beq.n	8003b64 <HAL_RCC_OscConfig+0x60>
 8003b62:	e06b      	b.n	8003c3c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e2d8      	b.n	800411a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d107      	bne.n	8003b80 <HAL_RCC_OscConfig+0x7c>
 8003b70:	4baf      	ldr	r3, [pc, #700]	; (8003e30 <HAL_RCC_OscConfig+0x32c>)
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	4bae      	ldr	r3, [pc, #696]	; (8003e30 <HAL_RCC_OscConfig+0x32c>)
 8003b76:	2180      	movs	r1, #128	; 0x80
 8003b78:	0249      	lsls	r1, r1, #9
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	601a      	str	r2, [r3, #0]
 8003b7e:	e02f      	b.n	8003be0 <HAL_RCC_OscConfig+0xdc>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d10c      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x9e>
 8003b88:	4ba9      	ldr	r3, [pc, #676]	; (8003e30 <HAL_RCC_OscConfig+0x32c>)
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	4ba8      	ldr	r3, [pc, #672]	; (8003e30 <HAL_RCC_OscConfig+0x32c>)
 8003b8e:	49a9      	ldr	r1, [pc, #676]	; (8003e34 <HAL_RCC_OscConfig+0x330>)
 8003b90:	400a      	ands	r2, r1
 8003b92:	601a      	str	r2, [r3, #0]
 8003b94:	4ba6      	ldr	r3, [pc, #664]	; (8003e30 <HAL_RCC_OscConfig+0x32c>)
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	4ba5      	ldr	r3, [pc, #660]	; (8003e30 <HAL_RCC_OscConfig+0x32c>)
 8003b9a:	49a7      	ldr	r1, [pc, #668]	; (8003e38 <HAL_RCC_OscConfig+0x334>)
 8003b9c:	400a      	ands	r2, r1
 8003b9e:	601a      	str	r2, [r3, #0]
 8003ba0:	e01e      	b.n	8003be0 <HAL_RCC_OscConfig+0xdc>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	2b05      	cmp	r3, #5
 8003ba8:	d10e      	bne.n	8003bc8 <HAL_RCC_OscConfig+0xc4>
 8003baa:	4ba1      	ldr	r3, [pc, #644]	; (8003e30 <HAL_RCC_OscConfig+0x32c>)
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	4ba0      	ldr	r3, [pc, #640]	; (8003e30 <HAL_RCC_OscConfig+0x32c>)
 8003bb0:	2180      	movs	r1, #128	; 0x80
 8003bb2:	02c9      	lsls	r1, r1, #11
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	601a      	str	r2, [r3, #0]
 8003bb8:	4b9d      	ldr	r3, [pc, #628]	; (8003e30 <HAL_RCC_OscConfig+0x32c>)
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	4b9c      	ldr	r3, [pc, #624]	; (8003e30 <HAL_RCC_OscConfig+0x32c>)
 8003bbe:	2180      	movs	r1, #128	; 0x80
 8003bc0:	0249      	lsls	r1, r1, #9
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	601a      	str	r2, [r3, #0]
 8003bc6:	e00b      	b.n	8003be0 <HAL_RCC_OscConfig+0xdc>
 8003bc8:	4b99      	ldr	r3, [pc, #612]	; (8003e30 <HAL_RCC_OscConfig+0x32c>)
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	4b98      	ldr	r3, [pc, #608]	; (8003e30 <HAL_RCC_OscConfig+0x32c>)
 8003bce:	4999      	ldr	r1, [pc, #612]	; (8003e34 <HAL_RCC_OscConfig+0x330>)
 8003bd0:	400a      	ands	r2, r1
 8003bd2:	601a      	str	r2, [r3, #0]
 8003bd4:	4b96      	ldr	r3, [pc, #600]	; (8003e30 <HAL_RCC_OscConfig+0x32c>)
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	4b95      	ldr	r3, [pc, #596]	; (8003e30 <HAL_RCC_OscConfig+0x32c>)
 8003bda:	4997      	ldr	r1, [pc, #604]	; (8003e38 <HAL_RCC_OscConfig+0x334>)
 8003bdc:	400a      	ands	r2, r1
 8003bde:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d014      	beq.n	8003c12 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be8:	f7fe ff7a 	bl	8002ae0 <HAL_GetTick>
 8003bec:	0003      	movs	r3, r0
 8003bee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bf0:	e008      	b.n	8003c04 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bf2:	f7fe ff75 	bl	8002ae0 <HAL_GetTick>
 8003bf6:	0002      	movs	r2, r0
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	2b64      	cmp	r3, #100	; 0x64
 8003bfe:	d901      	bls.n	8003c04 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e28a      	b.n	800411a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c04:	4b8a      	ldr	r3, [pc, #552]	; (8003e30 <HAL_RCC_OscConfig+0x32c>)
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	2380      	movs	r3, #128	; 0x80
 8003c0a:	029b      	lsls	r3, r3, #10
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	d0f0      	beq.n	8003bf2 <HAL_RCC_OscConfig+0xee>
 8003c10:	e015      	b.n	8003c3e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c12:	f7fe ff65 	bl	8002ae0 <HAL_GetTick>
 8003c16:	0003      	movs	r3, r0
 8003c18:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c1a:	e008      	b.n	8003c2e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c1c:	f7fe ff60 	bl	8002ae0 <HAL_GetTick>
 8003c20:	0002      	movs	r2, r0
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	2b64      	cmp	r3, #100	; 0x64
 8003c28:	d901      	bls.n	8003c2e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e275      	b.n	800411a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c2e:	4b80      	ldr	r3, [pc, #512]	; (8003e30 <HAL_RCC_OscConfig+0x32c>)
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	2380      	movs	r3, #128	; 0x80
 8003c34:	029b      	lsls	r3, r3, #10
 8003c36:	4013      	ands	r3, r2
 8003c38:	d1f0      	bne.n	8003c1c <HAL_RCC_OscConfig+0x118>
 8003c3a:	e000      	b.n	8003c3e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c3c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2202      	movs	r2, #2
 8003c44:	4013      	ands	r3, r2
 8003c46:	d100      	bne.n	8003c4a <HAL_RCC_OscConfig+0x146>
 8003c48:	e069      	b.n	8003d1e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003c4a:	4b79      	ldr	r3, [pc, #484]	; (8003e30 <HAL_RCC_OscConfig+0x32c>)
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	220c      	movs	r2, #12
 8003c50:	4013      	ands	r3, r2
 8003c52:	d00b      	beq.n	8003c6c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003c54:	4b76      	ldr	r3, [pc, #472]	; (8003e30 <HAL_RCC_OscConfig+0x32c>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	220c      	movs	r2, #12
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	2b08      	cmp	r3, #8
 8003c5e:	d11c      	bne.n	8003c9a <HAL_RCC_OscConfig+0x196>
 8003c60:	4b73      	ldr	r3, [pc, #460]	; (8003e30 <HAL_RCC_OscConfig+0x32c>)
 8003c62:	685a      	ldr	r2, [r3, #4]
 8003c64:	2380      	movs	r3, #128	; 0x80
 8003c66:	025b      	lsls	r3, r3, #9
 8003c68:	4013      	ands	r3, r2
 8003c6a:	d116      	bne.n	8003c9a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c6c:	4b70      	ldr	r3, [pc, #448]	; (8003e30 <HAL_RCC_OscConfig+0x32c>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2202      	movs	r2, #2
 8003c72:	4013      	ands	r3, r2
 8003c74:	d005      	beq.n	8003c82 <HAL_RCC_OscConfig+0x17e>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d001      	beq.n	8003c82 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e24b      	b.n	800411a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c82:	4b6b      	ldr	r3, [pc, #428]	; (8003e30 <HAL_RCC_OscConfig+0x32c>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	22f8      	movs	r2, #248	; 0xf8
 8003c88:	4393      	bics	r3, r2
 8003c8a:	0019      	movs	r1, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	691b      	ldr	r3, [r3, #16]
 8003c90:	00da      	lsls	r2, r3, #3
 8003c92:	4b67      	ldr	r3, [pc, #412]	; (8003e30 <HAL_RCC_OscConfig+0x32c>)
 8003c94:	430a      	orrs	r2, r1
 8003c96:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c98:	e041      	b.n	8003d1e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d024      	beq.n	8003cec <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ca2:	4b63      	ldr	r3, [pc, #396]	; (8003e30 <HAL_RCC_OscConfig+0x32c>)
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	4b62      	ldr	r3, [pc, #392]	; (8003e30 <HAL_RCC_OscConfig+0x32c>)
 8003ca8:	2101      	movs	r1, #1
 8003caa:	430a      	orrs	r2, r1
 8003cac:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cae:	f7fe ff17 	bl	8002ae0 <HAL_GetTick>
 8003cb2:	0003      	movs	r3, r0
 8003cb4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cb6:	e008      	b.n	8003cca <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cb8:	f7fe ff12 	bl	8002ae0 <HAL_GetTick>
 8003cbc:	0002      	movs	r2, r0
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e227      	b.n	800411a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cca:	4b59      	ldr	r3, [pc, #356]	; (8003e30 <HAL_RCC_OscConfig+0x32c>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2202      	movs	r2, #2
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	d0f1      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cd4:	4b56      	ldr	r3, [pc, #344]	; (8003e30 <HAL_RCC_OscConfig+0x32c>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	22f8      	movs	r2, #248	; 0xf8
 8003cda:	4393      	bics	r3, r2
 8003cdc:	0019      	movs	r1, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	00da      	lsls	r2, r3, #3
 8003ce4:	4b52      	ldr	r3, [pc, #328]	; (8003e30 <HAL_RCC_OscConfig+0x32c>)
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	601a      	str	r2, [r3, #0]
 8003cea:	e018      	b.n	8003d1e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cec:	4b50      	ldr	r3, [pc, #320]	; (8003e30 <HAL_RCC_OscConfig+0x32c>)
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	4b4f      	ldr	r3, [pc, #316]	; (8003e30 <HAL_RCC_OscConfig+0x32c>)
 8003cf2:	2101      	movs	r1, #1
 8003cf4:	438a      	bics	r2, r1
 8003cf6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf8:	f7fe fef2 	bl	8002ae0 <HAL_GetTick>
 8003cfc:	0003      	movs	r3, r0
 8003cfe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d00:	e008      	b.n	8003d14 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d02:	f7fe feed 	bl	8002ae0 <HAL_GetTick>
 8003d06:	0002      	movs	r2, r0
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d901      	bls.n	8003d14 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e202      	b.n	800411a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d14:	4b46      	ldr	r3, [pc, #280]	; (8003e30 <HAL_RCC_OscConfig+0x32c>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2202      	movs	r2, #2
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	d1f1      	bne.n	8003d02 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2208      	movs	r2, #8
 8003d24:	4013      	ands	r3, r2
 8003d26:	d036      	beq.n	8003d96 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	69db      	ldr	r3, [r3, #28]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d019      	beq.n	8003d64 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d30:	4b3f      	ldr	r3, [pc, #252]	; (8003e30 <HAL_RCC_OscConfig+0x32c>)
 8003d32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d34:	4b3e      	ldr	r3, [pc, #248]	; (8003e30 <HAL_RCC_OscConfig+0x32c>)
 8003d36:	2101      	movs	r1, #1
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d3c:	f7fe fed0 	bl	8002ae0 <HAL_GetTick>
 8003d40:	0003      	movs	r3, r0
 8003d42:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d44:	e008      	b.n	8003d58 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d46:	f7fe fecb 	bl	8002ae0 <HAL_GetTick>
 8003d4a:	0002      	movs	r2, r0
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d901      	bls.n	8003d58 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e1e0      	b.n	800411a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d58:	4b35      	ldr	r3, [pc, #212]	; (8003e30 <HAL_RCC_OscConfig+0x32c>)
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5c:	2202      	movs	r2, #2
 8003d5e:	4013      	ands	r3, r2
 8003d60:	d0f1      	beq.n	8003d46 <HAL_RCC_OscConfig+0x242>
 8003d62:	e018      	b.n	8003d96 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d64:	4b32      	ldr	r3, [pc, #200]	; (8003e30 <HAL_RCC_OscConfig+0x32c>)
 8003d66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d68:	4b31      	ldr	r3, [pc, #196]	; (8003e30 <HAL_RCC_OscConfig+0x32c>)
 8003d6a:	2101      	movs	r1, #1
 8003d6c:	438a      	bics	r2, r1
 8003d6e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d70:	f7fe feb6 	bl	8002ae0 <HAL_GetTick>
 8003d74:	0003      	movs	r3, r0
 8003d76:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d78:	e008      	b.n	8003d8c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d7a:	f7fe feb1 	bl	8002ae0 <HAL_GetTick>
 8003d7e:	0002      	movs	r2, r0
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d901      	bls.n	8003d8c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e1c6      	b.n	800411a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d8c:	4b28      	ldr	r3, [pc, #160]	; (8003e30 <HAL_RCC_OscConfig+0x32c>)
 8003d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d90:	2202      	movs	r2, #2
 8003d92:	4013      	ands	r3, r2
 8003d94:	d1f1      	bne.n	8003d7a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2204      	movs	r2, #4
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	d100      	bne.n	8003da2 <HAL_RCC_OscConfig+0x29e>
 8003da0:	e0b4      	b.n	8003f0c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003da2:	201f      	movs	r0, #31
 8003da4:	183b      	adds	r3, r7, r0
 8003da6:	2200      	movs	r2, #0
 8003da8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003daa:	4b21      	ldr	r3, [pc, #132]	; (8003e30 <HAL_RCC_OscConfig+0x32c>)
 8003dac:	69da      	ldr	r2, [r3, #28]
 8003dae:	2380      	movs	r3, #128	; 0x80
 8003db0:	055b      	lsls	r3, r3, #21
 8003db2:	4013      	ands	r3, r2
 8003db4:	d110      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003db6:	4b1e      	ldr	r3, [pc, #120]	; (8003e30 <HAL_RCC_OscConfig+0x32c>)
 8003db8:	69da      	ldr	r2, [r3, #28]
 8003dba:	4b1d      	ldr	r3, [pc, #116]	; (8003e30 <HAL_RCC_OscConfig+0x32c>)
 8003dbc:	2180      	movs	r1, #128	; 0x80
 8003dbe:	0549      	lsls	r1, r1, #21
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	61da      	str	r2, [r3, #28]
 8003dc4:	4b1a      	ldr	r3, [pc, #104]	; (8003e30 <HAL_RCC_OscConfig+0x32c>)
 8003dc6:	69da      	ldr	r2, [r3, #28]
 8003dc8:	2380      	movs	r3, #128	; 0x80
 8003dca:	055b      	lsls	r3, r3, #21
 8003dcc:	4013      	ands	r3, r2
 8003dce:	60fb      	str	r3, [r7, #12]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003dd2:	183b      	adds	r3, r7, r0
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dd8:	4b18      	ldr	r3, [pc, #96]	; (8003e3c <HAL_RCC_OscConfig+0x338>)
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	2380      	movs	r3, #128	; 0x80
 8003dde:	005b      	lsls	r3, r3, #1
 8003de0:	4013      	ands	r3, r2
 8003de2:	d11a      	bne.n	8003e1a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003de4:	4b15      	ldr	r3, [pc, #84]	; (8003e3c <HAL_RCC_OscConfig+0x338>)
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	4b14      	ldr	r3, [pc, #80]	; (8003e3c <HAL_RCC_OscConfig+0x338>)
 8003dea:	2180      	movs	r1, #128	; 0x80
 8003dec:	0049      	lsls	r1, r1, #1
 8003dee:	430a      	orrs	r2, r1
 8003df0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003df2:	f7fe fe75 	bl	8002ae0 <HAL_GetTick>
 8003df6:	0003      	movs	r3, r0
 8003df8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dfa:	e008      	b.n	8003e0e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dfc:	f7fe fe70 	bl	8002ae0 <HAL_GetTick>
 8003e00:	0002      	movs	r2, r0
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b64      	cmp	r3, #100	; 0x64
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e185      	b.n	800411a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e0e:	4b0b      	ldr	r3, [pc, #44]	; (8003e3c <HAL_RCC_OscConfig+0x338>)
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	2380      	movs	r3, #128	; 0x80
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	4013      	ands	r3, r2
 8003e18:	d0f0      	beq.n	8003dfc <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d10e      	bne.n	8003e40 <HAL_RCC_OscConfig+0x33c>
 8003e22:	4b03      	ldr	r3, [pc, #12]	; (8003e30 <HAL_RCC_OscConfig+0x32c>)
 8003e24:	6a1a      	ldr	r2, [r3, #32]
 8003e26:	4b02      	ldr	r3, [pc, #8]	; (8003e30 <HAL_RCC_OscConfig+0x32c>)
 8003e28:	2101      	movs	r1, #1
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	621a      	str	r2, [r3, #32]
 8003e2e:	e035      	b.n	8003e9c <HAL_RCC_OscConfig+0x398>
 8003e30:	40021000 	.word	0x40021000
 8003e34:	fffeffff 	.word	0xfffeffff
 8003e38:	fffbffff 	.word	0xfffbffff
 8003e3c:	40007000 	.word	0x40007000
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d10c      	bne.n	8003e62 <HAL_RCC_OscConfig+0x35e>
 8003e48:	4bb6      	ldr	r3, [pc, #728]	; (8004124 <HAL_RCC_OscConfig+0x620>)
 8003e4a:	6a1a      	ldr	r2, [r3, #32]
 8003e4c:	4bb5      	ldr	r3, [pc, #724]	; (8004124 <HAL_RCC_OscConfig+0x620>)
 8003e4e:	2101      	movs	r1, #1
 8003e50:	438a      	bics	r2, r1
 8003e52:	621a      	str	r2, [r3, #32]
 8003e54:	4bb3      	ldr	r3, [pc, #716]	; (8004124 <HAL_RCC_OscConfig+0x620>)
 8003e56:	6a1a      	ldr	r2, [r3, #32]
 8003e58:	4bb2      	ldr	r3, [pc, #712]	; (8004124 <HAL_RCC_OscConfig+0x620>)
 8003e5a:	2104      	movs	r1, #4
 8003e5c:	438a      	bics	r2, r1
 8003e5e:	621a      	str	r2, [r3, #32]
 8003e60:	e01c      	b.n	8003e9c <HAL_RCC_OscConfig+0x398>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	2b05      	cmp	r3, #5
 8003e68:	d10c      	bne.n	8003e84 <HAL_RCC_OscConfig+0x380>
 8003e6a:	4bae      	ldr	r3, [pc, #696]	; (8004124 <HAL_RCC_OscConfig+0x620>)
 8003e6c:	6a1a      	ldr	r2, [r3, #32]
 8003e6e:	4bad      	ldr	r3, [pc, #692]	; (8004124 <HAL_RCC_OscConfig+0x620>)
 8003e70:	2104      	movs	r1, #4
 8003e72:	430a      	orrs	r2, r1
 8003e74:	621a      	str	r2, [r3, #32]
 8003e76:	4bab      	ldr	r3, [pc, #684]	; (8004124 <HAL_RCC_OscConfig+0x620>)
 8003e78:	6a1a      	ldr	r2, [r3, #32]
 8003e7a:	4baa      	ldr	r3, [pc, #680]	; (8004124 <HAL_RCC_OscConfig+0x620>)
 8003e7c:	2101      	movs	r1, #1
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	621a      	str	r2, [r3, #32]
 8003e82:	e00b      	b.n	8003e9c <HAL_RCC_OscConfig+0x398>
 8003e84:	4ba7      	ldr	r3, [pc, #668]	; (8004124 <HAL_RCC_OscConfig+0x620>)
 8003e86:	6a1a      	ldr	r2, [r3, #32]
 8003e88:	4ba6      	ldr	r3, [pc, #664]	; (8004124 <HAL_RCC_OscConfig+0x620>)
 8003e8a:	2101      	movs	r1, #1
 8003e8c:	438a      	bics	r2, r1
 8003e8e:	621a      	str	r2, [r3, #32]
 8003e90:	4ba4      	ldr	r3, [pc, #656]	; (8004124 <HAL_RCC_OscConfig+0x620>)
 8003e92:	6a1a      	ldr	r2, [r3, #32]
 8003e94:	4ba3      	ldr	r3, [pc, #652]	; (8004124 <HAL_RCC_OscConfig+0x620>)
 8003e96:	2104      	movs	r1, #4
 8003e98:	438a      	bics	r2, r1
 8003e9a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d014      	beq.n	8003ece <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ea4:	f7fe fe1c 	bl	8002ae0 <HAL_GetTick>
 8003ea8:	0003      	movs	r3, r0
 8003eaa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eac:	e009      	b.n	8003ec2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eae:	f7fe fe17 	bl	8002ae0 <HAL_GetTick>
 8003eb2:	0002      	movs	r2, r0
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	4a9b      	ldr	r2, [pc, #620]	; (8004128 <HAL_RCC_OscConfig+0x624>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e12b      	b.n	800411a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ec2:	4b98      	ldr	r3, [pc, #608]	; (8004124 <HAL_RCC_OscConfig+0x620>)
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	4013      	ands	r3, r2
 8003eca:	d0f0      	beq.n	8003eae <HAL_RCC_OscConfig+0x3aa>
 8003ecc:	e013      	b.n	8003ef6 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ece:	f7fe fe07 	bl	8002ae0 <HAL_GetTick>
 8003ed2:	0003      	movs	r3, r0
 8003ed4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ed6:	e009      	b.n	8003eec <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ed8:	f7fe fe02 	bl	8002ae0 <HAL_GetTick>
 8003edc:	0002      	movs	r2, r0
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	4a91      	ldr	r2, [pc, #580]	; (8004128 <HAL_RCC_OscConfig+0x624>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d901      	bls.n	8003eec <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e116      	b.n	800411a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eec:	4b8d      	ldr	r3, [pc, #564]	; (8004124 <HAL_RCC_OscConfig+0x620>)
 8003eee:	6a1b      	ldr	r3, [r3, #32]
 8003ef0:	2202      	movs	r2, #2
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	d1f0      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003ef6:	231f      	movs	r3, #31
 8003ef8:	18fb      	adds	r3, r7, r3
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d105      	bne.n	8003f0c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f00:	4b88      	ldr	r3, [pc, #544]	; (8004124 <HAL_RCC_OscConfig+0x620>)
 8003f02:	69da      	ldr	r2, [r3, #28]
 8003f04:	4b87      	ldr	r3, [pc, #540]	; (8004124 <HAL_RCC_OscConfig+0x620>)
 8003f06:	4989      	ldr	r1, [pc, #548]	; (800412c <HAL_RCC_OscConfig+0x628>)
 8003f08:	400a      	ands	r2, r1
 8003f0a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2210      	movs	r2, #16
 8003f12:	4013      	ands	r3, r2
 8003f14:	d063      	beq.n	8003fde <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d12a      	bne.n	8003f74 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003f1e:	4b81      	ldr	r3, [pc, #516]	; (8004124 <HAL_RCC_OscConfig+0x620>)
 8003f20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f22:	4b80      	ldr	r3, [pc, #512]	; (8004124 <HAL_RCC_OscConfig+0x620>)
 8003f24:	2104      	movs	r1, #4
 8003f26:	430a      	orrs	r2, r1
 8003f28:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003f2a:	4b7e      	ldr	r3, [pc, #504]	; (8004124 <HAL_RCC_OscConfig+0x620>)
 8003f2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f2e:	4b7d      	ldr	r3, [pc, #500]	; (8004124 <HAL_RCC_OscConfig+0x620>)
 8003f30:	2101      	movs	r1, #1
 8003f32:	430a      	orrs	r2, r1
 8003f34:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f36:	f7fe fdd3 	bl	8002ae0 <HAL_GetTick>
 8003f3a:	0003      	movs	r3, r0
 8003f3c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003f3e:	e008      	b.n	8003f52 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003f40:	f7fe fdce 	bl	8002ae0 <HAL_GetTick>
 8003f44:	0002      	movs	r2, r0
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e0e3      	b.n	800411a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003f52:	4b74      	ldr	r3, [pc, #464]	; (8004124 <HAL_RCC_OscConfig+0x620>)
 8003f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f56:	2202      	movs	r2, #2
 8003f58:	4013      	ands	r3, r2
 8003f5a:	d0f1      	beq.n	8003f40 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003f5c:	4b71      	ldr	r3, [pc, #452]	; (8004124 <HAL_RCC_OscConfig+0x620>)
 8003f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f60:	22f8      	movs	r2, #248	; 0xf8
 8003f62:	4393      	bics	r3, r2
 8003f64:	0019      	movs	r1, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	00da      	lsls	r2, r3, #3
 8003f6c:	4b6d      	ldr	r3, [pc, #436]	; (8004124 <HAL_RCC_OscConfig+0x620>)
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	635a      	str	r2, [r3, #52]	; 0x34
 8003f72:	e034      	b.n	8003fde <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	3305      	adds	r3, #5
 8003f7a:	d111      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003f7c:	4b69      	ldr	r3, [pc, #420]	; (8004124 <HAL_RCC_OscConfig+0x620>)
 8003f7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f80:	4b68      	ldr	r3, [pc, #416]	; (8004124 <HAL_RCC_OscConfig+0x620>)
 8003f82:	2104      	movs	r1, #4
 8003f84:	438a      	bics	r2, r1
 8003f86:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003f88:	4b66      	ldr	r3, [pc, #408]	; (8004124 <HAL_RCC_OscConfig+0x620>)
 8003f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f8c:	22f8      	movs	r2, #248	; 0xf8
 8003f8e:	4393      	bics	r3, r2
 8003f90:	0019      	movs	r1, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	00da      	lsls	r2, r3, #3
 8003f98:	4b62      	ldr	r3, [pc, #392]	; (8004124 <HAL_RCC_OscConfig+0x620>)
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	635a      	str	r2, [r3, #52]	; 0x34
 8003f9e:	e01e      	b.n	8003fde <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003fa0:	4b60      	ldr	r3, [pc, #384]	; (8004124 <HAL_RCC_OscConfig+0x620>)
 8003fa2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fa4:	4b5f      	ldr	r3, [pc, #380]	; (8004124 <HAL_RCC_OscConfig+0x620>)
 8003fa6:	2104      	movs	r1, #4
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003fac:	4b5d      	ldr	r3, [pc, #372]	; (8004124 <HAL_RCC_OscConfig+0x620>)
 8003fae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fb0:	4b5c      	ldr	r3, [pc, #368]	; (8004124 <HAL_RCC_OscConfig+0x620>)
 8003fb2:	2101      	movs	r1, #1
 8003fb4:	438a      	bics	r2, r1
 8003fb6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fb8:	f7fe fd92 	bl	8002ae0 <HAL_GetTick>
 8003fbc:	0003      	movs	r3, r0
 8003fbe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003fc0:	e008      	b.n	8003fd4 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003fc2:	f7fe fd8d 	bl	8002ae0 <HAL_GetTick>
 8003fc6:	0002      	movs	r2, r0
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d901      	bls.n	8003fd4 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e0a2      	b.n	800411a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003fd4:	4b53      	ldr	r3, [pc, #332]	; (8004124 <HAL_RCC_OscConfig+0x620>)
 8003fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fd8:	2202      	movs	r2, #2
 8003fda:	4013      	ands	r3, r2
 8003fdc:	d1f1      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d100      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x4e4>
 8003fe6:	e097      	b.n	8004118 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fe8:	4b4e      	ldr	r3, [pc, #312]	; (8004124 <HAL_RCC_OscConfig+0x620>)
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	220c      	movs	r2, #12
 8003fee:	4013      	ands	r3, r2
 8003ff0:	2b08      	cmp	r3, #8
 8003ff2:	d100      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x4f2>
 8003ff4:	e06b      	b.n	80040ce <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d14c      	bne.n	8004098 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ffe:	4b49      	ldr	r3, [pc, #292]	; (8004124 <HAL_RCC_OscConfig+0x620>)
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	4b48      	ldr	r3, [pc, #288]	; (8004124 <HAL_RCC_OscConfig+0x620>)
 8004004:	494a      	ldr	r1, [pc, #296]	; (8004130 <HAL_RCC_OscConfig+0x62c>)
 8004006:	400a      	ands	r2, r1
 8004008:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800400a:	f7fe fd69 	bl	8002ae0 <HAL_GetTick>
 800400e:	0003      	movs	r3, r0
 8004010:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004012:	e008      	b.n	8004026 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004014:	f7fe fd64 	bl	8002ae0 <HAL_GetTick>
 8004018:	0002      	movs	r2, r0
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d901      	bls.n	8004026 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e079      	b.n	800411a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004026:	4b3f      	ldr	r3, [pc, #252]	; (8004124 <HAL_RCC_OscConfig+0x620>)
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	2380      	movs	r3, #128	; 0x80
 800402c:	049b      	lsls	r3, r3, #18
 800402e:	4013      	ands	r3, r2
 8004030:	d1f0      	bne.n	8004014 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004032:	4b3c      	ldr	r3, [pc, #240]	; (8004124 <HAL_RCC_OscConfig+0x620>)
 8004034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004036:	220f      	movs	r2, #15
 8004038:	4393      	bics	r3, r2
 800403a:	0019      	movs	r1, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004040:	4b38      	ldr	r3, [pc, #224]	; (8004124 <HAL_RCC_OscConfig+0x620>)
 8004042:	430a      	orrs	r2, r1
 8004044:	62da      	str	r2, [r3, #44]	; 0x2c
 8004046:	4b37      	ldr	r3, [pc, #220]	; (8004124 <HAL_RCC_OscConfig+0x620>)
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	4a3a      	ldr	r2, [pc, #232]	; (8004134 <HAL_RCC_OscConfig+0x630>)
 800404c:	4013      	ands	r3, r2
 800404e:	0019      	movs	r1, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004058:	431a      	orrs	r2, r3
 800405a:	4b32      	ldr	r3, [pc, #200]	; (8004124 <HAL_RCC_OscConfig+0x620>)
 800405c:	430a      	orrs	r2, r1
 800405e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004060:	4b30      	ldr	r3, [pc, #192]	; (8004124 <HAL_RCC_OscConfig+0x620>)
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	4b2f      	ldr	r3, [pc, #188]	; (8004124 <HAL_RCC_OscConfig+0x620>)
 8004066:	2180      	movs	r1, #128	; 0x80
 8004068:	0449      	lsls	r1, r1, #17
 800406a:	430a      	orrs	r2, r1
 800406c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800406e:	f7fe fd37 	bl	8002ae0 <HAL_GetTick>
 8004072:	0003      	movs	r3, r0
 8004074:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004076:	e008      	b.n	800408a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004078:	f7fe fd32 	bl	8002ae0 <HAL_GetTick>
 800407c:	0002      	movs	r2, r0
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	2b02      	cmp	r3, #2
 8004084:	d901      	bls.n	800408a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e047      	b.n	800411a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800408a:	4b26      	ldr	r3, [pc, #152]	; (8004124 <HAL_RCC_OscConfig+0x620>)
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	2380      	movs	r3, #128	; 0x80
 8004090:	049b      	lsls	r3, r3, #18
 8004092:	4013      	ands	r3, r2
 8004094:	d0f0      	beq.n	8004078 <HAL_RCC_OscConfig+0x574>
 8004096:	e03f      	b.n	8004118 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004098:	4b22      	ldr	r3, [pc, #136]	; (8004124 <HAL_RCC_OscConfig+0x620>)
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	4b21      	ldr	r3, [pc, #132]	; (8004124 <HAL_RCC_OscConfig+0x620>)
 800409e:	4924      	ldr	r1, [pc, #144]	; (8004130 <HAL_RCC_OscConfig+0x62c>)
 80040a0:	400a      	ands	r2, r1
 80040a2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a4:	f7fe fd1c 	bl	8002ae0 <HAL_GetTick>
 80040a8:	0003      	movs	r3, r0
 80040aa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040ac:	e008      	b.n	80040c0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040ae:	f7fe fd17 	bl	8002ae0 <HAL_GetTick>
 80040b2:	0002      	movs	r2, r0
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d901      	bls.n	80040c0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e02c      	b.n	800411a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040c0:	4b18      	ldr	r3, [pc, #96]	; (8004124 <HAL_RCC_OscConfig+0x620>)
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	2380      	movs	r3, #128	; 0x80
 80040c6:	049b      	lsls	r3, r3, #18
 80040c8:	4013      	ands	r3, r2
 80040ca:	d1f0      	bne.n	80040ae <HAL_RCC_OscConfig+0x5aa>
 80040cc:	e024      	b.n	8004118 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d101      	bne.n	80040da <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e01f      	b.n	800411a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80040da:	4b12      	ldr	r3, [pc, #72]	; (8004124 <HAL_RCC_OscConfig+0x620>)
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80040e0:	4b10      	ldr	r3, [pc, #64]	; (8004124 <HAL_RCC_OscConfig+0x620>)
 80040e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	2380      	movs	r3, #128	; 0x80
 80040ea:	025b      	lsls	r3, r3, #9
 80040ec:	401a      	ands	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d10e      	bne.n	8004114 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	220f      	movs	r2, #15
 80040fa:	401a      	ands	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004100:	429a      	cmp	r2, r3
 8004102:	d107      	bne.n	8004114 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004104:	697a      	ldr	r2, [r7, #20]
 8004106:	23f0      	movs	r3, #240	; 0xf0
 8004108:	039b      	lsls	r3, r3, #14
 800410a:	401a      	ands	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004110:	429a      	cmp	r2, r3
 8004112:	d001      	beq.n	8004118 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e000      	b.n	800411a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	0018      	movs	r0, r3
 800411c:	46bd      	mov	sp, r7
 800411e:	b008      	add	sp, #32
 8004120:	bd80      	pop	{r7, pc}
 8004122:	46c0      	nop			; (mov r8, r8)
 8004124:	40021000 	.word	0x40021000
 8004128:	00001388 	.word	0x00001388
 800412c:	efffffff 	.word	0xefffffff
 8004130:	feffffff 	.word	0xfeffffff
 8004134:	ffc2ffff 	.word	0xffc2ffff

08004138 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d101      	bne.n	800414c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e0b3      	b.n	80042b4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800414c:	4b5b      	ldr	r3, [pc, #364]	; (80042bc <HAL_RCC_ClockConfig+0x184>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2201      	movs	r2, #1
 8004152:	4013      	ands	r3, r2
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	429a      	cmp	r2, r3
 8004158:	d911      	bls.n	800417e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800415a:	4b58      	ldr	r3, [pc, #352]	; (80042bc <HAL_RCC_ClockConfig+0x184>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2201      	movs	r2, #1
 8004160:	4393      	bics	r3, r2
 8004162:	0019      	movs	r1, r3
 8004164:	4b55      	ldr	r3, [pc, #340]	; (80042bc <HAL_RCC_ClockConfig+0x184>)
 8004166:	683a      	ldr	r2, [r7, #0]
 8004168:	430a      	orrs	r2, r1
 800416a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800416c:	4b53      	ldr	r3, [pc, #332]	; (80042bc <HAL_RCC_ClockConfig+0x184>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2201      	movs	r2, #1
 8004172:	4013      	ands	r3, r2
 8004174:	683a      	ldr	r2, [r7, #0]
 8004176:	429a      	cmp	r2, r3
 8004178:	d001      	beq.n	800417e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e09a      	b.n	80042b4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2202      	movs	r2, #2
 8004184:	4013      	ands	r3, r2
 8004186:	d015      	beq.n	80041b4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2204      	movs	r2, #4
 800418e:	4013      	ands	r3, r2
 8004190:	d006      	beq.n	80041a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004192:	4b4b      	ldr	r3, [pc, #300]	; (80042c0 <HAL_RCC_ClockConfig+0x188>)
 8004194:	685a      	ldr	r2, [r3, #4]
 8004196:	4b4a      	ldr	r3, [pc, #296]	; (80042c0 <HAL_RCC_ClockConfig+0x188>)
 8004198:	21e0      	movs	r1, #224	; 0xe0
 800419a:	00c9      	lsls	r1, r1, #3
 800419c:	430a      	orrs	r2, r1
 800419e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041a0:	4b47      	ldr	r3, [pc, #284]	; (80042c0 <HAL_RCC_ClockConfig+0x188>)
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	22f0      	movs	r2, #240	; 0xf0
 80041a6:	4393      	bics	r3, r2
 80041a8:	0019      	movs	r1, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	689a      	ldr	r2, [r3, #8]
 80041ae:	4b44      	ldr	r3, [pc, #272]	; (80042c0 <HAL_RCC_ClockConfig+0x188>)
 80041b0:	430a      	orrs	r2, r1
 80041b2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2201      	movs	r2, #1
 80041ba:	4013      	ands	r3, r2
 80041bc:	d040      	beq.n	8004240 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d107      	bne.n	80041d6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041c6:	4b3e      	ldr	r3, [pc, #248]	; (80042c0 <HAL_RCC_ClockConfig+0x188>)
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	2380      	movs	r3, #128	; 0x80
 80041cc:	029b      	lsls	r3, r3, #10
 80041ce:	4013      	ands	r3, r2
 80041d0:	d114      	bne.n	80041fc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e06e      	b.n	80042b4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d107      	bne.n	80041ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041de:	4b38      	ldr	r3, [pc, #224]	; (80042c0 <HAL_RCC_ClockConfig+0x188>)
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	2380      	movs	r3, #128	; 0x80
 80041e4:	049b      	lsls	r3, r3, #18
 80041e6:	4013      	ands	r3, r2
 80041e8:	d108      	bne.n	80041fc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e062      	b.n	80042b4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ee:	4b34      	ldr	r3, [pc, #208]	; (80042c0 <HAL_RCC_ClockConfig+0x188>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2202      	movs	r2, #2
 80041f4:	4013      	ands	r3, r2
 80041f6:	d101      	bne.n	80041fc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e05b      	b.n	80042b4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041fc:	4b30      	ldr	r3, [pc, #192]	; (80042c0 <HAL_RCC_ClockConfig+0x188>)
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	2203      	movs	r2, #3
 8004202:	4393      	bics	r3, r2
 8004204:	0019      	movs	r1, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685a      	ldr	r2, [r3, #4]
 800420a:	4b2d      	ldr	r3, [pc, #180]	; (80042c0 <HAL_RCC_ClockConfig+0x188>)
 800420c:	430a      	orrs	r2, r1
 800420e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004210:	f7fe fc66 	bl	8002ae0 <HAL_GetTick>
 8004214:	0003      	movs	r3, r0
 8004216:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004218:	e009      	b.n	800422e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800421a:	f7fe fc61 	bl	8002ae0 <HAL_GetTick>
 800421e:	0002      	movs	r2, r0
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	4a27      	ldr	r2, [pc, #156]	; (80042c4 <HAL_RCC_ClockConfig+0x18c>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d901      	bls.n	800422e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e042      	b.n	80042b4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800422e:	4b24      	ldr	r3, [pc, #144]	; (80042c0 <HAL_RCC_ClockConfig+0x188>)
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	220c      	movs	r2, #12
 8004234:	401a      	ands	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	429a      	cmp	r2, r3
 800423e:	d1ec      	bne.n	800421a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004240:	4b1e      	ldr	r3, [pc, #120]	; (80042bc <HAL_RCC_ClockConfig+0x184>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2201      	movs	r2, #1
 8004246:	4013      	ands	r3, r2
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	429a      	cmp	r2, r3
 800424c:	d211      	bcs.n	8004272 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800424e:	4b1b      	ldr	r3, [pc, #108]	; (80042bc <HAL_RCC_ClockConfig+0x184>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2201      	movs	r2, #1
 8004254:	4393      	bics	r3, r2
 8004256:	0019      	movs	r1, r3
 8004258:	4b18      	ldr	r3, [pc, #96]	; (80042bc <HAL_RCC_ClockConfig+0x184>)
 800425a:	683a      	ldr	r2, [r7, #0]
 800425c:	430a      	orrs	r2, r1
 800425e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004260:	4b16      	ldr	r3, [pc, #88]	; (80042bc <HAL_RCC_ClockConfig+0x184>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2201      	movs	r2, #1
 8004266:	4013      	ands	r3, r2
 8004268:	683a      	ldr	r2, [r7, #0]
 800426a:	429a      	cmp	r2, r3
 800426c:	d001      	beq.n	8004272 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e020      	b.n	80042b4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2204      	movs	r2, #4
 8004278:	4013      	ands	r3, r2
 800427a:	d009      	beq.n	8004290 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800427c:	4b10      	ldr	r3, [pc, #64]	; (80042c0 <HAL_RCC_ClockConfig+0x188>)
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	4a11      	ldr	r2, [pc, #68]	; (80042c8 <HAL_RCC_ClockConfig+0x190>)
 8004282:	4013      	ands	r3, r2
 8004284:	0019      	movs	r1, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	68da      	ldr	r2, [r3, #12]
 800428a:	4b0d      	ldr	r3, [pc, #52]	; (80042c0 <HAL_RCC_ClockConfig+0x188>)
 800428c:	430a      	orrs	r2, r1
 800428e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004290:	f000 f820 	bl	80042d4 <HAL_RCC_GetSysClockFreq>
 8004294:	0001      	movs	r1, r0
 8004296:	4b0a      	ldr	r3, [pc, #40]	; (80042c0 <HAL_RCC_ClockConfig+0x188>)
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	091b      	lsrs	r3, r3, #4
 800429c:	220f      	movs	r2, #15
 800429e:	4013      	ands	r3, r2
 80042a0:	4a0a      	ldr	r2, [pc, #40]	; (80042cc <HAL_RCC_ClockConfig+0x194>)
 80042a2:	5cd3      	ldrb	r3, [r2, r3]
 80042a4:	000a      	movs	r2, r1
 80042a6:	40da      	lsrs	r2, r3
 80042a8:	4b09      	ldr	r3, [pc, #36]	; (80042d0 <HAL_RCC_ClockConfig+0x198>)
 80042aa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80042ac:	2000      	movs	r0, #0
 80042ae:	f7fe fbd1 	bl	8002a54 <HAL_InitTick>
  
  return HAL_OK;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	0018      	movs	r0, r3
 80042b6:	46bd      	mov	sp, r7
 80042b8:	b004      	add	sp, #16
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	40022000 	.word	0x40022000
 80042c0:	40021000 	.word	0x40021000
 80042c4:	00001388 	.word	0x00001388
 80042c8:	fffff8ff 	.word	0xfffff8ff
 80042cc:	08007e80 	.word	0x08007e80
 80042d0:	20000000 	.word	0x20000000

080042d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b086      	sub	sp, #24
 80042d8:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80042da:	2300      	movs	r3, #0
 80042dc:	60fb      	str	r3, [r7, #12]
 80042de:	2300      	movs	r3, #0
 80042e0:	60bb      	str	r3, [r7, #8]
 80042e2:	2300      	movs	r3, #0
 80042e4:	617b      	str	r3, [r7, #20]
 80042e6:	2300      	movs	r3, #0
 80042e8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80042ea:	2300      	movs	r3, #0
 80042ec:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80042ee:	4b20      	ldr	r3, [pc, #128]	; (8004370 <HAL_RCC_GetSysClockFreq+0x9c>)
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	220c      	movs	r2, #12
 80042f8:	4013      	ands	r3, r2
 80042fa:	2b04      	cmp	r3, #4
 80042fc:	d002      	beq.n	8004304 <HAL_RCC_GetSysClockFreq+0x30>
 80042fe:	2b08      	cmp	r3, #8
 8004300:	d003      	beq.n	800430a <HAL_RCC_GetSysClockFreq+0x36>
 8004302:	e02c      	b.n	800435e <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004304:	4b1b      	ldr	r3, [pc, #108]	; (8004374 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004306:	613b      	str	r3, [r7, #16]
      break;
 8004308:	e02c      	b.n	8004364 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	0c9b      	lsrs	r3, r3, #18
 800430e:	220f      	movs	r2, #15
 8004310:	4013      	ands	r3, r2
 8004312:	4a19      	ldr	r2, [pc, #100]	; (8004378 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004314:	5cd3      	ldrb	r3, [r2, r3]
 8004316:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004318:	4b15      	ldr	r3, [pc, #84]	; (8004370 <HAL_RCC_GetSysClockFreq+0x9c>)
 800431a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800431c:	220f      	movs	r2, #15
 800431e:	4013      	ands	r3, r2
 8004320:	4a16      	ldr	r2, [pc, #88]	; (800437c <HAL_RCC_GetSysClockFreq+0xa8>)
 8004322:	5cd3      	ldrb	r3, [r2, r3]
 8004324:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	2380      	movs	r3, #128	; 0x80
 800432a:	025b      	lsls	r3, r3, #9
 800432c:	4013      	ands	r3, r2
 800432e:	d009      	beq.n	8004344 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004330:	68b9      	ldr	r1, [r7, #8]
 8004332:	4810      	ldr	r0, [pc, #64]	; (8004374 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004334:	f7fb ff04 	bl	8000140 <__udivsi3>
 8004338:	0003      	movs	r3, r0
 800433a:	001a      	movs	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4353      	muls	r3, r2
 8004340:	617b      	str	r3, [r7, #20]
 8004342:	e009      	b.n	8004358 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004344:	6879      	ldr	r1, [r7, #4]
 8004346:	000a      	movs	r2, r1
 8004348:	0152      	lsls	r2, r2, #5
 800434a:	1a52      	subs	r2, r2, r1
 800434c:	0193      	lsls	r3, r2, #6
 800434e:	1a9b      	subs	r3, r3, r2
 8004350:	00db      	lsls	r3, r3, #3
 8004352:	185b      	adds	r3, r3, r1
 8004354:	021b      	lsls	r3, r3, #8
 8004356:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	613b      	str	r3, [r7, #16]
      break;
 800435c:	e002      	b.n	8004364 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800435e:	4b05      	ldr	r3, [pc, #20]	; (8004374 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004360:	613b      	str	r3, [r7, #16]
      break;
 8004362:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004364:	693b      	ldr	r3, [r7, #16]
}
 8004366:	0018      	movs	r0, r3
 8004368:	46bd      	mov	sp, r7
 800436a:	b006      	add	sp, #24
 800436c:	bd80      	pop	{r7, pc}
 800436e:	46c0      	nop			; (mov r8, r8)
 8004370:	40021000 	.word	0x40021000
 8004374:	007a1200 	.word	0x007a1200
 8004378:	08007e98 	.word	0x08007e98
 800437c:	08007ea8 	.word	0x08007ea8

08004380 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004384:	4b02      	ldr	r3, [pc, #8]	; (8004390 <HAL_RCC_GetHCLKFreq+0x10>)
 8004386:	681b      	ldr	r3, [r3, #0]
}
 8004388:	0018      	movs	r0, r3
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	46c0      	nop			; (mov r8, r8)
 8004390:	20000000 	.word	0x20000000

08004394 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004398:	f7ff fff2 	bl	8004380 <HAL_RCC_GetHCLKFreq>
 800439c:	0001      	movs	r1, r0
 800439e:	4b06      	ldr	r3, [pc, #24]	; (80043b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	0a1b      	lsrs	r3, r3, #8
 80043a4:	2207      	movs	r2, #7
 80043a6:	4013      	ands	r3, r2
 80043a8:	4a04      	ldr	r2, [pc, #16]	; (80043bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80043aa:	5cd3      	ldrb	r3, [r2, r3]
 80043ac:	40d9      	lsrs	r1, r3
 80043ae:	000b      	movs	r3, r1
}    
 80043b0:	0018      	movs	r0, r3
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	46c0      	nop			; (mov r8, r8)
 80043b8:	40021000 	.word	0x40021000
 80043bc:	08007e90 	.word	0x08007e90

080043c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b086      	sub	sp, #24
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043c8:	2300      	movs	r3, #0
 80043ca:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80043cc:	2300      	movs	r3, #0
 80043ce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	2380      	movs	r3, #128	; 0x80
 80043d6:	025b      	lsls	r3, r3, #9
 80043d8:	4013      	ands	r3, r2
 80043da:	d100      	bne.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80043dc:	e08e      	b.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80043de:	2017      	movs	r0, #23
 80043e0:	183b      	adds	r3, r7, r0
 80043e2:	2200      	movs	r2, #0
 80043e4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043e6:	4b5f      	ldr	r3, [pc, #380]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80043e8:	69da      	ldr	r2, [r3, #28]
 80043ea:	2380      	movs	r3, #128	; 0x80
 80043ec:	055b      	lsls	r3, r3, #21
 80043ee:	4013      	ands	r3, r2
 80043f0:	d110      	bne.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80043f2:	4b5c      	ldr	r3, [pc, #368]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80043f4:	69da      	ldr	r2, [r3, #28]
 80043f6:	4b5b      	ldr	r3, [pc, #364]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80043f8:	2180      	movs	r1, #128	; 0x80
 80043fa:	0549      	lsls	r1, r1, #21
 80043fc:	430a      	orrs	r2, r1
 80043fe:	61da      	str	r2, [r3, #28]
 8004400:	4b58      	ldr	r3, [pc, #352]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004402:	69da      	ldr	r2, [r3, #28]
 8004404:	2380      	movs	r3, #128	; 0x80
 8004406:	055b      	lsls	r3, r3, #21
 8004408:	4013      	ands	r3, r2
 800440a:	60bb      	str	r3, [r7, #8]
 800440c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800440e:	183b      	adds	r3, r7, r0
 8004410:	2201      	movs	r2, #1
 8004412:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004414:	4b54      	ldr	r3, [pc, #336]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	2380      	movs	r3, #128	; 0x80
 800441a:	005b      	lsls	r3, r3, #1
 800441c:	4013      	ands	r3, r2
 800441e:	d11a      	bne.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004420:	4b51      	ldr	r3, [pc, #324]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	4b50      	ldr	r3, [pc, #320]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004426:	2180      	movs	r1, #128	; 0x80
 8004428:	0049      	lsls	r1, r1, #1
 800442a:	430a      	orrs	r2, r1
 800442c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800442e:	f7fe fb57 	bl	8002ae0 <HAL_GetTick>
 8004432:	0003      	movs	r3, r0
 8004434:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004436:	e008      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004438:	f7fe fb52 	bl	8002ae0 <HAL_GetTick>
 800443c:	0002      	movs	r2, r0
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b64      	cmp	r3, #100	; 0x64
 8004444:	d901      	bls.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e087      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800444a:	4b47      	ldr	r3, [pc, #284]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	2380      	movs	r3, #128	; 0x80
 8004450:	005b      	lsls	r3, r3, #1
 8004452:	4013      	ands	r3, r2
 8004454:	d0f0      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004456:	4b43      	ldr	r3, [pc, #268]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004458:	6a1a      	ldr	r2, [r3, #32]
 800445a:	23c0      	movs	r3, #192	; 0xc0
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	4013      	ands	r3, r2
 8004460:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d034      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685a      	ldr	r2, [r3, #4]
 800446c:	23c0      	movs	r3, #192	; 0xc0
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	4013      	ands	r3, r2
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	429a      	cmp	r2, r3
 8004476:	d02c      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004478:	4b3a      	ldr	r3, [pc, #232]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800447a:	6a1b      	ldr	r3, [r3, #32]
 800447c:	4a3b      	ldr	r2, [pc, #236]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800447e:	4013      	ands	r3, r2
 8004480:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004482:	4b38      	ldr	r3, [pc, #224]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004484:	6a1a      	ldr	r2, [r3, #32]
 8004486:	4b37      	ldr	r3, [pc, #220]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004488:	2180      	movs	r1, #128	; 0x80
 800448a:	0249      	lsls	r1, r1, #9
 800448c:	430a      	orrs	r2, r1
 800448e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004490:	4b34      	ldr	r3, [pc, #208]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004492:	6a1a      	ldr	r2, [r3, #32]
 8004494:	4b33      	ldr	r3, [pc, #204]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004496:	4936      	ldr	r1, [pc, #216]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004498:	400a      	ands	r2, r1
 800449a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800449c:	4b31      	ldr	r3, [pc, #196]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2201      	movs	r2, #1
 80044a6:	4013      	ands	r3, r2
 80044a8:	d013      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044aa:	f7fe fb19 	bl	8002ae0 <HAL_GetTick>
 80044ae:	0003      	movs	r3, r0
 80044b0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044b2:	e009      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044b4:	f7fe fb14 	bl	8002ae0 <HAL_GetTick>
 80044b8:	0002      	movs	r2, r0
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	4a2d      	ldr	r2, [pc, #180]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d901      	bls.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e048      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044c8:	4b26      	ldr	r3, [pc, #152]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80044ca:	6a1b      	ldr	r3, [r3, #32]
 80044cc:	2202      	movs	r2, #2
 80044ce:	4013      	ands	r3, r2
 80044d0:	d0f0      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044d2:	4b24      	ldr	r3, [pc, #144]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80044d4:	6a1b      	ldr	r3, [r3, #32]
 80044d6:	4a25      	ldr	r2, [pc, #148]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044d8:	4013      	ands	r3, r2
 80044da:	0019      	movs	r1, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685a      	ldr	r2, [r3, #4]
 80044e0:	4b20      	ldr	r3, [pc, #128]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80044e2:	430a      	orrs	r2, r1
 80044e4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80044e6:	2317      	movs	r3, #23
 80044e8:	18fb      	adds	r3, r7, r3
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d105      	bne.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044f0:	4b1c      	ldr	r3, [pc, #112]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80044f2:	69da      	ldr	r2, [r3, #28]
 80044f4:	4b1b      	ldr	r3, [pc, #108]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80044f6:	4920      	ldr	r1, [pc, #128]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044f8:	400a      	ands	r2, r1
 80044fa:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2201      	movs	r2, #1
 8004502:	4013      	ands	r3, r2
 8004504:	d009      	beq.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004506:	4b17      	ldr	r3, [pc, #92]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450a:	2203      	movs	r2, #3
 800450c:	4393      	bics	r3, r2
 800450e:	0019      	movs	r1, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	689a      	ldr	r2, [r3, #8]
 8004514:	4b13      	ldr	r3, [pc, #76]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004516:	430a      	orrs	r2, r1
 8004518:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2220      	movs	r2, #32
 8004520:	4013      	ands	r3, r2
 8004522:	d009      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004524:	4b0f      	ldr	r3, [pc, #60]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004528:	2210      	movs	r2, #16
 800452a:	4393      	bics	r3, r2
 800452c:	0019      	movs	r1, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	68da      	ldr	r2, [r3, #12]
 8004532:	4b0c      	ldr	r3, [pc, #48]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004534:	430a      	orrs	r2, r1
 8004536:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	2380      	movs	r3, #128	; 0x80
 800453e:	00db      	lsls	r3, r3, #3
 8004540:	4013      	ands	r3, r2
 8004542:	d009      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004544:	4b07      	ldr	r3, [pc, #28]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004548:	2240      	movs	r2, #64	; 0x40
 800454a:	4393      	bics	r3, r2
 800454c:	0019      	movs	r1, r3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	691a      	ldr	r2, [r3, #16]
 8004552:	4b04      	ldr	r3, [pc, #16]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004554:	430a      	orrs	r2, r1
 8004556:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	0018      	movs	r0, r3
 800455c:	46bd      	mov	sp, r7
 800455e:	b006      	add	sp, #24
 8004560:	bd80      	pop	{r7, pc}
 8004562:	46c0      	nop			; (mov r8, r8)
 8004564:	40021000 	.word	0x40021000
 8004568:	40007000 	.word	0x40007000
 800456c:	fffffcff 	.word	0xfffffcff
 8004570:	fffeffff 	.word	0xfffeffff
 8004574:	00001388 	.word	0x00001388
 8004578:	efffffff 	.word	0xefffffff

0800457c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d101      	bne.n	800458e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e044      	b.n	8004618 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004592:	2b00      	cmp	r3, #0
 8004594:	d107      	bne.n	80045a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2278      	movs	r2, #120	; 0x78
 800459a:	2100      	movs	r1, #0
 800459c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	0018      	movs	r0, r3
 80045a2:	f7fe f8e3 	bl	800276c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2224      	movs	r2, #36	; 0x24
 80045aa:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2101      	movs	r1, #1
 80045b8:	438a      	bics	r2, r1
 80045ba:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d003      	beq.n	80045cc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	0018      	movs	r0, r3
 80045c8:	f000 fa0c 	bl	80049e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	0018      	movs	r0, r3
 80045d0:	f000 f8c8 	bl	8004764 <UART_SetConfig>
 80045d4:	0003      	movs	r3, r0
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d101      	bne.n	80045de <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e01c      	b.n	8004618 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	685a      	ldr	r2, [r3, #4]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	490d      	ldr	r1, [pc, #52]	; (8004620 <HAL_UART_Init+0xa4>)
 80045ea:	400a      	ands	r2, r1
 80045ec:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	689a      	ldr	r2, [r3, #8]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	212a      	movs	r1, #42	; 0x2a
 80045fa:	438a      	bics	r2, r1
 80045fc:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2101      	movs	r1, #1
 800460a:	430a      	orrs	r2, r1
 800460c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	0018      	movs	r0, r3
 8004612:	f000 fa9b 	bl	8004b4c <UART_CheckIdleState>
 8004616:	0003      	movs	r3, r0
}
 8004618:	0018      	movs	r0, r3
 800461a:	46bd      	mov	sp, r7
 800461c:	b002      	add	sp, #8
 800461e:	bd80      	pop	{r7, pc}
 8004620:	ffffb7ff 	.word	0xffffb7ff

08004624 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b08a      	sub	sp, #40	; 0x28
 8004628:	af02      	add	r7, sp, #8
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	603b      	str	r3, [r7, #0]
 8004630:	1dbb      	adds	r3, r7, #6
 8004632:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004638:	2b20      	cmp	r3, #32
 800463a:	d000      	beq.n	800463e <HAL_UART_Transmit+0x1a>
 800463c:	e08d      	b.n	800475a <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d003      	beq.n	800464c <HAL_UART_Transmit+0x28>
 8004644:	1dbb      	adds	r3, r7, #6
 8004646:	881b      	ldrh	r3, [r3, #0]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d101      	bne.n	8004650 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e085      	b.n	800475c <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	689a      	ldr	r2, [r3, #8]
 8004654:	2380      	movs	r3, #128	; 0x80
 8004656:	015b      	lsls	r3, r3, #5
 8004658:	429a      	cmp	r2, r3
 800465a:	d109      	bne.n	8004670 <HAL_UART_Transmit+0x4c>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d105      	bne.n	8004670 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	2201      	movs	r2, #1
 8004668:	4013      	ands	r3, r2
 800466a:	d001      	beq.n	8004670 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e075      	b.n	800475c <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2284      	movs	r2, #132	; 0x84
 8004674:	2100      	movs	r1, #0
 8004676:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2221      	movs	r2, #33	; 0x21
 800467c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800467e:	f7fe fa2f 	bl	8002ae0 <HAL_GetTick>
 8004682:	0003      	movs	r3, r0
 8004684:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	1dba      	adds	r2, r7, #6
 800468a:	2150      	movs	r1, #80	; 0x50
 800468c:	8812      	ldrh	r2, [r2, #0]
 800468e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	1dba      	adds	r2, r7, #6
 8004694:	2152      	movs	r1, #82	; 0x52
 8004696:	8812      	ldrh	r2, [r2, #0]
 8004698:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	689a      	ldr	r2, [r3, #8]
 800469e:	2380      	movs	r3, #128	; 0x80
 80046a0:	015b      	lsls	r3, r3, #5
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d108      	bne.n	80046b8 <HAL_UART_Transmit+0x94>
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d104      	bne.n	80046b8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80046ae:	2300      	movs	r3, #0
 80046b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	61bb      	str	r3, [r7, #24]
 80046b6:	e003      	b.n	80046c0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046bc:	2300      	movs	r3, #0
 80046be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80046c0:	e030      	b.n	8004724 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	68f8      	ldr	r0, [r7, #12]
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	9300      	str	r3, [sp, #0]
 80046ca:	0013      	movs	r3, r2
 80046cc:	2200      	movs	r2, #0
 80046ce:	2180      	movs	r1, #128	; 0x80
 80046d0:	f000 fae4 	bl	8004c9c <UART_WaitOnFlagUntilTimeout>
 80046d4:	1e03      	subs	r3, r0, #0
 80046d6:	d004      	beq.n	80046e2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2220      	movs	r2, #32
 80046dc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e03c      	b.n	800475c <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d10b      	bne.n	8004700 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	881a      	ldrh	r2, [r3, #0]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	05d2      	lsls	r2, r2, #23
 80046f2:	0dd2      	lsrs	r2, r2, #23
 80046f4:	b292      	uxth	r2, r2
 80046f6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	3302      	adds	r3, #2
 80046fc:	61bb      	str	r3, [r7, #24]
 80046fe:	e008      	b.n	8004712 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	781a      	ldrb	r2, [r3, #0]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	b292      	uxth	r2, r2
 800470a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	3301      	adds	r3, #1
 8004710:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2252      	movs	r2, #82	; 0x52
 8004716:	5a9b      	ldrh	r3, [r3, r2]
 8004718:	b29b      	uxth	r3, r3
 800471a:	3b01      	subs	r3, #1
 800471c:	b299      	uxth	r1, r3
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2252      	movs	r2, #82	; 0x52
 8004722:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2252      	movs	r2, #82	; 0x52
 8004728:	5a9b      	ldrh	r3, [r3, r2]
 800472a:	b29b      	uxth	r3, r3
 800472c:	2b00      	cmp	r3, #0
 800472e:	d1c8      	bne.n	80046c2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004730:	697a      	ldr	r2, [r7, #20]
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	9300      	str	r3, [sp, #0]
 8004738:	0013      	movs	r3, r2
 800473a:	2200      	movs	r2, #0
 800473c:	2140      	movs	r1, #64	; 0x40
 800473e:	f000 faad 	bl	8004c9c <UART_WaitOnFlagUntilTimeout>
 8004742:	1e03      	subs	r3, r0, #0
 8004744:	d004      	beq.n	8004750 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2220      	movs	r2, #32
 800474a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e005      	b.n	800475c <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2220      	movs	r2, #32
 8004754:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004756:	2300      	movs	r3, #0
 8004758:	e000      	b.n	800475c <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 800475a:	2302      	movs	r3, #2
  }
}
 800475c:	0018      	movs	r0, r3
 800475e:	46bd      	mov	sp, r7
 8004760:	b008      	add	sp, #32
 8004762:	bd80      	pop	{r7, pc}

08004764 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b088      	sub	sp, #32
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800476c:	231e      	movs	r3, #30
 800476e:	18fb      	adds	r3, r7, r3
 8004770:	2200      	movs	r2, #0
 8004772:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	689a      	ldr	r2, [r3, #8]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	431a      	orrs	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	431a      	orrs	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	69db      	ldr	r3, [r3, #28]
 8004788:	4313      	orrs	r3, r2
 800478a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a8d      	ldr	r2, [pc, #564]	; (80049c8 <UART_SetConfig+0x264>)
 8004794:	4013      	ands	r3, r2
 8004796:	0019      	movs	r1, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	430a      	orrs	r2, r1
 80047a0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	4a88      	ldr	r2, [pc, #544]	; (80049cc <UART_SetConfig+0x268>)
 80047aa:	4013      	ands	r3, r2
 80047ac:	0019      	movs	r1, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	68da      	ldr	r2, [r3, #12]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	430a      	orrs	r2, r1
 80047b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a1b      	ldr	r3, [r3, #32]
 80047c4:	697a      	ldr	r2, [r7, #20]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	4a7f      	ldr	r2, [pc, #508]	; (80049d0 <UART_SetConfig+0x26c>)
 80047d2:	4013      	ands	r3, r2
 80047d4:	0019      	movs	r1, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	430a      	orrs	r2, r1
 80047de:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a7b      	ldr	r2, [pc, #492]	; (80049d4 <UART_SetConfig+0x270>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d127      	bne.n	800483a <UART_SetConfig+0xd6>
 80047ea:	4b7b      	ldr	r3, [pc, #492]	; (80049d8 <UART_SetConfig+0x274>)
 80047ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ee:	2203      	movs	r2, #3
 80047f0:	4013      	ands	r3, r2
 80047f2:	2b03      	cmp	r3, #3
 80047f4:	d00d      	beq.n	8004812 <UART_SetConfig+0xae>
 80047f6:	d81b      	bhi.n	8004830 <UART_SetConfig+0xcc>
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d014      	beq.n	8004826 <UART_SetConfig+0xc2>
 80047fc:	d818      	bhi.n	8004830 <UART_SetConfig+0xcc>
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d002      	beq.n	8004808 <UART_SetConfig+0xa4>
 8004802:	2b01      	cmp	r3, #1
 8004804:	d00a      	beq.n	800481c <UART_SetConfig+0xb8>
 8004806:	e013      	b.n	8004830 <UART_SetConfig+0xcc>
 8004808:	231f      	movs	r3, #31
 800480a:	18fb      	adds	r3, r7, r3
 800480c:	2200      	movs	r2, #0
 800480e:	701a      	strb	r2, [r3, #0]
 8004810:	e021      	b.n	8004856 <UART_SetConfig+0xf2>
 8004812:	231f      	movs	r3, #31
 8004814:	18fb      	adds	r3, r7, r3
 8004816:	2202      	movs	r2, #2
 8004818:	701a      	strb	r2, [r3, #0]
 800481a:	e01c      	b.n	8004856 <UART_SetConfig+0xf2>
 800481c:	231f      	movs	r3, #31
 800481e:	18fb      	adds	r3, r7, r3
 8004820:	2204      	movs	r2, #4
 8004822:	701a      	strb	r2, [r3, #0]
 8004824:	e017      	b.n	8004856 <UART_SetConfig+0xf2>
 8004826:	231f      	movs	r3, #31
 8004828:	18fb      	adds	r3, r7, r3
 800482a:	2208      	movs	r2, #8
 800482c:	701a      	strb	r2, [r3, #0]
 800482e:	e012      	b.n	8004856 <UART_SetConfig+0xf2>
 8004830:	231f      	movs	r3, #31
 8004832:	18fb      	adds	r3, r7, r3
 8004834:	2210      	movs	r2, #16
 8004836:	701a      	strb	r2, [r3, #0]
 8004838:	e00d      	b.n	8004856 <UART_SetConfig+0xf2>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a67      	ldr	r2, [pc, #412]	; (80049dc <UART_SetConfig+0x278>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d104      	bne.n	800484e <UART_SetConfig+0xea>
 8004844:	231f      	movs	r3, #31
 8004846:	18fb      	adds	r3, r7, r3
 8004848:	2200      	movs	r2, #0
 800484a:	701a      	strb	r2, [r3, #0]
 800484c:	e003      	b.n	8004856 <UART_SetConfig+0xf2>
 800484e:	231f      	movs	r3, #31
 8004850:	18fb      	adds	r3, r7, r3
 8004852:	2210      	movs	r2, #16
 8004854:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	69da      	ldr	r2, [r3, #28]
 800485a:	2380      	movs	r3, #128	; 0x80
 800485c:	021b      	lsls	r3, r3, #8
 800485e:	429a      	cmp	r2, r3
 8004860:	d15c      	bne.n	800491c <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8004862:	231f      	movs	r3, #31
 8004864:	18fb      	adds	r3, r7, r3
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	2b08      	cmp	r3, #8
 800486a:	d015      	beq.n	8004898 <UART_SetConfig+0x134>
 800486c:	dc18      	bgt.n	80048a0 <UART_SetConfig+0x13c>
 800486e:	2b04      	cmp	r3, #4
 8004870:	d00d      	beq.n	800488e <UART_SetConfig+0x12a>
 8004872:	dc15      	bgt.n	80048a0 <UART_SetConfig+0x13c>
 8004874:	2b00      	cmp	r3, #0
 8004876:	d002      	beq.n	800487e <UART_SetConfig+0x11a>
 8004878:	2b02      	cmp	r3, #2
 800487a:	d005      	beq.n	8004888 <UART_SetConfig+0x124>
 800487c:	e010      	b.n	80048a0 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800487e:	f7ff fd89 	bl	8004394 <HAL_RCC_GetPCLK1Freq>
 8004882:	0003      	movs	r3, r0
 8004884:	61bb      	str	r3, [r7, #24]
        break;
 8004886:	e012      	b.n	80048ae <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004888:	4b55      	ldr	r3, [pc, #340]	; (80049e0 <UART_SetConfig+0x27c>)
 800488a:	61bb      	str	r3, [r7, #24]
        break;
 800488c:	e00f      	b.n	80048ae <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800488e:	f7ff fd21 	bl	80042d4 <HAL_RCC_GetSysClockFreq>
 8004892:	0003      	movs	r3, r0
 8004894:	61bb      	str	r3, [r7, #24]
        break;
 8004896:	e00a      	b.n	80048ae <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004898:	2380      	movs	r3, #128	; 0x80
 800489a:	021b      	lsls	r3, r3, #8
 800489c:	61bb      	str	r3, [r7, #24]
        break;
 800489e:	e006      	b.n	80048ae <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80048a0:	2300      	movs	r3, #0
 80048a2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80048a4:	231e      	movs	r3, #30
 80048a6:	18fb      	adds	r3, r7, r3
 80048a8:	2201      	movs	r2, #1
 80048aa:	701a      	strb	r2, [r3, #0]
        break;
 80048ac:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d100      	bne.n	80048b6 <UART_SetConfig+0x152>
 80048b4:	e07a      	b.n	80049ac <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	005a      	lsls	r2, r3, #1
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	085b      	lsrs	r3, r3, #1
 80048c0:	18d2      	adds	r2, r2, r3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	0019      	movs	r1, r3
 80048c8:	0010      	movs	r0, r2
 80048ca:	f7fb fc39 	bl	8000140 <__udivsi3>
 80048ce:	0003      	movs	r3, r0
 80048d0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	2b0f      	cmp	r3, #15
 80048d6:	d91c      	bls.n	8004912 <UART_SetConfig+0x1ae>
 80048d8:	693a      	ldr	r2, [r7, #16]
 80048da:	2380      	movs	r3, #128	; 0x80
 80048dc:	025b      	lsls	r3, r3, #9
 80048de:	429a      	cmp	r2, r3
 80048e0:	d217      	bcs.n	8004912 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	b29a      	uxth	r2, r3
 80048e6:	200e      	movs	r0, #14
 80048e8:	183b      	adds	r3, r7, r0
 80048ea:	210f      	movs	r1, #15
 80048ec:	438a      	bics	r2, r1
 80048ee:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	085b      	lsrs	r3, r3, #1
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	2207      	movs	r2, #7
 80048f8:	4013      	ands	r3, r2
 80048fa:	b299      	uxth	r1, r3
 80048fc:	183b      	adds	r3, r7, r0
 80048fe:	183a      	adds	r2, r7, r0
 8004900:	8812      	ldrh	r2, [r2, #0]
 8004902:	430a      	orrs	r2, r1
 8004904:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	183a      	adds	r2, r7, r0
 800490c:	8812      	ldrh	r2, [r2, #0]
 800490e:	60da      	str	r2, [r3, #12]
 8004910:	e04c      	b.n	80049ac <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004912:	231e      	movs	r3, #30
 8004914:	18fb      	adds	r3, r7, r3
 8004916:	2201      	movs	r2, #1
 8004918:	701a      	strb	r2, [r3, #0]
 800491a:	e047      	b.n	80049ac <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 800491c:	231f      	movs	r3, #31
 800491e:	18fb      	adds	r3, r7, r3
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	2b08      	cmp	r3, #8
 8004924:	d015      	beq.n	8004952 <UART_SetConfig+0x1ee>
 8004926:	dc18      	bgt.n	800495a <UART_SetConfig+0x1f6>
 8004928:	2b04      	cmp	r3, #4
 800492a:	d00d      	beq.n	8004948 <UART_SetConfig+0x1e4>
 800492c:	dc15      	bgt.n	800495a <UART_SetConfig+0x1f6>
 800492e:	2b00      	cmp	r3, #0
 8004930:	d002      	beq.n	8004938 <UART_SetConfig+0x1d4>
 8004932:	2b02      	cmp	r3, #2
 8004934:	d005      	beq.n	8004942 <UART_SetConfig+0x1de>
 8004936:	e010      	b.n	800495a <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004938:	f7ff fd2c 	bl	8004394 <HAL_RCC_GetPCLK1Freq>
 800493c:	0003      	movs	r3, r0
 800493e:	61bb      	str	r3, [r7, #24]
        break;
 8004940:	e012      	b.n	8004968 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004942:	4b27      	ldr	r3, [pc, #156]	; (80049e0 <UART_SetConfig+0x27c>)
 8004944:	61bb      	str	r3, [r7, #24]
        break;
 8004946:	e00f      	b.n	8004968 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004948:	f7ff fcc4 	bl	80042d4 <HAL_RCC_GetSysClockFreq>
 800494c:	0003      	movs	r3, r0
 800494e:	61bb      	str	r3, [r7, #24]
        break;
 8004950:	e00a      	b.n	8004968 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004952:	2380      	movs	r3, #128	; 0x80
 8004954:	021b      	lsls	r3, r3, #8
 8004956:	61bb      	str	r3, [r7, #24]
        break;
 8004958:	e006      	b.n	8004968 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800495a:	2300      	movs	r3, #0
 800495c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800495e:	231e      	movs	r3, #30
 8004960:	18fb      	adds	r3, r7, r3
 8004962:	2201      	movs	r2, #1
 8004964:	701a      	strb	r2, [r3, #0]
        break;
 8004966:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d01e      	beq.n	80049ac <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	085a      	lsrs	r2, r3, #1
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	18d2      	adds	r2, r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	0019      	movs	r1, r3
 800497e:	0010      	movs	r0, r2
 8004980:	f7fb fbde 	bl	8000140 <__udivsi3>
 8004984:	0003      	movs	r3, r0
 8004986:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	2b0f      	cmp	r3, #15
 800498c:	d90a      	bls.n	80049a4 <UART_SetConfig+0x240>
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	2380      	movs	r3, #128	; 0x80
 8004992:	025b      	lsls	r3, r3, #9
 8004994:	429a      	cmp	r2, r3
 8004996:	d205      	bcs.n	80049a4 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	b29a      	uxth	r2, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	60da      	str	r2, [r3, #12]
 80049a2:	e003      	b.n	80049ac <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80049a4:	231e      	movs	r3, #30
 80049a6:	18fb      	adds	r3, r7, r3
 80049a8:	2201      	movs	r2, #1
 80049aa:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80049b8:	231e      	movs	r3, #30
 80049ba:	18fb      	adds	r3, r7, r3
 80049bc:	781b      	ldrb	r3, [r3, #0]
}
 80049be:	0018      	movs	r0, r3
 80049c0:	46bd      	mov	sp, r7
 80049c2:	b008      	add	sp, #32
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	46c0      	nop			; (mov r8, r8)
 80049c8:	ffff69f3 	.word	0xffff69f3
 80049cc:	ffffcfff 	.word	0xffffcfff
 80049d0:	fffff4ff 	.word	0xfffff4ff
 80049d4:	40013800 	.word	0x40013800
 80049d8:	40021000 	.word	0x40021000
 80049dc:	40004400 	.word	0x40004400
 80049e0:	007a1200 	.word	0x007a1200

080049e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f0:	2208      	movs	r2, #8
 80049f2:	4013      	ands	r3, r2
 80049f4:	d00b      	beq.n	8004a0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	4a4a      	ldr	r2, [pc, #296]	; (8004b28 <UART_AdvFeatureConfig+0x144>)
 80049fe:	4013      	ands	r3, r2
 8004a00:	0019      	movs	r1, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a12:	2201      	movs	r2, #1
 8004a14:	4013      	ands	r3, r2
 8004a16:	d00b      	beq.n	8004a30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	4a43      	ldr	r2, [pc, #268]	; (8004b2c <UART_AdvFeatureConfig+0x148>)
 8004a20:	4013      	ands	r3, r2
 8004a22:	0019      	movs	r1, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a34:	2202      	movs	r2, #2
 8004a36:	4013      	ands	r3, r2
 8004a38:	d00b      	beq.n	8004a52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	4a3b      	ldr	r2, [pc, #236]	; (8004b30 <UART_AdvFeatureConfig+0x14c>)
 8004a42:	4013      	ands	r3, r2
 8004a44:	0019      	movs	r1, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a56:	2204      	movs	r2, #4
 8004a58:	4013      	ands	r3, r2
 8004a5a:	d00b      	beq.n	8004a74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	4a34      	ldr	r2, [pc, #208]	; (8004b34 <UART_AdvFeatureConfig+0x150>)
 8004a64:	4013      	ands	r3, r2
 8004a66:	0019      	movs	r1, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	430a      	orrs	r2, r1
 8004a72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a78:	2210      	movs	r2, #16
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	d00b      	beq.n	8004a96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	4a2c      	ldr	r2, [pc, #176]	; (8004b38 <UART_AdvFeatureConfig+0x154>)
 8004a86:	4013      	ands	r3, r2
 8004a88:	0019      	movs	r1, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	430a      	orrs	r2, r1
 8004a94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9a:	2220      	movs	r2, #32
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	d00b      	beq.n	8004ab8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	4a25      	ldr	r2, [pc, #148]	; (8004b3c <UART_AdvFeatureConfig+0x158>)
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	0019      	movs	r1, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abc:	2240      	movs	r2, #64	; 0x40
 8004abe:	4013      	ands	r3, r2
 8004ac0:	d01d      	beq.n	8004afe <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	4a1d      	ldr	r2, [pc, #116]	; (8004b40 <UART_AdvFeatureConfig+0x15c>)
 8004aca:	4013      	ands	r3, r2
 8004acc:	0019      	movs	r1, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ade:	2380      	movs	r3, #128	; 0x80
 8004ae0:	035b      	lsls	r3, r3, #13
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d10b      	bne.n	8004afe <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	4a15      	ldr	r2, [pc, #84]	; (8004b44 <UART_AdvFeatureConfig+0x160>)
 8004aee:	4013      	ands	r3, r2
 8004af0:	0019      	movs	r1, r3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	430a      	orrs	r2, r1
 8004afc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b02:	2280      	movs	r2, #128	; 0x80
 8004b04:	4013      	ands	r3, r2
 8004b06:	d00b      	beq.n	8004b20 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	4a0e      	ldr	r2, [pc, #56]	; (8004b48 <UART_AdvFeatureConfig+0x164>)
 8004b10:	4013      	ands	r3, r2
 8004b12:	0019      	movs	r1, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	605a      	str	r2, [r3, #4]
  }
}
 8004b20:	46c0      	nop			; (mov r8, r8)
 8004b22:	46bd      	mov	sp, r7
 8004b24:	b002      	add	sp, #8
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	ffff7fff 	.word	0xffff7fff
 8004b2c:	fffdffff 	.word	0xfffdffff
 8004b30:	fffeffff 	.word	0xfffeffff
 8004b34:	fffbffff 	.word	0xfffbffff
 8004b38:	ffffefff 	.word	0xffffefff
 8004b3c:	ffffdfff 	.word	0xffffdfff
 8004b40:	ffefffff 	.word	0xffefffff
 8004b44:	ff9fffff 	.word	0xff9fffff
 8004b48:	fff7ffff 	.word	0xfff7ffff

08004b4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b092      	sub	sp, #72	; 0x48
 8004b50:	af02      	add	r7, sp, #8
 8004b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2284      	movs	r2, #132	; 0x84
 8004b58:	2100      	movs	r1, #0
 8004b5a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b5c:	f7fd ffc0 	bl	8002ae0 <HAL_GetTick>
 8004b60:	0003      	movs	r3, r0
 8004b62:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2208      	movs	r2, #8
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	2b08      	cmp	r3, #8
 8004b70:	d12c      	bne.n	8004bcc <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b74:	2280      	movs	r2, #128	; 0x80
 8004b76:	0391      	lsls	r1, r2, #14
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	4a46      	ldr	r2, [pc, #280]	; (8004c94 <UART_CheckIdleState+0x148>)
 8004b7c:	9200      	str	r2, [sp, #0]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f000 f88c 	bl	8004c9c <UART_WaitOnFlagUntilTimeout>
 8004b84:	1e03      	subs	r3, r0, #0
 8004b86:	d021      	beq.n	8004bcc <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b88:	f3ef 8310 	mrs	r3, PRIMASK
 8004b8c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004b90:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b92:	2301      	movs	r3, #1
 8004b94:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b98:	f383 8810 	msr	PRIMASK, r3
}
 8004b9c:	46c0      	nop			; (mov r8, r8)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2180      	movs	r1, #128	; 0x80
 8004baa:	438a      	bics	r2, r1
 8004bac:	601a      	str	r2, [r3, #0]
 8004bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb4:	f383 8810 	msr	PRIMASK, r3
}
 8004bb8:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2220      	movs	r2, #32
 8004bbe:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2278      	movs	r2, #120	; 0x78
 8004bc4:	2100      	movs	r1, #0
 8004bc6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	e05f      	b.n	8004c8c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2204      	movs	r2, #4
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	2b04      	cmp	r3, #4
 8004bd8:	d146      	bne.n	8004c68 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bdc:	2280      	movs	r2, #128	; 0x80
 8004bde:	03d1      	lsls	r1, r2, #15
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	4a2c      	ldr	r2, [pc, #176]	; (8004c94 <UART_CheckIdleState+0x148>)
 8004be4:	9200      	str	r2, [sp, #0]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f000 f858 	bl	8004c9c <UART_WaitOnFlagUntilTimeout>
 8004bec:	1e03      	subs	r3, r0, #0
 8004bee:	d03b      	beq.n	8004c68 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bf0:	f3ef 8310 	mrs	r3, PRIMASK
 8004bf4:	60fb      	str	r3, [r7, #12]
  return(result);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bf8:	637b      	str	r3, [r7, #52]	; 0x34
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	f383 8810 	msr	PRIMASK, r3
}
 8004c04:	46c0      	nop			; (mov r8, r8)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4921      	ldr	r1, [pc, #132]	; (8004c98 <UART_CheckIdleState+0x14c>)
 8004c12:	400a      	ands	r2, r1
 8004c14:	601a      	str	r2, [r3, #0]
 8004c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c18:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	f383 8810 	msr	PRIMASK, r3
}
 8004c20:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c22:	f3ef 8310 	mrs	r3, PRIMASK
 8004c26:	61bb      	str	r3, [r7, #24]
  return(result);
 8004c28:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c2a:	633b      	str	r3, [r7, #48]	; 0x30
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	f383 8810 	msr	PRIMASK, r3
}
 8004c36:	46c0      	nop			; (mov r8, r8)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	689a      	ldr	r2, [r3, #8]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2101      	movs	r1, #1
 8004c44:	438a      	bics	r2, r1
 8004c46:	609a      	str	r2, [r3, #8]
 8004c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c4c:	6a3b      	ldr	r3, [r7, #32]
 8004c4e:	f383 8810 	msr	PRIMASK, r3
}
 8004c52:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2280      	movs	r2, #128	; 0x80
 8004c58:	2120      	movs	r1, #32
 8004c5a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2278      	movs	r2, #120	; 0x78
 8004c60:	2100      	movs	r1, #0
 8004c62:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c64:	2303      	movs	r3, #3
 8004c66:	e011      	b.n	8004c8c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2220      	movs	r2, #32
 8004c6c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2280      	movs	r2, #128	; 0x80
 8004c72:	2120      	movs	r1, #32
 8004c74:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2278      	movs	r2, #120	; 0x78
 8004c86:	2100      	movs	r1, #0
 8004c88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c8a:	2300      	movs	r3, #0
}
 8004c8c:	0018      	movs	r0, r3
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	b010      	add	sp, #64	; 0x40
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	01ffffff 	.word	0x01ffffff
 8004c98:	fffffedf 	.word	0xfffffedf

08004c9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	603b      	str	r3, [r7, #0]
 8004ca8:	1dfb      	adds	r3, r7, #7
 8004caa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cac:	e051      	b.n	8004d52 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	d04e      	beq.n	8004d52 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cb4:	f7fd ff14 	bl	8002ae0 <HAL_GetTick>
 8004cb8:	0002      	movs	r2, r0
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	69ba      	ldr	r2, [r7, #24]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d302      	bcc.n	8004cca <UART_WaitOnFlagUntilTimeout+0x2e>
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d101      	bne.n	8004cce <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e051      	b.n	8004d72 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2204      	movs	r2, #4
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	d03b      	beq.n	8004d52 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	2b80      	cmp	r3, #128	; 0x80
 8004cde:	d038      	beq.n	8004d52 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	2b40      	cmp	r3, #64	; 0x40
 8004ce4:	d035      	beq.n	8004d52 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	69db      	ldr	r3, [r3, #28]
 8004cec:	2208      	movs	r2, #8
 8004cee:	4013      	ands	r3, r2
 8004cf0:	2b08      	cmp	r3, #8
 8004cf2:	d111      	bne.n	8004d18 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2208      	movs	r2, #8
 8004cfa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	0018      	movs	r0, r3
 8004d00:	f000 f83c 	bl	8004d7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2284      	movs	r2, #132	; 0x84
 8004d08:	2108      	movs	r1, #8
 8004d0a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2278      	movs	r2, #120	; 0x78
 8004d10:	2100      	movs	r1, #0
 8004d12:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e02c      	b.n	8004d72 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	69da      	ldr	r2, [r3, #28]
 8004d1e:	2380      	movs	r3, #128	; 0x80
 8004d20:	011b      	lsls	r3, r3, #4
 8004d22:	401a      	ands	r2, r3
 8004d24:	2380      	movs	r3, #128	; 0x80
 8004d26:	011b      	lsls	r3, r3, #4
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d112      	bne.n	8004d52 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2280      	movs	r2, #128	; 0x80
 8004d32:	0112      	lsls	r2, r2, #4
 8004d34:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	0018      	movs	r0, r3
 8004d3a:	f000 f81f 	bl	8004d7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2284      	movs	r2, #132	; 0x84
 8004d42:	2120      	movs	r1, #32
 8004d44:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2278      	movs	r2, #120	; 0x78
 8004d4a:	2100      	movs	r1, #0
 8004d4c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e00f      	b.n	8004d72 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	69db      	ldr	r3, [r3, #28]
 8004d58:	68ba      	ldr	r2, [r7, #8]
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	68ba      	ldr	r2, [r7, #8]
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	425a      	negs	r2, r3
 8004d62:	4153      	adcs	r3, r2
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	001a      	movs	r2, r3
 8004d68:	1dfb      	adds	r3, r7, #7
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d09e      	beq.n	8004cae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	0018      	movs	r0, r3
 8004d74:	46bd      	mov	sp, r7
 8004d76:	b004      	add	sp, #16
 8004d78:	bd80      	pop	{r7, pc}
	...

08004d7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b08e      	sub	sp, #56	; 0x38
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d84:	f3ef 8310 	mrs	r3, PRIMASK
 8004d88:	617b      	str	r3, [r7, #20]
  return(result);
 8004d8a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d8c:	637b      	str	r3, [r7, #52]	; 0x34
 8004d8e:	2301      	movs	r3, #1
 8004d90:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	f383 8810 	msr	PRIMASK, r3
}
 8004d98:	46c0      	nop			; (mov r8, r8)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4926      	ldr	r1, [pc, #152]	; (8004e40 <UART_EndRxTransfer+0xc4>)
 8004da6:	400a      	ands	r2, r1
 8004da8:	601a      	str	r2, [r3, #0]
 8004daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	f383 8810 	msr	PRIMASK, r3
}
 8004db4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004db6:	f3ef 8310 	mrs	r3, PRIMASK
 8004dba:	623b      	str	r3, [r7, #32]
  return(result);
 8004dbc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dbe:	633b      	str	r3, [r7, #48]	; 0x30
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc6:	f383 8810 	msr	PRIMASK, r3
}
 8004dca:	46c0      	nop			; (mov r8, r8)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	689a      	ldr	r2, [r3, #8]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2101      	movs	r1, #1
 8004dd8:	438a      	bics	r2, r1
 8004dda:	609a      	str	r2, [r3, #8]
 8004ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dde:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de2:	f383 8810 	msr	PRIMASK, r3
}
 8004de6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d118      	bne.n	8004e22 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004df0:	f3ef 8310 	mrs	r3, PRIMASK
 8004df4:	60bb      	str	r3, [r7, #8]
  return(result);
 8004df6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004df8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f383 8810 	msr	PRIMASK, r3
}
 8004e04:	46c0      	nop			; (mov r8, r8)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2110      	movs	r1, #16
 8004e12:	438a      	bics	r2, r1
 8004e14:	601a      	str	r2, [r3, #0]
 8004e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e18:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	f383 8810 	msr	PRIMASK, r3
}
 8004e20:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2280      	movs	r2, #128	; 0x80
 8004e26:	2120      	movs	r1, #32
 8004e28:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004e36:	46c0      	nop			; (mov r8, r8)
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	b00e      	add	sp, #56	; 0x38
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	46c0      	nop			; (mov r8, r8)
 8004e40:	fffffedf 	.word	0xfffffedf

08004e44 <__errno>:
 8004e44:	4b01      	ldr	r3, [pc, #4]	; (8004e4c <__errno+0x8>)
 8004e46:	6818      	ldr	r0, [r3, #0]
 8004e48:	4770      	bx	lr
 8004e4a:	46c0      	nop			; (mov r8, r8)
 8004e4c:	2000000c 	.word	0x2000000c

08004e50 <__libc_init_array>:
 8004e50:	b570      	push	{r4, r5, r6, lr}
 8004e52:	2600      	movs	r6, #0
 8004e54:	4d0c      	ldr	r5, [pc, #48]	; (8004e88 <__libc_init_array+0x38>)
 8004e56:	4c0d      	ldr	r4, [pc, #52]	; (8004e8c <__libc_init_array+0x3c>)
 8004e58:	1b64      	subs	r4, r4, r5
 8004e5a:	10a4      	asrs	r4, r4, #2
 8004e5c:	42a6      	cmp	r6, r4
 8004e5e:	d109      	bne.n	8004e74 <__libc_init_array+0x24>
 8004e60:	2600      	movs	r6, #0
 8004e62:	f002 ffbb 	bl	8007ddc <_init>
 8004e66:	4d0a      	ldr	r5, [pc, #40]	; (8004e90 <__libc_init_array+0x40>)
 8004e68:	4c0a      	ldr	r4, [pc, #40]	; (8004e94 <__libc_init_array+0x44>)
 8004e6a:	1b64      	subs	r4, r4, r5
 8004e6c:	10a4      	asrs	r4, r4, #2
 8004e6e:	42a6      	cmp	r6, r4
 8004e70:	d105      	bne.n	8004e7e <__libc_init_array+0x2e>
 8004e72:	bd70      	pop	{r4, r5, r6, pc}
 8004e74:	00b3      	lsls	r3, r6, #2
 8004e76:	58eb      	ldr	r3, [r5, r3]
 8004e78:	4798      	blx	r3
 8004e7a:	3601      	adds	r6, #1
 8004e7c:	e7ee      	b.n	8004e5c <__libc_init_array+0xc>
 8004e7e:	00b3      	lsls	r3, r6, #2
 8004e80:	58eb      	ldr	r3, [r5, r3]
 8004e82:	4798      	blx	r3
 8004e84:	3601      	adds	r6, #1
 8004e86:	e7f2      	b.n	8004e6e <__libc_init_array+0x1e>
 8004e88:	08008294 	.word	0x08008294
 8004e8c:	08008294 	.word	0x08008294
 8004e90:	08008294 	.word	0x08008294
 8004e94:	08008298 	.word	0x08008298

08004e98 <memset>:
 8004e98:	0003      	movs	r3, r0
 8004e9a:	1882      	adds	r2, r0, r2
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d100      	bne.n	8004ea2 <memset+0xa>
 8004ea0:	4770      	bx	lr
 8004ea2:	7019      	strb	r1, [r3, #0]
 8004ea4:	3301      	adds	r3, #1
 8004ea6:	e7f9      	b.n	8004e9c <memset+0x4>

08004ea8 <__cvt>:
 8004ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004eaa:	001e      	movs	r6, r3
 8004eac:	2300      	movs	r3, #0
 8004eae:	0014      	movs	r4, r2
 8004eb0:	b08b      	sub	sp, #44	; 0x2c
 8004eb2:	429e      	cmp	r6, r3
 8004eb4:	da04      	bge.n	8004ec0 <__cvt+0x18>
 8004eb6:	2180      	movs	r1, #128	; 0x80
 8004eb8:	0609      	lsls	r1, r1, #24
 8004eba:	1873      	adds	r3, r6, r1
 8004ebc:	001e      	movs	r6, r3
 8004ebe:	232d      	movs	r3, #45	; 0x2d
 8004ec0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004ec2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004ec4:	7013      	strb	r3, [r2, #0]
 8004ec6:	2320      	movs	r3, #32
 8004ec8:	2203      	movs	r2, #3
 8004eca:	439f      	bics	r7, r3
 8004ecc:	2f46      	cmp	r7, #70	; 0x46
 8004ece:	d007      	beq.n	8004ee0 <__cvt+0x38>
 8004ed0:	003b      	movs	r3, r7
 8004ed2:	3b45      	subs	r3, #69	; 0x45
 8004ed4:	4259      	negs	r1, r3
 8004ed6:	414b      	adcs	r3, r1
 8004ed8:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004eda:	3a01      	subs	r2, #1
 8004edc:	18cb      	adds	r3, r1, r3
 8004ede:	9310      	str	r3, [sp, #64]	; 0x40
 8004ee0:	ab09      	add	r3, sp, #36	; 0x24
 8004ee2:	9304      	str	r3, [sp, #16]
 8004ee4:	ab08      	add	r3, sp, #32
 8004ee6:	9303      	str	r3, [sp, #12]
 8004ee8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004eea:	9200      	str	r2, [sp, #0]
 8004eec:	9302      	str	r3, [sp, #8]
 8004eee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004ef0:	0022      	movs	r2, r4
 8004ef2:	9301      	str	r3, [sp, #4]
 8004ef4:	0033      	movs	r3, r6
 8004ef6:	f000 fcf1 	bl	80058dc <_dtoa_r>
 8004efa:	0005      	movs	r5, r0
 8004efc:	2f47      	cmp	r7, #71	; 0x47
 8004efe:	d102      	bne.n	8004f06 <__cvt+0x5e>
 8004f00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004f02:	07db      	lsls	r3, r3, #31
 8004f04:	d528      	bpl.n	8004f58 <__cvt+0xb0>
 8004f06:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004f08:	18eb      	adds	r3, r5, r3
 8004f0a:	9307      	str	r3, [sp, #28]
 8004f0c:	2f46      	cmp	r7, #70	; 0x46
 8004f0e:	d114      	bne.n	8004f3a <__cvt+0x92>
 8004f10:	782b      	ldrb	r3, [r5, #0]
 8004f12:	2b30      	cmp	r3, #48	; 0x30
 8004f14:	d10c      	bne.n	8004f30 <__cvt+0x88>
 8004f16:	2200      	movs	r2, #0
 8004f18:	2300      	movs	r3, #0
 8004f1a:	0020      	movs	r0, r4
 8004f1c:	0031      	movs	r1, r6
 8004f1e:	f7fb fa95 	bl	800044c <__aeabi_dcmpeq>
 8004f22:	2800      	cmp	r0, #0
 8004f24:	d104      	bne.n	8004f30 <__cvt+0x88>
 8004f26:	2301      	movs	r3, #1
 8004f28:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004f2a:	1a9b      	subs	r3, r3, r2
 8004f2c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004f2e:	6013      	str	r3, [r2, #0]
 8004f30:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004f32:	9a07      	ldr	r2, [sp, #28]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	18d3      	adds	r3, r2, r3
 8004f38:	9307      	str	r3, [sp, #28]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	0020      	movs	r0, r4
 8004f40:	0031      	movs	r1, r6
 8004f42:	f7fb fa83 	bl	800044c <__aeabi_dcmpeq>
 8004f46:	2800      	cmp	r0, #0
 8004f48:	d001      	beq.n	8004f4e <__cvt+0xa6>
 8004f4a:	9b07      	ldr	r3, [sp, #28]
 8004f4c:	9309      	str	r3, [sp, #36]	; 0x24
 8004f4e:	2230      	movs	r2, #48	; 0x30
 8004f50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f52:	9907      	ldr	r1, [sp, #28]
 8004f54:	428b      	cmp	r3, r1
 8004f56:	d306      	bcc.n	8004f66 <__cvt+0xbe>
 8004f58:	0028      	movs	r0, r5
 8004f5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f5c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004f5e:	1b5b      	subs	r3, r3, r5
 8004f60:	6013      	str	r3, [r2, #0]
 8004f62:	b00b      	add	sp, #44	; 0x2c
 8004f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f66:	1c59      	adds	r1, r3, #1
 8004f68:	9109      	str	r1, [sp, #36]	; 0x24
 8004f6a:	701a      	strb	r2, [r3, #0]
 8004f6c:	e7f0      	b.n	8004f50 <__cvt+0xa8>

08004f6e <__exponent>:
 8004f6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f70:	1c83      	adds	r3, r0, #2
 8004f72:	b087      	sub	sp, #28
 8004f74:	9303      	str	r3, [sp, #12]
 8004f76:	0005      	movs	r5, r0
 8004f78:	000c      	movs	r4, r1
 8004f7a:	232b      	movs	r3, #43	; 0x2b
 8004f7c:	7002      	strb	r2, [r0, #0]
 8004f7e:	2900      	cmp	r1, #0
 8004f80:	da01      	bge.n	8004f86 <__exponent+0x18>
 8004f82:	424c      	negs	r4, r1
 8004f84:	3302      	adds	r3, #2
 8004f86:	706b      	strb	r3, [r5, #1]
 8004f88:	2c09      	cmp	r4, #9
 8004f8a:	dd31      	ble.n	8004ff0 <__exponent+0x82>
 8004f8c:	270a      	movs	r7, #10
 8004f8e:	ab04      	add	r3, sp, #16
 8004f90:	1dde      	adds	r6, r3, #7
 8004f92:	0020      	movs	r0, r4
 8004f94:	0039      	movs	r1, r7
 8004f96:	9601      	str	r6, [sp, #4]
 8004f98:	f7fb fa42 	bl	8000420 <__aeabi_idivmod>
 8004f9c:	3e01      	subs	r6, #1
 8004f9e:	3130      	adds	r1, #48	; 0x30
 8004fa0:	0020      	movs	r0, r4
 8004fa2:	7031      	strb	r1, [r6, #0]
 8004fa4:	0039      	movs	r1, r7
 8004fa6:	9402      	str	r4, [sp, #8]
 8004fa8:	f7fb f954 	bl	8000254 <__divsi3>
 8004fac:	9b02      	ldr	r3, [sp, #8]
 8004fae:	0004      	movs	r4, r0
 8004fb0:	2b63      	cmp	r3, #99	; 0x63
 8004fb2:	dcee      	bgt.n	8004f92 <__exponent+0x24>
 8004fb4:	9b01      	ldr	r3, [sp, #4]
 8004fb6:	3430      	adds	r4, #48	; 0x30
 8004fb8:	1e9a      	subs	r2, r3, #2
 8004fba:	0013      	movs	r3, r2
 8004fbc:	9903      	ldr	r1, [sp, #12]
 8004fbe:	7014      	strb	r4, [r2, #0]
 8004fc0:	a804      	add	r0, sp, #16
 8004fc2:	3007      	adds	r0, #7
 8004fc4:	4298      	cmp	r0, r3
 8004fc6:	d80e      	bhi.n	8004fe6 <__exponent+0x78>
 8004fc8:	ab04      	add	r3, sp, #16
 8004fca:	3307      	adds	r3, #7
 8004fcc:	2000      	movs	r0, #0
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d804      	bhi.n	8004fdc <__exponent+0x6e>
 8004fd2:	ab04      	add	r3, sp, #16
 8004fd4:	3009      	adds	r0, #9
 8004fd6:	18c0      	adds	r0, r0, r3
 8004fd8:	9b01      	ldr	r3, [sp, #4]
 8004fda:	1ac0      	subs	r0, r0, r3
 8004fdc:	9b03      	ldr	r3, [sp, #12]
 8004fde:	1818      	adds	r0, r3, r0
 8004fe0:	1b40      	subs	r0, r0, r5
 8004fe2:	b007      	add	sp, #28
 8004fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fe6:	7818      	ldrb	r0, [r3, #0]
 8004fe8:	3301      	adds	r3, #1
 8004fea:	7008      	strb	r0, [r1, #0]
 8004fec:	3101      	adds	r1, #1
 8004fee:	e7e7      	b.n	8004fc0 <__exponent+0x52>
 8004ff0:	2330      	movs	r3, #48	; 0x30
 8004ff2:	18e4      	adds	r4, r4, r3
 8004ff4:	70ab      	strb	r3, [r5, #2]
 8004ff6:	1d28      	adds	r0, r5, #4
 8004ff8:	70ec      	strb	r4, [r5, #3]
 8004ffa:	e7f1      	b.n	8004fe0 <__exponent+0x72>

08004ffc <_printf_float>:
 8004ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ffe:	b095      	sub	sp, #84	; 0x54
 8005000:	000c      	movs	r4, r1
 8005002:	9209      	str	r2, [sp, #36]	; 0x24
 8005004:	001e      	movs	r6, r3
 8005006:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8005008:	0007      	movs	r7, r0
 800500a:	f001 fa81 	bl	8006510 <_localeconv_r>
 800500e:	6803      	ldr	r3, [r0, #0]
 8005010:	0018      	movs	r0, r3
 8005012:	930c      	str	r3, [sp, #48]	; 0x30
 8005014:	f7fb f878 	bl	8000108 <strlen>
 8005018:	2300      	movs	r3, #0
 800501a:	9312      	str	r3, [sp, #72]	; 0x48
 800501c:	7e23      	ldrb	r3, [r4, #24]
 800501e:	2207      	movs	r2, #7
 8005020:	930a      	str	r3, [sp, #40]	; 0x28
 8005022:	6823      	ldr	r3, [r4, #0]
 8005024:	900e      	str	r0, [sp, #56]	; 0x38
 8005026:	930d      	str	r3, [sp, #52]	; 0x34
 8005028:	990d      	ldr	r1, [sp, #52]	; 0x34
 800502a:	682b      	ldr	r3, [r5, #0]
 800502c:	05c9      	lsls	r1, r1, #23
 800502e:	d547      	bpl.n	80050c0 <_printf_float+0xc4>
 8005030:	189b      	adds	r3, r3, r2
 8005032:	4393      	bics	r3, r2
 8005034:	001a      	movs	r2, r3
 8005036:	3208      	adds	r2, #8
 8005038:	602a      	str	r2, [r5, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	64a2      	str	r2, [r4, #72]	; 0x48
 8005040:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005042:	2201      	movs	r2, #1
 8005044:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005046:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8005048:	930b      	str	r3, [sp, #44]	; 0x2c
 800504a:	006b      	lsls	r3, r5, #1
 800504c:	085b      	lsrs	r3, r3, #1
 800504e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005050:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005052:	4ba7      	ldr	r3, [pc, #668]	; (80052f0 <_printf_float+0x2f4>)
 8005054:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005056:	4252      	negs	r2, r2
 8005058:	f7fc ff62 	bl	8001f20 <__aeabi_dcmpun>
 800505c:	2800      	cmp	r0, #0
 800505e:	d131      	bne.n	80050c4 <_printf_float+0xc8>
 8005060:	2201      	movs	r2, #1
 8005062:	4ba3      	ldr	r3, [pc, #652]	; (80052f0 <_printf_float+0x2f4>)
 8005064:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005066:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005068:	4252      	negs	r2, r2
 800506a:	f7fb f9ff 	bl	800046c <__aeabi_dcmple>
 800506e:	2800      	cmp	r0, #0
 8005070:	d128      	bne.n	80050c4 <_printf_float+0xc8>
 8005072:	2200      	movs	r2, #0
 8005074:	2300      	movs	r3, #0
 8005076:	0029      	movs	r1, r5
 8005078:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800507a:	f7fb f9ed 	bl	8000458 <__aeabi_dcmplt>
 800507e:	2800      	cmp	r0, #0
 8005080:	d003      	beq.n	800508a <_printf_float+0x8e>
 8005082:	0023      	movs	r3, r4
 8005084:	222d      	movs	r2, #45	; 0x2d
 8005086:	3343      	adds	r3, #67	; 0x43
 8005088:	701a      	strb	r2, [r3, #0]
 800508a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800508c:	4d99      	ldr	r5, [pc, #612]	; (80052f4 <_printf_float+0x2f8>)
 800508e:	2b47      	cmp	r3, #71	; 0x47
 8005090:	d900      	bls.n	8005094 <_printf_float+0x98>
 8005092:	4d99      	ldr	r5, [pc, #612]	; (80052f8 <_printf_float+0x2fc>)
 8005094:	2303      	movs	r3, #3
 8005096:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005098:	6123      	str	r3, [r4, #16]
 800509a:	3301      	adds	r3, #1
 800509c:	439a      	bics	r2, r3
 800509e:	2300      	movs	r3, #0
 80050a0:	6022      	str	r2, [r4, #0]
 80050a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80050a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050a6:	0021      	movs	r1, r4
 80050a8:	0038      	movs	r0, r7
 80050aa:	9600      	str	r6, [sp, #0]
 80050ac:	aa13      	add	r2, sp, #76	; 0x4c
 80050ae:	f000 f9e7 	bl	8005480 <_printf_common>
 80050b2:	1c43      	adds	r3, r0, #1
 80050b4:	d000      	beq.n	80050b8 <_printf_float+0xbc>
 80050b6:	e0a2      	b.n	80051fe <_printf_float+0x202>
 80050b8:	2001      	movs	r0, #1
 80050ba:	4240      	negs	r0, r0
 80050bc:	b015      	add	sp, #84	; 0x54
 80050be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050c0:	3307      	adds	r3, #7
 80050c2:	e7b6      	b.n	8005032 <_printf_float+0x36>
 80050c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80050c6:	002b      	movs	r3, r5
 80050c8:	0010      	movs	r0, r2
 80050ca:	0029      	movs	r1, r5
 80050cc:	f7fc ff28 	bl	8001f20 <__aeabi_dcmpun>
 80050d0:	2800      	cmp	r0, #0
 80050d2:	d00b      	beq.n	80050ec <_printf_float+0xf0>
 80050d4:	2d00      	cmp	r5, #0
 80050d6:	da03      	bge.n	80050e0 <_printf_float+0xe4>
 80050d8:	0023      	movs	r3, r4
 80050da:	222d      	movs	r2, #45	; 0x2d
 80050dc:	3343      	adds	r3, #67	; 0x43
 80050de:	701a      	strb	r2, [r3, #0]
 80050e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050e2:	4d86      	ldr	r5, [pc, #536]	; (80052fc <_printf_float+0x300>)
 80050e4:	2b47      	cmp	r3, #71	; 0x47
 80050e6:	d9d5      	bls.n	8005094 <_printf_float+0x98>
 80050e8:	4d85      	ldr	r5, [pc, #532]	; (8005300 <_printf_float+0x304>)
 80050ea:	e7d3      	b.n	8005094 <_printf_float+0x98>
 80050ec:	2220      	movs	r2, #32
 80050ee:	990a      	ldr	r1, [sp, #40]	; 0x28
 80050f0:	6863      	ldr	r3, [r4, #4]
 80050f2:	4391      	bics	r1, r2
 80050f4:	910f      	str	r1, [sp, #60]	; 0x3c
 80050f6:	1c5a      	adds	r2, r3, #1
 80050f8:	d149      	bne.n	800518e <_printf_float+0x192>
 80050fa:	3307      	adds	r3, #7
 80050fc:	6063      	str	r3, [r4, #4]
 80050fe:	2380      	movs	r3, #128	; 0x80
 8005100:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005102:	00db      	lsls	r3, r3, #3
 8005104:	4313      	orrs	r3, r2
 8005106:	2200      	movs	r2, #0
 8005108:	9206      	str	r2, [sp, #24]
 800510a:	aa12      	add	r2, sp, #72	; 0x48
 800510c:	9205      	str	r2, [sp, #20]
 800510e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005110:	a908      	add	r1, sp, #32
 8005112:	9204      	str	r2, [sp, #16]
 8005114:	aa11      	add	r2, sp, #68	; 0x44
 8005116:	9203      	str	r2, [sp, #12]
 8005118:	2223      	movs	r2, #35	; 0x23
 800511a:	6023      	str	r3, [r4, #0]
 800511c:	9301      	str	r3, [sp, #4]
 800511e:	6863      	ldr	r3, [r4, #4]
 8005120:	1852      	adds	r2, r2, r1
 8005122:	9202      	str	r2, [sp, #8]
 8005124:	9300      	str	r3, [sp, #0]
 8005126:	0038      	movs	r0, r7
 8005128:	002b      	movs	r3, r5
 800512a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800512c:	f7ff febc 	bl	8004ea8 <__cvt>
 8005130:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005132:	0005      	movs	r5, r0
 8005134:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005136:	2b47      	cmp	r3, #71	; 0x47
 8005138:	d108      	bne.n	800514c <_printf_float+0x150>
 800513a:	1ccb      	adds	r3, r1, #3
 800513c:	db02      	blt.n	8005144 <_printf_float+0x148>
 800513e:	6863      	ldr	r3, [r4, #4]
 8005140:	4299      	cmp	r1, r3
 8005142:	dd48      	ble.n	80051d6 <_printf_float+0x1da>
 8005144:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005146:	3b02      	subs	r3, #2
 8005148:	b2db      	uxtb	r3, r3
 800514a:	930a      	str	r3, [sp, #40]	; 0x28
 800514c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800514e:	2b65      	cmp	r3, #101	; 0x65
 8005150:	d824      	bhi.n	800519c <_printf_float+0x1a0>
 8005152:	0020      	movs	r0, r4
 8005154:	001a      	movs	r2, r3
 8005156:	3901      	subs	r1, #1
 8005158:	3050      	adds	r0, #80	; 0x50
 800515a:	9111      	str	r1, [sp, #68]	; 0x44
 800515c:	f7ff ff07 	bl	8004f6e <__exponent>
 8005160:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005162:	900b      	str	r0, [sp, #44]	; 0x2c
 8005164:	1813      	adds	r3, r2, r0
 8005166:	6123      	str	r3, [r4, #16]
 8005168:	2a01      	cmp	r2, #1
 800516a:	dc02      	bgt.n	8005172 <_printf_float+0x176>
 800516c:	6822      	ldr	r2, [r4, #0]
 800516e:	07d2      	lsls	r2, r2, #31
 8005170:	d501      	bpl.n	8005176 <_printf_float+0x17a>
 8005172:	3301      	adds	r3, #1
 8005174:	6123      	str	r3, [r4, #16]
 8005176:	2323      	movs	r3, #35	; 0x23
 8005178:	aa08      	add	r2, sp, #32
 800517a:	189b      	adds	r3, r3, r2
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d100      	bne.n	8005184 <_printf_float+0x188>
 8005182:	e78f      	b.n	80050a4 <_printf_float+0xa8>
 8005184:	0023      	movs	r3, r4
 8005186:	222d      	movs	r2, #45	; 0x2d
 8005188:	3343      	adds	r3, #67	; 0x43
 800518a:	701a      	strb	r2, [r3, #0]
 800518c:	e78a      	b.n	80050a4 <_printf_float+0xa8>
 800518e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005190:	2a47      	cmp	r2, #71	; 0x47
 8005192:	d1b4      	bne.n	80050fe <_printf_float+0x102>
 8005194:	2b00      	cmp	r3, #0
 8005196:	d1b2      	bne.n	80050fe <_printf_float+0x102>
 8005198:	3301      	adds	r3, #1
 800519a:	e7af      	b.n	80050fc <_printf_float+0x100>
 800519c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800519e:	2b66      	cmp	r3, #102	; 0x66
 80051a0:	d11b      	bne.n	80051da <_printf_float+0x1de>
 80051a2:	6863      	ldr	r3, [r4, #4]
 80051a4:	2900      	cmp	r1, #0
 80051a6:	dd0d      	ble.n	80051c4 <_printf_float+0x1c8>
 80051a8:	6121      	str	r1, [r4, #16]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d102      	bne.n	80051b4 <_printf_float+0x1b8>
 80051ae:	6822      	ldr	r2, [r4, #0]
 80051b0:	07d2      	lsls	r2, r2, #31
 80051b2:	d502      	bpl.n	80051ba <_printf_float+0x1be>
 80051b4:	3301      	adds	r3, #1
 80051b6:	1859      	adds	r1, r3, r1
 80051b8:	6121      	str	r1, [r4, #16]
 80051ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80051bc:	65a3      	str	r3, [r4, #88]	; 0x58
 80051be:	2300      	movs	r3, #0
 80051c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80051c2:	e7d8      	b.n	8005176 <_printf_float+0x17a>
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d103      	bne.n	80051d0 <_printf_float+0x1d4>
 80051c8:	2201      	movs	r2, #1
 80051ca:	6821      	ldr	r1, [r4, #0]
 80051cc:	4211      	tst	r1, r2
 80051ce:	d000      	beq.n	80051d2 <_printf_float+0x1d6>
 80051d0:	1c9a      	adds	r2, r3, #2
 80051d2:	6122      	str	r2, [r4, #16]
 80051d4:	e7f1      	b.n	80051ba <_printf_float+0x1be>
 80051d6:	2367      	movs	r3, #103	; 0x67
 80051d8:	930a      	str	r3, [sp, #40]	; 0x28
 80051da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80051dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80051de:	4293      	cmp	r3, r2
 80051e0:	db06      	blt.n	80051f0 <_printf_float+0x1f4>
 80051e2:	6822      	ldr	r2, [r4, #0]
 80051e4:	6123      	str	r3, [r4, #16]
 80051e6:	07d2      	lsls	r2, r2, #31
 80051e8:	d5e7      	bpl.n	80051ba <_printf_float+0x1be>
 80051ea:	3301      	adds	r3, #1
 80051ec:	6123      	str	r3, [r4, #16]
 80051ee:	e7e4      	b.n	80051ba <_printf_float+0x1be>
 80051f0:	2101      	movs	r1, #1
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	dc01      	bgt.n	80051fa <_printf_float+0x1fe>
 80051f6:	1849      	adds	r1, r1, r1
 80051f8:	1ac9      	subs	r1, r1, r3
 80051fa:	1852      	adds	r2, r2, r1
 80051fc:	e7e9      	b.n	80051d2 <_printf_float+0x1d6>
 80051fe:	6822      	ldr	r2, [r4, #0]
 8005200:	0553      	lsls	r3, r2, #21
 8005202:	d407      	bmi.n	8005214 <_printf_float+0x218>
 8005204:	6923      	ldr	r3, [r4, #16]
 8005206:	002a      	movs	r2, r5
 8005208:	0038      	movs	r0, r7
 800520a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800520c:	47b0      	blx	r6
 800520e:	1c43      	adds	r3, r0, #1
 8005210:	d128      	bne.n	8005264 <_printf_float+0x268>
 8005212:	e751      	b.n	80050b8 <_printf_float+0xbc>
 8005214:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005216:	2b65      	cmp	r3, #101	; 0x65
 8005218:	d800      	bhi.n	800521c <_printf_float+0x220>
 800521a:	e0e1      	b.n	80053e0 <_printf_float+0x3e4>
 800521c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800521e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005220:	2200      	movs	r2, #0
 8005222:	2300      	movs	r3, #0
 8005224:	f7fb f912 	bl	800044c <__aeabi_dcmpeq>
 8005228:	2800      	cmp	r0, #0
 800522a:	d031      	beq.n	8005290 <_printf_float+0x294>
 800522c:	2301      	movs	r3, #1
 800522e:	0038      	movs	r0, r7
 8005230:	4a34      	ldr	r2, [pc, #208]	; (8005304 <_printf_float+0x308>)
 8005232:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005234:	47b0      	blx	r6
 8005236:	1c43      	adds	r3, r0, #1
 8005238:	d100      	bne.n	800523c <_printf_float+0x240>
 800523a:	e73d      	b.n	80050b8 <_printf_float+0xbc>
 800523c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800523e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005240:	4293      	cmp	r3, r2
 8005242:	db02      	blt.n	800524a <_printf_float+0x24e>
 8005244:	6823      	ldr	r3, [r4, #0]
 8005246:	07db      	lsls	r3, r3, #31
 8005248:	d50c      	bpl.n	8005264 <_printf_float+0x268>
 800524a:	0038      	movs	r0, r7
 800524c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800524e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005250:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005252:	47b0      	blx	r6
 8005254:	2500      	movs	r5, #0
 8005256:	1c43      	adds	r3, r0, #1
 8005258:	d100      	bne.n	800525c <_printf_float+0x260>
 800525a:	e72d      	b.n	80050b8 <_printf_float+0xbc>
 800525c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800525e:	3b01      	subs	r3, #1
 8005260:	42ab      	cmp	r3, r5
 8005262:	dc0a      	bgt.n	800527a <_printf_float+0x27e>
 8005264:	6823      	ldr	r3, [r4, #0]
 8005266:	079b      	lsls	r3, r3, #30
 8005268:	d500      	bpl.n	800526c <_printf_float+0x270>
 800526a:	e106      	b.n	800547a <_printf_float+0x47e>
 800526c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800526e:	68e0      	ldr	r0, [r4, #12]
 8005270:	4298      	cmp	r0, r3
 8005272:	db00      	blt.n	8005276 <_printf_float+0x27a>
 8005274:	e722      	b.n	80050bc <_printf_float+0xc0>
 8005276:	0018      	movs	r0, r3
 8005278:	e720      	b.n	80050bc <_printf_float+0xc0>
 800527a:	0022      	movs	r2, r4
 800527c:	2301      	movs	r3, #1
 800527e:	0038      	movs	r0, r7
 8005280:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005282:	321a      	adds	r2, #26
 8005284:	47b0      	blx	r6
 8005286:	1c43      	adds	r3, r0, #1
 8005288:	d100      	bne.n	800528c <_printf_float+0x290>
 800528a:	e715      	b.n	80050b8 <_printf_float+0xbc>
 800528c:	3501      	adds	r5, #1
 800528e:	e7e5      	b.n	800525c <_printf_float+0x260>
 8005290:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005292:	2b00      	cmp	r3, #0
 8005294:	dc38      	bgt.n	8005308 <_printf_float+0x30c>
 8005296:	2301      	movs	r3, #1
 8005298:	0038      	movs	r0, r7
 800529a:	4a1a      	ldr	r2, [pc, #104]	; (8005304 <_printf_float+0x308>)
 800529c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800529e:	47b0      	blx	r6
 80052a0:	1c43      	adds	r3, r0, #1
 80052a2:	d100      	bne.n	80052a6 <_printf_float+0x2aa>
 80052a4:	e708      	b.n	80050b8 <_printf_float+0xbc>
 80052a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80052a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80052aa:	4313      	orrs	r3, r2
 80052ac:	d102      	bne.n	80052b4 <_printf_float+0x2b8>
 80052ae:	6823      	ldr	r3, [r4, #0]
 80052b0:	07db      	lsls	r3, r3, #31
 80052b2:	d5d7      	bpl.n	8005264 <_printf_float+0x268>
 80052b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80052b6:	0038      	movs	r0, r7
 80052b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80052ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80052bc:	47b0      	blx	r6
 80052be:	1c43      	adds	r3, r0, #1
 80052c0:	d100      	bne.n	80052c4 <_printf_float+0x2c8>
 80052c2:	e6f9      	b.n	80050b8 <_printf_float+0xbc>
 80052c4:	2300      	movs	r3, #0
 80052c6:	930a      	str	r3, [sp, #40]	; 0x28
 80052c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80052ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80052cc:	425b      	negs	r3, r3
 80052ce:	4293      	cmp	r3, r2
 80052d0:	dc01      	bgt.n	80052d6 <_printf_float+0x2da>
 80052d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80052d4:	e797      	b.n	8005206 <_printf_float+0x20a>
 80052d6:	0022      	movs	r2, r4
 80052d8:	2301      	movs	r3, #1
 80052da:	0038      	movs	r0, r7
 80052dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80052de:	321a      	adds	r2, #26
 80052e0:	47b0      	blx	r6
 80052e2:	1c43      	adds	r3, r0, #1
 80052e4:	d100      	bne.n	80052e8 <_printf_float+0x2ec>
 80052e6:	e6e7      	b.n	80050b8 <_printf_float+0xbc>
 80052e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052ea:	3301      	adds	r3, #1
 80052ec:	e7eb      	b.n	80052c6 <_printf_float+0x2ca>
 80052ee:	46c0      	nop			; (mov r8, r8)
 80052f0:	7fefffff 	.word	0x7fefffff
 80052f4:	08007ebc 	.word	0x08007ebc
 80052f8:	08007ec0 	.word	0x08007ec0
 80052fc:	08007ec4 	.word	0x08007ec4
 8005300:	08007ec8 	.word	0x08007ec8
 8005304:	08007ecc 	.word	0x08007ecc
 8005308:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800530a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800530c:	920a      	str	r2, [sp, #40]	; 0x28
 800530e:	429a      	cmp	r2, r3
 8005310:	dd00      	ble.n	8005314 <_printf_float+0x318>
 8005312:	930a      	str	r3, [sp, #40]	; 0x28
 8005314:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005316:	2b00      	cmp	r3, #0
 8005318:	dc3c      	bgt.n	8005394 <_printf_float+0x398>
 800531a:	2300      	movs	r3, #0
 800531c:	930d      	str	r3, [sp, #52]	; 0x34
 800531e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005320:	43db      	mvns	r3, r3
 8005322:	17db      	asrs	r3, r3, #31
 8005324:	930f      	str	r3, [sp, #60]	; 0x3c
 8005326:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005328:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800532a:	930b      	str	r3, [sp, #44]	; 0x2c
 800532c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800532e:	4013      	ands	r3, r2
 8005330:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005336:	4293      	cmp	r3, r2
 8005338:	dc34      	bgt.n	80053a4 <_printf_float+0x3a8>
 800533a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800533c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800533e:	4293      	cmp	r3, r2
 8005340:	db3d      	blt.n	80053be <_printf_float+0x3c2>
 8005342:	6823      	ldr	r3, [r4, #0]
 8005344:	07db      	lsls	r3, r3, #31
 8005346:	d43a      	bmi.n	80053be <_printf_float+0x3c2>
 8005348:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800534a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800534c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800534e:	1ad3      	subs	r3, r2, r3
 8005350:	1a52      	subs	r2, r2, r1
 8005352:	920a      	str	r2, [sp, #40]	; 0x28
 8005354:	429a      	cmp	r2, r3
 8005356:	dd00      	ble.n	800535a <_printf_float+0x35e>
 8005358:	930a      	str	r3, [sp, #40]	; 0x28
 800535a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800535c:	2b00      	cmp	r3, #0
 800535e:	dc36      	bgt.n	80053ce <_printf_float+0x3d2>
 8005360:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005362:	2500      	movs	r5, #0
 8005364:	43db      	mvns	r3, r3
 8005366:	17db      	asrs	r3, r3, #31
 8005368:	930b      	str	r3, [sp, #44]	; 0x2c
 800536a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800536c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800536e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005370:	1a9b      	subs	r3, r3, r2
 8005372:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005374:	400a      	ands	r2, r1
 8005376:	1a9b      	subs	r3, r3, r2
 8005378:	42ab      	cmp	r3, r5
 800537a:	dc00      	bgt.n	800537e <_printf_float+0x382>
 800537c:	e772      	b.n	8005264 <_printf_float+0x268>
 800537e:	0022      	movs	r2, r4
 8005380:	2301      	movs	r3, #1
 8005382:	0038      	movs	r0, r7
 8005384:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005386:	321a      	adds	r2, #26
 8005388:	47b0      	blx	r6
 800538a:	1c43      	adds	r3, r0, #1
 800538c:	d100      	bne.n	8005390 <_printf_float+0x394>
 800538e:	e693      	b.n	80050b8 <_printf_float+0xbc>
 8005390:	3501      	adds	r5, #1
 8005392:	e7ea      	b.n	800536a <_printf_float+0x36e>
 8005394:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005396:	002a      	movs	r2, r5
 8005398:	0038      	movs	r0, r7
 800539a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800539c:	47b0      	blx	r6
 800539e:	1c43      	adds	r3, r0, #1
 80053a0:	d1bb      	bne.n	800531a <_printf_float+0x31e>
 80053a2:	e689      	b.n	80050b8 <_printf_float+0xbc>
 80053a4:	0022      	movs	r2, r4
 80053a6:	2301      	movs	r3, #1
 80053a8:	0038      	movs	r0, r7
 80053aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80053ac:	321a      	adds	r2, #26
 80053ae:	47b0      	blx	r6
 80053b0:	1c43      	adds	r3, r0, #1
 80053b2:	d100      	bne.n	80053b6 <_printf_float+0x3ba>
 80053b4:	e680      	b.n	80050b8 <_printf_float+0xbc>
 80053b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053b8:	3301      	adds	r3, #1
 80053ba:	930d      	str	r3, [sp, #52]	; 0x34
 80053bc:	e7b3      	b.n	8005326 <_printf_float+0x32a>
 80053be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053c0:	0038      	movs	r0, r7
 80053c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80053c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80053c6:	47b0      	blx	r6
 80053c8:	1c43      	adds	r3, r0, #1
 80053ca:	d1bd      	bne.n	8005348 <_printf_float+0x34c>
 80053cc:	e674      	b.n	80050b8 <_printf_float+0xbc>
 80053ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053d0:	0038      	movs	r0, r7
 80053d2:	18ea      	adds	r2, r5, r3
 80053d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80053d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053d8:	47b0      	blx	r6
 80053da:	1c43      	adds	r3, r0, #1
 80053dc:	d1c0      	bne.n	8005360 <_printf_float+0x364>
 80053de:	e66b      	b.n	80050b8 <_printf_float+0xbc>
 80053e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	dc02      	bgt.n	80053ec <_printf_float+0x3f0>
 80053e6:	2301      	movs	r3, #1
 80053e8:	421a      	tst	r2, r3
 80053ea:	d034      	beq.n	8005456 <_printf_float+0x45a>
 80053ec:	2301      	movs	r3, #1
 80053ee:	002a      	movs	r2, r5
 80053f0:	0038      	movs	r0, r7
 80053f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80053f4:	47b0      	blx	r6
 80053f6:	1c43      	adds	r3, r0, #1
 80053f8:	d100      	bne.n	80053fc <_printf_float+0x400>
 80053fa:	e65d      	b.n	80050b8 <_printf_float+0xbc>
 80053fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053fe:	0038      	movs	r0, r7
 8005400:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005402:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005404:	47b0      	blx	r6
 8005406:	1c43      	adds	r3, r0, #1
 8005408:	d100      	bne.n	800540c <_printf_float+0x410>
 800540a:	e655      	b.n	80050b8 <_printf_float+0xbc>
 800540c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800540e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005410:	2200      	movs	r2, #0
 8005412:	2300      	movs	r3, #0
 8005414:	f7fb f81a 	bl	800044c <__aeabi_dcmpeq>
 8005418:	2800      	cmp	r0, #0
 800541a:	d11a      	bne.n	8005452 <_printf_float+0x456>
 800541c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800541e:	1c6a      	adds	r2, r5, #1
 8005420:	3b01      	subs	r3, #1
 8005422:	0038      	movs	r0, r7
 8005424:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005426:	47b0      	blx	r6
 8005428:	1c43      	adds	r3, r0, #1
 800542a:	d10e      	bne.n	800544a <_printf_float+0x44e>
 800542c:	e644      	b.n	80050b8 <_printf_float+0xbc>
 800542e:	0022      	movs	r2, r4
 8005430:	2301      	movs	r3, #1
 8005432:	0038      	movs	r0, r7
 8005434:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005436:	321a      	adds	r2, #26
 8005438:	47b0      	blx	r6
 800543a:	1c43      	adds	r3, r0, #1
 800543c:	d100      	bne.n	8005440 <_printf_float+0x444>
 800543e:	e63b      	b.n	80050b8 <_printf_float+0xbc>
 8005440:	3501      	adds	r5, #1
 8005442:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005444:	3b01      	subs	r3, #1
 8005446:	42ab      	cmp	r3, r5
 8005448:	dcf1      	bgt.n	800542e <_printf_float+0x432>
 800544a:	0022      	movs	r2, r4
 800544c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800544e:	3250      	adds	r2, #80	; 0x50
 8005450:	e6da      	b.n	8005208 <_printf_float+0x20c>
 8005452:	2500      	movs	r5, #0
 8005454:	e7f5      	b.n	8005442 <_printf_float+0x446>
 8005456:	002a      	movs	r2, r5
 8005458:	e7e3      	b.n	8005422 <_printf_float+0x426>
 800545a:	0022      	movs	r2, r4
 800545c:	2301      	movs	r3, #1
 800545e:	0038      	movs	r0, r7
 8005460:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005462:	3219      	adds	r2, #25
 8005464:	47b0      	blx	r6
 8005466:	1c43      	adds	r3, r0, #1
 8005468:	d100      	bne.n	800546c <_printf_float+0x470>
 800546a:	e625      	b.n	80050b8 <_printf_float+0xbc>
 800546c:	3501      	adds	r5, #1
 800546e:	68e3      	ldr	r3, [r4, #12]
 8005470:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005472:	1a9b      	subs	r3, r3, r2
 8005474:	42ab      	cmp	r3, r5
 8005476:	dcf0      	bgt.n	800545a <_printf_float+0x45e>
 8005478:	e6f8      	b.n	800526c <_printf_float+0x270>
 800547a:	2500      	movs	r5, #0
 800547c:	e7f7      	b.n	800546e <_printf_float+0x472>
 800547e:	46c0      	nop			; (mov r8, r8)

08005480 <_printf_common>:
 8005480:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005482:	0015      	movs	r5, r2
 8005484:	9301      	str	r3, [sp, #4]
 8005486:	688a      	ldr	r2, [r1, #8]
 8005488:	690b      	ldr	r3, [r1, #16]
 800548a:	000c      	movs	r4, r1
 800548c:	9000      	str	r0, [sp, #0]
 800548e:	4293      	cmp	r3, r2
 8005490:	da00      	bge.n	8005494 <_printf_common+0x14>
 8005492:	0013      	movs	r3, r2
 8005494:	0022      	movs	r2, r4
 8005496:	602b      	str	r3, [r5, #0]
 8005498:	3243      	adds	r2, #67	; 0x43
 800549a:	7812      	ldrb	r2, [r2, #0]
 800549c:	2a00      	cmp	r2, #0
 800549e:	d001      	beq.n	80054a4 <_printf_common+0x24>
 80054a0:	3301      	adds	r3, #1
 80054a2:	602b      	str	r3, [r5, #0]
 80054a4:	6823      	ldr	r3, [r4, #0]
 80054a6:	069b      	lsls	r3, r3, #26
 80054a8:	d502      	bpl.n	80054b0 <_printf_common+0x30>
 80054aa:	682b      	ldr	r3, [r5, #0]
 80054ac:	3302      	adds	r3, #2
 80054ae:	602b      	str	r3, [r5, #0]
 80054b0:	6822      	ldr	r2, [r4, #0]
 80054b2:	2306      	movs	r3, #6
 80054b4:	0017      	movs	r7, r2
 80054b6:	401f      	ands	r7, r3
 80054b8:	421a      	tst	r2, r3
 80054ba:	d027      	beq.n	800550c <_printf_common+0x8c>
 80054bc:	0023      	movs	r3, r4
 80054be:	3343      	adds	r3, #67	; 0x43
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	1e5a      	subs	r2, r3, #1
 80054c4:	4193      	sbcs	r3, r2
 80054c6:	6822      	ldr	r2, [r4, #0]
 80054c8:	0692      	lsls	r2, r2, #26
 80054ca:	d430      	bmi.n	800552e <_printf_common+0xae>
 80054cc:	0022      	movs	r2, r4
 80054ce:	9901      	ldr	r1, [sp, #4]
 80054d0:	9800      	ldr	r0, [sp, #0]
 80054d2:	9e08      	ldr	r6, [sp, #32]
 80054d4:	3243      	adds	r2, #67	; 0x43
 80054d6:	47b0      	blx	r6
 80054d8:	1c43      	adds	r3, r0, #1
 80054da:	d025      	beq.n	8005528 <_printf_common+0xa8>
 80054dc:	2306      	movs	r3, #6
 80054de:	6820      	ldr	r0, [r4, #0]
 80054e0:	682a      	ldr	r2, [r5, #0]
 80054e2:	68e1      	ldr	r1, [r4, #12]
 80054e4:	2500      	movs	r5, #0
 80054e6:	4003      	ands	r3, r0
 80054e8:	2b04      	cmp	r3, #4
 80054ea:	d103      	bne.n	80054f4 <_printf_common+0x74>
 80054ec:	1a8d      	subs	r5, r1, r2
 80054ee:	43eb      	mvns	r3, r5
 80054f0:	17db      	asrs	r3, r3, #31
 80054f2:	401d      	ands	r5, r3
 80054f4:	68a3      	ldr	r3, [r4, #8]
 80054f6:	6922      	ldr	r2, [r4, #16]
 80054f8:	4293      	cmp	r3, r2
 80054fa:	dd01      	ble.n	8005500 <_printf_common+0x80>
 80054fc:	1a9b      	subs	r3, r3, r2
 80054fe:	18ed      	adds	r5, r5, r3
 8005500:	2700      	movs	r7, #0
 8005502:	42bd      	cmp	r5, r7
 8005504:	d120      	bne.n	8005548 <_printf_common+0xc8>
 8005506:	2000      	movs	r0, #0
 8005508:	e010      	b.n	800552c <_printf_common+0xac>
 800550a:	3701      	adds	r7, #1
 800550c:	68e3      	ldr	r3, [r4, #12]
 800550e:	682a      	ldr	r2, [r5, #0]
 8005510:	1a9b      	subs	r3, r3, r2
 8005512:	42bb      	cmp	r3, r7
 8005514:	ddd2      	ble.n	80054bc <_printf_common+0x3c>
 8005516:	0022      	movs	r2, r4
 8005518:	2301      	movs	r3, #1
 800551a:	9901      	ldr	r1, [sp, #4]
 800551c:	9800      	ldr	r0, [sp, #0]
 800551e:	9e08      	ldr	r6, [sp, #32]
 8005520:	3219      	adds	r2, #25
 8005522:	47b0      	blx	r6
 8005524:	1c43      	adds	r3, r0, #1
 8005526:	d1f0      	bne.n	800550a <_printf_common+0x8a>
 8005528:	2001      	movs	r0, #1
 800552a:	4240      	negs	r0, r0
 800552c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800552e:	2030      	movs	r0, #48	; 0x30
 8005530:	18e1      	adds	r1, r4, r3
 8005532:	3143      	adds	r1, #67	; 0x43
 8005534:	7008      	strb	r0, [r1, #0]
 8005536:	0021      	movs	r1, r4
 8005538:	1c5a      	adds	r2, r3, #1
 800553a:	3145      	adds	r1, #69	; 0x45
 800553c:	7809      	ldrb	r1, [r1, #0]
 800553e:	18a2      	adds	r2, r4, r2
 8005540:	3243      	adds	r2, #67	; 0x43
 8005542:	3302      	adds	r3, #2
 8005544:	7011      	strb	r1, [r2, #0]
 8005546:	e7c1      	b.n	80054cc <_printf_common+0x4c>
 8005548:	0022      	movs	r2, r4
 800554a:	2301      	movs	r3, #1
 800554c:	9901      	ldr	r1, [sp, #4]
 800554e:	9800      	ldr	r0, [sp, #0]
 8005550:	9e08      	ldr	r6, [sp, #32]
 8005552:	321a      	adds	r2, #26
 8005554:	47b0      	blx	r6
 8005556:	1c43      	adds	r3, r0, #1
 8005558:	d0e6      	beq.n	8005528 <_printf_common+0xa8>
 800555a:	3701      	adds	r7, #1
 800555c:	e7d1      	b.n	8005502 <_printf_common+0x82>
	...

08005560 <_printf_i>:
 8005560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005562:	b08b      	sub	sp, #44	; 0x2c
 8005564:	9206      	str	r2, [sp, #24]
 8005566:	000a      	movs	r2, r1
 8005568:	3243      	adds	r2, #67	; 0x43
 800556a:	9307      	str	r3, [sp, #28]
 800556c:	9005      	str	r0, [sp, #20]
 800556e:	9204      	str	r2, [sp, #16]
 8005570:	7e0a      	ldrb	r2, [r1, #24]
 8005572:	000c      	movs	r4, r1
 8005574:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005576:	2a78      	cmp	r2, #120	; 0x78
 8005578:	d807      	bhi.n	800558a <_printf_i+0x2a>
 800557a:	2a62      	cmp	r2, #98	; 0x62
 800557c:	d809      	bhi.n	8005592 <_printf_i+0x32>
 800557e:	2a00      	cmp	r2, #0
 8005580:	d100      	bne.n	8005584 <_printf_i+0x24>
 8005582:	e0c1      	b.n	8005708 <_printf_i+0x1a8>
 8005584:	2a58      	cmp	r2, #88	; 0x58
 8005586:	d100      	bne.n	800558a <_printf_i+0x2a>
 8005588:	e08c      	b.n	80056a4 <_printf_i+0x144>
 800558a:	0026      	movs	r6, r4
 800558c:	3642      	adds	r6, #66	; 0x42
 800558e:	7032      	strb	r2, [r6, #0]
 8005590:	e022      	b.n	80055d8 <_printf_i+0x78>
 8005592:	0010      	movs	r0, r2
 8005594:	3863      	subs	r0, #99	; 0x63
 8005596:	2815      	cmp	r0, #21
 8005598:	d8f7      	bhi.n	800558a <_printf_i+0x2a>
 800559a:	f7fa fdc7 	bl	800012c <__gnu_thumb1_case_shi>
 800559e:	0016      	.short	0x0016
 80055a0:	fff6001f 	.word	0xfff6001f
 80055a4:	fff6fff6 	.word	0xfff6fff6
 80055a8:	001ffff6 	.word	0x001ffff6
 80055ac:	fff6fff6 	.word	0xfff6fff6
 80055b0:	fff6fff6 	.word	0xfff6fff6
 80055b4:	003600a8 	.word	0x003600a8
 80055b8:	fff6009a 	.word	0xfff6009a
 80055bc:	00b9fff6 	.word	0x00b9fff6
 80055c0:	0036fff6 	.word	0x0036fff6
 80055c4:	fff6fff6 	.word	0xfff6fff6
 80055c8:	009e      	.short	0x009e
 80055ca:	0026      	movs	r6, r4
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	3642      	adds	r6, #66	; 0x42
 80055d0:	1d11      	adds	r1, r2, #4
 80055d2:	6019      	str	r1, [r3, #0]
 80055d4:	6813      	ldr	r3, [r2, #0]
 80055d6:	7033      	strb	r3, [r6, #0]
 80055d8:	2301      	movs	r3, #1
 80055da:	e0a7      	b.n	800572c <_printf_i+0x1cc>
 80055dc:	6808      	ldr	r0, [r1, #0]
 80055de:	6819      	ldr	r1, [r3, #0]
 80055e0:	1d0a      	adds	r2, r1, #4
 80055e2:	0605      	lsls	r5, r0, #24
 80055e4:	d50b      	bpl.n	80055fe <_printf_i+0x9e>
 80055e6:	680d      	ldr	r5, [r1, #0]
 80055e8:	601a      	str	r2, [r3, #0]
 80055ea:	2d00      	cmp	r5, #0
 80055ec:	da03      	bge.n	80055f6 <_printf_i+0x96>
 80055ee:	232d      	movs	r3, #45	; 0x2d
 80055f0:	9a04      	ldr	r2, [sp, #16]
 80055f2:	426d      	negs	r5, r5
 80055f4:	7013      	strb	r3, [r2, #0]
 80055f6:	4b61      	ldr	r3, [pc, #388]	; (800577c <_printf_i+0x21c>)
 80055f8:	270a      	movs	r7, #10
 80055fa:	9303      	str	r3, [sp, #12]
 80055fc:	e01b      	b.n	8005636 <_printf_i+0xd6>
 80055fe:	680d      	ldr	r5, [r1, #0]
 8005600:	601a      	str	r2, [r3, #0]
 8005602:	0641      	lsls	r1, r0, #25
 8005604:	d5f1      	bpl.n	80055ea <_printf_i+0x8a>
 8005606:	b22d      	sxth	r5, r5
 8005608:	e7ef      	b.n	80055ea <_printf_i+0x8a>
 800560a:	680d      	ldr	r5, [r1, #0]
 800560c:	6819      	ldr	r1, [r3, #0]
 800560e:	1d08      	adds	r0, r1, #4
 8005610:	6018      	str	r0, [r3, #0]
 8005612:	062e      	lsls	r6, r5, #24
 8005614:	d501      	bpl.n	800561a <_printf_i+0xba>
 8005616:	680d      	ldr	r5, [r1, #0]
 8005618:	e003      	b.n	8005622 <_printf_i+0xc2>
 800561a:	066d      	lsls	r5, r5, #25
 800561c:	d5fb      	bpl.n	8005616 <_printf_i+0xb6>
 800561e:	680d      	ldr	r5, [r1, #0]
 8005620:	b2ad      	uxth	r5, r5
 8005622:	4b56      	ldr	r3, [pc, #344]	; (800577c <_printf_i+0x21c>)
 8005624:	2708      	movs	r7, #8
 8005626:	9303      	str	r3, [sp, #12]
 8005628:	2a6f      	cmp	r2, #111	; 0x6f
 800562a:	d000      	beq.n	800562e <_printf_i+0xce>
 800562c:	3702      	adds	r7, #2
 800562e:	0023      	movs	r3, r4
 8005630:	2200      	movs	r2, #0
 8005632:	3343      	adds	r3, #67	; 0x43
 8005634:	701a      	strb	r2, [r3, #0]
 8005636:	6863      	ldr	r3, [r4, #4]
 8005638:	60a3      	str	r3, [r4, #8]
 800563a:	2b00      	cmp	r3, #0
 800563c:	db03      	blt.n	8005646 <_printf_i+0xe6>
 800563e:	2204      	movs	r2, #4
 8005640:	6821      	ldr	r1, [r4, #0]
 8005642:	4391      	bics	r1, r2
 8005644:	6021      	str	r1, [r4, #0]
 8005646:	2d00      	cmp	r5, #0
 8005648:	d102      	bne.n	8005650 <_printf_i+0xf0>
 800564a:	9e04      	ldr	r6, [sp, #16]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d00c      	beq.n	800566a <_printf_i+0x10a>
 8005650:	9e04      	ldr	r6, [sp, #16]
 8005652:	0028      	movs	r0, r5
 8005654:	0039      	movs	r1, r7
 8005656:	f7fa fdf9 	bl	800024c <__aeabi_uidivmod>
 800565a:	9b03      	ldr	r3, [sp, #12]
 800565c:	3e01      	subs	r6, #1
 800565e:	5c5b      	ldrb	r3, [r3, r1]
 8005660:	7033      	strb	r3, [r6, #0]
 8005662:	002b      	movs	r3, r5
 8005664:	0005      	movs	r5, r0
 8005666:	429f      	cmp	r7, r3
 8005668:	d9f3      	bls.n	8005652 <_printf_i+0xf2>
 800566a:	2f08      	cmp	r7, #8
 800566c:	d109      	bne.n	8005682 <_printf_i+0x122>
 800566e:	6823      	ldr	r3, [r4, #0]
 8005670:	07db      	lsls	r3, r3, #31
 8005672:	d506      	bpl.n	8005682 <_printf_i+0x122>
 8005674:	6863      	ldr	r3, [r4, #4]
 8005676:	6922      	ldr	r2, [r4, #16]
 8005678:	4293      	cmp	r3, r2
 800567a:	dc02      	bgt.n	8005682 <_printf_i+0x122>
 800567c:	2330      	movs	r3, #48	; 0x30
 800567e:	3e01      	subs	r6, #1
 8005680:	7033      	strb	r3, [r6, #0]
 8005682:	9b04      	ldr	r3, [sp, #16]
 8005684:	1b9b      	subs	r3, r3, r6
 8005686:	6123      	str	r3, [r4, #16]
 8005688:	9b07      	ldr	r3, [sp, #28]
 800568a:	0021      	movs	r1, r4
 800568c:	9300      	str	r3, [sp, #0]
 800568e:	9805      	ldr	r0, [sp, #20]
 8005690:	9b06      	ldr	r3, [sp, #24]
 8005692:	aa09      	add	r2, sp, #36	; 0x24
 8005694:	f7ff fef4 	bl	8005480 <_printf_common>
 8005698:	1c43      	adds	r3, r0, #1
 800569a:	d14c      	bne.n	8005736 <_printf_i+0x1d6>
 800569c:	2001      	movs	r0, #1
 800569e:	4240      	negs	r0, r0
 80056a0:	b00b      	add	sp, #44	; 0x2c
 80056a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056a4:	3145      	adds	r1, #69	; 0x45
 80056a6:	700a      	strb	r2, [r1, #0]
 80056a8:	4a34      	ldr	r2, [pc, #208]	; (800577c <_printf_i+0x21c>)
 80056aa:	9203      	str	r2, [sp, #12]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	6821      	ldr	r1, [r4, #0]
 80056b0:	ca20      	ldmia	r2!, {r5}
 80056b2:	601a      	str	r2, [r3, #0]
 80056b4:	0608      	lsls	r0, r1, #24
 80056b6:	d516      	bpl.n	80056e6 <_printf_i+0x186>
 80056b8:	07cb      	lsls	r3, r1, #31
 80056ba:	d502      	bpl.n	80056c2 <_printf_i+0x162>
 80056bc:	2320      	movs	r3, #32
 80056be:	4319      	orrs	r1, r3
 80056c0:	6021      	str	r1, [r4, #0]
 80056c2:	2710      	movs	r7, #16
 80056c4:	2d00      	cmp	r5, #0
 80056c6:	d1b2      	bne.n	800562e <_printf_i+0xce>
 80056c8:	2320      	movs	r3, #32
 80056ca:	6822      	ldr	r2, [r4, #0]
 80056cc:	439a      	bics	r2, r3
 80056ce:	6022      	str	r2, [r4, #0]
 80056d0:	e7ad      	b.n	800562e <_printf_i+0xce>
 80056d2:	2220      	movs	r2, #32
 80056d4:	6809      	ldr	r1, [r1, #0]
 80056d6:	430a      	orrs	r2, r1
 80056d8:	6022      	str	r2, [r4, #0]
 80056da:	0022      	movs	r2, r4
 80056dc:	2178      	movs	r1, #120	; 0x78
 80056de:	3245      	adds	r2, #69	; 0x45
 80056e0:	7011      	strb	r1, [r2, #0]
 80056e2:	4a27      	ldr	r2, [pc, #156]	; (8005780 <_printf_i+0x220>)
 80056e4:	e7e1      	b.n	80056aa <_printf_i+0x14a>
 80056e6:	0648      	lsls	r0, r1, #25
 80056e8:	d5e6      	bpl.n	80056b8 <_printf_i+0x158>
 80056ea:	b2ad      	uxth	r5, r5
 80056ec:	e7e4      	b.n	80056b8 <_printf_i+0x158>
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	680d      	ldr	r5, [r1, #0]
 80056f2:	1d10      	adds	r0, r2, #4
 80056f4:	6949      	ldr	r1, [r1, #20]
 80056f6:	6018      	str	r0, [r3, #0]
 80056f8:	6813      	ldr	r3, [r2, #0]
 80056fa:	062e      	lsls	r6, r5, #24
 80056fc:	d501      	bpl.n	8005702 <_printf_i+0x1a2>
 80056fe:	6019      	str	r1, [r3, #0]
 8005700:	e002      	b.n	8005708 <_printf_i+0x1a8>
 8005702:	066d      	lsls	r5, r5, #25
 8005704:	d5fb      	bpl.n	80056fe <_printf_i+0x19e>
 8005706:	8019      	strh	r1, [r3, #0]
 8005708:	2300      	movs	r3, #0
 800570a:	9e04      	ldr	r6, [sp, #16]
 800570c:	6123      	str	r3, [r4, #16]
 800570e:	e7bb      	b.n	8005688 <_printf_i+0x128>
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	1d11      	adds	r1, r2, #4
 8005714:	6019      	str	r1, [r3, #0]
 8005716:	6816      	ldr	r6, [r2, #0]
 8005718:	2100      	movs	r1, #0
 800571a:	0030      	movs	r0, r6
 800571c:	6862      	ldr	r2, [r4, #4]
 800571e:	f000 ff05 	bl	800652c <memchr>
 8005722:	2800      	cmp	r0, #0
 8005724:	d001      	beq.n	800572a <_printf_i+0x1ca>
 8005726:	1b80      	subs	r0, r0, r6
 8005728:	6060      	str	r0, [r4, #4]
 800572a:	6863      	ldr	r3, [r4, #4]
 800572c:	6123      	str	r3, [r4, #16]
 800572e:	2300      	movs	r3, #0
 8005730:	9a04      	ldr	r2, [sp, #16]
 8005732:	7013      	strb	r3, [r2, #0]
 8005734:	e7a8      	b.n	8005688 <_printf_i+0x128>
 8005736:	6923      	ldr	r3, [r4, #16]
 8005738:	0032      	movs	r2, r6
 800573a:	9906      	ldr	r1, [sp, #24]
 800573c:	9805      	ldr	r0, [sp, #20]
 800573e:	9d07      	ldr	r5, [sp, #28]
 8005740:	47a8      	blx	r5
 8005742:	1c43      	adds	r3, r0, #1
 8005744:	d0aa      	beq.n	800569c <_printf_i+0x13c>
 8005746:	6823      	ldr	r3, [r4, #0]
 8005748:	079b      	lsls	r3, r3, #30
 800574a:	d415      	bmi.n	8005778 <_printf_i+0x218>
 800574c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800574e:	68e0      	ldr	r0, [r4, #12]
 8005750:	4298      	cmp	r0, r3
 8005752:	daa5      	bge.n	80056a0 <_printf_i+0x140>
 8005754:	0018      	movs	r0, r3
 8005756:	e7a3      	b.n	80056a0 <_printf_i+0x140>
 8005758:	0022      	movs	r2, r4
 800575a:	2301      	movs	r3, #1
 800575c:	9906      	ldr	r1, [sp, #24]
 800575e:	9805      	ldr	r0, [sp, #20]
 8005760:	9e07      	ldr	r6, [sp, #28]
 8005762:	3219      	adds	r2, #25
 8005764:	47b0      	blx	r6
 8005766:	1c43      	adds	r3, r0, #1
 8005768:	d098      	beq.n	800569c <_printf_i+0x13c>
 800576a:	3501      	adds	r5, #1
 800576c:	68e3      	ldr	r3, [r4, #12]
 800576e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005770:	1a9b      	subs	r3, r3, r2
 8005772:	42ab      	cmp	r3, r5
 8005774:	dcf0      	bgt.n	8005758 <_printf_i+0x1f8>
 8005776:	e7e9      	b.n	800574c <_printf_i+0x1ec>
 8005778:	2500      	movs	r5, #0
 800577a:	e7f7      	b.n	800576c <_printf_i+0x20c>
 800577c:	08007ece 	.word	0x08007ece
 8005780:	08007edf 	.word	0x08007edf

08005784 <siprintf>:
 8005784:	b40e      	push	{r1, r2, r3}
 8005786:	b500      	push	{lr}
 8005788:	490b      	ldr	r1, [pc, #44]	; (80057b8 <siprintf+0x34>)
 800578a:	b09c      	sub	sp, #112	; 0x70
 800578c:	ab1d      	add	r3, sp, #116	; 0x74
 800578e:	9002      	str	r0, [sp, #8]
 8005790:	9006      	str	r0, [sp, #24]
 8005792:	9107      	str	r1, [sp, #28]
 8005794:	9104      	str	r1, [sp, #16]
 8005796:	4809      	ldr	r0, [pc, #36]	; (80057bc <siprintf+0x38>)
 8005798:	4909      	ldr	r1, [pc, #36]	; (80057c0 <siprintf+0x3c>)
 800579a:	cb04      	ldmia	r3!, {r2}
 800579c:	9105      	str	r1, [sp, #20]
 800579e:	6800      	ldr	r0, [r0, #0]
 80057a0:	a902      	add	r1, sp, #8
 80057a2:	9301      	str	r3, [sp, #4]
 80057a4:	f001 fbe2 	bl	8006f6c <_svfiprintf_r>
 80057a8:	2300      	movs	r3, #0
 80057aa:	9a02      	ldr	r2, [sp, #8]
 80057ac:	7013      	strb	r3, [r2, #0]
 80057ae:	b01c      	add	sp, #112	; 0x70
 80057b0:	bc08      	pop	{r3}
 80057b2:	b003      	add	sp, #12
 80057b4:	4718      	bx	r3
 80057b6:	46c0      	nop			; (mov r8, r8)
 80057b8:	7fffffff 	.word	0x7fffffff
 80057bc:	2000000c 	.word	0x2000000c
 80057c0:	ffff0208 	.word	0xffff0208

080057c4 <quorem>:
 80057c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057c6:	0006      	movs	r6, r0
 80057c8:	690b      	ldr	r3, [r1, #16]
 80057ca:	6932      	ldr	r2, [r6, #16]
 80057cc:	b087      	sub	sp, #28
 80057ce:	2000      	movs	r0, #0
 80057d0:	9103      	str	r1, [sp, #12]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	db65      	blt.n	80058a2 <quorem+0xde>
 80057d6:	3b01      	subs	r3, #1
 80057d8:	009c      	lsls	r4, r3, #2
 80057da:	9300      	str	r3, [sp, #0]
 80057dc:	000b      	movs	r3, r1
 80057de:	3314      	adds	r3, #20
 80057e0:	9305      	str	r3, [sp, #20]
 80057e2:	191b      	adds	r3, r3, r4
 80057e4:	9304      	str	r3, [sp, #16]
 80057e6:	0033      	movs	r3, r6
 80057e8:	3314      	adds	r3, #20
 80057ea:	9302      	str	r3, [sp, #8]
 80057ec:	191c      	adds	r4, r3, r4
 80057ee:	9b04      	ldr	r3, [sp, #16]
 80057f0:	6827      	ldr	r7, [r4, #0]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	0038      	movs	r0, r7
 80057f6:	1c5d      	adds	r5, r3, #1
 80057f8:	0029      	movs	r1, r5
 80057fa:	9301      	str	r3, [sp, #4]
 80057fc:	f7fa fca0 	bl	8000140 <__udivsi3>
 8005800:	9001      	str	r0, [sp, #4]
 8005802:	42af      	cmp	r7, r5
 8005804:	d324      	bcc.n	8005850 <quorem+0x8c>
 8005806:	2500      	movs	r5, #0
 8005808:	46ac      	mov	ip, r5
 800580a:	9802      	ldr	r0, [sp, #8]
 800580c:	9f05      	ldr	r7, [sp, #20]
 800580e:	cf08      	ldmia	r7!, {r3}
 8005810:	9a01      	ldr	r2, [sp, #4]
 8005812:	b299      	uxth	r1, r3
 8005814:	4351      	muls	r1, r2
 8005816:	0c1b      	lsrs	r3, r3, #16
 8005818:	4353      	muls	r3, r2
 800581a:	1949      	adds	r1, r1, r5
 800581c:	0c0a      	lsrs	r2, r1, #16
 800581e:	189b      	adds	r3, r3, r2
 8005820:	6802      	ldr	r2, [r0, #0]
 8005822:	b289      	uxth	r1, r1
 8005824:	b292      	uxth	r2, r2
 8005826:	4462      	add	r2, ip
 8005828:	1a52      	subs	r2, r2, r1
 800582a:	6801      	ldr	r1, [r0, #0]
 800582c:	0c1d      	lsrs	r5, r3, #16
 800582e:	0c09      	lsrs	r1, r1, #16
 8005830:	b29b      	uxth	r3, r3
 8005832:	1acb      	subs	r3, r1, r3
 8005834:	1411      	asrs	r1, r2, #16
 8005836:	185b      	adds	r3, r3, r1
 8005838:	1419      	asrs	r1, r3, #16
 800583a:	b292      	uxth	r2, r2
 800583c:	041b      	lsls	r3, r3, #16
 800583e:	431a      	orrs	r2, r3
 8005840:	9b04      	ldr	r3, [sp, #16]
 8005842:	468c      	mov	ip, r1
 8005844:	c004      	stmia	r0!, {r2}
 8005846:	42bb      	cmp	r3, r7
 8005848:	d2e1      	bcs.n	800580e <quorem+0x4a>
 800584a:	6823      	ldr	r3, [r4, #0]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d030      	beq.n	80058b2 <quorem+0xee>
 8005850:	0030      	movs	r0, r6
 8005852:	9903      	ldr	r1, [sp, #12]
 8005854:	f001 f902 	bl	8006a5c <__mcmp>
 8005858:	2800      	cmp	r0, #0
 800585a:	db21      	blt.n	80058a0 <quorem+0xdc>
 800585c:	0030      	movs	r0, r6
 800585e:	2400      	movs	r4, #0
 8005860:	9b01      	ldr	r3, [sp, #4]
 8005862:	9903      	ldr	r1, [sp, #12]
 8005864:	3301      	adds	r3, #1
 8005866:	9301      	str	r3, [sp, #4]
 8005868:	3014      	adds	r0, #20
 800586a:	3114      	adds	r1, #20
 800586c:	6803      	ldr	r3, [r0, #0]
 800586e:	c920      	ldmia	r1!, {r5}
 8005870:	b29a      	uxth	r2, r3
 8005872:	1914      	adds	r4, r2, r4
 8005874:	b2aa      	uxth	r2, r5
 8005876:	1aa2      	subs	r2, r4, r2
 8005878:	0c1b      	lsrs	r3, r3, #16
 800587a:	0c2d      	lsrs	r5, r5, #16
 800587c:	1414      	asrs	r4, r2, #16
 800587e:	1b5b      	subs	r3, r3, r5
 8005880:	191b      	adds	r3, r3, r4
 8005882:	141c      	asrs	r4, r3, #16
 8005884:	b292      	uxth	r2, r2
 8005886:	041b      	lsls	r3, r3, #16
 8005888:	4313      	orrs	r3, r2
 800588a:	c008      	stmia	r0!, {r3}
 800588c:	9b04      	ldr	r3, [sp, #16]
 800588e:	428b      	cmp	r3, r1
 8005890:	d2ec      	bcs.n	800586c <quorem+0xa8>
 8005892:	9b00      	ldr	r3, [sp, #0]
 8005894:	9a02      	ldr	r2, [sp, #8]
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	18d3      	adds	r3, r2, r3
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	2a00      	cmp	r2, #0
 800589e:	d015      	beq.n	80058cc <quorem+0x108>
 80058a0:	9801      	ldr	r0, [sp, #4]
 80058a2:	b007      	add	sp, #28
 80058a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058a6:	6823      	ldr	r3, [r4, #0]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d106      	bne.n	80058ba <quorem+0xf6>
 80058ac:	9b00      	ldr	r3, [sp, #0]
 80058ae:	3b01      	subs	r3, #1
 80058b0:	9300      	str	r3, [sp, #0]
 80058b2:	9b02      	ldr	r3, [sp, #8]
 80058b4:	3c04      	subs	r4, #4
 80058b6:	42a3      	cmp	r3, r4
 80058b8:	d3f5      	bcc.n	80058a6 <quorem+0xe2>
 80058ba:	9b00      	ldr	r3, [sp, #0]
 80058bc:	6133      	str	r3, [r6, #16]
 80058be:	e7c7      	b.n	8005850 <quorem+0x8c>
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	2a00      	cmp	r2, #0
 80058c4:	d106      	bne.n	80058d4 <quorem+0x110>
 80058c6:	9a00      	ldr	r2, [sp, #0]
 80058c8:	3a01      	subs	r2, #1
 80058ca:	9200      	str	r2, [sp, #0]
 80058cc:	9a02      	ldr	r2, [sp, #8]
 80058ce:	3b04      	subs	r3, #4
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d3f5      	bcc.n	80058c0 <quorem+0xfc>
 80058d4:	9b00      	ldr	r3, [sp, #0]
 80058d6:	6133      	str	r3, [r6, #16]
 80058d8:	e7e2      	b.n	80058a0 <quorem+0xdc>
	...

080058dc <_dtoa_r>:
 80058dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058de:	b09d      	sub	sp, #116	; 0x74
 80058e0:	9202      	str	r2, [sp, #8]
 80058e2:	9303      	str	r3, [sp, #12]
 80058e4:	9b02      	ldr	r3, [sp, #8]
 80058e6:	9c03      	ldr	r4, [sp, #12]
 80058e8:	9308      	str	r3, [sp, #32]
 80058ea:	9409      	str	r4, [sp, #36]	; 0x24
 80058ec:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80058ee:	0007      	movs	r7, r0
 80058f0:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80058f2:	2c00      	cmp	r4, #0
 80058f4:	d10e      	bne.n	8005914 <_dtoa_r+0x38>
 80058f6:	2010      	movs	r0, #16
 80058f8:	f000 fe0e 	bl	8006518 <malloc>
 80058fc:	1e02      	subs	r2, r0, #0
 80058fe:	6278      	str	r0, [r7, #36]	; 0x24
 8005900:	d104      	bne.n	800590c <_dtoa_r+0x30>
 8005902:	21ea      	movs	r1, #234	; 0xea
 8005904:	4bc7      	ldr	r3, [pc, #796]	; (8005c24 <_dtoa_r+0x348>)
 8005906:	48c8      	ldr	r0, [pc, #800]	; (8005c28 <_dtoa_r+0x34c>)
 8005908:	f001 fc42 	bl	8007190 <__assert_func>
 800590c:	6044      	str	r4, [r0, #4]
 800590e:	6084      	str	r4, [r0, #8]
 8005910:	6004      	str	r4, [r0, #0]
 8005912:	60c4      	str	r4, [r0, #12]
 8005914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005916:	6819      	ldr	r1, [r3, #0]
 8005918:	2900      	cmp	r1, #0
 800591a:	d00a      	beq.n	8005932 <_dtoa_r+0x56>
 800591c:	685a      	ldr	r2, [r3, #4]
 800591e:	2301      	movs	r3, #1
 8005920:	4093      	lsls	r3, r2
 8005922:	604a      	str	r2, [r1, #4]
 8005924:	608b      	str	r3, [r1, #8]
 8005926:	0038      	movs	r0, r7
 8005928:	f000 fe58 	bl	80065dc <_Bfree>
 800592c:	2200      	movs	r2, #0
 800592e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005930:	601a      	str	r2, [r3, #0]
 8005932:	9b03      	ldr	r3, [sp, #12]
 8005934:	2b00      	cmp	r3, #0
 8005936:	da20      	bge.n	800597a <_dtoa_r+0x9e>
 8005938:	2301      	movs	r3, #1
 800593a:	602b      	str	r3, [r5, #0]
 800593c:	9b03      	ldr	r3, [sp, #12]
 800593e:	005b      	lsls	r3, r3, #1
 8005940:	085b      	lsrs	r3, r3, #1
 8005942:	9309      	str	r3, [sp, #36]	; 0x24
 8005944:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005946:	4bb9      	ldr	r3, [pc, #740]	; (8005c2c <_dtoa_r+0x350>)
 8005948:	4ab8      	ldr	r2, [pc, #736]	; (8005c2c <_dtoa_r+0x350>)
 800594a:	402b      	ands	r3, r5
 800594c:	4293      	cmp	r3, r2
 800594e:	d117      	bne.n	8005980 <_dtoa_r+0xa4>
 8005950:	4bb7      	ldr	r3, [pc, #732]	; (8005c30 <_dtoa_r+0x354>)
 8005952:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005954:	0328      	lsls	r0, r5, #12
 8005956:	6013      	str	r3, [r2, #0]
 8005958:	9b02      	ldr	r3, [sp, #8]
 800595a:	0b00      	lsrs	r0, r0, #12
 800595c:	4318      	orrs	r0, r3
 800595e:	d101      	bne.n	8005964 <_dtoa_r+0x88>
 8005960:	f000 fdbf 	bl	80064e2 <_dtoa_r+0xc06>
 8005964:	48b3      	ldr	r0, [pc, #716]	; (8005c34 <_dtoa_r+0x358>)
 8005966:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005968:	9006      	str	r0, [sp, #24]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d002      	beq.n	8005974 <_dtoa_r+0x98>
 800596e:	4bb2      	ldr	r3, [pc, #712]	; (8005c38 <_dtoa_r+0x35c>)
 8005970:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005972:	6013      	str	r3, [r2, #0]
 8005974:	9806      	ldr	r0, [sp, #24]
 8005976:	b01d      	add	sp, #116	; 0x74
 8005978:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800597a:	2300      	movs	r3, #0
 800597c:	602b      	str	r3, [r5, #0]
 800597e:	e7e1      	b.n	8005944 <_dtoa_r+0x68>
 8005980:	9b08      	ldr	r3, [sp, #32]
 8005982:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005984:	9312      	str	r3, [sp, #72]	; 0x48
 8005986:	9413      	str	r4, [sp, #76]	; 0x4c
 8005988:	9812      	ldr	r0, [sp, #72]	; 0x48
 800598a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800598c:	2200      	movs	r2, #0
 800598e:	2300      	movs	r3, #0
 8005990:	f7fa fd5c 	bl	800044c <__aeabi_dcmpeq>
 8005994:	1e04      	subs	r4, r0, #0
 8005996:	d009      	beq.n	80059ac <_dtoa_r+0xd0>
 8005998:	2301      	movs	r3, #1
 800599a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800599c:	6013      	str	r3, [r2, #0]
 800599e:	4ba7      	ldr	r3, [pc, #668]	; (8005c3c <_dtoa_r+0x360>)
 80059a0:	9306      	str	r3, [sp, #24]
 80059a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d0e5      	beq.n	8005974 <_dtoa_r+0x98>
 80059a8:	4ba5      	ldr	r3, [pc, #660]	; (8005c40 <_dtoa_r+0x364>)
 80059aa:	e7e1      	b.n	8005970 <_dtoa_r+0x94>
 80059ac:	ab1a      	add	r3, sp, #104	; 0x68
 80059ae:	9301      	str	r3, [sp, #4]
 80059b0:	ab1b      	add	r3, sp, #108	; 0x6c
 80059b2:	9300      	str	r3, [sp, #0]
 80059b4:	0038      	movs	r0, r7
 80059b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80059b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80059ba:	f001 f903 	bl	8006bc4 <__d2b>
 80059be:	006e      	lsls	r6, r5, #1
 80059c0:	9005      	str	r0, [sp, #20]
 80059c2:	0d76      	lsrs	r6, r6, #21
 80059c4:	d100      	bne.n	80059c8 <_dtoa_r+0xec>
 80059c6:	e07c      	b.n	8005ac2 <_dtoa_r+0x1e6>
 80059c8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80059ca:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80059cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80059ce:	4a9d      	ldr	r2, [pc, #628]	; (8005c44 <_dtoa_r+0x368>)
 80059d0:	031b      	lsls	r3, r3, #12
 80059d2:	0b1b      	lsrs	r3, r3, #12
 80059d4:	431a      	orrs	r2, r3
 80059d6:	0011      	movs	r1, r2
 80059d8:	4b9b      	ldr	r3, [pc, #620]	; (8005c48 <_dtoa_r+0x36c>)
 80059da:	9418      	str	r4, [sp, #96]	; 0x60
 80059dc:	18f6      	adds	r6, r6, r3
 80059de:	2200      	movs	r2, #0
 80059e0:	4b9a      	ldr	r3, [pc, #616]	; (8005c4c <_dtoa_r+0x370>)
 80059e2:	f7fb ff0b 	bl	80017fc <__aeabi_dsub>
 80059e6:	4a9a      	ldr	r2, [pc, #616]	; (8005c50 <_dtoa_r+0x374>)
 80059e8:	4b9a      	ldr	r3, [pc, #616]	; (8005c54 <_dtoa_r+0x378>)
 80059ea:	f7fb fc9b 	bl	8001324 <__aeabi_dmul>
 80059ee:	4a9a      	ldr	r2, [pc, #616]	; (8005c58 <_dtoa_r+0x37c>)
 80059f0:	4b9a      	ldr	r3, [pc, #616]	; (8005c5c <_dtoa_r+0x380>)
 80059f2:	f7fa fd59 	bl	80004a8 <__aeabi_dadd>
 80059f6:	0004      	movs	r4, r0
 80059f8:	0030      	movs	r0, r6
 80059fa:	000d      	movs	r5, r1
 80059fc:	f7fc fae4 	bl	8001fc8 <__aeabi_i2d>
 8005a00:	4a97      	ldr	r2, [pc, #604]	; (8005c60 <_dtoa_r+0x384>)
 8005a02:	4b98      	ldr	r3, [pc, #608]	; (8005c64 <_dtoa_r+0x388>)
 8005a04:	f7fb fc8e 	bl	8001324 <__aeabi_dmul>
 8005a08:	0002      	movs	r2, r0
 8005a0a:	000b      	movs	r3, r1
 8005a0c:	0020      	movs	r0, r4
 8005a0e:	0029      	movs	r1, r5
 8005a10:	f7fa fd4a 	bl	80004a8 <__aeabi_dadd>
 8005a14:	0004      	movs	r4, r0
 8005a16:	000d      	movs	r5, r1
 8005a18:	f7fc faa0 	bl	8001f5c <__aeabi_d2iz>
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	9002      	str	r0, [sp, #8]
 8005a20:	2300      	movs	r3, #0
 8005a22:	0020      	movs	r0, r4
 8005a24:	0029      	movs	r1, r5
 8005a26:	f7fa fd17 	bl	8000458 <__aeabi_dcmplt>
 8005a2a:	2800      	cmp	r0, #0
 8005a2c:	d00b      	beq.n	8005a46 <_dtoa_r+0x16a>
 8005a2e:	9802      	ldr	r0, [sp, #8]
 8005a30:	f7fc faca 	bl	8001fc8 <__aeabi_i2d>
 8005a34:	002b      	movs	r3, r5
 8005a36:	0022      	movs	r2, r4
 8005a38:	f7fa fd08 	bl	800044c <__aeabi_dcmpeq>
 8005a3c:	4243      	negs	r3, r0
 8005a3e:	4158      	adcs	r0, r3
 8005a40:	9b02      	ldr	r3, [sp, #8]
 8005a42:	1a1b      	subs	r3, r3, r0
 8005a44:	9302      	str	r3, [sp, #8]
 8005a46:	2301      	movs	r3, #1
 8005a48:	9316      	str	r3, [sp, #88]	; 0x58
 8005a4a:	9b02      	ldr	r3, [sp, #8]
 8005a4c:	2b16      	cmp	r3, #22
 8005a4e:	d80f      	bhi.n	8005a70 <_dtoa_r+0x194>
 8005a50:	9812      	ldr	r0, [sp, #72]	; 0x48
 8005a52:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005a54:	00da      	lsls	r2, r3, #3
 8005a56:	4b84      	ldr	r3, [pc, #528]	; (8005c68 <_dtoa_r+0x38c>)
 8005a58:	189b      	adds	r3, r3, r2
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	f7fa fcfb 	bl	8000458 <__aeabi_dcmplt>
 8005a62:	2800      	cmp	r0, #0
 8005a64:	d049      	beq.n	8005afa <_dtoa_r+0x21e>
 8005a66:	9b02      	ldr	r3, [sp, #8]
 8005a68:	3b01      	subs	r3, #1
 8005a6a:	9302      	str	r3, [sp, #8]
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	9316      	str	r3, [sp, #88]	; 0x58
 8005a70:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005a72:	1b9e      	subs	r6, r3, r6
 8005a74:	2300      	movs	r3, #0
 8005a76:	930a      	str	r3, [sp, #40]	; 0x28
 8005a78:	0033      	movs	r3, r6
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	930d      	str	r3, [sp, #52]	; 0x34
 8005a7e:	d504      	bpl.n	8005a8a <_dtoa_r+0x1ae>
 8005a80:	2301      	movs	r3, #1
 8005a82:	1b9b      	subs	r3, r3, r6
 8005a84:	930a      	str	r3, [sp, #40]	; 0x28
 8005a86:	2300      	movs	r3, #0
 8005a88:	930d      	str	r3, [sp, #52]	; 0x34
 8005a8a:	9b02      	ldr	r3, [sp, #8]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	db36      	blt.n	8005afe <_dtoa_r+0x222>
 8005a90:	9a02      	ldr	r2, [sp, #8]
 8005a92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a94:	4694      	mov	ip, r2
 8005a96:	4463      	add	r3, ip
 8005a98:	930d      	str	r3, [sp, #52]	; 0x34
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	9215      	str	r2, [sp, #84]	; 0x54
 8005a9e:	930e      	str	r3, [sp, #56]	; 0x38
 8005aa0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005aa2:	2401      	movs	r4, #1
 8005aa4:	2b09      	cmp	r3, #9
 8005aa6:	d864      	bhi.n	8005b72 <_dtoa_r+0x296>
 8005aa8:	2b05      	cmp	r3, #5
 8005aaa:	dd02      	ble.n	8005ab2 <_dtoa_r+0x1d6>
 8005aac:	2400      	movs	r4, #0
 8005aae:	3b04      	subs	r3, #4
 8005ab0:	9322      	str	r3, [sp, #136]	; 0x88
 8005ab2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ab4:	1e98      	subs	r0, r3, #2
 8005ab6:	2803      	cmp	r0, #3
 8005ab8:	d864      	bhi.n	8005b84 <_dtoa_r+0x2a8>
 8005aba:	f7fa fb2d 	bl	8000118 <__gnu_thumb1_case_uqi>
 8005abe:	3829      	.short	0x3829
 8005ac0:	5836      	.short	0x5836
 8005ac2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005ac4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005ac6:	189e      	adds	r6, r3, r2
 8005ac8:	4b68      	ldr	r3, [pc, #416]	; (8005c6c <_dtoa_r+0x390>)
 8005aca:	18f2      	adds	r2, r6, r3
 8005acc:	2a20      	cmp	r2, #32
 8005ace:	dd0f      	ble.n	8005af0 <_dtoa_r+0x214>
 8005ad0:	2340      	movs	r3, #64	; 0x40
 8005ad2:	1a9b      	subs	r3, r3, r2
 8005ad4:	409d      	lsls	r5, r3
 8005ad6:	4b66      	ldr	r3, [pc, #408]	; (8005c70 <_dtoa_r+0x394>)
 8005ad8:	9802      	ldr	r0, [sp, #8]
 8005ada:	18f3      	adds	r3, r6, r3
 8005adc:	40d8      	lsrs	r0, r3
 8005ade:	4328      	orrs	r0, r5
 8005ae0:	f7fc faa2 	bl	8002028 <__aeabi_ui2d>
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	4c63      	ldr	r4, [pc, #396]	; (8005c74 <_dtoa_r+0x398>)
 8005ae8:	3e01      	subs	r6, #1
 8005aea:	1909      	adds	r1, r1, r4
 8005aec:	9318      	str	r3, [sp, #96]	; 0x60
 8005aee:	e776      	b.n	80059de <_dtoa_r+0x102>
 8005af0:	2320      	movs	r3, #32
 8005af2:	9802      	ldr	r0, [sp, #8]
 8005af4:	1a9b      	subs	r3, r3, r2
 8005af6:	4098      	lsls	r0, r3
 8005af8:	e7f2      	b.n	8005ae0 <_dtoa_r+0x204>
 8005afa:	9016      	str	r0, [sp, #88]	; 0x58
 8005afc:	e7b8      	b.n	8005a70 <_dtoa_r+0x194>
 8005afe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b00:	9a02      	ldr	r2, [sp, #8]
 8005b02:	1a9b      	subs	r3, r3, r2
 8005b04:	930a      	str	r3, [sp, #40]	; 0x28
 8005b06:	4253      	negs	r3, r2
 8005b08:	930e      	str	r3, [sp, #56]	; 0x38
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	9315      	str	r3, [sp, #84]	; 0x54
 8005b0e:	e7c7      	b.n	8005aa0 <_dtoa_r+0x1c4>
 8005b10:	2300      	movs	r3, #0
 8005b12:	930f      	str	r3, [sp, #60]	; 0x3c
 8005b14:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005b16:	930c      	str	r3, [sp, #48]	; 0x30
 8005b18:	9307      	str	r3, [sp, #28]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	dc13      	bgt.n	8005b46 <_dtoa_r+0x26a>
 8005b1e:	2301      	movs	r3, #1
 8005b20:	001a      	movs	r2, r3
 8005b22:	930c      	str	r3, [sp, #48]	; 0x30
 8005b24:	9307      	str	r3, [sp, #28]
 8005b26:	9223      	str	r2, [sp, #140]	; 0x8c
 8005b28:	e00d      	b.n	8005b46 <_dtoa_r+0x26a>
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e7f1      	b.n	8005b12 <_dtoa_r+0x236>
 8005b2e:	2300      	movs	r3, #0
 8005b30:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8005b32:	930f      	str	r3, [sp, #60]	; 0x3c
 8005b34:	4694      	mov	ip, r2
 8005b36:	9b02      	ldr	r3, [sp, #8]
 8005b38:	4463      	add	r3, ip
 8005b3a:	930c      	str	r3, [sp, #48]	; 0x30
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	9307      	str	r3, [sp, #28]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	dc00      	bgt.n	8005b46 <_dtoa_r+0x26a>
 8005b44:	2301      	movs	r3, #1
 8005b46:	2200      	movs	r2, #0
 8005b48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b4a:	6042      	str	r2, [r0, #4]
 8005b4c:	3204      	adds	r2, #4
 8005b4e:	0015      	movs	r5, r2
 8005b50:	3514      	adds	r5, #20
 8005b52:	6841      	ldr	r1, [r0, #4]
 8005b54:	429d      	cmp	r5, r3
 8005b56:	d919      	bls.n	8005b8c <_dtoa_r+0x2b0>
 8005b58:	0038      	movs	r0, r7
 8005b5a:	f000 fcfb 	bl	8006554 <_Balloc>
 8005b5e:	9006      	str	r0, [sp, #24]
 8005b60:	2800      	cmp	r0, #0
 8005b62:	d117      	bne.n	8005b94 <_dtoa_r+0x2b8>
 8005b64:	21d5      	movs	r1, #213	; 0xd5
 8005b66:	0002      	movs	r2, r0
 8005b68:	4b43      	ldr	r3, [pc, #268]	; (8005c78 <_dtoa_r+0x39c>)
 8005b6a:	0049      	lsls	r1, r1, #1
 8005b6c:	e6cb      	b.n	8005906 <_dtoa_r+0x2a>
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e7de      	b.n	8005b30 <_dtoa_r+0x254>
 8005b72:	2300      	movs	r3, #0
 8005b74:	940f      	str	r4, [sp, #60]	; 0x3c
 8005b76:	9322      	str	r3, [sp, #136]	; 0x88
 8005b78:	3b01      	subs	r3, #1
 8005b7a:	930c      	str	r3, [sp, #48]	; 0x30
 8005b7c:	9307      	str	r3, [sp, #28]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	3313      	adds	r3, #19
 8005b82:	e7d0      	b.n	8005b26 <_dtoa_r+0x24a>
 8005b84:	2301      	movs	r3, #1
 8005b86:	930f      	str	r3, [sp, #60]	; 0x3c
 8005b88:	3b02      	subs	r3, #2
 8005b8a:	e7f6      	b.n	8005b7a <_dtoa_r+0x29e>
 8005b8c:	3101      	adds	r1, #1
 8005b8e:	6041      	str	r1, [r0, #4]
 8005b90:	0052      	lsls	r2, r2, #1
 8005b92:	e7dc      	b.n	8005b4e <_dtoa_r+0x272>
 8005b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b96:	9a06      	ldr	r2, [sp, #24]
 8005b98:	601a      	str	r2, [r3, #0]
 8005b9a:	9b07      	ldr	r3, [sp, #28]
 8005b9c:	2b0e      	cmp	r3, #14
 8005b9e:	d900      	bls.n	8005ba2 <_dtoa_r+0x2c6>
 8005ba0:	e0eb      	b.n	8005d7a <_dtoa_r+0x49e>
 8005ba2:	2c00      	cmp	r4, #0
 8005ba4:	d100      	bne.n	8005ba8 <_dtoa_r+0x2cc>
 8005ba6:	e0e8      	b.n	8005d7a <_dtoa_r+0x49e>
 8005ba8:	9b02      	ldr	r3, [sp, #8]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	dd68      	ble.n	8005c80 <_dtoa_r+0x3a4>
 8005bae:	001a      	movs	r2, r3
 8005bb0:	210f      	movs	r1, #15
 8005bb2:	4b2d      	ldr	r3, [pc, #180]	; (8005c68 <_dtoa_r+0x38c>)
 8005bb4:	400a      	ands	r2, r1
 8005bb6:	00d2      	lsls	r2, r2, #3
 8005bb8:	189b      	adds	r3, r3, r2
 8005bba:	681d      	ldr	r5, [r3, #0]
 8005bbc:	685e      	ldr	r6, [r3, #4]
 8005bbe:	9b02      	ldr	r3, [sp, #8]
 8005bc0:	111c      	asrs	r4, r3, #4
 8005bc2:	2302      	movs	r3, #2
 8005bc4:	9310      	str	r3, [sp, #64]	; 0x40
 8005bc6:	9b02      	ldr	r3, [sp, #8]
 8005bc8:	05db      	lsls	r3, r3, #23
 8005bca:	d50b      	bpl.n	8005be4 <_dtoa_r+0x308>
 8005bcc:	4b2b      	ldr	r3, [pc, #172]	; (8005c7c <_dtoa_r+0x3a0>)
 8005bce:	400c      	ands	r4, r1
 8005bd0:	6a1a      	ldr	r2, [r3, #32]
 8005bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd4:	9812      	ldr	r0, [sp, #72]	; 0x48
 8005bd6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005bd8:	f7fa ffa2 	bl	8000b20 <__aeabi_ddiv>
 8005bdc:	2303      	movs	r3, #3
 8005bde:	9008      	str	r0, [sp, #32]
 8005be0:	9109      	str	r1, [sp, #36]	; 0x24
 8005be2:	9310      	str	r3, [sp, #64]	; 0x40
 8005be4:	4b25      	ldr	r3, [pc, #148]	; (8005c7c <_dtoa_r+0x3a0>)
 8005be6:	9314      	str	r3, [sp, #80]	; 0x50
 8005be8:	2c00      	cmp	r4, #0
 8005bea:	d108      	bne.n	8005bfe <_dtoa_r+0x322>
 8005bec:	9808      	ldr	r0, [sp, #32]
 8005bee:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005bf0:	002a      	movs	r2, r5
 8005bf2:	0033      	movs	r3, r6
 8005bf4:	f7fa ff94 	bl	8000b20 <__aeabi_ddiv>
 8005bf8:	9008      	str	r0, [sp, #32]
 8005bfa:	9109      	str	r1, [sp, #36]	; 0x24
 8005bfc:	e05c      	b.n	8005cb8 <_dtoa_r+0x3dc>
 8005bfe:	2301      	movs	r3, #1
 8005c00:	421c      	tst	r4, r3
 8005c02:	d00b      	beq.n	8005c1c <_dtoa_r+0x340>
 8005c04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005c06:	0028      	movs	r0, r5
 8005c08:	3301      	adds	r3, #1
 8005c0a:	9310      	str	r3, [sp, #64]	; 0x40
 8005c0c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005c0e:	0031      	movs	r1, r6
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	f7fb fb86 	bl	8001324 <__aeabi_dmul>
 8005c18:	0005      	movs	r5, r0
 8005c1a:	000e      	movs	r6, r1
 8005c1c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005c1e:	1064      	asrs	r4, r4, #1
 8005c20:	3308      	adds	r3, #8
 8005c22:	e7e0      	b.n	8005be6 <_dtoa_r+0x30a>
 8005c24:	08007efd 	.word	0x08007efd
 8005c28:	08007f14 	.word	0x08007f14
 8005c2c:	7ff00000 	.word	0x7ff00000
 8005c30:	0000270f 	.word	0x0000270f
 8005c34:	08007ef9 	.word	0x08007ef9
 8005c38:	08007efc 	.word	0x08007efc
 8005c3c:	08007ecc 	.word	0x08007ecc
 8005c40:	08007ecd 	.word	0x08007ecd
 8005c44:	3ff00000 	.word	0x3ff00000
 8005c48:	fffffc01 	.word	0xfffffc01
 8005c4c:	3ff80000 	.word	0x3ff80000
 8005c50:	636f4361 	.word	0x636f4361
 8005c54:	3fd287a7 	.word	0x3fd287a7
 8005c58:	8b60c8b3 	.word	0x8b60c8b3
 8005c5c:	3fc68a28 	.word	0x3fc68a28
 8005c60:	509f79fb 	.word	0x509f79fb
 8005c64:	3fd34413 	.word	0x3fd34413
 8005c68:	08008008 	.word	0x08008008
 8005c6c:	00000432 	.word	0x00000432
 8005c70:	00000412 	.word	0x00000412
 8005c74:	fe100000 	.word	0xfe100000
 8005c78:	08007f6f 	.word	0x08007f6f
 8005c7c:	08007fe0 	.word	0x08007fe0
 8005c80:	2302      	movs	r3, #2
 8005c82:	9310      	str	r3, [sp, #64]	; 0x40
 8005c84:	9b02      	ldr	r3, [sp, #8]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d016      	beq.n	8005cb8 <_dtoa_r+0x3dc>
 8005c8a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8005c8c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005c8e:	425c      	negs	r4, r3
 8005c90:	230f      	movs	r3, #15
 8005c92:	4ab6      	ldr	r2, [pc, #728]	; (8005f6c <_dtoa_r+0x690>)
 8005c94:	4023      	ands	r3, r4
 8005c96:	00db      	lsls	r3, r3, #3
 8005c98:	18d3      	adds	r3, r2, r3
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	f7fb fb41 	bl	8001324 <__aeabi_dmul>
 8005ca2:	2601      	movs	r6, #1
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	9008      	str	r0, [sp, #32]
 8005ca8:	9109      	str	r1, [sp, #36]	; 0x24
 8005caa:	4db1      	ldr	r5, [pc, #708]	; (8005f70 <_dtoa_r+0x694>)
 8005cac:	1124      	asrs	r4, r4, #4
 8005cae:	2c00      	cmp	r4, #0
 8005cb0:	d000      	beq.n	8005cb4 <_dtoa_r+0x3d8>
 8005cb2:	e094      	b.n	8005dde <_dtoa_r+0x502>
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d19f      	bne.n	8005bf8 <_dtoa_r+0x31c>
 8005cb8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d100      	bne.n	8005cc0 <_dtoa_r+0x3e4>
 8005cbe:	e09b      	b.n	8005df8 <_dtoa_r+0x51c>
 8005cc0:	9c08      	ldr	r4, [sp, #32]
 8005cc2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	0020      	movs	r0, r4
 8005cc8:	0029      	movs	r1, r5
 8005cca:	4baa      	ldr	r3, [pc, #680]	; (8005f74 <_dtoa_r+0x698>)
 8005ccc:	f7fa fbc4 	bl	8000458 <__aeabi_dcmplt>
 8005cd0:	2800      	cmp	r0, #0
 8005cd2:	d100      	bne.n	8005cd6 <_dtoa_r+0x3fa>
 8005cd4:	e090      	b.n	8005df8 <_dtoa_r+0x51c>
 8005cd6:	9b07      	ldr	r3, [sp, #28]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d100      	bne.n	8005cde <_dtoa_r+0x402>
 8005cdc:	e08c      	b.n	8005df8 <_dtoa_r+0x51c>
 8005cde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	dd46      	ble.n	8005d72 <_dtoa_r+0x496>
 8005ce4:	9b02      	ldr	r3, [sp, #8]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	0020      	movs	r0, r4
 8005cea:	0029      	movs	r1, r5
 8005cec:	1e5e      	subs	r6, r3, #1
 8005cee:	4ba2      	ldr	r3, [pc, #648]	; (8005f78 <_dtoa_r+0x69c>)
 8005cf0:	f7fb fb18 	bl	8001324 <__aeabi_dmul>
 8005cf4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005cf6:	9008      	str	r0, [sp, #32]
 8005cf8:	9109      	str	r1, [sp, #36]	; 0x24
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	9310      	str	r3, [sp, #64]	; 0x40
 8005cfe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d00:	9810      	ldr	r0, [sp, #64]	; 0x40
 8005d02:	9c08      	ldr	r4, [sp, #32]
 8005d04:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005d06:	9314      	str	r3, [sp, #80]	; 0x50
 8005d08:	f7fc f95e 	bl	8001fc8 <__aeabi_i2d>
 8005d0c:	0022      	movs	r2, r4
 8005d0e:	002b      	movs	r3, r5
 8005d10:	f7fb fb08 	bl	8001324 <__aeabi_dmul>
 8005d14:	2200      	movs	r2, #0
 8005d16:	4b99      	ldr	r3, [pc, #612]	; (8005f7c <_dtoa_r+0x6a0>)
 8005d18:	f7fa fbc6 	bl	80004a8 <__aeabi_dadd>
 8005d1c:	9010      	str	r0, [sp, #64]	; 0x40
 8005d1e:	9111      	str	r1, [sp, #68]	; 0x44
 8005d20:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005d22:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005d24:	9208      	str	r2, [sp, #32]
 8005d26:	9309      	str	r3, [sp, #36]	; 0x24
 8005d28:	4a95      	ldr	r2, [pc, #596]	; (8005f80 <_dtoa_r+0x6a4>)
 8005d2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005d2c:	4694      	mov	ip, r2
 8005d2e:	4463      	add	r3, ip
 8005d30:	9317      	str	r3, [sp, #92]	; 0x5c
 8005d32:	9309      	str	r3, [sp, #36]	; 0x24
 8005d34:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d161      	bne.n	8005dfe <_dtoa_r+0x522>
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	0020      	movs	r0, r4
 8005d3e:	0029      	movs	r1, r5
 8005d40:	4b90      	ldr	r3, [pc, #576]	; (8005f84 <_dtoa_r+0x6a8>)
 8005d42:	f7fb fd5b 	bl	80017fc <__aeabi_dsub>
 8005d46:	9a08      	ldr	r2, [sp, #32]
 8005d48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005d4a:	0004      	movs	r4, r0
 8005d4c:	000d      	movs	r5, r1
 8005d4e:	f7fa fb97 	bl	8000480 <__aeabi_dcmpgt>
 8005d52:	2800      	cmp	r0, #0
 8005d54:	d000      	beq.n	8005d58 <_dtoa_r+0x47c>
 8005d56:	e2af      	b.n	80062b8 <_dtoa_r+0x9dc>
 8005d58:	488b      	ldr	r0, [pc, #556]	; (8005f88 <_dtoa_r+0x6ac>)
 8005d5a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005d5c:	4684      	mov	ip, r0
 8005d5e:	4461      	add	r1, ip
 8005d60:	000b      	movs	r3, r1
 8005d62:	0020      	movs	r0, r4
 8005d64:	0029      	movs	r1, r5
 8005d66:	9a08      	ldr	r2, [sp, #32]
 8005d68:	f7fa fb76 	bl	8000458 <__aeabi_dcmplt>
 8005d6c:	2800      	cmp	r0, #0
 8005d6e:	d000      	beq.n	8005d72 <_dtoa_r+0x496>
 8005d70:	e29f      	b.n	80062b2 <_dtoa_r+0x9d6>
 8005d72:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005d74:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8005d76:	9308      	str	r3, [sp, #32]
 8005d78:	9409      	str	r4, [sp, #36]	; 0x24
 8005d7a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	da00      	bge.n	8005d82 <_dtoa_r+0x4a6>
 8005d80:	e172      	b.n	8006068 <_dtoa_r+0x78c>
 8005d82:	9a02      	ldr	r2, [sp, #8]
 8005d84:	2a0e      	cmp	r2, #14
 8005d86:	dd00      	ble.n	8005d8a <_dtoa_r+0x4ae>
 8005d88:	e16e      	b.n	8006068 <_dtoa_r+0x78c>
 8005d8a:	4b78      	ldr	r3, [pc, #480]	; (8005f6c <_dtoa_r+0x690>)
 8005d8c:	00d2      	lsls	r2, r2, #3
 8005d8e:	189b      	adds	r3, r3, r2
 8005d90:	685c      	ldr	r4, [r3, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	930a      	str	r3, [sp, #40]	; 0x28
 8005d96:	940b      	str	r4, [sp, #44]	; 0x2c
 8005d98:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	db00      	blt.n	8005da0 <_dtoa_r+0x4c4>
 8005d9e:	e0f7      	b.n	8005f90 <_dtoa_r+0x6b4>
 8005da0:	9b07      	ldr	r3, [sp, #28]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	dd00      	ble.n	8005da8 <_dtoa_r+0x4cc>
 8005da6:	e0f3      	b.n	8005f90 <_dtoa_r+0x6b4>
 8005da8:	d000      	beq.n	8005dac <_dtoa_r+0x4d0>
 8005daa:	e282      	b.n	80062b2 <_dtoa_r+0x9d6>
 8005dac:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005dae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005db0:	2200      	movs	r2, #0
 8005db2:	4b74      	ldr	r3, [pc, #464]	; (8005f84 <_dtoa_r+0x6a8>)
 8005db4:	f7fb fab6 	bl	8001324 <__aeabi_dmul>
 8005db8:	9a08      	ldr	r2, [sp, #32]
 8005dba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dbc:	f7fa fb6a 	bl	8000494 <__aeabi_dcmpge>
 8005dc0:	9e07      	ldr	r6, [sp, #28]
 8005dc2:	0035      	movs	r5, r6
 8005dc4:	2800      	cmp	r0, #0
 8005dc6:	d000      	beq.n	8005dca <_dtoa_r+0x4ee>
 8005dc8:	e259      	b.n	800627e <_dtoa_r+0x9a2>
 8005dca:	9b06      	ldr	r3, [sp, #24]
 8005dcc:	9a06      	ldr	r2, [sp, #24]
 8005dce:	3301      	adds	r3, #1
 8005dd0:	9308      	str	r3, [sp, #32]
 8005dd2:	2331      	movs	r3, #49	; 0x31
 8005dd4:	7013      	strb	r3, [r2, #0]
 8005dd6:	9b02      	ldr	r3, [sp, #8]
 8005dd8:	3301      	adds	r3, #1
 8005dda:	9302      	str	r3, [sp, #8]
 8005ddc:	e254      	b.n	8006288 <_dtoa_r+0x9ac>
 8005dde:	4234      	tst	r4, r6
 8005de0:	d007      	beq.n	8005df2 <_dtoa_r+0x516>
 8005de2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005de4:	3301      	adds	r3, #1
 8005de6:	9310      	str	r3, [sp, #64]	; 0x40
 8005de8:	682a      	ldr	r2, [r5, #0]
 8005dea:	686b      	ldr	r3, [r5, #4]
 8005dec:	f7fb fa9a 	bl	8001324 <__aeabi_dmul>
 8005df0:	0033      	movs	r3, r6
 8005df2:	1064      	asrs	r4, r4, #1
 8005df4:	3508      	adds	r5, #8
 8005df6:	e75a      	b.n	8005cae <_dtoa_r+0x3d2>
 8005df8:	9e02      	ldr	r6, [sp, #8]
 8005dfa:	9b07      	ldr	r3, [sp, #28]
 8005dfc:	e780      	b.n	8005d00 <_dtoa_r+0x424>
 8005dfe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005e00:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005e02:	1e5a      	subs	r2, r3, #1
 8005e04:	4b59      	ldr	r3, [pc, #356]	; (8005f6c <_dtoa_r+0x690>)
 8005e06:	00d2      	lsls	r2, r2, #3
 8005e08:	189b      	adds	r3, r3, r2
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	2900      	cmp	r1, #0
 8005e10:	d051      	beq.n	8005eb6 <_dtoa_r+0x5da>
 8005e12:	2000      	movs	r0, #0
 8005e14:	495d      	ldr	r1, [pc, #372]	; (8005f8c <_dtoa_r+0x6b0>)
 8005e16:	f7fa fe83 	bl	8000b20 <__aeabi_ddiv>
 8005e1a:	9a08      	ldr	r2, [sp, #32]
 8005e1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e1e:	f7fb fced 	bl	80017fc <__aeabi_dsub>
 8005e22:	9a06      	ldr	r2, [sp, #24]
 8005e24:	9b06      	ldr	r3, [sp, #24]
 8005e26:	4694      	mov	ip, r2
 8005e28:	9317      	str	r3, [sp, #92]	; 0x5c
 8005e2a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005e2c:	9010      	str	r0, [sp, #64]	; 0x40
 8005e2e:	9111      	str	r1, [sp, #68]	; 0x44
 8005e30:	4463      	add	r3, ip
 8005e32:	9319      	str	r3, [sp, #100]	; 0x64
 8005e34:	0029      	movs	r1, r5
 8005e36:	0020      	movs	r0, r4
 8005e38:	f7fc f890 	bl	8001f5c <__aeabi_d2iz>
 8005e3c:	9014      	str	r0, [sp, #80]	; 0x50
 8005e3e:	f7fc f8c3 	bl	8001fc8 <__aeabi_i2d>
 8005e42:	0002      	movs	r2, r0
 8005e44:	000b      	movs	r3, r1
 8005e46:	0020      	movs	r0, r4
 8005e48:	0029      	movs	r1, r5
 8005e4a:	f7fb fcd7 	bl	80017fc <__aeabi_dsub>
 8005e4e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005e50:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005e52:	3301      	adds	r3, #1
 8005e54:	9308      	str	r3, [sp, #32]
 8005e56:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005e58:	0004      	movs	r4, r0
 8005e5a:	3330      	adds	r3, #48	; 0x30
 8005e5c:	7013      	strb	r3, [r2, #0]
 8005e5e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005e60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005e62:	000d      	movs	r5, r1
 8005e64:	f7fa faf8 	bl	8000458 <__aeabi_dcmplt>
 8005e68:	2800      	cmp	r0, #0
 8005e6a:	d175      	bne.n	8005f58 <_dtoa_r+0x67c>
 8005e6c:	0022      	movs	r2, r4
 8005e6e:	002b      	movs	r3, r5
 8005e70:	2000      	movs	r0, #0
 8005e72:	4940      	ldr	r1, [pc, #256]	; (8005f74 <_dtoa_r+0x698>)
 8005e74:	f7fb fcc2 	bl	80017fc <__aeabi_dsub>
 8005e78:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005e7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005e7c:	f7fa faec 	bl	8000458 <__aeabi_dcmplt>
 8005e80:	2800      	cmp	r0, #0
 8005e82:	d000      	beq.n	8005e86 <_dtoa_r+0x5aa>
 8005e84:	e0d2      	b.n	800602c <_dtoa_r+0x750>
 8005e86:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005e88:	9a08      	ldr	r2, [sp, #32]
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d100      	bne.n	8005e90 <_dtoa_r+0x5b4>
 8005e8e:	e770      	b.n	8005d72 <_dtoa_r+0x496>
 8005e90:	9810      	ldr	r0, [sp, #64]	; 0x40
 8005e92:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005e94:	2200      	movs	r2, #0
 8005e96:	4b38      	ldr	r3, [pc, #224]	; (8005f78 <_dtoa_r+0x69c>)
 8005e98:	f7fb fa44 	bl	8001324 <__aeabi_dmul>
 8005e9c:	4b36      	ldr	r3, [pc, #216]	; (8005f78 <_dtoa_r+0x69c>)
 8005e9e:	9010      	str	r0, [sp, #64]	; 0x40
 8005ea0:	9111      	str	r1, [sp, #68]	; 0x44
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	0020      	movs	r0, r4
 8005ea6:	0029      	movs	r1, r5
 8005ea8:	f7fb fa3c 	bl	8001324 <__aeabi_dmul>
 8005eac:	9b08      	ldr	r3, [sp, #32]
 8005eae:	0004      	movs	r4, r0
 8005eb0:	000d      	movs	r5, r1
 8005eb2:	9317      	str	r3, [sp, #92]	; 0x5c
 8005eb4:	e7be      	b.n	8005e34 <_dtoa_r+0x558>
 8005eb6:	9808      	ldr	r0, [sp, #32]
 8005eb8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005eba:	f7fb fa33 	bl	8001324 <__aeabi_dmul>
 8005ebe:	9a06      	ldr	r2, [sp, #24]
 8005ec0:	9b06      	ldr	r3, [sp, #24]
 8005ec2:	4694      	mov	ip, r2
 8005ec4:	9308      	str	r3, [sp, #32]
 8005ec6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005ec8:	9010      	str	r0, [sp, #64]	; 0x40
 8005eca:	9111      	str	r1, [sp, #68]	; 0x44
 8005ecc:	4463      	add	r3, ip
 8005ece:	9319      	str	r3, [sp, #100]	; 0x64
 8005ed0:	0029      	movs	r1, r5
 8005ed2:	0020      	movs	r0, r4
 8005ed4:	f7fc f842 	bl	8001f5c <__aeabi_d2iz>
 8005ed8:	9017      	str	r0, [sp, #92]	; 0x5c
 8005eda:	f7fc f875 	bl	8001fc8 <__aeabi_i2d>
 8005ede:	0002      	movs	r2, r0
 8005ee0:	000b      	movs	r3, r1
 8005ee2:	0020      	movs	r0, r4
 8005ee4:	0029      	movs	r1, r5
 8005ee6:	f7fb fc89 	bl	80017fc <__aeabi_dsub>
 8005eea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005eec:	9a08      	ldr	r2, [sp, #32]
 8005eee:	3330      	adds	r3, #48	; 0x30
 8005ef0:	7013      	strb	r3, [r2, #0]
 8005ef2:	0013      	movs	r3, r2
 8005ef4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	0004      	movs	r4, r0
 8005efa:	000d      	movs	r5, r1
 8005efc:	9308      	str	r3, [sp, #32]
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d12c      	bne.n	8005f5c <_dtoa_r+0x680>
 8005f02:	9810      	ldr	r0, [sp, #64]	; 0x40
 8005f04:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005f06:	9a06      	ldr	r2, [sp, #24]
 8005f08:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005f0a:	4694      	mov	ip, r2
 8005f0c:	4463      	add	r3, ip
 8005f0e:	2200      	movs	r2, #0
 8005f10:	9308      	str	r3, [sp, #32]
 8005f12:	4b1e      	ldr	r3, [pc, #120]	; (8005f8c <_dtoa_r+0x6b0>)
 8005f14:	f7fa fac8 	bl	80004a8 <__aeabi_dadd>
 8005f18:	0002      	movs	r2, r0
 8005f1a:	000b      	movs	r3, r1
 8005f1c:	0020      	movs	r0, r4
 8005f1e:	0029      	movs	r1, r5
 8005f20:	f7fa faae 	bl	8000480 <__aeabi_dcmpgt>
 8005f24:	2800      	cmp	r0, #0
 8005f26:	d000      	beq.n	8005f2a <_dtoa_r+0x64e>
 8005f28:	e080      	b.n	800602c <_dtoa_r+0x750>
 8005f2a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005f2c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f2e:	2000      	movs	r0, #0
 8005f30:	4916      	ldr	r1, [pc, #88]	; (8005f8c <_dtoa_r+0x6b0>)
 8005f32:	f7fb fc63 	bl	80017fc <__aeabi_dsub>
 8005f36:	0002      	movs	r2, r0
 8005f38:	000b      	movs	r3, r1
 8005f3a:	0020      	movs	r0, r4
 8005f3c:	0029      	movs	r1, r5
 8005f3e:	f7fa fa8b 	bl	8000458 <__aeabi_dcmplt>
 8005f42:	2800      	cmp	r0, #0
 8005f44:	d100      	bne.n	8005f48 <_dtoa_r+0x66c>
 8005f46:	e714      	b.n	8005d72 <_dtoa_r+0x496>
 8005f48:	9b08      	ldr	r3, [sp, #32]
 8005f4a:	001a      	movs	r2, r3
 8005f4c:	3a01      	subs	r2, #1
 8005f4e:	9208      	str	r2, [sp, #32]
 8005f50:	7812      	ldrb	r2, [r2, #0]
 8005f52:	2a30      	cmp	r2, #48	; 0x30
 8005f54:	d0f8      	beq.n	8005f48 <_dtoa_r+0x66c>
 8005f56:	9308      	str	r3, [sp, #32]
 8005f58:	9602      	str	r6, [sp, #8]
 8005f5a:	e055      	b.n	8006008 <_dtoa_r+0x72c>
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	4b06      	ldr	r3, [pc, #24]	; (8005f78 <_dtoa_r+0x69c>)
 8005f60:	f7fb f9e0 	bl	8001324 <__aeabi_dmul>
 8005f64:	0004      	movs	r4, r0
 8005f66:	000d      	movs	r5, r1
 8005f68:	e7b2      	b.n	8005ed0 <_dtoa_r+0x5f4>
 8005f6a:	46c0      	nop			; (mov r8, r8)
 8005f6c:	08008008 	.word	0x08008008
 8005f70:	08007fe0 	.word	0x08007fe0
 8005f74:	3ff00000 	.word	0x3ff00000
 8005f78:	40240000 	.word	0x40240000
 8005f7c:	401c0000 	.word	0x401c0000
 8005f80:	fcc00000 	.word	0xfcc00000
 8005f84:	40140000 	.word	0x40140000
 8005f88:	7cc00000 	.word	0x7cc00000
 8005f8c:	3fe00000 	.word	0x3fe00000
 8005f90:	9b07      	ldr	r3, [sp, #28]
 8005f92:	9e06      	ldr	r6, [sp, #24]
 8005f94:	3b01      	subs	r3, #1
 8005f96:	199b      	adds	r3, r3, r6
 8005f98:	930c      	str	r3, [sp, #48]	; 0x30
 8005f9a:	9c08      	ldr	r4, [sp, #32]
 8005f9c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005f9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005fa0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fa2:	0020      	movs	r0, r4
 8005fa4:	0029      	movs	r1, r5
 8005fa6:	f7fa fdbb 	bl	8000b20 <__aeabi_ddiv>
 8005faa:	f7fb ffd7 	bl	8001f5c <__aeabi_d2iz>
 8005fae:	9007      	str	r0, [sp, #28]
 8005fb0:	f7fc f80a 	bl	8001fc8 <__aeabi_i2d>
 8005fb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005fb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fb8:	f7fb f9b4 	bl	8001324 <__aeabi_dmul>
 8005fbc:	0002      	movs	r2, r0
 8005fbe:	000b      	movs	r3, r1
 8005fc0:	0020      	movs	r0, r4
 8005fc2:	0029      	movs	r1, r5
 8005fc4:	f7fb fc1a 	bl	80017fc <__aeabi_dsub>
 8005fc8:	0033      	movs	r3, r6
 8005fca:	9a07      	ldr	r2, [sp, #28]
 8005fcc:	3601      	adds	r6, #1
 8005fce:	3230      	adds	r2, #48	; 0x30
 8005fd0:	701a      	strb	r2, [r3, #0]
 8005fd2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005fd4:	9608      	str	r6, [sp, #32]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d139      	bne.n	800604e <_dtoa_r+0x772>
 8005fda:	0002      	movs	r2, r0
 8005fdc:	000b      	movs	r3, r1
 8005fde:	f7fa fa63 	bl	80004a8 <__aeabi_dadd>
 8005fe2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005fe4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fe6:	0004      	movs	r4, r0
 8005fe8:	000d      	movs	r5, r1
 8005fea:	f7fa fa49 	bl	8000480 <__aeabi_dcmpgt>
 8005fee:	2800      	cmp	r0, #0
 8005ff0:	d11b      	bne.n	800602a <_dtoa_r+0x74e>
 8005ff2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ff4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ff6:	0020      	movs	r0, r4
 8005ff8:	0029      	movs	r1, r5
 8005ffa:	f7fa fa27 	bl	800044c <__aeabi_dcmpeq>
 8005ffe:	2800      	cmp	r0, #0
 8006000:	d002      	beq.n	8006008 <_dtoa_r+0x72c>
 8006002:	9b07      	ldr	r3, [sp, #28]
 8006004:	07db      	lsls	r3, r3, #31
 8006006:	d410      	bmi.n	800602a <_dtoa_r+0x74e>
 8006008:	0038      	movs	r0, r7
 800600a:	9905      	ldr	r1, [sp, #20]
 800600c:	f000 fae6 	bl	80065dc <_Bfree>
 8006010:	2300      	movs	r3, #0
 8006012:	9a08      	ldr	r2, [sp, #32]
 8006014:	9802      	ldr	r0, [sp, #8]
 8006016:	7013      	strb	r3, [r2, #0]
 8006018:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800601a:	3001      	adds	r0, #1
 800601c:	6018      	str	r0, [r3, #0]
 800601e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006020:	2b00      	cmp	r3, #0
 8006022:	d100      	bne.n	8006026 <_dtoa_r+0x74a>
 8006024:	e4a6      	b.n	8005974 <_dtoa_r+0x98>
 8006026:	601a      	str	r2, [r3, #0]
 8006028:	e4a4      	b.n	8005974 <_dtoa_r+0x98>
 800602a:	9e02      	ldr	r6, [sp, #8]
 800602c:	9b08      	ldr	r3, [sp, #32]
 800602e:	9308      	str	r3, [sp, #32]
 8006030:	3b01      	subs	r3, #1
 8006032:	781a      	ldrb	r2, [r3, #0]
 8006034:	2a39      	cmp	r2, #57	; 0x39
 8006036:	d106      	bne.n	8006046 <_dtoa_r+0x76a>
 8006038:	9a06      	ldr	r2, [sp, #24]
 800603a:	429a      	cmp	r2, r3
 800603c:	d1f7      	bne.n	800602e <_dtoa_r+0x752>
 800603e:	2230      	movs	r2, #48	; 0x30
 8006040:	9906      	ldr	r1, [sp, #24]
 8006042:	3601      	adds	r6, #1
 8006044:	700a      	strb	r2, [r1, #0]
 8006046:	781a      	ldrb	r2, [r3, #0]
 8006048:	3201      	adds	r2, #1
 800604a:	701a      	strb	r2, [r3, #0]
 800604c:	e784      	b.n	8005f58 <_dtoa_r+0x67c>
 800604e:	2200      	movs	r2, #0
 8006050:	4baa      	ldr	r3, [pc, #680]	; (80062fc <_dtoa_r+0xa20>)
 8006052:	f7fb f967 	bl	8001324 <__aeabi_dmul>
 8006056:	2200      	movs	r2, #0
 8006058:	2300      	movs	r3, #0
 800605a:	0004      	movs	r4, r0
 800605c:	000d      	movs	r5, r1
 800605e:	f7fa f9f5 	bl	800044c <__aeabi_dcmpeq>
 8006062:	2800      	cmp	r0, #0
 8006064:	d09b      	beq.n	8005f9e <_dtoa_r+0x6c2>
 8006066:	e7cf      	b.n	8006008 <_dtoa_r+0x72c>
 8006068:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800606a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800606c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800606e:	2d00      	cmp	r5, #0
 8006070:	d012      	beq.n	8006098 <_dtoa_r+0x7bc>
 8006072:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006074:	2a01      	cmp	r2, #1
 8006076:	dc66      	bgt.n	8006146 <_dtoa_r+0x86a>
 8006078:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800607a:	2a00      	cmp	r2, #0
 800607c:	d05d      	beq.n	800613a <_dtoa_r+0x85e>
 800607e:	4aa0      	ldr	r2, [pc, #640]	; (8006300 <_dtoa_r+0xa24>)
 8006080:	189b      	adds	r3, r3, r2
 8006082:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006084:	2101      	movs	r1, #1
 8006086:	18d2      	adds	r2, r2, r3
 8006088:	920a      	str	r2, [sp, #40]	; 0x28
 800608a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800608c:	0038      	movs	r0, r7
 800608e:	18d3      	adds	r3, r2, r3
 8006090:	930d      	str	r3, [sp, #52]	; 0x34
 8006092:	f000 fb53 	bl	800673c <__i2b>
 8006096:	0005      	movs	r5, r0
 8006098:	2c00      	cmp	r4, #0
 800609a:	dd0e      	ble.n	80060ba <_dtoa_r+0x7de>
 800609c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800609e:	2b00      	cmp	r3, #0
 80060a0:	dd0b      	ble.n	80060ba <_dtoa_r+0x7de>
 80060a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80060a4:	0023      	movs	r3, r4
 80060a6:	4294      	cmp	r4, r2
 80060a8:	dd00      	ble.n	80060ac <_dtoa_r+0x7d0>
 80060aa:	0013      	movs	r3, r2
 80060ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80060ae:	1ae4      	subs	r4, r4, r3
 80060b0:	1ad2      	subs	r2, r2, r3
 80060b2:	920a      	str	r2, [sp, #40]	; 0x28
 80060b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80060b6:	1ad3      	subs	r3, r2, r3
 80060b8:	930d      	str	r3, [sp, #52]	; 0x34
 80060ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d01f      	beq.n	8006100 <_dtoa_r+0x824>
 80060c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d054      	beq.n	8006170 <_dtoa_r+0x894>
 80060c6:	2e00      	cmp	r6, #0
 80060c8:	dd11      	ble.n	80060ee <_dtoa_r+0x812>
 80060ca:	0029      	movs	r1, r5
 80060cc:	0032      	movs	r2, r6
 80060ce:	0038      	movs	r0, r7
 80060d0:	f000 fbfa 	bl	80068c8 <__pow5mult>
 80060d4:	9a05      	ldr	r2, [sp, #20]
 80060d6:	0001      	movs	r1, r0
 80060d8:	0005      	movs	r5, r0
 80060da:	0038      	movs	r0, r7
 80060dc:	f000 fb44 	bl	8006768 <__multiply>
 80060e0:	9905      	ldr	r1, [sp, #20]
 80060e2:	9014      	str	r0, [sp, #80]	; 0x50
 80060e4:	0038      	movs	r0, r7
 80060e6:	f000 fa79 	bl	80065dc <_Bfree>
 80060ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80060ec:	9305      	str	r3, [sp, #20]
 80060ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060f0:	1b9a      	subs	r2, r3, r6
 80060f2:	42b3      	cmp	r3, r6
 80060f4:	d004      	beq.n	8006100 <_dtoa_r+0x824>
 80060f6:	0038      	movs	r0, r7
 80060f8:	9905      	ldr	r1, [sp, #20]
 80060fa:	f000 fbe5 	bl	80068c8 <__pow5mult>
 80060fe:	9005      	str	r0, [sp, #20]
 8006100:	2101      	movs	r1, #1
 8006102:	0038      	movs	r0, r7
 8006104:	f000 fb1a 	bl	800673c <__i2b>
 8006108:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800610a:	0006      	movs	r6, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	dd31      	ble.n	8006174 <_dtoa_r+0x898>
 8006110:	001a      	movs	r2, r3
 8006112:	0001      	movs	r1, r0
 8006114:	0038      	movs	r0, r7
 8006116:	f000 fbd7 	bl	80068c8 <__pow5mult>
 800611a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800611c:	0006      	movs	r6, r0
 800611e:	2b01      	cmp	r3, #1
 8006120:	dd2d      	ble.n	800617e <_dtoa_r+0x8a2>
 8006122:	2300      	movs	r3, #0
 8006124:	930e      	str	r3, [sp, #56]	; 0x38
 8006126:	6933      	ldr	r3, [r6, #16]
 8006128:	3303      	adds	r3, #3
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	18f3      	adds	r3, r6, r3
 800612e:	6858      	ldr	r0, [r3, #4]
 8006130:	f000 fabc 	bl	80066ac <__hi0bits>
 8006134:	2320      	movs	r3, #32
 8006136:	1a18      	subs	r0, r3, r0
 8006138:	e039      	b.n	80061ae <_dtoa_r+0x8d2>
 800613a:	2336      	movs	r3, #54	; 0x36
 800613c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800613e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8006140:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006142:	1a9b      	subs	r3, r3, r2
 8006144:	e79d      	b.n	8006082 <_dtoa_r+0x7a6>
 8006146:	9b07      	ldr	r3, [sp, #28]
 8006148:	1e5e      	subs	r6, r3, #1
 800614a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800614c:	42b3      	cmp	r3, r6
 800614e:	db07      	blt.n	8006160 <_dtoa_r+0x884>
 8006150:	1b9e      	subs	r6, r3, r6
 8006152:	9b07      	ldr	r3, [sp, #28]
 8006154:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006156:	2b00      	cmp	r3, #0
 8006158:	da93      	bge.n	8006082 <_dtoa_r+0x7a6>
 800615a:	1ae4      	subs	r4, r4, r3
 800615c:	2300      	movs	r3, #0
 800615e:	e790      	b.n	8006082 <_dtoa_r+0x7a6>
 8006160:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006162:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006164:	1af3      	subs	r3, r6, r3
 8006166:	18d3      	adds	r3, r2, r3
 8006168:	960e      	str	r6, [sp, #56]	; 0x38
 800616a:	9315      	str	r3, [sp, #84]	; 0x54
 800616c:	2600      	movs	r6, #0
 800616e:	e7f0      	b.n	8006152 <_dtoa_r+0x876>
 8006170:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006172:	e7c0      	b.n	80060f6 <_dtoa_r+0x81a>
 8006174:	2300      	movs	r3, #0
 8006176:	930e      	str	r3, [sp, #56]	; 0x38
 8006178:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800617a:	2b01      	cmp	r3, #1
 800617c:	dc13      	bgt.n	80061a6 <_dtoa_r+0x8ca>
 800617e:	2300      	movs	r3, #0
 8006180:	930e      	str	r3, [sp, #56]	; 0x38
 8006182:	9b08      	ldr	r3, [sp, #32]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d10e      	bne.n	80061a6 <_dtoa_r+0x8ca>
 8006188:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800618a:	031b      	lsls	r3, r3, #12
 800618c:	d10b      	bne.n	80061a6 <_dtoa_r+0x8ca>
 800618e:	4b5d      	ldr	r3, [pc, #372]	; (8006304 <_dtoa_r+0xa28>)
 8006190:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006192:	4213      	tst	r3, r2
 8006194:	d007      	beq.n	80061a6 <_dtoa_r+0x8ca>
 8006196:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006198:	3301      	adds	r3, #1
 800619a:	930a      	str	r3, [sp, #40]	; 0x28
 800619c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800619e:	3301      	adds	r3, #1
 80061a0:	930d      	str	r3, [sp, #52]	; 0x34
 80061a2:	2301      	movs	r3, #1
 80061a4:	930e      	str	r3, [sp, #56]	; 0x38
 80061a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80061a8:	2001      	movs	r0, #1
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d1bb      	bne.n	8006126 <_dtoa_r+0x84a>
 80061ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061b0:	221f      	movs	r2, #31
 80061b2:	1818      	adds	r0, r3, r0
 80061b4:	0003      	movs	r3, r0
 80061b6:	4013      	ands	r3, r2
 80061b8:	4210      	tst	r0, r2
 80061ba:	d046      	beq.n	800624a <_dtoa_r+0x96e>
 80061bc:	3201      	adds	r2, #1
 80061be:	1ad2      	subs	r2, r2, r3
 80061c0:	2a04      	cmp	r2, #4
 80061c2:	dd3f      	ble.n	8006244 <_dtoa_r+0x968>
 80061c4:	221c      	movs	r2, #28
 80061c6:	1ad3      	subs	r3, r2, r3
 80061c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80061ca:	18e4      	adds	r4, r4, r3
 80061cc:	18d2      	adds	r2, r2, r3
 80061ce:	920a      	str	r2, [sp, #40]	; 0x28
 80061d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80061d2:	18d3      	adds	r3, r2, r3
 80061d4:	930d      	str	r3, [sp, #52]	; 0x34
 80061d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061d8:	2b00      	cmp	r3, #0
 80061da:	dd05      	ble.n	80061e8 <_dtoa_r+0x90c>
 80061dc:	001a      	movs	r2, r3
 80061de:	0038      	movs	r0, r7
 80061e0:	9905      	ldr	r1, [sp, #20]
 80061e2:	f000 fbcd 	bl	8006980 <__lshift>
 80061e6:	9005      	str	r0, [sp, #20]
 80061e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	dd05      	ble.n	80061fa <_dtoa_r+0x91e>
 80061ee:	0031      	movs	r1, r6
 80061f0:	001a      	movs	r2, r3
 80061f2:	0038      	movs	r0, r7
 80061f4:	f000 fbc4 	bl	8006980 <__lshift>
 80061f8:	0006      	movs	r6, r0
 80061fa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d026      	beq.n	800624e <_dtoa_r+0x972>
 8006200:	0031      	movs	r1, r6
 8006202:	9805      	ldr	r0, [sp, #20]
 8006204:	f000 fc2a 	bl	8006a5c <__mcmp>
 8006208:	2800      	cmp	r0, #0
 800620a:	da20      	bge.n	800624e <_dtoa_r+0x972>
 800620c:	9b02      	ldr	r3, [sp, #8]
 800620e:	220a      	movs	r2, #10
 8006210:	3b01      	subs	r3, #1
 8006212:	9302      	str	r3, [sp, #8]
 8006214:	0038      	movs	r0, r7
 8006216:	2300      	movs	r3, #0
 8006218:	9905      	ldr	r1, [sp, #20]
 800621a:	f000 fa03 	bl	8006624 <__multadd>
 800621e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006220:	9005      	str	r0, [sp, #20]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d100      	bne.n	8006228 <_dtoa_r+0x94c>
 8006226:	e166      	b.n	80064f6 <_dtoa_r+0xc1a>
 8006228:	2300      	movs	r3, #0
 800622a:	0029      	movs	r1, r5
 800622c:	220a      	movs	r2, #10
 800622e:	0038      	movs	r0, r7
 8006230:	f000 f9f8 	bl	8006624 <__multadd>
 8006234:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006236:	0005      	movs	r5, r0
 8006238:	2b00      	cmp	r3, #0
 800623a:	dc47      	bgt.n	80062cc <_dtoa_r+0x9f0>
 800623c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800623e:	2b02      	cmp	r3, #2
 8006240:	dc0d      	bgt.n	800625e <_dtoa_r+0x982>
 8006242:	e043      	b.n	80062cc <_dtoa_r+0x9f0>
 8006244:	2a04      	cmp	r2, #4
 8006246:	d0c6      	beq.n	80061d6 <_dtoa_r+0x8fa>
 8006248:	0013      	movs	r3, r2
 800624a:	331c      	adds	r3, #28
 800624c:	e7bc      	b.n	80061c8 <_dtoa_r+0x8ec>
 800624e:	9b07      	ldr	r3, [sp, #28]
 8006250:	2b00      	cmp	r3, #0
 8006252:	dc35      	bgt.n	80062c0 <_dtoa_r+0x9e4>
 8006254:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006256:	2b02      	cmp	r3, #2
 8006258:	dd32      	ble.n	80062c0 <_dtoa_r+0x9e4>
 800625a:	9b07      	ldr	r3, [sp, #28]
 800625c:	930c      	str	r3, [sp, #48]	; 0x30
 800625e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006260:	2b00      	cmp	r3, #0
 8006262:	d10c      	bne.n	800627e <_dtoa_r+0x9a2>
 8006264:	0031      	movs	r1, r6
 8006266:	2205      	movs	r2, #5
 8006268:	0038      	movs	r0, r7
 800626a:	f000 f9db 	bl	8006624 <__multadd>
 800626e:	0006      	movs	r6, r0
 8006270:	0001      	movs	r1, r0
 8006272:	9805      	ldr	r0, [sp, #20]
 8006274:	f000 fbf2 	bl	8006a5c <__mcmp>
 8006278:	2800      	cmp	r0, #0
 800627a:	dd00      	ble.n	800627e <_dtoa_r+0x9a2>
 800627c:	e5a5      	b.n	8005dca <_dtoa_r+0x4ee>
 800627e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006280:	43db      	mvns	r3, r3
 8006282:	9302      	str	r3, [sp, #8]
 8006284:	9b06      	ldr	r3, [sp, #24]
 8006286:	9308      	str	r3, [sp, #32]
 8006288:	2400      	movs	r4, #0
 800628a:	0031      	movs	r1, r6
 800628c:	0038      	movs	r0, r7
 800628e:	f000 f9a5 	bl	80065dc <_Bfree>
 8006292:	2d00      	cmp	r5, #0
 8006294:	d100      	bne.n	8006298 <_dtoa_r+0x9bc>
 8006296:	e6b7      	b.n	8006008 <_dtoa_r+0x72c>
 8006298:	2c00      	cmp	r4, #0
 800629a:	d005      	beq.n	80062a8 <_dtoa_r+0x9cc>
 800629c:	42ac      	cmp	r4, r5
 800629e:	d003      	beq.n	80062a8 <_dtoa_r+0x9cc>
 80062a0:	0021      	movs	r1, r4
 80062a2:	0038      	movs	r0, r7
 80062a4:	f000 f99a 	bl	80065dc <_Bfree>
 80062a8:	0029      	movs	r1, r5
 80062aa:	0038      	movs	r0, r7
 80062ac:	f000 f996 	bl	80065dc <_Bfree>
 80062b0:	e6aa      	b.n	8006008 <_dtoa_r+0x72c>
 80062b2:	2600      	movs	r6, #0
 80062b4:	0035      	movs	r5, r6
 80062b6:	e7e2      	b.n	800627e <_dtoa_r+0x9a2>
 80062b8:	9602      	str	r6, [sp, #8]
 80062ba:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80062bc:	0035      	movs	r5, r6
 80062be:	e584      	b.n	8005dca <_dtoa_r+0x4ee>
 80062c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d100      	bne.n	80062c8 <_dtoa_r+0x9ec>
 80062c6:	e0ce      	b.n	8006466 <_dtoa_r+0xb8a>
 80062c8:	9b07      	ldr	r3, [sp, #28]
 80062ca:	930c      	str	r3, [sp, #48]	; 0x30
 80062cc:	2c00      	cmp	r4, #0
 80062ce:	dd05      	ble.n	80062dc <_dtoa_r+0xa00>
 80062d0:	0029      	movs	r1, r5
 80062d2:	0022      	movs	r2, r4
 80062d4:	0038      	movs	r0, r7
 80062d6:	f000 fb53 	bl	8006980 <__lshift>
 80062da:	0005      	movs	r5, r0
 80062dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062de:	0028      	movs	r0, r5
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d022      	beq.n	800632a <_dtoa_r+0xa4e>
 80062e4:	0038      	movs	r0, r7
 80062e6:	6869      	ldr	r1, [r5, #4]
 80062e8:	f000 f934 	bl	8006554 <_Balloc>
 80062ec:	1e04      	subs	r4, r0, #0
 80062ee:	d10f      	bne.n	8006310 <_dtoa_r+0xa34>
 80062f0:	0002      	movs	r2, r0
 80062f2:	4b05      	ldr	r3, [pc, #20]	; (8006308 <_dtoa_r+0xa2c>)
 80062f4:	4905      	ldr	r1, [pc, #20]	; (800630c <_dtoa_r+0xa30>)
 80062f6:	f7ff fb06 	bl	8005906 <_dtoa_r+0x2a>
 80062fa:	46c0      	nop			; (mov r8, r8)
 80062fc:	40240000 	.word	0x40240000
 8006300:	00000433 	.word	0x00000433
 8006304:	7ff00000 	.word	0x7ff00000
 8006308:	08007f6f 	.word	0x08007f6f
 800630c:	000002ea 	.word	0x000002ea
 8006310:	0029      	movs	r1, r5
 8006312:	692b      	ldr	r3, [r5, #16]
 8006314:	310c      	adds	r1, #12
 8006316:	1c9a      	adds	r2, r3, #2
 8006318:	0092      	lsls	r2, r2, #2
 800631a:	300c      	adds	r0, #12
 800631c:	f000 f911 	bl	8006542 <memcpy>
 8006320:	2201      	movs	r2, #1
 8006322:	0021      	movs	r1, r4
 8006324:	0038      	movs	r0, r7
 8006326:	f000 fb2b 	bl	8006980 <__lshift>
 800632a:	9b06      	ldr	r3, [sp, #24]
 800632c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800632e:	930a      	str	r3, [sp, #40]	; 0x28
 8006330:	3b01      	subs	r3, #1
 8006332:	189b      	adds	r3, r3, r2
 8006334:	2201      	movs	r2, #1
 8006336:	002c      	movs	r4, r5
 8006338:	0005      	movs	r5, r0
 800633a:	9314      	str	r3, [sp, #80]	; 0x50
 800633c:	9b08      	ldr	r3, [sp, #32]
 800633e:	4013      	ands	r3, r2
 8006340:	930f      	str	r3, [sp, #60]	; 0x3c
 8006342:	0031      	movs	r1, r6
 8006344:	9805      	ldr	r0, [sp, #20]
 8006346:	f7ff fa3d 	bl	80057c4 <quorem>
 800634a:	0003      	movs	r3, r0
 800634c:	0021      	movs	r1, r4
 800634e:	3330      	adds	r3, #48	; 0x30
 8006350:	900d      	str	r0, [sp, #52]	; 0x34
 8006352:	9805      	ldr	r0, [sp, #20]
 8006354:	9307      	str	r3, [sp, #28]
 8006356:	f000 fb81 	bl	8006a5c <__mcmp>
 800635a:	002a      	movs	r2, r5
 800635c:	900e      	str	r0, [sp, #56]	; 0x38
 800635e:	0031      	movs	r1, r6
 8006360:	0038      	movs	r0, r7
 8006362:	f000 fb97 	bl	8006a94 <__mdiff>
 8006366:	68c3      	ldr	r3, [r0, #12]
 8006368:	9008      	str	r0, [sp, #32]
 800636a:	9310      	str	r3, [sp, #64]	; 0x40
 800636c:	2301      	movs	r3, #1
 800636e:	930c      	str	r3, [sp, #48]	; 0x30
 8006370:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006372:	2b00      	cmp	r3, #0
 8006374:	d104      	bne.n	8006380 <_dtoa_r+0xaa4>
 8006376:	0001      	movs	r1, r0
 8006378:	9805      	ldr	r0, [sp, #20]
 800637a:	f000 fb6f 	bl	8006a5c <__mcmp>
 800637e:	900c      	str	r0, [sp, #48]	; 0x30
 8006380:	0038      	movs	r0, r7
 8006382:	9908      	ldr	r1, [sp, #32]
 8006384:	f000 f92a 	bl	80065dc <_Bfree>
 8006388:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800638a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800638c:	3301      	adds	r3, #1
 800638e:	9308      	str	r3, [sp, #32]
 8006390:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006392:	4313      	orrs	r3, r2
 8006394:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006396:	4313      	orrs	r3, r2
 8006398:	d10c      	bne.n	80063b4 <_dtoa_r+0xad8>
 800639a:	9b07      	ldr	r3, [sp, #28]
 800639c:	2b39      	cmp	r3, #57	; 0x39
 800639e:	d026      	beq.n	80063ee <_dtoa_r+0xb12>
 80063a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	dd02      	ble.n	80063ac <_dtoa_r+0xad0>
 80063a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063a8:	3331      	adds	r3, #49	; 0x31
 80063aa:	9307      	str	r3, [sp, #28]
 80063ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063ae:	9a07      	ldr	r2, [sp, #28]
 80063b0:	701a      	strb	r2, [r3, #0]
 80063b2:	e76a      	b.n	800628a <_dtoa_r+0x9ae>
 80063b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	db04      	blt.n	80063c4 <_dtoa_r+0xae8>
 80063ba:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80063bc:	4313      	orrs	r3, r2
 80063be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80063c0:	4313      	orrs	r3, r2
 80063c2:	d11f      	bne.n	8006404 <_dtoa_r+0xb28>
 80063c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	ddf0      	ble.n	80063ac <_dtoa_r+0xad0>
 80063ca:	9905      	ldr	r1, [sp, #20]
 80063cc:	2201      	movs	r2, #1
 80063ce:	0038      	movs	r0, r7
 80063d0:	f000 fad6 	bl	8006980 <__lshift>
 80063d4:	0031      	movs	r1, r6
 80063d6:	9005      	str	r0, [sp, #20]
 80063d8:	f000 fb40 	bl	8006a5c <__mcmp>
 80063dc:	2800      	cmp	r0, #0
 80063de:	dc03      	bgt.n	80063e8 <_dtoa_r+0xb0c>
 80063e0:	d1e4      	bne.n	80063ac <_dtoa_r+0xad0>
 80063e2:	9b07      	ldr	r3, [sp, #28]
 80063e4:	07db      	lsls	r3, r3, #31
 80063e6:	d5e1      	bpl.n	80063ac <_dtoa_r+0xad0>
 80063e8:	9b07      	ldr	r3, [sp, #28]
 80063ea:	2b39      	cmp	r3, #57	; 0x39
 80063ec:	d1db      	bne.n	80063a6 <_dtoa_r+0xaca>
 80063ee:	2339      	movs	r3, #57	; 0x39
 80063f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80063f2:	7013      	strb	r3, [r2, #0]
 80063f4:	9b08      	ldr	r3, [sp, #32]
 80063f6:	9308      	str	r3, [sp, #32]
 80063f8:	3b01      	subs	r3, #1
 80063fa:	781a      	ldrb	r2, [r3, #0]
 80063fc:	2a39      	cmp	r2, #57	; 0x39
 80063fe:	d068      	beq.n	80064d2 <_dtoa_r+0xbf6>
 8006400:	3201      	adds	r2, #1
 8006402:	e7d5      	b.n	80063b0 <_dtoa_r+0xad4>
 8006404:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006406:	2b00      	cmp	r3, #0
 8006408:	dd07      	ble.n	800641a <_dtoa_r+0xb3e>
 800640a:	9b07      	ldr	r3, [sp, #28]
 800640c:	2b39      	cmp	r3, #57	; 0x39
 800640e:	d0ee      	beq.n	80063ee <_dtoa_r+0xb12>
 8006410:	9b07      	ldr	r3, [sp, #28]
 8006412:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006414:	3301      	adds	r3, #1
 8006416:	7013      	strb	r3, [r2, #0]
 8006418:	e737      	b.n	800628a <_dtoa_r+0x9ae>
 800641a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800641c:	9a07      	ldr	r2, [sp, #28]
 800641e:	701a      	strb	r2, [r3, #0]
 8006420:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006422:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006424:	4293      	cmp	r3, r2
 8006426:	d03e      	beq.n	80064a6 <_dtoa_r+0xbca>
 8006428:	2300      	movs	r3, #0
 800642a:	220a      	movs	r2, #10
 800642c:	9905      	ldr	r1, [sp, #20]
 800642e:	0038      	movs	r0, r7
 8006430:	f000 f8f8 	bl	8006624 <__multadd>
 8006434:	2300      	movs	r3, #0
 8006436:	9005      	str	r0, [sp, #20]
 8006438:	220a      	movs	r2, #10
 800643a:	0021      	movs	r1, r4
 800643c:	0038      	movs	r0, r7
 800643e:	42ac      	cmp	r4, r5
 8006440:	d106      	bne.n	8006450 <_dtoa_r+0xb74>
 8006442:	f000 f8ef 	bl	8006624 <__multadd>
 8006446:	0004      	movs	r4, r0
 8006448:	0005      	movs	r5, r0
 800644a:	9b08      	ldr	r3, [sp, #32]
 800644c:	930a      	str	r3, [sp, #40]	; 0x28
 800644e:	e778      	b.n	8006342 <_dtoa_r+0xa66>
 8006450:	f000 f8e8 	bl	8006624 <__multadd>
 8006454:	0029      	movs	r1, r5
 8006456:	0004      	movs	r4, r0
 8006458:	2300      	movs	r3, #0
 800645a:	220a      	movs	r2, #10
 800645c:	0038      	movs	r0, r7
 800645e:	f000 f8e1 	bl	8006624 <__multadd>
 8006462:	0005      	movs	r5, r0
 8006464:	e7f1      	b.n	800644a <_dtoa_r+0xb6e>
 8006466:	9b07      	ldr	r3, [sp, #28]
 8006468:	930c      	str	r3, [sp, #48]	; 0x30
 800646a:	2400      	movs	r4, #0
 800646c:	0031      	movs	r1, r6
 800646e:	9805      	ldr	r0, [sp, #20]
 8006470:	f7ff f9a8 	bl	80057c4 <quorem>
 8006474:	9b06      	ldr	r3, [sp, #24]
 8006476:	3030      	adds	r0, #48	; 0x30
 8006478:	5518      	strb	r0, [r3, r4]
 800647a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800647c:	3401      	adds	r4, #1
 800647e:	9007      	str	r0, [sp, #28]
 8006480:	42a3      	cmp	r3, r4
 8006482:	dd07      	ble.n	8006494 <_dtoa_r+0xbb8>
 8006484:	2300      	movs	r3, #0
 8006486:	220a      	movs	r2, #10
 8006488:	0038      	movs	r0, r7
 800648a:	9905      	ldr	r1, [sp, #20]
 800648c:	f000 f8ca 	bl	8006624 <__multadd>
 8006490:	9005      	str	r0, [sp, #20]
 8006492:	e7eb      	b.n	800646c <_dtoa_r+0xb90>
 8006494:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006496:	2001      	movs	r0, #1
 8006498:	2b00      	cmp	r3, #0
 800649a:	dd00      	ble.n	800649e <_dtoa_r+0xbc2>
 800649c:	0018      	movs	r0, r3
 800649e:	2400      	movs	r4, #0
 80064a0:	9b06      	ldr	r3, [sp, #24]
 80064a2:	181b      	adds	r3, r3, r0
 80064a4:	9308      	str	r3, [sp, #32]
 80064a6:	9905      	ldr	r1, [sp, #20]
 80064a8:	2201      	movs	r2, #1
 80064aa:	0038      	movs	r0, r7
 80064ac:	f000 fa68 	bl	8006980 <__lshift>
 80064b0:	0031      	movs	r1, r6
 80064b2:	9005      	str	r0, [sp, #20]
 80064b4:	f000 fad2 	bl	8006a5c <__mcmp>
 80064b8:	2800      	cmp	r0, #0
 80064ba:	dc9b      	bgt.n	80063f4 <_dtoa_r+0xb18>
 80064bc:	d102      	bne.n	80064c4 <_dtoa_r+0xbe8>
 80064be:	9b07      	ldr	r3, [sp, #28]
 80064c0:	07db      	lsls	r3, r3, #31
 80064c2:	d497      	bmi.n	80063f4 <_dtoa_r+0xb18>
 80064c4:	9b08      	ldr	r3, [sp, #32]
 80064c6:	9308      	str	r3, [sp, #32]
 80064c8:	3b01      	subs	r3, #1
 80064ca:	781a      	ldrb	r2, [r3, #0]
 80064cc:	2a30      	cmp	r2, #48	; 0x30
 80064ce:	d0fa      	beq.n	80064c6 <_dtoa_r+0xbea>
 80064d0:	e6db      	b.n	800628a <_dtoa_r+0x9ae>
 80064d2:	9a06      	ldr	r2, [sp, #24]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d18e      	bne.n	80063f6 <_dtoa_r+0xb1a>
 80064d8:	9b02      	ldr	r3, [sp, #8]
 80064da:	3301      	adds	r3, #1
 80064dc:	9302      	str	r3, [sp, #8]
 80064de:	2331      	movs	r3, #49	; 0x31
 80064e0:	e799      	b.n	8006416 <_dtoa_r+0xb3a>
 80064e2:	4b09      	ldr	r3, [pc, #36]	; (8006508 <_dtoa_r+0xc2c>)
 80064e4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80064e6:	9306      	str	r3, [sp, #24]
 80064e8:	4b08      	ldr	r3, [pc, #32]	; (800650c <_dtoa_r+0xc30>)
 80064ea:	2a00      	cmp	r2, #0
 80064ec:	d001      	beq.n	80064f2 <_dtoa_r+0xc16>
 80064ee:	f7ff fa3f 	bl	8005970 <_dtoa_r+0x94>
 80064f2:	f7ff fa3f 	bl	8005974 <_dtoa_r+0x98>
 80064f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	dcb6      	bgt.n	800646a <_dtoa_r+0xb8e>
 80064fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80064fe:	2b02      	cmp	r3, #2
 8006500:	dd00      	ble.n	8006504 <_dtoa_r+0xc28>
 8006502:	e6ac      	b.n	800625e <_dtoa_r+0x982>
 8006504:	e7b1      	b.n	800646a <_dtoa_r+0xb8e>
 8006506:	46c0      	nop			; (mov r8, r8)
 8006508:	08007ef0 	.word	0x08007ef0
 800650c:	08007ef8 	.word	0x08007ef8

08006510 <_localeconv_r>:
 8006510:	4800      	ldr	r0, [pc, #0]	; (8006514 <_localeconv_r+0x4>)
 8006512:	4770      	bx	lr
 8006514:	20000160 	.word	0x20000160

08006518 <malloc>:
 8006518:	b510      	push	{r4, lr}
 800651a:	4b03      	ldr	r3, [pc, #12]	; (8006528 <malloc+0x10>)
 800651c:	0001      	movs	r1, r0
 800651e:	6818      	ldr	r0, [r3, #0]
 8006520:	f000 fc4c 	bl	8006dbc <_malloc_r>
 8006524:	bd10      	pop	{r4, pc}
 8006526:	46c0      	nop			; (mov r8, r8)
 8006528:	2000000c 	.word	0x2000000c

0800652c <memchr>:
 800652c:	b2c9      	uxtb	r1, r1
 800652e:	1882      	adds	r2, r0, r2
 8006530:	4290      	cmp	r0, r2
 8006532:	d101      	bne.n	8006538 <memchr+0xc>
 8006534:	2000      	movs	r0, #0
 8006536:	4770      	bx	lr
 8006538:	7803      	ldrb	r3, [r0, #0]
 800653a:	428b      	cmp	r3, r1
 800653c:	d0fb      	beq.n	8006536 <memchr+0xa>
 800653e:	3001      	adds	r0, #1
 8006540:	e7f6      	b.n	8006530 <memchr+0x4>

08006542 <memcpy>:
 8006542:	2300      	movs	r3, #0
 8006544:	b510      	push	{r4, lr}
 8006546:	429a      	cmp	r2, r3
 8006548:	d100      	bne.n	800654c <memcpy+0xa>
 800654a:	bd10      	pop	{r4, pc}
 800654c:	5ccc      	ldrb	r4, [r1, r3]
 800654e:	54c4      	strb	r4, [r0, r3]
 8006550:	3301      	adds	r3, #1
 8006552:	e7f8      	b.n	8006546 <memcpy+0x4>

08006554 <_Balloc>:
 8006554:	b570      	push	{r4, r5, r6, lr}
 8006556:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006558:	0006      	movs	r6, r0
 800655a:	000c      	movs	r4, r1
 800655c:	2d00      	cmp	r5, #0
 800655e:	d10e      	bne.n	800657e <_Balloc+0x2a>
 8006560:	2010      	movs	r0, #16
 8006562:	f7ff ffd9 	bl	8006518 <malloc>
 8006566:	1e02      	subs	r2, r0, #0
 8006568:	6270      	str	r0, [r6, #36]	; 0x24
 800656a:	d104      	bne.n	8006576 <_Balloc+0x22>
 800656c:	2166      	movs	r1, #102	; 0x66
 800656e:	4b19      	ldr	r3, [pc, #100]	; (80065d4 <_Balloc+0x80>)
 8006570:	4819      	ldr	r0, [pc, #100]	; (80065d8 <_Balloc+0x84>)
 8006572:	f000 fe0d 	bl	8007190 <__assert_func>
 8006576:	6045      	str	r5, [r0, #4]
 8006578:	6085      	str	r5, [r0, #8]
 800657a:	6005      	str	r5, [r0, #0]
 800657c:	60c5      	str	r5, [r0, #12]
 800657e:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8006580:	68eb      	ldr	r3, [r5, #12]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d013      	beq.n	80065ae <_Balloc+0x5a>
 8006586:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006588:	00a2      	lsls	r2, r4, #2
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	189b      	adds	r3, r3, r2
 800658e:	6818      	ldr	r0, [r3, #0]
 8006590:	2800      	cmp	r0, #0
 8006592:	d118      	bne.n	80065c6 <_Balloc+0x72>
 8006594:	2101      	movs	r1, #1
 8006596:	000d      	movs	r5, r1
 8006598:	40a5      	lsls	r5, r4
 800659a:	1d6a      	adds	r2, r5, #5
 800659c:	0030      	movs	r0, r6
 800659e:	0092      	lsls	r2, r2, #2
 80065a0:	f000 fb74 	bl	8006c8c <_calloc_r>
 80065a4:	2800      	cmp	r0, #0
 80065a6:	d00c      	beq.n	80065c2 <_Balloc+0x6e>
 80065a8:	6044      	str	r4, [r0, #4]
 80065aa:	6085      	str	r5, [r0, #8]
 80065ac:	e00d      	b.n	80065ca <_Balloc+0x76>
 80065ae:	2221      	movs	r2, #33	; 0x21
 80065b0:	2104      	movs	r1, #4
 80065b2:	0030      	movs	r0, r6
 80065b4:	f000 fb6a 	bl	8006c8c <_calloc_r>
 80065b8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80065ba:	60e8      	str	r0, [r5, #12]
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d1e1      	bne.n	8006586 <_Balloc+0x32>
 80065c2:	2000      	movs	r0, #0
 80065c4:	bd70      	pop	{r4, r5, r6, pc}
 80065c6:	6802      	ldr	r2, [r0, #0]
 80065c8:	601a      	str	r2, [r3, #0]
 80065ca:	2300      	movs	r3, #0
 80065cc:	6103      	str	r3, [r0, #16]
 80065ce:	60c3      	str	r3, [r0, #12]
 80065d0:	e7f8      	b.n	80065c4 <_Balloc+0x70>
 80065d2:	46c0      	nop			; (mov r8, r8)
 80065d4:	08007efd 	.word	0x08007efd
 80065d8:	08007f80 	.word	0x08007f80

080065dc <_Bfree>:
 80065dc:	b570      	push	{r4, r5, r6, lr}
 80065de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80065e0:	0005      	movs	r5, r0
 80065e2:	000c      	movs	r4, r1
 80065e4:	2e00      	cmp	r6, #0
 80065e6:	d10e      	bne.n	8006606 <_Bfree+0x2a>
 80065e8:	2010      	movs	r0, #16
 80065ea:	f7ff ff95 	bl	8006518 <malloc>
 80065ee:	1e02      	subs	r2, r0, #0
 80065f0:	6268      	str	r0, [r5, #36]	; 0x24
 80065f2:	d104      	bne.n	80065fe <_Bfree+0x22>
 80065f4:	218a      	movs	r1, #138	; 0x8a
 80065f6:	4b09      	ldr	r3, [pc, #36]	; (800661c <_Bfree+0x40>)
 80065f8:	4809      	ldr	r0, [pc, #36]	; (8006620 <_Bfree+0x44>)
 80065fa:	f000 fdc9 	bl	8007190 <__assert_func>
 80065fe:	6046      	str	r6, [r0, #4]
 8006600:	6086      	str	r6, [r0, #8]
 8006602:	6006      	str	r6, [r0, #0]
 8006604:	60c6      	str	r6, [r0, #12]
 8006606:	2c00      	cmp	r4, #0
 8006608:	d007      	beq.n	800661a <_Bfree+0x3e>
 800660a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800660c:	6862      	ldr	r2, [r4, #4]
 800660e:	68db      	ldr	r3, [r3, #12]
 8006610:	0092      	lsls	r2, r2, #2
 8006612:	189b      	adds	r3, r3, r2
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	6022      	str	r2, [r4, #0]
 8006618:	601c      	str	r4, [r3, #0]
 800661a:	bd70      	pop	{r4, r5, r6, pc}
 800661c:	08007efd 	.word	0x08007efd
 8006620:	08007f80 	.word	0x08007f80

08006624 <__multadd>:
 8006624:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006626:	000e      	movs	r6, r1
 8006628:	9001      	str	r0, [sp, #4]
 800662a:	000c      	movs	r4, r1
 800662c:	001d      	movs	r5, r3
 800662e:	2000      	movs	r0, #0
 8006630:	690f      	ldr	r7, [r1, #16]
 8006632:	3614      	adds	r6, #20
 8006634:	6833      	ldr	r3, [r6, #0]
 8006636:	3001      	adds	r0, #1
 8006638:	b299      	uxth	r1, r3
 800663a:	4351      	muls	r1, r2
 800663c:	0c1b      	lsrs	r3, r3, #16
 800663e:	4353      	muls	r3, r2
 8006640:	1949      	adds	r1, r1, r5
 8006642:	0c0d      	lsrs	r5, r1, #16
 8006644:	195b      	adds	r3, r3, r5
 8006646:	0c1d      	lsrs	r5, r3, #16
 8006648:	b289      	uxth	r1, r1
 800664a:	041b      	lsls	r3, r3, #16
 800664c:	185b      	adds	r3, r3, r1
 800664e:	c608      	stmia	r6!, {r3}
 8006650:	4287      	cmp	r7, r0
 8006652:	dcef      	bgt.n	8006634 <__multadd+0x10>
 8006654:	2d00      	cmp	r5, #0
 8006656:	d022      	beq.n	800669e <__multadd+0x7a>
 8006658:	68a3      	ldr	r3, [r4, #8]
 800665a:	42bb      	cmp	r3, r7
 800665c:	dc19      	bgt.n	8006692 <__multadd+0x6e>
 800665e:	6863      	ldr	r3, [r4, #4]
 8006660:	9801      	ldr	r0, [sp, #4]
 8006662:	1c59      	adds	r1, r3, #1
 8006664:	f7ff ff76 	bl	8006554 <_Balloc>
 8006668:	1e06      	subs	r6, r0, #0
 800666a:	d105      	bne.n	8006678 <__multadd+0x54>
 800666c:	0002      	movs	r2, r0
 800666e:	21b5      	movs	r1, #181	; 0xb5
 8006670:	4b0c      	ldr	r3, [pc, #48]	; (80066a4 <__multadd+0x80>)
 8006672:	480d      	ldr	r0, [pc, #52]	; (80066a8 <__multadd+0x84>)
 8006674:	f000 fd8c 	bl	8007190 <__assert_func>
 8006678:	0021      	movs	r1, r4
 800667a:	6923      	ldr	r3, [r4, #16]
 800667c:	310c      	adds	r1, #12
 800667e:	1c9a      	adds	r2, r3, #2
 8006680:	0092      	lsls	r2, r2, #2
 8006682:	300c      	adds	r0, #12
 8006684:	f7ff ff5d 	bl	8006542 <memcpy>
 8006688:	0021      	movs	r1, r4
 800668a:	9801      	ldr	r0, [sp, #4]
 800668c:	f7ff ffa6 	bl	80065dc <_Bfree>
 8006690:	0034      	movs	r4, r6
 8006692:	1d3b      	adds	r3, r7, #4
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	18e3      	adds	r3, r4, r3
 8006698:	605d      	str	r5, [r3, #4]
 800669a:	1c7b      	adds	r3, r7, #1
 800669c:	6123      	str	r3, [r4, #16]
 800669e:	0020      	movs	r0, r4
 80066a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80066a2:	46c0      	nop			; (mov r8, r8)
 80066a4:	08007f6f 	.word	0x08007f6f
 80066a8:	08007f80 	.word	0x08007f80

080066ac <__hi0bits>:
 80066ac:	0003      	movs	r3, r0
 80066ae:	0c02      	lsrs	r2, r0, #16
 80066b0:	2000      	movs	r0, #0
 80066b2:	4282      	cmp	r2, r0
 80066b4:	d101      	bne.n	80066ba <__hi0bits+0xe>
 80066b6:	041b      	lsls	r3, r3, #16
 80066b8:	3010      	adds	r0, #16
 80066ba:	0e1a      	lsrs	r2, r3, #24
 80066bc:	d101      	bne.n	80066c2 <__hi0bits+0x16>
 80066be:	3008      	adds	r0, #8
 80066c0:	021b      	lsls	r3, r3, #8
 80066c2:	0f1a      	lsrs	r2, r3, #28
 80066c4:	d101      	bne.n	80066ca <__hi0bits+0x1e>
 80066c6:	3004      	adds	r0, #4
 80066c8:	011b      	lsls	r3, r3, #4
 80066ca:	0f9a      	lsrs	r2, r3, #30
 80066cc:	d101      	bne.n	80066d2 <__hi0bits+0x26>
 80066ce:	3002      	adds	r0, #2
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	db03      	blt.n	80066de <__hi0bits+0x32>
 80066d6:	3001      	adds	r0, #1
 80066d8:	005b      	lsls	r3, r3, #1
 80066da:	d400      	bmi.n	80066de <__hi0bits+0x32>
 80066dc:	2020      	movs	r0, #32
 80066de:	4770      	bx	lr

080066e0 <__lo0bits>:
 80066e0:	6803      	ldr	r3, [r0, #0]
 80066e2:	0002      	movs	r2, r0
 80066e4:	2107      	movs	r1, #7
 80066e6:	0018      	movs	r0, r3
 80066e8:	4008      	ands	r0, r1
 80066ea:	420b      	tst	r3, r1
 80066ec:	d00d      	beq.n	800670a <__lo0bits+0x2a>
 80066ee:	3906      	subs	r1, #6
 80066f0:	2000      	movs	r0, #0
 80066f2:	420b      	tst	r3, r1
 80066f4:	d105      	bne.n	8006702 <__lo0bits+0x22>
 80066f6:	3002      	adds	r0, #2
 80066f8:	4203      	tst	r3, r0
 80066fa:	d003      	beq.n	8006704 <__lo0bits+0x24>
 80066fc:	40cb      	lsrs	r3, r1
 80066fe:	0008      	movs	r0, r1
 8006700:	6013      	str	r3, [r2, #0]
 8006702:	4770      	bx	lr
 8006704:	089b      	lsrs	r3, r3, #2
 8006706:	6013      	str	r3, [r2, #0]
 8006708:	e7fb      	b.n	8006702 <__lo0bits+0x22>
 800670a:	b299      	uxth	r1, r3
 800670c:	2900      	cmp	r1, #0
 800670e:	d101      	bne.n	8006714 <__lo0bits+0x34>
 8006710:	2010      	movs	r0, #16
 8006712:	0c1b      	lsrs	r3, r3, #16
 8006714:	b2d9      	uxtb	r1, r3
 8006716:	2900      	cmp	r1, #0
 8006718:	d101      	bne.n	800671e <__lo0bits+0x3e>
 800671a:	3008      	adds	r0, #8
 800671c:	0a1b      	lsrs	r3, r3, #8
 800671e:	0719      	lsls	r1, r3, #28
 8006720:	d101      	bne.n	8006726 <__lo0bits+0x46>
 8006722:	3004      	adds	r0, #4
 8006724:	091b      	lsrs	r3, r3, #4
 8006726:	0799      	lsls	r1, r3, #30
 8006728:	d101      	bne.n	800672e <__lo0bits+0x4e>
 800672a:	3002      	adds	r0, #2
 800672c:	089b      	lsrs	r3, r3, #2
 800672e:	07d9      	lsls	r1, r3, #31
 8006730:	d4e9      	bmi.n	8006706 <__lo0bits+0x26>
 8006732:	3001      	adds	r0, #1
 8006734:	085b      	lsrs	r3, r3, #1
 8006736:	d1e6      	bne.n	8006706 <__lo0bits+0x26>
 8006738:	2020      	movs	r0, #32
 800673a:	e7e2      	b.n	8006702 <__lo0bits+0x22>

0800673c <__i2b>:
 800673c:	b510      	push	{r4, lr}
 800673e:	000c      	movs	r4, r1
 8006740:	2101      	movs	r1, #1
 8006742:	f7ff ff07 	bl	8006554 <_Balloc>
 8006746:	2800      	cmp	r0, #0
 8006748:	d106      	bne.n	8006758 <__i2b+0x1c>
 800674a:	21a0      	movs	r1, #160	; 0xa0
 800674c:	0002      	movs	r2, r0
 800674e:	4b04      	ldr	r3, [pc, #16]	; (8006760 <__i2b+0x24>)
 8006750:	4804      	ldr	r0, [pc, #16]	; (8006764 <__i2b+0x28>)
 8006752:	0049      	lsls	r1, r1, #1
 8006754:	f000 fd1c 	bl	8007190 <__assert_func>
 8006758:	2301      	movs	r3, #1
 800675a:	6144      	str	r4, [r0, #20]
 800675c:	6103      	str	r3, [r0, #16]
 800675e:	bd10      	pop	{r4, pc}
 8006760:	08007f6f 	.word	0x08007f6f
 8006764:	08007f80 	.word	0x08007f80

08006768 <__multiply>:
 8006768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800676a:	690b      	ldr	r3, [r1, #16]
 800676c:	0014      	movs	r4, r2
 800676e:	6912      	ldr	r2, [r2, #16]
 8006770:	000d      	movs	r5, r1
 8006772:	b089      	sub	sp, #36	; 0x24
 8006774:	4293      	cmp	r3, r2
 8006776:	da01      	bge.n	800677c <__multiply+0x14>
 8006778:	0025      	movs	r5, r4
 800677a:	000c      	movs	r4, r1
 800677c:	692f      	ldr	r7, [r5, #16]
 800677e:	6926      	ldr	r6, [r4, #16]
 8006780:	6869      	ldr	r1, [r5, #4]
 8006782:	19bb      	adds	r3, r7, r6
 8006784:	9302      	str	r3, [sp, #8]
 8006786:	68ab      	ldr	r3, [r5, #8]
 8006788:	19ba      	adds	r2, r7, r6
 800678a:	4293      	cmp	r3, r2
 800678c:	da00      	bge.n	8006790 <__multiply+0x28>
 800678e:	3101      	adds	r1, #1
 8006790:	f7ff fee0 	bl	8006554 <_Balloc>
 8006794:	9001      	str	r0, [sp, #4]
 8006796:	2800      	cmp	r0, #0
 8006798:	d106      	bne.n	80067a8 <__multiply+0x40>
 800679a:	215e      	movs	r1, #94	; 0x5e
 800679c:	0002      	movs	r2, r0
 800679e:	4b48      	ldr	r3, [pc, #288]	; (80068c0 <__multiply+0x158>)
 80067a0:	4848      	ldr	r0, [pc, #288]	; (80068c4 <__multiply+0x15c>)
 80067a2:	31ff      	adds	r1, #255	; 0xff
 80067a4:	f000 fcf4 	bl	8007190 <__assert_func>
 80067a8:	9b01      	ldr	r3, [sp, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	3314      	adds	r3, #20
 80067ae:	469c      	mov	ip, r3
 80067b0:	19bb      	adds	r3, r7, r6
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	4463      	add	r3, ip
 80067b6:	9303      	str	r3, [sp, #12]
 80067b8:	4663      	mov	r3, ip
 80067ba:	9903      	ldr	r1, [sp, #12]
 80067bc:	428b      	cmp	r3, r1
 80067be:	d32c      	bcc.n	800681a <__multiply+0xb2>
 80067c0:	002b      	movs	r3, r5
 80067c2:	0022      	movs	r2, r4
 80067c4:	3314      	adds	r3, #20
 80067c6:	00bf      	lsls	r7, r7, #2
 80067c8:	3214      	adds	r2, #20
 80067ca:	9306      	str	r3, [sp, #24]
 80067cc:	00b6      	lsls	r6, r6, #2
 80067ce:	19db      	adds	r3, r3, r7
 80067d0:	9304      	str	r3, [sp, #16]
 80067d2:	1993      	adds	r3, r2, r6
 80067d4:	9307      	str	r3, [sp, #28]
 80067d6:	2304      	movs	r3, #4
 80067d8:	9305      	str	r3, [sp, #20]
 80067da:	002b      	movs	r3, r5
 80067dc:	9904      	ldr	r1, [sp, #16]
 80067de:	3315      	adds	r3, #21
 80067e0:	9200      	str	r2, [sp, #0]
 80067e2:	4299      	cmp	r1, r3
 80067e4:	d305      	bcc.n	80067f2 <__multiply+0x8a>
 80067e6:	1b4b      	subs	r3, r1, r5
 80067e8:	3b15      	subs	r3, #21
 80067ea:	089b      	lsrs	r3, r3, #2
 80067ec:	3301      	adds	r3, #1
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	9305      	str	r3, [sp, #20]
 80067f2:	9b07      	ldr	r3, [sp, #28]
 80067f4:	9a00      	ldr	r2, [sp, #0]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d311      	bcc.n	800681e <__multiply+0xb6>
 80067fa:	9b02      	ldr	r3, [sp, #8]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	dd06      	ble.n	800680e <__multiply+0xa6>
 8006800:	9b03      	ldr	r3, [sp, #12]
 8006802:	3b04      	subs	r3, #4
 8006804:	9303      	str	r3, [sp, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	9300      	str	r3, [sp, #0]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d053      	beq.n	80068b6 <__multiply+0x14e>
 800680e:	9b01      	ldr	r3, [sp, #4]
 8006810:	9a02      	ldr	r2, [sp, #8]
 8006812:	0018      	movs	r0, r3
 8006814:	611a      	str	r2, [r3, #16]
 8006816:	b009      	add	sp, #36	; 0x24
 8006818:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800681a:	c304      	stmia	r3!, {r2}
 800681c:	e7cd      	b.n	80067ba <__multiply+0x52>
 800681e:	9b00      	ldr	r3, [sp, #0]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	b298      	uxth	r0, r3
 8006824:	2800      	cmp	r0, #0
 8006826:	d01b      	beq.n	8006860 <__multiply+0xf8>
 8006828:	4667      	mov	r7, ip
 800682a:	2400      	movs	r4, #0
 800682c:	9e06      	ldr	r6, [sp, #24]
 800682e:	ce02      	ldmia	r6!, {r1}
 8006830:	683a      	ldr	r2, [r7, #0]
 8006832:	b28b      	uxth	r3, r1
 8006834:	4343      	muls	r3, r0
 8006836:	b292      	uxth	r2, r2
 8006838:	189b      	adds	r3, r3, r2
 800683a:	191b      	adds	r3, r3, r4
 800683c:	0c0c      	lsrs	r4, r1, #16
 800683e:	4344      	muls	r4, r0
 8006840:	683a      	ldr	r2, [r7, #0]
 8006842:	0c11      	lsrs	r1, r2, #16
 8006844:	1861      	adds	r1, r4, r1
 8006846:	0c1c      	lsrs	r4, r3, #16
 8006848:	1909      	adds	r1, r1, r4
 800684a:	0c0c      	lsrs	r4, r1, #16
 800684c:	b29b      	uxth	r3, r3
 800684e:	0409      	lsls	r1, r1, #16
 8006850:	430b      	orrs	r3, r1
 8006852:	c708      	stmia	r7!, {r3}
 8006854:	9b04      	ldr	r3, [sp, #16]
 8006856:	42b3      	cmp	r3, r6
 8006858:	d8e9      	bhi.n	800682e <__multiply+0xc6>
 800685a:	4663      	mov	r3, ip
 800685c:	9a05      	ldr	r2, [sp, #20]
 800685e:	509c      	str	r4, [r3, r2]
 8006860:	9b00      	ldr	r3, [sp, #0]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	0c1e      	lsrs	r6, r3, #16
 8006866:	d020      	beq.n	80068aa <__multiply+0x142>
 8006868:	4663      	mov	r3, ip
 800686a:	002c      	movs	r4, r5
 800686c:	4660      	mov	r0, ip
 800686e:	2700      	movs	r7, #0
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	3414      	adds	r4, #20
 8006874:	6822      	ldr	r2, [r4, #0]
 8006876:	b29b      	uxth	r3, r3
 8006878:	b291      	uxth	r1, r2
 800687a:	4371      	muls	r1, r6
 800687c:	6802      	ldr	r2, [r0, #0]
 800687e:	0c12      	lsrs	r2, r2, #16
 8006880:	1889      	adds	r1, r1, r2
 8006882:	19cf      	adds	r7, r1, r7
 8006884:	0439      	lsls	r1, r7, #16
 8006886:	430b      	orrs	r3, r1
 8006888:	6003      	str	r3, [r0, #0]
 800688a:	cc02      	ldmia	r4!, {r1}
 800688c:	6843      	ldr	r3, [r0, #4]
 800688e:	0c09      	lsrs	r1, r1, #16
 8006890:	4371      	muls	r1, r6
 8006892:	b29b      	uxth	r3, r3
 8006894:	0c3f      	lsrs	r7, r7, #16
 8006896:	18cb      	adds	r3, r1, r3
 8006898:	9a04      	ldr	r2, [sp, #16]
 800689a:	19db      	adds	r3, r3, r7
 800689c:	0c1f      	lsrs	r7, r3, #16
 800689e:	3004      	adds	r0, #4
 80068a0:	42a2      	cmp	r2, r4
 80068a2:	d8e7      	bhi.n	8006874 <__multiply+0x10c>
 80068a4:	4662      	mov	r2, ip
 80068a6:	9905      	ldr	r1, [sp, #20]
 80068a8:	5053      	str	r3, [r2, r1]
 80068aa:	9b00      	ldr	r3, [sp, #0]
 80068ac:	3304      	adds	r3, #4
 80068ae:	9300      	str	r3, [sp, #0]
 80068b0:	2304      	movs	r3, #4
 80068b2:	449c      	add	ip, r3
 80068b4:	e79d      	b.n	80067f2 <__multiply+0x8a>
 80068b6:	9b02      	ldr	r3, [sp, #8]
 80068b8:	3b01      	subs	r3, #1
 80068ba:	9302      	str	r3, [sp, #8]
 80068bc:	e79d      	b.n	80067fa <__multiply+0x92>
 80068be:	46c0      	nop			; (mov r8, r8)
 80068c0:	08007f6f 	.word	0x08007f6f
 80068c4:	08007f80 	.word	0x08007f80

080068c8 <__pow5mult>:
 80068c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80068ca:	2303      	movs	r3, #3
 80068cc:	0015      	movs	r5, r2
 80068ce:	0007      	movs	r7, r0
 80068d0:	000e      	movs	r6, r1
 80068d2:	401a      	ands	r2, r3
 80068d4:	421d      	tst	r5, r3
 80068d6:	d008      	beq.n	80068ea <__pow5mult+0x22>
 80068d8:	4925      	ldr	r1, [pc, #148]	; (8006970 <__pow5mult+0xa8>)
 80068da:	3a01      	subs	r2, #1
 80068dc:	0092      	lsls	r2, r2, #2
 80068de:	5852      	ldr	r2, [r2, r1]
 80068e0:	2300      	movs	r3, #0
 80068e2:	0031      	movs	r1, r6
 80068e4:	f7ff fe9e 	bl	8006624 <__multadd>
 80068e8:	0006      	movs	r6, r0
 80068ea:	10ad      	asrs	r5, r5, #2
 80068ec:	d03d      	beq.n	800696a <__pow5mult+0xa2>
 80068ee:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80068f0:	2c00      	cmp	r4, #0
 80068f2:	d10f      	bne.n	8006914 <__pow5mult+0x4c>
 80068f4:	2010      	movs	r0, #16
 80068f6:	f7ff fe0f 	bl	8006518 <malloc>
 80068fa:	1e02      	subs	r2, r0, #0
 80068fc:	6278      	str	r0, [r7, #36]	; 0x24
 80068fe:	d105      	bne.n	800690c <__pow5mult+0x44>
 8006900:	21d7      	movs	r1, #215	; 0xd7
 8006902:	4b1c      	ldr	r3, [pc, #112]	; (8006974 <__pow5mult+0xac>)
 8006904:	481c      	ldr	r0, [pc, #112]	; (8006978 <__pow5mult+0xb0>)
 8006906:	0049      	lsls	r1, r1, #1
 8006908:	f000 fc42 	bl	8007190 <__assert_func>
 800690c:	6044      	str	r4, [r0, #4]
 800690e:	6084      	str	r4, [r0, #8]
 8006910:	6004      	str	r4, [r0, #0]
 8006912:	60c4      	str	r4, [r0, #12]
 8006914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006916:	689c      	ldr	r4, [r3, #8]
 8006918:	9301      	str	r3, [sp, #4]
 800691a:	2c00      	cmp	r4, #0
 800691c:	d108      	bne.n	8006930 <__pow5mult+0x68>
 800691e:	0038      	movs	r0, r7
 8006920:	4916      	ldr	r1, [pc, #88]	; (800697c <__pow5mult+0xb4>)
 8006922:	f7ff ff0b 	bl	800673c <__i2b>
 8006926:	9b01      	ldr	r3, [sp, #4]
 8006928:	0004      	movs	r4, r0
 800692a:	6098      	str	r0, [r3, #8]
 800692c:	2300      	movs	r3, #0
 800692e:	6003      	str	r3, [r0, #0]
 8006930:	2301      	movs	r3, #1
 8006932:	421d      	tst	r5, r3
 8006934:	d00a      	beq.n	800694c <__pow5mult+0x84>
 8006936:	0031      	movs	r1, r6
 8006938:	0022      	movs	r2, r4
 800693a:	0038      	movs	r0, r7
 800693c:	f7ff ff14 	bl	8006768 <__multiply>
 8006940:	0031      	movs	r1, r6
 8006942:	9001      	str	r0, [sp, #4]
 8006944:	0038      	movs	r0, r7
 8006946:	f7ff fe49 	bl	80065dc <_Bfree>
 800694a:	9e01      	ldr	r6, [sp, #4]
 800694c:	106d      	asrs	r5, r5, #1
 800694e:	d00c      	beq.n	800696a <__pow5mult+0xa2>
 8006950:	6820      	ldr	r0, [r4, #0]
 8006952:	2800      	cmp	r0, #0
 8006954:	d107      	bne.n	8006966 <__pow5mult+0x9e>
 8006956:	0022      	movs	r2, r4
 8006958:	0021      	movs	r1, r4
 800695a:	0038      	movs	r0, r7
 800695c:	f7ff ff04 	bl	8006768 <__multiply>
 8006960:	2300      	movs	r3, #0
 8006962:	6020      	str	r0, [r4, #0]
 8006964:	6003      	str	r3, [r0, #0]
 8006966:	0004      	movs	r4, r0
 8006968:	e7e2      	b.n	8006930 <__pow5mult+0x68>
 800696a:	0030      	movs	r0, r6
 800696c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800696e:	46c0      	nop			; (mov r8, r8)
 8006970:	080080d0 	.word	0x080080d0
 8006974:	08007efd 	.word	0x08007efd
 8006978:	08007f80 	.word	0x08007f80
 800697c:	00000271 	.word	0x00000271

08006980 <__lshift>:
 8006980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006982:	000c      	movs	r4, r1
 8006984:	0017      	movs	r7, r2
 8006986:	6923      	ldr	r3, [r4, #16]
 8006988:	1155      	asrs	r5, r2, #5
 800698a:	b087      	sub	sp, #28
 800698c:	18eb      	adds	r3, r5, r3
 800698e:	9302      	str	r3, [sp, #8]
 8006990:	3301      	adds	r3, #1
 8006992:	9301      	str	r3, [sp, #4]
 8006994:	6849      	ldr	r1, [r1, #4]
 8006996:	68a3      	ldr	r3, [r4, #8]
 8006998:	9004      	str	r0, [sp, #16]
 800699a:	9a01      	ldr	r2, [sp, #4]
 800699c:	4293      	cmp	r3, r2
 800699e:	db10      	blt.n	80069c2 <__lshift+0x42>
 80069a0:	9804      	ldr	r0, [sp, #16]
 80069a2:	f7ff fdd7 	bl	8006554 <_Balloc>
 80069a6:	2300      	movs	r3, #0
 80069a8:	0002      	movs	r2, r0
 80069aa:	0006      	movs	r6, r0
 80069ac:	0019      	movs	r1, r3
 80069ae:	3214      	adds	r2, #20
 80069b0:	4298      	cmp	r0, r3
 80069b2:	d10c      	bne.n	80069ce <__lshift+0x4e>
 80069b4:	21da      	movs	r1, #218	; 0xda
 80069b6:	0002      	movs	r2, r0
 80069b8:	4b26      	ldr	r3, [pc, #152]	; (8006a54 <__lshift+0xd4>)
 80069ba:	4827      	ldr	r0, [pc, #156]	; (8006a58 <__lshift+0xd8>)
 80069bc:	31ff      	adds	r1, #255	; 0xff
 80069be:	f000 fbe7 	bl	8007190 <__assert_func>
 80069c2:	3101      	adds	r1, #1
 80069c4:	005b      	lsls	r3, r3, #1
 80069c6:	e7e8      	b.n	800699a <__lshift+0x1a>
 80069c8:	0098      	lsls	r0, r3, #2
 80069ca:	5011      	str	r1, [r2, r0]
 80069cc:	3301      	adds	r3, #1
 80069ce:	42ab      	cmp	r3, r5
 80069d0:	dbfa      	blt.n	80069c8 <__lshift+0x48>
 80069d2:	43eb      	mvns	r3, r5
 80069d4:	17db      	asrs	r3, r3, #31
 80069d6:	401d      	ands	r5, r3
 80069d8:	211f      	movs	r1, #31
 80069da:	0023      	movs	r3, r4
 80069dc:	0038      	movs	r0, r7
 80069de:	00ad      	lsls	r5, r5, #2
 80069e0:	1955      	adds	r5, r2, r5
 80069e2:	6922      	ldr	r2, [r4, #16]
 80069e4:	3314      	adds	r3, #20
 80069e6:	0092      	lsls	r2, r2, #2
 80069e8:	4008      	ands	r0, r1
 80069ea:	4684      	mov	ip, r0
 80069ec:	189a      	adds	r2, r3, r2
 80069ee:	420f      	tst	r7, r1
 80069f0:	d02a      	beq.n	8006a48 <__lshift+0xc8>
 80069f2:	3101      	adds	r1, #1
 80069f4:	1a09      	subs	r1, r1, r0
 80069f6:	9105      	str	r1, [sp, #20]
 80069f8:	2100      	movs	r1, #0
 80069fa:	9503      	str	r5, [sp, #12]
 80069fc:	4667      	mov	r7, ip
 80069fe:	6818      	ldr	r0, [r3, #0]
 8006a00:	40b8      	lsls	r0, r7
 8006a02:	4301      	orrs	r1, r0
 8006a04:	9803      	ldr	r0, [sp, #12]
 8006a06:	c002      	stmia	r0!, {r1}
 8006a08:	cb02      	ldmia	r3!, {r1}
 8006a0a:	9003      	str	r0, [sp, #12]
 8006a0c:	9805      	ldr	r0, [sp, #20]
 8006a0e:	40c1      	lsrs	r1, r0
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d8f3      	bhi.n	80069fc <__lshift+0x7c>
 8006a14:	0020      	movs	r0, r4
 8006a16:	3015      	adds	r0, #21
 8006a18:	2304      	movs	r3, #4
 8006a1a:	4282      	cmp	r2, r0
 8006a1c:	d304      	bcc.n	8006a28 <__lshift+0xa8>
 8006a1e:	1b13      	subs	r3, r2, r4
 8006a20:	3b15      	subs	r3, #21
 8006a22:	089b      	lsrs	r3, r3, #2
 8006a24:	3301      	adds	r3, #1
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	50e9      	str	r1, [r5, r3]
 8006a2a:	2900      	cmp	r1, #0
 8006a2c:	d002      	beq.n	8006a34 <__lshift+0xb4>
 8006a2e:	9b02      	ldr	r3, [sp, #8]
 8006a30:	3302      	adds	r3, #2
 8006a32:	9301      	str	r3, [sp, #4]
 8006a34:	9b01      	ldr	r3, [sp, #4]
 8006a36:	9804      	ldr	r0, [sp, #16]
 8006a38:	3b01      	subs	r3, #1
 8006a3a:	0021      	movs	r1, r4
 8006a3c:	6133      	str	r3, [r6, #16]
 8006a3e:	f7ff fdcd 	bl	80065dc <_Bfree>
 8006a42:	0030      	movs	r0, r6
 8006a44:	b007      	add	sp, #28
 8006a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a48:	cb02      	ldmia	r3!, {r1}
 8006a4a:	c502      	stmia	r5!, {r1}
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d8fb      	bhi.n	8006a48 <__lshift+0xc8>
 8006a50:	e7f0      	b.n	8006a34 <__lshift+0xb4>
 8006a52:	46c0      	nop			; (mov r8, r8)
 8006a54:	08007f6f 	.word	0x08007f6f
 8006a58:	08007f80 	.word	0x08007f80

08006a5c <__mcmp>:
 8006a5c:	6902      	ldr	r2, [r0, #16]
 8006a5e:	690b      	ldr	r3, [r1, #16]
 8006a60:	b530      	push	{r4, r5, lr}
 8006a62:	0004      	movs	r4, r0
 8006a64:	1ad0      	subs	r0, r2, r3
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d10d      	bne.n	8006a86 <__mcmp+0x2a>
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	3414      	adds	r4, #20
 8006a6e:	3114      	adds	r1, #20
 8006a70:	18e2      	adds	r2, r4, r3
 8006a72:	18c9      	adds	r1, r1, r3
 8006a74:	3a04      	subs	r2, #4
 8006a76:	3904      	subs	r1, #4
 8006a78:	6815      	ldr	r5, [r2, #0]
 8006a7a:	680b      	ldr	r3, [r1, #0]
 8006a7c:	429d      	cmp	r5, r3
 8006a7e:	d003      	beq.n	8006a88 <__mcmp+0x2c>
 8006a80:	2001      	movs	r0, #1
 8006a82:	429d      	cmp	r5, r3
 8006a84:	d303      	bcc.n	8006a8e <__mcmp+0x32>
 8006a86:	bd30      	pop	{r4, r5, pc}
 8006a88:	4294      	cmp	r4, r2
 8006a8a:	d3f3      	bcc.n	8006a74 <__mcmp+0x18>
 8006a8c:	e7fb      	b.n	8006a86 <__mcmp+0x2a>
 8006a8e:	4240      	negs	r0, r0
 8006a90:	e7f9      	b.n	8006a86 <__mcmp+0x2a>
	...

08006a94 <__mdiff>:
 8006a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a96:	000e      	movs	r6, r1
 8006a98:	0007      	movs	r7, r0
 8006a9a:	0011      	movs	r1, r2
 8006a9c:	0030      	movs	r0, r6
 8006a9e:	b087      	sub	sp, #28
 8006aa0:	0014      	movs	r4, r2
 8006aa2:	f7ff ffdb 	bl	8006a5c <__mcmp>
 8006aa6:	1e05      	subs	r5, r0, #0
 8006aa8:	d110      	bne.n	8006acc <__mdiff+0x38>
 8006aaa:	0001      	movs	r1, r0
 8006aac:	0038      	movs	r0, r7
 8006aae:	f7ff fd51 	bl	8006554 <_Balloc>
 8006ab2:	1e02      	subs	r2, r0, #0
 8006ab4:	d104      	bne.n	8006ac0 <__mdiff+0x2c>
 8006ab6:	4b40      	ldr	r3, [pc, #256]	; (8006bb8 <__mdiff+0x124>)
 8006ab8:	4940      	ldr	r1, [pc, #256]	; (8006bbc <__mdiff+0x128>)
 8006aba:	4841      	ldr	r0, [pc, #260]	; (8006bc0 <__mdiff+0x12c>)
 8006abc:	f000 fb68 	bl	8007190 <__assert_func>
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	6145      	str	r5, [r0, #20]
 8006ac4:	6103      	str	r3, [r0, #16]
 8006ac6:	0010      	movs	r0, r2
 8006ac8:	b007      	add	sp, #28
 8006aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006acc:	2301      	movs	r3, #1
 8006ace:	9301      	str	r3, [sp, #4]
 8006ad0:	2800      	cmp	r0, #0
 8006ad2:	db04      	blt.n	8006ade <__mdiff+0x4a>
 8006ad4:	0023      	movs	r3, r4
 8006ad6:	0034      	movs	r4, r6
 8006ad8:	001e      	movs	r6, r3
 8006ada:	2300      	movs	r3, #0
 8006adc:	9301      	str	r3, [sp, #4]
 8006ade:	0038      	movs	r0, r7
 8006ae0:	6861      	ldr	r1, [r4, #4]
 8006ae2:	f7ff fd37 	bl	8006554 <_Balloc>
 8006ae6:	1e02      	subs	r2, r0, #0
 8006ae8:	d103      	bne.n	8006af2 <__mdiff+0x5e>
 8006aea:	2190      	movs	r1, #144	; 0x90
 8006aec:	4b32      	ldr	r3, [pc, #200]	; (8006bb8 <__mdiff+0x124>)
 8006aee:	0089      	lsls	r1, r1, #2
 8006af0:	e7e3      	b.n	8006aba <__mdiff+0x26>
 8006af2:	9b01      	ldr	r3, [sp, #4]
 8006af4:	2700      	movs	r7, #0
 8006af6:	60c3      	str	r3, [r0, #12]
 8006af8:	6920      	ldr	r0, [r4, #16]
 8006afa:	3414      	adds	r4, #20
 8006afc:	9401      	str	r4, [sp, #4]
 8006afe:	9b01      	ldr	r3, [sp, #4]
 8006b00:	0084      	lsls	r4, r0, #2
 8006b02:	191b      	adds	r3, r3, r4
 8006b04:	0034      	movs	r4, r6
 8006b06:	9302      	str	r3, [sp, #8]
 8006b08:	6933      	ldr	r3, [r6, #16]
 8006b0a:	3414      	adds	r4, #20
 8006b0c:	0099      	lsls	r1, r3, #2
 8006b0e:	1863      	adds	r3, r4, r1
 8006b10:	9303      	str	r3, [sp, #12]
 8006b12:	0013      	movs	r3, r2
 8006b14:	3314      	adds	r3, #20
 8006b16:	469c      	mov	ip, r3
 8006b18:	9305      	str	r3, [sp, #20]
 8006b1a:	9b01      	ldr	r3, [sp, #4]
 8006b1c:	9304      	str	r3, [sp, #16]
 8006b1e:	9b04      	ldr	r3, [sp, #16]
 8006b20:	cc02      	ldmia	r4!, {r1}
 8006b22:	cb20      	ldmia	r3!, {r5}
 8006b24:	9304      	str	r3, [sp, #16]
 8006b26:	b2ab      	uxth	r3, r5
 8006b28:	19df      	adds	r7, r3, r7
 8006b2a:	b28b      	uxth	r3, r1
 8006b2c:	1afb      	subs	r3, r7, r3
 8006b2e:	0c09      	lsrs	r1, r1, #16
 8006b30:	0c2d      	lsrs	r5, r5, #16
 8006b32:	1a6d      	subs	r5, r5, r1
 8006b34:	1419      	asrs	r1, r3, #16
 8006b36:	186d      	adds	r5, r5, r1
 8006b38:	4661      	mov	r1, ip
 8006b3a:	142f      	asrs	r7, r5, #16
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	042d      	lsls	r5, r5, #16
 8006b40:	432b      	orrs	r3, r5
 8006b42:	c108      	stmia	r1!, {r3}
 8006b44:	9b03      	ldr	r3, [sp, #12]
 8006b46:	468c      	mov	ip, r1
 8006b48:	42a3      	cmp	r3, r4
 8006b4a:	d8e8      	bhi.n	8006b1e <__mdiff+0x8a>
 8006b4c:	0031      	movs	r1, r6
 8006b4e:	9c03      	ldr	r4, [sp, #12]
 8006b50:	3115      	adds	r1, #21
 8006b52:	2304      	movs	r3, #4
 8006b54:	428c      	cmp	r4, r1
 8006b56:	d304      	bcc.n	8006b62 <__mdiff+0xce>
 8006b58:	1ba3      	subs	r3, r4, r6
 8006b5a:	3b15      	subs	r3, #21
 8006b5c:	089b      	lsrs	r3, r3, #2
 8006b5e:	3301      	adds	r3, #1
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	9901      	ldr	r1, [sp, #4]
 8006b64:	18cc      	adds	r4, r1, r3
 8006b66:	9905      	ldr	r1, [sp, #20]
 8006b68:	0026      	movs	r6, r4
 8006b6a:	18cb      	adds	r3, r1, r3
 8006b6c:	469c      	mov	ip, r3
 8006b6e:	9902      	ldr	r1, [sp, #8]
 8006b70:	428e      	cmp	r6, r1
 8006b72:	d310      	bcc.n	8006b96 <__mdiff+0x102>
 8006b74:	9e02      	ldr	r6, [sp, #8]
 8006b76:	1ee1      	subs	r1, r4, #3
 8006b78:	2500      	movs	r5, #0
 8006b7a:	428e      	cmp	r6, r1
 8006b7c:	d304      	bcc.n	8006b88 <__mdiff+0xf4>
 8006b7e:	0031      	movs	r1, r6
 8006b80:	3103      	adds	r1, #3
 8006b82:	1b0c      	subs	r4, r1, r4
 8006b84:	08a4      	lsrs	r4, r4, #2
 8006b86:	00a5      	lsls	r5, r4, #2
 8006b88:	195b      	adds	r3, r3, r5
 8006b8a:	3b04      	subs	r3, #4
 8006b8c:	6819      	ldr	r1, [r3, #0]
 8006b8e:	2900      	cmp	r1, #0
 8006b90:	d00f      	beq.n	8006bb2 <__mdiff+0x11e>
 8006b92:	6110      	str	r0, [r2, #16]
 8006b94:	e797      	b.n	8006ac6 <__mdiff+0x32>
 8006b96:	ce02      	ldmia	r6!, {r1}
 8006b98:	b28d      	uxth	r5, r1
 8006b9a:	19ed      	adds	r5, r5, r7
 8006b9c:	0c0f      	lsrs	r7, r1, #16
 8006b9e:	1429      	asrs	r1, r5, #16
 8006ba0:	1879      	adds	r1, r7, r1
 8006ba2:	140f      	asrs	r7, r1, #16
 8006ba4:	b2ad      	uxth	r5, r5
 8006ba6:	0409      	lsls	r1, r1, #16
 8006ba8:	430d      	orrs	r5, r1
 8006baa:	4661      	mov	r1, ip
 8006bac:	c120      	stmia	r1!, {r5}
 8006bae:	468c      	mov	ip, r1
 8006bb0:	e7dd      	b.n	8006b6e <__mdiff+0xda>
 8006bb2:	3801      	subs	r0, #1
 8006bb4:	e7e9      	b.n	8006b8a <__mdiff+0xf6>
 8006bb6:	46c0      	nop			; (mov r8, r8)
 8006bb8:	08007f6f 	.word	0x08007f6f
 8006bbc:	00000232 	.word	0x00000232
 8006bc0:	08007f80 	.word	0x08007f80

08006bc4 <__d2b>:
 8006bc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006bc6:	2101      	movs	r1, #1
 8006bc8:	0014      	movs	r4, r2
 8006bca:	001e      	movs	r6, r3
 8006bcc:	9f08      	ldr	r7, [sp, #32]
 8006bce:	f7ff fcc1 	bl	8006554 <_Balloc>
 8006bd2:	1e05      	subs	r5, r0, #0
 8006bd4:	d105      	bne.n	8006be2 <__d2b+0x1e>
 8006bd6:	0002      	movs	r2, r0
 8006bd8:	4b26      	ldr	r3, [pc, #152]	; (8006c74 <__d2b+0xb0>)
 8006bda:	4927      	ldr	r1, [pc, #156]	; (8006c78 <__d2b+0xb4>)
 8006bdc:	4827      	ldr	r0, [pc, #156]	; (8006c7c <__d2b+0xb8>)
 8006bde:	f000 fad7 	bl	8007190 <__assert_func>
 8006be2:	0333      	lsls	r3, r6, #12
 8006be4:	0076      	lsls	r6, r6, #1
 8006be6:	0b1b      	lsrs	r3, r3, #12
 8006be8:	0d76      	lsrs	r6, r6, #21
 8006bea:	d124      	bne.n	8006c36 <__d2b+0x72>
 8006bec:	9301      	str	r3, [sp, #4]
 8006bee:	2c00      	cmp	r4, #0
 8006bf0:	d027      	beq.n	8006c42 <__d2b+0x7e>
 8006bf2:	4668      	mov	r0, sp
 8006bf4:	9400      	str	r4, [sp, #0]
 8006bf6:	f7ff fd73 	bl	80066e0 <__lo0bits>
 8006bfa:	9c00      	ldr	r4, [sp, #0]
 8006bfc:	2800      	cmp	r0, #0
 8006bfe:	d01e      	beq.n	8006c3e <__d2b+0x7a>
 8006c00:	9b01      	ldr	r3, [sp, #4]
 8006c02:	2120      	movs	r1, #32
 8006c04:	001a      	movs	r2, r3
 8006c06:	1a09      	subs	r1, r1, r0
 8006c08:	408a      	lsls	r2, r1
 8006c0a:	40c3      	lsrs	r3, r0
 8006c0c:	4322      	orrs	r2, r4
 8006c0e:	616a      	str	r2, [r5, #20]
 8006c10:	9301      	str	r3, [sp, #4]
 8006c12:	9c01      	ldr	r4, [sp, #4]
 8006c14:	61ac      	str	r4, [r5, #24]
 8006c16:	1e63      	subs	r3, r4, #1
 8006c18:	419c      	sbcs	r4, r3
 8006c1a:	3401      	adds	r4, #1
 8006c1c:	612c      	str	r4, [r5, #16]
 8006c1e:	2e00      	cmp	r6, #0
 8006c20:	d018      	beq.n	8006c54 <__d2b+0x90>
 8006c22:	4b17      	ldr	r3, [pc, #92]	; (8006c80 <__d2b+0xbc>)
 8006c24:	18f6      	adds	r6, r6, r3
 8006c26:	2335      	movs	r3, #53	; 0x35
 8006c28:	1836      	adds	r6, r6, r0
 8006c2a:	1a18      	subs	r0, r3, r0
 8006c2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c2e:	603e      	str	r6, [r7, #0]
 8006c30:	6018      	str	r0, [r3, #0]
 8006c32:	0028      	movs	r0, r5
 8006c34:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006c36:	2280      	movs	r2, #128	; 0x80
 8006c38:	0352      	lsls	r2, r2, #13
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	e7d6      	b.n	8006bec <__d2b+0x28>
 8006c3e:	616c      	str	r4, [r5, #20]
 8006c40:	e7e7      	b.n	8006c12 <__d2b+0x4e>
 8006c42:	a801      	add	r0, sp, #4
 8006c44:	f7ff fd4c 	bl	80066e0 <__lo0bits>
 8006c48:	2401      	movs	r4, #1
 8006c4a:	9b01      	ldr	r3, [sp, #4]
 8006c4c:	612c      	str	r4, [r5, #16]
 8006c4e:	616b      	str	r3, [r5, #20]
 8006c50:	3020      	adds	r0, #32
 8006c52:	e7e4      	b.n	8006c1e <__d2b+0x5a>
 8006c54:	4b0b      	ldr	r3, [pc, #44]	; (8006c84 <__d2b+0xc0>)
 8006c56:	18c0      	adds	r0, r0, r3
 8006c58:	4b0b      	ldr	r3, [pc, #44]	; (8006c88 <__d2b+0xc4>)
 8006c5a:	6038      	str	r0, [r7, #0]
 8006c5c:	18e3      	adds	r3, r4, r3
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	18eb      	adds	r3, r5, r3
 8006c62:	6958      	ldr	r0, [r3, #20]
 8006c64:	f7ff fd22 	bl	80066ac <__hi0bits>
 8006c68:	0164      	lsls	r4, r4, #5
 8006c6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c6c:	1a24      	subs	r4, r4, r0
 8006c6e:	601c      	str	r4, [r3, #0]
 8006c70:	e7df      	b.n	8006c32 <__d2b+0x6e>
 8006c72:	46c0      	nop			; (mov r8, r8)
 8006c74:	08007f6f 	.word	0x08007f6f
 8006c78:	0000030a 	.word	0x0000030a
 8006c7c:	08007f80 	.word	0x08007f80
 8006c80:	fffffbcd 	.word	0xfffffbcd
 8006c84:	fffffbce 	.word	0xfffffbce
 8006c88:	3fffffff 	.word	0x3fffffff

08006c8c <_calloc_r>:
 8006c8c:	b570      	push	{r4, r5, r6, lr}
 8006c8e:	0c13      	lsrs	r3, r2, #16
 8006c90:	0c0d      	lsrs	r5, r1, #16
 8006c92:	d11e      	bne.n	8006cd2 <_calloc_r+0x46>
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d10c      	bne.n	8006cb2 <_calloc_r+0x26>
 8006c98:	b289      	uxth	r1, r1
 8006c9a:	b294      	uxth	r4, r2
 8006c9c:	434c      	muls	r4, r1
 8006c9e:	0021      	movs	r1, r4
 8006ca0:	f000 f88c 	bl	8006dbc <_malloc_r>
 8006ca4:	1e05      	subs	r5, r0, #0
 8006ca6:	d01b      	beq.n	8006ce0 <_calloc_r+0x54>
 8006ca8:	0022      	movs	r2, r4
 8006caa:	2100      	movs	r1, #0
 8006cac:	f7fe f8f4 	bl	8004e98 <memset>
 8006cb0:	e016      	b.n	8006ce0 <_calloc_r+0x54>
 8006cb2:	1c1d      	adds	r5, r3, #0
 8006cb4:	1c0b      	adds	r3, r1, #0
 8006cb6:	b292      	uxth	r2, r2
 8006cb8:	b289      	uxth	r1, r1
 8006cba:	b29c      	uxth	r4, r3
 8006cbc:	4351      	muls	r1, r2
 8006cbe:	b2ab      	uxth	r3, r5
 8006cc0:	4363      	muls	r3, r4
 8006cc2:	0c0c      	lsrs	r4, r1, #16
 8006cc4:	191c      	adds	r4, r3, r4
 8006cc6:	0c22      	lsrs	r2, r4, #16
 8006cc8:	d107      	bne.n	8006cda <_calloc_r+0x4e>
 8006cca:	0424      	lsls	r4, r4, #16
 8006ccc:	b289      	uxth	r1, r1
 8006cce:	430c      	orrs	r4, r1
 8006cd0:	e7e5      	b.n	8006c9e <_calloc_r+0x12>
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d101      	bne.n	8006cda <_calloc_r+0x4e>
 8006cd6:	1c13      	adds	r3, r2, #0
 8006cd8:	e7ed      	b.n	8006cb6 <_calloc_r+0x2a>
 8006cda:	230c      	movs	r3, #12
 8006cdc:	2500      	movs	r5, #0
 8006cde:	6003      	str	r3, [r0, #0]
 8006ce0:	0028      	movs	r0, r5
 8006ce2:	bd70      	pop	{r4, r5, r6, pc}

08006ce4 <_free_r>:
 8006ce4:	b570      	push	{r4, r5, r6, lr}
 8006ce6:	0005      	movs	r5, r0
 8006ce8:	2900      	cmp	r1, #0
 8006cea:	d010      	beq.n	8006d0e <_free_r+0x2a>
 8006cec:	1f0c      	subs	r4, r1, #4
 8006cee:	6823      	ldr	r3, [r4, #0]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	da00      	bge.n	8006cf6 <_free_r+0x12>
 8006cf4:	18e4      	adds	r4, r4, r3
 8006cf6:	0028      	movs	r0, r5
 8006cf8:	f000 fa9e 	bl	8007238 <__malloc_lock>
 8006cfc:	4a1d      	ldr	r2, [pc, #116]	; (8006d74 <_free_r+0x90>)
 8006cfe:	6813      	ldr	r3, [r2, #0]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d105      	bne.n	8006d10 <_free_r+0x2c>
 8006d04:	6063      	str	r3, [r4, #4]
 8006d06:	6014      	str	r4, [r2, #0]
 8006d08:	0028      	movs	r0, r5
 8006d0a:	f000 fa9d 	bl	8007248 <__malloc_unlock>
 8006d0e:	bd70      	pop	{r4, r5, r6, pc}
 8006d10:	42a3      	cmp	r3, r4
 8006d12:	d908      	bls.n	8006d26 <_free_r+0x42>
 8006d14:	6821      	ldr	r1, [r4, #0]
 8006d16:	1860      	adds	r0, r4, r1
 8006d18:	4283      	cmp	r3, r0
 8006d1a:	d1f3      	bne.n	8006d04 <_free_r+0x20>
 8006d1c:	6818      	ldr	r0, [r3, #0]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	1841      	adds	r1, r0, r1
 8006d22:	6021      	str	r1, [r4, #0]
 8006d24:	e7ee      	b.n	8006d04 <_free_r+0x20>
 8006d26:	001a      	movs	r2, r3
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d001      	beq.n	8006d32 <_free_r+0x4e>
 8006d2e:	42a3      	cmp	r3, r4
 8006d30:	d9f9      	bls.n	8006d26 <_free_r+0x42>
 8006d32:	6811      	ldr	r1, [r2, #0]
 8006d34:	1850      	adds	r0, r2, r1
 8006d36:	42a0      	cmp	r0, r4
 8006d38:	d10b      	bne.n	8006d52 <_free_r+0x6e>
 8006d3a:	6820      	ldr	r0, [r4, #0]
 8006d3c:	1809      	adds	r1, r1, r0
 8006d3e:	1850      	adds	r0, r2, r1
 8006d40:	6011      	str	r1, [r2, #0]
 8006d42:	4283      	cmp	r3, r0
 8006d44:	d1e0      	bne.n	8006d08 <_free_r+0x24>
 8006d46:	6818      	ldr	r0, [r3, #0]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	1841      	adds	r1, r0, r1
 8006d4c:	6011      	str	r1, [r2, #0]
 8006d4e:	6053      	str	r3, [r2, #4]
 8006d50:	e7da      	b.n	8006d08 <_free_r+0x24>
 8006d52:	42a0      	cmp	r0, r4
 8006d54:	d902      	bls.n	8006d5c <_free_r+0x78>
 8006d56:	230c      	movs	r3, #12
 8006d58:	602b      	str	r3, [r5, #0]
 8006d5a:	e7d5      	b.n	8006d08 <_free_r+0x24>
 8006d5c:	6821      	ldr	r1, [r4, #0]
 8006d5e:	1860      	adds	r0, r4, r1
 8006d60:	4283      	cmp	r3, r0
 8006d62:	d103      	bne.n	8006d6c <_free_r+0x88>
 8006d64:	6818      	ldr	r0, [r3, #0]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	1841      	adds	r1, r0, r1
 8006d6a:	6021      	str	r1, [r4, #0]
 8006d6c:	6063      	str	r3, [r4, #4]
 8006d6e:	6054      	str	r4, [r2, #4]
 8006d70:	e7ca      	b.n	8006d08 <_free_r+0x24>
 8006d72:	46c0      	nop			; (mov r8, r8)
 8006d74:	2000034c 	.word	0x2000034c

08006d78 <sbrk_aligned>:
 8006d78:	b570      	push	{r4, r5, r6, lr}
 8006d7a:	4e0f      	ldr	r6, [pc, #60]	; (8006db8 <sbrk_aligned+0x40>)
 8006d7c:	000d      	movs	r5, r1
 8006d7e:	6831      	ldr	r1, [r6, #0]
 8006d80:	0004      	movs	r4, r0
 8006d82:	2900      	cmp	r1, #0
 8006d84:	d102      	bne.n	8006d8c <sbrk_aligned+0x14>
 8006d86:	f000 f9f1 	bl	800716c <_sbrk_r>
 8006d8a:	6030      	str	r0, [r6, #0]
 8006d8c:	0029      	movs	r1, r5
 8006d8e:	0020      	movs	r0, r4
 8006d90:	f000 f9ec 	bl	800716c <_sbrk_r>
 8006d94:	1c43      	adds	r3, r0, #1
 8006d96:	d00a      	beq.n	8006dae <sbrk_aligned+0x36>
 8006d98:	2303      	movs	r3, #3
 8006d9a:	1cc5      	adds	r5, r0, #3
 8006d9c:	439d      	bics	r5, r3
 8006d9e:	42a8      	cmp	r0, r5
 8006da0:	d007      	beq.n	8006db2 <sbrk_aligned+0x3a>
 8006da2:	1a29      	subs	r1, r5, r0
 8006da4:	0020      	movs	r0, r4
 8006da6:	f000 f9e1 	bl	800716c <_sbrk_r>
 8006daa:	1c43      	adds	r3, r0, #1
 8006dac:	d101      	bne.n	8006db2 <sbrk_aligned+0x3a>
 8006dae:	2501      	movs	r5, #1
 8006db0:	426d      	negs	r5, r5
 8006db2:	0028      	movs	r0, r5
 8006db4:	bd70      	pop	{r4, r5, r6, pc}
 8006db6:	46c0      	nop			; (mov r8, r8)
 8006db8:	20000350 	.word	0x20000350

08006dbc <_malloc_r>:
 8006dbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006dbe:	2203      	movs	r2, #3
 8006dc0:	1ccb      	adds	r3, r1, #3
 8006dc2:	4393      	bics	r3, r2
 8006dc4:	3308      	adds	r3, #8
 8006dc6:	0006      	movs	r6, r0
 8006dc8:	001f      	movs	r7, r3
 8006dca:	2b0c      	cmp	r3, #12
 8006dcc:	d232      	bcs.n	8006e34 <_malloc_r+0x78>
 8006dce:	270c      	movs	r7, #12
 8006dd0:	42b9      	cmp	r1, r7
 8006dd2:	d831      	bhi.n	8006e38 <_malloc_r+0x7c>
 8006dd4:	0030      	movs	r0, r6
 8006dd6:	f000 fa2f 	bl	8007238 <__malloc_lock>
 8006dda:	4d32      	ldr	r5, [pc, #200]	; (8006ea4 <_malloc_r+0xe8>)
 8006ddc:	682b      	ldr	r3, [r5, #0]
 8006dde:	001c      	movs	r4, r3
 8006de0:	2c00      	cmp	r4, #0
 8006de2:	d12e      	bne.n	8006e42 <_malloc_r+0x86>
 8006de4:	0039      	movs	r1, r7
 8006de6:	0030      	movs	r0, r6
 8006de8:	f7ff ffc6 	bl	8006d78 <sbrk_aligned>
 8006dec:	0004      	movs	r4, r0
 8006dee:	1c43      	adds	r3, r0, #1
 8006df0:	d11e      	bne.n	8006e30 <_malloc_r+0x74>
 8006df2:	682c      	ldr	r4, [r5, #0]
 8006df4:	0025      	movs	r5, r4
 8006df6:	2d00      	cmp	r5, #0
 8006df8:	d14a      	bne.n	8006e90 <_malloc_r+0xd4>
 8006dfa:	6823      	ldr	r3, [r4, #0]
 8006dfc:	0029      	movs	r1, r5
 8006dfe:	18e3      	adds	r3, r4, r3
 8006e00:	0030      	movs	r0, r6
 8006e02:	9301      	str	r3, [sp, #4]
 8006e04:	f000 f9b2 	bl	800716c <_sbrk_r>
 8006e08:	9b01      	ldr	r3, [sp, #4]
 8006e0a:	4283      	cmp	r3, r0
 8006e0c:	d143      	bne.n	8006e96 <_malloc_r+0xda>
 8006e0e:	6823      	ldr	r3, [r4, #0]
 8006e10:	3703      	adds	r7, #3
 8006e12:	1aff      	subs	r7, r7, r3
 8006e14:	2303      	movs	r3, #3
 8006e16:	439f      	bics	r7, r3
 8006e18:	3708      	adds	r7, #8
 8006e1a:	2f0c      	cmp	r7, #12
 8006e1c:	d200      	bcs.n	8006e20 <_malloc_r+0x64>
 8006e1e:	270c      	movs	r7, #12
 8006e20:	0039      	movs	r1, r7
 8006e22:	0030      	movs	r0, r6
 8006e24:	f7ff ffa8 	bl	8006d78 <sbrk_aligned>
 8006e28:	1c43      	adds	r3, r0, #1
 8006e2a:	d034      	beq.n	8006e96 <_malloc_r+0xda>
 8006e2c:	6823      	ldr	r3, [r4, #0]
 8006e2e:	19df      	adds	r7, r3, r7
 8006e30:	6027      	str	r7, [r4, #0]
 8006e32:	e013      	b.n	8006e5c <_malloc_r+0xa0>
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	dacb      	bge.n	8006dd0 <_malloc_r+0x14>
 8006e38:	230c      	movs	r3, #12
 8006e3a:	2500      	movs	r5, #0
 8006e3c:	6033      	str	r3, [r6, #0]
 8006e3e:	0028      	movs	r0, r5
 8006e40:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006e42:	6822      	ldr	r2, [r4, #0]
 8006e44:	1bd1      	subs	r1, r2, r7
 8006e46:	d420      	bmi.n	8006e8a <_malloc_r+0xce>
 8006e48:	290b      	cmp	r1, #11
 8006e4a:	d917      	bls.n	8006e7c <_malloc_r+0xc0>
 8006e4c:	19e2      	adds	r2, r4, r7
 8006e4e:	6027      	str	r7, [r4, #0]
 8006e50:	42a3      	cmp	r3, r4
 8006e52:	d111      	bne.n	8006e78 <_malloc_r+0xbc>
 8006e54:	602a      	str	r2, [r5, #0]
 8006e56:	6863      	ldr	r3, [r4, #4]
 8006e58:	6011      	str	r1, [r2, #0]
 8006e5a:	6053      	str	r3, [r2, #4]
 8006e5c:	0030      	movs	r0, r6
 8006e5e:	0025      	movs	r5, r4
 8006e60:	f000 f9f2 	bl	8007248 <__malloc_unlock>
 8006e64:	2207      	movs	r2, #7
 8006e66:	350b      	adds	r5, #11
 8006e68:	1d23      	adds	r3, r4, #4
 8006e6a:	4395      	bics	r5, r2
 8006e6c:	1aea      	subs	r2, r5, r3
 8006e6e:	429d      	cmp	r5, r3
 8006e70:	d0e5      	beq.n	8006e3e <_malloc_r+0x82>
 8006e72:	1b5b      	subs	r3, r3, r5
 8006e74:	50a3      	str	r3, [r4, r2]
 8006e76:	e7e2      	b.n	8006e3e <_malloc_r+0x82>
 8006e78:	605a      	str	r2, [r3, #4]
 8006e7a:	e7ec      	b.n	8006e56 <_malloc_r+0x9a>
 8006e7c:	6862      	ldr	r2, [r4, #4]
 8006e7e:	42a3      	cmp	r3, r4
 8006e80:	d101      	bne.n	8006e86 <_malloc_r+0xca>
 8006e82:	602a      	str	r2, [r5, #0]
 8006e84:	e7ea      	b.n	8006e5c <_malloc_r+0xa0>
 8006e86:	605a      	str	r2, [r3, #4]
 8006e88:	e7e8      	b.n	8006e5c <_malloc_r+0xa0>
 8006e8a:	0023      	movs	r3, r4
 8006e8c:	6864      	ldr	r4, [r4, #4]
 8006e8e:	e7a7      	b.n	8006de0 <_malloc_r+0x24>
 8006e90:	002c      	movs	r4, r5
 8006e92:	686d      	ldr	r5, [r5, #4]
 8006e94:	e7af      	b.n	8006df6 <_malloc_r+0x3a>
 8006e96:	230c      	movs	r3, #12
 8006e98:	0030      	movs	r0, r6
 8006e9a:	6033      	str	r3, [r6, #0]
 8006e9c:	f000 f9d4 	bl	8007248 <__malloc_unlock>
 8006ea0:	e7cd      	b.n	8006e3e <_malloc_r+0x82>
 8006ea2:	46c0      	nop			; (mov r8, r8)
 8006ea4:	2000034c 	.word	0x2000034c

08006ea8 <__ssputs_r>:
 8006ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006eaa:	688e      	ldr	r6, [r1, #8]
 8006eac:	b085      	sub	sp, #20
 8006eae:	0007      	movs	r7, r0
 8006eb0:	000c      	movs	r4, r1
 8006eb2:	9203      	str	r2, [sp, #12]
 8006eb4:	9301      	str	r3, [sp, #4]
 8006eb6:	429e      	cmp	r6, r3
 8006eb8:	d83c      	bhi.n	8006f34 <__ssputs_r+0x8c>
 8006eba:	2390      	movs	r3, #144	; 0x90
 8006ebc:	898a      	ldrh	r2, [r1, #12]
 8006ebe:	00db      	lsls	r3, r3, #3
 8006ec0:	421a      	tst	r2, r3
 8006ec2:	d034      	beq.n	8006f2e <__ssputs_r+0x86>
 8006ec4:	6909      	ldr	r1, [r1, #16]
 8006ec6:	6823      	ldr	r3, [r4, #0]
 8006ec8:	6960      	ldr	r0, [r4, #20]
 8006eca:	1a5b      	subs	r3, r3, r1
 8006ecc:	9302      	str	r3, [sp, #8]
 8006ece:	2303      	movs	r3, #3
 8006ed0:	4343      	muls	r3, r0
 8006ed2:	0fdd      	lsrs	r5, r3, #31
 8006ed4:	18ed      	adds	r5, r5, r3
 8006ed6:	9b01      	ldr	r3, [sp, #4]
 8006ed8:	9802      	ldr	r0, [sp, #8]
 8006eda:	3301      	adds	r3, #1
 8006edc:	181b      	adds	r3, r3, r0
 8006ede:	106d      	asrs	r5, r5, #1
 8006ee0:	42ab      	cmp	r3, r5
 8006ee2:	d900      	bls.n	8006ee6 <__ssputs_r+0x3e>
 8006ee4:	001d      	movs	r5, r3
 8006ee6:	0553      	lsls	r3, r2, #21
 8006ee8:	d532      	bpl.n	8006f50 <__ssputs_r+0xa8>
 8006eea:	0029      	movs	r1, r5
 8006eec:	0038      	movs	r0, r7
 8006eee:	f7ff ff65 	bl	8006dbc <_malloc_r>
 8006ef2:	1e06      	subs	r6, r0, #0
 8006ef4:	d109      	bne.n	8006f0a <__ssputs_r+0x62>
 8006ef6:	230c      	movs	r3, #12
 8006ef8:	603b      	str	r3, [r7, #0]
 8006efa:	2340      	movs	r3, #64	; 0x40
 8006efc:	2001      	movs	r0, #1
 8006efe:	89a2      	ldrh	r2, [r4, #12]
 8006f00:	4240      	negs	r0, r0
 8006f02:	4313      	orrs	r3, r2
 8006f04:	81a3      	strh	r3, [r4, #12]
 8006f06:	b005      	add	sp, #20
 8006f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f0a:	9a02      	ldr	r2, [sp, #8]
 8006f0c:	6921      	ldr	r1, [r4, #16]
 8006f0e:	f7ff fb18 	bl	8006542 <memcpy>
 8006f12:	89a3      	ldrh	r3, [r4, #12]
 8006f14:	4a14      	ldr	r2, [pc, #80]	; (8006f68 <__ssputs_r+0xc0>)
 8006f16:	401a      	ands	r2, r3
 8006f18:	2380      	movs	r3, #128	; 0x80
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	81a3      	strh	r3, [r4, #12]
 8006f1e:	9b02      	ldr	r3, [sp, #8]
 8006f20:	6126      	str	r6, [r4, #16]
 8006f22:	18f6      	adds	r6, r6, r3
 8006f24:	6026      	str	r6, [r4, #0]
 8006f26:	6165      	str	r5, [r4, #20]
 8006f28:	9e01      	ldr	r6, [sp, #4]
 8006f2a:	1aed      	subs	r5, r5, r3
 8006f2c:	60a5      	str	r5, [r4, #8]
 8006f2e:	9b01      	ldr	r3, [sp, #4]
 8006f30:	429e      	cmp	r6, r3
 8006f32:	d900      	bls.n	8006f36 <__ssputs_r+0x8e>
 8006f34:	9e01      	ldr	r6, [sp, #4]
 8006f36:	0032      	movs	r2, r6
 8006f38:	9903      	ldr	r1, [sp, #12]
 8006f3a:	6820      	ldr	r0, [r4, #0]
 8006f3c:	f000 f968 	bl	8007210 <memmove>
 8006f40:	68a3      	ldr	r3, [r4, #8]
 8006f42:	2000      	movs	r0, #0
 8006f44:	1b9b      	subs	r3, r3, r6
 8006f46:	60a3      	str	r3, [r4, #8]
 8006f48:	6823      	ldr	r3, [r4, #0]
 8006f4a:	199e      	adds	r6, r3, r6
 8006f4c:	6026      	str	r6, [r4, #0]
 8006f4e:	e7da      	b.n	8006f06 <__ssputs_r+0x5e>
 8006f50:	002a      	movs	r2, r5
 8006f52:	0038      	movs	r0, r7
 8006f54:	f000 f980 	bl	8007258 <_realloc_r>
 8006f58:	1e06      	subs	r6, r0, #0
 8006f5a:	d1e0      	bne.n	8006f1e <__ssputs_r+0x76>
 8006f5c:	0038      	movs	r0, r7
 8006f5e:	6921      	ldr	r1, [r4, #16]
 8006f60:	f7ff fec0 	bl	8006ce4 <_free_r>
 8006f64:	e7c7      	b.n	8006ef6 <__ssputs_r+0x4e>
 8006f66:	46c0      	nop			; (mov r8, r8)
 8006f68:	fffffb7f 	.word	0xfffffb7f

08006f6c <_svfiprintf_r>:
 8006f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f6e:	b0a1      	sub	sp, #132	; 0x84
 8006f70:	9003      	str	r0, [sp, #12]
 8006f72:	001d      	movs	r5, r3
 8006f74:	898b      	ldrh	r3, [r1, #12]
 8006f76:	000f      	movs	r7, r1
 8006f78:	0016      	movs	r6, r2
 8006f7a:	061b      	lsls	r3, r3, #24
 8006f7c:	d511      	bpl.n	8006fa2 <_svfiprintf_r+0x36>
 8006f7e:	690b      	ldr	r3, [r1, #16]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d10e      	bne.n	8006fa2 <_svfiprintf_r+0x36>
 8006f84:	2140      	movs	r1, #64	; 0x40
 8006f86:	f7ff ff19 	bl	8006dbc <_malloc_r>
 8006f8a:	6038      	str	r0, [r7, #0]
 8006f8c:	6138      	str	r0, [r7, #16]
 8006f8e:	2800      	cmp	r0, #0
 8006f90:	d105      	bne.n	8006f9e <_svfiprintf_r+0x32>
 8006f92:	230c      	movs	r3, #12
 8006f94:	9a03      	ldr	r2, [sp, #12]
 8006f96:	3801      	subs	r0, #1
 8006f98:	6013      	str	r3, [r2, #0]
 8006f9a:	b021      	add	sp, #132	; 0x84
 8006f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f9e:	2340      	movs	r3, #64	; 0x40
 8006fa0:	617b      	str	r3, [r7, #20]
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	ac08      	add	r4, sp, #32
 8006fa6:	6163      	str	r3, [r4, #20]
 8006fa8:	3320      	adds	r3, #32
 8006faa:	7663      	strb	r3, [r4, #25]
 8006fac:	3310      	adds	r3, #16
 8006fae:	76a3      	strb	r3, [r4, #26]
 8006fb0:	9507      	str	r5, [sp, #28]
 8006fb2:	0035      	movs	r5, r6
 8006fb4:	782b      	ldrb	r3, [r5, #0]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d001      	beq.n	8006fbe <_svfiprintf_r+0x52>
 8006fba:	2b25      	cmp	r3, #37	; 0x25
 8006fbc:	d147      	bne.n	800704e <_svfiprintf_r+0xe2>
 8006fbe:	1bab      	subs	r3, r5, r6
 8006fc0:	9305      	str	r3, [sp, #20]
 8006fc2:	42b5      	cmp	r5, r6
 8006fc4:	d00c      	beq.n	8006fe0 <_svfiprintf_r+0x74>
 8006fc6:	0032      	movs	r2, r6
 8006fc8:	0039      	movs	r1, r7
 8006fca:	9803      	ldr	r0, [sp, #12]
 8006fcc:	f7ff ff6c 	bl	8006ea8 <__ssputs_r>
 8006fd0:	1c43      	adds	r3, r0, #1
 8006fd2:	d100      	bne.n	8006fd6 <_svfiprintf_r+0x6a>
 8006fd4:	e0ae      	b.n	8007134 <_svfiprintf_r+0x1c8>
 8006fd6:	6962      	ldr	r2, [r4, #20]
 8006fd8:	9b05      	ldr	r3, [sp, #20]
 8006fda:	4694      	mov	ip, r2
 8006fdc:	4463      	add	r3, ip
 8006fde:	6163      	str	r3, [r4, #20]
 8006fe0:	782b      	ldrb	r3, [r5, #0]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d100      	bne.n	8006fe8 <_svfiprintf_r+0x7c>
 8006fe6:	e0a5      	b.n	8007134 <_svfiprintf_r+0x1c8>
 8006fe8:	2201      	movs	r2, #1
 8006fea:	2300      	movs	r3, #0
 8006fec:	4252      	negs	r2, r2
 8006fee:	6062      	str	r2, [r4, #4]
 8006ff0:	a904      	add	r1, sp, #16
 8006ff2:	3254      	adds	r2, #84	; 0x54
 8006ff4:	1852      	adds	r2, r2, r1
 8006ff6:	1c6e      	adds	r6, r5, #1
 8006ff8:	6023      	str	r3, [r4, #0]
 8006ffa:	60e3      	str	r3, [r4, #12]
 8006ffc:	60a3      	str	r3, [r4, #8]
 8006ffe:	7013      	strb	r3, [r2, #0]
 8007000:	65a3      	str	r3, [r4, #88]	; 0x58
 8007002:	2205      	movs	r2, #5
 8007004:	7831      	ldrb	r1, [r6, #0]
 8007006:	4854      	ldr	r0, [pc, #336]	; (8007158 <_svfiprintf_r+0x1ec>)
 8007008:	f7ff fa90 	bl	800652c <memchr>
 800700c:	1c75      	adds	r5, r6, #1
 800700e:	2800      	cmp	r0, #0
 8007010:	d11f      	bne.n	8007052 <_svfiprintf_r+0xe6>
 8007012:	6822      	ldr	r2, [r4, #0]
 8007014:	06d3      	lsls	r3, r2, #27
 8007016:	d504      	bpl.n	8007022 <_svfiprintf_r+0xb6>
 8007018:	2353      	movs	r3, #83	; 0x53
 800701a:	a904      	add	r1, sp, #16
 800701c:	185b      	adds	r3, r3, r1
 800701e:	2120      	movs	r1, #32
 8007020:	7019      	strb	r1, [r3, #0]
 8007022:	0713      	lsls	r3, r2, #28
 8007024:	d504      	bpl.n	8007030 <_svfiprintf_r+0xc4>
 8007026:	2353      	movs	r3, #83	; 0x53
 8007028:	a904      	add	r1, sp, #16
 800702a:	185b      	adds	r3, r3, r1
 800702c:	212b      	movs	r1, #43	; 0x2b
 800702e:	7019      	strb	r1, [r3, #0]
 8007030:	7833      	ldrb	r3, [r6, #0]
 8007032:	2b2a      	cmp	r3, #42	; 0x2a
 8007034:	d016      	beq.n	8007064 <_svfiprintf_r+0xf8>
 8007036:	0035      	movs	r5, r6
 8007038:	2100      	movs	r1, #0
 800703a:	200a      	movs	r0, #10
 800703c:	68e3      	ldr	r3, [r4, #12]
 800703e:	782a      	ldrb	r2, [r5, #0]
 8007040:	1c6e      	adds	r6, r5, #1
 8007042:	3a30      	subs	r2, #48	; 0x30
 8007044:	2a09      	cmp	r2, #9
 8007046:	d94e      	bls.n	80070e6 <_svfiprintf_r+0x17a>
 8007048:	2900      	cmp	r1, #0
 800704a:	d111      	bne.n	8007070 <_svfiprintf_r+0x104>
 800704c:	e017      	b.n	800707e <_svfiprintf_r+0x112>
 800704e:	3501      	adds	r5, #1
 8007050:	e7b0      	b.n	8006fb4 <_svfiprintf_r+0x48>
 8007052:	4b41      	ldr	r3, [pc, #260]	; (8007158 <_svfiprintf_r+0x1ec>)
 8007054:	6822      	ldr	r2, [r4, #0]
 8007056:	1ac0      	subs	r0, r0, r3
 8007058:	2301      	movs	r3, #1
 800705a:	4083      	lsls	r3, r0
 800705c:	4313      	orrs	r3, r2
 800705e:	002e      	movs	r6, r5
 8007060:	6023      	str	r3, [r4, #0]
 8007062:	e7ce      	b.n	8007002 <_svfiprintf_r+0x96>
 8007064:	9b07      	ldr	r3, [sp, #28]
 8007066:	1d19      	adds	r1, r3, #4
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	9107      	str	r1, [sp, #28]
 800706c:	2b00      	cmp	r3, #0
 800706e:	db01      	blt.n	8007074 <_svfiprintf_r+0x108>
 8007070:	930b      	str	r3, [sp, #44]	; 0x2c
 8007072:	e004      	b.n	800707e <_svfiprintf_r+0x112>
 8007074:	425b      	negs	r3, r3
 8007076:	60e3      	str	r3, [r4, #12]
 8007078:	2302      	movs	r3, #2
 800707a:	4313      	orrs	r3, r2
 800707c:	6023      	str	r3, [r4, #0]
 800707e:	782b      	ldrb	r3, [r5, #0]
 8007080:	2b2e      	cmp	r3, #46	; 0x2e
 8007082:	d10a      	bne.n	800709a <_svfiprintf_r+0x12e>
 8007084:	786b      	ldrb	r3, [r5, #1]
 8007086:	2b2a      	cmp	r3, #42	; 0x2a
 8007088:	d135      	bne.n	80070f6 <_svfiprintf_r+0x18a>
 800708a:	9b07      	ldr	r3, [sp, #28]
 800708c:	3502      	adds	r5, #2
 800708e:	1d1a      	adds	r2, r3, #4
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	9207      	str	r2, [sp, #28]
 8007094:	2b00      	cmp	r3, #0
 8007096:	db2b      	blt.n	80070f0 <_svfiprintf_r+0x184>
 8007098:	9309      	str	r3, [sp, #36]	; 0x24
 800709a:	4e30      	ldr	r6, [pc, #192]	; (800715c <_svfiprintf_r+0x1f0>)
 800709c:	2203      	movs	r2, #3
 800709e:	0030      	movs	r0, r6
 80070a0:	7829      	ldrb	r1, [r5, #0]
 80070a2:	f7ff fa43 	bl	800652c <memchr>
 80070a6:	2800      	cmp	r0, #0
 80070a8:	d006      	beq.n	80070b8 <_svfiprintf_r+0x14c>
 80070aa:	2340      	movs	r3, #64	; 0x40
 80070ac:	1b80      	subs	r0, r0, r6
 80070ae:	4083      	lsls	r3, r0
 80070b0:	6822      	ldr	r2, [r4, #0]
 80070b2:	3501      	adds	r5, #1
 80070b4:	4313      	orrs	r3, r2
 80070b6:	6023      	str	r3, [r4, #0]
 80070b8:	7829      	ldrb	r1, [r5, #0]
 80070ba:	2206      	movs	r2, #6
 80070bc:	4828      	ldr	r0, [pc, #160]	; (8007160 <_svfiprintf_r+0x1f4>)
 80070be:	1c6e      	adds	r6, r5, #1
 80070c0:	7621      	strb	r1, [r4, #24]
 80070c2:	f7ff fa33 	bl	800652c <memchr>
 80070c6:	2800      	cmp	r0, #0
 80070c8:	d03c      	beq.n	8007144 <_svfiprintf_r+0x1d8>
 80070ca:	4b26      	ldr	r3, [pc, #152]	; (8007164 <_svfiprintf_r+0x1f8>)
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d125      	bne.n	800711c <_svfiprintf_r+0x1b0>
 80070d0:	2207      	movs	r2, #7
 80070d2:	9b07      	ldr	r3, [sp, #28]
 80070d4:	3307      	adds	r3, #7
 80070d6:	4393      	bics	r3, r2
 80070d8:	3308      	adds	r3, #8
 80070da:	9307      	str	r3, [sp, #28]
 80070dc:	6963      	ldr	r3, [r4, #20]
 80070de:	9a04      	ldr	r2, [sp, #16]
 80070e0:	189b      	adds	r3, r3, r2
 80070e2:	6163      	str	r3, [r4, #20]
 80070e4:	e765      	b.n	8006fb2 <_svfiprintf_r+0x46>
 80070e6:	4343      	muls	r3, r0
 80070e8:	0035      	movs	r5, r6
 80070ea:	2101      	movs	r1, #1
 80070ec:	189b      	adds	r3, r3, r2
 80070ee:	e7a6      	b.n	800703e <_svfiprintf_r+0xd2>
 80070f0:	2301      	movs	r3, #1
 80070f2:	425b      	negs	r3, r3
 80070f4:	e7d0      	b.n	8007098 <_svfiprintf_r+0x12c>
 80070f6:	2300      	movs	r3, #0
 80070f8:	200a      	movs	r0, #10
 80070fa:	001a      	movs	r2, r3
 80070fc:	3501      	adds	r5, #1
 80070fe:	6063      	str	r3, [r4, #4]
 8007100:	7829      	ldrb	r1, [r5, #0]
 8007102:	1c6e      	adds	r6, r5, #1
 8007104:	3930      	subs	r1, #48	; 0x30
 8007106:	2909      	cmp	r1, #9
 8007108:	d903      	bls.n	8007112 <_svfiprintf_r+0x1a6>
 800710a:	2b00      	cmp	r3, #0
 800710c:	d0c5      	beq.n	800709a <_svfiprintf_r+0x12e>
 800710e:	9209      	str	r2, [sp, #36]	; 0x24
 8007110:	e7c3      	b.n	800709a <_svfiprintf_r+0x12e>
 8007112:	4342      	muls	r2, r0
 8007114:	0035      	movs	r5, r6
 8007116:	2301      	movs	r3, #1
 8007118:	1852      	adds	r2, r2, r1
 800711a:	e7f1      	b.n	8007100 <_svfiprintf_r+0x194>
 800711c:	ab07      	add	r3, sp, #28
 800711e:	9300      	str	r3, [sp, #0]
 8007120:	003a      	movs	r2, r7
 8007122:	0021      	movs	r1, r4
 8007124:	4b10      	ldr	r3, [pc, #64]	; (8007168 <_svfiprintf_r+0x1fc>)
 8007126:	9803      	ldr	r0, [sp, #12]
 8007128:	f7fd ff68 	bl	8004ffc <_printf_float>
 800712c:	9004      	str	r0, [sp, #16]
 800712e:	9b04      	ldr	r3, [sp, #16]
 8007130:	3301      	adds	r3, #1
 8007132:	d1d3      	bne.n	80070dc <_svfiprintf_r+0x170>
 8007134:	89bb      	ldrh	r3, [r7, #12]
 8007136:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007138:	065b      	lsls	r3, r3, #25
 800713a:	d400      	bmi.n	800713e <_svfiprintf_r+0x1d2>
 800713c:	e72d      	b.n	8006f9a <_svfiprintf_r+0x2e>
 800713e:	2001      	movs	r0, #1
 8007140:	4240      	negs	r0, r0
 8007142:	e72a      	b.n	8006f9a <_svfiprintf_r+0x2e>
 8007144:	ab07      	add	r3, sp, #28
 8007146:	9300      	str	r3, [sp, #0]
 8007148:	003a      	movs	r2, r7
 800714a:	0021      	movs	r1, r4
 800714c:	4b06      	ldr	r3, [pc, #24]	; (8007168 <_svfiprintf_r+0x1fc>)
 800714e:	9803      	ldr	r0, [sp, #12]
 8007150:	f7fe fa06 	bl	8005560 <_printf_i>
 8007154:	e7ea      	b.n	800712c <_svfiprintf_r+0x1c0>
 8007156:	46c0      	nop			; (mov r8, r8)
 8007158:	080080dc 	.word	0x080080dc
 800715c:	080080e2 	.word	0x080080e2
 8007160:	080080e6 	.word	0x080080e6
 8007164:	08004ffd 	.word	0x08004ffd
 8007168:	08006ea9 	.word	0x08006ea9

0800716c <_sbrk_r>:
 800716c:	2300      	movs	r3, #0
 800716e:	b570      	push	{r4, r5, r6, lr}
 8007170:	4d06      	ldr	r5, [pc, #24]	; (800718c <_sbrk_r+0x20>)
 8007172:	0004      	movs	r4, r0
 8007174:	0008      	movs	r0, r1
 8007176:	602b      	str	r3, [r5, #0]
 8007178:	f7fb fbf2 	bl	8002960 <_sbrk>
 800717c:	1c43      	adds	r3, r0, #1
 800717e:	d103      	bne.n	8007188 <_sbrk_r+0x1c>
 8007180:	682b      	ldr	r3, [r5, #0]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d000      	beq.n	8007188 <_sbrk_r+0x1c>
 8007186:	6023      	str	r3, [r4, #0]
 8007188:	bd70      	pop	{r4, r5, r6, pc}
 800718a:	46c0      	nop			; (mov r8, r8)
 800718c:	20000354 	.word	0x20000354

08007190 <__assert_func>:
 8007190:	b530      	push	{r4, r5, lr}
 8007192:	0014      	movs	r4, r2
 8007194:	001a      	movs	r2, r3
 8007196:	4b09      	ldr	r3, [pc, #36]	; (80071bc <__assert_func+0x2c>)
 8007198:	0005      	movs	r5, r0
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	b085      	sub	sp, #20
 800719e:	68d8      	ldr	r0, [r3, #12]
 80071a0:	4b07      	ldr	r3, [pc, #28]	; (80071c0 <__assert_func+0x30>)
 80071a2:	2c00      	cmp	r4, #0
 80071a4:	d101      	bne.n	80071aa <__assert_func+0x1a>
 80071a6:	4b07      	ldr	r3, [pc, #28]	; (80071c4 <__assert_func+0x34>)
 80071a8:	001c      	movs	r4, r3
 80071aa:	9301      	str	r3, [sp, #4]
 80071ac:	9100      	str	r1, [sp, #0]
 80071ae:	002b      	movs	r3, r5
 80071b0:	4905      	ldr	r1, [pc, #20]	; (80071c8 <__assert_func+0x38>)
 80071b2:	9402      	str	r4, [sp, #8]
 80071b4:	f000 f80a 	bl	80071cc <fiprintf>
 80071b8:	f000 faba 	bl	8007730 <abort>
 80071bc:	2000000c 	.word	0x2000000c
 80071c0:	080080ed 	.word	0x080080ed
 80071c4:	08008128 	.word	0x08008128
 80071c8:	080080fa 	.word	0x080080fa

080071cc <fiprintf>:
 80071cc:	b40e      	push	{r1, r2, r3}
 80071ce:	b503      	push	{r0, r1, lr}
 80071d0:	0001      	movs	r1, r0
 80071d2:	ab03      	add	r3, sp, #12
 80071d4:	4804      	ldr	r0, [pc, #16]	; (80071e8 <fiprintf+0x1c>)
 80071d6:	cb04      	ldmia	r3!, {r2}
 80071d8:	6800      	ldr	r0, [r0, #0]
 80071da:	9301      	str	r3, [sp, #4]
 80071dc:	f000 f892 	bl	8007304 <_vfiprintf_r>
 80071e0:	b002      	add	sp, #8
 80071e2:	bc08      	pop	{r3}
 80071e4:	b003      	add	sp, #12
 80071e6:	4718      	bx	r3
 80071e8:	2000000c 	.word	0x2000000c

080071ec <__ascii_mbtowc>:
 80071ec:	b082      	sub	sp, #8
 80071ee:	2900      	cmp	r1, #0
 80071f0:	d100      	bne.n	80071f4 <__ascii_mbtowc+0x8>
 80071f2:	a901      	add	r1, sp, #4
 80071f4:	1e10      	subs	r0, r2, #0
 80071f6:	d006      	beq.n	8007206 <__ascii_mbtowc+0x1a>
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d006      	beq.n	800720a <__ascii_mbtowc+0x1e>
 80071fc:	7813      	ldrb	r3, [r2, #0]
 80071fe:	600b      	str	r3, [r1, #0]
 8007200:	7810      	ldrb	r0, [r2, #0]
 8007202:	1e43      	subs	r3, r0, #1
 8007204:	4198      	sbcs	r0, r3
 8007206:	b002      	add	sp, #8
 8007208:	4770      	bx	lr
 800720a:	2002      	movs	r0, #2
 800720c:	4240      	negs	r0, r0
 800720e:	e7fa      	b.n	8007206 <__ascii_mbtowc+0x1a>

08007210 <memmove>:
 8007210:	b510      	push	{r4, lr}
 8007212:	4288      	cmp	r0, r1
 8007214:	d902      	bls.n	800721c <memmove+0xc>
 8007216:	188b      	adds	r3, r1, r2
 8007218:	4298      	cmp	r0, r3
 800721a:	d303      	bcc.n	8007224 <memmove+0x14>
 800721c:	2300      	movs	r3, #0
 800721e:	e007      	b.n	8007230 <memmove+0x20>
 8007220:	5c8b      	ldrb	r3, [r1, r2]
 8007222:	5483      	strb	r3, [r0, r2]
 8007224:	3a01      	subs	r2, #1
 8007226:	d2fb      	bcs.n	8007220 <memmove+0x10>
 8007228:	bd10      	pop	{r4, pc}
 800722a:	5ccc      	ldrb	r4, [r1, r3]
 800722c:	54c4      	strb	r4, [r0, r3]
 800722e:	3301      	adds	r3, #1
 8007230:	429a      	cmp	r2, r3
 8007232:	d1fa      	bne.n	800722a <memmove+0x1a>
 8007234:	e7f8      	b.n	8007228 <memmove+0x18>
	...

08007238 <__malloc_lock>:
 8007238:	b510      	push	{r4, lr}
 800723a:	4802      	ldr	r0, [pc, #8]	; (8007244 <__malloc_lock+0xc>)
 800723c:	f000 fc4f 	bl	8007ade <__retarget_lock_acquire_recursive>
 8007240:	bd10      	pop	{r4, pc}
 8007242:	46c0      	nop			; (mov r8, r8)
 8007244:	20000358 	.word	0x20000358

08007248 <__malloc_unlock>:
 8007248:	b510      	push	{r4, lr}
 800724a:	4802      	ldr	r0, [pc, #8]	; (8007254 <__malloc_unlock+0xc>)
 800724c:	f000 fc48 	bl	8007ae0 <__retarget_lock_release_recursive>
 8007250:	bd10      	pop	{r4, pc}
 8007252:	46c0      	nop			; (mov r8, r8)
 8007254:	20000358 	.word	0x20000358

08007258 <_realloc_r>:
 8007258:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800725a:	0007      	movs	r7, r0
 800725c:	000e      	movs	r6, r1
 800725e:	0014      	movs	r4, r2
 8007260:	2900      	cmp	r1, #0
 8007262:	d105      	bne.n	8007270 <_realloc_r+0x18>
 8007264:	0011      	movs	r1, r2
 8007266:	f7ff fda9 	bl	8006dbc <_malloc_r>
 800726a:	0005      	movs	r5, r0
 800726c:	0028      	movs	r0, r5
 800726e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007270:	2a00      	cmp	r2, #0
 8007272:	d103      	bne.n	800727c <_realloc_r+0x24>
 8007274:	f7ff fd36 	bl	8006ce4 <_free_r>
 8007278:	0025      	movs	r5, r4
 800727a:	e7f7      	b.n	800726c <_realloc_r+0x14>
 800727c:	f000 fc9e 	bl	8007bbc <_malloc_usable_size_r>
 8007280:	9001      	str	r0, [sp, #4]
 8007282:	4284      	cmp	r4, r0
 8007284:	d803      	bhi.n	800728e <_realloc_r+0x36>
 8007286:	0035      	movs	r5, r6
 8007288:	0843      	lsrs	r3, r0, #1
 800728a:	42a3      	cmp	r3, r4
 800728c:	d3ee      	bcc.n	800726c <_realloc_r+0x14>
 800728e:	0021      	movs	r1, r4
 8007290:	0038      	movs	r0, r7
 8007292:	f7ff fd93 	bl	8006dbc <_malloc_r>
 8007296:	1e05      	subs	r5, r0, #0
 8007298:	d0e8      	beq.n	800726c <_realloc_r+0x14>
 800729a:	9b01      	ldr	r3, [sp, #4]
 800729c:	0022      	movs	r2, r4
 800729e:	429c      	cmp	r4, r3
 80072a0:	d900      	bls.n	80072a4 <_realloc_r+0x4c>
 80072a2:	001a      	movs	r2, r3
 80072a4:	0031      	movs	r1, r6
 80072a6:	0028      	movs	r0, r5
 80072a8:	f7ff f94b 	bl	8006542 <memcpy>
 80072ac:	0031      	movs	r1, r6
 80072ae:	0038      	movs	r0, r7
 80072b0:	f7ff fd18 	bl	8006ce4 <_free_r>
 80072b4:	e7da      	b.n	800726c <_realloc_r+0x14>

080072b6 <__sfputc_r>:
 80072b6:	6893      	ldr	r3, [r2, #8]
 80072b8:	b510      	push	{r4, lr}
 80072ba:	3b01      	subs	r3, #1
 80072bc:	6093      	str	r3, [r2, #8]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	da04      	bge.n	80072cc <__sfputc_r+0x16>
 80072c2:	6994      	ldr	r4, [r2, #24]
 80072c4:	42a3      	cmp	r3, r4
 80072c6:	db07      	blt.n	80072d8 <__sfputc_r+0x22>
 80072c8:	290a      	cmp	r1, #10
 80072ca:	d005      	beq.n	80072d8 <__sfputc_r+0x22>
 80072cc:	6813      	ldr	r3, [r2, #0]
 80072ce:	1c58      	adds	r0, r3, #1
 80072d0:	6010      	str	r0, [r2, #0]
 80072d2:	7019      	strb	r1, [r3, #0]
 80072d4:	0008      	movs	r0, r1
 80072d6:	bd10      	pop	{r4, pc}
 80072d8:	f000 f94e 	bl	8007578 <__swbuf_r>
 80072dc:	0001      	movs	r1, r0
 80072de:	e7f9      	b.n	80072d4 <__sfputc_r+0x1e>

080072e0 <__sfputs_r>:
 80072e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072e2:	0006      	movs	r6, r0
 80072e4:	000f      	movs	r7, r1
 80072e6:	0014      	movs	r4, r2
 80072e8:	18d5      	adds	r5, r2, r3
 80072ea:	42ac      	cmp	r4, r5
 80072ec:	d101      	bne.n	80072f2 <__sfputs_r+0x12>
 80072ee:	2000      	movs	r0, #0
 80072f0:	e007      	b.n	8007302 <__sfputs_r+0x22>
 80072f2:	7821      	ldrb	r1, [r4, #0]
 80072f4:	003a      	movs	r2, r7
 80072f6:	0030      	movs	r0, r6
 80072f8:	f7ff ffdd 	bl	80072b6 <__sfputc_r>
 80072fc:	3401      	adds	r4, #1
 80072fe:	1c43      	adds	r3, r0, #1
 8007300:	d1f3      	bne.n	80072ea <__sfputs_r+0xa>
 8007302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007304 <_vfiprintf_r>:
 8007304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007306:	b0a1      	sub	sp, #132	; 0x84
 8007308:	0006      	movs	r6, r0
 800730a:	000c      	movs	r4, r1
 800730c:	001f      	movs	r7, r3
 800730e:	9203      	str	r2, [sp, #12]
 8007310:	2800      	cmp	r0, #0
 8007312:	d004      	beq.n	800731e <_vfiprintf_r+0x1a>
 8007314:	6983      	ldr	r3, [r0, #24]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d101      	bne.n	800731e <_vfiprintf_r+0x1a>
 800731a:	f000 fb3f 	bl	800799c <__sinit>
 800731e:	4b8e      	ldr	r3, [pc, #568]	; (8007558 <_vfiprintf_r+0x254>)
 8007320:	429c      	cmp	r4, r3
 8007322:	d11c      	bne.n	800735e <_vfiprintf_r+0x5a>
 8007324:	6874      	ldr	r4, [r6, #4]
 8007326:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007328:	07db      	lsls	r3, r3, #31
 800732a:	d405      	bmi.n	8007338 <_vfiprintf_r+0x34>
 800732c:	89a3      	ldrh	r3, [r4, #12]
 800732e:	059b      	lsls	r3, r3, #22
 8007330:	d402      	bmi.n	8007338 <_vfiprintf_r+0x34>
 8007332:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007334:	f000 fbd3 	bl	8007ade <__retarget_lock_acquire_recursive>
 8007338:	89a3      	ldrh	r3, [r4, #12]
 800733a:	071b      	lsls	r3, r3, #28
 800733c:	d502      	bpl.n	8007344 <_vfiprintf_r+0x40>
 800733e:	6923      	ldr	r3, [r4, #16]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d11d      	bne.n	8007380 <_vfiprintf_r+0x7c>
 8007344:	0021      	movs	r1, r4
 8007346:	0030      	movs	r0, r6
 8007348:	f000 f97a 	bl	8007640 <__swsetup_r>
 800734c:	2800      	cmp	r0, #0
 800734e:	d017      	beq.n	8007380 <_vfiprintf_r+0x7c>
 8007350:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007352:	07db      	lsls	r3, r3, #31
 8007354:	d50d      	bpl.n	8007372 <_vfiprintf_r+0x6e>
 8007356:	2001      	movs	r0, #1
 8007358:	4240      	negs	r0, r0
 800735a:	b021      	add	sp, #132	; 0x84
 800735c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800735e:	4b7f      	ldr	r3, [pc, #508]	; (800755c <_vfiprintf_r+0x258>)
 8007360:	429c      	cmp	r4, r3
 8007362:	d101      	bne.n	8007368 <_vfiprintf_r+0x64>
 8007364:	68b4      	ldr	r4, [r6, #8]
 8007366:	e7de      	b.n	8007326 <_vfiprintf_r+0x22>
 8007368:	4b7d      	ldr	r3, [pc, #500]	; (8007560 <_vfiprintf_r+0x25c>)
 800736a:	429c      	cmp	r4, r3
 800736c:	d1db      	bne.n	8007326 <_vfiprintf_r+0x22>
 800736e:	68f4      	ldr	r4, [r6, #12]
 8007370:	e7d9      	b.n	8007326 <_vfiprintf_r+0x22>
 8007372:	89a3      	ldrh	r3, [r4, #12]
 8007374:	059b      	lsls	r3, r3, #22
 8007376:	d4ee      	bmi.n	8007356 <_vfiprintf_r+0x52>
 8007378:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800737a:	f000 fbb1 	bl	8007ae0 <__retarget_lock_release_recursive>
 800737e:	e7ea      	b.n	8007356 <_vfiprintf_r+0x52>
 8007380:	2300      	movs	r3, #0
 8007382:	ad08      	add	r5, sp, #32
 8007384:	616b      	str	r3, [r5, #20]
 8007386:	3320      	adds	r3, #32
 8007388:	766b      	strb	r3, [r5, #25]
 800738a:	3310      	adds	r3, #16
 800738c:	76ab      	strb	r3, [r5, #26]
 800738e:	9707      	str	r7, [sp, #28]
 8007390:	9f03      	ldr	r7, [sp, #12]
 8007392:	783b      	ldrb	r3, [r7, #0]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d001      	beq.n	800739c <_vfiprintf_r+0x98>
 8007398:	2b25      	cmp	r3, #37	; 0x25
 800739a:	d14e      	bne.n	800743a <_vfiprintf_r+0x136>
 800739c:	9b03      	ldr	r3, [sp, #12]
 800739e:	1afb      	subs	r3, r7, r3
 80073a0:	9305      	str	r3, [sp, #20]
 80073a2:	9b03      	ldr	r3, [sp, #12]
 80073a4:	429f      	cmp	r7, r3
 80073a6:	d00d      	beq.n	80073c4 <_vfiprintf_r+0xc0>
 80073a8:	9b05      	ldr	r3, [sp, #20]
 80073aa:	0021      	movs	r1, r4
 80073ac:	0030      	movs	r0, r6
 80073ae:	9a03      	ldr	r2, [sp, #12]
 80073b0:	f7ff ff96 	bl	80072e0 <__sfputs_r>
 80073b4:	1c43      	adds	r3, r0, #1
 80073b6:	d100      	bne.n	80073ba <_vfiprintf_r+0xb6>
 80073b8:	e0b5      	b.n	8007526 <_vfiprintf_r+0x222>
 80073ba:	696a      	ldr	r2, [r5, #20]
 80073bc:	9b05      	ldr	r3, [sp, #20]
 80073be:	4694      	mov	ip, r2
 80073c0:	4463      	add	r3, ip
 80073c2:	616b      	str	r3, [r5, #20]
 80073c4:	783b      	ldrb	r3, [r7, #0]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d100      	bne.n	80073cc <_vfiprintf_r+0xc8>
 80073ca:	e0ac      	b.n	8007526 <_vfiprintf_r+0x222>
 80073cc:	2201      	movs	r2, #1
 80073ce:	1c7b      	adds	r3, r7, #1
 80073d0:	9303      	str	r3, [sp, #12]
 80073d2:	2300      	movs	r3, #0
 80073d4:	4252      	negs	r2, r2
 80073d6:	606a      	str	r2, [r5, #4]
 80073d8:	a904      	add	r1, sp, #16
 80073da:	3254      	adds	r2, #84	; 0x54
 80073dc:	1852      	adds	r2, r2, r1
 80073de:	602b      	str	r3, [r5, #0]
 80073e0:	60eb      	str	r3, [r5, #12]
 80073e2:	60ab      	str	r3, [r5, #8]
 80073e4:	7013      	strb	r3, [r2, #0]
 80073e6:	65ab      	str	r3, [r5, #88]	; 0x58
 80073e8:	9b03      	ldr	r3, [sp, #12]
 80073ea:	2205      	movs	r2, #5
 80073ec:	7819      	ldrb	r1, [r3, #0]
 80073ee:	485d      	ldr	r0, [pc, #372]	; (8007564 <_vfiprintf_r+0x260>)
 80073f0:	f7ff f89c 	bl	800652c <memchr>
 80073f4:	9b03      	ldr	r3, [sp, #12]
 80073f6:	1c5f      	adds	r7, r3, #1
 80073f8:	2800      	cmp	r0, #0
 80073fa:	d120      	bne.n	800743e <_vfiprintf_r+0x13a>
 80073fc:	682a      	ldr	r2, [r5, #0]
 80073fe:	06d3      	lsls	r3, r2, #27
 8007400:	d504      	bpl.n	800740c <_vfiprintf_r+0x108>
 8007402:	2353      	movs	r3, #83	; 0x53
 8007404:	a904      	add	r1, sp, #16
 8007406:	185b      	adds	r3, r3, r1
 8007408:	2120      	movs	r1, #32
 800740a:	7019      	strb	r1, [r3, #0]
 800740c:	0713      	lsls	r3, r2, #28
 800740e:	d504      	bpl.n	800741a <_vfiprintf_r+0x116>
 8007410:	2353      	movs	r3, #83	; 0x53
 8007412:	a904      	add	r1, sp, #16
 8007414:	185b      	adds	r3, r3, r1
 8007416:	212b      	movs	r1, #43	; 0x2b
 8007418:	7019      	strb	r1, [r3, #0]
 800741a:	9b03      	ldr	r3, [sp, #12]
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	2b2a      	cmp	r3, #42	; 0x2a
 8007420:	d016      	beq.n	8007450 <_vfiprintf_r+0x14c>
 8007422:	2100      	movs	r1, #0
 8007424:	68eb      	ldr	r3, [r5, #12]
 8007426:	9f03      	ldr	r7, [sp, #12]
 8007428:	783a      	ldrb	r2, [r7, #0]
 800742a:	1c78      	adds	r0, r7, #1
 800742c:	3a30      	subs	r2, #48	; 0x30
 800742e:	4684      	mov	ip, r0
 8007430:	2a09      	cmp	r2, #9
 8007432:	d94f      	bls.n	80074d4 <_vfiprintf_r+0x1d0>
 8007434:	2900      	cmp	r1, #0
 8007436:	d111      	bne.n	800745c <_vfiprintf_r+0x158>
 8007438:	e017      	b.n	800746a <_vfiprintf_r+0x166>
 800743a:	3701      	adds	r7, #1
 800743c:	e7a9      	b.n	8007392 <_vfiprintf_r+0x8e>
 800743e:	4b49      	ldr	r3, [pc, #292]	; (8007564 <_vfiprintf_r+0x260>)
 8007440:	682a      	ldr	r2, [r5, #0]
 8007442:	1ac0      	subs	r0, r0, r3
 8007444:	2301      	movs	r3, #1
 8007446:	4083      	lsls	r3, r0
 8007448:	4313      	orrs	r3, r2
 800744a:	602b      	str	r3, [r5, #0]
 800744c:	9703      	str	r7, [sp, #12]
 800744e:	e7cb      	b.n	80073e8 <_vfiprintf_r+0xe4>
 8007450:	9b07      	ldr	r3, [sp, #28]
 8007452:	1d19      	adds	r1, r3, #4
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	9107      	str	r1, [sp, #28]
 8007458:	2b00      	cmp	r3, #0
 800745a:	db01      	blt.n	8007460 <_vfiprintf_r+0x15c>
 800745c:	930b      	str	r3, [sp, #44]	; 0x2c
 800745e:	e004      	b.n	800746a <_vfiprintf_r+0x166>
 8007460:	425b      	negs	r3, r3
 8007462:	60eb      	str	r3, [r5, #12]
 8007464:	2302      	movs	r3, #2
 8007466:	4313      	orrs	r3, r2
 8007468:	602b      	str	r3, [r5, #0]
 800746a:	783b      	ldrb	r3, [r7, #0]
 800746c:	2b2e      	cmp	r3, #46	; 0x2e
 800746e:	d10a      	bne.n	8007486 <_vfiprintf_r+0x182>
 8007470:	787b      	ldrb	r3, [r7, #1]
 8007472:	2b2a      	cmp	r3, #42	; 0x2a
 8007474:	d137      	bne.n	80074e6 <_vfiprintf_r+0x1e2>
 8007476:	9b07      	ldr	r3, [sp, #28]
 8007478:	3702      	adds	r7, #2
 800747a:	1d1a      	adds	r2, r3, #4
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	9207      	str	r2, [sp, #28]
 8007480:	2b00      	cmp	r3, #0
 8007482:	db2d      	blt.n	80074e0 <_vfiprintf_r+0x1dc>
 8007484:	9309      	str	r3, [sp, #36]	; 0x24
 8007486:	2203      	movs	r2, #3
 8007488:	7839      	ldrb	r1, [r7, #0]
 800748a:	4837      	ldr	r0, [pc, #220]	; (8007568 <_vfiprintf_r+0x264>)
 800748c:	f7ff f84e 	bl	800652c <memchr>
 8007490:	2800      	cmp	r0, #0
 8007492:	d007      	beq.n	80074a4 <_vfiprintf_r+0x1a0>
 8007494:	4b34      	ldr	r3, [pc, #208]	; (8007568 <_vfiprintf_r+0x264>)
 8007496:	682a      	ldr	r2, [r5, #0]
 8007498:	1ac0      	subs	r0, r0, r3
 800749a:	2340      	movs	r3, #64	; 0x40
 800749c:	4083      	lsls	r3, r0
 800749e:	4313      	orrs	r3, r2
 80074a0:	3701      	adds	r7, #1
 80074a2:	602b      	str	r3, [r5, #0]
 80074a4:	7839      	ldrb	r1, [r7, #0]
 80074a6:	1c7b      	adds	r3, r7, #1
 80074a8:	2206      	movs	r2, #6
 80074aa:	4830      	ldr	r0, [pc, #192]	; (800756c <_vfiprintf_r+0x268>)
 80074ac:	9303      	str	r3, [sp, #12]
 80074ae:	7629      	strb	r1, [r5, #24]
 80074b0:	f7ff f83c 	bl	800652c <memchr>
 80074b4:	2800      	cmp	r0, #0
 80074b6:	d045      	beq.n	8007544 <_vfiprintf_r+0x240>
 80074b8:	4b2d      	ldr	r3, [pc, #180]	; (8007570 <_vfiprintf_r+0x26c>)
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d127      	bne.n	800750e <_vfiprintf_r+0x20a>
 80074be:	2207      	movs	r2, #7
 80074c0:	9b07      	ldr	r3, [sp, #28]
 80074c2:	3307      	adds	r3, #7
 80074c4:	4393      	bics	r3, r2
 80074c6:	3308      	adds	r3, #8
 80074c8:	9307      	str	r3, [sp, #28]
 80074ca:	696b      	ldr	r3, [r5, #20]
 80074cc:	9a04      	ldr	r2, [sp, #16]
 80074ce:	189b      	adds	r3, r3, r2
 80074d0:	616b      	str	r3, [r5, #20]
 80074d2:	e75d      	b.n	8007390 <_vfiprintf_r+0x8c>
 80074d4:	210a      	movs	r1, #10
 80074d6:	434b      	muls	r3, r1
 80074d8:	4667      	mov	r7, ip
 80074da:	189b      	adds	r3, r3, r2
 80074dc:	3909      	subs	r1, #9
 80074de:	e7a3      	b.n	8007428 <_vfiprintf_r+0x124>
 80074e0:	2301      	movs	r3, #1
 80074e2:	425b      	negs	r3, r3
 80074e4:	e7ce      	b.n	8007484 <_vfiprintf_r+0x180>
 80074e6:	2300      	movs	r3, #0
 80074e8:	001a      	movs	r2, r3
 80074ea:	3701      	adds	r7, #1
 80074ec:	606b      	str	r3, [r5, #4]
 80074ee:	7839      	ldrb	r1, [r7, #0]
 80074f0:	1c78      	adds	r0, r7, #1
 80074f2:	3930      	subs	r1, #48	; 0x30
 80074f4:	4684      	mov	ip, r0
 80074f6:	2909      	cmp	r1, #9
 80074f8:	d903      	bls.n	8007502 <_vfiprintf_r+0x1fe>
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d0c3      	beq.n	8007486 <_vfiprintf_r+0x182>
 80074fe:	9209      	str	r2, [sp, #36]	; 0x24
 8007500:	e7c1      	b.n	8007486 <_vfiprintf_r+0x182>
 8007502:	230a      	movs	r3, #10
 8007504:	435a      	muls	r2, r3
 8007506:	4667      	mov	r7, ip
 8007508:	1852      	adds	r2, r2, r1
 800750a:	3b09      	subs	r3, #9
 800750c:	e7ef      	b.n	80074ee <_vfiprintf_r+0x1ea>
 800750e:	ab07      	add	r3, sp, #28
 8007510:	9300      	str	r3, [sp, #0]
 8007512:	0022      	movs	r2, r4
 8007514:	0029      	movs	r1, r5
 8007516:	0030      	movs	r0, r6
 8007518:	4b16      	ldr	r3, [pc, #88]	; (8007574 <_vfiprintf_r+0x270>)
 800751a:	f7fd fd6f 	bl	8004ffc <_printf_float>
 800751e:	9004      	str	r0, [sp, #16]
 8007520:	9b04      	ldr	r3, [sp, #16]
 8007522:	3301      	adds	r3, #1
 8007524:	d1d1      	bne.n	80074ca <_vfiprintf_r+0x1c6>
 8007526:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007528:	07db      	lsls	r3, r3, #31
 800752a:	d405      	bmi.n	8007538 <_vfiprintf_r+0x234>
 800752c:	89a3      	ldrh	r3, [r4, #12]
 800752e:	059b      	lsls	r3, r3, #22
 8007530:	d402      	bmi.n	8007538 <_vfiprintf_r+0x234>
 8007532:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007534:	f000 fad4 	bl	8007ae0 <__retarget_lock_release_recursive>
 8007538:	89a3      	ldrh	r3, [r4, #12]
 800753a:	065b      	lsls	r3, r3, #25
 800753c:	d500      	bpl.n	8007540 <_vfiprintf_r+0x23c>
 800753e:	e70a      	b.n	8007356 <_vfiprintf_r+0x52>
 8007540:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007542:	e70a      	b.n	800735a <_vfiprintf_r+0x56>
 8007544:	ab07      	add	r3, sp, #28
 8007546:	9300      	str	r3, [sp, #0]
 8007548:	0022      	movs	r2, r4
 800754a:	0029      	movs	r1, r5
 800754c:	0030      	movs	r0, r6
 800754e:	4b09      	ldr	r3, [pc, #36]	; (8007574 <_vfiprintf_r+0x270>)
 8007550:	f7fe f806 	bl	8005560 <_printf_i>
 8007554:	e7e3      	b.n	800751e <_vfiprintf_r+0x21a>
 8007556:	46c0      	nop			; (mov r8, r8)
 8007558:	08008254 	.word	0x08008254
 800755c:	08008274 	.word	0x08008274
 8007560:	08008234 	.word	0x08008234
 8007564:	080080dc 	.word	0x080080dc
 8007568:	080080e2 	.word	0x080080e2
 800756c:	080080e6 	.word	0x080080e6
 8007570:	08004ffd 	.word	0x08004ffd
 8007574:	080072e1 	.word	0x080072e1

08007578 <__swbuf_r>:
 8007578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800757a:	0005      	movs	r5, r0
 800757c:	000e      	movs	r6, r1
 800757e:	0014      	movs	r4, r2
 8007580:	2800      	cmp	r0, #0
 8007582:	d004      	beq.n	800758e <__swbuf_r+0x16>
 8007584:	6983      	ldr	r3, [r0, #24]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d101      	bne.n	800758e <__swbuf_r+0x16>
 800758a:	f000 fa07 	bl	800799c <__sinit>
 800758e:	4b22      	ldr	r3, [pc, #136]	; (8007618 <__swbuf_r+0xa0>)
 8007590:	429c      	cmp	r4, r3
 8007592:	d12e      	bne.n	80075f2 <__swbuf_r+0x7a>
 8007594:	686c      	ldr	r4, [r5, #4]
 8007596:	69a3      	ldr	r3, [r4, #24]
 8007598:	60a3      	str	r3, [r4, #8]
 800759a:	89a3      	ldrh	r3, [r4, #12]
 800759c:	071b      	lsls	r3, r3, #28
 800759e:	d532      	bpl.n	8007606 <__swbuf_r+0x8e>
 80075a0:	6923      	ldr	r3, [r4, #16]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d02f      	beq.n	8007606 <__swbuf_r+0x8e>
 80075a6:	6823      	ldr	r3, [r4, #0]
 80075a8:	6922      	ldr	r2, [r4, #16]
 80075aa:	b2f7      	uxtb	r7, r6
 80075ac:	1a98      	subs	r0, r3, r2
 80075ae:	6963      	ldr	r3, [r4, #20]
 80075b0:	b2f6      	uxtb	r6, r6
 80075b2:	4283      	cmp	r3, r0
 80075b4:	dc05      	bgt.n	80075c2 <__swbuf_r+0x4a>
 80075b6:	0021      	movs	r1, r4
 80075b8:	0028      	movs	r0, r5
 80075ba:	f000 f94d 	bl	8007858 <_fflush_r>
 80075be:	2800      	cmp	r0, #0
 80075c0:	d127      	bne.n	8007612 <__swbuf_r+0x9a>
 80075c2:	68a3      	ldr	r3, [r4, #8]
 80075c4:	3001      	adds	r0, #1
 80075c6:	3b01      	subs	r3, #1
 80075c8:	60a3      	str	r3, [r4, #8]
 80075ca:	6823      	ldr	r3, [r4, #0]
 80075cc:	1c5a      	adds	r2, r3, #1
 80075ce:	6022      	str	r2, [r4, #0]
 80075d0:	701f      	strb	r7, [r3, #0]
 80075d2:	6963      	ldr	r3, [r4, #20]
 80075d4:	4283      	cmp	r3, r0
 80075d6:	d004      	beq.n	80075e2 <__swbuf_r+0x6a>
 80075d8:	89a3      	ldrh	r3, [r4, #12]
 80075da:	07db      	lsls	r3, r3, #31
 80075dc:	d507      	bpl.n	80075ee <__swbuf_r+0x76>
 80075de:	2e0a      	cmp	r6, #10
 80075e0:	d105      	bne.n	80075ee <__swbuf_r+0x76>
 80075e2:	0021      	movs	r1, r4
 80075e4:	0028      	movs	r0, r5
 80075e6:	f000 f937 	bl	8007858 <_fflush_r>
 80075ea:	2800      	cmp	r0, #0
 80075ec:	d111      	bne.n	8007612 <__swbuf_r+0x9a>
 80075ee:	0030      	movs	r0, r6
 80075f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075f2:	4b0a      	ldr	r3, [pc, #40]	; (800761c <__swbuf_r+0xa4>)
 80075f4:	429c      	cmp	r4, r3
 80075f6:	d101      	bne.n	80075fc <__swbuf_r+0x84>
 80075f8:	68ac      	ldr	r4, [r5, #8]
 80075fa:	e7cc      	b.n	8007596 <__swbuf_r+0x1e>
 80075fc:	4b08      	ldr	r3, [pc, #32]	; (8007620 <__swbuf_r+0xa8>)
 80075fe:	429c      	cmp	r4, r3
 8007600:	d1c9      	bne.n	8007596 <__swbuf_r+0x1e>
 8007602:	68ec      	ldr	r4, [r5, #12]
 8007604:	e7c7      	b.n	8007596 <__swbuf_r+0x1e>
 8007606:	0021      	movs	r1, r4
 8007608:	0028      	movs	r0, r5
 800760a:	f000 f819 	bl	8007640 <__swsetup_r>
 800760e:	2800      	cmp	r0, #0
 8007610:	d0c9      	beq.n	80075a6 <__swbuf_r+0x2e>
 8007612:	2601      	movs	r6, #1
 8007614:	4276      	negs	r6, r6
 8007616:	e7ea      	b.n	80075ee <__swbuf_r+0x76>
 8007618:	08008254 	.word	0x08008254
 800761c:	08008274 	.word	0x08008274
 8007620:	08008234 	.word	0x08008234

08007624 <__ascii_wctomb>:
 8007624:	0003      	movs	r3, r0
 8007626:	1e08      	subs	r0, r1, #0
 8007628:	d005      	beq.n	8007636 <__ascii_wctomb+0x12>
 800762a:	2aff      	cmp	r2, #255	; 0xff
 800762c:	d904      	bls.n	8007638 <__ascii_wctomb+0x14>
 800762e:	228a      	movs	r2, #138	; 0x8a
 8007630:	2001      	movs	r0, #1
 8007632:	601a      	str	r2, [r3, #0]
 8007634:	4240      	negs	r0, r0
 8007636:	4770      	bx	lr
 8007638:	2001      	movs	r0, #1
 800763a:	700a      	strb	r2, [r1, #0]
 800763c:	e7fb      	b.n	8007636 <__ascii_wctomb+0x12>
	...

08007640 <__swsetup_r>:
 8007640:	4b37      	ldr	r3, [pc, #220]	; (8007720 <__swsetup_r+0xe0>)
 8007642:	b570      	push	{r4, r5, r6, lr}
 8007644:	681d      	ldr	r5, [r3, #0]
 8007646:	0006      	movs	r6, r0
 8007648:	000c      	movs	r4, r1
 800764a:	2d00      	cmp	r5, #0
 800764c:	d005      	beq.n	800765a <__swsetup_r+0x1a>
 800764e:	69ab      	ldr	r3, [r5, #24]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d102      	bne.n	800765a <__swsetup_r+0x1a>
 8007654:	0028      	movs	r0, r5
 8007656:	f000 f9a1 	bl	800799c <__sinit>
 800765a:	4b32      	ldr	r3, [pc, #200]	; (8007724 <__swsetup_r+0xe4>)
 800765c:	429c      	cmp	r4, r3
 800765e:	d10f      	bne.n	8007680 <__swsetup_r+0x40>
 8007660:	686c      	ldr	r4, [r5, #4]
 8007662:	230c      	movs	r3, #12
 8007664:	5ee2      	ldrsh	r2, [r4, r3]
 8007666:	b293      	uxth	r3, r2
 8007668:	0711      	lsls	r1, r2, #28
 800766a:	d42d      	bmi.n	80076c8 <__swsetup_r+0x88>
 800766c:	06d9      	lsls	r1, r3, #27
 800766e:	d411      	bmi.n	8007694 <__swsetup_r+0x54>
 8007670:	2309      	movs	r3, #9
 8007672:	2001      	movs	r0, #1
 8007674:	6033      	str	r3, [r6, #0]
 8007676:	3337      	adds	r3, #55	; 0x37
 8007678:	4313      	orrs	r3, r2
 800767a:	81a3      	strh	r3, [r4, #12]
 800767c:	4240      	negs	r0, r0
 800767e:	bd70      	pop	{r4, r5, r6, pc}
 8007680:	4b29      	ldr	r3, [pc, #164]	; (8007728 <__swsetup_r+0xe8>)
 8007682:	429c      	cmp	r4, r3
 8007684:	d101      	bne.n	800768a <__swsetup_r+0x4a>
 8007686:	68ac      	ldr	r4, [r5, #8]
 8007688:	e7eb      	b.n	8007662 <__swsetup_r+0x22>
 800768a:	4b28      	ldr	r3, [pc, #160]	; (800772c <__swsetup_r+0xec>)
 800768c:	429c      	cmp	r4, r3
 800768e:	d1e8      	bne.n	8007662 <__swsetup_r+0x22>
 8007690:	68ec      	ldr	r4, [r5, #12]
 8007692:	e7e6      	b.n	8007662 <__swsetup_r+0x22>
 8007694:	075b      	lsls	r3, r3, #29
 8007696:	d513      	bpl.n	80076c0 <__swsetup_r+0x80>
 8007698:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800769a:	2900      	cmp	r1, #0
 800769c:	d008      	beq.n	80076b0 <__swsetup_r+0x70>
 800769e:	0023      	movs	r3, r4
 80076a0:	3344      	adds	r3, #68	; 0x44
 80076a2:	4299      	cmp	r1, r3
 80076a4:	d002      	beq.n	80076ac <__swsetup_r+0x6c>
 80076a6:	0030      	movs	r0, r6
 80076a8:	f7ff fb1c 	bl	8006ce4 <_free_r>
 80076ac:	2300      	movs	r3, #0
 80076ae:	6363      	str	r3, [r4, #52]	; 0x34
 80076b0:	2224      	movs	r2, #36	; 0x24
 80076b2:	89a3      	ldrh	r3, [r4, #12]
 80076b4:	4393      	bics	r3, r2
 80076b6:	81a3      	strh	r3, [r4, #12]
 80076b8:	2300      	movs	r3, #0
 80076ba:	6063      	str	r3, [r4, #4]
 80076bc:	6923      	ldr	r3, [r4, #16]
 80076be:	6023      	str	r3, [r4, #0]
 80076c0:	2308      	movs	r3, #8
 80076c2:	89a2      	ldrh	r2, [r4, #12]
 80076c4:	4313      	orrs	r3, r2
 80076c6:	81a3      	strh	r3, [r4, #12]
 80076c8:	6923      	ldr	r3, [r4, #16]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d10b      	bne.n	80076e6 <__swsetup_r+0xa6>
 80076ce:	21a0      	movs	r1, #160	; 0xa0
 80076d0:	2280      	movs	r2, #128	; 0x80
 80076d2:	89a3      	ldrh	r3, [r4, #12]
 80076d4:	0089      	lsls	r1, r1, #2
 80076d6:	0092      	lsls	r2, r2, #2
 80076d8:	400b      	ands	r3, r1
 80076da:	4293      	cmp	r3, r2
 80076dc:	d003      	beq.n	80076e6 <__swsetup_r+0xa6>
 80076de:	0021      	movs	r1, r4
 80076e0:	0030      	movs	r0, r6
 80076e2:	f000 fa27 	bl	8007b34 <__smakebuf_r>
 80076e6:	220c      	movs	r2, #12
 80076e8:	5ea3      	ldrsh	r3, [r4, r2]
 80076ea:	2001      	movs	r0, #1
 80076ec:	001a      	movs	r2, r3
 80076ee:	b299      	uxth	r1, r3
 80076f0:	4002      	ands	r2, r0
 80076f2:	4203      	tst	r3, r0
 80076f4:	d00f      	beq.n	8007716 <__swsetup_r+0xd6>
 80076f6:	2200      	movs	r2, #0
 80076f8:	60a2      	str	r2, [r4, #8]
 80076fa:	6962      	ldr	r2, [r4, #20]
 80076fc:	4252      	negs	r2, r2
 80076fe:	61a2      	str	r2, [r4, #24]
 8007700:	2000      	movs	r0, #0
 8007702:	6922      	ldr	r2, [r4, #16]
 8007704:	4282      	cmp	r2, r0
 8007706:	d1ba      	bne.n	800767e <__swsetup_r+0x3e>
 8007708:	060a      	lsls	r2, r1, #24
 800770a:	d5b8      	bpl.n	800767e <__swsetup_r+0x3e>
 800770c:	2240      	movs	r2, #64	; 0x40
 800770e:	4313      	orrs	r3, r2
 8007710:	81a3      	strh	r3, [r4, #12]
 8007712:	3801      	subs	r0, #1
 8007714:	e7b3      	b.n	800767e <__swsetup_r+0x3e>
 8007716:	0788      	lsls	r0, r1, #30
 8007718:	d400      	bmi.n	800771c <__swsetup_r+0xdc>
 800771a:	6962      	ldr	r2, [r4, #20]
 800771c:	60a2      	str	r2, [r4, #8]
 800771e:	e7ef      	b.n	8007700 <__swsetup_r+0xc0>
 8007720:	2000000c 	.word	0x2000000c
 8007724:	08008254 	.word	0x08008254
 8007728:	08008274 	.word	0x08008274
 800772c:	08008234 	.word	0x08008234

08007730 <abort>:
 8007730:	2006      	movs	r0, #6
 8007732:	b510      	push	{r4, lr}
 8007734:	f000 fa74 	bl	8007c20 <raise>
 8007738:	2001      	movs	r0, #1
 800773a:	f7fb f89f 	bl	800287c <_exit>
	...

08007740 <__sflush_r>:
 8007740:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007742:	898b      	ldrh	r3, [r1, #12]
 8007744:	0005      	movs	r5, r0
 8007746:	000c      	movs	r4, r1
 8007748:	071a      	lsls	r2, r3, #28
 800774a:	d45f      	bmi.n	800780c <__sflush_r+0xcc>
 800774c:	684a      	ldr	r2, [r1, #4]
 800774e:	2a00      	cmp	r2, #0
 8007750:	dc04      	bgt.n	800775c <__sflush_r+0x1c>
 8007752:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8007754:	2a00      	cmp	r2, #0
 8007756:	dc01      	bgt.n	800775c <__sflush_r+0x1c>
 8007758:	2000      	movs	r0, #0
 800775a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800775c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800775e:	2f00      	cmp	r7, #0
 8007760:	d0fa      	beq.n	8007758 <__sflush_r+0x18>
 8007762:	2200      	movs	r2, #0
 8007764:	2180      	movs	r1, #128	; 0x80
 8007766:	682e      	ldr	r6, [r5, #0]
 8007768:	602a      	str	r2, [r5, #0]
 800776a:	001a      	movs	r2, r3
 800776c:	0149      	lsls	r1, r1, #5
 800776e:	400a      	ands	r2, r1
 8007770:	420b      	tst	r3, r1
 8007772:	d034      	beq.n	80077de <__sflush_r+0x9e>
 8007774:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007776:	89a3      	ldrh	r3, [r4, #12]
 8007778:	075b      	lsls	r3, r3, #29
 800777a:	d506      	bpl.n	800778a <__sflush_r+0x4a>
 800777c:	6863      	ldr	r3, [r4, #4]
 800777e:	1ac0      	subs	r0, r0, r3
 8007780:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007782:	2b00      	cmp	r3, #0
 8007784:	d001      	beq.n	800778a <__sflush_r+0x4a>
 8007786:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007788:	1ac0      	subs	r0, r0, r3
 800778a:	0002      	movs	r2, r0
 800778c:	6a21      	ldr	r1, [r4, #32]
 800778e:	2300      	movs	r3, #0
 8007790:	0028      	movs	r0, r5
 8007792:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8007794:	47b8      	blx	r7
 8007796:	89a1      	ldrh	r1, [r4, #12]
 8007798:	1c43      	adds	r3, r0, #1
 800779a:	d106      	bne.n	80077aa <__sflush_r+0x6a>
 800779c:	682b      	ldr	r3, [r5, #0]
 800779e:	2b1d      	cmp	r3, #29
 80077a0:	d831      	bhi.n	8007806 <__sflush_r+0xc6>
 80077a2:	4a2c      	ldr	r2, [pc, #176]	; (8007854 <__sflush_r+0x114>)
 80077a4:	40da      	lsrs	r2, r3
 80077a6:	07d3      	lsls	r3, r2, #31
 80077a8:	d52d      	bpl.n	8007806 <__sflush_r+0xc6>
 80077aa:	2300      	movs	r3, #0
 80077ac:	6063      	str	r3, [r4, #4]
 80077ae:	6923      	ldr	r3, [r4, #16]
 80077b0:	6023      	str	r3, [r4, #0]
 80077b2:	04cb      	lsls	r3, r1, #19
 80077b4:	d505      	bpl.n	80077c2 <__sflush_r+0x82>
 80077b6:	1c43      	adds	r3, r0, #1
 80077b8:	d102      	bne.n	80077c0 <__sflush_r+0x80>
 80077ba:	682b      	ldr	r3, [r5, #0]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d100      	bne.n	80077c2 <__sflush_r+0x82>
 80077c0:	6560      	str	r0, [r4, #84]	; 0x54
 80077c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80077c4:	602e      	str	r6, [r5, #0]
 80077c6:	2900      	cmp	r1, #0
 80077c8:	d0c6      	beq.n	8007758 <__sflush_r+0x18>
 80077ca:	0023      	movs	r3, r4
 80077cc:	3344      	adds	r3, #68	; 0x44
 80077ce:	4299      	cmp	r1, r3
 80077d0:	d002      	beq.n	80077d8 <__sflush_r+0x98>
 80077d2:	0028      	movs	r0, r5
 80077d4:	f7ff fa86 	bl	8006ce4 <_free_r>
 80077d8:	2000      	movs	r0, #0
 80077da:	6360      	str	r0, [r4, #52]	; 0x34
 80077dc:	e7bd      	b.n	800775a <__sflush_r+0x1a>
 80077de:	2301      	movs	r3, #1
 80077e0:	0028      	movs	r0, r5
 80077e2:	6a21      	ldr	r1, [r4, #32]
 80077e4:	47b8      	blx	r7
 80077e6:	1c43      	adds	r3, r0, #1
 80077e8:	d1c5      	bne.n	8007776 <__sflush_r+0x36>
 80077ea:	682b      	ldr	r3, [r5, #0]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d0c2      	beq.n	8007776 <__sflush_r+0x36>
 80077f0:	2b1d      	cmp	r3, #29
 80077f2:	d001      	beq.n	80077f8 <__sflush_r+0xb8>
 80077f4:	2b16      	cmp	r3, #22
 80077f6:	d101      	bne.n	80077fc <__sflush_r+0xbc>
 80077f8:	602e      	str	r6, [r5, #0]
 80077fa:	e7ad      	b.n	8007758 <__sflush_r+0x18>
 80077fc:	2340      	movs	r3, #64	; 0x40
 80077fe:	89a2      	ldrh	r2, [r4, #12]
 8007800:	4313      	orrs	r3, r2
 8007802:	81a3      	strh	r3, [r4, #12]
 8007804:	e7a9      	b.n	800775a <__sflush_r+0x1a>
 8007806:	2340      	movs	r3, #64	; 0x40
 8007808:	430b      	orrs	r3, r1
 800780a:	e7fa      	b.n	8007802 <__sflush_r+0xc2>
 800780c:	690f      	ldr	r7, [r1, #16]
 800780e:	2f00      	cmp	r7, #0
 8007810:	d0a2      	beq.n	8007758 <__sflush_r+0x18>
 8007812:	680a      	ldr	r2, [r1, #0]
 8007814:	600f      	str	r7, [r1, #0]
 8007816:	1bd2      	subs	r2, r2, r7
 8007818:	9201      	str	r2, [sp, #4]
 800781a:	2200      	movs	r2, #0
 800781c:	079b      	lsls	r3, r3, #30
 800781e:	d100      	bne.n	8007822 <__sflush_r+0xe2>
 8007820:	694a      	ldr	r2, [r1, #20]
 8007822:	60a2      	str	r2, [r4, #8]
 8007824:	9b01      	ldr	r3, [sp, #4]
 8007826:	2b00      	cmp	r3, #0
 8007828:	dc00      	bgt.n	800782c <__sflush_r+0xec>
 800782a:	e795      	b.n	8007758 <__sflush_r+0x18>
 800782c:	003a      	movs	r2, r7
 800782e:	0028      	movs	r0, r5
 8007830:	9b01      	ldr	r3, [sp, #4]
 8007832:	6a21      	ldr	r1, [r4, #32]
 8007834:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007836:	47b0      	blx	r6
 8007838:	2800      	cmp	r0, #0
 800783a:	dc06      	bgt.n	800784a <__sflush_r+0x10a>
 800783c:	2340      	movs	r3, #64	; 0x40
 800783e:	2001      	movs	r0, #1
 8007840:	89a2      	ldrh	r2, [r4, #12]
 8007842:	4240      	negs	r0, r0
 8007844:	4313      	orrs	r3, r2
 8007846:	81a3      	strh	r3, [r4, #12]
 8007848:	e787      	b.n	800775a <__sflush_r+0x1a>
 800784a:	9b01      	ldr	r3, [sp, #4]
 800784c:	183f      	adds	r7, r7, r0
 800784e:	1a1b      	subs	r3, r3, r0
 8007850:	9301      	str	r3, [sp, #4]
 8007852:	e7e7      	b.n	8007824 <__sflush_r+0xe4>
 8007854:	20400001 	.word	0x20400001

08007858 <_fflush_r>:
 8007858:	690b      	ldr	r3, [r1, #16]
 800785a:	b570      	push	{r4, r5, r6, lr}
 800785c:	0005      	movs	r5, r0
 800785e:	000c      	movs	r4, r1
 8007860:	2b00      	cmp	r3, #0
 8007862:	d102      	bne.n	800786a <_fflush_r+0x12>
 8007864:	2500      	movs	r5, #0
 8007866:	0028      	movs	r0, r5
 8007868:	bd70      	pop	{r4, r5, r6, pc}
 800786a:	2800      	cmp	r0, #0
 800786c:	d004      	beq.n	8007878 <_fflush_r+0x20>
 800786e:	6983      	ldr	r3, [r0, #24]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d101      	bne.n	8007878 <_fflush_r+0x20>
 8007874:	f000 f892 	bl	800799c <__sinit>
 8007878:	4b14      	ldr	r3, [pc, #80]	; (80078cc <_fflush_r+0x74>)
 800787a:	429c      	cmp	r4, r3
 800787c:	d11b      	bne.n	80078b6 <_fflush_r+0x5e>
 800787e:	686c      	ldr	r4, [r5, #4]
 8007880:	220c      	movs	r2, #12
 8007882:	5ea3      	ldrsh	r3, [r4, r2]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d0ed      	beq.n	8007864 <_fflush_r+0xc>
 8007888:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800788a:	07d2      	lsls	r2, r2, #31
 800788c:	d404      	bmi.n	8007898 <_fflush_r+0x40>
 800788e:	059b      	lsls	r3, r3, #22
 8007890:	d402      	bmi.n	8007898 <_fflush_r+0x40>
 8007892:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007894:	f000 f923 	bl	8007ade <__retarget_lock_acquire_recursive>
 8007898:	0028      	movs	r0, r5
 800789a:	0021      	movs	r1, r4
 800789c:	f7ff ff50 	bl	8007740 <__sflush_r>
 80078a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80078a2:	0005      	movs	r5, r0
 80078a4:	07db      	lsls	r3, r3, #31
 80078a6:	d4de      	bmi.n	8007866 <_fflush_r+0xe>
 80078a8:	89a3      	ldrh	r3, [r4, #12]
 80078aa:	059b      	lsls	r3, r3, #22
 80078ac:	d4db      	bmi.n	8007866 <_fflush_r+0xe>
 80078ae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078b0:	f000 f916 	bl	8007ae0 <__retarget_lock_release_recursive>
 80078b4:	e7d7      	b.n	8007866 <_fflush_r+0xe>
 80078b6:	4b06      	ldr	r3, [pc, #24]	; (80078d0 <_fflush_r+0x78>)
 80078b8:	429c      	cmp	r4, r3
 80078ba:	d101      	bne.n	80078c0 <_fflush_r+0x68>
 80078bc:	68ac      	ldr	r4, [r5, #8]
 80078be:	e7df      	b.n	8007880 <_fflush_r+0x28>
 80078c0:	4b04      	ldr	r3, [pc, #16]	; (80078d4 <_fflush_r+0x7c>)
 80078c2:	429c      	cmp	r4, r3
 80078c4:	d1dc      	bne.n	8007880 <_fflush_r+0x28>
 80078c6:	68ec      	ldr	r4, [r5, #12]
 80078c8:	e7da      	b.n	8007880 <_fflush_r+0x28>
 80078ca:	46c0      	nop			; (mov r8, r8)
 80078cc:	08008254 	.word	0x08008254
 80078d0:	08008274 	.word	0x08008274
 80078d4:	08008234 	.word	0x08008234

080078d8 <std>:
 80078d8:	2300      	movs	r3, #0
 80078da:	b510      	push	{r4, lr}
 80078dc:	0004      	movs	r4, r0
 80078de:	6003      	str	r3, [r0, #0]
 80078e0:	6043      	str	r3, [r0, #4]
 80078e2:	6083      	str	r3, [r0, #8]
 80078e4:	8181      	strh	r1, [r0, #12]
 80078e6:	6643      	str	r3, [r0, #100]	; 0x64
 80078e8:	0019      	movs	r1, r3
 80078ea:	81c2      	strh	r2, [r0, #14]
 80078ec:	6103      	str	r3, [r0, #16]
 80078ee:	6143      	str	r3, [r0, #20]
 80078f0:	6183      	str	r3, [r0, #24]
 80078f2:	2208      	movs	r2, #8
 80078f4:	305c      	adds	r0, #92	; 0x5c
 80078f6:	f7fd facf 	bl	8004e98 <memset>
 80078fa:	4b05      	ldr	r3, [pc, #20]	; (8007910 <std+0x38>)
 80078fc:	6224      	str	r4, [r4, #32]
 80078fe:	6263      	str	r3, [r4, #36]	; 0x24
 8007900:	4b04      	ldr	r3, [pc, #16]	; (8007914 <std+0x3c>)
 8007902:	62a3      	str	r3, [r4, #40]	; 0x28
 8007904:	4b04      	ldr	r3, [pc, #16]	; (8007918 <std+0x40>)
 8007906:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007908:	4b04      	ldr	r3, [pc, #16]	; (800791c <std+0x44>)
 800790a:	6323      	str	r3, [r4, #48]	; 0x30
 800790c:	bd10      	pop	{r4, pc}
 800790e:	46c0      	nop			; (mov r8, r8)
 8007910:	08007c61 	.word	0x08007c61
 8007914:	08007c89 	.word	0x08007c89
 8007918:	08007cc1 	.word	0x08007cc1
 800791c:	08007ced 	.word	0x08007ced

08007920 <_cleanup_r>:
 8007920:	b510      	push	{r4, lr}
 8007922:	4902      	ldr	r1, [pc, #8]	; (800792c <_cleanup_r+0xc>)
 8007924:	f000 f8ba 	bl	8007a9c <_fwalk_reent>
 8007928:	bd10      	pop	{r4, pc}
 800792a:	46c0      	nop			; (mov r8, r8)
 800792c:	08007859 	.word	0x08007859

08007930 <__sfmoreglue>:
 8007930:	b570      	push	{r4, r5, r6, lr}
 8007932:	2568      	movs	r5, #104	; 0x68
 8007934:	1e4a      	subs	r2, r1, #1
 8007936:	4355      	muls	r5, r2
 8007938:	000e      	movs	r6, r1
 800793a:	0029      	movs	r1, r5
 800793c:	3174      	adds	r1, #116	; 0x74
 800793e:	f7ff fa3d 	bl	8006dbc <_malloc_r>
 8007942:	1e04      	subs	r4, r0, #0
 8007944:	d008      	beq.n	8007958 <__sfmoreglue+0x28>
 8007946:	2100      	movs	r1, #0
 8007948:	002a      	movs	r2, r5
 800794a:	6001      	str	r1, [r0, #0]
 800794c:	6046      	str	r6, [r0, #4]
 800794e:	300c      	adds	r0, #12
 8007950:	60a0      	str	r0, [r4, #8]
 8007952:	3268      	adds	r2, #104	; 0x68
 8007954:	f7fd faa0 	bl	8004e98 <memset>
 8007958:	0020      	movs	r0, r4
 800795a:	bd70      	pop	{r4, r5, r6, pc}

0800795c <__sfp_lock_acquire>:
 800795c:	b510      	push	{r4, lr}
 800795e:	4802      	ldr	r0, [pc, #8]	; (8007968 <__sfp_lock_acquire+0xc>)
 8007960:	f000 f8bd 	bl	8007ade <__retarget_lock_acquire_recursive>
 8007964:	bd10      	pop	{r4, pc}
 8007966:	46c0      	nop			; (mov r8, r8)
 8007968:	20000359 	.word	0x20000359

0800796c <__sfp_lock_release>:
 800796c:	b510      	push	{r4, lr}
 800796e:	4802      	ldr	r0, [pc, #8]	; (8007978 <__sfp_lock_release+0xc>)
 8007970:	f000 f8b6 	bl	8007ae0 <__retarget_lock_release_recursive>
 8007974:	bd10      	pop	{r4, pc}
 8007976:	46c0      	nop			; (mov r8, r8)
 8007978:	20000359 	.word	0x20000359

0800797c <__sinit_lock_acquire>:
 800797c:	b510      	push	{r4, lr}
 800797e:	4802      	ldr	r0, [pc, #8]	; (8007988 <__sinit_lock_acquire+0xc>)
 8007980:	f000 f8ad 	bl	8007ade <__retarget_lock_acquire_recursive>
 8007984:	bd10      	pop	{r4, pc}
 8007986:	46c0      	nop			; (mov r8, r8)
 8007988:	2000035a 	.word	0x2000035a

0800798c <__sinit_lock_release>:
 800798c:	b510      	push	{r4, lr}
 800798e:	4802      	ldr	r0, [pc, #8]	; (8007998 <__sinit_lock_release+0xc>)
 8007990:	f000 f8a6 	bl	8007ae0 <__retarget_lock_release_recursive>
 8007994:	bd10      	pop	{r4, pc}
 8007996:	46c0      	nop			; (mov r8, r8)
 8007998:	2000035a 	.word	0x2000035a

0800799c <__sinit>:
 800799c:	b513      	push	{r0, r1, r4, lr}
 800799e:	0004      	movs	r4, r0
 80079a0:	f7ff ffec 	bl	800797c <__sinit_lock_acquire>
 80079a4:	69a3      	ldr	r3, [r4, #24]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d002      	beq.n	80079b0 <__sinit+0x14>
 80079aa:	f7ff ffef 	bl	800798c <__sinit_lock_release>
 80079ae:	bd13      	pop	{r0, r1, r4, pc}
 80079b0:	64a3      	str	r3, [r4, #72]	; 0x48
 80079b2:	64e3      	str	r3, [r4, #76]	; 0x4c
 80079b4:	6523      	str	r3, [r4, #80]	; 0x50
 80079b6:	4b13      	ldr	r3, [pc, #76]	; (8007a04 <__sinit+0x68>)
 80079b8:	4a13      	ldr	r2, [pc, #76]	; (8007a08 <__sinit+0x6c>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80079be:	9301      	str	r3, [sp, #4]
 80079c0:	42a3      	cmp	r3, r4
 80079c2:	d101      	bne.n	80079c8 <__sinit+0x2c>
 80079c4:	2301      	movs	r3, #1
 80079c6:	61a3      	str	r3, [r4, #24]
 80079c8:	0020      	movs	r0, r4
 80079ca:	f000 f81f 	bl	8007a0c <__sfp>
 80079ce:	6060      	str	r0, [r4, #4]
 80079d0:	0020      	movs	r0, r4
 80079d2:	f000 f81b 	bl	8007a0c <__sfp>
 80079d6:	60a0      	str	r0, [r4, #8]
 80079d8:	0020      	movs	r0, r4
 80079da:	f000 f817 	bl	8007a0c <__sfp>
 80079de:	2200      	movs	r2, #0
 80079e0:	2104      	movs	r1, #4
 80079e2:	60e0      	str	r0, [r4, #12]
 80079e4:	6860      	ldr	r0, [r4, #4]
 80079e6:	f7ff ff77 	bl	80078d8 <std>
 80079ea:	2201      	movs	r2, #1
 80079ec:	2109      	movs	r1, #9
 80079ee:	68a0      	ldr	r0, [r4, #8]
 80079f0:	f7ff ff72 	bl	80078d8 <std>
 80079f4:	2202      	movs	r2, #2
 80079f6:	2112      	movs	r1, #18
 80079f8:	68e0      	ldr	r0, [r4, #12]
 80079fa:	f7ff ff6d 	bl	80078d8 <std>
 80079fe:	2301      	movs	r3, #1
 8007a00:	61a3      	str	r3, [r4, #24]
 8007a02:	e7d2      	b.n	80079aa <__sinit+0xe>
 8007a04:	08007eb8 	.word	0x08007eb8
 8007a08:	08007921 	.word	0x08007921

08007a0c <__sfp>:
 8007a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a0e:	0007      	movs	r7, r0
 8007a10:	f7ff ffa4 	bl	800795c <__sfp_lock_acquire>
 8007a14:	4b1f      	ldr	r3, [pc, #124]	; (8007a94 <__sfp+0x88>)
 8007a16:	681e      	ldr	r6, [r3, #0]
 8007a18:	69b3      	ldr	r3, [r6, #24]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d102      	bne.n	8007a24 <__sfp+0x18>
 8007a1e:	0030      	movs	r0, r6
 8007a20:	f7ff ffbc 	bl	800799c <__sinit>
 8007a24:	3648      	adds	r6, #72	; 0x48
 8007a26:	68b4      	ldr	r4, [r6, #8]
 8007a28:	6873      	ldr	r3, [r6, #4]
 8007a2a:	3b01      	subs	r3, #1
 8007a2c:	d504      	bpl.n	8007a38 <__sfp+0x2c>
 8007a2e:	6833      	ldr	r3, [r6, #0]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d022      	beq.n	8007a7a <__sfp+0x6e>
 8007a34:	6836      	ldr	r6, [r6, #0]
 8007a36:	e7f6      	b.n	8007a26 <__sfp+0x1a>
 8007a38:	220c      	movs	r2, #12
 8007a3a:	5ea5      	ldrsh	r5, [r4, r2]
 8007a3c:	2d00      	cmp	r5, #0
 8007a3e:	d11a      	bne.n	8007a76 <__sfp+0x6a>
 8007a40:	0020      	movs	r0, r4
 8007a42:	4b15      	ldr	r3, [pc, #84]	; (8007a98 <__sfp+0x8c>)
 8007a44:	3058      	adds	r0, #88	; 0x58
 8007a46:	60e3      	str	r3, [r4, #12]
 8007a48:	6665      	str	r5, [r4, #100]	; 0x64
 8007a4a:	f000 f847 	bl	8007adc <__retarget_lock_init_recursive>
 8007a4e:	f7ff ff8d 	bl	800796c <__sfp_lock_release>
 8007a52:	0020      	movs	r0, r4
 8007a54:	2208      	movs	r2, #8
 8007a56:	0029      	movs	r1, r5
 8007a58:	6025      	str	r5, [r4, #0]
 8007a5a:	60a5      	str	r5, [r4, #8]
 8007a5c:	6065      	str	r5, [r4, #4]
 8007a5e:	6125      	str	r5, [r4, #16]
 8007a60:	6165      	str	r5, [r4, #20]
 8007a62:	61a5      	str	r5, [r4, #24]
 8007a64:	305c      	adds	r0, #92	; 0x5c
 8007a66:	f7fd fa17 	bl	8004e98 <memset>
 8007a6a:	6365      	str	r5, [r4, #52]	; 0x34
 8007a6c:	63a5      	str	r5, [r4, #56]	; 0x38
 8007a6e:	64a5      	str	r5, [r4, #72]	; 0x48
 8007a70:	64e5      	str	r5, [r4, #76]	; 0x4c
 8007a72:	0020      	movs	r0, r4
 8007a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a76:	3468      	adds	r4, #104	; 0x68
 8007a78:	e7d7      	b.n	8007a2a <__sfp+0x1e>
 8007a7a:	2104      	movs	r1, #4
 8007a7c:	0038      	movs	r0, r7
 8007a7e:	f7ff ff57 	bl	8007930 <__sfmoreglue>
 8007a82:	1e04      	subs	r4, r0, #0
 8007a84:	6030      	str	r0, [r6, #0]
 8007a86:	d1d5      	bne.n	8007a34 <__sfp+0x28>
 8007a88:	f7ff ff70 	bl	800796c <__sfp_lock_release>
 8007a8c:	230c      	movs	r3, #12
 8007a8e:	603b      	str	r3, [r7, #0]
 8007a90:	e7ef      	b.n	8007a72 <__sfp+0x66>
 8007a92:	46c0      	nop			; (mov r8, r8)
 8007a94:	08007eb8 	.word	0x08007eb8
 8007a98:	ffff0001 	.word	0xffff0001

08007a9c <_fwalk_reent>:
 8007a9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a9e:	0004      	movs	r4, r0
 8007aa0:	0006      	movs	r6, r0
 8007aa2:	2700      	movs	r7, #0
 8007aa4:	9101      	str	r1, [sp, #4]
 8007aa6:	3448      	adds	r4, #72	; 0x48
 8007aa8:	6863      	ldr	r3, [r4, #4]
 8007aaa:	68a5      	ldr	r5, [r4, #8]
 8007aac:	9300      	str	r3, [sp, #0]
 8007aae:	9b00      	ldr	r3, [sp, #0]
 8007ab0:	3b01      	subs	r3, #1
 8007ab2:	9300      	str	r3, [sp, #0]
 8007ab4:	d504      	bpl.n	8007ac0 <_fwalk_reent+0x24>
 8007ab6:	6824      	ldr	r4, [r4, #0]
 8007ab8:	2c00      	cmp	r4, #0
 8007aba:	d1f5      	bne.n	8007aa8 <_fwalk_reent+0xc>
 8007abc:	0038      	movs	r0, r7
 8007abe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007ac0:	89ab      	ldrh	r3, [r5, #12]
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d908      	bls.n	8007ad8 <_fwalk_reent+0x3c>
 8007ac6:	220e      	movs	r2, #14
 8007ac8:	5eab      	ldrsh	r3, [r5, r2]
 8007aca:	3301      	adds	r3, #1
 8007acc:	d004      	beq.n	8007ad8 <_fwalk_reent+0x3c>
 8007ace:	0029      	movs	r1, r5
 8007ad0:	0030      	movs	r0, r6
 8007ad2:	9b01      	ldr	r3, [sp, #4]
 8007ad4:	4798      	blx	r3
 8007ad6:	4307      	orrs	r7, r0
 8007ad8:	3568      	adds	r5, #104	; 0x68
 8007ada:	e7e8      	b.n	8007aae <_fwalk_reent+0x12>

08007adc <__retarget_lock_init_recursive>:
 8007adc:	4770      	bx	lr

08007ade <__retarget_lock_acquire_recursive>:
 8007ade:	4770      	bx	lr

08007ae0 <__retarget_lock_release_recursive>:
 8007ae0:	4770      	bx	lr
	...

08007ae4 <__swhatbuf_r>:
 8007ae4:	b570      	push	{r4, r5, r6, lr}
 8007ae6:	000e      	movs	r6, r1
 8007ae8:	001d      	movs	r5, r3
 8007aea:	230e      	movs	r3, #14
 8007aec:	5ec9      	ldrsh	r1, [r1, r3]
 8007aee:	0014      	movs	r4, r2
 8007af0:	b096      	sub	sp, #88	; 0x58
 8007af2:	2900      	cmp	r1, #0
 8007af4:	da08      	bge.n	8007b08 <__swhatbuf_r+0x24>
 8007af6:	220c      	movs	r2, #12
 8007af8:	5eb3      	ldrsh	r3, [r6, r2]
 8007afa:	2200      	movs	r2, #0
 8007afc:	602a      	str	r2, [r5, #0]
 8007afe:	061b      	lsls	r3, r3, #24
 8007b00:	d411      	bmi.n	8007b26 <__swhatbuf_r+0x42>
 8007b02:	2380      	movs	r3, #128	; 0x80
 8007b04:	00db      	lsls	r3, r3, #3
 8007b06:	e00f      	b.n	8007b28 <__swhatbuf_r+0x44>
 8007b08:	466a      	mov	r2, sp
 8007b0a:	f000 f91b 	bl	8007d44 <_fstat_r>
 8007b0e:	2800      	cmp	r0, #0
 8007b10:	dbf1      	blt.n	8007af6 <__swhatbuf_r+0x12>
 8007b12:	23f0      	movs	r3, #240	; 0xf0
 8007b14:	9901      	ldr	r1, [sp, #4]
 8007b16:	021b      	lsls	r3, r3, #8
 8007b18:	4019      	ands	r1, r3
 8007b1a:	4b05      	ldr	r3, [pc, #20]	; (8007b30 <__swhatbuf_r+0x4c>)
 8007b1c:	18c9      	adds	r1, r1, r3
 8007b1e:	424b      	negs	r3, r1
 8007b20:	4159      	adcs	r1, r3
 8007b22:	6029      	str	r1, [r5, #0]
 8007b24:	e7ed      	b.n	8007b02 <__swhatbuf_r+0x1e>
 8007b26:	2340      	movs	r3, #64	; 0x40
 8007b28:	2000      	movs	r0, #0
 8007b2a:	6023      	str	r3, [r4, #0]
 8007b2c:	b016      	add	sp, #88	; 0x58
 8007b2e:	bd70      	pop	{r4, r5, r6, pc}
 8007b30:	ffffe000 	.word	0xffffe000

08007b34 <__smakebuf_r>:
 8007b34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b36:	2602      	movs	r6, #2
 8007b38:	898b      	ldrh	r3, [r1, #12]
 8007b3a:	0005      	movs	r5, r0
 8007b3c:	000c      	movs	r4, r1
 8007b3e:	4233      	tst	r3, r6
 8007b40:	d006      	beq.n	8007b50 <__smakebuf_r+0x1c>
 8007b42:	0023      	movs	r3, r4
 8007b44:	3347      	adds	r3, #71	; 0x47
 8007b46:	6023      	str	r3, [r4, #0]
 8007b48:	6123      	str	r3, [r4, #16]
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	6163      	str	r3, [r4, #20]
 8007b4e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8007b50:	466a      	mov	r2, sp
 8007b52:	ab01      	add	r3, sp, #4
 8007b54:	f7ff ffc6 	bl	8007ae4 <__swhatbuf_r>
 8007b58:	9900      	ldr	r1, [sp, #0]
 8007b5a:	0007      	movs	r7, r0
 8007b5c:	0028      	movs	r0, r5
 8007b5e:	f7ff f92d 	bl	8006dbc <_malloc_r>
 8007b62:	2800      	cmp	r0, #0
 8007b64:	d108      	bne.n	8007b78 <__smakebuf_r+0x44>
 8007b66:	220c      	movs	r2, #12
 8007b68:	5ea3      	ldrsh	r3, [r4, r2]
 8007b6a:	059a      	lsls	r2, r3, #22
 8007b6c:	d4ef      	bmi.n	8007b4e <__smakebuf_r+0x1a>
 8007b6e:	2203      	movs	r2, #3
 8007b70:	4393      	bics	r3, r2
 8007b72:	431e      	orrs	r6, r3
 8007b74:	81a6      	strh	r6, [r4, #12]
 8007b76:	e7e4      	b.n	8007b42 <__smakebuf_r+0xe>
 8007b78:	4b0f      	ldr	r3, [pc, #60]	; (8007bb8 <__smakebuf_r+0x84>)
 8007b7a:	62ab      	str	r3, [r5, #40]	; 0x28
 8007b7c:	2380      	movs	r3, #128	; 0x80
 8007b7e:	89a2      	ldrh	r2, [r4, #12]
 8007b80:	6020      	str	r0, [r4, #0]
 8007b82:	4313      	orrs	r3, r2
 8007b84:	81a3      	strh	r3, [r4, #12]
 8007b86:	9b00      	ldr	r3, [sp, #0]
 8007b88:	6120      	str	r0, [r4, #16]
 8007b8a:	6163      	str	r3, [r4, #20]
 8007b8c:	9b01      	ldr	r3, [sp, #4]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d00d      	beq.n	8007bae <__smakebuf_r+0x7a>
 8007b92:	0028      	movs	r0, r5
 8007b94:	230e      	movs	r3, #14
 8007b96:	5ee1      	ldrsh	r1, [r4, r3]
 8007b98:	f000 f8e6 	bl	8007d68 <_isatty_r>
 8007b9c:	2800      	cmp	r0, #0
 8007b9e:	d006      	beq.n	8007bae <__smakebuf_r+0x7a>
 8007ba0:	2203      	movs	r2, #3
 8007ba2:	89a3      	ldrh	r3, [r4, #12]
 8007ba4:	4393      	bics	r3, r2
 8007ba6:	001a      	movs	r2, r3
 8007ba8:	2301      	movs	r3, #1
 8007baa:	4313      	orrs	r3, r2
 8007bac:	81a3      	strh	r3, [r4, #12]
 8007bae:	89a0      	ldrh	r0, [r4, #12]
 8007bb0:	4307      	orrs	r7, r0
 8007bb2:	81a7      	strh	r7, [r4, #12]
 8007bb4:	e7cb      	b.n	8007b4e <__smakebuf_r+0x1a>
 8007bb6:	46c0      	nop			; (mov r8, r8)
 8007bb8:	08007921 	.word	0x08007921

08007bbc <_malloc_usable_size_r>:
 8007bbc:	1f0b      	subs	r3, r1, #4
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	1f18      	subs	r0, r3, #4
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	da01      	bge.n	8007bca <_malloc_usable_size_r+0xe>
 8007bc6:	580b      	ldr	r3, [r1, r0]
 8007bc8:	18c0      	adds	r0, r0, r3
 8007bca:	4770      	bx	lr

08007bcc <_raise_r>:
 8007bcc:	b570      	push	{r4, r5, r6, lr}
 8007bce:	0004      	movs	r4, r0
 8007bd0:	000d      	movs	r5, r1
 8007bd2:	291f      	cmp	r1, #31
 8007bd4:	d904      	bls.n	8007be0 <_raise_r+0x14>
 8007bd6:	2316      	movs	r3, #22
 8007bd8:	6003      	str	r3, [r0, #0]
 8007bda:	2001      	movs	r0, #1
 8007bdc:	4240      	negs	r0, r0
 8007bde:	bd70      	pop	{r4, r5, r6, pc}
 8007be0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d004      	beq.n	8007bf0 <_raise_r+0x24>
 8007be6:	008a      	lsls	r2, r1, #2
 8007be8:	189b      	adds	r3, r3, r2
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	2a00      	cmp	r2, #0
 8007bee:	d108      	bne.n	8007c02 <_raise_r+0x36>
 8007bf0:	0020      	movs	r0, r4
 8007bf2:	f000 f831 	bl	8007c58 <_getpid_r>
 8007bf6:	002a      	movs	r2, r5
 8007bf8:	0001      	movs	r1, r0
 8007bfa:	0020      	movs	r0, r4
 8007bfc:	f000 f81a 	bl	8007c34 <_kill_r>
 8007c00:	e7ed      	b.n	8007bde <_raise_r+0x12>
 8007c02:	2000      	movs	r0, #0
 8007c04:	2a01      	cmp	r2, #1
 8007c06:	d0ea      	beq.n	8007bde <_raise_r+0x12>
 8007c08:	1c51      	adds	r1, r2, #1
 8007c0a:	d103      	bne.n	8007c14 <_raise_r+0x48>
 8007c0c:	2316      	movs	r3, #22
 8007c0e:	3001      	adds	r0, #1
 8007c10:	6023      	str	r3, [r4, #0]
 8007c12:	e7e4      	b.n	8007bde <_raise_r+0x12>
 8007c14:	2400      	movs	r4, #0
 8007c16:	0028      	movs	r0, r5
 8007c18:	601c      	str	r4, [r3, #0]
 8007c1a:	4790      	blx	r2
 8007c1c:	0020      	movs	r0, r4
 8007c1e:	e7de      	b.n	8007bde <_raise_r+0x12>

08007c20 <raise>:
 8007c20:	b510      	push	{r4, lr}
 8007c22:	4b03      	ldr	r3, [pc, #12]	; (8007c30 <raise+0x10>)
 8007c24:	0001      	movs	r1, r0
 8007c26:	6818      	ldr	r0, [r3, #0]
 8007c28:	f7ff ffd0 	bl	8007bcc <_raise_r>
 8007c2c:	bd10      	pop	{r4, pc}
 8007c2e:	46c0      	nop			; (mov r8, r8)
 8007c30:	2000000c 	.word	0x2000000c

08007c34 <_kill_r>:
 8007c34:	2300      	movs	r3, #0
 8007c36:	b570      	push	{r4, r5, r6, lr}
 8007c38:	4d06      	ldr	r5, [pc, #24]	; (8007c54 <_kill_r+0x20>)
 8007c3a:	0004      	movs	r4, r0
 8007c3c:	0008      	movs	r0, r1
 8007c3e:	0011      	movs	r1, r2
 8007c40:	602b      	str	r3, [r5, #0]
 8007c42:	f7fa fe0b 	bl	800285c <_kill>
 8007c46:	1c43      	adds	r3, r0, #1
 8007c48:	d103      	bne.n	8007c52 <_kill_r+0x1e>
 8007c4a:	682b      	ldr	r3, [r5, #0]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d000      	beq.n	8007c52 <_kill_r+0x1e>
 8007c50:	6023      	str	r3, [r4, #0]
 8007c52:	bd70      	pop	{r4, r5, r6, pc}
 8007c54:	20000354 	.word	0x20000354

08007c58 <_getpid_r>:
 8007c58:	b510      	push	{r4, lr}
 8007c5a:	f7fa fdf9 	bl	8002850 <_getpid>
 8007c5e:	bd10      	pop	{r4, pc}

08007c60 <__sread>:
 8007c60:	b570      	push	{r4, r5, r6, lr}
 8007c62:	000c      	movs	r4, r1
 8007c64:	250e      	movs	r5, #14
 8007c66:	5f49      	ldrsh	r1, [r1, r5]
 8007c68:	f000 f8a4 	bl	8007db4 <_read_r>
 8007c6c:	2800      	cmp	r0, #0
 8007c6e:	db03      	blt.n	8007c78 <__sread+0x18>
 8007c70:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007c72:	181b      	adds	r3, r3, r0
 8007c74:	6563      	str	r3, [r4, #84]	; 0x54
 8007c76:	bd70      	pop	{r4, r5, r6, pc}
 8007c78:	89a3      	ldrh	r3, [r4, #12]
 8007c7a:	4a02      	ldr	r2, [pc, #8]	; (8007c84 <__sread+0x24>)
 8007c7c:	4013      	ands	r3, r2
 8007c7e:	81a3      	strh	r3, [r4, #12]
 8007c80:	e7f9      	b.n	8007c76 <__sread+0x16>
 8007c82:	46c0      	nop			; (mov r8, r8)
 8007c84:	ffffefff 	.word	0xffffefff

08007c88 <__swrite>:
 8007c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c8a:	001f      	movs	r7, r3
 8007c8c:	898b      	ldrh	r3, [r1, #12]
 8007c8e:	0005      	movs	r5, r0
 8007c90:	000c      	movs	r4, r1
 8007c92:	0016      	movs	r6, r2
 8007c94:	05db      	lsls	r3, r3, #23
 8007c96:	d505      	bpl.n	8007ca4 <__swrite+0x1c>
 8007c98:	230e      	movs	r3, #14
 8007c9a:	5ec9      	ldrsh	r1, [r1, r3]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	2302      	movs	r3, #2
 8007ca0:	f000 f874 	bl	8007d8c <_lseek_r>
 8007ca4:	89a3      	ldrh	r3, [r4, #12]
 8007ca6:	4a05      	ldr	r2, [pc, #20]	; (8007cbc <__swrite+0x34>)
 8007ca8:	0028      	movs	r0, r5
 8007caa:	4013      	ands	r3, r2
 8007cac:	81a3      	strh	r3, [r4, #12]
 8007cae:	0032      	movs	r2, r6
 8007cb0:	230e      	movs	r3, #14
 8007cb2:	5ee1      	ldrsh	r1, [r4, r3]
 8007cb4:	003b      	movs	r3, r7
 8007cb6:	f000 f81f 	bl	8007cf8 <_write_r>
 8007cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cbc:	ffffefff 	.word	0xffffefff

08007cc0 <__sseek>:
 8007cc0:	b570      	push	{r4, r5, r6, lr}
 8007cc2:	000c      	movs	r4, r1
 8007cc4:	250e      	movs	r5, #14
 8007cc6:	5f49      	ldrsh	r1, [r1, r5]
 8007cc8:	f000 f860 	bl	8007d8c <_lseek_r>
 8007ccc:	89a3      	ldrh	r3, [r4, #12]
 8007cce:	1c42      	adds	r2, r0, #1
 8007cd0:	d103      	bne.n	8007cda <__sseek+0x1a>
 8007cd2:	4a05      	ldr	r2, [pc, #20]	; (8007ce8 <__sseek+0x28>)
 8007cd4:	4013      	ands	r3, r2
 8007cd6:	81a3      	strh	r3, [r4, #12]
 8007cd8:	bd70      	pop	{r4, r5, r6, pc}
 8007cda:	2280      	movs	r2, #128	; 0x80
 8007cdc:	0152      	lsls	r2, r2, #5
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	81a3      	strh	r3, [r4, #12]
 8007ce2:	6560      	str	r0, [r4, #84]	; 0x54
 8007ce4:	e7f8      	b.n	8007cd8 <__sseek+0x18>
 8007ce6:	46c0      	nop			; (mov r8, r8)
 8007ce8:	ffffefff 	.word	0xffffefff

08007cec <__sclose>:
 8007cec:	b510      	push	{r4, lr}
 8007cee:	230e      	movs	r3, #14
 8007cf0:	5ec9      	ldrsh	r1, [r1, r3]
 8007cf2:	f000 f815 	bl	8007d20 <_close_r>
 8007cf6:	bd10      	pop	{r4, pc}

08007cf8 <_write_r>:
 8007cf8:	b570      	push	{r4, r5, r6, lr}
 8007cfa:	0004      	movs	r4, r0
 8007cfc:	0008      	movs	r0, r1
 8007cfe:	0011      	movs	r1, r2
 8007d00:	001a      	movs	r2, r3
 8007d02:	2300      	movs	r3, #0
 8007d04:	4d05      	ldr	r5, [pc, #20]	; (8007d1c <_write_r+0x24>)
 8007d06:	602b      	str	r3, [r5, #0]
 8007d08:	f7fa fde1 	bl	80028ce <_write>
 8007d0c:	1c43      	adds	r3, r0, #1
 8007d0e:	d103      	bne.n	8007d18 <_write_r+0x20>
 8007d10:	682b      	ldr	r3, [r5, #0]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d000      	beq.n	8007d18 <_write_r+0x20>
 8007d16:	6023      	str	r3, [r4, #0]
 8007d18:	bd70      	pop	{r4, r5, r6, pc}
 8007d1a:	46c0      	nop			; (mov r8, r8)
 8007d1c:	20000354 	.word	0x20000354

08007d20 <_close_r>:
 8007d20:	2300      	movs	r3, #0
 8007d22:	b570      	push	{r4, r5, r6, lr}
 8007d24:	4d06      	ldr	r5, [pc, #24]	; (8007d40 <_close_r+0x20>)
 8007d26:	0004      	movs	r4, r0
 8007d28:	0008      	movs	r0, r1
 8007d2a:	602b      	str	r3, [r5, #0]
 8007d2c:	f7fa fdeb 	bl	8002906 <_close>
 8007d30:	1c43      	adds	r3, r0, #1
 8007d32:	d103      	bne.n	8007d3c <_close_r+0x1c>
 8007d34:	682b      	ldr	r3, [r5, #0]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d000      	beq.n	8007d3c <_close_r+0x1c>
 8007d3a:	6023      	str	r3, [r4, #0]
 8007d3c:	bd70      	pop	{r4, r5, r6, pc}
 8007d3e:	46c0      	nop			; (mov r8, r8)
 8007d40:	20000354 	.word	0x20000354

08007d44 <_fstat_r>:
 8007d44:	2300      	movs	r3, #0
 8007d46:	b570      	push	{r4, r5, r6, lr}
 8007d48:	4d06      	ldr	r5, [pc, #24]	; (8007d64 <_fstat_r+0x20>)
 8007d4a:	0004      	movs	r4, r0
 8007d4c:	0008      	movs	r0, r1
 8007d4e:	0011      	movs	r1, r2
 8007d50:	602b      	str	r3, [r5, #0]
 8007d52:	f7fa fde2 	bl	800291a <_fstat>
 8007d56:	1c43      	adds	r3, r0, #1
 8007d58:	d103      	bne.n	8007d62 <_fstat_r+0x1e>
 8007d5a:	682b      	ldr	r3, [r5, #0]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d000      	beq.n	8007d62 <_fstat_r+0x1e>
 8007d60:	6023      	str	r3, [r4, #0]
 8007d62:	bd70      	pop	{r4, r5, r6, pc}
 8007d64:	20000354 	.word	0x20000354

08007d68 <_isatty_r>:
 8007d68:	2300      	movs	r3, #0
 8007d6a:	b570      	push	{r4, r5, r6, lr}
 8007d6c:	4d06      	ldr	r5, [pc, #24]	; (8007d88 <_isatty_r+0x20>)
 8007d6e:	0004      	movs	r4, r0
 8007d70:	0008      	movs	r0, r1
 8007d72:	602b      	str	r3, [r5, #0]
 8007d74:	f7fa fddf 	bl	8002936 <_isatty>
 8007d78:	1c43      	adds	r3, r0, #1
 8007d7a:	d103      	bne.n	8007d84 <_isatty_r+0x1c>
 8007d7c:	682b      	ldr	r3, [r5, #0]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d000      	beq.n	8007d84 <_isatty_r+0x1c>
 8007d82:	6023      	str	r3, [r4, #0]
 8007d84:	bd70      	pop	{r4, r5, r6, pc}
 8007d86:	46c0      	nop			; (mov r8, r8)
 8007d88:	20000354 	.word	0x20000354

08007d8c <_lseek_r>:
 8007d8c:	b570      	push	{r4, r5, r6, lr}
 8007d8e:	0004      	movs	r4, r0
 8007d90:	0008      	movs	r0, r1
 8007d92:	0011      	movs	r1, r2
 8007d94:	001a      	movs	r2, r3
 8007d96:	2300      	movs	r3, #0
 8007d98:	4d05      	ldr	r5, [pc, #20]	; (8007db0 <_lseek_r+0x24>)
 8007d9a:	602b      	str	r3, [r5, #0]
 8007d9c:	f7fa fdd4 	bl	8002948 <_lseek>
 8007da0:	1c43      	adds	r3, r0, #1
 8007da2:	d103      	bne.n	8007dac <_lseek_r+0x20>
 8007da4:	682b      	ldr	r3, [r5, #0]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d000      	beq.n	8007dac <_lseek_r+0x20>
 8007daa:	6023      	str	r3, [r4, #0]
 8007dac:	bd70      	pop	{r4, r5, r6, pc}
 8007dae:	46c0      	nop			; (mov r8, r8)
 8007db0:	20000354 	.word	0x20000354

08007db4 <_read_r>:
 8007db4:	b570      	push	{r4, r5, r6, lr}
 8007db6:	0004      	movs	r4, r0
 8007db8:	0008      	movs	r0, r1
 8007dba:	0011      	movs	r1, r2
 8007dbc:	001a      	movs	r2, r3
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	4d05      	ldr	r5, [pc, #20]	; (8007dd8 <_read_r+0x24>)
 8007dc2:	602b      	str	r3, [r5, #0]
 8007dc4:	f7fa fd66 	bl	8002894 <_read>
 8007dc8:	1c43      	adds	r3, r0, #1
 8007dca:	d103      	bne.n	8007dd4 <_read_r+0x20>
 8007dcc:	682b      	ldr	r3, [r5, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d000      	beq.n	8007dd4 <_read_r+0x20>
 8007dd2:	6023      	str	r3, [r4, #0]
 8007dd4:	bd70      	pop	{r4, r5, r6, pc}
 8007dd6:	46c0      	nop			; (mov r8, r8)
 8007dd8:	20000354 	.word	0x20000354

08007ddc <_init>:
 8007ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dde:	46c0      	nop			; (mov r8, r8)
 8007de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007de2:	bc08      	pop	{r3}
 8007de4:	469e      	mov	lr, r3
 8007de6:	4770      	bx	lr

08007de8 <_fini>:
 8007de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dea:	46c0      	nop			; (mov r8, r8)
 8007dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dee:	bc08      	pop	{r3}
 8007df0:	469e      	mov	lr, r3
 8007df2:	4770      	bx	lr
