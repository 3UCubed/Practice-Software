
starter_task_three.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003588  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08003648  08003648  00004648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036cc  080036cc  0000505c  2**0
                  CONTENTS
  4 .ARM          00000000  080036cc  080036cc  0000505c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080036cc  080036cc  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036cc  080036cc  000046cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036d0  080036d0  000046d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080036d4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  2000005c  08003730  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  08003730  000052b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009739  00000000  00000000  00005084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000182a  00000000  00000000  0000e7bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f0  00000000  00000000  0000ffe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000061e  00000000  00000000  000107d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000128d3  00000000  00000000  00010df6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b1aa  00000000  00000000  000236c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007070d  00000000  00000000  0002e873  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009ef80  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002000  00000000  00000000  0009efc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000a0fc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003630 	.word	0x08003630

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08003630 	.word	0x08003630

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000236:	b0a7      	sub	sp, #156	@ 0x9c
 8000238:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800023a:	f000 fb59 	bl	80008f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023e:	f000 f85f 	bl	8000300 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000242:	f000 f9b7 	bl	80005b4 <MX_GPIO_Init>
  MX_RTC_Init();
 8000246:	f000 f923 	bl	8000490 <MX_RTC_Init>
  MX_ADC_Init();
 800024a:	f000 f8c5 	bl	80003d8 <MX_ADC_Init>
  MX_USART2_UART_Init();
 800024e:	f000 f981 	bl	8000554 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  char uart_buf[100];
  int uart_buf_len;
  uint8_t format = RTC_FORMAT_BIN;
 8000252:	2387      	movs	r3, #135	@ 0x87
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	2200      	movs	r2, #0
 8000258:	701a      	strb	r2, [r3, #0]
  RTC_TimeTypeDef sTime = {0};
 800025a:	2308      	movs	r3, #8
 800025c:	18fb      	adds	r3, r7, r3
 800025e:	0018      	movs	r0, r3
 8000260:	2314      	movs	r3, #20
 8000262:	001a      	movs	r2, r3
 8000264:	2100      	movs	r1, #0
 8000266:	f002 fd65 	bl	8002d34 <memset>
  RTC_DateTypeDef sDate = {0};
 800026a:	1d3b      	adds	r3, r7, #4
 800026c:	2200      	movs	r2, #0
 800026e:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_RTC_GetTime(&hrtc, &sTime, format);
 8000270:	2587      	movs	r5, #135	@ 0x87
 8000272:	197b      	adds	r3, r7, r5
 8000274:	781a      	ldrb	r2, [r3, #0]
 8000276:	2408      	movs	r4, #8
 8000278:	1939      	adds	r1, r7, r4
 800027a:	4b1e      	ldr	r3, [pc, #120]	@ (80002f4 <main+0xc0>)
 800027c:	0018      	movs	r0, r3
 800027e:	f001 fec9 	bl	8002014 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &sDate, format);
 8000282:	197b      	adds	r3, r7, r5
 8000284:	781a      	ldrb	r2, [r3, #0]
 8000286:	1d39      	adds	r1, r7, #4
 8000288:	4b1a      	ldr	r3, [pc, #104]	@ (80002f4 <main+0xc0>)
 800028a:	0018      	movs	r0, r3
 800028c:	f001 ffb0 	bl	80021f0 <HAL_RTC_GetDate>
	  uart_buf_len = sprintf(uart_buf, "20%u-%u-%u %u:%u:%u\r\n", sDate.Year, sDate.Month,
 8000290:	1d3b      	adds	r3, r7, #4
 8000292:	78db      	ldrb	r3, [r3, #3]
 8000294:	001e      	movs	r6, r3
 8000296:	1d3b      	adds	r3, r7, #4
 8000298:	785b      	ldrb	r3, [r3, #1]
 800029a:	469c      	mov	ip, r3
			  sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	789b      	ldrb	r3, [r3, #2]
	  uart_buf_len = sprintf(uart_buf, "20%u-%u-%u %u:%u:%u\r\n", sDate.Year, sDate.Month,
 80002a0:	001a      	movs	r2, r3
			  sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);
 80002a2:	0021      	movs	r1, r4
 80002a4:	187b      	adds	r3, r7, r1
 80002a6:	781b      	ldrb	r3, [r3, #0]
	  uart_buf_len = sprintf(uart_buf, "20%u-%u-%u %u:%u:%u\r\n", sDate.Year, sDate.Month,
 80002a8:	001c      	movs	r4, r3
			  sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);
 80002aa:	187b      	adds	r3, r7, r1
 80002ac:	785b      	ldrb	r3, [r3, #1]
	  uart_buf_len = sprintf(uart_buf, "20%u-%u-%u %u:%u:%u\r\n", sDate.Year, sDate.Month,
 80002ae:	001d      	movs	r5, r3
			  sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);
 80002b0:	187b      	adds	r3, r7, r1
 80002b2:	789b      	ldrb	r3, [r3, #2]
	  uart_buf_len = sprintf(uart_buf, "20%u-%u-%u %u:%u:%u\r\n", sDate.Year, sDate.Month,
 80002b4:	4910      	ldr	r1, [pc, #64]	@ (80002f8 <main+0xc4>)
 80002b6:	201c      	movs	r0, #28
 80002b8:	1838      	adds	r0, r7, r0
 80002ba:	9303      	str	r3, [sp, #12]
 80002bc:	9502      	str	r5, [sp, #8]
 80002be:	9401      	str	r4, [sp, #4]
 80002c0:	9200      	str	r2, [sp, #0]
 80002c2:	4663      	mov	r3, ip
 80002c4:	0032      	movs	r2, r6
 80002c6:	f002 fd15 	bl	8002cf4 <siprintf>
 80002ca:	0003      	movs	r3, r0
 80002cc:	2280      	movs	r2, #128	@ 0x80
 80002ce:	18b9      	adds	r1, r7, r2
 80002d0:	600b      	str	r3, [r1, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, uart_buf_len, 1000);
 80002d2:	18bb      	adds	r3, r7, r2
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	b29a      	uxth	r2, r3
 80002d8:	23fa      	movs	r3, #250	@ 0xfa
 80002da:	009b      	lsls	r3, r3, #2
 80002dc:	201c      	movs	r0, #28
 80002de:	1839      	adds	r1, r7, r0
 80002e0:	4806      	ldr	r0, [pc, #24]	@ (80002fc <main+0xc8>)
 80002e2:	f002 f8fd 	bl	80024e0 <HAL_UART_Transmit>


	  HAL_Delay(500);
 80002e6:	23fa      	movs	r3, #250	@ 0xfa
 80002e8:	005b      	lsls	r3, r3, #1
 80002ea:	0018      	movs	r0, r3
 80002ec:	f000 fb64 	bl	80009b8 <HAL_Delay>
	  HAL_RTC_GetTime(&hrtc, &sTime, format);
 80002f0:	46c0      	nop			@ (mov r8, r8)
 80002f2:	e7bd      	b.n	8000270 <main+0x3c>
 80002f4:	200000b8 	.word	0x200000b8
 80002f8:	08003648 	.word	0x08003648
 80002fc:	200000d8 	.word	0x200000d8

08000300 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000300:	b590      	push	{r4, r7, lr}
 8000302:	b097      	sub	sp, #92	@ 0x5c
 8000304:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000306:	2428      	movs	r4, #40	@ 0x28
 8000308:	193b      	adds	r3, r7, r4
 800030a:	0018      	movs	r0, r3
 800030c:	2330      	movs	r3, #48	@ 0x30
 800030e:	001a      	movs	r2, r3
 8000310:	2100      	movs	r1, #0
 8000312:	f002 fd0f 	bl	8002d34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000316:	2318      	movs	r3, #24
 8000318:	18fb      	adds	r3, r7, r3
 800031a:	0018      	movs	r0, r3
 800031c:	2310      	movs	r3, #16
 800031e:	001a      	movs	r2, r3
 8000320:	2100      	movs	r1, #0
 8000322:	f002 fd07 	bl	8002d34 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	0018      	movs	r0, r3
 800032a:	2314      	movs	r3, #20
 800032c:	001a      	movs	r2, r3
 800032e:	2100      	movs	r1, #0
 8000330:	f002 fd00 	bl	8002d34 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8000334:	0021      	movs	r1, r4
 8000336:	187b      	adds	r3, r7, r1
 8000338:	221a      	movs	r2, #26
 800033a:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800033c:	187b      	adds	r3, r7, r1
 800033e:	2201      	movs	r2, #1
 8000340:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000342:	187b      	adds	r3, r7, r1
 8000344:	2201      	movs	r2, #1
 8000346:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000348:	187b      	adds	r3, r7, r1
 800034a:	2210      	movs	r2, #16
 800034c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800034e:	187b      	adds	r3, r7, r1
 8000350:	2210      	movs	r2, #16
 8000352:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000354:	187b      	adds	r3, r7, r1
 8000356:	2201      	movs	r2, #1
 8000358:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800035a:	187b      	adds	r3, r7, r1
 800035c:	2202      	movs	r2, #2
 800035e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000360:	187b      	adds	r3, r7, r1
 8000362:	2200      	movs	r2, #0
 8000364:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000366:	187b      	adds	r3, r7, r1
 8000368:	22a0      	movs	r2, #160	@ 0xa0
 800036a:	0392      	lsls	r2, r2, #14
 800036c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800036e:	187b      	adds	r3, r7, r1
 8000370:	2200      	movs	r2, #0
 8000372:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000374:	187b      	adds	r3, r7, r1
 8000376:	0018      	movs	r0, r3
 8000378:	f000 ffd2 	bl	8001320 <HAL_RCC_OscConfig>
 800037c:	1e03      	subs	r3, r0, #0
 800037e:	d001      	beq.n	8000384 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000380:	f000 f962 	bl	8000648 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000384:	2118      	movs	r1, #24
 8000386:	187b      	adds	r3, r7, r1
 8000388:	2207      	movs	r2, #7
 800038a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800038c:	187b      	adds	r3, r7, r1
 800038e:	2202      	movs	r2, #2
 8000390:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000392:	187b      	adds	r3, r7, r1
 8000394:	2200      	movs	r2, #0
 8000396:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000398:	187b      	adds	r3, r7, r1
 800039a:	2200      	movs	r2, #0
 800039c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800039e:	187b      	adds	r3, r7, r1
 80003a0:	2101      	movs	r1, #1
 80003a2:	0018      	movs	r0, r3
 80003a4:	f001 fad6 	bl	8001954 <HAL_RCC_ClockConfig>
 80003a8:	1e03      	subs	r3, r0, #0
 80003aa:	d001      	beq.n	80003b0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80003ac:	f000 f94c 	bl	8000648 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80003b0:	1d3b      	adds	r3, r7, #4
 80003b2:	2280      	movs	r2, #128	@ 0x80
 80003b4:	0252      	lsls	r2, r2, #9
 80003b6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80003b8:	1d3b      	adds	r3, r7, #4
 80003ba:	2280      	movs	r2, #128	@ 0x80
 80003bc:	0092      	lsls	r2, r2, #2
 80003be:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003c0:	1d3b      	adds	r3, r7, #4
 80003c2:	0018      	movs	r0, r3
 80003c4:	f001 fc0a 	bl	8001bdc <HAL_RCCEx_PeriphCLKConfig>
 80003c8:	1e03      	subs	r3, r0, #0
 80003ca:	d001      	beq.n	80003d0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80003cc:	f000 f93c 	bl	8000648 <Error_Handler>
  }
}
 80003d0:	46c0      	nop			@ (mov r8, r8)
 80003d2:	46bd      	mov	sp, r7
 80003d4:	b017      	add	sp, #92	@ 0x5c
 80003d6:	bd90      	pop	{r4, r7, pc}

080003d8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b084      	sub	sp, #16
 80003dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003de:	1d3b      	adds	r3, r7, #4
 80003e0:	0018      	movs	r0, r3
 80003e2:	230c      	movs	r3, #12
 80003e4:	001a      	movs	r2, r3
 80003e6:	2100      	movs	r1, #0
 80003e8:	f002 fca4 	bl	8002d34 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80003ec:	4b26      	ldr	r3, [pc, #152]	@ (8000488 <MX_ADC_Init+0xb0>)
 80003ee:	4a27      	ldr	r2, [pc, #156]	@ (800048c <MX_ADC_Init+0xb4>)
 80003f0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003f2:	4b25      	ldr	r3, [pc, #148]	@ (8000488 <MX_ADC_Init+0xb0>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80003f8:	4b23      	ldr	r3, [pc, #140]	@ (8000488 <MX_ADC_Init+0xb0>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003fe:	4b22      	ldr	r3, [pc, #136]	@ (8000488 <MX_ADC_Init+0xb0>)
 8000400:	2200      	movs	r2, #0
 8000402:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000404:	4b20      	ldr	r3, [pc, #128]	@ (8000488 <MX_ADC_Init+0xb0>)
 8000406:	2201      	movs	r2, #1
 8000408:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800040a:	4b1f      	ldr	r3, [pc, #124]	@ (8000488 <MX_ADC_Init+0xb0>)
 800040c:	2204      	movs	r2, #4
 800040e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000410:	4b1d      	ldr	r3, [pc, #116]	@ (8000488 <MX_ADC_Init+0xb0>)
 8000412:	2200      	movs	r2, #0
 8000414:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000416:	4b1c      	ldr	r3, [pc, #112]	@ (8000488 <MX_ADC_Init+0xb0>)
 8000418:	2200      	movs	r2, #0
 800041a:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 800041c:	4b1a      	ldr	r3, [pc, #104]	@ (8000488 <MX_ADC_Init+0xb0>)
 800041e:	2200      	movs	r2, #0
 8000420:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000422:	4b19      	ldr	r3, [pc, #100]	@ (8000488 <MX_ADC_Init+0xb0>)
 8000424:	2200      	movs	r2, #0
 8000426:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000428:	4b17      	ldr	r3, [pc, #92]	@ (8000488 <MX_ADC_Init+0xb0>)
 800042a:	22c2      	movs	r2, #194	@ 0xc2
 800042c:	32ff      	adds	r2, #255	@ 0xff
 800042e:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000430:	4b15      	ldr	r3, [pc, #84]	@ (8000488 <MX_ADC_Init+0xb0>)
 8000432:	2200      	movs	r2, #0
 8000434:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000436:	4b14      	ldr	r3, [pc, #80]	@ (8000488 <MX_ADC_Init+0xb0>)
 8000438:	2224      	movs	r2, #36	@ 0x24
 800043a:	2100      	movs	r1, #0
 800043c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800043e:	4b12      	ldr	r3, [pc, #72]	@ (8000488 <MX_ADC_Init+0xb0>)
 8000440:	2201      	movs	r2, #1
 8000442:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000444:	4b10      	ldr	r3, [pc, #64]	@ (8000488 <MX_ADC_Init+0xb0>)
 8000446:	0018      	movs	r0, r3
 8000448:	f000 fada 	bl	8000a00 <HAL_ADC_Init>
 800044c:	1e03      	subs	r3, r0, #0
 800044e:	d001      	beq.n	8000454 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000450:	f000 f8fa 	bl	8000648 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000454:	1d3b      	adds	r3, r7, #4
 8000456:	2200      	movs	r2, #0
 8000458:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800045a:	1d3b      	adds	r3, r7, #4
 800045c:	2280      	movs	r2, #128	@ 0x80
 800045e:	0152      	lsls	r2, r2, #5
 8000460:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000462:	1d3b      	adds	r3, r7, #4
 8000464:	2280      	movs	r2, #128	@ 0x80
 8000466:	0552      	lsls	r2, r2, #21
 8000468:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800046a:	1d3a      	adds	r2, r7, #4
 800046c:	4b06      	ldr	r3, [pc, #24]	@ (8000488 <MX_ADC_Init+0xb0>)
 800046e:	0011      	movs	r1, r2
 8000470:	0018      	movs	r0, r3
 8000472:	f000 fc05 	bl	8000c80 <HAL_ADC_ConfigChannel>
 8000476:	1e03      	subs	r3, r0, #0
 8000478:	d001      	beq.n	800047e <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 800047a:	f000 f8e5 	bl	8000648 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800047e:	46c0      	nop			@ (mov r8, r8)
 8000480:	46bd      	mov	sp, r7
 8000482:	b004      	add	sp, #16
 8000484:	bd80      	pop	{r7, pc}
 8000486:	46c0      	nop			@ (mov r8, r8)
 8000488:	20000078 	.word	0x20000078
 800048c:	40012400 	.word	0x40012400

08000490 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b086      	sub	sp, #24
 8000494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000496:	1d3b      	adds	r3, r7, #4
 8000498:	0018      	movs	r0, r3
 800049a:	2314      	movs	r3, #20
 800049c:	001a      	movs	r2, r3
 800049e:	2100      	movs	r1, #0
 80004a0:	f002 fc48 	bl	8002d34 <memset>
  RTC_DateTypeDef sDate = {0};
 80004a4:	003b      	movs	r3, r7
 80004a6:	2200      	movs	r2, #0
 80004a8:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80004aa:	4b28      	ldr	r3, [pc, #160]	@ (800054c <MX_RTC_Init+0xbc>)
 80004ac:	4a28      	ldr	r2, [pc, #160]	@ (8000550 <MX_RTC_Init+0xc0>)
 80004ae:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80004b0:	4b26      	ldr	r3, [pc, #152]	@ (800054c <MX_RTC_Init+0xbc>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80004b6:	4b25      	ldr	r3, [pc, #148]	@ (800054c <MX_RTC_Init+0xbc>)
 80004b8:	227f      	movs	r2, #127	@ 0x7f
 80004ba:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80004bc:	4b23      	ldr	r3, [pc, #140]	@ (800054c <MX_RTC_Init+0xbc>)
 80004be:	22ff      	movs	r2, #255	@ 0xff
 80004c0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80004c2:	4b22      	ldr	r3, [pc, #136]	@ (800054c <MX_RTC_Init+0xbc>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80004c8:	4b20      	ldr	r3, [pc, #128]	@ (800054c <MX_RTC_Init+0xbc>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80004ce:	4b1f      	ldr	r3, [pc, #124]	@ (800054c <MX_RTC_Init+0xbc>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80004d4:	4b1d      	ldr	r3, [pc, #116]	@ (800054c <MX_RTC_Init+0xbc>)
 80004d6:	0018      	movs	r0, r3
 80004d8:	f001 fc5e 	bl	8001d98 <HAL_RTC_Init>
 80004dc:	1e03      	subs	r3, r0, #0
 80004de:	d001      	beq.n	80004e4 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 80004e0:	f000 f8b2 	bl	8000648 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x2;
 80004e4:	1d3b      	adds	r3, r7, #4
 80004e6:	2202      	movs	r2, #2
 80004e8:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x50;
 80004ea:	1d3b      	adds	r3, r7, #4
 80004ec:	2250      	movs	r2, #80	@ 0x50
 80004ee:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 80004f0:	1d3b      	adds	r3, r7, #4
 80004f2:	2200      	movs	r2, #0
 80004f4:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	2200      	movs	r2, #0
 80004fa:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80004fc:	1d3b      	adds	r3, r7, #4
 80004fe:	2200      	movs	r2, #0
 8000500:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000502:	1d39      	adds	r1, r7, #4
 8000504:	4b11      	ldr	r3, [pc, #68]	@ (800054c <MX_RTC_Init+0xbc>)
 8000506:	2201      	movs	r2, #1
 8000508:	0018      	movs	r0, r3
 800050a:	f001 fcdd 	bl	8001ec8 <HAL_RTC_SetTime>
 800050e:	1e03      	subs	r3, r0, #0
 8000510:	d001      	beq.n	8000516 <MX_RTC_Init+0x86>
  {
    Error_Handler();
 8000512:	f000 f899 	bl	8000648 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8000516:	003b      	movs	r3, r7
 8000518:	2202      	movs	r2, #2
 800051a:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_MAY;
 800051c:	003b      	movs	r3, r7
 800051e:	2205      	movs	r2, #5
 8000520:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x7;
 8000522:	003b      	movs	r3, r7
 8000524:	2207      	movs	r2, #7
 8000526:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x24;
 8000528:	003b      	movs	r3, r7
 800052a:	2224      	movs	r2, #36	@ 0x24
 800052c:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800052e:	0039      	movs	r1, r7
 8000530:	4b06      	ldr	r3, [pc, #24]	@ (800054c <MX_RTC_Init+0xbc>)
 8000532:	2201      	movs	r2, #1
 8000534:	0018      	movs	r0, r3
 8000536:	f001 fdcb 	bl	80020d0 <HAL_RTC_SetDate>
 800053a:	1e03      	subs	r3, r0, #0
 800053c:	d001      	beq.n	8000542 <MX_RTC_Init+0xb2>
  {
    Error_Handler();
 800053e:	f000 f883 	bl	8000648 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000542:	46c0      	nop			@ (mov r8, r8)
 8000544:	46bd      	mov	sp, r7
 8000546:	b006      	add	sp, #24
 8000548:	bd80      	pop	{r7, pc}
 800054a:	46c0      	nop			@ (mov r8, r8)
 800054c:	200000b8 	.word	0x200000b8
 8000550:	40002800 	.word	0x40002800

08000554 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000558:	4b14      	ldr	r3, [pc, #80]	@ (80005ac <MX_USART2_UART_Init+0x58>)
 800055a:	4a15      	ldr	r2, [pc, #84]	@ (80005b0 <MX_USART2_UART_Init+0x5c>)
 800055c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800055e:	4b13      	ldr	r3, [pc, #76]	@ (80005ac <MX_USART2_UART_Init+0x58>)
 8000560:	22e1      	movs	r2, #225	@ 0xe1
 8000562:	0252      	lsls	r2, r2, #9
 8000564:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000566:	4b11      	ldr	r3, [pc, #68]	@ (80005ac <MX_USART2_UART_Init+0x58>)
 8000568:	2200      	movs	r2, #0
 800056a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800056c:	4b0f      	ldr	r3, [pc, #60]	@ (80005ac <MX_USART2_UART_Init+0x58>)
 800056e:	2200      	movs	r2, #0
 8000570:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000572:	4b0e      	ldr	r3, [pc, #56]	@ (80005ac <MX_USART2_UART_Init+0x58>)
 8000574:	2200      	movs	r2, #0
 8000576:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000578:	4b0c      	ldr	r3, [pc, #48]	@ (80005ac <MX_USART2_UART_Init+0x58>)
 800057a:	220c      	movs	r2, #12
 800057c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800057e:	4b0b      	ldr	r3, [pc, #44]	@ (80005ac <MX_USART2_UART_Init+0x58>)
 8000580:	2200      	movs	r2, #0
 8000582:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000584:	4b09      	ldr	r3, [pc, #36]	@ (80005ac <MX_USART2_UART_Init+0x58>)
 8000586:	2200      	movs	r2, #0
 8000588:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800058a:	4b08      	ldr	r3, [pc, #32]	@ (80005ac <MX_USART2_UART_Init+0x58>)
 800058c:	2200      	movs	r2, #0
 800058e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000590:	4b06      	ldr	r3, [pc, #24]	@ (80005ac <MX_USART2_UART_Init+0x58>)
 8000592:	2200      	movs	r2, #0
 8000594:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000596:	4b05      	ldr	r3, [pc, #20]	@ (80005ac <MX_USART2_UART_Init+0x58>)
 8000598:	0018      	movs	r0, r3
 800059a:	f001 ff4d 	bl	8002438 <HAL_UART_Init>
 800059e:	1e03      	subs	r3, r0, #0
 80005a0:	d001      	beq.n	80005a6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80005a2:	f000 f851 	bl	8000648 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005a6:	46c0      	nop			@ (mov r8, r8)
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	200000d8 	.word	0x200000d8
 80005b0:	40004400 	.word	0x40004400

080005b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005b4:	b590      	push	{r4, r7, lr}
 80005b6:	b089      	sub	sp, #36	@ 0x24
 80005b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ba:	240c      	movs	r4, #12
 80005bc:	193b      	adds	r3, r7, r4
 80005be:	0018      	movs	r0, r3
 80005c0:	2314      	movs	r3, #20
 80005c2:	001a      	movs	r2, r3
 80005c4:	2100      	movs	r1, #0
 80005c6:	f002 fbb5 	bl	8002d34 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ca:	4b1d      	ldr	r3, [pc, #116]	@ (8000640 <MX_GPIO_Init+0x8c>)
 80005cc:	695a      	ldr	r2, [r3, #20]
 80005ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000640 <MX_GPIO_Init+0x8c>)
 80005d0:	2180      	movs	r1, #128	@ 0x80
 80005d2:	0289      	lsls	r1, r1, #10
 80005d4:	430a      	orrs	r2, r1
 80005d6:	615a      	str	r2, [r3, #20]
 80005d8:	4b19      	ldr	r3, [pc, #100]	@ (8000640 <MX_GPIO_Init+0x8c>)
 80005da:	695a      	ldr	r2, [r3, #20]
 80005dc:	2380      	movs	r3, #128	@ 0x80
 80005de:	029b      	lsls	r3, r3, #10
 80005e0:	4013      	ands	r3, r2
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e6:	4b16      	ldr	r3, [pc, #88]	@ (8000640 <MX_GPIO_Init+0x8c>)
 80005e8:	695a      	ldr	r2, [r3, #20]
 80005ea:	4b15      	ldr	r3, [pc, #84]	@ (8000640 <MX_GPIO_Init+0x8c>)
 80005ec:	2180      	movs	r1, #128	@ 0x80
 80005ee:	0309      	lsls	r1, r1, #12
 80005f0:	430a      	orrs	r2, r1
 80005f2:	615a      	str	r2, [r3, #20]
 80005f4:	4b12      	ldr	r3, [pc, #72]	@ (8000640 <MX_GPIO_Init+0x8c>)
 80005f6:	695a      	ldr	r2, [r3, #20]
 80005f8:	2380      	movs	r3, #128	@ 0x80
 80005fa:	031b      	lsls	r3, r3, #12
 80005fc:	4013      	ands	r3, r2
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000602:	23c0      	movs	r3, #192	@ 0xc0
 8000604:	009b      	lsls	r3, r3, #2
 8000606:	480f      	ldr	r0, [pc, #60]	@ (8000644 <MX_GPIO_Init+0x90>)
 8000608:	2200      	movs	r2, #0
 800060a:	0019      	movs	r1, r3
 800060c:	f000 fe6a 	bl	80012e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8000610:	193b      	adds	r3, r7, r4
 8000612:	22c0      	movs	r2, #192	@ 0xc0
 8000614:	0092      	lsls	r2, r2, #2
 8000616:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000618:	193b      	adds	r3, r7, r4
 800061a:	2201      	movs	r2, #1
 800061c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061e:	193b      	adds	r3, r7, r4
 8000620:	2200      	movs	r2, #0
 8000622:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000624:	193b      	adds	r3, r7, r4
 8000626:	2200      	movs	r2, #0
 8000628:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800062a:	193b      	adds	r3, r7, r4
 800062c:	4a05      	ldr	r2, [pc, #20]	@ (8000644 <MX_GPIO_Init+0x90>)
 800062e:	0019      	movs	r1, r3
 8000630:	0010      	movs	r0, r2
 8000632:	f000 fce7 	bl	8001004 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000636:	46c0      	nop			@ (mov r8, r8)
 8000638:	46bd      	mov	sp, r7
 800063a:	b009      	add	sp, #36	@ 0x24
 800063c:	bd90      	pop	{r4, r7, pc}
 800063e:	46c0      	nop			@ (mov r8, r8)
 8000640:	40021000 	.word	0x40021000
 8000644:	48000800 	.word	0x48000800

08000648 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800064c:	b672      	cpsid	i
}
 800064e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000650:	46c0      	nop			@ (mov r8, r8)
 8000652:	e7fd      	b.n	8000650 <Error_Handler+0x8>

08000654 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800065a:	4b0f      	ldr	r3, [pc, #60]	@ (8000698 <HAL_MspInit+0x44>)
 800065c:	699a      	ldr	r2, [r3, #24]
 800065e:	4b0e      	ldr	r3, [pc, #56]	@ (8000698 <HAL_MspInit+0x44>)
 8000660:	2101      	movs	r1, #1
 8000662:	430a      	orrs	r2, r1
 8000664:	619a      	str	r2, [r3, #24]
 8000666:	4b0c      	ldr	r3, [pc, #48]	@ (8000698 <HAL_MspInit+0x44>)
 8000668:	699b      	ldr	r3, [r3, #24]
 800066a:	2201      	movs	r2, #1
 800066c:	4013      	ands	r3, r2
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000672:	4b09      	ldr	r3, [pc, #36]	@ (8000698 <HAL_MspInit+0x44>)
 8000674:	69da      	ldr	r2, [r3, #28]
 8000676:	4b08      	ldr	r3, [pc, #32]	@ (8000698 <HAL_MspInit+0x44>)
 8000678:	2180      	movs	r1, #128	@ 0x80
 800067a:	0549      	lsls	r1, r1, #21
 800067c:	430a      	orrs	r2, r1
 800067e:	61da      	str	r2, [r3, #28]
 8000680:	4b05      	ldr	r3, [pc, #20]	@ (8000698 <HAL_MspInit+0x44>)
 8000682:	69da      	ldr	r2, [r3, #28]
 8000684:	2380      	movs	r3, #128	@ 0x80
 8000686:	055b      	lsls	r3, r3, #21
 8000688:	4013      	ands	r3, r2
 800068a:	603b      	str	r3, [r7, #0]
 800068c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800068e:	46c0      	nop			@ (mov r8, r8)
 8000690:	46bd      	mov	sp, r7
 8000692:	b002      	add	sp, #8
 8000694:	bd80      	pop	{r7, pc}
 8000696:	46c0      	nop			@ (mov r8, r8)
 8000698:	40021000 	.word	0x40021000

0800069c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800069c:	b590      	push	{r4, r7, lr}
 800069e:	b08b      	sub	sp, #44	@ 0x2c
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a4:	2414      	movs	r4, #20
 80006a6:	193b      	adds	r3, r7, r4
 80006a8:	0018      	movs	r0, r3
 80006aa:	2314      	movs	r3, #20
 80006ac:	001a      	movs	r2, r3
 80006ae:	2100      	movs	r1, #0
 80006b0:	f002 fb40 	bl	8002d34 <memset>
  if(hadc->Instance==ADC1)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a19      	ldr	r2, [pc, #100]	@ (8000720 <HAL_ADC_MspInit+0x84>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d12b      	bne.n	8000716 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006be:	4b19      	ldr	r3, [pc, #100]	@ (8000724 <HAL_ADC_MspInit+0x88>)
 80006c0:	699a      	ldr	r2, [r3, #24]
 80006c2:	4b18      	ldr	r3, [pc, #96]	@ (8000724 <HAL_ADC_MspInit+0x88>)
 80006c4:	2180      	movs	r1, #128	@ 0x80
 80006c6:	0089      	lsls	r1, r1, #2
 80006c8:	430a      	orrs	r2, r1
 80006ca:	619a      	str	r2, [r3, #24]
 80006cc:	4b15      	ldr	r3, [pc, #84]	@ (8000724 <HAL_ADC_MspInit+0x88>)
 80006ce:	699a      	ldr	r2, [r3, #24]
 80006d0:	2380      	movs	r3, #128	@ 0x80
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	4013      	ands	r3, r2
 80006d6:	613b      	str	r3, [r7, #16]
 80006d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006da:	4b12      	ldr	r3, [pc, #72]	@ (8000724 <HAL_ADC_MspInit+0x88>)
 80006dc:	695a      	ldr	r2, [r3, #20]
 80006de:	4b11      	ldr	r3, [pc, #68]	@ (8000724 <HAL_ADC_MspInit+0x88>)
 80006e0:	2180      	movs	r1, #128	@ 0x80
 80006e2:	0289      	lsls	r1, r1, #10
 80006e4:	430a      	orrs	r2, r1
 80006e6:	615a      	str	r2, [r3, #20]
 80006e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000724 <HAL_ADC_MspInit+0x88>)
 80006ea:	695a      	ldr	r2, [r3, #20]
 80006ec:	2380      	movs	r3, #128	@ 0x80
 80006ee:	029b      	lsls	r3, r3, #10
 80006f0:	4013      	ands	r3, r2
 80006f2:	60fb      	str	r3, [r7, #12]
 80006f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006f6:	193b      	adds	r3, r7, r4
 80006f8:	2201      	movs	r2, #1
 80006fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006fc:	193b      	adds	r3, r7, r4
 80006fe:	2203      	movs	r2, #3
 8000700:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	193b      	adds	r3, r7, r4
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000708:	193a      	adds	r2, r7, r4
 800070a:	2390      	movs	r3, #144	@ 0x90
 800070c:	05db      	lsls	r3, r3, #23
 800070e:	0011      	movs	r1, r2
 8000710:	0018      	movs	r0, r3
 8000712:	f000 fc77 	bl	8001004 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000716:	46c0      	nop			@ (mov r8, r8)
 8000718:	46bd      	mov	sp, r7
 800071a:	b00b      	add	sp, #44	@ 0x2c
 800071c:	bd90      	pop	{r4, r7, pc}
 800071e:	46c0      	nop			@ (mov r8, r8)
 8000720:	40012400 	.word	0x40012400
 8000724:	40021000 	.word	0x40021000

08000728 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a06      	ldr	r2, [pc, #24]	@ (8000750 <HAL_RTC_MspInit+0x28>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d106      	bne.n	8000748 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800073a:	4b06      	ldr	r3, [pc, #24]	@ (8000754 <HAL_RTC_MspInit+0x2c>)
 800073c:	6a1a      	ldr	r2, [r3, #32]
 800073e:	4b05      	ldr	r3, [pc, #20]	@ (8000754 <HAL_RTC_MspInit+0x2c>)
 8000740:	2180      	movs	r1, #128	@ 0x80
 8000742:	0209      	lsls	r1, r1, #8
 8000744:	430a      	orrs	r2, r1
 8000746:	621a      	str	r2, [r3, #32]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000748:	46c0      	nop			@ (mov r8, r8)
 800074a:	46bd      	mov	sp, r7
 800074c:	b002      	add	sp, #8
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40002800 	.word	0x40002800
 8000754:	40021000 	.word	0x40021000

08000758 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000758:	b590      	push	{r4, r7, lr}
 800075a:	b08b      	sub	sp, #44	@ 0x2c
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000760:	2414      	movs	r4, #20
 8000762:	193b      	adds	r3, r7, r4
 8000764:	0018      	movs	r0, r3
 8000766:	2314      	movs	r3, #20
 8000768:	001a      	movs	r2, r3
 800076a:	2100      	movs	r1, #0
 800076c:	f002 fae2 	bl	8002d34 <memset>
  if(huart->Instance==USART2)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a1c      	ldr	r2, [pc, #112]	@ (80007e8 <HAL_UART_MspInit+0x90>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d132      	bne.n	80007e0 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800077a:	4b1c      	ldr	r3, [pc, #112]	@ (80007ec <HAL_UART_MspInit+0x94>)
 800077c:	69da      	ldr	r2, [r3, #28]
 800077e:	4b1b      	ldr	r3, [pc, #108]	@ (80007ec <HAL_UART_MspInit+0x94>)
 8000780:	2180      	movs	r1, #128	@ 0x80
 8000782:	0289      	lsls	r1, r1, #10
 8000784:	430a      	orrs	r2, r1
 8000786:	61da      	str	r2, [r3, #28]
 8000788:	4b18      	ldr	r3, [pc, #96]	@ (80007ec <HAL_UART_MspInit+0x94>)
 800078a:	69da      	ldr	r2, [r3, #28]
 800078c:	2380      	movs	r3, #128	@ 0x80
 800078e:	029b      	lsls	r3, r3, #10
 8000790:	4013      	ands	r3, r2
 8000792:	613b      	str	r3, [r7, #16]
 8000794:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000796:	4b15      	ldr	r3, [pc, #84]	@ (80007ec <HAL_UART_MspInit+0x94>)
 8000798:	695a      	ldr	r2, [r3, #20]
 800079a:	4b14      	ldr	r3, [pc, #80]	@ (80007ec <HAL_UART_MspInit+0x94>)
 800079c:	2180      	movs	r1, #128	@ 0x80
 800079e:	0289      	lsls	r1, r1, #10
 80007a0:	430a      	orrs	r2, r1
 80007a2:	615a      	str	r2, [r3, #20]
 80007a4:	4b11      	ldr	r3, [pc, #68]	@ (80007ec <HAL_UART_MspInit+0x94>)
 80007a6:	695a      	ldr	r2, [r3, #20]
 80007a8:	2380      	movs	r3, #128	@ 0x80
 80007aa:	029b      	lsls	r3, r3, #10
 80007ac:	4013      	ands	r3, r2
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80007b2:	0021      	movs	r1, r4
 80007b4:	187b      	adds	r3, r7, r1
 80007b6:	220c      	movs	r2, #12
 80007b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ba:	187b      	adds	r3, r7, r1
 80007bc:	2202      	movs	r2, #2
 80007be:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	187b      	adds	r3, r7, r1
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007c6:	187b      	adds	r3, r7, r1
 80007c8:	2203      	movs	r2, #3
 80007ca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80007cc:	187b      	adds	r3, r7, r1
 80007ce:	2201      	movs	r2, #1
 80007d0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d2:	187a      	adds	r2, r7, r1
 80007d4:	2390      	movs	r3, #144	@ 0x90
 80007d6:	05db      	lsls	r3, r3, #23
 80007d8:	0011      	movs	r1, r2
 80007da:	0018      	movs	r0, r3
 80007dc:	f000 fc12 	bl	8001004 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007e0:	46c0      	nop			@ (mov r8, r8)
 80007e2:	46bd      	mov	sp, r7
 80007e4:	b00b      	add	sp, #44	@ 0x2c
 80007e6:	bd90      	pop	{r4, r7, pc}
 80007e8:	40004400 	.word	0x40004400
 80007ec:	40021000 	.word	0x40021000

080007f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007f4:	46c0      	nop			@ (mov r8, r8)
 80007f6:	e7fd      	b.n	80007f4 <NMI_Handler+0x4>

080007f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007fc:	46c0      	nop			@ (mov r8, r8)
 80007fe:	e7fd      	b.n	80007fc <HardFault_Handler+0x4>

08000800 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000804:	46c0      	nop			@ (mov r8, r8)
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800080e:	46c0      	nop			@ (mov r8, r8)
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000818:	f000 f8b2 	bl	8000980 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800081c:	46c0      	nop			@ (mov r8, r8)
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
	...

08000824 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b086      	sub	sp, #24
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800082c:	4a14      	ldr	r2, [pc, #80]	@ (8000880 <_sbrk+0x5c>)
 800082e:	4b15      	ldr	r3, [pc, #84]	@ (8000884 <_sbrk+0x60>)
 8000830:	1ad3      	subs	r3, r2, r3
 8000832:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000838:	4b13      	ldr	r3, [pc, #76]	@ (8000888 <_sbrk+0x64>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d102      	bne.n	8000846 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000840:	4b11      	ldr	r3, [pc, #68]	@ (8000888 <_sbrk+0x64>)
 8000842:	4a12      	ldr	r2, [pc, #72]	@ (800088c <_sbrk+0x68>)
 8000844:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000846:	4b10      	ldr	r3, [pc, #64]	@ (8000888 <_sbrk+0x64>)
 8000848:	681a      	ldr	r2, [r3, #0]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	18d3      	adds	r3, r2, r3
 800084e:	693a      	ldr	r2, [r7, #16]
 8000850:	429a      	cmp	r2, r3
 8000852:	d207      	bcs.n	8000864 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000854:	f002 fa76 	bl	8002d44 <__errno>
 8000858:	0003      	movs	r3, r0
 800085a:	220c      	movs	r2, #12
 800085c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800085e:	2301      	movs	r3, #1
 8000860:	425b      	negs	r3, r3
 8000862:	e009      	b.n	8000878 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000864:	4b08      	ldr	r3, [pc, #32]	@ (8000888 <_sbrk+0x64>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800086a:	4b07      	ldr	r3, [pc, #28]	@ (8000888 <_sbrk+0x64>)
 800086c:	681a      	ldr	r2, [r3, #0]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	18d2      	adds	r2, r2, r3
 8000872:	4b05      	ldr	r3, [pc, #20]	@ (8000888 <_sbrk+0x64>)
 8000874:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000876:	68fb      	ldr	r3, [r7, #12]
}
 8000878:	0018      	movs	r0, r3
 800087a:	46bd      	mov	sp, r7
 800087c:	b006      	add	sp, #24
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20002000 	.word	0x20002000
 8000884:	00000400 	.word	0x00000400
 8000888:	20000160 	.word	0x20000160
 800088c:	200002b0 	.word	0x200002b0

08000890 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000894:	46c0      	nop			@ (mov r8, r8)
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
	...

0800089c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800089c:	480d      	ldr	r0, [pc, #52]	@ (80008d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800089e:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 80008a0:	f7ff fff6 	bl	8000890 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008a4:	480c      	ldr	r0, [pc, #48]	@ (80008d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80008a6:	490d      	ldr	r1, [pc, #52]	@ (80008dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80008a8:	4a0d      	ldr	r2, [pc, #52]	@ (80008e0 <LoopForever+0xe>)
  movs r3, #0
 80008aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008ac:	e002      	b.n	80008b4 <LoopCopyDataInit>

080008ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008b2:	3304      	adds	r3, #4

080008b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008b8:	d3f9      	bcc.n	80008ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ba:	4a0a      	ldr	r2, [pc, #40]	@ (80008e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008bc:	4c0a      	ldr	r4, [pc, #40]	@ (80008e8 <LoopForever+0x16>)
  movs r3, #0
 80008be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c0:	e001      	b.n	80008c6 <LoopFillZerobss>

080008c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c4:	3204      	adds	r2, #4

080008c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008c8:	d3fb      	bcc.n	80008c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008ca:	f002 fa41 	bl	8002d50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008ce:	f7ff fcb1 	bl	8000234 <main>

080008d2 <LoopForever>:

LoopForever:
    b LoopForever
 80008d2:	e7fe      	b.n	80008d2 <LoopForever>
  ldr   r0, =_estack
 80008d4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80008d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008dc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80008e0:	080036d4 	.word	0x080036d4
  ldr r2, =_sbss
 80008e4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80008e8:	200002b0 	.word	0x200002b0

080008ec <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008ec:	e7fe      	b.n	80008ec <ADC1_COMP_IRQHandler>
	...

080008f0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008f4:	4b07      	ldr	r3, [pc, #28]	@ (8000914 <HAL_Init+0x24>)
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	4b06      	ldr	r3, [pc, #24]	@ (8000914 <HAL_Init+0x24>)
 80008fa:	2110      	movs	r1, #16
 80008fc:	430a      	orrs	r2, r1
 80008fe:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000900:	2000      	movs	r0, #0
 8000902:	f000 f809 	bl	8000918 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000906:	f7ff fea5 	bl	8000654 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800090a:	2300      	movs	r3, #0
}
 800090c:	0018      	movs	r0, r3
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	46c0      	nop			@ (mov r8, r8)
 8000914:	40022000 	.word	0x40022000

08000918 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000918:	b590      	push	{r4, r7, lr}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000920:	4b14      	ldr	r3, [pc, #80]	@ (8000974 <HAL_InitTick+0x5c>)
 8000922:	681c      	ldr	r4, [r3, #0]
 8000924:	4b14      	ldr	r3, [pc, #80]	@ (8000978 <HAL_InitTick+0x60>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	0019      	movs	r1, r3
 800092a:	23fa      	movs	r3, #250	@ 0xfa
 800092c:	0098      	lsls	r0, r3, #2
 800092e:	f7ff fbf5 	bl	800011c <__udivsi3>
 8000932:	0003      	movs	r3, r0
 8000934:	0019      	movs	r1, r3
 8000936:	0020      	movs	r0, r4
 8000938:	f7ff fbf0 	bl	800011c <__udivsi3>
 800093c:	0003      	movs	r3, r0
 800093e:	0018      	movs	r0, r3
 8000940:	f000 fb53 	bl	8000fea <HAL_SYSTICK_Config>
 8000944:	1e03      	subs	r3, r0, #0
 8000946:	d001      	beq.n	800094c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000948:	2301      	movs	r3, #1
 800094a:	e00f      	b.n	800096c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2b03      	cmp	r3, #3
 8000950:	d80b      	bhi.n	800096a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000952:	6879      	ldr	r1, [r7, #4]
 8000954:	2301      	movs	r3, #1
 8000956:	425b      	negs	r3, r3
 8000958:	2200      	movs	r2, #0
 800095a:	0018      	movs	r0, r3
 800095c:	f000 fb30 	bl	8000fc0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000960:	4b06      	ldr	r3, [pc, #24]	@ (800097c <HAL_InitTick+0x64>)
 8000962:	687a      	ldr	r2, [r7, #4]
 8000964:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000966:	2300      	movs	r3, #0
 8000968:	e000      	b.n	800096c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800096a:	2301      	movs	r3, #1
}
 800096c:	0018      	movs	r0, r3
 800096e:	46bd      	mov	sp, r7
 8000970:	b003      	add	sp, #12
 8000972:	bd90      	pop	{r4, r7, pc}
 8000974:	20000000 	.word	0x20000000
 8000978:	20000008 	.word	0x20000008
 800097c:	20000004 	.word	0x20000004

08000980 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000984:	4b05      	ldr	r3, [pc, #20]	@ (800099c <HAL_IncTick+0x1c>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	001a      	movs	r2, r3
 800098a:	4b05      	ldr	r3, [pc, #20]	@ (80009a0 <HAL_IncTick+0x20>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	18d2      	adds	r2, r2, r3
 8000990:	4b03      	ldr	r3, [pc, #12]	@ (80009a0 <HAL_IncTick+0x20>)
 8000992:	601a      	str	r2, [r3, #0]
}
 8000994:	46c0      	nop			@ (mov r8, r8)
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	46c0      	nop			@ (mov r8, r8)
 800099c:	20000008 	.word	0x20000008
 80009a0:	20000164 	.word	0x20000164

080009a4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  return uwTick;
 80009a8:	4b02      	ldr	r3, [pc, #8]	@ (80009b4 <HAL_GetTick+0x10>)
 80009aa:	681b      	ldr	r3, [r3, #0]
}
 80009ac:	0018      	movs	r0, r3
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	46c0      	nop			@ (mov r8, r8)
 80009b4:	20000164 	.word	0x20000164

080009b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009c0:	f7ff fff0 	bl	80009a4 <HAL_GetTick>
 80009c4:	0003      	movs	r3, r0
 80009c6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	3301      	adds	r3, #1
 80009d0:	d005      	beq.n	80009de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009d2:	4b0a      	ldr	r3, [pc, #40]	@ (80009fc <HAL_Delay+0x44>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	001a      	movs	r2, r3
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	189b      	adds	r3, r3, r2
 80009dc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80009de:	46c0      	nop			@ (mov r8, r8)
 80009e0:	f7ff ffe0 	bl	80009a4 <HAL_GetTick>
 80009e4:	0002      	movs	r2, r0
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	1ad3      	subs	r3, r2, r3
 80009ea:	68fa      	ldr	r2, [r7, #12]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d8f7      	bhi.n	80009e0 <HAL_Delay+0x28>
  {
  }
}
 80009f0:	46c0      	nop			@ (mov r8, r8)
 80009f2:	46c0      	nop			@ (mov r8, r8)
 80009f4:	46bd      	mov	sp, r7
 80009f6:	b004      	add	sp, #16
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	46c0      	nop			@ (mov r8, r8)
 80009fc:	20000008 	.word	0x20000008

08000a00 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a08:	230f      	movs	r3, #15
 8000a0a:	18fb      	adds	r3, r7, r3
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000a10:	2300      	movs	r3, #0
 8000a12:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d101      	bne.n	8000a1e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	e125      	b.n	8000c6a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d10a      	bne.n	8000a3c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2200      	movs	r2, #0
 8000a2a:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2234      	movs	r2, #52	@ 0x34
 8000a30:	2100      	movs	r1, #0
 8000a32:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	0018      	movs	r0, r3
 8000a38:	f7ff fe30 	bl	800069c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a40:	2210      	movs	r2, #16
 8000a42:	4013      	ands	r3, r2
 8000a44:	d000      	beq.n	8000a48 <HAL_ADC_Init+0x48>
 8000a46:	e103      	b.n	8000c50 <HAL_ADC_Init+0x250>
 8000a48:	230f      	movs	r3, #15
 8000a4a:	18fb      	adds	r3, r7, r3
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d000      	beq.n	8000a54 <HAL_ADC_Init+0x54>
 8000a52:	e0fd      	b.n	8000c50 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	689b      	ldr	r3, [r3, #8]
 8000a5a:	2204      	movs	r2, #4
 8000a5c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000a5e:	d000      	beq.n	8000a62 <HAL_ADC_Init+0x62>
 8000a60:	e0f6      	b.n	8000c50 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a66:	4a83      	ldr	r2, [pc, #524]	@ (8000c74 <HAL_ADC_Init+0x274>)
 8000a68:	4013      	ands	r3, r2
 8000a6a:	2202      	movs	r2, #2
 8000a6c:	431a      	orrs	r2, r3
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	689b      	ldr	r3, [r3, #8]
 8000a78:	2203      	movs	r2, #3
 8000a7a:	4013      	ands	r3, r2
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d112      	bne.n	8000aa6 <HAL_ADC_Init+0xa6>
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	2201      	movs	r2, #1
 8000a88:	4013      	ands	r3, r2
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d009      	beq.n	8000aa2 <HAL_ADC_Init+0xa2>
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	68da      	ldr	r2, [r3, #12]
 8000a94:	2380      	movs	r3, #128	@ 0x80
 8000a96:	021b      	lsls	r3, r3, #8
 8000a98:	401a      	ands	r2, r3
 8000a9a:	2380      	movs	r3, #128	@ 0x80
 8000a9c:	021b      	lsls	r3, r3, #8
 8000a9e:	429a      	cmp	r2, r3
 8000aa0:	d101      	bne.n	8000aa6 <HAL_ADC_Init+0xa6>
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	e000      	b.n	8000aa8 <HAL_ADC_Init+0xa8>
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d116      	bne.n	8000ada <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	68db      	ldr	r3, [r3, #12]
 8000ab2:	2218      	movs	r2, #24
 8000ab4:	4393      	bics	r3, r2
 8000ab6:	0019      	movs	r1, r3
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	689a      	ldr	r2, [r3, #8]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	430a      	orrs	r2, r1
 8000ac2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	691b      	ldr	r3, [r3, #16]
 8000aca:	009b      	lsls	r3, r3, #2
 8000acc:	0899      	lsrs	r1, r3, #2
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	685a      	ldr	r2, [r3, #4]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	430a      	orrs	r2, r1
 8000ad8:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	68da      	ldr	r2, [r3, #12]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4964      	ldr	r1, [pc, #400]	@ (8000c78 <HAL_ADC_Init+0x278>)
 8000ae6:	400a      	ands	r2, r1
 8000ae8:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	7e1b      	ldrb	r3, [r3, #24]
 8000aee:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	7e5b      	ldrb	r3, [r3, #25]
 8000af4:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000af6:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	7e9b      	ldrb	r3, [r3, #26]
 8000afc:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000afe:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d002      	beq.n	8000b0e <HAL_ADC_Init+0x10e>
 8000b08:	2380      	movs	r3, #128	@ 0x80
 8000b0a:	015b      	lsls	r3, r3, #5
 8000b0c:	e000      	b.n	8000b10 <HAL_ADC_Init+0x110>
 8000b0e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000b10:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000b16:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	691b      	ldr	r3, [r3, #16]
 8000b1c:	2b02      	cmp	r3, #2
 8000b1e:	d101      	bne.n	8000b24 <HAL_ADC_Init+0x124>
 8000b20:	2304      	movs	r3, #4
 8000b22:	e000      	b.n	8000b26 <HAL_ADC_Init+0x126>
 8000b24:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000b26:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2124      	movs	r1, #36	@ 0x24
 8000b2c:	5c5b      	ldrb	r3, [r3, r1]
 8000b2e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000b30:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000b32:	68ba      	ldr	r2, [r7, #8]
 8000b34:	4313      	orrs	r3, r2
 8000b36:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	7edb      	ldrb	r3, [r3, #27]
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d115      	bne.n	8000b6c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	7e9b      	ldrb	r3, [r3, #26]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d105      	bne.n	8000b54 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	2280      	movs	r2, #128	@ 0x80
 8000b4c:	0252      	lsls	r2, r2, #9
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	e00b      	b.n	8000b6c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000b58:	2220      	movs	r2, #32
 8000b5a:	431a      	orrs	r2, r3
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b64:	2201      	movs	r2, #1
 8000b66:	431a      	orrs	r2, r3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	69da      	ldr	r2, [r3, #28]
 8000b70:	23c2      	movs	r3, #194	@ 0xc2
 8000b72:	33ff      	adds	r3, #255	@ 0xff
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d007      	beq.n	8000b88 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000b80:	4313      	orrs	r3, r2
 8000b82:	68ba      	ldr	r2, [r7, #8]
 8000b84:	4313      	orrs	r3, r2
 8000b86:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	68d9      	ldr	r1, [r3, #12]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	68ba      	ldr	r2, [r7, #8]
 8000b94:	430a      	orrs	r2, r1
 8000b96:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000b9c:	2380      	movs	r3, #128	@ 0x80
 8000b9e:	055b      	lsls	r3, r3, #21
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d01b      	beq.n	8000bdc <HAL_ADC_Init+0x1dc>
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d017      	beq.n	8000bdc <HAL_ADC_Init+0x1dc>
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bb0:	2b02      	cmp	r3, #2
 8000bb2:	d013      	beq.n	8000bdc <HAL_ADC_Init+0x1dc>
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bb8:	2b03      	cmp	r3, #3
 8000bba:	d00f      	beq.n	8000bdc <HAL_ADC_Init+0x1dc>
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bc0:	2b04      	cmp	r3, #4
 8000bc2:	d00b      	beq.n	8000bdc <HAL_ADC_Init+0x1dc>
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bc8:	2b05      	cmp	r3, #5
 8000bca:	d007      	beq.n	8000bdc <HAL_ADC_Init+0x1dc>
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bd0:	2b06      	cmp	r3, #6
 8000bd2:	d003      	beq.n	8000bdc <HAL_ADC_Init+0x1dc>
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bd8:	2b07      	cmp	r3, #7
 8000bda:	d112      	bne.n	8000c02 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	695a      	ldr	r2, [r3, #20]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	2107      	movs	r1, #7
 8000be8:	438a      	bics	r2, r1
 8000bea:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	6959      	ldr	r1, [r3, #20]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bf6:	2207      	movs	r2, #7
 8000bf8:	401a      	ands	r2, r3
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	430a      	orrs	r2, r1
 8000c00:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	4a1c      	ldr	r2, [pc, #112]	@ (8000c7c <HAL_ADC_Init+0x27c>)
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	68ba      	ldr	r2, [r7, #8]
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	d10b      	bne.n	8000c2a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2200      	movs	r2, #0
 8000c16:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c1c:	2203      	movs	r2, #3
 8000c1e:	4393      	bics	r3, r2
 8000c20:	2201      	movs	r2, #1
 8000c22:	431a      	orrs	r2, r3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000c28:	e01c      	b.n	8000c64 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c2e:	2212      	movs	r2, #18
 8000c30:	4393      	bics	r3, r2
 8000c32:	2210      	movs	r2, #16
 8000c34:	431a      	orrs	r2, r3
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c3e:	2201      	movs	r2, #1
 8000c40:	431a      	orrs	r2, r3
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000c46:	230f      	movs	r3, #15
 8000c48:	18fb      	adds	r3, r7, r3
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000c4e:	e009      	b.n	8000c64 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c54:	2210      	movs	r2, #16
 8000c56:	431a      	orrs	r2, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000c5c:	230f      	movs	r3, #15
 8000c5e:	18fb      	adds	r3, r7, r3
 8000c60:	2201      	movs	r2, #1
 8000c62:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000c64:	230f      	movs	r3, #15
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	781b      	ldrb	r3, [r3, #0]
}
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	b004      	add	sp, #16
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	46c0      	nop			@ (mov r8, r8)
 8000c74:	fffffefd 	.word	0xfffffefd
 8000c78:	fffe0219 	.word	0xfffe0219
 8000c7c:	833fffe7 	.word	0x833fffe7

08000c80 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c8a:	230f      	movs	r3, #15
 8000c8c:	18fb      	adds	r3, r7, r3
 8000c8e:	2200      	movs	r2, #0
 8000c90:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8000c92:	2300      	movs	r3, #0
 8000c94:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c9a:	2380      	movs	r3, #128	@ 0x80
 8000c9c:	055b      	lsls	r3, r3, #21
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	d011      	beq.n	8000cc6 <HAL_ADC_ConfigChannel+0x46>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d00d      	beq.n	8000cc6 <HAL_ADC_ConfigChannel+0x46>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cae:	2b02      	cmp	r3, #2
 8000cb0:	d009      	beq.n	8000cc6 <HAL_ADC_ConfigChannel+0x46>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cb6:	2b03      	cmp	r3, #3
 8000cb8:	d005      	beq.n	8000cc6 <HAL_ADC_ConfigChannel+0x46>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cbe:	2b04      	cmp	r3, #4
 8000cc0:	d001      	beq.n	8000cc6 <HAL_ADC_ConfigChannel+0x46>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2234      	movs	r2, #52	@ 0x34
 8000cca:	5c9b      	ldrb	r3, [r3, r2]
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d101      	bne.n	8000cd4 <HAL_ADC_ConfigChannel+0x54>
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	e0d0      	b.n	8000e76 <HAL_ADC_ConfigChannel+0x1f6>
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2234      	movs	r2, #52	@ 0x34
 8000cd8:	2101      	movs	r1, #1
 8000cda:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	689b      	ldr	r3, [r3, #8]
 8000ce2:	2204      	movs	r2, #4
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	d000      	beq.n	8000cea <HAL_ADC_ConfigChannel+0x6a>
 8000ce8:	e0b4      	b.n	8000e54 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	4a64      	ldr	r2, [pc, #400]	@ (8000e80 <HAL_ADC_ConfigChannel+0x200>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d100      	bne.n	8000cf6 <HAL_ADC_ConfigChannel+0x76>
 8000cf4:	e082      	b.n	8000dfc <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2201      	movs	r2, #1
 8000d02:	409a      	lsls	r2, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	430a      	orrs	r2, r1
 8000d0a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d10:	2380      	movs	r3, #128	@ 0x80
 8000d12:	055b      	lsls	r3, r3, #21
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d037      	beq.n	8000d88 <HAL_ADC_ConfigChannel+0x108>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d033      	beq.n	8000d88 <HAL_ADC_ConfigChannel+0x108>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d24:	2b02      	cmp	r3, #2
 8000d26:	d02f      	beq.n	8000d88 <HAL_ADC_ConfigChannel+0x108>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d2c:	2b03      	cmp	r3, #3
 8000d2e:	d02b      	beq.n	8000d88 <HAL_ADC_ConfigChannel+0x108>
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d34:	2b04      	cmp	r3, #4
 8000d36:	d027      	beq.n	8000d88 <HAL_ADC_ConfigChannel+0x108>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d3c:	2b05      	cmp	r3, #5
 8000d3e:	d023      	beq.n	8000d88 <HAL_ADC_ConfigChannel+0x108>
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d44:	2b06      	cmp	r3, #6
 8000d46:	d01f      	beq.n	8000d88 <HAL_ADC_ConfigChannel+0x108>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d4c:	2b07      	cmp	r3, #7
 8000d4e:	d01b      	beq.n	8000d88 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	689a      	ldr	r2, [r3, #8]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	695b      	ldr	r3, [r3, #20]
 8000d5a:	2107      	movs	r1, #7
 8000d5c:	400b      	ands	r3, r1
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	d012      	beq.n	8000d88 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	695a      	ldr	r2, [r3, #20]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2107      	movs	r1, #7
 8000d6e:	438a      	bics	r2, r1
 8000d70:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	6959      	ldr	r1, [r3, #20]
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	2207      	movs	r2, #7
 8000d7e:	401a      	ands	r2, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	430a      	orrs	r2, r1
 8000d86:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2b10      	cmp	r3, #16
 8000d8e:	d007      	beq.n	8000da0 <HAL_ADC_ConfigChannel+0x120>
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2b11      	cmp	r3, #17
 8000d96:	d003      	beq.n	8000da0 <HAL_ADC_ConfigChannel+0x120>
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2b12      	cmp	r3, #18
 8000d9e:	d163      	bne.n	8000e68 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000da0:	4b38      	ldr	r3, [pc, #224]	@ (8000e84 <HAL_ADC_ConfigChannel+0x204>)
 8000da2:	6819      	ldr	r1, [r3, #0]
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2b10      	cmp	r3, #16
 8000daa:	d009      	beq.n	8000dc0 <HAL_ADC_ConfigChannel+0x140>
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2b11      	cmp	r3, #17
 8000db2:	d102      	bne.n	8000dba <HAL_ADC_ConfigChannel+0x13a>
 8000db4:	2380      	movs	r3, #128	@ 0x80
 8000db6:	03db      	lsls	r3, r3, #15
 8000db8:	e004      	b.n	8000dc4 <HAL_ADC_ConfigChannel+0x144>
 8000dba:	2380      	movs	r3, #128	@ 0x80
 8000dbc:	045b      	lsls	r3, r3, #17
 8000dbe:	e001      	b.n	8000dc4 <HAL_ADC_ConfigChannel+0x144>
 8000dc0:	2380      	movs	r3, #128	@ 0x80
 8000dc2:	041b      	lsls	r3, r3, #16
 8000dc4:	4a2f      	ldr	r2, [pc, #188]	@ (8000e84 <HAL_ADC_ConfigChannel+0x204>)
 8000dc6:	430b      	orrs	r3, r1
 8000dc8:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	2b10      	cmp	r3, #16
 8000dd0:	d14a      	bne.n	8000e68 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000dd2:	4b2d      	ldr	r3, [pc, #180]	@ (8000e88 <HAL_ADC_ConfigChannel+0x208>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	492d      	ldr	r1, [pc, #180]	@ (8000e8c <HAL_ADC_ConfigChannel+0x20c>)
 8000dd8:	0018      	movs	r0, r3
 8000dda:	f7ff f99f 	bl	800011c <__udivsi3>
 8000dde:	0003      	movs	r3, r0
 8000de0:	001a      	movs	r2, r3
 8000de2:	0013      	movs	r3, r2
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	189b      	adds	r3, r3, r2
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000dec:	e002      	b.n	8000df4 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	3b01      	subs	r3, #1
 8000df2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d1f9      	bne.n	8000dee <HAL_ADC_ConfigChannel+0x16e>
 8000dfa:	e035      	b.n	8000e68 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	2101      	movs	r1, #1
 8000e08:	4099      	lsls	r1, r3
 8000e0a:	000b      	movs	r3, r1
 8000e0c:	43d9      	mvns	r1, r3
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	400a      	ands	r2, r1
 8000e14:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2b10      	cmp	r3, #16
 8000e1c:	d007      	beq.n	8000e2e <HAL_ADC_ConfigChannel+0x1ae>
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2b11      	cmp	r3, #17
 8000e24:	d003      	beq.n	8000e2e <HAL_ADC_ConfigChannel+0x1ae>
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	2b12      	cmp	r3, #18
 8000e2c:	d11c      	bne.n	8000e68 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000e2e:	4b15      	ldr	r3, [pc, #84]	@ (8000e84 <HAL_ADC_ConfigChannel+0x204>)
 8000e30:	6819      	ldr	r1, [r3, #0]
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	2b10      	cmp	r3, #16
 8000e38:	d007      	beq.n	8000e4a <HAL_ADC_ConfigChannel+0x1ca>
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	2b11      	cmp	r3, #17
 8000e40:	d101      	bne.n	8000e46 <HAL_ADC_ConfigChannel+0x1c6>
 8000e42:	4b13      	ldr	r3, [pc, #76]	@ (8000e90 <HAL_ADC_ConfigChannel+0x210>)
 8000e44:	e002      	b.n	8000e4c <HAL_ADC_ConfigChannel+0x1cc>
 8000e46:	4b13      	ldr	r3, [pc, #76]	@ (8000e94 <HAL_ADC_ConfigChannel+0x214>)
 8000e48:	e000      	b.n	8000e4c <HAL_ADC_ConfigChannel+0x1cc>
 8000e4a:	4b13      	ldr	r3, [pc, #76]	@ (8000e98 <HAL_ADC_ConfigChannel+0x218>)
 8000e4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e84 <HAL_ADC_ConfigChannel+0x204>)
 8000e4e:	400b      	ands	r3, r1
 8000e50:	6013      	str	r3, [r2, #0]
 8000e52:	e009      	b.n	8000e68 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e58:	2220      	movs	r2, #32
 8000e5a:	431a      	orrs	r2, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8000e60:	230f      	movs	r3, #15
 8000e62:	18fb      	adds	r3, r7, r3
 8000e64:	2201      	movs	r2, #1
 8000e66:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2234      	movs	r2, #52	@ 0x34
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8000e70:	230f      	movs	r3, #15
 8000e72:	18fb      	adds	r3, r7, r3
 8000e74:	781b      	ldrb	r3, [r3, #0]
}
 8000e76:	0018      	movs	r0, r3
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	b004      	add	sp, #16
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	46c0      	nop			@ (mov r8, r8)
 8000e80:	00001001 	.word	0x00001001
 8000e84:	40012708 	.word	0x40012708
 8000e88:	20000000 	.word	0x20000000
 8000e8c:	000f4240 	.word	0x000f4240
 8000e90:	ffbfffff 	.word	0xffbfffff
 8000e94:	feffffff 	.word	0xfeffffff
 8000e98:	ff7fffff 	.word	0xff7fffff

08000e9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e9c:	b590      	push	{r4, r7, lr}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	0002      	movs	r2, r0
 8000ea4:	6039      	str	r1, [r7, #0]
 8000ea6:	1dfb      	adds	r3, r7, #7
 8000ea8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000eaa:	1dfb      	adds	r3, r7, #7
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	2b7f      	cmp	r3, #127	@ 0x7f
 8000eb0:	d828      	bhi.n	8000f04 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000eb2:	4a2f      	ldr	r2, [pc, #188]	@ (8000f70 <__NVIC_SetPriority+0xd4>)
 8000eb4:	1dfb      	adds	r3, r7, #7
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	b25b      	sxtb	r3, r3
 8000eba:	089b      	lsrs	r3, r3, #2
 8000ebc:	33c0      	adds	r3, #192	@ 0xc0
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	589b      	ldr	r3, [r3, r2]
 8000ec2:	1dfa      	adds	r2, r7, #7
 8000ec4:	7812      	ldrb	r2, [r2, #0]
 8000ec6:	0011      	movs	r1, r2
 8000ec8:	2203      	movs	r2, #3
 8000eca:	400a      	ands	r2, r1
 8000ecc:	00d2      	lsls	r2, r2, #3
 8000ece:	21ff      	movs	r1, #255	@ 0xff
 8000ed0:	4091      	lsls	r1, r2
 8000ed2:	000a      	movs	r2, r1
 8000ed4:	43d2      	mvns	r2, r2
 8000ed6:	401a      	ands	r2, r3
 8000ed8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	019b      	lsls	r3, r3, #6
 8000ede:	22ff      	movs	r2, #255	@ 0xff
 8000ee0:	401a      	ands	r2, r3
 8000ee2:	1dfb      	adds	r3, r7, #7
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	2303      	movs	r3, #3
 8000eea:	4003      	ands	r3, r0
 8000eec:	00db      	lsls	r3, r3, #3
 8000eee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ef0:	481f      	ldr	r0, [pc, #124]	@ (8000f70 <__NVIC_SetPriority+0xd4>)
 8000ef2:	1dfb      	adds	r3, r7, #7
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	b25b      	sxtb	r3, r3
 8000ef8:	089b      	lsrs	r3, r3, #2
 8000efa:	430a      	orrs	r2, r1
 8000efc:	33c0      	adds	r3, #192	@ 0xc0
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f02:	e031      	b.n	8000f68 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f04:	4a1b      	ldr	r2, [pc, #108]	@ (8000f74 <__NVIC_SetPriority+0xd8>)
 8000f06:	1dfb      	adds	r3, r7, #7
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	0019      	movs	r1, r3
 8000f0c:	230f      	movs	r3, #15
 8000f0e:	400b      	ands	r3, r1
 8000f10:	3b08      	subs	r3, #8
 8000f12:	089b      	lsrs	r3, r3, #2
 8000f14:	3306      	adds	r3, #6
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	18d3      	adds	r3, r2, r3
 8000f1a:	3304      	adds	r3, #4
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	1dfa      	adds	r2, r7, #7
 8000f20:	7812      	ldrb	r2, [r2, #0]
 8000f22:	0011      	movs	r1, r2
 8000f24:	2203      	movs	r2, #3
 8000f26:	400a      	ands	r2, r1
 8000f28:	00d2      	lsls	r2, r2, #3
 8000f2a:	21ff      	movs	r1, #255	@ 0xff
 8000f2c:	4091      	lsls	r1, r2
 8000f2e:	000a      	movs	r2, r1
 8000f30:	43d2      	mvns	r2, r2
 8000f32:	401a      	ands	r2, r3
 8000f34:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	019b      	lsls	r3, r3, #6
 8000f3a:	22ff      	movs	r2, #255	@ 0xff
 8000f3c:	401a      	ands	r2, r3
 8000f3e:	1dfb      	adds	r3, r7, #7
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	0018      	movs	r0, r3
 8000f44:	2303      	movs	r3, #3
 8000f46:	4003      	ands	r3, r0
 8000f48:	00db      	lsls	r3, r3, #3
 8000f4a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f4c:	4809      	ldr	r0, [pc, #36]	@ (8000f74 <__NVIC_SetPriority+0xd8>)
 8000f4e:	1dfb      	adds	r3, r7, #7
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	001c      	movs	r4, r3
 8000f54:	230f      	movs	r3, #15
 8000f56:	4023      	ands	r3, r4
 8000f58:	3b08      	subs	r3, #8
 8000f5a:	089b      	lsrs	r3, r3, #2
 8000f5c:	430a      	orrs	r2, r1
 8000f5e:	3306      	adds	r3, #6
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	18c3      	adds	r3, r0, r3
 8000f64:	3304      	adds	r3, #4
 8000f66:	601a      	str	r2, [r3, #0]
}
 8000f68:	46c0      	nop			@ (mov r8, r8)
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	b003      	add	sp, #12
 8000f6e:	bd90      	pop	{r4, r7, pc}
 8000f70:	e000e100 	.word	0xe000e100
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	1e5a      	subs	r2, r3, #1
 8000f84:	2380      	movs	r3, #128	@ 0x80
 8000f86:	045b      	lsls	r3, r3, #17
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d301      	bcc.n	8000f90 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	e010      	b.n	8000fb2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f90:	4b0a      	ldr	r3, [pc, #40]	@ (8000fbc <SysTick_Config+0x44>)
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	3a01      	subs	r2, #1
 8000f96:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f98:	2301      	movs	r3, #1
 8000f9a:	425b      	negs	r3, r3
 8000f9c:	2103      	movs	r1, #3
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	f7ff ff7c 	bl	8000e9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa4:	4b05      	ldr	r3, [pc, #20]	@ (8000fbc <SysTick_Config+0x44>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000faa:	4b04      	ldr	r3, [pc, #16]	@ (8000fbc <SysTick_Config+0x44>)
 8000fac:	2207      	movs	r2, #7
 8000fae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	b002      	add	sp, #8
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	46c0      	nop			@ (mov r8, r8)
 8000fbc:	e000e010 	.word	0xe000e010

08000fc0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60b9      	str	r1, [r7, #8]
 8000fc8:	607a      	str	r2, [r7, #4]
 8000fca:	210f      	movs	r1, #15
 8000fcc:	187b      	adds	r3, r7, r1
 8000fce:	1c02      	adds	r2, r0, #0
 8000fd0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000fd2:	68ba      	ldr	r2, [r7, #8]
 8000fd4:	187b      	adds	r3, r7, r1
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	b25b      	sxtb	r3, r3
 8000fda:	0011      	movs	r1, r2
 8000fdc:	0018      	movs	r0, r3
 8000fde:	f7ff ff5d 	bl	8000e9c <__NVIC_SetPriority>
}
 8000fe2:	46c0      	nop			@ (mov r8, r8)
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	b004      	add	sp, #16
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b082      	sub	sp, #8
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	f7ff ffbf 	bl	8000f78 <SysTick_Config>
 8000ffa:	0003      	movs	r3, r0
}
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	46bd      	mov	sp, r7
 8001000:	b002      	add	sp, #8
 8001002:	bd80      	pop	{r7, pc}

08001004 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800100e:	2300      	movs	r3, #0
 8001010:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001012:	e14f      	b.n	80012b4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2101      	movs	r1, #1
 800101a:	697a      	ldr	r2, [r7, #20]
 800101c:	4091      	lsls	r1, r2
 800101e:	000a      	movs	r2, r1
 8001020:	4013      	ands	r3, r2
 8001022:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d100      	bne.n	800102c <HAL_GPIO_Init+0x28>
 800102a:	e140      	b.n	80012ae <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	2203      	movs	r2, #3
 8001032:	4013      	ands	r3, r2
 8001034:	2b01      	cmp	r3, #1
 8001036:	d005      	beq.n	8001044 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	2203      	movs	r2, #3
 800103e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001040:	2b02      	cmp	r3, #2
 8001042:	d130      	bne.n	80010a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	2203      	movs	r2, #3
 8001050:	409a      	lsls	r2, r3
 8001052:	0013      	movs	r3, r2
 8001054:	43da      	mvns	r2, r3
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	4013      	ands	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	68da      	ldr	r2, [r3, #12]
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	409a      	lsls	r2, r3
 8001066:	0013      	movs	r3, r2
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	4313      	orrs	r3, r2
 800106c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800107a:	2201      	movs	r2, #1
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	409a      	lsls	r2, r3
 8001080:	0013      	movs	r3, r2
 8001082:	43da      	mvns	r2, r3
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	4013      	ands	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	091b      	lsrs	r3, r3, #4
 8001090:	2201      	movs	r2, #1
 8001092:	401a      	ands	r2, r3
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	409a      	lsls	r2, r3
 8001098:	0013      	movs	r3, r2
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	4313      	orrs	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	2203      	movs	r2, #3
 80010ac:	4013      	ands	r3, r2
 80010ae:	2b03      	cmp	r3, #3
 80010b0:	d017      	beq.n	80010e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	68db      	ldr	r3, [r3, #12]
 80010b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	2203      	movs	r2, #3
 80010be:	409a      	lsls	r2, r3
 80010c0:	0013      	movs	r3, r2
 80010c2:	43da      	mvns	r2, r3
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	4013      	ands	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	689a      	ldr	r2, [r3, #8]
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	409a      	lsls	r2, r3
 80010d4:	0013      	movs	r3, r2
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	4313      	orrs	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	2203      	movs	r2, #3
 80010e8:	4013      	ands	r3, r2
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d123      	bne.n	8001136 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	08da      	lsrs	r2, r3, #3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	3208      	adds	r2, #8
 80010f6:	0092      	lsls	r2, r2, #2
 80010f8:	58d3      	ldr	r3, [r2, r3]
 80010fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	2207      	movs	r2, #7
 8001100:	4013      	ands	r3, r2
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	220f      	movs	r2, #15
 8001106:	409a      	lsls	r2, r3
 8001108:	0013      	movs	r3, r2
 800110a:	43da      	mvns	r2, r3
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	4013      	ands	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	691a      	ldr	r2, [r3, #16]
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	2107      	movs	r1, #7
 800111a:	400b      	ands	r3, r1
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	409a      	lsls	r2, r3
 8001120:	0013      	movs	r3, r2
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	4313      	orrs	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	08da      	lsrs	r2, r3, #3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	3208      	adds	r2, #8
 8001130:	0092      	lsls	r2, r2, #2
 8001132:	6939      	ldr	r1, [r7, #16]
 8001134:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	2203      	movs	r2, #3
 8001142:	409a      	lsls	r2, r3
 8001144:	0013      	movs	r3, r2
 8001146:	43da      	mvns	r2, r3
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	4013      	ands	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	2203      	movs	r2, #3
 8001154:	401a      	ands	r2, r3
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	409a      	lsls	r2, r3
 800115c:	0013      	movs	r3, r2
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4313      	orrs	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685a      	ldr	r2, [r3, #4]
 800116e:	23c0      	movs	r3, #192	@ 0xc0
 8001170:	029b      	lsls	r3, r3, #10
 8001172:	4013      	ands	r3, r2
 8001174:	d100      	bne.n	8001178 <HAL_GPIO_Init+0x174>
 8001176:	e09a      	b.n	80012ae <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001178:	4b54      	ldr	r3, [pc, #336]	@ (80012cc <HAL_GPIO_Init+0x2c8>)
 800117a:	699a      	ldr	r2, [r3, #24]
 800117c:	4b53      	ldr	r3, [pc, #332]	@ (80012cc <HAL_GPIO_Init+0x2c8>)
 800117e:	2101      	movs	r1, #1
 8001180:	430a      	orrs	r2, r1
 8001182:	619a      	str	r2, [r3, #24]
 8001184:	4b51      	ldr	r3, [pc, #324]	@ (80012cc <HAL_GPIO_Init+0x2c8>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	2201      	movs	r2, #1
 800118a:	4013      	ands	r3, r2
 800118c:	60bb      	str	r3, [r7, #8]
 800118e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001190:	4a4f      	ldr	r2, [pc, #316]	@ (80012d0 <HAL_GPIO_Init+0x2cc>)
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	089b      	lsrs	r3, r3, #2
 8001196:	3302      	adds	r3, #2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	589b      	ldr	r3, [r3, r2]
 800119c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	2203      	movs	r2, #3
 80011a2:	4013      	ands	r3, r2
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	220f      	movs	r2, #15
 80011a8:	409a      	lsls	r2, r3
 80011aa:	0013      	movs	r3, r2
 80011ac:	43da      	mvns	r2, r3
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	4013      	ands	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	2390      	movs	r3, #144	@ 0x90
 80011b8:	05db      	lsls	r3, r3, #23
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d013      	beq.n	80011e6 <HAL_GPIO_Init+0x1e2>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a44      	ldr	r2, [pc, #272]	@ (80012d4 <HAL_GPIO_Init+0x2d0>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d00d      	beq.n	80011e2 <HAL_GPIO_Init+0x1de>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a43      	ldr	r2, [pc, #268]	@ (80012d8 <HAL_GPIO_Init+0x2d4>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d007      	beq.n	80011de <HAL_GPIO_Init+0x1da>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a42      	ldr	r2, [pc, #264]	@ (80012dc <HAL_GPIO_Init+0x2d8>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d101      	bne.n	80011da <HAL_GPIO_Init+0x1d6>
 80011d6:	2303      	movs	r3, #3
 80011d8:	e006      	b.n	80011e8 <HAL_GPIO_Init+0x1e4>
 80011da:	2305      	movs	r3, #5
 80011dc:	e004      	b.n	80011e8 <HAL_GPIO_Init+0x1e4>
 80011de:	2302      	movs	r3, #2
 80011e0:	e002      	b.n	80011e8 <HAL_GPIO_Init+0x1e4>
 80011e2:	2301      	movs	r3, #1
 80011e4:	e000      	b.n	80011e8 <HAL_GPIO_Init+0x1e4>
 80011e6:	2300      	movs	r3, #0
 80011e8:	697a      	ldr	r2, [r7, #20]
 80011ea:	2103      	movs	r1, #3
 80011ec:	400a      	ands	r2, r1
 80011ee:	0092      	lsls	r2, r2, #2
 80011f0:	4093      	lsls	r3, r2
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011f8:	4935      	ldr	r1, [pc, #212]	@ (80012d0 <HAL_GPIO_Init+0x2cc>)
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	089b      	lsrs	r3, r3, #2
 80011fe:	3302      	adds	r3, #2
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001206:	4b36      	ldr	r3, [pc, #216]	@ (80012e0 <HAL_GPIO_Init+0x2dc>)
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	43da      	mvns	r2, r3
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	4013      	ands	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685a      	ldr	r2, [r3, #4]
 800121a:	2380      	movs	r3, #128	@ 0x80
 800121c:	035b      	lsls	r3, r3, #13
 800121e:	4013      	ands	r3, r2
 8001220:	d003      	beq.n	800122a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	4313      	orrs	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800122a:	4b2d      	ldr	r3, [pc, #180]	@ (80012e0 <HAL_GPIO_Init+0x2dc>)
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001230:	4b2b      	ldr	r3, [pc, #172]	@ (80012e0 <HAL_GPIO_Init+0x2dc>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	43da      	mvns	r2, r3
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	4013      	ands	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685a      	ldr	r2, [r3, #4]
 8001244:	2380      	movs	r3, #128	@ 0x80
 8001246:	039b      	lsls	r3, r3, #14
 8001248:	4013      	ands	r3, r2
 800124a:	d003      	beq.n	8001254 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	4313      	orrs	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001254:	4b22      	ldr	r3, [pc, #136]	@ (80012e0 <HAL_GPIO_Init+0x2dc>)
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800125a:	4b21      	ldr	r3, [pc, #132]	@ (80012e0 <HAL_GPIO_Init+0x2dc>)
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	43da      	mvns	r2, r3
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	4013      	ands	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685a      	ldr	r2, [r3, #4]
 800126e:	2380      	movs	r3, #128	@ 0x80
 8001270:	029b      	lsls	r3, r3, #10
 8001272:	4013      	ands	r3, r2
 8001274:	d003      	beq.n	800127e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	4313      	orrs	r3, r2
 800127c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800127e:	4b18      	ldr	r3, [pc, #96]	@ (80012e0 <HAL_GPIO_Init+0x2dc>)
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001284:	4b16      	ldr	r3, [pc, #88]	@ (80012e0 <HAL_GPIO_Init+0x2dc>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	43da      	mvns	r2, r3
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	4013      	ands	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685a      	ldr	r2, [r3, #4]
 8001298:	2380      	movs	r3, #128	@ 0x80
 800129a:	025b      	lsls	r3, r3, #9
 800129c:	4013      	ands	r3, r2
 800129e:	d003      	beq.n	80012a8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80012a8:	4b0d      	ldr	r3, [pc, #52]	@ (80012e0 <HAL_GPIO_Init+0x2dc>)
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	3301      	adds	r3, #1
 80012b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	40da      	lsrs	r2, r3
 80012bc:	1e13      	subs	r3, r2, #0
 80012be:	d000      	beq.n	80012c2 <HAL_GPIO_Init+0x2be>
 80012c0:	e6a8      	b.n	8001014 <HAL_GPIO_Init+0x10>
  } 
}
 80012c2:	46c0      	nop			@ (mov r8, r8)
 80012c4:	46c0      	nop			@ (mov r8, r8)
 80012c6:	46bd      	mov	sp, r7
 80012c8:	b006      	add	sp, #24
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40021000 	.word	0x40021000
 80012d0:	40010000 	.word	0x40010000
 80012d4:	48000400 	.word	0x48000400
 80012d8:	48000800 	.word	0x48000800
 80012dc:	48000c00 	.word	0x48000c00
 80012e0:	40010400 	.word	0x40010400

080012e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	0008      	movs	r0, r1
 80012ee:	0011      	movs	r1, r2
 80012f0:	1cbb      	adds	r3, r7, #2
 80012f2:	1c02      	adds	r2, r0, #0
 80012f4:	801a      	strh	r2, [r3, #0]
 80012f6:	1c7b      	adds	r3, r7, #1
 80012f8:	1c0a      	adds	r2, r1, #0
 80012fa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012fc:	1c7b      	adds	r3, r7, #1
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d004      	beq.n	800130e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001304:	1cbb      	adds	r3, r7, #2
 8001306:	881a      	ldrh	r2, [r3, #0]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800130c:	e003      	b.n	8001316 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800130e:	1cbb      	adds	r3, r7, #2
 8001310:	881a      	ldrh	r2, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001316:	46c0      	nop			@ (mov r8, r8)
 8001318:	46bd      	mov	sp, r7
 800131a:	b002      	add	sp, #8
 800131c:	bd80      	pop	{r7, pc}
	...

08001320 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b088      	sub	sp, #32
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d101      	bne.n	8001332 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e301      	b.n	8001936 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2201      	movs	r2, #1
 8001338:	4013      	ands	r3, r2
 800133a:	d100      	bne.n	800133e <HAL_RCC_OscConfig+0x1e>
 800133c:	e08d      	b.n	800145a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800133e:	4bc3      	ldr	r3, [pc, #780]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	220c      	movs	r2, #12
 8001344:	4013      	ands	r3, r2
 8001346:	2b04      	cmp	r3, #4
 8001348:	d00e      	beq.n	8001368 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800134a:	4bc0      	ldr	r3, [pc, #768]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	220c      	movs	r2, #12
 8001350:	4013      	ands	r3, r2
 8001352:	2b08      	cmp	r3, #8
 8001354:	d116      	bne.n	8001384 <HAL_RCC_OscConfig+0x64>
 8001356:	4bbd      	ldr	r3, [pc, #756]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 8001358:	685a      	ldr	r2, [r3, #4]
 800135a:	2380      	movs	r3, #128	@ 0x80
 800135c:	025b      	lsls	r3, r3, #9
 800135e:	401a      	ands	r2, r3
 8001360:	2380      	movs	r3, #128	@ 0x80
 8001362:	025b      	lsls	r3, r3, #9
 8001364:	429a      	cmp	r2, r3
 8001366:	d10d      	bne.n	8001384 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001368:	4bb8      	ldr	r3, [pc, #736]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	2380      	movs	r3, #128	@ 0x80
 800136e:	029b      	lsls	r3, r3, #10
 8001370:	4013      	ands	r3, r2
 8001372:	d100      	bne.n	8001376 <HAL_RCC_OscConfig+0x56>
 8001374:	e070      	b.n	8001458 <HAL_RCC_OscConfig+0x138>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d000      	beq.n	8001380 <HAL_RCC_OscConfig+0x60>
 800137e:	e06b      	b.n	8001458 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e2d8      	b.n	8001936 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d107      	bne.n	800139c <HAL_RCC_OscConfig+0x7c>
 800138c:	4baf      	ldr	r3, [pc, #700]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	4bae      	ldr	r3, [pc, #696]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 8001392:	2180      	movs	r1, #128	@ 0x80
 8001394:	0249      	lsls	r1, r1, #9
 8001396:	430a      	orrs	r2, r1
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	e02f      	b.n	80013fc <HAL_RCC_OscConfig+0xdc>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d10c      	bne.n	80013be <HAL_RCC_OscConfig+0x9e>
 80013a4:	4ba9      	ldr	r3, [pc, #676]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	4ba8      	ldr	r3, [pc, #672]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 80013aa:	49a9      	ldr	r1, [pc, #676]	@ (8001650 <HAL_RCC_OscConfig+0x330>)
 80013ac:	400a      	ands	r2, r1
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	4ba6      	ldr	r3, [pc, #664]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	4ba5      	ldr	r3, [pc, #660]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 80013b6:	49a7      	ldr	r1, [pc, #668]	@ (8001654 <HAL_RCC_OscConfig+0x334>)
 80013b8:	400a      	ands	r2, r1
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	e01e      	b.n	80013fc <HAL_RCC_OscConfig+0xdc>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	2b05      	cmp	r3, #5
 80013c4:	d10e      	bne.n	80013e4 <HAL_RCC_OscConfig+0xc4>
 80013c6:	4ba1      	ldr	r3, [pc, #644]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	4ba0      	ldr	r3, [pc, #640]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 80013cc:	2180      	movs	r1, #128	@ 0x80
 80013ce:	02c9      	lsls	r1, r1, #11
 80013d0:	430a      	orrs	r2, r1
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	4b9d      	ldr	r3, [pc, #628]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	4b9c      	ldr	r3, [pc, #624]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 80013da:	2180      	movs	r1, #128	@ 0x80
 80013dc:	0249      	lsls	r1, r1, #9
 80013de:	430a      	orrs	r2, r1
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	e00b      	b.n	80013fc <HAL_RCC_OscConfig+0xdc>
 80013e4:	4b99      	ldr	r3, [pc, #612]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	4b98      	ldr	r3, [pc, #608]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 80013ea:	4999      	ldr	r1, [pc, #612]	@ (8001650 <HAL_RCC_OscConfig+0x330>)
 80013ec:	400a      	ands	r2, r1
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	4b96      	ldr	r3, [pc, #600]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	4b95      	ldr	r3, [pc, #596]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 80013f6:	4997      	ldr	r1, [pc, #604]	@ (8001654 <HAL_RCC_OscConfig+0x334>)
 80013f8:	400a      	ands	r2, r1
 80013fa:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d014      	beq.n	800142e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001404:	f7ff face 	bl	80009a4 <HAL_GetTick>
 8001408:	0003      	movs	r3, r0
 800140a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800140c:	e008      	b.n	8001420 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800140e:	f7ff fac9 	bl	80009a4 <HAL_GetTick>
 8001412:	0002      	movs	r2, r0
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	2b64      	cmp	r3, #100	@ 0x64
 800141a:	d901      	bls.n	8001420 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e28a      	b.n	8001936 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001420:	4b8a      	ldr	r3, [pc, #552]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	2380      	movs	r3, #128	@ 0x80
 8001426:	029b      	lsls	r3, r3, #10
 8001428:	4013      	ands	r3, r2
 800142a:	d0f0      	beq.n	800140e <HAL_RCC_OscConfig+0xee>
 800142c:	e015      	b.n	800145a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800142e:	f7ff fab9 	bl	80009a4 <HAL_GetTick>
 8001432:	0003      	movs	r3, r0
 8001434:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001436:	e008      	b.n	800144a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001438:	f7ff fab4 	bl	80009a4 <HAL_GetTick>
 800143c:	0002      	movs	r2, r0
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b64      	cmp	r3, #100	@ 0x64
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e275      	b.n	8001936 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800144a:	4b80      	ldr	r3, [pc, #512]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	2380      	movs	r3, #128	@ 0x80
 8001450:	029b      	lsls	r3, r3, #10
 8001452:	4013      	ands	r3, r2
 8001454:	d1f0      	bne.n	8001438 <HAL_RCC_OscConfig+0x118>
 8001456:	e000      	b.n	800145a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001458:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2202      	movs	r2, #2
 8001460:	4013      	ands	r3, r2
 8001462:	d100      	bne.n	8001466 <HAL_RCC_OscConfig+0x146>
 8001464:	e069      	b.n	800153a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001466:	4b79      	ldr	r3, [pc, #484]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	220c      	movs	r2, #12
 800146c:	4013      	ands	r3, r2
 800146e:	d00b      	beq.n	8001488 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001470:	4b76      	ldr	r3, [pc, #472]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	220c      	movs	r2, #12
 8001476:	4013      	ands	r3, r2
 8001478:	2b08      	cmp	r3, #8
 800147a:	d11c      	bne.n	80014b6 <HAL_RCC_OscConfig+0x196>
 800147c:	4b73      	ldr	r3, [pc, #460]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 800147e:	685a      	ldr	r2, [r3, #4]
 8001480:	2380      	movs	r3, #128	@ 0x80
 8001482:	025b      	lsls	r3, r3, #9
 8001484:	4013      	ands	r3, r2
 8001486:	d116      	bne.n	80014b6 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001488:	4b70      	ldr	r3, [pc, #448]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2202      	movs	r2, #2
 800148e:	4013      	ands	r3, r2
 8001490:	d005      	beq.n	800149e <HAL_RCC_OscConfig+0x17e>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d001      	beq.n	800149e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e24b      	b.n	8001936 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800149e:	4b6b      	ldr	r3, [pc, #428]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	22f8      	movs	r2, #248	@ 0xf8
 80014a4:	4393      	bics	r3, r2
 80014a6:	0019      	movs	r1, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	691b      	ldr	r3, [r3, #16]
 80014ac:	00da      	lsls	r2, r3, #3
 80014ae:	4b67      	ldr	r3, [pc, #412]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 80014b0:	430a      	orrs	r2, r1
 80014b2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014b4:	e041      	b.n	800153a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d024      	beq.n	8001508 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014be:	4b63      	ldr	r3, [pc, #396]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	4b62      	ldr	r3, [pc, #392]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 80014c4:	2101      	movs	r1, #1
 80014c6:	430a      	orrs	r2, r1
 80014c8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ca:	f7ff fa6b 	bl	80009a4 <HAL_GetTick>
 80014ce:	0003      	movs	r3, r0
 80014d0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014d2:	e008      	b.n	80014e6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014d4:	f7ff fa66 	bl	80009a4 <HAL_GetTick>
 80014d8:	0002      	movs	r2, r0
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e227      	b.n	8001936 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014e6:	4b59      	ldr	r3, [pc, #356]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2202      	movs	r2, #2
 80014ec:	4013      	ands	r3, r2
 80014ee:	d0f1      	beq.n	80014d4 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f0:	4b56      	ldr	r3, [pc, #344]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	22f8      	movs	r2, #248	@ 0xf8
 80014f6:	4393      	bics	r3, r2
 80014f8:	0019      	movs	r1, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	691b      	ldr	r3, [r3, #16]
 80014fe:	00da      	lsls	r2, r3, #3
 8001500:	4b52      	ldr	r3, [pc, #328]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 8001502:	430a      	orrs	r2, r1
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	e018      	b.n	800153a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001508:	4b50      	ldr	r3, [pc, #320]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	4b4f      	ldr	r3, [pc, #316]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 800150e:	2101      	movs	r1, #1
 8001510:	438a      	bics	r2, r1
 8001512:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001514:	f7ff fa46 	bl	80009a4 <HAL_GetTick>
 8001518:	0003      	movs	r3, r0
 800151a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800151c:	e008      	b.n	8001530 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800151e:	f7ff fa41 	bl	80009a4 <HAL_GetTick>
 8001522:	0002      	movs	r2, r0
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d901      	bls.n	8001530 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e202      	b.n	8001936 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001530:	4b46      	ldr	r3, [pc, #280]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2202      	movs	r2, #2
 8001536:	4013      	ands	r3, r2
 8001538:	d1f1      	bne.n	800151e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2208      	movs	r2, #8
 8001540:	4013      	ands	r3, r2
 8001542:	d036      	beq.n	80015b2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	69db      	ldr	r3, [r3, #28]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d019      	beq.n	8001580 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800154c:	4b3f      	ldr	r3, [pc, #252]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 800154e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001550:	4b3e      	ldr	r3, [pc, #248]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 8001552:	2101      	movs	r1, #1
 8001554:	430a      	orrs	r2, r1
 8001556:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001558:	f7ff fa24 	bl	80009a4 <HAL_GetTick>
 800155c:	0003      	movs	r3, r0
 800155e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001560:	e008      	b.n	8001574 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001562:	f7ff fa1f 	bl	80009a4 <HAL_GetTick>
 8001566:	0002      	movs	r2, r0
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d901      	bls.n	8001574 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e1e0      	b.n	8001936 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001574:	4b35      	ldr	r3, [pc, #212]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 8001576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001578:	2202      	movs	r2, #2
 800157a:	4013      	ands	r3, r2
 800157c:	d0f1      	beq.n	8001562 <HAL_RCC_OscConfig+0x242>
 800157e:	e018      	b.n	80015b2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001580:	4b32      	ldr	r3, [pc, #200]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 8001582:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001584:	4b31      	ldr	r3, [pc, #196]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 8001586:	2101      	movs	r1, #1
 8001588:	438a      	bics	r2, r1
 800158a:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800158c:	f7ff fa0a 	bl	80009a4 <HAL_GetTick>
 8001590:	0003      	movs	r3, r0
 8001592:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001594:	e008      	b.n	80015a8 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001596:	f7ff fa05 	bl	80009a4 <HAL_GetTick>
 800159a:	0002      	movs	r2, r0
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e1c6      	b.n	8001936 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015a8:	4b28      	ldr	r3, [pc, #160]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 80015aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ac:	2202      	movs	r2, #2
 80015ae:	4013      	ands	r3, r2
 80015b0:	d1f1      	bne.n	8001596 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2204      	movs	r2, #4
 80015b8:	4013      	ands	r3, r2
 80015ba:	d100      	bne.n	80015be <HAL_RCC_OscConfig+0x29e>
 80015bc:	e0b4      	b.n	8001728 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015be:	201f      	movs	r0, #31
 80015c0:	183b      	adds	r3, r7, r0
 80015c2:	2200      	movs	r2, #0
 80015c4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015c6:	4b21      	ldr	r3, [pc, #132]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 80015c8:	69da      	ldr	r2, [r3, #28]
 80015ca:	2380      	movs	r3, #128	@ 0x80
 80015cc:	055b      	lsls	r3, r3, #21
 80015ce:	4013      	ands	r3, r2
 80015d0:	d110      	bne.n	80015f4 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015d2:	4b1e      	ldr	r3, [pc, #120]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 80015d4:	69da      	ldr	r2, [r3, #28]
 80015d6:	4b1d      	ldr	r3, [pc, #116]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 80015d8:	2180      	movs	r1, #128	@ 0x80
 80015da:	0549      	lsls	r1, r1, #21
 80015dc:	430a      	orrs	r2, r1
 80015de:	61da      	str	r2, [r3, #28]
 80015e0:	4b1a      	ldr	r3, [pc, #104]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 80015e2:	69da      	ldr	r2, [r3, #28]
 80015e4:	2380      	movs	r3, #128	@ 0x80
 80015e6:	055b      	lsls	r3, r3, #21
 80015e8:	4013      	ands	r3, r2
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80015ee:	183b      	adds	r3, r7, r0
 80015f0:	2201      	movs	r2, #1
 80015f2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f4:	4b18      	ldr	r3, [pc, #96]	@ (8001658 <HAL_RCC_OscConfig+0x338>)
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	2380      	movs	r3, #128	@ 0x80
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	4013      	ands	r3, r2
 80015fe:	d11a      	bne.n	8001636 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001600:	4b15      	ldr	r3, [pc, #84]	@ (8001658 <HAL_RCC_OscConfig+0x338>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	4b14      	ldr	r3, [pc, #80]	@ (8001658 <HAL_RCC_OscConfig+0x338>)
 8001606:	2180      	movs	r1, #128	@ 0x80
 8001608:	0049      	lsls	r1, r1, #1
 800160a:	430a      	orrs	r2, r1
 800160c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800160e:	f7ff f9c9 	bl	80009a4 <HAL_GetTick>
 8001612:	0003      	movs	r3, r0
 8001614:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001618:	f7ff f9c4 	bl	80009a4 <HAL_GetTick>
 800161c:	0002      	movs	r2, r0
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b64      	cmp	r3, #100	@ 0x64
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e185      	b.n	8001936 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800162a:	4b0b      	ldr	r3, [pc, #44]	@ (8001658 <HAL_RCC_OscConfig+0x338>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	2380      	movs	r3, #128	@ 0x80
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	4013      	ands	r3, r2
 8001634:	d0f0      	beq.n	8001618 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d10e      	bne.n	800165c <HAL_RCC_OscConfig+0x33c>
 800163e:	4b03      	ldr	r3, [pc, #12]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 8001640:	6a1a      	ldr	r2, [r3, #32]
 8001642:	4b02      	ldr	r3, [pc, #8]	@ (800164c <HAL_RCC_OscConfig+0x32c>)
 8001644:	2101      	movs	r1, #1
 8001646:	430a      	orrs	r2, r1
 8001648:	621a      	str	r2, [r3, #32]
 800164a:	e035      	b.n	80016b8 <HAL_RCC_OscConfig+0x398>
 800164c:	40021000 	.word	0x40021000
 8001650:	fffeffff 	.word	0xfffeffff
 8001654:	fffbffff 	.word	0xfffbffff
 8001658:	40007000 	.word	0x40007000
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d10c      	bne.n	800167e <HAL_RCC_OscConfig+0x35e>
 8001664:	4bb6      	ldr	r3, [pc, #728]	@ (8001940 <HAL_RCC_OscConfig+0x620>)
 8001666:	6a1a      	ldr	r2, [r3, #32]
 8001668:	4bb5      	ldr	r3, [pc, #724]	@ (8001940 <HAL_RCC_OscConfig+0x620>)
 800166a:	2101      	movs	r1, #1
 800166c:	438a      	bics	r2, r1
 800166e:	621a      	str	r2, [r3, #32]
 8001670:	4bb3      	ldr	r3, [pc, #716]	@ (8001940 <HAL_RCC_OscConfig+0x620>)
 8001672:	6a1a      	ldr	r2, [r3, #32]
 8001674:	4bb2      	ldr	r3, [pc, #712]	@ (8001940 <HAL_RCC_OscConfig+0x620>)
 8001676:	2104      	movs	r1, #4
 8001678:	438a      	bics	r2, r1
 800167a:	621a      	str	r2, [r3, #32]
 800167c:	e01c      	b.n	80016b8 <HAL_RCC_OscConfig+0x398>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	2b05      	cmp	r3, #5
 8001684:	d10c      	bne.n	80016a0 <HAL_RCC_OscConfig+0x380>
 8001686:	4bae      	ldr	r3, [pc, #696]	@ (8001940 <HAL_RCC_OscConfig+0x620>)
 8001688:	6a1a      	ldr	r2, [r3, #32]
 800168a:	4bad      	ldr	r3, [pc, #692]	@ (8001940 <HAL_RCC_OscConfig+0x620>)
 800168c:	2104      	movs	r1, #4
 800168e:	430a      	orrs	r2, r1
 8001690:	621a      	str	r2, [r3, #32]
 8001692:	4bab      	ldr	r3, [pc, #684]	@ (8001940 <HAL_RCC_OscConfig+0x620>)
 8001694:	6a1a      	ldr	r2, [r3, #32]
 8001696:	4baa      	ldr	r3, [pc, #680]	@ (8001940 <HAL_RCC_OscConfig+0x620>)
 8001698:	2101      	movs	r1, #1
 800169a:	430a      	orrs	r2, r1
 800169c:	621a      	str	r2, [r3, #32]
 800169e:	e00b      	b.n	80016b8 <HAL_RCC_OscConfig+0x398>
 80016a0:	4ba7      	ldr	r3, [pc, #668]	@ (8001940 <HAL_RCC_OscConfig+0x620>)
 80016a2:	6a1a      	ldr	r2, [r3, #32]
 80016a4:	4ba6      	ldr	r3, [pc, #664]	@ (8001940 <HAL_RCC_OscConfig+0x620>)
 80016a6:	2101      	movs	r1, #1
 80016a8:	438a      	bics	r2, r1
 80016aa:	621a      	str	r2, [r3, #32]
 80016ac:	4ba4      	ldr	r3, [pc, #656]	@ (8001940 <HAL_RCC_OscConfig+0x620>)
 80016ae:	6a1a      	ldr	r2, [r3, #32]
 80016b0:	4ba3      	ldr	r3, [pc, #652]	@ (8001940 <HAL_RCC_OscConfig+0x620>)
 80016b2:	2104      	movs	r1, #4
 80016b4:	438a      	bics	r2, r1
 80016b6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d014      	beq.n	80016ea <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c0:	f7ff f970 	bl	80009a4 <HAL_GetTick>
 80016c4:	0003      	movs	r3, r0
 80016c6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016c8:	e009      	b.n	80016de <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016ca:	f7ff f96b 	bl	80009a4 <HAL_GetTick>
 80016ce:	0002      	movs	r2, r0
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	4a9b      	ldr	r2, [pc, #620]	@ (8001944 <HAL_RCC_OscConfig+0x624>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e12b      	b.n	8001936 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016de:	4b98      	ldr	r3, [pc, #608]	@ (8001940 <HAL_RCC_OscConfig+0x620>)
 80016e0:	6a1b      	ldr	r3, [r3, #32]
 80016e2:	2202      	movs	r2, #2
 80016e4:	4013      	ands	r3, r2
 80016e6:	d0f0      	beq.n	80016ca <HAL_RCC_OscConfig+0x3aa>
 80016e8:	e013      	b.n	8001712 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ea:	f7ff f95b 	bl	80009a4 <HAL_GetTick>
 80016ee:	0003      	movs	r3, r0
 80016f0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016f2:	e009      	b.n	8001708 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016f4:	f7ff f956 	bl	80009a4 <HAL_GetTick>
 80016f8:	0002      	movs	r2, r0
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	4a91      	ldr	r2, [pc, #580]	@ (8001944 <HAL_RCC_OscConfig+0x624>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e116      	b.n	8001936 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001708:	4b8d      	ldr	r3, [pc, #564]	@ (8001940 <HAL_RCC_OscConfig+0x620>)
 800170a:	6a1b      	ldr	r3, [r3, #32]
 800170c:	2202      	movs	r2, #2
 800170e:	4013      	ands	r3, r2
 8001710:	d1f0      	bne.n	80016f4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001712:	231f      	movs	r3, #31
 8001714:	18fb      	adds	r3, r7, r3
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d105      	bne.n	8001728 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800171c:	4b88      	ldr	r3, [pc, #544]	@ (8001940 <HAL_RCC_OscConfig+0x620>)
 800171e:	69da      	ldr	r2, [r3, #28]
 8001720:	4b87      	ldr	r3, [pc, #540]	@ (8001940 <HAL_RCC_OscConfig+0x620>)
 8001722:	4989      	ldr	r1, [pc, #548]	@ (8001948 <HAL_RCC_OscConfig+0x628>)
 8001724:	400a      	ands	r2, r1
 8001726:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2210      	movs	r2, #16
 800172e:	4013      	ands	r3, r2
 8001730:	d063      	beq.n	80017fa <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	695b      	ldr	r3, [r3, #20]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d12a      	bne.n	8001790 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800173a:	4b81      	ldr	r3, [pc, #516]	@ (8001940 <HAL_RCC_OscConfig+0x620>)
 800173c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800173e:	4b80      	ldr	r3, [pc, #512]	@ (8001940 <HAL_RCC_OscConfig+0x620>)
 8001740:	2104      	movs	r1, #4
 8001742:	430a      	orrs	r2, r1
 8001744:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001746:	4b7e      	ldr	r3, [pc, #504]	@ (8001940 <HAL_RCC_OscConfig+0x620>)
 8001748:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800174a:	4b7d      	ldr	r3, [pc, #500]	@ (8001940 <HAL_RCC_OscConfig+0x620>)
 800174c:	2101      	movs	r1, #1
 800174e:	430a      	orrs	r2, r1
 8001750:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001752:	f7ff f927 	bl	80009a4 <HAL_GetTick>
 8001756:	0003      	movs	r3, r0
 8001758:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800175c:	f7ff f922 	bl	80009a4 <HAL_GetTick>
 8001760:	0002      	movs	r2, r0
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e0e3      	b.n	8001936 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800176e:	4b74      	ldr	r3, [pc, #464]	@ (8001940 <HAL_RCC_OscConfig+0x620>)
 8001770:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001772:	2202      	movs	r2, #2
 8001774:	4013      	ands	r3, r2
 8001776:	d0f1      	beq.n	800175c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001778:	4b71      	ldr	r3, [pc, #452]	@ (8001940 <HAL_RCC_OscConfig+0x620>)
 800177a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800177c:	22f8      	movs	r2, #248	@ 0xf8
 800177e:	4393      	bics	r3, r2
 8001780:	0019      	movs	r1, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	00da      	lsls	r2, r3, #3
 8001788:	4b6d      	ldr	r3, [pc, #436]	@ (8001940 <HAL_RCC_OscConfig+0x620>)
 800178a:	430a      	orrs	r2, r1
 800178c:	635a      	str	r2, [r3, #52]	@ 0x34
 800178e:	e034      	b.n	80017fa <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	695b      	ldr	r3, [r3, #20]
 8001794:	3305      	adds	r3, #5
 8001796:	d111      	bne.n	80017bc <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001798:	4b69      	ldr	r3, [pc, #420]	@ (8001940 <HAL_RCC_OscConfig+0x620>)
 800179a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800179c:	4b68      	ldr	r3, [pc, #416]	@ (8001940 <HAL_RCC_OscConfig+0x620>)
 800179e:	2104      	movs	r1, #4
 80017a0:	438a      	bics	r2, r1
 80017a2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80017a4:	4b66      	ldr	r3, [pc, #408]	@ (8001940 <HAL_RCC_OscConfig+0x620>)
 80017a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017a8:	22f8      	movs	r2, #248	@ 0xf8
 80017aa:	4393      	bics	r3, r2
 80017ac:	0019      	movs	r1, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	00da      	lsls	r2, r3, #3
 80017b4:	4b62      	ldr	r3, [pc, #392]	@ (8001940 <HAL_RCC_OscConfig+0x620>)
 80017b6:	430a      	orrs	r2, r1
 80017b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80017ba:	e01e      	b.n	80017fa <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80017bc:	4b60      	ldr	r3, [pc, #384]	@ (8001940 <HAL_RCC_OscConfig+0x620>)
 80017be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80017c0:	4b5f      	ldr	r3, [pc, #380]	@ (8001940 <HAL_RCC_OscConfig+0x620>)
 80017c2:	2104      	movs	r1, #4
 80017c4:	430a      	orrs	r2, r1
 80017c6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80017c8:	4b5d      	ldr	r3, [pc, #372]	@ (8001940 <HAL_RCC_OscConfig+0x620>)
 80017ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80017cc:	4b5c      	ldr	r3, [pc, #368]	@ (8001940 <HAL_RCC_OscConfig+0x620>)
 80017ce:	2101      	movs	r1, #1
 80017d0:	438a      	bics	r2, r1
 80017d2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d4:	f7ff f8e6 	bl	80009a4 <HAL_GetTick>
 80017d8:	0003      	movs	r3, r0
 80017da:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80017dc:	e008      	b.n	80017f0 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80017de:	f7ff f8e1 	bl	80009a4 <HAL_GetTick>
 80017e2:	0002      	movs	r2, r0
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d901      	bls.n	80017f0 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e0a2      	b.n	8001936 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80017f0:	4b53      	ldr	r3, [pc, #332]	@ (8001940 <HAL_RCC_OscConfig+0x620>)
 80017f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017f4:	2202      	movs	r2, #2
 80017f6:	4013      	ands	r3, r2
 80017f8:	d1f1      	bne.n	80017de <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a1b      	ldr	r3, [r3, #32]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d100      	bne.n	8001804 <HAL_RCC_OscConfig+0x4e4>
 8001802:	e097      	b.n	8001934 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001804:	4b4e      	ldr	r3, [pc, #312]	@ (8001940 <HAL_RCC_OscConfig+0x620>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	220c      	movs	r2, #12
 800180a:	4013      	ands	r3, r2
 800180c:	2b08      	cmp	r3, #8
 800180e:	d100      	bne.n	8001812 <HAL_RCC_OscConfig+0x4f2>
 8001810:	e06b      	b.n	80018ea <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a1b      	ldr	r3, [r3, #32]
 8001816:	2b02      	cmp	r3, #2
 8001818:	d14c      	bne.n	80018b4 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800181a:	4b49      	ldr	r3, [pc, #292]	@ (8001940 <HAL_RCC_OscConfig+0x620>)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	4b48      	ldr	r3, [pc, #288]	@ (8001940 <HAL_RCC_OscConfig+0x620>)
 8001820:	494a      	ldr	r1, [pc, #296]	@ (800194c <HAL_RCC_OscConfig+0x62c>)
 8001822:	400a      	ands	r2, r1
 8001824:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001826:	f7ff f8bd 	bl	80009a4 <HAL_GetTick>
 800182a:	0003      	movs	r3, r0
 800182c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001830:	f7ff f8b8 	bl	80009a4 <HAL_GetTick>
 8001834:	0002      	movs	r2, r0
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b02      	cmp	r3, #2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e079      	b.n	8001936 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001842:	4b3f      	ldr	r3, [pc, #252]	@ (8001940 <HAL_RCC_OscConfig+0x620>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	2380      	movs	r3, #128	@ 0x80
 8001848:	049b      	lsls	r3, r3, #18
 800184a:	4013      	ands	r3, r2
 800184c:	d1f0      	bne.n	8001830 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800184e:	4b3c      	ldr	r3, [pc, #240]	@ (8001940 <HAL_RCC_OscConfig+0x620>)
 8001850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001852:	220f      	movs	r2, #15
 8001854:	4393      	bics	r3, r2
 8001856:	0019      	movs	r1, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800185c:	4b38      	ldr	r3, [pc, #224]	@ (8001940 <HAL_RCC_OscConfig+0x620>)
 800185e:	430a      	orrs	r2, r1
 8001860:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001862:	4b37      	ldr	r3, [pc, #220]	@ (8001940 <HAL_RCC_OscConfig+0x620>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	4a3a      	ldr	r2, [pc, #232]	@ (8001950 <HAL_RCC_OscConfig+0x630>)
 8001868:	4013      	ands	r3, r2
 800186a:	0019      	movs	r1, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001874:	431a      	orrs	r2, r3
 8001876:	4b32      	ldr	r3, [pc, #200]	@ (8001940 <HAL_RCC_OscConfig+0x620>)
 8001878:	430a      	orrs	r2, r1
 800187a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800187c:	4b30      	ldr	r3, [pc, #192]	@ (8001940 <HAL_RCC_OscConfig+0x620>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	4b2f      	ldr	r3, [pc, #188]	@ (8001940 <HAL_RCC_OscConfig+0x620>)
 8001882:	2180      	movs	r1, #128	@ 0x80
 8001884:	0449      	lsls	r1, r1, #17
 8001886:	430a      	orrs	r2, r1
 8001888:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800188a:	f7ff f88b 	bl	80009a4 <HAL_GetTick>
 800188e:	0003      	movs	r3, r0
 8001890:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001894:	f7ff f886 	bl	80009a4 <HAL_GetTick>
 8001898:	0002      	movs	r2, r0
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e047      	b.n	8001936 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018a6:	4b26      	ldr	r3, [pc, #152]	@ (8001940 <HAL_RCC_OscConfig+0x620>)
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	2380      	movs	r3, #128	@ 0x80
 80018ac:	049b      	lsls	r3, r3, #18
 80018ae:	4013      	ands	r3, r2
 80018b0:	d0f0      	beq.n	8001894 <HAL_RCC_OscConfig+0x574>
 80018b2:	e03f      	b.n	8001934 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018b4:	4b22      	ldr	r3, [pc, #136]	@ (8001940 <HAL_RCC_OscConfig+0x620>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	4b21      	ldr	r3, [pc, #132]	@ (8001940 <HAL_RCC_OscConfig+0x620>)
 80018ba:	4924      	ldr	r1, [pc, #144]	@ (800194c <HAL_RCC_OscConfig+0x62c>)
 80018bc:	400a      	ands	r2, r1
 80018be:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c0:	f7ff f870 	bl	80009a4 <HAL_GetTick>
 80018c4:	0003      	movs	r3, r0
 80018c6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018c8:	e008      	b.n	80018dc <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018ca:	f7ff f86b 	bl	80009a4 <HAL_GetTick>
 80018ce:	0002      	movs	r2, r0
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e02c      	b.n	8001936 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018dc:	4b18      	ldr	r3, [pc, #96]	@ (8001940 <HAL_RCC_OscConfig+0x620>)
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	2380      	movs	r3, #128	@ 0x80
 80018e2:	049b      	lsls	r3, r3, #18
 80018e4:	4013      	ands	r3, r2
 80018e6:	d1f0      	bne.n	80018ca <HAL_RCC_OscConfig+0x5aa>
 80018e8:	e024      	b.n	8001934 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a1b      	ldr	r3, [r3, #32]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d101      	bne.n	80018f6 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e01f      	b.n	8001936 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80018f6:	4b12      	ldr	r3, [pc, #72]	@ (8001940 <HAL_RCC_OscConfig+0x620>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80018fc:	4b10      	ldr	r3, [pc, #64]	@ (8001940 <HAL_RCC_OscConfig+0x620>)
 80018fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001900:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001902:	697a      	ldr	r2, [r7, #20]
 8001904:	2380      	movs	r3, #128	@ 0x80
 8001906:	025b      	lsls	r3, r3, #9
 8001908:	401a      	ands	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800190e:	429a      	cmp	r2, r3
 8001910:	d10e      	bne.n	8001930 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	220f      	movs	r2, #15
 8001916:	401a      	ands	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800191c:	429a      	cmp	r2, r3
 800191e:	d107      	bne.n	8001930 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001920:	697a      	ldr	r2, [r7, #20]
 8001922:	23f0      	movs	r3, #240	@ 0xf0
 8001924:	039b      	lsls	r3, r3, #14
 8001926:	401a      	ands	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800192c:	429a      	cmp	r2, r3
 800192e:	d001      	beq.n	8001934 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e000      	b.n	8001936 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001934:	2300      	movs	r3, #0
}
 8001936:	0018      	movs	r0, r3
 8001938:	46bd      	mov	sp, r7
 800193a:	b008      	add	sp, #32
 800193c:	bd80      	pop	{r7, pc}
 800193e:	46c0      	nop			@ (mov r8, r8)
 8001940:	40021000 	.word	0x40021000
 8001944:	00001388 	.word	0x00001388
 8001948:	efffffff 	.word	0xefffffff
 800194c:	feffffff 	.word	0xfeffffff
 8001950:	ffc2ffff 	.word	0xffc2ffff

08001954 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d101      	bne.n	8001968 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e0b3      	b.n	8001ad0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001968:	4b5b      	ldr	r3, [pc, #364]	@ (8001ad8 <HAL_RCC_ClockConfig+0x184>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2201      	movs	r2, #1
 800196e:	4013      	ands	r3, r2
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	429a      	cmp	r2, r3
 8001974:	d911      	bls.n	800199a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001976:	4b58      	ldr	r3, [pc, #352]	@ (8001ad8 <HAL_RCC_ClockConfig+0x184>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2201      	movs	r2, #1
 800197c:	4393      	bics	r3, r2
 800197e:	0019      	movs	r1, r3
 8001980:	4b55      	ldr	r3, [pc, #340]	@ (8001ad8 <HAL_RCC_ClockConfig+0x184>)
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	430a      	orrs	r2, r1
 8001986:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001988:	4b53      	ldr	r3, [pc, #332]	@ (8001ad8 <HAL_RCC_ClockConfig+0x184>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2201      	movs	r2, #1
 800198e:	4013      	ands	r3, r2
 8001990:	683a      	ldr	r2, [r7, #0]
 8001992:	429a      	cmp	r2, r3
 8001994:	d001      	beq.n	800199a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e09a      	b.n	8001ad0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2202      	movs	r2, #2
 80019a0:	4013      	ands	r3, r2
 80019a2:	d015      	beq.n	80019d0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2204      	movs	r2, #4
 80019aa:	4013      	ands	r3, r2
 80019ac:	d006      	beq.n	80019bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80019ae:	4b4b      	ldr	r3, [pc, #300]	@ (8001adc <HAL_RCC_ClockConfig+0x188>)
 80019b0:	685a      	ldr	r2, [r3, #4]
 80019b2:	4b4a      	ldr	r3, [pc, #296]	@ (8001adc <HAL_RCC_ClockConfig+0x188>)
 80019b4:	21e0      	movs	r1, #224	@ 0xe0
 80019b6:	00c9      	lsls	r1, r1, #3
 80019b8:	430a      	orrs	r2, r1
 80019ba:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019bc:	4b47      	ldr	r3, [pc, #284]	@ (8001adc <HAL_RCC_ClockConfig+0x188>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	22f0      	movs	r2, #240	@ 0xf0
 80019c2:	4393      	bics	r3, r2
 80019c4:	0019      	movs	r1, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	689a      	ldr	r2, [r3, #8]
 80019ca:	4b44      	ldr	r3, [pc, #272]	@ (8001adc <HAL_RCC_ClockConfig+0x188>)
 80019cc:	430a      	orrs	r2, r1
 80019ce:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2201      	movs	r2, #1
 80019d6:	4013      	ands	r3, r2
 80019d8:	d040      	beq.n	8001a5c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d107      	bne.n	80019f2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019e2:	4b3e      	ldr	r3, [pc, #248]	@ (8001adc <HAL_RCC_ClockConfig+0x188>)
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	2380      	movs	r3, #128	@ 0x80
 80019e8:	029b      	lsls	r3, r3, #10
 80019ea:	4013      	ands	r3, r2
 80019ec:	d114      	bne.n	8001a18 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e06e      	b.n	8001ad0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d107      	bne.n	8001a0a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019fa:	4b38      	ldr	r3, [pc, #224]	@ (8001adc <HAL_RCC_ClockConfig+0x188>)
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	2380      	movs	r3, #128	@ 0x80
 8001a00:	049b      	lsls	r3, r3, #18
 8001a02:	4013      	ands	r3, r2
 8001a04:	d108      	bne.n	8001a18 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e062      	b.n	8001ad0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a0a:	4b34      	ldr	r3, [pc, #208]	@ (8001adc <HAL_RCC_ClockConfig+0x188>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2202      	movs	r2, #2
 8001a10:	4013      	ands	r3, r2
 8001a12:	d101      	bne.n	8001a18 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e05b      	b.n	8001ad0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a18:	4b30      	ldr	r3, [pc, #192]	@ (8001adc <HAL_RCC_ClockConfig+0x188>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	2203      	movs	r2, #3
 8001a1e:	4393      	bics	r3, r2
 8001a20:	0019      	movs	r1, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685a      	ldr	r2, [r3, #4]
 8001a26:	4b2d      	ldr	r3, [pc, #180]	@ (8001adc <HAL_RCC_ClockConfig+0x188>)
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a2c:	f7fe ffba 	bl	80009a4 <HAL_GetTick>
 8001a30:	0003      	movs	r3, r0
 8001a32:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a34:	e009      	b.n	8001a4a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a36:	f7fe ffb5 	bl	80009a4 <HAL_GetTick>
 8001a3a:	0002      	movs	r2, r0
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	4a27      	ldr	r2, [pc, #156]	@ (8001ae0 <HAL_RCC_ClockConfig+0x18c>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e042      	b.n	8001ad0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a4a:	4b24      	ldr	r3, [pc, #144]	@ (8001adc <HAL_RCC_ClockConfig+0x188>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	220c      	movs	r2, #12
 8001a50:	401a      	ands	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d1ec      	bne.n	8001a36 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a5c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ad8 <HAL_RCC_ClockConfig+0x184>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2201      	movs	r2, #1
 8001a62:	4013      	ands	r3, r2
 8001a64:	683a      	ldr	r2, [r7, #0]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d211      	bcs.n	8001a8e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a6a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ad8 <HAL_RCC_ClockConfig+0x184>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	4393      	bics	r3, r2
 8001a72:	0019      	movs	r1, r3
 8001a74:	4b18      	ldr	r3, [pc, #96]	@ (8001ad8 <HAL_RCC_ClockConfig+0x184>)
 8001a76:	683a      	ldr	r2, [r7, #0]
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a7c:	4b16      	ldr	r3, [pc, #88]	@ (8001ad8 <HAL_RCC_ClockConfig+0x184>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2201      	movs	r2, #1
 8001a82:	4013      	ands	r3, r2
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d001      	beq.n	8001a8e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e020      	b.n	8001ad0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2204      	movs	r2, #4
 8001a94:	4013      	ands	r3, r2
 8001a96:	d009      	beq.n	8001aac <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001a98:	4b10      	ldr	r3, [pc, #64]	@ (8001adc <HAL_RCC_ClockConfig+0x188>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	4a11      	ldr	r2, [pc, #68]	@ (8001ae4 <HAL_RCC_ClockConfig+0x190>)
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	0019      	movs	r1, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	68da      	ldr	r2, [r3, #12]
 8001aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8001adc <HAL_RCC_ClockConfig+0x188>)
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001aac:	f000 f820 	bl	8001af0 <HAL_RCC_GetSysClockFreq>
 8001ab0:	0001      	movs	r1, r0
 8001ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8001adc <HAL_RCC_ClockConfig+0x188>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	091b      	lsrs	r3, r3, #4
 8001ab8:	220f      	movs	r2, #15
 8001aba:	4013      	ands	r3, r2
 8001abc:	4a0a      	ldr	r2, [pc, #40]	@ (8001ae8 <HAL_RCC_ClockConfig+0x194>)
 8001abe:	5cd3      	ldrb	r3, [r2, r3]
 8001ac0:	000a      	movs	r2, r1
 8001ac2:	40da      	lsrs	r2, r3
 8001ac4:	4b09      	ldr	r3, [pc, #36]	@ (8001aec <HAL_RCC_ClockConfig+0x198>)
 8001ac6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001ac8:	2000      	movs	r0, #0
 8001aca:	f7fe ff25 	bl	8000918 <HAL_InitTick>
  
  return HAL_OK;
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	b004      	add	sp, #16
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40022000 	.word	0x40022000
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	00001388 	.word	0x00001388
 8001ae4:	fffff8ff 	.word	0xfffff8ff
 8001ae8:	08003660 	.word	0x08003660
 8001aec:	20000000 	.word	0x20000000

08001af0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001af6:	2300      	movs	r3, #0
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	2300      	movs	r3, #0
 8001afc:	60bb      	str	r3, [r7, #8]
 8001afe:	2300      	movs	r3, #0
 8001b00:	617b      	str	r3, [r7, #20]
 8001b02:	2300      	movs	r3, #0
 8001b04:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b06:	2300      	movs	r3, #0
 8001b08:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001b0a:	4b20      	ldr	r3, [pc, #128]	@ (8001b8c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	220c      	movs	r2, #12
 8001b14:	4013      	ands	r3, r2
 8001b16:	2b04      	cmp	r3, #4
 8001b18:	d002      	beq.n	8001b20 <HAL_RCC_GetSysClockFreq+0x30>
 8001b1a:	2b08      	cmp	r3, #8
 8001b1c:	d003      	beq.n	8001b26 <HAL_RCC_GetSysClockFreq+0x36>
 8001b1e:	e02c      	b.n	8001b7a <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b20:	4b1b      	ldr	r3, [pc, #108]	@ (8001b90 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b22:	613b      	str	r3, [r7, #16]
      break;
 8001b24:	e02c      	b.n	8001b80 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	0c9b      	lsrs	r3, r3, #18
 8001b2a:	220f      	movs	r2, #15
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	4a19      	ldr	r2, [pc, #100]	@ (8001b94 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b30:	5cd3      	ldrb	r3, [r2, r3]
 8001b32:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001b34:	4b15      	ldr	r3, [pc, #84]	@ (8001b8c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b38:	220f      	movs	r2, #15
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	4a16      	ldr	r2, [pc, #88]	@ (8001b98 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001b3e:	5cd3      	ldrb	r3, [r2, r3]
 8001b40:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001b42:	68fa      	ldr	r2, [r7, #12]
 8001b44:	2380      	movs	r3, #128	@ 0x80
 8001b46:	025b      	lsls	r3, r3, #9
 8001b48:	4013      	ands	r3, r2
 8001b4a:	d009      	beq.n	8001b60 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001b4c:	68b9      	ldr	r1, [r7, #8]
 8001b4e:	4810      	ldr	r0, [pc, #64]	@ (8001b90 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b50:	f7fe fae4 	bl	800011c <__udivsi3>
 8001b54:	0003      	movs	r3, r0
 8001b56:	001a      	movs	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	4353      	muls	r3, r2
 8001b5c:	617b      	str	r3, [r7, #20]
 8001b5e:	e009      	b.n	8001b74 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001b60:	6879      	ldr	r1, [r7, #4]
 8001b62:	000a      	movs	r2, r1
 8001b64:	0152      	lsls	r2, r2, #5
 8001b66:	1a52      	subs	r2, r2, r1
 8001b68:	0193      	lsls	r3, r2, #6
 8001b6a:	1a9b      	subs	r3, r3, r2
 8001b6c:	00db      	lsls	r3, r3, #3
 8001b6e:	185b      	adds	r3, r3, r1
 8001b70:	021b      	lsls	r3, r3, #8
 8001b72:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	613b      	str	r3, [r7, #16]
      break;
 8001b78:	e002      	b.n	8001b80 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b7a:	4b05      	ldr	r3, [pc, #20]	@ (8001b90 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b7c:	613b      	str	r3, [r7, #16]
      break;
 8001b7e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001b80:	693b      	ldr	r3, [r7, #16]
}
 8001b82:	0018      	movs	r0, r3
 8001b84:	46bd      	mov	sp, r7
 8001b86:	b006      	add	sp, #24
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	46c0      	nop			@ (mov r8, r8)
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	007a1200 	.word	0x007a1200
 8001b94:	08003678 	.word	0x08003678
 8001b98:	08003688 	.word	0x08003688

08001b9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ba0:	4b02      	ldr	r3, [pc, #8]	@ (8001bac <HAL_RCC_GetHCLKFreq+0x10>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
}
 8001ba4:	0018      	movs	r0, r3
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	46c0      	nop			@ (mov r8, r8)
 8001bac:	20000000 	.word	0x20000000

08001bb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001bb4:	f7ff fff2 	bl	8001b9c <HAL_RCC_GetHCLKFreq>
 8001bb8:	0001      	movs	r1, r0
 8001bba:	4b06      	ldr	r3, [pc, #24]	@ (8001bd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	0a1b      	lsrs	r3, r3, #8
 8001bc0:	2207      	movs	r2, #7
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	4a04      	ldr	r2, [pc, #16]	@ (8001bd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001bc6:	5cd3      	ldrb	r3, [r2, r3]
 8001bc8:	40d9      	lsrs	r1, r3
 8001bca:	000b      	movs	r3, r1
}    
 8001bcc:	0018      	movs	r0, r3
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	46c0      	nop			@ (mov r8, r8)
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	08003670 	.word	0x08003670

08001bdc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001be4:	2300      	movs	r3, #0
 8001be6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001be8:	2300      	movs	r3, #0
 8001bea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	2380      	movs	r3, #128	@ 0x80
 8001bf2:	025b      	lsls	r3, r3, #9
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	d100      	bne.n	8001bfa <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001bf8:	e08e      	b.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001bfa:	2017      	movs	r0, #23
 8001bfc:	183b      	adds	r3, r7, r0
 8001bfe:	2200      	movs	r2, #0
 8001c00:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c02:	4b5f      	ldr	r3, [pc, #380]	@ (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001c04:	69da      	ldr	r2, [r3, #28]
 8001c06:	2380      	movs	r3, #128	@ 0x80
 8001c08:	055b      	lsls	r3, r3, #21
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	d110      	bne.n	8001c30 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c0e:	4b5c      	ldr	r3, [pc, #368]	@ (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001c10:	69da      	ldr	r2, [r3, #28]
 8001c12:	4b5b      	ldr	r3, [pc, #364]	@ (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001c14:	2180      	movs	r1, #128	@ 0x80
 8001c16:	0549      	lsls	r1, r1, #21
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	61da      	str	r2, [r3, #28]
 8001c1c:	4b58      	ldr	r3, [pc, #352]	@ (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001c1e:	69da      	ldr	r2, [r3, #28]
 8001c20:	2380      	movs	r3, #128	@ 0x80
 8001c22:	055b      	lsls	r3, r3, #21
 8001c24:	4013      	ands	r3, r2
 8001c26:	60bb      	str	r3, [r7, #8]
 8001c28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c2a:	183b      	adds	r3, r7, r0
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c30:	4b54      	ldr	r3, [pc, #336]	@ (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	2380      	movs	r3, #128	@ 0x80
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	4013      	ands	r3, r2
 8001c3a:	d11a      	bne.n	8001c72 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c3c:	4b51      	ldr	r3, [pc, #324]	@ (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	4b50      	ldr	r3, [pc, #320]	@ (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001c42:	2180      	movs	r1, #128	@ 0x80
 8001c44:	0049      	lsls	r1, r1, #1
 8001c46:	430a      	orrs	r2, r1
 8001c48:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c4a:	f7fe feab 	bl	80009a4 <HAL_GetTick>
 8001c4e:	0003      	movs	r3, r0
 8001c50:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c52:	e008      	b.n	8001c66 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c54:	f7fe fea6 	bl	80009a4 <HAL_GetTick>
 8001c58:	0002      	movs	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b64      	cmp	r3, #100	@ 0x64
 8001c60:	d901      	bls.n	8001c66 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e087      	b.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c66:	4b47      	ldr	r3, [pc, #284]	@ (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	2380      	movs	r3, #128	@ 0x80
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	4013      	ands	r3, r2
 8001c70:	d0f0      	beq.n	8001c54 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c72:	4b43      	ldr	r3, [pc, #268]	@ (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001c74:	6a1a      	ldr	r2, [r3, #32]
 8001c76:	23c0      	movs	r3, #192	@ 0xc0
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d034      	beq.n	8001cee <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685a      	ldr	r2, [r3, #4]
 8001c88:	23c0      	movs	r3, #192	@ 0xc0
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d02c      	beq.n	8001cee <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c94:	4b3a      	ldr	r3, [pc, #232]	@ (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001c96:	6a1b      	ldr	r3, [r3, #32]
 8001c98:	4a3b      	ldr	r2, [pc, #236]	@ (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c9e:	4b38      	ldr	r3, [pc, #224]	@ (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001ca0:	6a1a      	ldr	r2, [r3, #32]
 8001ca2:	4b37      	ldr	r3, [pc, #220]	@ (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001ca4:	2180      	movs	r1, #128	@ 0x80
 8001ca6:	0249      	lsls	r1, r1, #9
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001cac:	4b34      	ldr	r3, [pc, #208]	@ (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001cae:	6a1a      	ldr	r2, [r3, #32]
 8001cb0:	4b33      	ldr	r3, [pc, #204]	@ (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001cb2:	4936      	ldr	r1, [pc, #216]	@ (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001cb4:	400a      	ands	r2, r1
 8001cb6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001cb8:	4b31      	ldr	r3, [pc, #196]	@ (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	d013      	beq.n	8001cee <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc6:	f7fe fe6d 	bl	80009a4 <HAL_GetTick>
 8001cca:	0003      	movs	r3, r0
 8001ccc:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cce:	e009      	b.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd0:	f7fe fe68 	bl	80009a4 <HAL_GetTick>
 8001cd4:	0002      	movs	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	4a2d      	ldr	r2, [pc, #180]	@ (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e048      	b.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ce4:	4b26      	ldr	r3, [pc, #152]	@ (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001ce6:	6a1b      	ldr	r3, [r3, #32]
 8001ce8:	2202      	movs	r2, #2
 8001cea:	4013      	ands	r3, r2
 8001cec:	d0f0      	beq.n	8001cd0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001cee:	4b24      	ldr	r3, [pc, #144]	@ (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001cf0:	6a1b      	ldr	r3, [r3, #32]
 8001cf2:	4a25      	ldr	r2, [pc, #148]	@ (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	0019      	movs	r1, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685a      	ldr	r2, [r3, #4]
 8001cfc:	4b20      	ldr	r3, [pc, #128]	@ (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d02:	2317      	movs	r3, #23
 8001d04:	18fb      	adds	r3, r7, r3
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d105      	bne.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d0c:	4b1c      	ldr	r3, [pc, #112]	@ (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d0e:	69da      	ldr	r2, [r3, #28]
 8001d10:	4b1b      	ldr	r3, [pc, #108]	@ (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d12:	4920      	ldr	r1, [pc, #128]	@ (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001d14:	400a      	ands	r2, r1
 8001d16:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	4013      	ands	r3, r2
 8001d20:	d009      	beq.n	8001d36 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d22:	4b17      	ldr	r3, [pc, #92]	@ (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d26:	2203      	movs	r2, #3
 8001d28:	4393      	bics	r3, r2
 8001d2a:	0019      	movs	r1, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	4b13      	ldr	r3, [pc, #76]	@ (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d32:	430a      	orrs	r2, r1
 8001d34:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2220      	movs	r2, #32
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	d009      	beq.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d40:	4b0f      	ldr	r3, [pc, #60]	@ (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d44:	2210      	movs	r2, #16
 8001d46:	4393      	bics	r3, r2
 8001d48:	0019      	movs	r1, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	68da      	ldr	r2, [r3, #12]
 8001d4e:	4b0c      	ldr	r3, [pc, #48]	@ (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d50:	430a      	orrs	r2, r1
 8001d52:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	2380      	movs	r3, #128	@ 0x80
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	d009      	beq.n	8001d74 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001d60:	4b07      	ldr	r3, [pc, #28]	@ (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d64:	2240      	movs	r2, #64	@ 0x40
 8001d66:	4393      	bics	r3, r2
 8001d68:	0019      	movs	r1, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	691a      	ldr	r2, [r3, #16]
 8001d6e:	4b04      	ldr	r3, [pc, #16]	@ (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d70:	430a      	orrs	r2, r1
 8001d72:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	0018      	movs	r0, r3
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	b006      	add	sp, #24
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	46c0      	nop			@ (mov r8, r8)
 8001d80:	40021000 	.word	0x40021000
 8001d84:	40007000 	.word	0x40007000
 8001d88:	fffffcff 	.word	0xfffffcff
 8001d8c:	fffeffff 	.word	0xfffeffff
 8001d90:	00001388 	.word	0x00001388
 8001d94:	efffffff 	.word	0xefffffff

08001d98 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001d98:	b5b0      	push	{r4, r5, r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001da0:	230f      	movs	r3, #15
 8001da2:	18fb      	adds	r3, r7, r3
 8001da4:	2201      	movs	r2, #1
 8001da6:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e081      	b.n	8001eb6 <HAL_RTC_Init+0x11e>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	7f5b      	ldrb	r3, [r3, #29]
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d106      	bne.n	8001dca <HAL_RTC_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	0018      	movs	r0, r3
 8001dc6:	f7fe fcaf 	bl	8000728 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2202      	movs	r2, #2
 8001dce:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	2210      	movs	r2, #16
 8001dd8:	4013      	ands	r3, r2
 8001dda:	2b10      	cmp	r3, #16
 8001ddc:	d05c      	beq.n	8001e98 <HAL_RTC_Init+0x100>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	22ca      	movs	r2, #202	@ 0xca
 8001de4:	625a      	str	r2, [r3, #36]	@ 0x24
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2253      	movs	r2, #83	@ 0x53
 8001dec:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8001dee:	250f      	movs	r5, #15
 8001df0:	197c      	adds	r4, r7, r5
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	0018      	movs	r0, r3
 8001df6:	f000 fa73 	bl	80022e0 <RTC_EnterInitMode>
 8001dfa:	0003      	movs	r3, r0
 8001dfc:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8001dfe:	0028      	movs	r0, r5
 8001e00:	183b      	adds	r3, r7, r0
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d12c      	bne.n	8001e62 <HAL_RTC_Init+0xca>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	689a      	ldr	r2, [r3, #8]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	492b      	ldr	r1, [pc, #172]	@ (8001ec0 <HAL_RTC_Init+0x128>)
 8001e14:	400a      	ands	r2, r1
 8001e16:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6899      	ldr	r1, [r3, #8]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685a      	ldr	r2, [r3, #4]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	431a      	orrs	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	695b      	ldr	r3, [r3, #20]
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	430a      	orrs	r2, r1
 8001e34:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	68d2      	ldr	r2, [r2, #12]
 8001e3e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	6919      	ldr	r1, [r3, #16]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	041a      	lsls	r2, r3, #16
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	430a      	orrs	r2, r1
 8001e52:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8001e54:	183c      	adds	r4, r7, r0
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	0018      	movs	r0, r3
 8001e5a:	f000 fa84 	bl	8002366 <RTC_ExitInitMode>
 8001e5e:	0003      	movs	r3, r0
 8001e60:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8001e62:	230f      	movs	r3, #15
 8001e64:	18fb      	adds	r3, r7, r3
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d110      	bne.n	8001e8e <HAL_RTC_Init+0xf6>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4913      	ldr	r1, [pc, #76]	@ (8001ec4 <HAL_RTC_Init+0x12c>)
 8001e78:	400a      	ands	r2, r1
 8001e7a:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	699a      	ldr	r2, [r3, #24]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	22ff      	movs	r2, #255	@ 0xff
 8001e94:	625a      	str	r2, [r3, #36]	@ 0x24
 8001e96:	e003      	b.n	8001ea0 <HAL_RTC_Init+0x108>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8001e98:	230f      	movs	r3, #15
 8001e9a:	18fb      	adds	r3, r7, r3
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8001ea0:	230f      	movs	r3, #15
 8001ea2:	18fb      	adds	r3, r7, r3
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d102      	bne.n	8001eb0 <HAL_RTC_Init+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2201      	movs	r2, #1
 8001eae:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8001eb0:	230f      	movs	r3, #15
 8001eb2:	18fb      	adds	r3, r7, r3
 8001eb4:	781b      	ldrb	r3, [r3, #0]
}
 8001eb6:	0018      	movs	r0, r3
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	b004      	add	sp, #16
 8001ebc:	bdb0      	pop	{r4, r5, r7, pc}
 8001ebe:	46c0      	nop			@ (mov r8, r8)
 8001ec0:	ff8fffbf 	.word	0xff8fffbf
 8001ec4:	fffbffff 	.word	0xfffbffff

08001ec8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001ec8:	b5b0      	push	{r4, r5, r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	7f1b      	ldrb	r3, [r3, #28]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d101      	bne.n	8001ee4 <HAL_RTC_SetTime+0x1c>
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	e08e      	b.n	8002002 <HAL_RTC_SetTime+0x13a>
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2202      	movs	r2, #2
 8001eee:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d125      	bne.n	8001f42 <HAL_RTC_SetTime+0x7a>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	2240      	movs	r2, #64	@ 0x40
 8001efe:	4013      	ands	r3, r2
 8001f00:	d102      	bne.n	8001f08 <HAL_RTC_SetTime+0x40>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	2200      	movs	r2, #0
 8001f06:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	f000 fa53 	bl	80023b8 <RTC_ByteToBcd2>
 8001f12:	0003      	movs	r3, r0
 8001f14:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	785b      	ldrb	r3, [r3, #1]
 8001f1a:	0018      	movs	r0, r3
 8001f1c:	f000 fa4c 	bl	80023b8 <RTC_ByteToBcd2>
 8001f20:	0003      	movs	r3, r0
 8001f22:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8001f24:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	789b      	ldrb	r3, [r3, #2]
 8001f2a:	0018      	movs	r0, r3
 8001f2c:	f000 fa44 	bl	80023b8 <RTC_ByteToBcd2>
 8001f30:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001f32:	0022      	movs	r2, r4
 8001f34:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	78db      	ldrb	r3, [r3, #3]
 8001f3a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	617b      	str	r3, [r7, #20]
 8001f40:	e017      	b.n	8001f72 <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	2240      	movs	r2, #64	@ 0x40
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	d102      	bne.n	8001f54 <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	2200      	movs	r2, #0
 8001f52:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	785b      	ldrb	r3, [r3, #1]
 8001f5e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8001f60:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8001f62:	68ba      	ldr	r2, [r7, #8]
 8001f64:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8001f66:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	78db      	ldrb	r3, [r3, #3]
 8001f6c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	22ca      	movs	r2, #202	@ 0xca
 8001f78:	625a      	str	r2, [r3, #36]	@ 0x24
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2253      	movs	r2, #83	@ 0x53
 8001f80:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8001f82:	2513      	movs	r5, #19
 8001f84:	197c      	adds	r4, r7, r5
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	0018      	movs	r0, r3
 8001f8a:	f000 f9a9 	bl	80022e0 <RTC_EnterInitMode>
 8001f8e:	0003      	movs	r3, r0
 8001f90:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8001f92:	0028      	movs	r0, r5
 8001f94:	183b      	adds	r3, r7, r0
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d120      	bne.n	8001fde <HAL_RTC_SetTime+0x116>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	697a      	ldr	r2, [r7, #20]
 8001fa2:	491a      	ldr	r1, [pc, #104]	@ (800200c <HAL_RTC_SetTime+0x144>)
 8001fa4:	400a      	ands	r2, r1
 8001fa6:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	689a      	ldr	r2, [r3, #8]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4917      	ldr	r1, [pc, #92]	@ (8002010 <HAL_RTC_SetTime+0x148>)
 8001fb4:	400a      	ands	r2, r1
 8001fb6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6899      	ldr	r1, [r3, #8]
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	68da      	ldr	r2, [r3, #12]
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8001fd0:	183c      	adds	r4, r7, r0
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	0018      	movs	r0, r3
 8001fd6:	f000 f9c6 	bl	8002366 <RTC_ExitInitMode>
 8001fda:	0003      	movs	r3, r0
 8001fdc:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8001fde:	2313      	movs	r3, #19
 8001fe0:	18fb      	adds	r3, r7, r3
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d102      	bne.n	8001fee <HAL_RTC_SetTime+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2201      	movs	r2, #1
 8001fec:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	22ff      	movs	r2, #255	@ 0xff
 8001ff4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	771a      	strb	r2, [r3, #28]

  return status;
 8001ffc:	2313      	movs	r3, #19
 8001ffe:	18fb      	adds	r3, r7, r3
 8002000:	781b      	ldrb	r3, [r3, #0]
}
 8002002:	0018      	movs	r0, r3
 8002004:	46bd      	mov	sp, r7
 8002006:	b006      	add	sp, #24
 8002008:	bdb0      	pop	{r4, r5, r7, pc}
 800200a:	46c0      	nop			@ (mov r8, r8)
 800200c:	007f7f7f 	.word	0x007f7f7f
 8002010:	fffbffff 	.word	0xfffbffff

08002014 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	045b      	lsls	r3, r3, #17
 8002036:	0c5a      	lsrs	r2, r3, #17
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a22      	ldr	r2, [pc, #136]	@ (80020cc <HAL_RTC_GetTime+0xb8>)
 8002044:	4013      	ands	r3, r2
 8002046:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	0c1b      	lsrs	r3, r3, #16
 800204c:	b2db      	uxtb	r3, r3
 800204e:	223f      	movs	r2, #63	@ 0x3f
 8002050:	4013      	ands	r3, r2
 8002052:	b2da      	uxtb	r2, r3
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	0a1b      	lsrs	r3, r3, #8
 800205c:	b2db      	uxtb	r3, r3
 800205e:	227f      	movs	r2, #127	@ 0x7f
 8002060:	4013      	ands	r3, r2
 8002062:	b2da      	uxtb	r2, r3
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	b2db      	uxtb	r3, r3
 800206c:	227f      	movs	r2, #127	@ 0x7f
 800206e:	4013      	ands	r3, r2
 8002070:	b2da      	uxtb	r2, r3
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	0d9b      	lsrs	r3, r3, #22
 800207a:	b2db      	uxtb	r3, r3
 800207c:	2201      	movs	r2, #1
 800207e:	4013      	ands	r3, r2
 8002080:	b2da      	uxtb	r2, r3
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d11a      	bne.n	80020c2 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	0018      	movs	r0, r3
 8002092:	f000 f9b2 	bl	80023fa <RTC_Bcd2ToByte>
 8002096:	0003      	movs	r3, r0
 8002098:	001a      	movs	r2, r3
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	785b      	ldrb	r3, [r3, #1]
 80020a2:	0018      	movs	r0, r3
 80020a4:	f000 f9a9 	bl	80023fa <RTC_Bcd2ToByte>
 80020a8:	0003      	movs	r3, r0
 80020aa:	001a      	movs	r2, r3
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	789b      	ldrb	r3, [r3, #2]
 80020b4:	0018      	movs	r0, r3
 80020b6:	f000 f9a0 	bl	80023fa <RTC_Bcd2ToByte>
 80020ba:	0003      	movs	r3, r0
 80020bc:	001a      	movs	r2, r3
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	0018      	movs	r0, r3
 80020c6:	46bd      	mov	sp, r7
 80020c8:	b006      	add	sp, #24
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	007f7f7f 	.word	0x007f7f7f

080020d0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80020d0:	b5b0      	push	{r4, r5, r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	7f1b      	ldrb	r3, [r3, #28]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d101      	bne.n	80020ec <HAL_RTC_SetDate+0x1c>
 80020e8:	2302      	movs	r3, #2
 80020ea:	e07a      	b.n	80021e2 <HAL_RTC_SetDate+0x112>
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2201      	movs	r2, #1
 80020f0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2202      	movs	r2, #2
 80020f6:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d10e      	bne.n	800211c <HAL_RTC_SetDate+0x4c>
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	785b      	ldrb	r3, [r3, #1]
 8002102:	001a      	movs	r2, r3
 8002104:	2310      	movs	r3, #16
 8002106:	4013      	ands	r3, r2
 8002108:	d008      	beq.n	800211c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	785b      	ldrb	r3, [r3, #1]
 800210e:	2210      	movs	r2, #16
 8002110:	4393      	bics	r3, r2
 8002112:	b2db      	uxtb	r3, r3
 8002114:	330a      	adds	r3, #10
 8002116:	b2da      	uxtb	r2, r3
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d11c      	bne.n	800215c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	78db      	ldrb	r3, [r3, #3]
 8002126:	0018      	movs	r0, r3
 8002128:	f000 f946 	bl	80023b8 <RTC_ByteToBcd2>
 800212c:	0003      	movs	r3, r0
 800212e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	785b      	ldrb	r3, [r3, #1]
 8002134:	0018      	movs	r0, r3
 8002136:	f000 f93f 	bl	80023b8 <RTC_ByteToBcd2>
 800213a:	0003      	movs	r3, r0
 800213c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800213e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	789b      	ldrb	r3, [r3, #2]
 8002144:	0018      	movs	r0, r3
 8002146:	f000 f937 	bl	80023b8 <RTC_ByteToBcd2>
 800214a:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800214c:	0022      	movs	r2, r4
 800214e:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002156:	4313      	orrs	r3, r2
 8002158:	617b      	str	r3, [r7, #20]
 800215a:	e00e      	b.n	800217a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	78db      	ldrb	r3, [r3, #3]
 8002160:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	785b      	ldrb	r3, [r3, #1]
 8002166:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002168:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800216a:	68ba      	ldr	r2, [r7, #8]
 800216c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800216e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002176:	4313      	orrs	r3, r2
 8002178:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	22ca      	movs	r2, #202	@ 0xca
 8002180:	625a      	str	r2, [r3, #36]	@ 0x24
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2253      	movs	r2, #83	@ 0x53
 8002188:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800218a:	2513      	movs	r5, #19
 800218c:	197c      	adds	r4, r7, r5
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	0018      	movs	r0, r3
 8002192:	f000 f8a5 	bl	80022e0 <RTC_EnterInitMode>
 8002196:	0003      	movs	r3, r0
 8002198:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 800219a:	0028      	movs	r0, r5
 800219c:	183b      	adds	r3, r7, r0
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d10c      	bne.n	80021be <HAL_RTC_SetDate+0xee>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	697a      	ldr	r2, [r7, #20]
 80021aa:	4910      	ldr	r1, [pc, #64]	@ (80021ec <HAL_RTC_SetDate+0x11c>)
 80021ac:	400a      	ands	r2, r1
 80021ae:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80021b0:	183c      	adds	r4, r7, r0
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	0018      	movs	r0, r3
 80021b6:	f000 f8d6 	bl	8002366 <RTC_ExitInitMode>
 80021ba:	0003      	movs	r3, r0
 80021bc:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 80021be:	2313      	movs	r3, #19
 80021c0:	18fb      	adds	r3, r7, r3
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d102      	bne.n	80021ce <HAL_RTC_SetDate+0xfe>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2201      	movs	r2, #1
 80021cc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	22ff      	movs	r2, #255	@ 0xff
 80021d4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2200      	movs	r2, #0
 80021da:	771a      	strb	r2, [r3, #28]

  return status;
 80021dc:	2313      	movs	r3, #19
 80021de:	18fb      	adds	r3, r7, r3
 80021e0:	781b      	ldrb	r3, [r3, #0]
}
 80021e2:	0018      	movs	r0, r3
 80021e4:	46bd      	mov	sp, r7
 80021e6:	b006      	add	sp, #24
 80021e8:	bdb0      	pop	{r4, r5, r7, pc}
 80021ea:	46c0      	nop			@ (mov r8, r8)
 80021ec:	00ffff3f 	.word	0x00ffff3f

080021f0 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80021fc:	2300      	movs	r3, #0
 80021fe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	4a21      	ldr	r2, [pc, #132]	@ (800228c <HAL_RTC_GetDate+0x9c>)
 8002208:	4013      	ands	r3, r2
 800220a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	0c1b      	lsrs	r3, r3, #16
 8002210:	b2da      	uxtb	r2, r3
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	0a1b      	lsrs	r3, r3, #8
 800221a:	b2db      	uxtb	r3, r3
 800221c:	221f      	movs	r2, #31
 800221e:	4013      	ands	r3, r2
 8002220:	b2da      	uxtb	r2, r3
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	b2db      	uxtb	r3, r3
 800222a:	223f      	movs	r2, #63	@ 0x3f
 800222c:	4013      	ands	r3, r2
 800222e:	b2da      	uxtb	r2, r3
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	0b5b      	lsrs	r3, r3, #13
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2207      	movs	r2, #7
 800223c:	4013      	ands	r3, r2
 800223e:	b2da      	uxtb	r2, r3
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d11a      	bne.n	8002280 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	78db      	ldrb	r3, [r3, #3]
 800224e:	0018      	movs	r0, r3
 8002250:	f000 f8d3 	bl	80023fa <RTC_Bcd2ToByte>
 8002254:	0003      	movs	r3, r0
 8002256:	001a      	movs	r2, r3
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	785b      	ldrb	r3, [r3, #1]
 8002260:	0018      	movs	r0, r3
 8002262:	f000 f8ca 	bl	80023fa <RTC_Bcd2ToByte>
 8002266:	0003      	movs	r3, r0
 8002268:	001a      	movs	r2, r3
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	789b      	ldrb	r3, [r3, #2]
 8002272:	0018      	movs	r0, r3
 8002274:	f000 f8c1 	bl	80023fa <RTC_Bcd2ToByte>
 8002278:	0003      	movs	r3, r0
 800227a:	001a      	movs	r2, r3
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	0018      	movs	r0, r3
 8002284:	46bd      	mov	sp, r7
 8002286:	b006      	add	sp, #24
 8002288:	bd80      	pop	{r7, pc}
 800228a:	46c0      	nop			@ (mov r8, r8)
 800228c:	00ffff3f 	.word	0x00ffff3f

08002290 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002298:	2300      	movs	r3, #0
 800229a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a0e      	ldr	r2, [pc, #56]	@ (80022dc <HAL_RTC_WaitForSynchro+0x4c>)
 80022a2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022a4:	f7fe fb7e 	bl	80009a4 <HAL_GetTick>
 80022a8:	0003      	movs	r3, r0
 80022aa:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80022ac:	e00a      	b.n	80022c4 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80022ae:	f7fe fb79 	bl	80009a4 <HAL_GetTick>
 80022b2:	0002      	movs	r2, r0
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	1ad2      	subs	r2, r2, r3
 80022b8:	23fa      	movs	r3, #250	@ 0xfa
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	429a      	cmp	r2, r3
 80022be:	d901      	bls.n	80022c4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e006      	b.n	80022d2 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	2220      	movs	r2, #32
 80022cc:	4013      	ands	r3, r2
 80022ce:	d0ee      	beq.n	80022ae <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	0018      	movs	r0, r3
 80022d4:	46bd      	mov	sp, r7
 80022d6:	b004      	add	sp, #16
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	46c0      	nop			@ (mov r8, r8)
 80022dc:	00017959 	.word	0x00017959

080022e0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022e8:	2300      	movs	r3, #0
 80022ea:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80022ec:	230f      	movs	r3, #15
 80022ee:	18fb      	adds	r3, r7, r3
 80022f0:	2200      	movs	r2, #0
 80022f2:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	2240      	movs	r2, #64	@ 0x40
 80022fc:	4013      	ands	r3, r2
 80022fe:	d12b      	bne.n	8002358 <RTC_EnterInitMode+0x78>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68da      	ldr	r2, [r3, #12]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2180      	movs	r1, #128	@ 0x80
 800230c:	430a      	orrs	r2, r1
 800230e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002310:	f7fe fb48 	bl	80009a4 <HAL_GetTick>
 8002314:	0003      	movs	r3, r0
 8002316:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002318:	e013      	b.n	8002342 <RTC_EnterInitMode+0x62>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800231a:	f7fe fb43 	bl	80009a4 <HAL_GetTick>
 800231e:	0002      	movs	r2, r0
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	1ad2      	subs	r2, r2, r3
 8002324:	200f      	movs	r0, #15
 8002326:	183b      	adds	r3, r7, r0
 8002328:	1839      	adds	r1, r7, r0
 800232a:	7809      	ldrb	r1, [r1, #0]
 800232c:	7019      	strb	r1, [r3, #0]
 800232e:	23fa      	movs	r3, #250	@ 0xfa
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	429a      	cmp	r2, r3
 8002334:	d905      	bls.n	8002342 <RTC_EnterInitMode+0x62>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2204      	movs	r2, #4
 800233a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800233c:	183b      	adds	r3, r7, r0
 800233e:	2201      	movs	r2, #1
 8002340:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	2240      	movs	r2, #64	@ 0x40
 800234a:	4013      	ands	r3, r2
 800234c:	d104      	bne.n	8002358 <RTC_EnterInitMode+0x78>
 800234e:	230f      	movs	r3, #15
 8002350:	18fb      	adds	r3, r7, r3
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d1e0      	bne.n	800231a <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8002358:	230f      	movs	r3, #15
 800235a:	18fb      	adds	r3, r7, r3
 800235c:	781b      	ldrb	r3, [r3, #0]
}
 800235e:	0018      	movs	r0, r3
 8002360:	46bd      	mov	sp, r7
 8002362:	b004      	add	sp, #16
 8002364:	bd80      	pop	{r7, pc}

08002366 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002366:	b590      	push	{r4, r7, lr}
 8002368:	b085      	sub	sp, #20
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800236e:	240f      	movs	r4, #15
 8002370:	193b      	adds	r3, r7, r4
 8002372:	2200      	movs	r2, #0
 8002374:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68da      	ldr	r2, [r3, #12]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2180      	movs	r1, #128	@ 0x80
 8002382:	438a      	bics	r2, r1
 8002384:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	2220      	movs	r2, #32
 800238e:	4013      	ands	r3, r2
 8002390:	d10b      	bne.n	80023aa <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	0018      	movs	r0, r3
 8002396:	f7ff ff7b 	bl	8002290 <HAL_RTC_WaitForSynchro>
 800239a:	1e03      	subs	r3, r0, #0
 800239c:	d005      	beq.n	80023aa <RTC_ExitInitMode+0x44>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2204      	movs	r2, #4
 80023a2:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80023a4:	193b      	adds	r3, r7, r4
 80023a6:	2201      	movs	r2, #1
 80023a8:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80023aa:	230f      	movs	r3, #15
 80023ac:	18fb      	adds	r3, r7, r3
 80023ae:	781b      	ldrb	r3, [r3, #0]
}
 80023b0:	0018      	movs	r0, r3
 80023b2:	46bd      	mov	sp, r7
 80023b4:	b005      	add	sp, #20
 80023b6:	bd90      	pop	{r4, r7, pc}

080023b8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	0002      	movs	r2, r0
 80023c0:	1dfb      	adds	r3, r7, #7
 80023c2:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80023c4:	2300      	movs	r3, #0
 80023c6:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80023c8:	e007      	b.n	80023da <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	3301      	adds	r3, #1
 80023ce:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80023d0:	1dfb      	adds	r3, r7, #7
 80023d2:	1dfa      	adds	r2, r7, #7
 80023d4:	7812      	ldrb	r2, [r2, #0]
 80023d6:	3a0a      	subs	r2, #10
 80023d8:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 80023da:	1dfb      	adds	r3, r7, #7
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	2b09      	cmp	r3, #9
 80023e0:	d8f3      	bhi.n	80023ca <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	011b      	lsls	r3, r3, #4
 80023e8:	b2da      	uxtb	r2, r3
 80023ea:	1dfb      	adds	r3, r7, #7
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	b2db      	uxtb	r3, r3
}
 80023f2:	0018      	movs	r0, r3
 80023f4:	46bd      	mov	sp, r7
 80023f6:	b004      	add	sp, #16
 80023f8:	bd80      	pop	{r7, pc}

080023fa <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b084      	sub	sp, #16
 80023fe:	af00      	add	r7, sp, #0
 8002400:	0002      	movs	r2, r0
 8002402:	1dfb      	adds	r3, r7, #7
 8002404:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8002406:	2300      	movs	r3, #0
 8002408:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800240a:	1dfb      	adds	r3, r7, #7
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	091b      	lsrs	r3, r3, #4
 8002410:	b2db      	uxtb	r3, r3
 8002412:	001a      	movs	r2, r3
 8002414:	0013      	movs	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	189b      	adds	r3, r3, r2
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	b2da      	uxtb	r2, r3
 8002422:	1dfb      	adds	r3, r7, #7
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	210f      	movs	r1, #15
 8002428:	400b      	ands	r3, r1
 800242a:	b2db      	uxtb	r3, r3
 800242c:	18d3      	adds	r3, r2, r3
 800242e:	b2db      	uxtb	r3, r3
}
 8002430:	0018      	movs	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	b004      	add	sp, #16
 8002436:	bd80      	pop	{r7, pc}

08002438 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e044      	b.n	80024d4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800244e:	2b00      	cmp	r3, #0
 8002450:	d107      	bne.n	8002462 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2278      	movs	r2, #120	@ 0x78
 8002456:	2100      	movs	r1, #0
 8002458:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	0018      	movs	r0, r3
 800245e:	f7fe f97b 	bl	8000758 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2224      	movs	r2, #36	@ 0x24
 8002466:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2101      	movs	r1, #1
 8002474:	438a      	bics	r2, r1
 8002476:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	0018      	movs	r0, r3
 800247c:	f000 f8d0 	bl	8002620 <UART_SetConfig>
 8002480:	0003      	movs	r3, r0
 8002482:	2b01      	cmp	r3, #1
 8002484:	d101      	bne.n	800248a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e024      	b.n	80024d4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800248e:	2b00      	cmp	r3, #0
 8002490:	d003      	beq.n	800249a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	0018      	movs	r0, r3
 8002496:	f000 fa03 	bl	80028a0 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	685a      	ldr	r2, [r3, #4]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	490d      	ldr	r1, [pc, #52]	@ (80024dc <HAL_UART_Init+0xa4>)
 80024a6:	400a      	ands	r2, r1
 80024a8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	689a      	ldr	r2, [r3, #8]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	212a      	movs	r1, #42	@ 0x2a
 80024b6:	438a      	bics	r2, r1
 80024b8:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2101      	movs	r1, #1
 80024c6:	430a      	orrs	r2, r1
 80024c8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	0018      	movs	r0, r3
 80024ce:	f000 fa9b 	bl	8002a08 <UART_CheckIdleState>
 80024d2:	0003      	movs	r3, r0
}
 80024d4:	0018      	movs	r0, r3
 80024d6:	46bd      	mov	sp, r7
 80024d8:	b002      	add	sp, #8
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	ffffb7ff 	.word	0xffffb7ff

080024e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b08a      	sub	sp, #40	@ 0x28
 80024e4:	af02      	add	r7, sp, #8
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	603b      	str	r3, [r7, #0]
 80024ec:	1dbb      	adds	r3, r7, #6
 80024ee:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80024f4:	2b20      	cmp	r3, #32
 80024f6:	d000      	beq.n	80024fa <HAL_UART_Transmit+0x1a>
 80024f8:	e08c      	b.n	8002614 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d003      	beq.n	8002508 <HAL_UART_Transmit+0x28>
 8002500:	1dbb      	adds	r3, r7, #6
 8002502:	881b      	ldrh	r3, [r3, #0]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d101      	bne.n	800250c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e084      	b.n	8002616 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	2380      	movs	r3, #128	@ 0x80
 8002512:	015b      	lsls	r3, r3, #5
 8002514:	429a      	cmp	r2, r3
 8002516:	d109      	bne.n	800252c <HAL_UART_Transmit+0x4c>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d105      	bne.n	800252c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	2201      	movs	r2, #1
 8002524:	4013      	ands	r3, r2
 8002526:	d001      	beq.n	800252c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e074      	b.n	8002616 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2284      	movs	r2, #132	@ 0x84
 8002530:	2100      	movs	r1, #0
 8002532:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2221      	movs	r2, #33	@ 0x21
 8002538:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800253a:	f7fe fa33 	bl	80009a4 <HAL_GetTick>
 800253e:	0003      	movs	r3, r0
 8002540:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	1dba      	adds	r2, r7, #6
 8002546:	2150      	movs	r1, #80	@ 0x50
 8002548:	8812      	ldrh	r2, [r2, #0]
 800254a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	1dba      	adds	r2, r7, #6
 8002550:	2152      	movs	r1, #82	@ 0x52
 8002552:	8812      	ldrh	r2, [r2, #0]
 8002554:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	689a      	ldr	r2, [r3, #8]
 800255a:	2380      	movs	r3, #128	@ 0x80
 800255c:	015b      	lsls	r3, r3, #5
 800255e:	429a      	cmp	r2, r3
 8002560:	d108      	bne.n	8002574 <HAL_UART_Transmit+0x94>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d104      	bne.n	8002574 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800256a:	2300      	movs	r3, #0
 800256c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	61bb      	str	r3, [r7, #24]
 8002572:	e003      	b.n	800257c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002578:	2300      	movs	r3, #0
 800257a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800257c:	e02f      	b.n	80025de <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	68f8      	ldr	r0, [r7, #12]
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	9300      	str	r3, [sp, #0]
 8002586:	0013      	movs	r3, r2
 8002588:	2200      	movs	r2, #0
 800258a:	2180      	movs	r1, #128	@ 0x80
 800258c:	f000 fae4 	bl	8002b58 <UART_WaitOnFlagUntilTimeout>
 8002590:	1e03      	subs	r3, r0, #0
 8002592:	d004      	beq.n	800259e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2220      	movs	r2, #32
 8002598:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e03b      	b.n	8002616 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d10b      	bne.n	80025bc <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	881a      	ldrh	r2, [r3, #0]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	05d2      	lsls	r2, r2, #23
 80025ae:	0dd2      	lsrs	r2, r2, #23
 80025b0:	b292      	uxth	r2, r2
 80025b2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	3302      	adds	r3, #2
 80025b8:	61bb      	str	r3, [r7, #24]
 80025ba:	e007      	b.n	80025cc <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	781a      	ldrb	r2, [r3, #0]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	3301      	adds	r3, #1
 80025ca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2252      	movs	r2, #82	@ 0x52
 80025d0:	5a9b      	ldrh	r3, [r3, r2]
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	3b01      	subs	r3, #1
 80025d6:	b299      	uxth	r1, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2252      	movs	r2, #82	@ 0x52
 80025dc:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2252      	movs	r2, #82	@ 0x52
 80025e2:	5a9b      	ldrh	r3, [r3, r2]
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1c9      	bne.n	800257e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025ea:	697a      	ldr	r2, [r7, #20]
 80025ec:	68f8      	ldr	r0, [r7, #12]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	0013      	movs	r3, r2
 80025f4:	2200      	movs	r2, #0
 80025f6:	2140      	movs	r1, #64	@ 0x40
 80025f8:	f000 faae 	bl	8002b58 <UART_WaitOnFlagUntilTimeout>
 80025fc:	1e03      	subs	r3, r0, #0
 80025fe:	d004      	beq.n	800260a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2220      	movs	r2, #32
 8002604:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e005      	b.n	8002616 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2220      	movs	r2, #32
 800260e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002610:	2300      	movs	r3, #0
 8002612:	e000      	b.n	8002616 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002614:	2302      	movs	r3, #2
  }
}
 8002616:	0018      	movs	r0, r3
 8002618:	46bd      	mov	sp, r7
 800261a:	b008      	add	sp, #32
 800261c:	bd80      	pop	{r7, pc}
	...

08002620 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b088      	sub	sp, #32
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002628:	231e      	movs	r3, #30
 800262a:	18fb      	adds	r3, r7, r3
 800262c:	2200      	movs	r2, #0
 800262e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	431a      	orrs	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	431a      	orrs	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	69db      	ldr	r3, [r3, #28]
 8002644:	4313      	orrs	r3, r2
 8002646:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a8d      	ldr	r2, [pc, #564]	@ (8002884 <UART_SetConfig+0x264>)
 8002650:	4013      	ands	r3, r2
 8002652:	0019      	movs	r1, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	697a      	ldr	r2, [r7, #20]
 800265a:	430a      	orrs	r2, r1
 800265c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	4a88      	ldr	r2, [pc, #544]	@ (8002888 <UART_SetConfig+0x268>)
 8002666:	4013      	ands	r3, r2
 8002668:	0019      	movs	r1, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	68da      	ldr	r2, [r3, #12]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	430a      	orrs	r2, r1
 8002674:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	697a      	ldr	r2, [r7, #20]
 8002682:	4313      	orrs	r3, r2
 8002684:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	4a7f      	ldr	r2, [pc, #508]	@ (800288c <UART_SetConfig+0x26c>)
 800268e:	4013      	ands	r3, r2
 8002690:	0019      	movs	r1, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	430a      	orrs	r2, r1
 800269a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a7b      	ldr	r2, [pc, #492]	@ (8002890 <UART_SetConfig+0x270>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d127      	bne.n	80026f6 <UART_SetConfig+0xd6>
 80026a6:	4b7b      	ldr	r3, [pc, #492]	@ (8002894 <UART_SetConfig+0x274>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026aa:	2203      	movs	r2, #3
 80026ac:	4013      	ands	r3, r2
 80026ae:	2b03      	cmp	r3, #3
 80026b0:	d00d      	beq.n	80026ce <UART_SetConfig+0xae>
 80026b2:	d81b      	bhi.n	80026ec <UART_SetConfig+0xcc>
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d014      	beq.n	80026e2 <UART_SetConfig+0xc2>
 80026b8:	d818      	bhi.n	80026ec <UART_SetConfig+0xcc>
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d002      	beq.n	80026c4 <UART_SetConfig+0xa4>
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d00a      	beq.n	80026d8 <UART_SetConfig+0xb8>
 80026c2:	e013      	b.n	80026ec <UART_SetConfig+0xcc>
 80026c4:	231f      	movs	r3, #31
 80026c6:	18fb      	adds	r3, r7, r3
 80026c8:	2200      	movs	r2, #0
 80026ca:	701a      	strb	r2, [r3, #0]
 80026cc:	e021      	b.n	8002712 <UART_SetConfig+0xf2>
 80026ce:	231f      	movs	r3, #31
 80026d0:	18fb      	adds	r3, r7, r3
 80026d2:	2202      	movs	r2, #2
 80026d4:	701a      	strb	r2, [r3, #0]
 80026d6:	e01c      	b.n	8002712 <UART_SetConfig+0xf2>
 80026d8:	231f      	movs	r3, #31
 80026da:	18fb      	adds	r3, r7, r3
 80026dc:	2204      	movs	r2, #4
 80026de:	701a      	strb	r2, [r3, #0]
 80026e0:	e017      	b.n	8002712 <UART_SetConfig+0xf2>
 80026e2:	231f      	movs	r3, #31
 80026e4:	18fb      	adds	r3, r7, r3
 80026e6:	2208      	movs	r2, #8
 80026e8:	701a      	strb	r2, [r3, #0]
 80026ea:	e012      	b.n	8002712 <UART_SetConfig+0xf2>
 80026ec:	231f      	movs	r3, #31
 80026ee:	18fb      	adds	r3, r7, r3
 80026f0:	2210      	movs	r2, #16
 80026f2:	701a      	strb	r2, [r3, #0]
 80026f4:	e00d      	b.n	8002712 <UART_SetConfig+0xf2>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a67      	ldr	r2, [pc, #412]	@ (8002898 <UART_SetConfig+0x278>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d104      	bne.n	800270a <UART_SetConfig+0xea>
 8002700:	231f      	movs	r3, #31
 8002702:	18fb      	adds	r3, r7, r3
 8002704:	2200      	movs	r2, #0
 8002706:	701a      	strb	r2, [r3, #0]
 8002708:	e003      	b.n	8002712 <UART_SetConfig+0xf2>
 800270a:	231f      	movs	r3, #31
 800270c:	18fb      	adds	r3, r7, r3
 800270e:	2210      	movs	r2, #16
 8002710:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	69da      	ldr	r2, [r3, #28]
 8002716:	2380      	movs	r3, #128	@ 0x80
 8002718:	021b      	lsls	r3, r3, #8
 800271a:	429a      	cmp	r2, r3
 800271c:	d15c      	bne.n	80027d8 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 800271e:	231f      	movs	r3, #31
 8002720:	18fb      	adds	r3, r7, r3
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	2b08      	cmp	r3, #8
 8002726:	d015      	beq.n	8002754 <UART_SetConfig+0x134>
 8002728:	dc18      	bgt.n	800275c <UART_SetConfig+0x13c>
 800272a:	2b04      	cmp	r3, #4
 800272c:	d00d      	beq.n	800274a <UART_SetConfig+0x12a>
 800272e:	dc15      	bgt.n	800275c <UART_SetConfig+0x13c>
 8002730:	2b00      	cmp	r3, #0
 8002732:	d002      	beq.n	800273a <UART_SetConfig+0x11a>
 8002734:	2b02      	cmp	r3, #2
 8002736:	d005      	beq.n	8002744 <UART_SetConfig+0x124>
 8002738:	e010      	b.n	800275c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800273a:	f7ff fa39 	bl	8001bb0 <HAL_RCC_GetPCLK1Freq>
 800273e:	0003      	movs	r3, r0
 8002740:	61bb      	str	r3, [r7, #24]
        break;
 8002742:	e012      	b.n	800276a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002744:	4b55      	ldr	r3, [pc, #340]	@ (800289c <UART_SetConfig+0x27c>)
 8002746:	61bb      	str	r3, [r7, #24]
        break;
 8002748:	e00f      	b.n	800276a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800274a:	f7ff f9d1 	bl	8001af0 <HAL_RCC_GetSysClockFreq>
 800274e:	0003      	movs	r3, r0
 8002750:	61bb      	str	r3, [r7, #24]
        break;
 8002752:	e00a      	b.n	800276a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002754:	2380      	movs	r3, #128	@ 0x80
 8002756:	021b      	lsls	r3, r3, #8
 8002758:	61bb      	str	r3, [r7, #24]
        break;
 800275a:	e006      	b.n	800276a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 800275c:	2300      	movs	r3, #0
 800275e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002760:	231e      	movs	r3, #30
 8002762:	18fb      	adds	r3, r7, r3
 8002764:	2201      	movs	r2, #1
 8002766:	701a      	strb	r2, [r3, #0]
        break;
 8002768:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d100      	bne.n	8002772 <UART_SetConfig+0x152>
 8002770:	e07a      	b.n	8002868 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	005a      	lsls	r2, r3, #1
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	085b      	lsrs	r3, r3, #1
 800277c:	18d2      	adds	r2, r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	0019      	movs	r1, r3
 8002784:	0010      	movs	r0, r2
 8002786:	f7fd fcc9 	bl	800011c <__udivsi3>
 800278a:	0003      	movs	r3, r0
 800278c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	2b0f      	cmp	r3, #15
 8002792:	d91c      	bls.n	80027ce <UART_SetConfig+0x1ae>
 8002794:	693a      	ldr	r2, [r7, #16]
 8002796:	2380      	movs	r3, #128	@ 0x80
 8002798:	025b      	lsls	r3, r3, #9
 800279a:	429a      	cmp	r2, r3
 800279c:	d217      	bcs.n	80027ce <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	200e      	movs	r0, #14
 80027a4:	183b      	adds	r3, r7, r0
 80027a6:	210f      	movs	r1, #15
 80027a8:	438a      	bics	r2, r1
 80027aa:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	085b      	lsrs	r3, r3, #1
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	2207      	movs	r2, #7
 80027b4:	4013      	ands	r3, r2
 80027b6:	b299      	uxth	r1, r3
 80027b8:	183b      	adds	r3, r7, r0
 80027ba:	183a      	adds	r2, r7, r0
 80027bc:	8812      	ldrh	r2, [r2, #0]
 80027be:	430a      	orrs	r2, r1
 80027c0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	183a      	adds	r2, r7, r0
 80027c8:	8812      	ldrh	r2, [r2, #0]
 80027ca:	60da      	str	r2, [r3, #12]
 80027cc:	e04c      	b.n	8002868 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80027ce:	231e      	movs	r3, #30
 80027d0:	18fb      	adds	r3, r7, r3
 80027d2:	2201      	movs	r2, #1
 80027d4:	701a      	strb	r2, [r3, #0]
 80027d6:	e047      	b.n	8002868 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 80027d8:	231f      	movs	r3, #31
 80027da:	18fb      	adds	r3, r7, r3
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	2b08      	cmp	r3, #8
 80027e0:	d015      	beq.n	800280e <UART_SetConfig+0x1ee>
 80027e2:	dc18      	bgt.n	8002816 <UART_SetConfig+0x1f6>
 80027e4:	2b04      	cmp	r3, #4
 80027e6:	d00d      	beq.n	8002804 <UART_SetConfig+0x1e4>
 80027e8:	dc15      	bgt.n	8002816 <UART_SetConfig+0x1f6>
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d002      	beq.n	80027f4 <UART_SetConfig+0x1d4>
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d005      	beq.n	80027fe <UART_SetConfig+0x1de>
 80027f2:	e010      	b.n	8002816 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027f4:	f7ff f9dc 	bl	8001bb0 <HAL_RCC_GetPCLK1Freq>
 80027f8:	0003      	movs	r3, r0
 80027fa:	61bb      	str	r3, [r7, #24]
        break;
 80027fc:	e012      	b.n	8002824 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80027fe:	4b27      	ldr	r3, [pc, #156]	@ (800289c <UART_SetConfig+0x27c>)
 8002800:	61bb      	str	r3, [r7, #24]
        break;
 8002802:	e00f      	b.n	8002824 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002804:	f7ff f974 	bl	8001af0 <HAL_RCC_GetSysClockFreq>
 8002808:	0003      	movs	r3, r0
 800280a:	61bb      	str	r3, [r7, #24]
        break;
 800280c:	e00a      	b.n	8002824 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800280e:	2380      	movs	r3, #128	@ 0x80
 8002810:	021b      	lsls	r3, r3, #8
 8002812:	61bb      	str	r3, [r7, #24]
        break;
 8002814:	e006      	b.n	8002824 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002816:	2300      	movs	r3, #0
 8002818:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800281a:	231e      	movs	r3, #30
 800281c:	18fb      	adds	r3, r7, r3
 800281e:	2201      	movs	r2, #1
 8002820:	701a      	strb	r2, [r3, #0]
        break;
 8002822:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d01e      	beq.n	8002868 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	085a      	lsrs	r2, r3, #1
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	18d2      	adds	r2, r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	0019      	movs	r1, r3
 800283a:	0010      	movs	r0, r2
 800283c:	f7fd fc6e 	bl	800011c <__udivsi3>
 8002840:	0003      	movs	r3, r0
 8002842:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	2b0f      	cmp	r3, #15
 8002848:	d90a      	bls.n	8002860 <UART_SetConfig+0x240>
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	2380      	movs	r3, #128	@ 0x80
 800284e:	025b      	lsls	r3, r3, #9
 8002850:	429a      	cmp	r2, r3
 8002852:	d205      	bcs.n	8002860 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	b29a      	uxth	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	60da      	str	r2, [r3, #12]
 800285e:	e003      	b.n	8002868 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8002860:	231e      	movs	r3, #30
 8002862:	18fb      	adds	r3, r7, r3
 8002864:	2201      	movs	r2, #1
 8002866:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002874:	231e      	movs	r3, #30
 8002876:	18fb      	adds	r3, r7, r3
 8002878:	781b      	ldrb	r3, [r3, #0]
}
 800287a:	0018      	movs	r0, r3
 800287c:	46bd      	mov	sp, r7
 800287e:	b008      	add	sp, #32
 8002880:	bd80      	pop	{r7, pc}
 8002882:	46c0      	nop			@ (mov r8, r8)
 8002884:	ffff69f3 	.word	0xffff69f3
 8002888:	ffffcfff 	.word	0xffffcfff
 800288c:	fffff4ff 	.word	0xfffff4ff
 8002890:	40013800 	.word	0x40013800
 8002894:	40021000 	.word	0x40021000
 8002898:	40004400 	.word	0x40004400
 800289c:	007a1200 	.word	0x007a1200

080028a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ac:	2201      	movs	r2, #1
 80028ae:	4013      	ands	r3, r2
 80028b0:	d00b      	beq.n	80028ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	4a4a      	ldr	r2, [pc, #296]	@ (80029e4 <UART_AdvFeatureConfig+0x144>)
 80028ba:	4013      	ands	r3, r2
 80028bc:	0019      	movs	r1, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ce:	2202      	movs	r2, #2
 80028d0:	4013      	ands	r3, r2
 80028d2:	d00b      	beq.n	80028ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	4a43      	ldr	r2, [pc, #268]	@ (80029e8 <UART_AdvFeatureConfig+0x148>)
 80028dc:	4013      	ands	r3, r2
 80028de:	0019      	movs	r1, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	430a      	orrs	r2, r1
 80028ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f0:	2204      	movs	r2, #4
 80028f2:	4013      	ands	r3, r2
 80028f4:	d00b      	beq.n	800290e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	4a3b      	ldr	r2, [pc, #236]	@ (80029ec <UART_AdvFeatureConfig+0x14c>)
 80028fe:	4013      	ands	r3, r2
 8002900:	0019      	movs	r1, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	430a      	orrs	r2, r1
 800290c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002912:	2208      	movs	r2, #8
 8002914:	4013      	ands	r3, r2
 8002916:	d00b      	beq.n	8002930 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	4a34      	ldr	r2, [pc, #208]	@ (80029f0 <UART_AdvFeatureConfig+0x150>)
 8002920:	4013      	ands	r3, r2
 8002922:	0019      	movs	r1, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	430a      	orrs	r2, r1
 800292e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002934:	2210      	movs	r2, #16
 8002936:	4013      	ands	r3, r2
 8002938:	d00b      	beq.n	8002952 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	4a2c      	ldr	r2, [pc, #176]	@ (80029f4 <UART_AdvFeatureConfig+0x154>)
 8002942:	4013      	ands	r3, r2
 8002944:	0019      	movs	r1, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	430a      	orrs	r2, r1
 8002950:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002956:	2220      	movs	r2, #32
 8002958:	4013      	ands	r3, r2
 800295a:	d00b      	beq.n	8002974 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	4a25      	ldr	r2, [pc, #148]	@ (80029f8 <UART_AdvFeatureConfig+0x158>)
 8002964:	4013      	ands	r3, r2
 8002966:	0019      	movs	r1, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	430a      	orrs	r2, r1
 8002972:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002978:	2240      	movs	r2, #64	@ 0x40
 800297a:	4013      	ands	r3, r2
 800297c:	d01d      	beq.n	80029ba <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	4a1d      	ldr	r2, [pc, #116]	@ (80029fc <UART_AdvFeatureConfig+0x15c>)
 8002986:	4013      	ands	r3, r2
 8002988:	0019      	movs	r1, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	430a      	orrs	r2, r1
 8002994:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800299a:	2380      	movs	r3, #128	@ 0x80
 800299c:	035b      	lsls	r3, r3, #13
 800299e:	429a      	cmp	r2, r3
 80029a0:	d10b      	bne.n	80029ba <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	4a15      	ldr	r2, [pc, #84]	@ (8002a00 <UART_AdvFeatureConfig+0x160>)
 80029aa:	4013      	ands	r3, r2
 80029ac:	0019      	movs	r1, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	430a      	orrs	r2, r1
 80029b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029be:	2280      	movs	r2, #128	@ 0x80
 80029c0:	4013      	ands	r3, r2
 80029c2:	d00b      	beq.n	80029dc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	4a0e      	ldr	r2, [pc, #56]	@ (8002a04 <UART_AdvFeatureConfig+0x164>)
 80029cc:	4013      	ands	r3, r2
 80029ce:	0019      	movs	r1, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	430a      	orrs	r2, r1
 80029da:	605a      	str	r2, [r3, #4]
  }
}
 80029dc:	46c0      	nop			@ (mov r8, r8)
 80029de:	46bd      	mov	sp, r7
 80029e0:	b002      	add	sp, #8
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	fffdffff 	.word	0xfffdffff
 80029e8:	fffeffff 	.word	0xfffeffff
 80029ec:	fffbffff 	.word	0xfffbffff
 80029f0:	ffff7fff 	.word	0xffff7fff
 80029f4:	ffffefff 	.word	0xffffefff
 80029f8:	ffffdfff 	.word	0xffffdfff
 80029fc:	ffefffff 	.word	0xffefffff
 8002a00:	ff9fffff 	.word	0xff9fffff
 8002a04:	fff7ffff 	.word	0xfff7ffff

08002a08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b092      	sub	sp, #72	@ 0x48
 8002a0c:	af02      	add	r7, sp, #8
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2284      	movs	r2, #132	@ 0x84
 8002a14:	2100      	movs	r1, #0
 8002a16:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002a18:	f7fd ffc4 	bl	80009a4 <HAL_GetTick>
 8002a1c:	0003      	movs	r3, r0
 8002a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2208      	movs	r2, #8
 8002a28:	4013      	ands	r3, r2
 8002a2a:	2b08      	cmp	r3, #8
 8002a2c:	d12c      	bne.n	8002a88 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a30:	2280      	movs	r2, #128	@ 0x80
 8002a32:	0391      	lsls	r1, r2, #14
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	4a46      	ldr	r2, [pc, #280]	@ (8002b50 <UART_CheckIdleState+0x148>)
 8002a38:	9200      	str	r2, [sp, #0]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f000 f88c 	bl	8002b58 <UART_WaitOnFlagUntilTimeout>
 8002a40:	1e03      	subs	r3, r0, #0
 8002a42:	d021      	beq.n	8002a88 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a44:	f3ef 8310 	mrs	r3, PRIMASK
 8002a48:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002a4c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002a4e:	2301      	movs	r3, #1
 8002a50:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a54:	f383 8810 	msr	PRIMASK, r3
}
 8002a58:	46c0      	nop			@ (mov r8, r8)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2180      	movs	r1, #128	@ 0x80
 8002a66:	438a      	bics	r2, r1
 8002a68:	601a      	str	r2, [r3, #0]
 8002a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a70:	f383 8810 	msr	PRIMASK, r3
}
 8002a74:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2220      	movs	r2, #32
 8002a7a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2278      	movs	r2, #120	@ 0x78
 8002a80:	2100      	movs	r1, #0
 8002a82:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e05f      	b.n	8002b48 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2204      	movs	r2, #4
 8002a90:	4013      	ands	r3, r2
 8002a92:	2b04      	cmp	r3, #4
 8002a94:	d146      	bne.n	8002b24 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a98:	2280      	movs	r2, #128	@ 0x80
 8002a9a:	03d1      	lsls	r1, r2, #15
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	4a2c      	ldr	r2, [pc, #176]	@ (8002b50 <UART_CheckIdleState+0x148>)
 8002aa0:	9200      	str	r2, [sp, #0]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f000 f858 	bl	8002b58 <UART_WaitOnFlagUntilTimeout>
 8002aa8:	1e03      	subs	r3, r0, #0
 8002aaa:	d03b      	beq.n	8002b24 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002aac:	f3ef 8310 	mrs	r3, PRIMASK
 8002ab0:	60fb      	str	r3, [r7, #12]
  return(result);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ab4:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	f383 8810 	msr	PRIMASK, r3
}
 8002ac0:	46c0      	nop			@ (mov r8, r8)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4921      	ldr	r1, [pc, #132]	@ (8002b54 <UART_CheckIdleState+0x14c>)
 8002ace:	400a      	ands	r2, r1
 8002ad0:	601a      	str	r2, [r3, #0]
 8002ad2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ad4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	f383 8810 	msr	PRIMASK, r3
}
 8002adc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ade:	f3ef 8310 	mrs	r3, PRIMASK
 8002ae2:	61bb      	str	r3, [r7, #24]
  return(result);
 8002ae4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ae6:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ae8:	2301      	movs	r3, #1
 8002aea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	f383 8810 	msr	PRIMASK, r3
}
 8002af2:	46c0      	nop			@ (mov r8, r8)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	689a      	ldr	r2, [r3, #8]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2101      	movs	r1, #1
 8002b00:	438a      	bics	r2, r1
 8002b02:	609a      	str	r2, [r3, #8]
 8002b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b06:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b08:	6a3b      	ldr	r3, [r7, #32]
 8002b0a:	f383 8810 	msr	PRIMASK, r3
}
 8002b0e:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2280      	movs	r2, #128	@ 0x80
 8002b14:	2120      	movs	r1, #32
 8002b16:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2278      	movs	r2, #120	@ 0x78
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e011      	b.n	8002b48 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2220      	movs	r2, #32
 8002b28:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2280      	movs	r2, #128	@ 0x80
 8002b2e:	2120      	movs	r1, #32
 8002b30:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2278      	movs	r2, #120	@ 0x78
 8002b42:	2100      	movs	r1, #0
 8002b44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	0018      	movs	r0, r3
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	b010      	add	sp, #64	@ 0x40
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	01ffffff 	.word	0x01ffffff
 8002b54:	fffffedf 	.word	0xfffffedf

08002b58 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	603b      	str	r3, [r7, #0]
 8002b64:	1dfb      	adds	r3, r7, #7
 8002b66:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b68:	e04b      	b.n	8002c02 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	d048      	beq.n	8002c02 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b70:	f7fd ff18 	bl	80009a4 <HAL_GetTick>
 8002b74:	0002      	movs	r2, r0
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d302      	bcc.n	8002b86 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e04b      	b.n	8002c22 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2204      	movs	r2, #4
 8002b92:	4013      	ands	r3, r2
 8002b94:	d035      	beq.n	8002c02 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	69db      	ldr	r3, [r3, #28]
 8002b9c:	2208      	movs	r2, #8
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	2b08      	cmp	r3, #8
 8002ba2:	d111      	bne.n	8002bc8 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2208      	movs	r2, #8
 8002baa:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	0018      	movs	r0, r3
 8002bb0:	f000 f83c 	bl	8002c2c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2284      	movs	r2, #132	@ 0x84
 8002bb8:	2108      	movs	r1, #8
 8002bba:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2278      	movs	r2, #120	@ 0x78
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e02c      	b.n	8002c22 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	69da      	ldr	r2, [r3, #28]
 8002bce:	2380      	movs	r3, #128	@ 0x80
 8002bd0:	011b      	lsls	r3, r3, #4
 8002bd2:	401a      	ands	r2, r3
 8002bd4:	2380      	movs	r3, #128	@ 0x80
 8002bd6:	011b      	lsls	r3, r3, #4
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d112      	bne.n	8002c02 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2280      	movs	r2, #128	@ 0x80
 8002be2:	0112      	lsls	r2, r2, #4
 8002be4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	0018      	movs	r0, r3
 8002bea:	f000 f81f 	bl	8002c2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2284      	movs	r2, #132	@ 0x84
 8002bf2:	2120      	movs	r1, #32
 8002bf4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2278      	movs	r2, #120	@ 0x78
 8002bfa:	2100      	movs	r1, #0
 8002bfc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e00f      	b.n	8002c22 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	69db      	ldr	r3, [r3, #28]
 8002c08:	68ba      	ldr	r2, [r7, #8]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	68ba      	ldr	r2, [r7, #8]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	425a      	negs	r2, r3
 8002c12:	4153      	adcs	r3, r2
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	001a      	movs	r2, r3
 8002c18:	1dfb      	adds	r3, r7, #7
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d0a4      	beq.n	8002b6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	0018      	movs	r0, r3
 8002c24:	46bd      	mov	sp, r7
 8002c26:	b004      	add	sp, #16
 8002c28:	bd80      	pop	{r7, pc}
	...

08002c2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b08e      	sub	sp, #56	@ 0x38
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c34:	f3ef 8310 	mrs	r3, PRIMASK
 8002c38:	617b      	str	r3, [r7, #20]
  return(result);
 8002c3a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c3e:	2301      	movs	r3, #1
 8002c40:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	f383 8810 	msr	PRIMASK, r3
}
 8002c48:	46c0      	nop			@ (mov r8, r8)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4926      	ldr	r1, [pc, #152]	@ (8002cf0 <UART_EndRxTransfer+0xc4>)
 8002c56:	400a      	ands	r2, r1
 8002c58:	601a      	str	r2, [r3, #0]
 8002c5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c5c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	f383 8810 	msr	PRIMASK, r3
}
 8002c64:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c66:	f3ef 8310 	mrs	r3, PRIMASK
 8002c6a:	623b      	str	r3, [r7, #32]
  return(result);
 8002c6c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c6e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c70:	2301      	movs	r3, #1
 8002c72:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c76:	f383 8810 	msr	PRIMASK, r3
}
 8002c7a:	46c0      	nop			@ (mov r8, r8)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	689a      	ldr	r2, [r3, #8]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2101      	movs	r1, #1
 8002c88:	438a      	bics	r2, r1
 8002c8a:	609a      	str	r2, [r3, #8]
 8002c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c92:	f383 8810 	msr	PRIMASK, r3
}
 8002c96:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d118      	bne.n	8002cd2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ca0:	f3ef 8310 	mrs	r3, PRIMASK
 8002ca4:	60bb      	str	r3, [r7, #8]
  return(result);
 8002ca6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002caa:	2301      	movs	r3, #1
 8002cac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f383 8810 	msr	PRIMASK, r3
}
 8002cb4:	46c0      	nop			@ (mov r8, r8)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2110      	movs	r1, #16
 8002cc2:	438a      	bics	r2, r1
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cc8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	f383 8810 	msr	PRIMASK, r3
}
 8002cd0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2280      	movs	r2, #128	@ 0x80
 8002cd6:	2120      	movs	r1, #32
 8002cd8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002ce6:	46c0      	nop			@ (mov r8, r8)
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	b00e      	add	sp, #56	@ 0x38
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	46c0      	nop			@ (mov r8, r8)
 8002cf0:	fffffedf 	.word	0xfffffedf

08002cf4 <siprintf>:
 8002cf4:	b40e      	push	{r1, r2, r3}
 8002cf6:	b500      	push	{lr}
 8002cf8:	490b      	ldr	r1, [pc, #44]	@ (8002d28 <siprintf+0x34>)
 8002cfa:	b09c      	sub	sp, #112	@ 0x70
 8002cfc:	ab1d      	add	r3, sp, #116	@ 0x74
 8002cfe:	9002      	str	r0, [sp, #8]
 8002d00:	9006      	str	r0, [sp, #24]
 8002d02:	9107      	str	r1, [sp, #28]
 8002d04:	9104      	str	r1, [sp, #16]
 8002d06:	4809      	ldr	r0, [pc, #36]	@ (8002d2c <siprintf+0x38>)
 8002d08:	4909      	ldr	r1, [pc, #36]	@ (8002d30 <siprintf+0x3c>)
 8002d0a:	cb04      	ldmia	r3!, {r2}
 8002d0c:	9105      	str	r1, [sp, #20]
 8002d0e:	6800      	ldr	r0, [r0, #0]
 8002d10:	a902      	add	r1, sp, #8
 8002d12:	9301      	str	r3, [sp, #4]
 8002d14:	f000 f99e 	bl	8003054 <_svfiprintf_r>
 8002d18:	2200      	movs	r2, #0
 8002d1a:	9b02      	ldr	r3, [sp, #8]
 8002d1c:	701a      	strb	r2, [r3, #0]
 8002d1e:	b01c      	add	sp, #112	@ 0x70
 8002d20:	bc08      	pop	{r3}
 8002d22:	b003      	add	sp, #12
 8002d24:	4718      	bx	r3
 8002d26:	46c0      	nop			@ (mov r8, r8)
 8002d28:	7fffffff 	.word	0x7fffffff
 8002d2c:	2000000c 	.word	0x2000000c
 8002d30:	ffff0208 	.word	0xffff0208

08002d34 <memset>:
 8002d34:	0003      	movs	r3, r0
 8002d36:	1882      	adds	r2, r0, r2
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d100      	bne.n	8002d3e <memset+0xa>
 8002d3c:	4770      	bx	lr
 8002d3e:	7019      	strb	r1, [r3, #0]
 8002d40:	3301      	adds	r3, #1
 8002d42:	e7f9      	b.n	8002d38 <memset+0x4>

08002d44 <__errno>:
 8002d44:	4b01      	ldr	r3, [pc, #4]	@ (8002d4c <__errno+0x8>)
 8002d46:	6818      	ldr	r0, [r3, #0]
 8002d48:	4770      	bx	lr
 8002d4a:	46c0      	nop			@ (mov r8, r8)
 8002d4c:	2000000c 	.word	0x2000000c

08002d50 <__libc_init_array>:
 8002d50:	b570      	push	{r4, r5, r6, lr}
 8002d52:	2600      	movs	r6, #0
 8002d54:	4c0c      	ldr	r4, [pc, #48]	@ (8002d88 <__libc_init_array+0x38>)
 8002d56:	4d0d      	ldr	r5, [pc, #52]	@ (8002d8c <__libc_init_array+0x3c>)
 8002d58:	1b64      	subs	r4, r4, r5
 8002d5a:	10a4      	asrs	r4, r4, #2
 8002d5c:	42a6      	cmp	r6, r4
 8002d5e:	d109      	bne.n	8002d74 <__libc_init_array+0x24>
 8002d60:	2600      	movs	r6, #0
 8002d62:	f000 fc65 	bl	8003630 <_init>
 8002d66:	4c0a      	ldr	r4, [pc, #40]	@ (8002d90 <__libc_init_array+0x40>)
 8002d68:	4d0a      	ldr	r5, [pc, #40]	@ (8002d94 <__libc_init_array+0x44>)
 8002d6a:	1b64      	subs	r4, r4, r5
 8002d6c:	10a4      	asrs	r4, r4, #2
 8002d6e:	42a6      	cmp	r6, r4
 8002d70:	d105      	bne.n	8002d7e <__libc_init_array+0x2e>
 8002d72:	bd70      	pop	{r4, r5, r6, pc}
 8002d74:	00b3      	lsls	r3, r6, #2
 8002d76:	58eb      	ldr	r3, [r5, r3]
 8002d78:	4798      	blx	r3
 8002d7a:	3601      	adds	r6, #1
 8002d7c:	e7ee      	b.n	8002d5c <__libc_init_array+0xc>
 8002d7e:	00b3      	lsls	r3, r6, #2
 8002d80:	58eb      	ldr	r3, [r5, r3]
 8002d82:	4798      	blx	r3
 8002d84:	3601      	adds	r6, #1
 8002d86:	e7f2      	b.n	8002d6e <__libc_init_array+0x1e>
 8002d88:	080036cc 	.word	0x080036cc
 8002d8c:	080036cc 	.word	0x080036cc
 8002d90:	080036d0 	.word	0x080036d0
 8002d94:	080036cc 	.word	0x080036cc

08002d98 <__retarget_lock_acquire_recursive>:
 8002d98:	4770      	bx	lr

08002d9a <__retarget_lock_release_recursive>:
 8002d9a:	4770      	bx	lr

08002d9c <_free_r>:
 8002d9c:	b570      	push	{r4, r5, r6, lr}
 8002d9e:	0005      	movs	r5, r0
 8002da0:	1e0c      	subs	r4, r1, #0
 8002da2:	d010      	beq.n	8002dc6 <_free_r+0x2a>
 8002da4:	3c04      	subs	r4, #4
 8002da6:	6823      	ldr	r3, [r4, #0]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	da00      	bge.n	8002dae <_free_r+0x12>
 8002dac:	18e4      	adds	r4, r4, r3
 8002dae:	0028      	movs	r0, r5
 8002db0:	f000 f8e0 	bl	8002f74 <__malloc_lock>
 8002db4:	4a1d      	ldr	r2, [pc, #116]	@ (8002e2c <_free_r+0x90>)
 8002db6:	6813      	ldr	r3, [r2, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d105      	bne.n	8002dc8 <_free_r+0x2c>
 8002dbc:	6063      	str	r3, [r4, #4]
 8002dbe:	6014      	str	r4, [r2, #0]
 8002dc0:	0028      	movs	r0, r5
 8002dc2:	f000 f8df 	bl	8002f84 <__malloc_unlock>
 8002dc6:	bd70      	pop	{r4, r5, r6, pc}
 8002dc8:	42a3      	cmp	r3, r4
 8002dca:	d908      	bls.n	8002dde <_free_r+0x42>
 8002dcc:	6820      	ldr	r0, [r4, #0]
 8002dce:	1821      	adds	r1, r4, r0
 8002dd0:	428b      	cmp	r3, r1
 8002dd2:	d1f3      	bne.n	8002dbc <_free_r+0x20>
 8002dd4:	6819      	ldr	r1, [r3, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	1809      	adds	r1, r1, r0
 8002dda:	6021      	str	r1, [r4, #0]
 8002ddc:	e7ee      	b.n	8002dbc <_free_r+0x20>
 8002dde:	001a      	movs	r2, r3
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <_free_r+0x4e>
 8002de6:	42a3      	cmp	r3, r4
 8002de8:	d9f9      	bls.n	8002dde <_free_r+0x42>
 8002dea:	6811      	ldr	r1, [r2, #0]
 8002dec:	1850      	adds	r0, r2, r1
 8002dee:	42a0      	cmp	r0, r4
 8002df0:	d10b      	bne.n	8002e0a <_free_r+0x6e>
 8002df2:	6820      	ldr	r0, [r4, #0]
 8002df4:	1809      	adds	r1, r1, r0
 8002df6:	1850      	adds	r0, r2, r1
 8002df8:	6011      	str	r1, [r2, #0]
 8002dfa:	4283      	cmp	r3, r0
 8002dfc:	d1e0      	bne.n	8002dc0 <_free_r+0x24>
 8002dfe:	6818      	ldr	r0, [r3, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	1841      	adds	r1, r0, r1
 8002e04:	6011      	str	r1, [r2, #0]
 8002e06:	6053      	str	r3, [r2, #4]
 8002e08:	e7da      	b.n	8002dc0 <_free_r+0x24>
 8002e0a:	42a0      	cmp	r0, r4
 8002e0c:	d902      	bls.n	8002e14 <_free_r+0x78>
 8002e0e:	230c      	movs	r3, #12
 8002e10:	602b      	str	r3, [r5, #0]
 8002e12:	e7d5      	b.n	8002dc0 <_free_r+0x24>
 8002e14:	6820      	ldr	r0, [r4, #0]
 8002e16:	1821      	adds	r1, r4, r0
 8002e18:	428b      	cmp	r3, r1
 8002e1a:	d103      	bne.n	8002e24 <_free_r+0x88>
 8002e1c:	6819      	ldr	r1, [r3, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	1809      	adds	r1, r1, r0
 8002e22:	6021      	str	r1, [r4, #0]
 8002e24:	6063      	str	r3, [r4, #4]
 8002e26:	6054      	str	r4, [r2, #4]
 8002e28:	e7ca      	b.n	8002dc0 <_free_r+0x24>
 8002e2a:	46c0      	nop			@ (mov r8, r8)
 8002e2c:	200002ac 	.word	0x200002ac

08002e30 <sbrk_aligned>:
 8002e30:	b570      	push	{r4, r5, r6, lr}
 8002e32:	4e0f      	ldr	r6, [pc, #60]	@ (8002e70 <sbrk_aligned+0x40>)
 8002e34:	000d      	movs	r5, r1
 8002e36:	6831      	ldr	r1, [r6, #0]
 8002e38:	0004      	movs	r4, r0
 8002e3a:	2900      	cmp	r1, #0
 8002e3c:	d102      	bne.n	8002e44 <sbrk_aligned+0x14>
 8002e3e:	f000 fb99 	bl	8003574 <_sbrk_r>
 8002e42:	6030      	str	r0, [r6, #0]
 8002e44:	0029      	movs	r1, r5
 8002e46:	0020      	movs	r0, r4
 8002e48:	f000 fb94 	bl	8003574 <_sbrk_r>
 8002e4c:	1c43      	adds	r3, r0, #1
 8002e4e:	d103      	bne.n	8002e58 <sbrk_aligned+0x28>
 8002e50:	2501      	movs	r5, #1
 8002e52:	426d      	negs	r5, r5
 8002e54:	0028      	movs	r0, r5
 8002e56:	bd70      	pop	{r4, r5, r6, pc}
 8002e58:	2303      	movs	r3, #3
 8002e5a:	1cc5      	adds	r5, r0, #3
 8002e5c:	439d      	bics	r5, r3
 8002e5e:	42a8      	cmp	r0, r5
 8002e60:	d0f8      	beq.n	8002e54 <sbrk_aligned+0x24>
 8002e62:	1a29      	subs	r1, r5, r0
 8002e64:	0020      	movs	r0, r4
 8002e66:	f000 fb85 	bl	8003574 <_sbrk_r>
 8002e6a:	3001      	adds	r0, #1
 8002e6c:	d1f2      	bne.n	8002e54 <sbrk_aligned+0x24>
 8002e6e:	e7ef      	b.n	8002e50 <sbrk_aligned+0x20>
 8002e70:	200002a8 	.word	0x200002a8

08002e74 <_malloc_r>:
 8002e74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e76:	2203      	movs	r2, #3
 8002e78:	1ccb      	adds	r3, r1, #3
 8002e7a:	4393      	bics	r3, r2
 8002e7c:	3308      	adds	r3, #8
 8002e7e:	0005      	movs	r5, r0
 8002e80:	001f      	movs	r7, r3
 8002e82:	2b0c      	cmp	r3, #12
 8002e84:	d234      	bcs.n	8002ef0 <_malloc_r+0x7c>
 8002e86:	270c      	movs	r7, #12
 8002e88:	42b9      	cmp	r1, r7
 8002e8a:	d833      	bhi.n	8002ef4 <_malloc_r+0x80>
 8002e8c:	0028      	movs	r0, r5
 8002e8e:	f000 f871 	bl	8002f74 <__malloc_lock>
 8002e92:	4e37      	ldr	r6, [pc, #220]	@ (8002f70 <_malloc_r+0xfc>)
 8002e94:	6833      	ldr	r3, [r6, #0]
 8002e96:	001c      	movs	r4, r3
 8002e98:	2c00      	cmp	r4, #0
 8002e9a:	d12f      	bne.n	8002efc <_malloc_r+0x88>
 8002e9c:	0039      	movs	r1, r7
 8002e9e:	0028      	movs	r0, r5
 8002ea0:	f7ff ffc6 	bl	8002e30 <sbrk_aligned>
 8002ea4:	0004      	movs	r4, r0
 8002ea6:	1c43      	adds	r3, r0, #1
 8002ea8:	d15f      	bne.n	8002f6a <_malloc_r+0xf6>
 8002eaa:	6834      	ldr	r4, [r6, #0]
 8002eac:	9400      	str	r4, [sp, #0]
 8002eae:	9b00      	ldr	r3, [sp, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d14a      	bne.n	8002f4a <_malloc_r+0xd6>
 8002eb4:	2c00      	cmp	r4, #0
 8002eb6:	d052      	beq.n	8002f5e <_malloc_r+0xea>
 8002eb8:	6823      	ldr	r3, [r4, #0]
 8002eba:	0028      	movs	r0, r5
 8002ebc:	18e3      	adds	r3, r4, r3
 8002ebe:	9900      	ldr	r1, [sp, #0]
 8002ec0:	9301      	str	r3, [sp, #4]
 8002ec2:	f000 fb57 	bl	8003574 <_sbrk_r>
 8002ec6:	9b01      	ldr	r3, [sp, #4]
 8002ec8:	4283      	cmp	r3, r0
 8002eca:	d148      	bne.n	8002f5e <_malloc_r+0xea>
 8002ecc:	6823      	ldr	r3, [r4, #0]
 8002ece:	0028      	movs	r0, r5
 8002ed0:	1aff      	subs	r7, r7, r3
 8002ed2:	0039      	movs	r1, r7
 8002ed4:	f7ff ffac 	bl	8002e30 <sbrk_aligned>
 8002ed8:	3001      	adds	r0, #1
 8002eda:	d040      	beq.n	8002f5e <_malloc_r+0xea>
 8002edc:	6823      	ldr	r3, [r4, #0]
 8002ede:	19db      	adds	r3, r3, r7
 8002ee0:	6023      	str	r3, [r4, #0]
 8002ee2:	6833      	ldr	r3, [r6, #0]
 8002ee4:	685a      	ldr	r2, [r3, #4]
 8002ee6:	2a00      	cmp	r2, #0
 8002ee8:	d133      	bne.n	8002f52 <_malloc_r+0xde>
 8002eea:	9b00      	ldr	r3, [sp, #0]
 8002eec:	6033      	str	r3, [r6, #0]
 8002eee:	e019      	b.n	8002f24 <_malloc_r+0xb0>
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	dac9      	bge.n	8002e88 <_malloc_r+0x14>
 8002ef4:	230c      	movs	r3, #12
 8002ef6:	602b      	str	r3, [r5, #0]
 8002ef8:	2000      	movs	r0, #0
 8002efa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002efc:	6821      	ldr	r1, [r4, #0]
 8002efe:	1bc9      	subs	r1, r1, r7
 8002f00:	d420      	bmi.n	8002f44 <_malloc_r+0xd0>
 8002f02:	290b      	cmp	r1, #11
 8002f04:	d90a      	bls.n	8002f1c <_malloc_r+0xa8>
 8002f06:	19e2      	adds	r2, r4, r7
 8002f08:	6027      	str	r7, [r4, #0]
 8002f0a:	42a3      	cmp	r3, r4
 8002f0c:	d104      	bne.n	8002f18 <_malloc_r+0xa4>
 8002f0e:	6032      	str	r2, [r6, #0]
 8002f10:	6863      	ldr	r3, [r4, #4]
 8002f12:	6011      	str	r1, [r2, #0]
 8002f14:	6053      	str	r3, [r2, #4]
 8002f16:	e005      	b.n	8002f24 <_malloc_r+0xb0>
 8002f18:	605a      	str	r2, [r3, #4]
 8002f1a:	e7f9      	b.n	8002f10 <_malloc_r+0x9c>
 8002f1c:	6862      	ldr	r2, [r4, #4]
 8002f1e:	42a3      	cmp	r3, r4
 8002f20:	d10e      	bne.n	8002f40 <_malloc_r+0xcc>
 8002f22:	6032      	str	r2, [r6, #0]
 8002f24:	0028      	movs	r0, r5
 8002f26:	f000 f82d 	bl	8002f84 <__malloc_unlock>
 8002f2a:	0020      	movs	r0, r4
 8002f2c:	2207      	movs	r2, #7
 8002f2e:	300b      	adds	r0, #11
 8002f30:	1d23      	adds	r3, r4, #4
 8002f32:	4390      	bics	r0, r2
 8002f34:	1ac2      	subs	r2, r0, r3
 8002f36:	4298      	cmp	r0, r3
 8002f38:	d0df      	beq.n	8002efa <_malloc_r+0x86>
 8002f3a:	1a1b      	subs	r3, r3, r0
 8002f3c:	50a3      	str	r3, [r4, r2]
 8002f3e:	e7dc      	b.n	8002efa <_malloc_r+0x86>
 8002f40:	605a      	str	r2, [r3, #4]
 8002f42:	e7ef      	b.n	8002f24 <_malloc_r+0xb0>
 8002f44:	0023      	movs	r3, r4
 8002f46:	6864      	ldr	r4, [r4, #4]
 8002f48:	e7a6      	b.n	8002e98 <_malloc_r+0x24>
 8002f4a:	9c00      	ldr	r4, [sp, #0]
 8002f4c:	6863      	ldr	r3, [r4, #4]
 8002f4e:	9300      	str	r3, [sp, #0]
 8002f50:	e7ad      	b.n	8002eae <_malloc_r+0x3a>
 8002f52:	001a      	movs	r2, r3
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	42a3      	cmp	r3, r4
 8002f58:	d1fb      	bne.n	8002f52 <_malloc_r+0xde>
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	e7da      	b.n	8002f14 <_malloc_r+0xa0>
 8002f5e:	230c      	movs	r3, #12
 8002f60:	0028      	movs	r0, r5
 8002f62:	602b      	str	r3, [r5, #0]
 8002f64:	f000 f80e 	bl	8002f84 <__malloc_unlock>
 8002f68:	e7c6      	b.n	8002ef8 <_malloc_r+0x84>
 8002f6a:	6007      	str	r7, [r0, #0]
 8002f6c:	e7da      	b.n	8002f24 <_malloc_r+0xb0>
 8002f6e:	46c0      	nop			@ (mov r8, r8)
 8002f70:	200002ac 	.word	0x200002ac

08002f74 <__malloc_lock>:
 8002f74:	b510      	push	{r4, lr}
 8002f76:	4802      	ldr	r0, [pc, #8]	@ (8002f80 <__malloc_lock+0xc>)
 8002f78:	f7ff ff0e 	bl	8002d98 <__retarget_lock_acquire_recursive>
 8002f7c:	bd10      	pop	{r4, pc}
 8002f7e:	46c0      	nop			@ (mov r8, r8)
 8002f80:	200002a4 	.word	0x200002a4

08002f84 <__malloc_unlock>:
 8002f84:	b510      	push	{r4, lr}
 8002f86:	4802      	ldr	r0, [pc, #8]	@ (8002f90 <__malloc_unlock+0xc>)
 8002f88:	f7ff ff07 	bl	8002d9a <__retarget_lock_release_recursive>
 8002f8c:	bd10      	pop	{r4, pc}
 8002f8e:	46c0      	nop			@ (mov r8, r8)
 8002f90:	200002a4 	.word	0x200002a4

08002f94 <__ssputs_r>:
 8002f94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f96:	688e      	ldr	r6, [r1, #8]
 8002f98:	b085      	sub	sp, #20
 8002f9a:	001f      	movs	r7, r3
 8002f9c:	000c      	movs	r4, r1
 8002f9e:	680b      	ldr	r3, [r1, #0]
 8002fa0:	9002      	str	r0, [sp, #8]
 8002fa2:	9203      	str	r2, [sp, #12]
 8002fa4:	42be      	cmp	r6, r7
 8002fa6:	d830      	bhi.n	800300a <__ssputs_r+0x76>
 8002fa8:	210c      	movs	r1, #12
 8002faa:	5e62      	ldrsh	r2, [r4, r1]
 8002fac:	2190      	movs	r1, #144	@ 0x90
 8002fae:	00c9      	lsls	r1, r1, #3
 8002fb0:	420a      	tst	r2, r1
 8002fb2:	d028      	beq.n	8003006 <__ssputs_r+0x72>
 8002fb4:	2003      	movs	r0, #3
 8002fb6:	6921      	ldr	r1, [r4, #16]
 8002fb8:	1a5b      	subs	r3, r3, r1
 8002fba:	9301      	str	r3, [sp, #4]
 8002fbc:	6963      	ldr	r3, [r4, #20]
 8002fbe:	4343      	muls	r3, r0
 8002fc0:	9801      	ldr	r0, [sp, #4]
 8002fc2:	0fdd      	lsrs	r5, r3, #31
 8002fc4:	18ed      	adds	r5, r5, r3
 8002fc6:	1c7b      	adds	r3, r7, #1
 8002fc8:	181b      	adds	r3, r3, r0
 8002fca:	106d      	asrs	r5, r5, #1
 8002fcc:	42ab      	cmp	r3, r5
 8002fce:	d900      	bls.n	8002fd2 <__ssputs_r+0x3e>
 8002fd0:	001d      	movs	r5, r3
 8002fd2:	0552      	lsls	r2, r2, #21
 8002fd4:	d528      	bpl.n	8003028 <__ssputs_r+0x94>
 8002fd6:	0029      	movs	r1, r5
 8002fd8:	9802      	ldr	r0, [sp, #8]
 8002fda:	f7ff ff4b 	bl	8002e74 <_malloc_r>
 8002fde:	1e06      	subs	r6, r0, #0
 8002fe0:	d02c      	beq.n	800303c <__ssputs_r+0xa8>
 8002fe2:	9a01      	ldr	r2, [sp, #4]
 8002fe4:	6921      	ldr	r1, [r4, #16]
 8002fe6:	f000 fae2 	bl	80035ae <memcpy>
 8002fea:	89a2      	ldrh	r2, [r4, #12]
 8002fec:	4b18      	ldr	r3, [pc, #96]	@ (8003050 <__ssputs_r+0xbc>)
 8002fee:	401a      	ands	r2, r3
 8002ff0:	2380      	movs	r3, #128	@ 0x80
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	81a3      	strh	r3, [r4, #12]
 8002ff6:	9b01      	ldr	r3, [sp, #4]
 8002ff8:	6126      	str	r6, [r4, #16]
 8002ffa:	18f6      	adds	r6, r6, r3
 8002ffc:	6026      	str	r6, [r4, #0]
 8002ffe:	003e      	movs	r6, r7
 8003000:	6165      	str	r5, [r4, #20]
 8003002:	1aed      	subs	r5, r5, r3
 8003004:	60a5      	str	r5, [r4, #8]
 8003006:	42be      	cmp	r6, r7
 8003008:	d900      	bls.n	800300c <__ssputs_r+0x78>
 800300a:	003e      	movs	r6, r7
 800300c:	0032      	movs	r2, r6
 800300e:	9903      	ldr	r1, [sp, #12]
 8003010:	6820      	ldr	r0, [r4, #0]
 8003012:	f000 fa9b 	bl	800354c <memmove>
 8003016:	2000      	movs	r0, #0
 8003018:	68a3      	ldr	r3, [r4, #8]
 800301a:	1b9b      	subs	r3, r3, r6
 800301c:	60a3      	str	r3, [r4, #8]
 800301e:	6823      	ldr	r3, [r4, #0]
 8003020:	199b      	adds	r3, r3, r6
 8003022:	6023      	str	r3, [r4, #0]
 8003024:	b005      	add	sp, #20
 8003026:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003028:	002a      	movs	r2, r5
 800302a:	9802      	ldr	r0, [sp, #8]
 800302c:	f000 fac8 	bl	80035c0 <_realloc_r>
 8003030:	1e06      	subs	r6, r0, #0
 8003032:	d1e0      	bne.n	8002ff6 <__ssputs_r+0x62>
 8003034:	6921      	ldr	r1, [r4, #16]
 8003036:	9802      	ldr	r0, [sp, #8]
 8003038:	f7ff feb0 	bl	8002d9c <_free_r>
 800303c:	230c      	movs	r3, #12
 800303e:	2001      	movs	r0, #1
 8003040:	9a02      	ldr	r2, [sp, #8]
 8003042:	4240      	negs	r0, r0
 8003044:	6013      	str	r3, [r2, #0]
 8003046:	89a2      	ldrh	r2, [r4, #12]
 8003048:	3334      	adds	r3, #52	@ 0x34
 800304a:	4313      	orrs	r3, r2
 800304c:	81a3      	strh	r3, [r4, #12]
 800304e:	e7e9      	b.n	8003024 <__ssputs_r+0x90>
 8003050:	fffffb7f 	.word	0xfffffb7f

08003054 <_svfiprintf_r>:
 8003054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003056:	b0a1      	sub	sp, #132	@ 0x84
 8003058:	9003      	str	r0, [sp, #12]
 800305a:	001d      	movs	r5, r3
 800305c:	898b      	ldrh	r3, [r1, #12]
 800305e:	000f      	movs	r7, r1
 8003060:	0016      	movs	r6, r2
 8003062:	061b      	lsls	r3, r3, #24
 8003064:	d511      	bpl.n	800308a <_svfiprintf_r+0x36>
 8003066:	690b      	ldr	r3, [r1, #16]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d10e      	bne.n	800308a <_svfiprintf_r+0x36>
 800306c:	2140      	movs	r1, #64	@ 0x40
 800306e:	f7ff ff01 	bl	8002e74 <_malloc_r>
 8003072:	6038      	str	r0, [r7, #0]
 8003074:	6138      	str	r0, [r7, #16]
 8003076:	2800      	cmp	r0, #0
 8003078:	d105      	bne.n	8003086 <_svfiprintf_r+0x32>
 800307a:	230c      	movs	r3, #12
 800307c:	9a03      	ldr	r2, [sp, #12]
 800307e:	6013      	str	r3, [r2, #0]
 8003080:	2001      	movs	r0, #1
 8003082:	4240      	negs	r0, r0
 8003084:	e0cf      	b.n	8003226 <_svfiprintf_r+0x1d2>
 8003086:	2340      	movs	r3, #64	@ 0x40
 8003088:	617b      	str	r3, [r7, #20]
 800308a:	2300      	movs	r3, #0
 800308c:	ac08      	add	r4, sp, #32
 800308e:	6163      	str	r3, [r4, #20]
 8003090:	3320      	adds	r3, #32
 8003092:	7663      	strb	r3, [r4, #25]
 8003094:	3310      	adds	r3, #16
 8003096:	76a3      	strb	r3, [r4, #26]
 8003098:	9507      	str	r5, [sp, #28]
 800309a:	0035      	movs	r5, r6
 800309c:	782b      	ldrb	r3, [r5, #0]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <_svfiprintf_r+0x52>
 80030a2:	2b25      	cmp	r3, #37	@ 0x25
 80030a4:	d148      	bne.n	8003138 <_svfiprintf_r+0xe4>
 80030a6:	1bab      	subs	r3, r5, r6
 80030a8:	9305      	str	r3, [sp, #20]
 80030aa:	42b5      	cmp	r5, r6
 80030ac:	d00b      	beq.n	80030c6 <_svfiprintf_r+0x72>
 80030ae:	0032      	movs	r2, r6
 80030b0:	0039      	movs	r1, r7
 80030b2:	9803      	ldr	r0, [sp, #12]
 80030b4:	f7ff ff6e 	bl	8002f94 <__ssputs_r>
 80030b8:	3001      	adds	r0, #1
 80030ba:	d100      	bne.n	80030be <_svfiprintf_r+0x6a>
 80030bc:	e0ae      	b.n	800321c <_svfiprintf_r+0x1c8>
 80030be:	6963      	ldr	r3, [r4, #20]
 80030c0:	9a05      	ldr	r2, [sp, #20]
 80030c2:	189b      	adds	r3, r3, r2
 80030c4:	6163      	str	r3, [r4, #20]
 80030c6:	782b      	ldrb	r3, [r5, #0]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d100      	bne.n	80030ce <_svfiprintf_r+0x7a>
 80030cc:	e0a6      	b.n	800321c <_svfiprintf_r+0x1c8>
 80030ce:	2201      	movs	r2, #1
 80030d0:	2300      	movs	r3, #0
 80030d2:	4252      	negs	r2, r2
 80030d4:	6062      	str	r2, [r4, #4]
 80030d6:	a904      	add	r1, sp, #16
 80030d8:	3254      	adds	r2, #84	@ 0x54
 80030da:	1852      	adds	r2, r2, r1
 80030dc:	1c6e      	adds	r6, r5, #1
 80030de:	6023      	str	r3, [r4, #0]
 80030e0:	60e3      	str	r3, [r4, #12]
 80030e2:	60a3      	str	r3, [r4, #8]
 80030e4:	7013      	strb	r3, [r2, #0]
 80030e6:	65a3      	str	r3, [r4, #88]	@ 0x58
 80030e8:	4b54      	ldr	r3, [pc, #336]	@ (800323c <_svfiprintf_r+0x1e8>)
 80030ea:	2205      	movs	r2, #5
 80030ec:	0018      	movs	r0, r3
 80030ee:	7831      	ldrb	r1, [r6, #0]
 80030f0:	9305      	str	r3, [sp, #20]
 80030f2:	f000 fa51 	bl	8003598 <memchr>
 80030f6:	1c75      	adds	r5, r6, #1
 80030f8:	2800      	cmp	r0, #0
 80030fa:	d11f      	bne.n	800313c <_svfiprintf_r+0xe8>
 80030fc:	6822      	ldr	r2, [r4, #0]
 80030fe:	06d3      	lsls	r3, r2, #27
 8003100:	d504      	bpl.n	800310c <_svfiprintf_r+0xb8>
 8003102:	2353      	movs	r3, #83	@ 0x53
 8003104:	a904      	add	r1, sp, #16
 8003106:	185b      	adds	r3, r3, r1
 8003108:	2120      	movs	r1, #32
 800310a:	7019      	strb	r1, [r3, #0]
 800310c:	0713      	lsls	r3, r2, #28
 800310e:	d504      	bpl.n	800311a <_svfiprintf_r+0xc6>
 8003110:	2353      	movs	r3, #83	@ 0x53
 8003112:	a904      	add	r1, sp, #16
 8003114:	185b      	adds	r3, r3, r1
 8003116:	212b      	movs	r1, #43	@ 0x2b
 8003118:	7019      	strb	r1, [r3, #0]
 800311a:	7833      	ldrb	r3, [r6, #0]
 800311c:	2b2a      	cmp	r3, #42	@ 0x2a
 800311e:	d016      	beq.n	800314e <_svfiprintf_r+0xfa>
 8003120:	0035      	movs	r5, r6
 8003122:	2100      	movs	r1, #0
 8003124:	200a      	movs	r0, #10
 8003126:	68e3      	ldr	r3, [r4, #12]
 8003128:	782a      	ldrb	r2, [r5, #0]
 800312a:	1c6e      	adds	r6, r5, #1
 800312c:	3a30      	subs	r2, #48	@ 0x30
 800312e:	2a09      	cmp	r2, #9
 8003130:	d950      	bls.n	80031d4 <_svfiprintf_r+0x180>
 8003132:	2900      	cmp	r1, #0
 8003134:	d111      	bne.n	800315a <_svfiprintf_r+0x106>
 8003136:	e017      	b.n	8003168 <_svfiprintf_r+0x114>
 8003138:	3501      	adds	r5, #1
 800313a:	e7af      	b.n	800309c <_svfiprintf_r+0x48>
 800313c:	9b05      	ldr	r3, [sp, #20]
 800313e:	6822      	ldr	r2, [r4, #0]
 8003140:	1ac0      	subs	r0, r0, r3
 8003142:	2301      	movs	r3, #1
 8003144:	4083      	lsls	r3, r0
 8003146:	4313      	orrs	r3, r2
 8003148:	002e      	movs	r6, r5
 800314a:	6023      	str	r3, [r4, #0]
 800314c:	e7cc      	b.n	80030e8 <_svfiprintf_r+0x94>
 800314e:	9b07      	ldr	r3, [sp, #28]
 8003150:	1d19      	adds	r1, r3, #4
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	9107      	str	r1, [sp, #28]
 8003156:	2b00      	cmp	r3, #0
 8003158:	db01      	blt.n	800315e <_svfiprintf_r+0x10a>
 800315a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800315c:	e004      	b.n	8003168 <_svfiprintf_r+0x114>
 800315e:	425b      	negs	r3, r3
 8003160:	60e3      	str	r3, [r4, #12]
 8003162:	2302      	movs	r3, #2
 8003164:	4313      	orrs	r3, r2
 8003166:	6023      	str	r3, [r4, #0]
 8003168:	782b      	ldrb	r3, [r5, #0]
 800316a:	2b2e      	cmp	r3, #46	@ 0x2e
 800316c:	d10c      	bne.n	8003188 <_svfiprintf_r+0x134>
 800316e:	786b      	ldrb	r3, [r5, #1]
 8003170:	2b2a      	cmp	r3, #42	@ 0x2a
 8003172:	d134      	bne.n	80031de <_svfiprintf_r+0x18a>
 8003174:	9b07      	ldr	r3, [sp, #28]
 8003176:	3502      	adds	r5, #2
 8003178:	1d1a      	adds	r2, r3, #4
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	9207      	str	r2, [sp, #28]
 800317e:	2b00      	cmp	r3, #0
 8003180:	da01      	bge.n	8003186 <_svfiprintf_r+0x132>
 8003182:	2301      	movs	r3, #1
 8003184:	425b      	negs	r3, r3
 8003186:	9309      	str	r3, [sp, #36]	@ 0x24
 8003188:	4e2d      	ldr	r6, [pc, #180]	@ (8003240 <_svfiprintf_r+0x1ec>)
 800318a:	2203      	movs	r2, #3
 800318c:	0030      	movs	r0, r6
 800318e:	7829      	ldrb	r1, [r5, #0]
 8003190:	f000 fa02 	bl	8003598 <memchr>
 8003194:	2800      	cmp	r0, #0
 8003196:	d006      	beq.n	80031a6 <_svfiprintf_r+0x152>
 8003198:	2340      	movs	r3, #64	@ 0x40
 800319a:	1b80      	subs	r0, r0, r6
 800319c:	4083      	lsls	r3, r0
 800319e:	6822      	ldr	r2, [r4, #0]
 80031a0:	3501      	adds	r5, #1
 80031a2:	4313      	orrs	r3, r2
 80031a4:	6023      	str	r3, [r4, #0]
 80031a6:	7829      	ldrb	r1, [r5, #0]
 80031a8:	2206      	movs	r2, #6
 80031aa:	4826      	ldr	r0, [pc, #152]	@ (8003244 <_svfiprintf_r+0x1f0>)
 80031ac:	1c6e      	adds	r6, r5, #1
 80031ae:	7621      	strb	r1, [r4, #24]
 80031b0:	f000 f9f2 	bl	8003598 <memchr>
 80031b4:	2800      	cmp	r0, #0
 80031b6:	d038      	beq.n	800322a <_svfiprintf_r+0x1d6>
 80031b8:	4b23      	ldr	r3, [pc, #140]	@ (8003248 <_svfiprintf_r+0x1f4>)
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d122      	bne.n	8003204 <_svfiprintf_r+0x1b0>
 80031be:	2207      	movs	r2, #7
 80031c0:	9b07      	ldr	r3, [sp, #28]
 80031c2:	3307      	adds	r3, #7
 80031c4:	4393      	bics	r3, r2
 80031c6:	3308      	adds	r3, #8
 80031c8:	9307      	str	r3, [sp, #28]
 80031ca:	6963      	ldr	r3, [r4, #20]
 80031cc:	9a04      	ldr	r2, [sp, #16]
 80031ce:	189b      	adds	r3, r3, r2
 80031d0:	6163      	str	r3, [r4, #20]
 80031d2:	e762      	b.n	800309a <_svfiprintf_r+0x46>
 80031d4:	4343      	muls	r3, r0
 80031d6:	0035      	movs	r5, r6
 80031d8:	2101      	movs	r1, #1
 80031da:	189b      	adds	r3, r3, r2
 80031dc:	e7a4      	b.n	8003128 <_svfiprintf_r+0xd4>
 80031de:	2300      	movs	r3, #0
 80031e0:	200a      	movs	r0, #10
 80031e2:	0019      	movs	r1, r3
 80031e4:	3501      	adds	r5, #1
 80031e6:	6063      	str	r3, [r4, #4]
 80031e8:	782a      	ldrb	r2, [r5, #0]
 80031ea:	1c6e      	adds	r6, r5, #1
 80031ec:	3a30      	subs	r2, #48	@ 0x30
 80031ee:	2a09      	cmp	r2, #9
 80031f0:	d903      	bls.n	80031fa <_svfiprintf_r+0x1a6>
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d0c8      	beq.n	8003188 <_svfiprintf_r+0x134>
 80031f6:	9109      	str	r1, [sp, #36]	@ 0x24
 80031f8:	e7c6      	b.n	8003188 <_svfiprintf_r+0x134>
 80031fa:	4341      	muls	r1, r0
 80031fc:	0035      	movs	r5, r6
 80031fe:	2301      	movs	r3, #1
 8003200:	1889      	adds	r1, r1, r2
 8003202:	e7f1      	b.n	80031e8 <_svfiprintf_r+0x194>
 8003204:	aa07      	add	r2, sp, #28
 8003206:	9200      	str	r2, [sp, #0]
 8003208:	0021      	movs	r1, r4
 800320a:	003a      	movs	r2, r7
 800320c:	4b0f      	ldr	r3, [pc, #60]	@ (800324c <_svfiprintf_r+0x1f8>)
 800320e:	9803      	ldr	r0, [sp, #12]
 8003210:	e000      	b.n	8003214 <_svfiprintf_r+0x1c0>
 8003212:	bf00      	nop
 8003214:	9004      	str	r0, [sp, #16]
 8003216:	9b04      	ldr	r3, [sp, #16]
 8003218:	3301      	adds	r3, #1
 800321a:	d1d6      	bne.n	80031ca <_svfiprintf_r+0x176>
 800321c:	89bb      	ldrh	r3, [r7, #12]
 800321e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003220:	065b      	lsls	r3, r3, #25
 8003222:	d500      	bpl.n	8003226 <_svfiprintf_r+0x1d2>
 8003224:	e72c      	b.n	8003080 <_svfiprintf_r+0x2c>
 8003226:	b021      	add	sp, #132	@ 0x84
 8003228:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800322a:	aa07      	add	r2, sp, #28
 800322c:	9200      	str	r2, [sp, #0]
 800322e:	0021      	movs	r1, r4
 8003230:	003a      	movs	r2, r7
 8003232:	4b06      	ldr	r3, [pc, #24]	@ (800324c <_svfiprintf_r+0x1f8>)
 8003234:	9803      	ldr	r0, [sp, #12]
 8003236:	f000 f87b 	bl	8003330 <_printf_i>
 800323a:	e7eb      	b.n	8003214 <_svfiprintf_r+0x1c0>
 800323c:	08003698 	.word	0x08003698
 8003240:	0800369e 	.word	0x0800369e
 8003244:	080036a2 	.word	0x080036a2
 8003248:	00000000 	.word	0x00000000
 800324c:	08002f95 	.word	0x08002f95

08003250 <_printf_common>:
 8003250:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003252:	0016      	movs	r6, r2
 8003254:	9301      	str	r3, [sp, #4]
 8003256:	688a      	ldr	r2, [r1, #8]
 8003258:	690b      	ldr	r3, [r1, #16]
 800325a:	000c      	movs	r4, r1
 800325c:	9000      	str	r0, [sp, #0]
 800325e:	4293      	cmp	r3, r2
 8003260:	da00      	bge.n	8003264 <_printf_common+0x14>
 8003262:	0013      	movs	r3, r2
 8003264:	0022      	movs	r2, r4
 8003266:	6033      	str	r3, [r6, #0]
 8003268:	3243      	adds	r2, #67	@ 0x43
 800326a:	7812      	ldrb	r2, [r2, #0]
 800326c:	2a00      	cmp	r2, #0
 800326e:	d001      	beq.n	8003274 <_printf_common+0x24>
 8003270:	3301      	adds	r3, #1
 8003272:	6033      	str	r3, [r6, #0]
 8003274:	6823      	ldr	r3, [r4, #0]
 8003276:	069b      	lsls	r3, r3, #26
 8003278:	d502      	bpl.n	8003280 <_printf_common+0x30>
 800327a:	6833      	ldr	r3, [r6, #0]
 800327c:	3302      	adds	r3, #2
 800327e:	6033      	str	r3, [r6, #0]
 8003280:	6822      	ldr	r2, [r4, #0]
 8003282:	2306      	movs	r3, #6
 8003284:	0015      	movs	r5, r2
 8003286:	401d      	ands	r5, r3
 8003288:	421a      	tst	r2, r3
 800328a:	d027      	beq.n	80032dc <_printf_common+0x8c>
 800328c:	0023      	movs	r3, r4
 800328e:	3343      	adds	r3, #67	@ 0x43
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	1e5a      	subs	r2, r3, #1
 8003294:	4193      	sbcs	r3, r2
 8003296:	6822      	ldr	r2, [r4, #0]
 8003298:	0692      	lsls	r2, r2, #26
 800329a:	d430      	bmi.n	80032fe <_printf_common+0xae>
 800329c:	0022      	movs	r2, r4
 800329e:	9901      	ldr	r1, [sp, #4]
 80032a0:	9800      	ldr	r0, [sp, #0]
 80032a2:	9d08      	ldr	r5, [sp, #32]
 80032a4:	3243      	adds	r2, #67	@ 0x43
 80032a6:	47a8      	blx	r5
 80032a8:	3001      	adds	r0, #1
 80032aa:	d025      	beq.n	80032f8 <_printf_common+0xa8>
 80032ac:	2206      	movs	r2, #6
 80032ae:	6823      	ldr	r3, [r4, #0]
 80032b0:	2500      	movs	r5, #0
 80032b2:	4013      	ands	r3, r2
 80032b4:	2b04      	cmp	r3, #4
 80032b6:	d105      	bne.n	80032c4 <_printf_common+0x74>
 80032b8:	6833      	ldr	r3, [r6, #0]
 80032ba:	68e5      	ldr	r5, [r4, #12]
 80032bc:	1aed      	subs	r5, r5, r3
 80032be:	43eb      	mvns	r3, r5
 80032c0:	17db      	asrs	r3, r3, #31
 80032c2:	401d      	ands	r5, r3
 80032c4:	68a3      	ldr	r3, [r4, #8]
 80032c6:	6922      	ldr	r2, [r4, #16]
 80032c8:	4293      	cmp	r3, r2
 80032ca:	dd01      	ble.n	80032d0 <_printf_common+0x80>
 80032cc:	1a9b      	subs	r3, r3, r2
 80032ce:	18ed      	adds	r5, r5, r3
 80032d0:	2600      	movs	r6, #0
 80032d2:	42b5      	cmp	r5, r6
 80032d4:	d120      	bne.n	8003318 <_printf_common+0xc8>
 80032d6:	2000      	movs	r0, #0
 80032d8:	e010      	b.n	80032fc <_printf_common+0xac>
 80032da:	3501      	adds	r5, #1
 80032dc:	68e3      	ldr	r3, [r4, #12]
 80032de:	6832      	ldr	r2, [r6, #0]
 80032e0:	1a9b      	subs	r3, r3, r2
 80032e2:	42ab      	cmp	r3, r5
 80032e4:	ddd2      	ble.n	800328c <_printf_common+0x3c>
 80032e6:	0022      	movs	r2, r4
 80032e8:	2301      	movs	r3, #1
 80032ea:	9901      	ldr	r1, [sp, #4]
 80032ec:	9800      	ldr	r0, [sp, #0]
 80032ee:	9f08      	ldr	r7, [sp, #32]
 80032f0:	3219      	adds	r2, #25
 80032f2:	47b8      	blx	r7
 80032f4:	3001      	adds	r0, #1
 80032f6:	d1f0      	bne.n	80032da <_printf_common+0x8a>
 80032f8:	2001      	movs	r0, #1
 80032fa:	4240      	negs	r0, r0
 80032fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80032fe:	2030      	movs	r0, #48	@ 0x30
 8003300:	18e1      	adds	r1, r4, r3
 8003302:	3143      	adds	r1, #67	@ 0x43
 8003304:	7008      	strb	r0, [r1, #0]
 8003306:	0021      	movs	r1, r4
 8003308:	1c5a      	adds	r2, r3, #1
 800330a:	3145      	adds	r1, #69	@ 0x45
 800330c:	7809      	ldrb	r1, [r1, #0]
 800330e:	18a2      	adds	r2, r4, r2
 8003310:	3243      	adds	r2, #67	@ 0x43
 8003312:	3302      	adds	r3, #2
 8003314:	7011      	strb	r1, [r2, #0]
 8003316:	e7c1      	b.n	800329c <_printf_common+0x4c>
 8003318:	0022      	movs	r2, r4
 800331a:	2301      	movs	r3, #1
 800331c:	9901      	ldr	r1, [sp, #4]
 800331e:	9800      	ldr	r0, [sp, #0]
 8003320:	9f08      	ldr	r7, [sp, #32]
 8003322:	321a      	adds	r2, #26
 8003324:	47b8      	blx	r7
 8003326:	3001      	adds	r0, #1
 8003328:	d0e6      	beq.n	80032f8 <_printf_common+0xa8>
 800332a:	3601      	adds	r6, #1
 800332c:	e7d1      	b.n	80032d2 <_printf_common+0x82>
	...

08003330 <_printf_i>:
 8003330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003332:	b08b      	sub	sp, #44	@ 0x2c
 8003334:	9206      	str	r2, [sp, #24]
 8003336:	000a      	movs	r2, r1
 8003338:	3243      	adds	r2, #67	@ 0x43
 800333a:	9307      	str	r3, [sp, #28]
 800333c:	9005      	str	r0, [sp, #20]
 800333e:	9203      	str	r2, [sp, #12]
 8003340:	7e0a      	ldrb	r2, [r1, #24]
 8003342:	000c      	movs	r4, r1
 8003344:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003346:	2a78      	cmp	r2, #120	@ 0x78
 8003348:	d809      	bhi.n	800335e <_printf_i+0x2e>
 800334a:	2a62      	cmp	r2, #98	@ 0x62
 800334c:	d80b      	bhi.n	8003366 <_printf_i+0x36>
 800334e:	2a00      	cmp	r2, #0
 8003350:	d100      	bne.n	8003354 <_printf_i+0x24>
 8003352:	e0bc      	b.n	80034ce <_printf_i+0x19e>
 8003354:	497b      	ldr	r1, [pc, #492]	@ (8003544 <_printf_i+0x214>)
 8003356:	9104      	str	r1, [sp, #16]
 8003358:	2a58      	cmp	r2, #88	@ 0x58
 800335a:	d100      	bne.n	800335e <_printf_i+0x2e>
 800335c:	e090      	b.n	8003480 <_printf_i+0x150>
 800335e:	0025      	movs	r5, r4
 8003360:	3542      	adds	r5, #66	@ 0x42
 8003362:	702a      	strb	r2, [r5, #0]
 8003364:	e022      	b.n	80033ac <_printf_i+0x7c>
 8003366:	0010      	movs	r0, r2
 8003368:	3863      	subs	r0, #99	@ 0x63
 800336a:	2815      	cmp	r0, #21
 800336c:	d8f7      	bhi.n	800335e <_printf_i+0x2e>
 800336e:	f7fc fecb 	bl	8000108 <__gnu_thumb1_case_shi>
 8003372:	0016      	.short	0x0016
 8003374:	fff6001f 	.word	0xfff6001f
 8003378:	fff6fff6 	.word	0xfff6fff6
 800337c:	001ffff6 	.word	0x001ffff6
 8003380:	fff6fff6 	.word	0xfff6fff6
 8003384:	fff6fff6 	.word	0xfff6fff6
 8003388:	003600a1 	.word	0x003600a1
 800338c:	fff60080 	.word	0xfff60080
 8003390:	00b2fff6 	.word	0x00b2fff6
 8003394:	0036fff6 	.word	0x0036fff6
 8003398:	fff6fff6 	.word	0xfff6fff6
 800339c:	0084      	.short	0x0084
 800339e:	0025      	movs	r5, r4
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	3542      	adds	r5, #66	@ 0x42
 80033a4:	1d11      	adds	r1, r2, #4
 80033a6:	6019      	str	r1, [r3, #0]
 80033a8:	6813      	ldr	r3, [r2, #0]
 80033aa:	702b      	strb	r3, [r5, #0]
 80033ac:	2301      	movs	r3, #1
 80033ae:	e0a0      	b.n	80034f2 <_printf_i+0x1c2>
 80033b0:	6818      	ldr	r0, [r3, #0]
 80033b2:	6809      	ldr	r1, [r1, #0]
 80033b4:	1d02      	adds	r2, r0, #4
 80033b6:	060d      	lsls	r5, r1, #24
 80033b8:	d50b      	bpl.n	80033d2 <_printf_i+0xa2>
 80033ba:	6806      	ldr	r6, [r0, #0]
 80033bc:	601a      	str	r2, [r3, #0]
 80033be:	2e00      	cmp	r6, #0
 80033c0:	da03      	bge.n	80033ca <_printf_i+0x9a>
 80033c2:	232d      	movs	r3, #45	@ 0x2d
 80033c4:	9a03      	ldr	r2, [sp, #12]
 80033c6:	4276      	negs	r6, r6
 80033c8:	7013      	strb	r3, [r2, #0]
 80033ca:	4b5e      	ldr	r3, [pc, #376]	@ (8003544 <_printf_i+0x214>)
 80033cc:	270a      	movs	r7, #10
 80033ce:	9304      	str	r3, [sp, #16]
 80033d0:	e018      	b.n	8003404 <_printf_i+0xd4>
 80033d2:	6806      	ldr	r6, [r0, #0]
 80033d4:	601a      	str	r2, [r3, #0]
 80033d6:	0649      	lsls	r1, r1, #25
 80033d8:	d5f1      	bpl.n	80033be <_printf_i+0x8e>
 80033da:	b236      	sxth	r6, r6
 80033dc:	e7ef      	b.n	80033be <_printf_i+0x8e>
 80033de:	6808      	ldr	r0, [r1, #0]
 80033e0:	6819      	ldr	r1, [r3, #0]
 80033e2:	c940      	ldmia	r1!, {r6}
 80033e4:	0605      	lsls	r5, r0, #24
 80033e6:	d402      	bmi.n	80033ee <_printf_i+0xbe>
 80033e8:	0640      	lsls	r0, r0, #25
 80033ea:	d500      	bpl.n	80033ee <_printf_i+0xbe>
 80033ec:	b2b6      	uxth	r6, r6
 80033ee:	6019      	str	r1, [r3, #0]
 80033f0:	4b54      	ldr	r3, [pc, #336]	@ (8003544 <_printf_i+0x214>)
 80033f2:	270a      	movs	r7, #10
 80033f4:	9304      	str	r3, [sp, #16]
 80033f6:	2a6f      	cmp	r2, #111	@ 0x6f
 80033f8:	d100      	bne.n	80033fc <_printf_i+0xcc>
 80033fa:	3f02      	subs	r7, #2
 80033fc:	0023      	movs	r3, r4
 80033fe:	2200      	movs	r2, #0
 8003400:	3343      	adds	r3, #67	@ 0x43
 8003402:	701a      	strb	r2, [r3, #0]
 8003404:	6863      	ldr	r3, [r4, #4]
 8003406:	60a3      	str	r3, [r4, #8]
 8003408:	2b00      	cmp	r3, #0
 800340a:	db03      	blt.n	8003414 <_printf_i+0xe4>
 800340c:	2104      	movs	r1, #4
 800340e:	6822      	ldr	r2, [r4, #0]
 8003410:	438a      	bics	r2, r1
 8003412:	6022      	str	r2, [r4, #0]
 8003414:	2e00      	cmp	r6, #0
 8003416:	d102      	bne.n	800341e <_printf_i+0xee>
 8003418:	9d03      	ldr	r5, [sp, #12]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00c      	beq.n	8003438 <_printf_i+0x108>
 800341e:	9d03      	ldr	r5, [sp, #12]
 8003420:	0030      	movs	r0, r6
 8003422:	0039      	movs	r1, r7
 8003424:	f7fc ff00 	bl	8000228 <__aeabi_uidivmod>
 8003428:	9b04      	ldr	r3, [sp, #16]
 800342a:	3d01      	subs	r5, #1
 800342c:	5c5b      	ldrb	r3, [r3, r1]
 800342e:	702b      	strb	r3, [r5, #0]
 8003430:	0033      	movs	r3, r6
 8003432:	0006      	movs	r6, r0
 8003434:	429f      	cmp	r7, r3
 8003436:	d9f3      	bls.n	8003420 <_printf_i+0xf0>
 8003438:	2f08      	cmp	r7, #8
 800343a:	d109      	bne.n	8003450 <_printf_i+0x120>
 800343c:	6823      	ldr	r3, [r4, #0]
 800343e:	07db      	lsls	r3, r3, #31
 8003440:	d506      	bpl.n	8003450 <_printf_i+0x120>
 8003442:	6862      	ldr	r2, [r4, #4]
 8003444:	6923      	ldr	r3, [r4, #16]
 8003446:	429a      	cmp	r2, r3
 8003448:	dc02      	bgt.n	8003450 <_printf_i+0x120>
 800344a:	2330      	movs	r3, #48	@ 0x30
 800344c:	3d01      	subs	r5, #1
 800344e:	702b      	strb	r3, [r5, #0]
 8003450:	9b03      	ldr	r3, [sp, #12]
 8003452:	1b5b      	subs	r3, r3, r5
 8003454:	6123      	str	r3, [r4, #16]
 8003456:	9b07      	ldr	r3, [sp, #28]
 8003458:	0021      	movs	r1, r4
 800345a:	9300      	str	r3, [sp, #0]
 800345c:	9805      	ldr	r0, [sp, #20]
 800345e:	9b06      	ldr	r3, [sp, #24]
 8003460:	aa09      	add	r2, sp, #36	@ 0x24
 8003462:	f7ff fef5 	bl	8003250 <_printf_common>
 8003466:	3001      	adds	r0, #1
 8003468:	d148      	bne.n	80034fc <_printf_i+0x1cc>
 800346a:	2001      	movs	r0, #1
 800346c:	4240      	negs	r0, r0
 800346e:	b00b      	add	sp, #44	@ 0x2c
 8003470:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003472:	2220      	movs	r2, #32
 8003474:	6809      	ldr	r1, [r1, #0]
 8003476:	430a      	orrs	r2, r1
 8003478:	6022      	str	r2, [r4, #0]
 800347a:	2278      	movs	r2, #120	@ 0x78
 800347c:	4932      	ldr	r1, [pc, #200]	@ (8003548 <_printf_i+0x218>)
 800347e:	9104      	str	r1, [sp, #16]
 8003480:	0021      	movs	r1, r4
 8003482:	3145      	adds	r1, #69	@ 0x45
 8003484:	700a      	strb	r2, [r1, #0]
 8003486:	6819      	ldr	r1, [r3, #0]
 8003488:	6822      	ldr	r2, [r4, #0]
 800348a:	c940      	ldmia	r1!, {r6}
 800348c:	0610      	lsls	r0, r2, #24
 800348e:	d402      	bmi.n	8003496 <_printf_i+0x166>
 8003490:	0650      	lsls	r0, r2, #25
 8003492:	d500      	bpl.n	8003496 <_printf_i+0x166>
 8003494:	b2b6      	uxth	r6, r6
 8003496:	6019      	str	r1, [r3, #0]
 8003498:	07d3      	lsls	r3, r2, #31
 800349a:	d502      	bpl.n	80034a2 <_printf_i+0x172>
 800349c:	2320      	movs	r3, #32
 800349e:	4313      	orrs	r3, r2
 80034a0:	6023      	str	r3, [r4, #0]
 80034a2:	2e00      	cmp	r6, #0
 80034a4:	d001      	beq.n	80034aa <_printf_i+0x17a>
 80034a6:	2710      	movs	r7, #16
 80034a8:	e7a8      	b.n	80033fc <_printf_i+0xcc>
 80034aa:	2220      	movs	r2, #32
 80034ac:	6823      	ldr	r3, [r4, #0]
 80034ae:	4393      	bics	r3, r2
 80034b0:	6023      	str	r3, [r4, #0]
 80034b2:	e7f8      	b.n	80034a6 <_printf_i+0x176>
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	680d      	ldr	r5, [r1, #0]
 80034b8:	1d10      	adds	r0, r2, #4
 80034ba:	6949      	ldr	r1, [r1, #20]
 80034bc:	6018      	str	r0, [r3, #0]
 80034be:	6813      	ldr	r3, [r2, #0]
 80034c0:	062e      	lsls	r6, r5, #24
 80034c2:	d501      	bpl.n	80034c8 <_printf_i+0x198>
 80034c4:	6019      	str	r1, [r3, #0]
 80034c6:	e002      	b.n	80034ce <_printf_i+0x19e>
 80034c8:	066d      	lsls	r5, r5, #25
 80034ca:	d5fb      	bpl.n	80034c4 <_printf_i+0x194>
 80034cc:	8019      	strh	r1, [r3, #0]
 80034ce:	2300      	movs	r3, #0
 80034d0:	9d03      	ldr	r5, [sp, #12]
 80034d2:	6123      	str	r3, [r4, #16]
 80034d4:	e7bf      	b.n	8003456 <_printf_i+0x126>
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	1d11      	adds	r1, r2, #4
 80034da:	6019      	str	r1, [r3, #0]
 80034dc:	6815      	ldr	r5, [r2, #0]
 80034de:	2100      	movs	r1, #0
 80034e0:	0028      	movs	r0, r5
 80034e2:	6862      	ldr	r2, [r4, #4]
 80034e4:	f000 f858 	bl	8003598 <memchr>
 80034e8:	2800      	cmp	r0, #0
 80034ea:	d001      	beq.n	80034f0 <_printf_i+0x1c0>
 80034ec:	1b40      	subs	r0, r0, r5
 80034ee:	6060      	str	r0, [r4, #4]
 80034f0:	6863      	ldr	r3, [r4, #4]
 80034f2:	6123      	str	r3, [r4, #16]
 80034f4:	2300      	movs	r3, #0
 80034f6:	9a03      	ldr	r2, [sp, #12]
 80034f8:	7013      	strb	r3, [r2, #0]
 80034fa:	e7ac      	b.n	8003456 <_printf_i+0x126>
 80034fc:	002a      	movs	r2, r5
 80034fe:	6923      	ldr	r3, [r4, #16]
 8003500:	9906      	ldr	r1, [sp, #24]
 8003502:	9805      	ldr	r0, [sp, #20]
 8003504:	9d07      	ldr	r5, [sp, #28]
 8003506:	47a8      	blx	r5
 8003508:	3001      	adds	r0, #1
 800350a:	d0ae      	beq.n	800346a <_printf_i+0x13a>
 800350c:	6823      	ldr	r3, [r4, #0]
 800350e:	079b      	lsls	r3, r3, #30
 8003510:	d415      	bmi.n	800353e <_printf_i+0x20e>
 8003512:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003514:	68e0      	ldr	r0, [r4, #12]
 8003516:	4298      	cmp	r0, r3
 8003518:	daa9      	bge.n	800346e <_printf_i+0x13e>
 800351a:	0018      	movs	r0, r3
 800351c:	e7a7      	b.n	800346e <_printf_i+0x13e>
 800351e:	0022      	movs	r2, r4
 8003520:	2301      	movs	r3, #1
 8003522:	9906      	ldr	r1, [sp, #24]
 8003524:	9805      	ldr	r0, [sp, #20]
 8003526:	9e07      	ldr	r6, [sp, #28]
 8003528:	3219      	adds	r2, #25
 800352a:	47b0      	blx	r6
 800352c:	3001      	adds	r0, #1
 800352e:	d09c      	beq.n	800346a <_printf_i+0x13a>
 8003530:	3501      	adds	r5, #1
 8003532:	68e3      	ldr	r3, [r4, #12]
 8003534:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003536:	1a9b      	subs	r3, r3, r2
 8003538:	42ab      	cmp	r3, r5
 800353a:	dcf0      	bgt.n	800351e <_printf_i+0x1ee>
 800353c:	e7e9      	b.n	8003512 <_printf_i+0x1e2>
 800353e:	2500      	movs	r5, #0
 8003540:	e7f7      	b.n	8003532 <_printf_i+0x202>
 8003542:	46c0      	nop			@ (mov r8, r8)
 8003544:	080036a9 	.word	0x080036a9
 8003548:	080036ba 	.word	0x080036ba

0800354c <memmove>:
 800354c:	b510      	push	{r4, lr}
 800354e:	4288      	cmp	r0, r1
 8003550:	d806      	bhi.n	8003560 <memmove+0x14>
 8003552:	2300      	movs	r3, #0
 8003554:	429a      	cmp	r2, r3
 8003556:	d008      	beq.n	800356a <memmove+0x1e>
 8003558:	5ccc      	ldrb	r4, [r1, r3]
 800355a:	54c4      	strb	r4, [r0, r3]
 800355c:	3301      	adds	r3, #1
 800355e:	e7f9      	b.n	8003554 <memmove+0x8>
 8003560:	188b      	adds	r3, r1, r2
 8003562:	4298      	cmp	r0, r3
 8003564:	d2f5      	bcs.n	8003552 <memmove+0x6>
 8003566:	3a01      	subs	r2, #1
 8003568:	d200      	bcs.n	800356c <memmove+0x20>
 800356a:	bd10      	pop	{r4, pc}
 800356c:	5c8b      	ldrb	r3, [r1, r2]
 800356e:	5483      	strb	r3, [r0, r2]
 8003570:	e7f9      	b.n	8003566 <memmove+0x1a>
	...

08003574 <_sbrk_r>:
 8003574:	2300      	movs	r3, #0
 8003576:	b570      	push	{r4, r5, r6, lr}
 8003578:	4d06      	ldr	r5, [pc, #24]	@ (8003594 <_sbrk_r+0x20>)
 800357a:	0004      	movs	r4, r0
 800357c:	0008      	movs	r0, r1
 800357e:	602b      	str	r3, [r5, #0]
 8003580:	f7fd f950 	bl	8000824 <_sbrk>
 8003584:	1c43      	adds	r3, r0, #1
 8003586:	d103      	bne.n	8003590 <_sbrk_r+0x1c>
 8003588:	682b      	ldr	r3, [r5, #0]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d000      	beq.n	8003590 <_sbrk_r+0x1c>
 800358e:	6023      	str	r3, [r4, #0]
 8003590:	bd70      	pop	{r4, r5, r6, pc}
 8003592:	46c0      	nop			@ (mov r8, r8)
 8003594:	200002a0 	.word	0x200002a0

08003598 <memchr>:
 8003598:	b2c9      	uxtb	r1, r1
 800359a:	1882      	adds	r2, r0, r2
 800359c:	4290      	cmp	r0, r2
 800359e:	d101      	bne.n	80035a4 <memchr+0xc>
 80035a0:	2000      	movs	r0, #0
 80035a2:	4770      	bx	lr
 80035a4:	7803      	ldrb	r3, [r0, #0]
 80035a6:	428b      	cmp	r3, r1
 80035a8:	d0fb      	beq.n	80035a2 <memchr+0xa>
 80035aa:	3001      	adds	r0, #1
 80035ac:	e7f6      	b.n	800359c <memchr+0x4>

080035ae <memcpy>:
 80035ae:	2300      	movs	r3, #0
 80035b0:	b510      	push	{r4, lr}
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d100      	bne.n	80035b8 <memcpy+0xa>
 80035b6:	bd10      	pop	{r4, pc}
 80035b8:	5ccc      	ldrb	r4, [r1, r3]
 80035ba:	54c4      	strb	r4, [r0, r3]
 80035bc:	3301      	adds	r3, #1
 80035be:	e7f8      	b.n	80035b2 <memcpy+0x4>

080035c0 <_realloc_r>:
 80035c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80035c2:	0006      	movs	r6, r0
 80035c4:	000c      	movs	r4, r1
 80035c6:	0015      	movs	r5, r2
 80035c8:	2900      	cmp	r1, #0
 80035ca:	d105      	bne.n	80035d8 <_realloc_r+0x18>
 80035cc:	0011      	movs	r1, r2
 80035ce:	f7ff fc51 	bl	8002e74 <_malloc_r>
 80035d2:	0004      	movs	r4, r0
 80035d4:	0020      	movs	r0, r4
 80035d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80035d8:	2a00      	cmp	r2, #0
 80035da:	d103      	bne.n	80035e4 <_realloc_r+0x24>
 80035dc:	f7ff fbde 	bl	8002d9c <_free_r>
 80035e0:	2400      	movs	r4, #0
 80035e2:	e7f7      	b.n	80035d4 <_realloc_r+0x14>
 80035e4:	f000 f81b 	bl	800361e <_malloc_usable_size_r>
 80035e8:	0007      	movs	r7, r0
 80035ea:	4285      	cmp	r5, r0
 80035ec:	d802      	bhi.n	80035f4 <_realloc_r+0x34>
 80035ee:	0843      	lsrs	r3, r0, #1
 80035f0:	42ab      	cmp	r3, r5
 80035f2:	d3ef      	bcc.n	80035d4 <_realloc_r+0x14>
 80035f4:	0029      	movs	r1, r5
 80035f6:	0030      	movs	r0, r6
 80035f8:	f7ff fc3c 	bl	8002e74 <_malloc_r>
 80035fc:	9001      	str	r0, [sp, #4]
 80035fe:	2800      	cmp	r0, #0
 8003600:	d0ee      	beq.n	80035e0 <_realloc_r+0x20>
 8003602:	002a      	movs	r2, r5
 8003604:	42bd      	cmp	r5, r7
 8003606:	d900      	bls.n	800360a <_realloc_r+0x4a>
 8003608:	003a      	movs	r2, r7
 800360a:	0021      	movs	r1, r4
 800360c:	9801      	ldr	r0, [sp, #4]
 800360e:	f7ff ffce 	bl	80035ae <memcpy>
 8003612:	0021      	movs	r1, r4
 8003614:	0030      	movs	r0, r6
 8003616:	f7ff fbc1 	bl	8002d9c <_free_r>
 800361a:	9c01      	ldr	r4, [sp, #4]
 800361c:	e7da      	b.n	80035d4 <_realloc_r+0x14>

0800361e <_malloc_usable_size_r>:
 800361e:	1f0b      	subs	r3, r1, #4
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	1f18      	subs	r0, r3, #4
 8003624:	2b00      	cmp	r3, #0
 8003626:	da01      	bge.n	800362c <_malloc_usable_size_r+0xe>
 8003628:	580b      	ldr	r3, [r1, r0]
 800362a:	18c0      	adds	r0, r0, r3
 800362c:	4770      	bx	lr
	...

08003630 <_init>:
 8003630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003632:	46c0      	nop			@ (mov r8, r8)
 8003634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003636:	bc08      	pop	{r3}
 8003638:	469e      	mov	lr, r3
 800363a:	4770      	bx	lr

0800363c <_fini>:
 800363c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800363e:	46c0      	nop			@ (mov r8, r8)
 8003640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003642:	bc08      	pop	{r3}
 8003644:	469e      	mov	lr, r3
 8003646:	4770      	bx	lr
