
starter-task-six.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a8c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000408  08007b50  08007b50  00008b50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f58  08007f58  000091d4  2**0
                  CONTENTS
  4 .ARM          00000000  08007f58  08007f58  000091d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007f58  08007f58  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f58  08007f58  00008f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007f5c  08007f5c  00008f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08007f60  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  200001d4  08008134  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000040c  08008134  0000940c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008c61  00000000  00000000  000091fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017f3  00000000  00000000  00011e5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000798  00000000  00000000  00013650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005d0  00000000  00000000  00013de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012c39  00000000  00000000  000143b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a71c  00000000  00000000  00026ff1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006d509  00000000  00000000  0003170d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009ec16  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b40  00000000  00000000  0009ec5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000a179c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d4 	.word	0x200001d4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007b34 	.word	0x08007b34

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001d8 	.word	0x200001d8
 8000104:	08007b34 	.word	0x08007b34

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f000 ff69 	bl	8001314 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 fea9 	bl	80011a4 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 ff5b 	bl	8001314 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 ff51 	bl	8001314 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 fed3 	bl	800122c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 fec9 	bl	800122c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_dadd>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	4657      	mov	r7, sl
 80004ac:	464e      	mov	r6, r9
 80004ae:	4645      	mov	r5, r8
 80004b0:	46de      	mov	lr, fp
 80004b2:	b5e0      	push	{r5, r6, r7, lr}
 80004b4:	b083      	sub	sp, #12
 80004b6:	9000      	str	r0, [sp, #0]
 80004b8:	9101      	str	r1, [sp, #4]
 80004ba:	030c      	lsls	r4, r1, #12
 80004bc:	004f      	lsls	r7, r1, #1
 80004be:	0fce      	lsrs	r6, r1, #31
 80004c0:	0a61      	lsrs	r1, r4, #9
 80004c2:	9c00      	ldr	r4, [sp, #0]
 80004c4:	031d      	lsls	r5, r3, #12
 80004c6:	0f64      	lsrs	r4, r4, #29
 80004c8:	430c      	orrs	r4, r1
 80004ca:	9900      	ldr	r1, [sp, #0]
 80004cc:	9200      	str	r2, [sp, #0]
 80004ce:	9301      	str	r3, [sp, #4]
 80004d0:	00c8      	lsls	r0, r1, #3
 80004d2:	0059      	lsls	r1, r3, #1
 80004d4:	0d4b      	lsrs	r3, r1, #21
 80004d6:	4699      	mov	r9, r3
 80004d8:	9a00      	ldr	r2, [sp, #0]
 80004da:	9b01      	ldr	r3, [sp, #4]
 80004dc:	0a6d      	lsrs	r5, r5, #9
 80004de:	0fd9      	lsrs	r1, r3, #31
 80004e0:	0f53      	lsrs	r3, r2, #29
 80004e2:	432b      	orrs	r3, r5
 80004e4:	469a      	mov	sl, r3
 80004e6:	9b00      	ldr	r3, [sp, #0]
 80004e8:	0d7f      	lsrs	r7, r7, #21
 80004ea:	00da      	lsls	r2, r3, #3
 80004ec:	4694      	mov	ip, r2
 80004ee:	464a      	mov	r2, r9
 80004f0:	46b0      	mov	r8, r6
 80004f2:	1aba      	subs	r2, r7, r2
 80004f4:	428e      	cmp	r6, r1
 80004f6:	d100      	bne.n	80004fa <__aeabi_dadd+0x52>
 80004f8:	e0b0      	b.n	800065c <__aeabi_dadd+0x1b4>
 80004fa:	2a00      	cmp	r2, #0
 80004fc:	dc00      	bgt.n	8000500 <__aeabi_dadd+0x58>
 80004fe:	e078      	b.n	80005f2 <__aeabi_dadd+0x14a>
 8000500:	4649      	mov	r1, r9
 8000502:	2900      	cmp	r1, #0
 8000504:	d100      	bne.n	8000508 <__aeabi_dadd+0x60>
 8000506:	e0e9      	b.n	80006dc <__aeabi_dadd+0x234>
 8000508:	49c9      	ldr	r1, [pc, #804]	@ (8000830 <__aeabi_dadd+0x388>)
 800050a:	428f      	cmp	r7, r1
 800050c:	d100      	bne.n	8000510 <__aeabi_dadd+0x68>
 800050e:	e195      	b.n	800083c <__aeabi_dadd+0x394>
 8000510:	2501      	movs	r5, #1
 8000512:	2a38      	cmp	r2, #56	@ 0x38
 8000514:	dc16      	bgt.n	8000544 <__aeabi_dadd+0x9c>
 8000516:	2180      	movs	r1, #128	@ 0x80
 8000518:	4653      	mov	r3, sl
 800051a:	0409      	lsls	r1, r1, #16
 800051c:	430b      	orrs	r3, r1
 800051e:	469a      	mov	sl, r3
 8000520:	2a1f      	cmp	r2, #31
 8000522:	dd00      	ble.n	8000526 <__aeabi_dadd+0x7e>
 8000524:	e1e7      	b.n	80008f6 <__aeabi_dadd+0x44e>
 8000526:	2120      	movs	r1, #32
 8000528:	4655      	mov	r5, sl
 800052a:	1a8b      	subs	r3, r1, r2
 800052c:	4661      	mov	r1, ip
 800052e:	409d      	lsls	r5, r3
 8000530:	40d1      	lsrs	r1, r2
 8000532:	430d      	orrs	r5, r1
 8000534:	4661      	mov	r1, ip
 8000536:	4099      	lsls	r1, r3
 8000538:	1e4b      	subs	r3, r1, #1
 800053a:	4199      	sbcs	r1, r3
 800053c:	4653      	mov	r3, sl
 800053e:	40d3      	lsrs	r3, r2
 8000540:	430d      	orrs	r5, r1
 8000542:	1ae4      	subs	r4, r4, r3
 8000544:	1b45      	subs	r5, r0, r5
 8000546:	42a8      	cmp	r0, r5
 8000548:	4180      	sbcs	r0, r0
 800054a:	4240      	negs	r0, r0
 800054c:	1a24      	subs	r4, r4, r0
 800054e:	0223      	lsls	r3, r4, #8
 8000550:	d400      	bmi.n	8000554 <__aeabi_dadd+0xac>
 8000552:	e10f      	b.n	8000774 <__aeabi_dadd+0x2cc>
 8000554:	0264      	lsls	r4, r4, #9
 8000556:	0a64      	lsrs	r4, r4, #9
 8000558:	2c00      	cmp	r4, #0
 800055a:	d100      	bne.n	800055e <__aeabi_dadd+0xb6>
 800055c:	e139      	b.n	80007d2 <__aeabi_dadd+0x32a>
 800055e:	0020      	movs	r0, r4
 8000560:	f001 ff2a 	bl	80023b8 <__clzsi2>
 8000564:	0003      	movs	r3, r0
 8000566:	3b08      	subs	r3, #8
 8000568:	2120      	movs	r1, #32
 800056a:	0028      	movs	r0, r5
 800056c:	1aca      	subs	r2, r1, r3
 800056e:	40d0      	lsrs	r0, r2
 8000570:	409c      	lsls	r4, r3
 8000572:	0002      	movs	r2, r0
 8000574:	409d      	lsls	r5, r3
 8000576:	4322      	orrs	r2, r4
 8000578:	429f      	cmp	r7, r3
 800057a:	dd00      	ble.n	800057e <__aeabi_dadd+0xd6>
 800057c:	e173      	b.n	8000866 <__aeabi_dadd+0x3be>
 800057e:	1bd8      	subs	r0, r3, r7
 8000580:	3001      	adds	r0, #1
 8000582:	1a09      	subs	r1, r1, r0
 8000584:	002c      	movs	r4, r5
 8000586:	408d      	lsls	r5, r1
 8000588:	40c4      	lsrs	r4, r0
 800058a:	1e6b      	subs	r3, r5, #1
 800058c:	419d      	sbcs	r5, r3
 800058e:	0013      	movs	r3, r2
 8000590:	40c2      	lsrs	r2, r0
 8000592:	408b      	lsls	r3, r1
 8000594:	4325      	orrs	r5, r4
 8000596:	2700      	movs	r7, #0
 8000598:	0014      	movs	r4, r2
 800059a:	431d      	orrs	r5, r3
 800059c:	076b      	lsls	r3, r5, #29
 800059e:	d009      	beq.n	80005b4 <__aeabi_dadd+0x10c>
 80005a0:	230f      	movs	r3, #15
 80005a2:	402b      	ands	r3, r5
 80005a4:	2b04      	cmp	r3, #4
 80005a6:	d005      	beq.n	80005b4 <__aeabi_dadd+0x10c>
 80005a8:	1d2b      	adds	r3, r5, #4
 80005aa:	42ab      	cmp	r3, r5
 80005ac:	41ad      	sbcs	r5, r5
 80005ae:	426d      	negs	r5, r5
 80005b0:	1964      	adds	r4, r4, r5
 80005b2:	001d      	movs	r5, r3
 80005b4:	0223      	lsls	r3, r4, #8
 80005b6:	d400      	bmi.n	80005ba <__aeabi_dadd+0x112>
 80005b8:	e12d      	b.n	8000816 <__aeabi_dadd+0x36e>
 80005ba:	4a9d      	ldr	r2, [pc, #628]	@ (8000830 <__aeabi_dadd+0x388>)
 80005bc:	3701      	adds	r7, #1
 80005be:	4297      	cmp	r7, r2
 80005c0:	d100      	bne.n	80005c4 <__aeabi_dadd+0x11c>
 80005c2:	e0d3      	b.n	800076c <__aeabi_dadd+0x2c4>
 80005c4:	4646      	mov	r6, r8
 80005c6:	499b      	ldr	r1, [pc, #620]	@ (8000834 <__aeabi_dadd+0x38c>)
 80005c8:	08ed      	lsrs	r5, r5, #3
 80005ca:	4021      	ands	r1, r4
 80005cc:	074a      	lsls	r2, r1, #29
 80005ce:	432a      	orrs	r2, r5
 80005d0:	057c      	lsls	r4, r7, #21
 80005d2:	024d      	lsls	r5, r1, #9
 80005d4:	0b2d      	lsrs	r5, r5, #12
 80005d6:	0d64      	lsrs	r4, r4, #21
 80005d8:	0524      	lsls	r4, r4, #20
 80005da:	432c      	orrs	r4, r5
 80005dc:	07f6      	lsls	r6, r6, #31
 80005de:	4334      	orrs	r4, r6
 80005e0:	0010      	movs	r0, r2
 80005e2:	0021      	movs	r1, r4
 80005e4:	b003      	add	sp, #12
 80005e6:	bcf0      	pop	{r4, r5, r6, r7}
 80005e8:	46bb      	mov	fp, r7
 80005ea:	46b2      	mov	sl, r6
 80005ec:	46a9      	mov	r9, r5
 80005ee:	46a0      	mov	r8, r4
 80005f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f2:	2a00      	cmp	r2, #0
 80005f4:	d100      	bne.n	80005f8 <__aeabi_dadd+0x150>
 80005f6:	e084      	b.n	8000702 <__aeabi_dadd+0x25a>
 80005f8:	464a      	mov	r2, r9
 80005fa:	1bd2      	subs	r2, r2, r7
 80005fc:	2f00      	cmp	r7, #0
 80005fe:	d000      	beq.n	8000602 <__aeabi_dadd+0x15a>
 8000600:	e16d      	b.n	80008de <__aeabi_dadd+0x436>
 8000602:	0025      	movs	r5, r4
 8000604:	4305      	orrs	r5, r0
 8000606:	d100      	bne.n	800060a <__aeabi_dadd+0x162>
 8000608:	e127      	b.n	800085a <__aeabi_dadd+0x3b2>
 800060a:	1e56      	subs	r6, r2, #1
 800060c:	2a01      	cmp	r2, #1
 800060e:	d100      	bne.n	8000612 <__aeabi_dadd+0x16a>
 8000610:	e23b      	b.n	8000a8a <__aeabi_dadd+0x5e2>
 8000612:	4d87      	ldr	r5, [pc, #540]	@ (8000830 <__aeabi_dadd+0x388>)
 8000614:	42aa      	cmp	r2, r5
 8000616:	d100      	bne.n	800061a <__aeabi_dadd+0x172>
 8000618:	e26a      	b.n	8000af0 <__aeabi_dadd+0x648>
 800061a:	2501      	movs	r5, #1
 800061c:	2e38      	cmp	r6, #56	@ 0x38
 800061e:	dc12      	bgt.n	8000646 <__aeabi_dadd+0x19e>
 8000620:	0032      	movs	r2, r6
 8000622:	2a1f      	cmp	r2, #31
 8000624:	dd00      	ble.n	8000628 <__aeabi_dadd+0x180>
 8000626:	e1f8      	b.n	8000a1a <__aeabi_dadd+0x572>
 8000628:	2620      	movs	r6, #32
 800062a:	0025      	movs	r5, r4
 800062c:	1ab6      	subs	r6, r6, r2
 800062e:	0007      	movs	r7, r0
 8000630:	4653      	mov	r3, sl
 8000632:	40b0      	lsls	r0, r6
 8000634:	40d4      	lsrs	r4, r2
 8000636:	40b5      	lsls	r5, r6
 8000638:	40d7      	lsrs	r7, r2
 800063a:	1e46      	subs	r6, r0, #1
 800063c:	41b0      	sbcs	r0, r6
 800063e:	1b1b      	subs	r3, r3, r4
 8000640:	469a      	mov	sl, r3
 8000642:	433d      	orrs	r5, r7
 8000644:	4305      	orrs	r5, r0
 8000646:	4662      	mov	r2, ip
 8000648:	1b55      	subs	r5, r2, r5
 800064a:	45ac      	cmp	ip, r5
 800064c:	4192      	sbcs	r2, r2
 800064e:	4653      	mov	r3, sl
 8000650:	4252      	negs	r2, r2
 8000652:	000e      	movs	r6, r1
 8000654:	464f      	mov	r7, r9
 8000656:	4688      	mov	r8, r1
 8000658:	1a9c      	subs	r4, r3, r2
 800065a:	e778      	b.n	800054e <__aeabi_dadd+0xa6>
 800065c:	2a00      	cmp	r2, #0
 800065e:	dc00      	bgt.n	8000662 <__aeabi_dadd+0x1ba>
 8000660:	e08e      	b.n	8000780 <__aeabi_dadd+0x2d8>
 8000662:	4649      	mov	r1, r9
 8000664:	2900      	cmp	r1, #0
 8000666:	d175      	bne.n	8000754 <__aeabi_dadd+0x2ac>
 8000668:	4661      	mov	r1, ip
 800066a:	4653      	mov	r3, sl
 800066c:	4319      	orrs	r1, r3
 800066e:	d100      	bne.n	8000672 <__aeabi_dadd+0x1ca>
 8000670:	e0f6      	b.n	8000860 <__aeabi_dadd+0x3b8>
 8000672:	1e51      	subs	r1, r2, #1
 8000674:	2a01      	cmp	r2, #1
 8000676:	d100      	bne.n	800067a <__aeabi_dadd+0x1d2>
 8000678:	e191      	b.n	800099e <__aeabi_dadd+0x4f6>
 800067a:	4d6d      	ldr	r5, [pc, #436]	@ (8000830 <__aeabi_dadd+0x388>)
 800067c:	42aa      	cmp	r2, r5
 800067e:	d100      	bne.n	8000682 <__aeabi_dadd+0x1da>
 8000680:	e0dc      	b.n	800083c <__aeabi_dadd+0x394>
 8000682:	2501      	movs	r5, #1
 8000684:	2938      	cmp	r1, #56	@ 0x38
 8000686:	dc14      	bgt.n	80006b2 <__aeabi_dadd+0x20a>
 8000688:	000a      	movs	r2, r1
 800068a:	2a1f      	cmp	r2, #31
 800068c:	dd00      	ble.n	8000690 <__aeabi_dadd+0x1e8>
 800068e:	e1a2      	b.n	80009d6 <__aeabi_dadd+0x52e>
 8000690:	2120      	movs	r1, #32
 8000692:	4653      	mov	r3, sl
 8000694:	1a89      	subs	r1, r1, r2
 8000696:	408b      	lsls	r3, r1
 8000698:	001d      	movs	r5, r3
 800069a:	4663      	mov	r3, ip
 800069c:	40d3      	lsrs	r3, r2
 800069e:	431d      	orrs	r5, r3
 80006a0:	4663      	mov	r3, ip
 80006a2:	408b      	lsls	r3, r1
 80006a4:	0019      	movs	r1, r3
 80006a6:	1e4b      	subs	r3, r1, #1
 80006a8:	4199      	sbcs	r1, r3
 80006aa:	4653      	mov	r3, sl
 80006ac:	40d3      	lsrs	r3, r2
 80006ae:	430d      	orrs	r5, r1
 80006b0:	18e4      	adds	r4, r4, r3
 80006b2:	182d      	adds	r5, r5, r0
 80006b4:	4285      	cmp	r5, r0
 80006b6:	4180      	sbcs	r0, r0
 80006b8:	4240      	negs	r0, r0
 80006ba:	1824      	adds	r4, r4, r0
 80006bc:	0223      	lsls	r3, r4, #8
 80006be:	d559      	bpl.n	8000774 <__aeabi_dadd+0x2cc>
 80006c0:	4b5b      	ldr	r3, [pc, #364]	@ (8000830 <__aeabi_dadd+0x388>)
 80006c2:	3701      	adds	r7, #1
 80006c4:	429f      	cmp	r7, r3
 80006c6:	d051      	beq.n	800076c <__aeabi_dadd+0x2c4>
 80006c8:	2101      	movs	r1, #1
 80006ca:	4b5a      	ldr	r3, [pc, #360]	@ (8000834 <__aeabi_dadd+0x38c>)
 80006cc:	086a      	lsrs	r2, r5, #1
 80006ce:	401c      	ands	r4, r3
 80006d0:	4029      	ands	r1, r5
 80006d2:	430a      	orrs	r2, r1
 80006d4:	07e5      	lsls	r5, r4, #31
 80006d6:	4315      	orrs	r5, r2
 80006d8:	0864      	lsrs	r4, r4, #1
 80006da:	e75f      	b.n	800059c <__aeabi_dadd+0xf4>
 80006dc:	4661      	mov	r1, ip
 80006de:	4653      	mov	r3, sl
 80006e0:	4319      	orrs	r1, r3
 80006e2:	d100      	bne.n	80006e6 <__aeabi_dadd+0x23e>
 80006e4:	e0bc      	b.n	8000860 <__aeabi_dadd+0x3b8>
 80006e6:	1e51      	subs	r1, r2, #1
 80006e8:	2a01      	cmp	r2, #1
 80006ea:	d100      	bne.n	80006ee <__aeabi_dadd+0x246>
 80006ec:	e164      	b.n	80009b8 <__aeabi_dadd+0x510>
 80006ee:	4d50      	ldr	r5, [pc, #320]	@ (8000830 <__aeabi_dadd+0x388>)
 80006f0:	42aa      	cmp	r2, r5
 80006f2:	d100      	bne.n	80006f6 <__aeabi_dadd+0x24e>
 80006f4:	e16a      	b.n	80009cc <__aeabi_dadd+0x524>
 80006f6:	2501      	movs	r5, #1
 80006f8:	2938      	cmp	r1, #56	@ 0x38
 80006fa:	dd00      	ble.n	80006fe <__aeabi_dadd+0x256>
 80006fc:	e722      	b.n	8000544 <__aeabi_dadd+0x9c>
 80006fe:	000a      	movs	r2, r1
 8000700:	e70e      	b.n	8000520 <__aeabi_dadd+0x78>
 8000702:	4a4d      	ldr	r2, [pc, #308]	@ (8000838 <__aeabi_dadd+0x390>)
 8000704:	1c7d      	adds	r5, r7, #1
 8000706:	4215      	tst	r5, r2
 8000708:	d000      	beq.n	800070c <__aeabi_dadd+0x264>
 800070a:	e0d0      	b.n	80008ae <__aeabi_dadd+0x406>
 800070c:	0025      	movs	r5, r4
 800070e:	4662      	mov	r2, ip
 8000710:	4653      	mov	r3, sl
 8000712:	4305      	orrs	r5, r0
 8000714:	431a      	orrs	r2, r3
 8000716:	2f00      	cmp	r7, #0
 8000718:	d000      	beq.n	800071c <__aeabi_dadd+0x274>
 800071a:	e137      	b.n	800098c <__aeabi_dadd+0x4e4>
 800071c:	2d00      	cmp	r5, #0
 800071e:	d100      	bne.n	8000722 <__aeabi_dadd+0x27a>
 8000720:	e1a8      	b.n	8000a74 <__aeabi_dadd+0x5cc>
 8000722:	2a00      	cmp	r2, #0
 8000724:	d100      	bne.n	8000728 <__aeabi_dadd+0x280>
 8000726:	e16a      	b.n	80009fe <__aeabi_dadd+0x556>
 8000728:	4663      	mov	r3, ip
 800072a:	1ac5      	subs	r5, r0, r3
 800072c:	4653      	mov	r3, sl
 800072e:	1ae2      	subs	r2, r4, r3
 8000730:	42a8      	cmp	r0, r5
 8000732:	419b      	sbcs	r3, r3
 8000734:	425b      	negs	r3, r3
 8000736:	1ad3      	subs	r3, r2, r3
 8000738:	021a      	lsls	r2, r3, #8
 800073a:	d400      	bmi.n	800073e <__aeabi_dadd+0x296>
 800073c:	e203      	b.n	8000b46 <__aeabi_dadd+0x69e>
 800073e:	4663      	mov	r3, ip
 8000740:	1a1d      	subs	r5, r3, r0
 8000742:	45ac      	cmp	ip, r5
 8000744:	4192      	sbcs	r2, r2
 8000746:	4653      	mov	r3, sl
 8000748:	4252      	negs	r2, r2
 800074a:	1b1c      	subs	r4, r3, r4
 800074c:	000e      	movs	r6, r1
 800074e:	4688      	mov	r8, r1
 8000750:	1aa4      	subs	r4, r4, r2
 8000752:	e723      	b.n	800059c <__aeabi_dadd+0xf4>
 8000754:	4936      	ldr	r1, [pc, #216]	@ (8000830 <__aeabi_dadd+0x388>)
 8000756:	428f      	cmp	r7, r1
 8000758:	d070      	beq.n	800083c <__aeabi_dadd+0x394>
 800075a:	2501      	movs	r5, #1
 800075c:	2a38      	cmp	r2, #56	@ 0x38
 800075e:	dca8      	bgt.n	80006b2 <__aeabi_dadd+0x20a>
 8000760:	2180      	movs	r1, #128	@ 0x80
 8000762:	4653      	mov	r3, sl
 8000764:	0409      	lsls	r1, r1, #16
 8000766:	430b      	orrs	r3, r1
 8000768:	469a      	mov	sl, r3
 800076a:	e78e      	b.n	800068a <__aeabi_dadd+0x1e2>
 800076c:	003c      	movs	r4, r7
 800076e:	2500      	movs	r5, #0
 8000770:	2200      	movs	r2, #0
 8000772:	e731      	b.n	80005d8 <__aeabi_dadd+0x130>
 8000774:	2307      	movs	r3, #7
 8000776:	402b      	ands	r3, r5
 8000778:	2b00      	cmp	r3, #0
 800077a:	d000      	beq.n	800077e <__aeabi_dadd+0x2d6>
 800077c:	e710      	b.n	80005a0 <__aeabi_dadd+0xf8>
 800077e:	e093      	b.n	80008a8 <__aeabi_dadd+0x400>
 8000780:	2a00      	cmp	r2, #0
 8000782:	d074      	beq.n	800086e <__aeabi_dadd+0x3c6>
 8000784:	464a      	mov	r2, r9
 8000786:	1bd2      	subs	r2, r2, r7
 8000788:	2f00      	cmp	r7, #0
 800078a:	d100      	bne.n	800078e <__aeabi_dadd+0x2e6>
 800078c:	e0c7      	b.n	800091e <__aeabi_dadd+0x476>
 800078e:	4928      	ldr	r1, [pc, #160]	@ (8000830 <__aeabi_dadd+0x388>)
 8000790:	4589      	cmp	r9, r1
 8000792:	d100      	bne.n	8000796 <__aeabi_dadd+0x2ee>
 8000794:	e185      	b.n	8000aa2 <__aeabi_dadd+0x5fa>
 8000796:	2501      	movs	r5, #1
 8000798:	2a38      	cmp	r2, #56	@ 0x38
 800079a:	dc12      	bgt.n	80007c2 <__aeabi_dadd+0x31a>
 800079c:	2180      	movs	r1, #128	@ 0x80
 800079e:	0409      	lsls	r1, r1, #16
 80007a0:	430c      	orrs	r4, r1
 80007a2:	2a1f      	cmp	r2, #31
 80007a4:	dd00      	ble.n	80007a8 <__aeabi_dadd+0x300>
 80007a6:	e1ab      	b.n	8000b00 <__aeabi_dadd+0x658>
 80007a8:	2120      	movs	r1, #32
 80007aa:	0025      	movs	r5, r4
 80007ac:	1a89      	subs	r1, r1, r2
 80007ae:	0007      	movs	r7, r0
 80007b0:	4088      	lsls	r0, r1
 80007b2:	408d      	lsls	r5, r1
 80007b4:	40d7      	lsrs	r7, r2
 80007b6:	1e41      	subs	r1, r0, #1
 80007b8:	4188      	sbcs	r0, r1
 80007ba:	40d4      	lsrs	r4, r2
 80007bc:	433d      	orrs	r5, r7
 80007be:	4305      	orrs	r5, r0
 80007c0:	44a2      	add	sl, r4
 80007c2:	4465      	add	r5, ip
 80007c4:	4565      	cmp	r5, ip
 80007c6:	4192      	sbcs	r2, r2
 80007c8:	4252      	negs	r2, r2
 80007ca:	4452      	add	r2, sl
 80007cc:	0014      	movs	r4, r2
 80007ce:	464f      	mov	r7, r9
 80007d0:	e774      	b.n	80006bc <__aeabi_dadd+0x214>
 80007d2:	0028      	movs	r0, r5
 80007d4:	f001 fdf0 	bl	80023b8 <__clzsi2>
 80007d8:	0003      	movs	r3, r0
 80007da:	3318      	adds	r3, #24
 80007dc:	2b1f      	cmp	r3, #31
 80007de:	dc00      	bgt.n	80007e2 <__aeabi_dadd+0x33a>
 80007e0:	e6c2      	b.n	8000568 <__aeabi_dadd+0xc0>
 80007e2:	002a      	movs	r2, r5
 80007e4:	3808      	subs	r0, #8
 80007e6:	4082      	lsls	r2, r0
 80007e8:	429f      	cmp	r7, r3
 80007ea:	dd00      	ble.n	80007ee <__aeabi_dadd+0x346>
 80007ec:	e0a9      	b.n	8000942 <__aeabi_dadd+0x49a>
 80007ee:	1bdb      	subs	r3, r3, r7
 80007f0:	1c58      	adds	r0, r3, #1
 80007f2:	281f      	cmp	r0, #31
 80007f4:	dc00      	bgt.n	80007f8 <__aeabi_dadd+0x350>
 80007f6:	e1ac      	b.n	8000b52 <__aeabi_dadd+0x6aa>
 80007f8:	0015      	movs	r5, r2
 80007fa:	3b1f      	subs	r3, #31
 80007fc:	40dd      	lsrs	r5, r3
 80007fe:	2820      	cmp	r0, #32
 8000800:	d005      	beq.n	800080e <__aeabi_dadd+0x366>
 8000802:	2340      	movs	r3, #64	@ 0x40
 8000804:	1a1b      	subs	r3, r3, r0
 8000806:	409a      	lsls	r2, r3
 8000808:	1e53      	subs	r3, r2, #1
 800080a:	419a      	sbcs	r2, r3
 800080c:	4315      	orrs	r5, r2
 800080e:	2307      	movs	r3, #7
 8000810:	2700      	movs	r7, #0
 8000812:	402b      	ands	r3, r5
 8000814:	e7b0      	b.n	8000778 <__aeabi_dadd+0x2d0>
 8000816:	08ed      	lsrs	r5, r5, #3
 8000818:	4b05      	ldr	r3, [pc, #20]	@ (8000830 <__aeabi_dadd+0x388>)
 800081a:	0762      	lsls	r2, r4, #29
 800081c:	432a      	orrs	r2, r5
 800081e:	08e4      	lsrs	r4, r4, #3
 8000820:	429f      	cmp	r7, r3
 8000822:	d00f      	beq.n	8000844 <__aeabi_dadd+0x39c>
 8000824:	0324      	lsls	r4, r4, #12
 8000826:	0b25      	lsrs	r5, r4, #12
 8000828:	057c      	lsls	r4, r7, #21
 800082a:	0d64      	lsrs	r4, r4, #21
 800082c:	e6d4      	b.n	80005d8 <__aeabi_dadd+0x130>
 800082e:	46c0      	nop			@ (mov r8, r8)
 8000830:	000007ff 	.word	0x000007ff
 8000834:	ff7fffff 	.word	0xff7fffff
 8000838:	000007fe 	.word	0x000007fe
 800083c:	08c0      	lsrs	r0, r0, #3
 800083e:	0762      	lsls	r2, r4, #29
 8000840:	4302      	orrs	r2, r0
 8000842:	08e4      	lsrs	r4, r4, #3
 8000844:	0013      	movs	r3, r2
 8000846:	4323      	orrs	r3, r4
 8000848:	d100      	bne.n	800084c <__aeabi_dadd+0x3a4>
 800084a:	e186      	b.n	8000b5a <__aeabi_dadd+0x6b2>
 800084c:	2580      	movs	r5, #128	@ 0x80
 800084e:	032d      	lsls	r5, r5, #12
 8000850:	4325      	orrs	r5, r4
 8000852:	032d      	lsls	r5, r5, #12
 8000854:	4cc3      	ldr	r4, [pc, #780]	@ (8000b64 <__aeabi_dadd+0x6bc>)
 8000856:	0b2d      	lsrs	r5, r5, #12
 8000858:	e6be      	b.n	80005d8 <__aeabi_dadd+0x130>
 800085a:	4660      	mov	r0, ip
 800085c:	4654      	mov	r4, sl
 800085e:	000e      	movs	r6, r1
 8000860:	0017      	movs	r7, r2
 8000862:	08c5      	lsrs	r5, r0, #3
 8000864:	e7d8      	b.n	8000818 <__aeabi_dadd+0x370>
 8000866:	4cc0      	ldr	r4, [pc, #768]	@ (8000b68 <__aeabi_dadd+0x6c0>)
 8000868:	1aff      	subs	r7, r7, r3
 800086a:	4014      	ands	r4, r2
 800086c:	e696      	b.n	800059c <__aeabi_dadd+0xf4>
 800086e:	4abf      	ldr	r2, [pc, #764]	@ (8000b6c <__aeabi_dadd+0x6c4>)
 8000870:	1c79      	adds	r1, r7, #1
 8000872:	4211      	tst	r1, r2
 8000874:	d16b      	bne.n	800094e <__aeabi_dadd+0x4a6>
 8000876:	0022      	movs	r2, r4
 8000878:	4302      	orrs	r2, r0
 800087a:	2f00      	cmp	r7, #0
 800087c:	d000      	beq.n	8000880 <__aeabi_dadd+0x3d8>
 800087e:	e0db      	b.n	8000a38 <__aeabi_dadd+0x590>
 8000880:	2a00      	cmp	r2, #0
 8000882:	d100      	bne.n	8000886 <__aeabi_dadd+0x3de>
 8000884:	e12d      	b.n	8000ae2 <__aeabi_dadd+0x63a>
 8000886:	4662      	mov	r2, ip
 8000888:	4653      	mov	r3, sl
 800088a:	431a      	orrs	r2, r3
 800088c:	d100      	bne.n	8000890 <__aeabi_dadd+0x3e8>
 800088e:	e0b6      	b.n	80009fe <__aeabi_dadd+0x556>
 8000890:	4663      	mov	r3, ip
 8000892:	18c5      	adds	r5, r0, r3
 8000894:	4285      	cmp	r5, r0
 8000896:	4180      	sbcs	r0, r0
 8000898:	4454      	add	r4, sl
 800089a:	4240      	negs	r0, r0
 800089c:	1824      	adds	r4, r4, r0
 800089e:	0223      	lsls	r3, r4, #8
 80008a0:	d502      	bpl.n	80008a8 <__aeabi_dadd+0x400>
 80008a2:	000f      	movs	r7, r1
 80008a4:	4bb0      	ldr	r3, [pc, #704]	@ (8000b68 <__aeabi_dadd+0x6c0>)
 80008a6:	401c      	ands	r4, r3
 80008a8:	003a      	movs	r2, r7
 80008aa:	0028      	movs	r0, r5
 80008ac:	e7d8      	b.n	8000860 <__aeabi_dadd+0x3b8>
 80008ae:	4662      	mov	r2, ip
 80008b0:	1a85      	subs	r5, r0, r2
 80008b2:	42a8      	cmp	r0, r5
 80008b4:	4192      	sbcs	r2, r2
 80008b6:	4653      	mov	r3, sl
 80008b8:	4252      	negs	r2, r2
 80008ba:	4691      	mov	r9, r2
 80008bc:	1ae3      	subs	r3, r4, r3
 80008be:	001a      	movs	r2, r3
 80008c0:	464b      	mov	r3, r9
 80008c2:	1ad2      	subs	r2, r2, r3
 80008c4:	0013      	movs	r3, r2
 80008c6:	4691      	mov	r9, r2
 80008c8:	021a      	lsls	r2, r3, #8
 80008ca:	d454      	bmi.n	8000976 <__aeabi_dadd+0x4ce>
 80008cc:	464a      	mov	r2, r9
 80008ce:	464c      	mov	r4, r9
 80008d0:	432a      	orrs	r2, r5
 80008d2:	d000      	beq.n	80008d6 <__aeabi_dadd+0x42e>
 80008d4:	e640      	b.n	8000558 <__aeabi_dadd+0xb0>
 80008d6:	2600      	movs	r6, #0
 80008d8:	2400      	movs	r4, #0
 80008da:	2500      	movs	r5, #0
 80008dc:	e67c      	b.n	80005d8 <__aeabi_dadd+0x130>
 80008de:	4da1      	ldr	r5, [pc, #644]	@ (8000b64 <__aeabi_dadd+0x6bc>)
 80008e0:	45a9      	cmp	r9, r5
 80008e2:	d100      	bne.n	80008e6 <__aeabi_dadd+0x43e>
 80008e4:	e090      	b.n	8000a08 <__aeabi_dadd+0x560>
 80008e6:	2501      	movs	r5, #1
 80008e8:	2a38      	cmp	r2, #56	@ 0x38
 80008ea:	dd00      	ble.n	80008ee <__aeabi_dadd+0x446>
 80008ec:	e6ab      	b.n	8000646 <__aeabi_dadd+0x19e>
 80008ee:	2580      	movs	r5, #128	@ 0x80
 80008f0:	042d      	lsls	r5, r5, #16
 80008f2:	432c      	orrs	r4, r5
 80008f4:	e695      	b.n	8000622 <__aeabi_dadd+0x17a>
 80008f6:	0011      	movs	r1, r2
 80008f8:	4655      	mov	r5, sl
 80008fa:	3920      	subs	r1, #32
 80008fc:	40cd      	lsrs	r5, r1
 80008fe:	46a9      	mov	r9, r5
 8000900:	2a20      	cmp	r2, #32
 8000902:	d006      	beq.n	8000912 <__aeabi_dadd+0x46a>
 8000904:	2140      	movs	r1, #64	@ 0x40
 8000906:	4653      	mov	r3, sl
 8000908:	1a8a      	subs	r2, r1, r2
 800090a:	4093      	lsls	r3, r2
 800090c:	4662      	mov	r2, ip
 800090e:	431a      	orrs	r2, r3
 8000910:	4694      	mov	ip, r2
 8000912:	4665      	mov	r5, ip
 8000914:	1e6b      	subs	r3, r5, #1
 8000916:	419d      	sbcs	r5, r3
 8000918:	464b      	mov	r3, r9
 800091a:	431d      	orrs	r5, r3
 800091c:	e612      	b.n	8000544 <__aeabi_dadd+0x9c>
 800091e:	0021      	movs	r1, r4
 8000920:	4301      	orrs	r1, r0
 8000922:	d100      	bne.n	8000926 <__aeabi_dadd+0x47e>
 8000924:	e0c4      	b.n	8000ab0 <__aeabi_dadd+0x608>
 8000926:	1e51      	subs	r1, r2, #1
 8000928:	2a01      	cmp	r2, #1
 800092a:	d100      	bne.n	800092e <__aeabi_dadd+0x486>
 800092c:	e0fb      	b.n	8000b26 <__aeabi_dadd+0x67e>
 800092e:	4d8d      	ldr	r5, [pc, #564]	@ (8000b64 <__aeabi_dadd+0x6bc>)
 8000930:	42aa      	cmp	r2, r5
 8000932:	d100      	bne.n	8000936 <__aeabi_dadd+0x48e>
 8000934:	e0b5      	b.n	8000aa2 <__aeabi_dadd+0x5fa>
 8000936:	2501      	movs	r5, #1
 8000938:	2938      	cmp	r1, #56	@ 0x38
 800093a:	dd00      	ble.n	800093e <__aeabi_dadd+0x496>
 800093c:	e741      	b.n	80007c2 <__aeabi_dadd+0x31a>
 800093e:	000a      	movs	r2, r1
 8000940:	e72f      	b.n	80007a2 <__aeabi_dadd+0x2fa>
 8000942:	4c89      	ldr	r4, [pc, #548]	@ (8000b68 <__aeabi_dadd+0x6c0>)
 8000944:	1aff      	subs	r7, r7, r3
 8000946:	4014      	ands	r4, r2
 8000948:	0762      	lsls	r2, r4, #29
 800094a:	08e4      	lsrs	r4, r4, #3
 800094c:	e76a      	b.n	8000824 <__aeabi_dadd+0x37c>
 800094e:	4a85      	ldr	r2, [pc, #532]	@ (8000b64 <__aeabi_dadd+0x6bc>)
 8000950:	4291      	cmp	r1, r2
 8000952:	d100      	bne.n	8000956 <__aeabi_dadd+0x4ae>
 8000954:	e0e3      	b.n	8000b1e <__aeabi_dadd+0x676>
 8000956:	4663      	mov	r3, ip
 8000958:	18c2      	adds	r2, r0, r3
 800095a:	4282      	cmp	r2, r0
 800095c:	4180      	sbcs	r0, r0
 800095e:	0023      	movs	r3, r4
 8000960:	4240      	negs	r0, r0
 8000962:	4453      	add	r3, sl
 8000964:	181b      	adds	r3, r3, r0
 8000966:	07dd      	lsls	r5, r3, #31
 8000968:	085c      	lsrs	r4, r3, #1
 800096a:	2307      	movs	r3, #7
 800096c:	0852      	lsrs	r2, r2, #1
 800096e:	4315      	orrs	r5, r2
 8000970:	000f      	movs	r7, r1
 8000972:	402b      	ands	r3, r5
 8000974:	e700      	b.n	8000778 <__aeabi_dadd+0x2d0>
 8000976:	4663      	mov	r3, ip
 8000978:	1a1d      	subs	r5, r3, r0
 800097a:	45ac      	cmp	ip, r5
 800097c:	4192      	sbcs	r2, r2
 800097e:	4653      	mov	r3, sl
 8000980:	4252      	negs	r2, r2
 8000982:	1b1c      	subs	r4, r3, r4
 8000984:	000e      	movs	r6, r1
 8000986:	4688      	mov	r8, r1
 8000988:	1aa4      	subs	r4, r4, r2
 800098a:	e5e5      	b.n	8000558 <__aeabi_dadd+0xb0>
 800098c:	2d00      	cmp	r5, #0
 800098e:	d000      	beq.n	8000992 <__aeabi_dadd+0x4ea>
 8000990:	e091      	b.n	8000ab6 <__aeabi_dadd+0x60e>
 8000992:	2a00      	cmp	r2, #0
 8000994:	d138      	bne.n	8000a08 <__aeabi_dadd+0x560>
 8000996:	2480      	movs	r4, #128	@ 0x80
 8000998:	2600      	movs	r6, #0
 800099a:	0324      	lsls	r4, r4, #12
 800099c:	e756      	b.n	800084c <__aeabi_dadd+0x3a4>
 800099e:	4663      	mov	r3, ip
 80009a0:	18c5      	adds	r5, r0, r3
 80009a2:	4285      	cmp	r5, r0
 80009a4:	4180      	sbcs	r0, r0
 80009a6:	4454      	add	r4, sl
 80009a8:	4240      	negs	r0, r0
 80009aa:	1824      	adds	r4, r4, r0
 80009ac:	2701      	movs	r7, #1
 80009ae:	0223      	lsls	r3, r4, #8
 80009b0:	d400      	bmi.n	80009b4 <__aeabi_dadd+0x50c>
 80009b2:	e6df      	b.n	8000774 <__aeabi_dadd+0x2cc>
 80009b4:	2702      	movs	r7, #2
 80009b6:	e687      	b.n	80006c8 <__aeabi_dadd+0x220>
 80009b8:	4663      	mov	r3, ip
 80009ba:	1ac5      	subs	r5, r0, r3
 80009bc:	42a8      	cmp	r0, r5
 80009be:	4180      	sbcs	r0, r0
 80009c0:	4653      	mov	r3, sl
 80009c2:	4240      	negs	r0, r0
 80009c4:	1ae4      	subs	r4, r4, r3
 80009c6:	2701      	movs	r7, #1
 80009c8:	1a24      	subs	r4, r4, r0
 80009ca:	e5c0      	b.n	800054e <__aeabi_dadd+0xa6>
 80009cc:	0762      	lsls	r2, r4, #29
 80009ce:	08c0      	lsrs	r0, r0, #3
 80009d0:	4302      	orrs	r2, r0
 80009d2:	08e4      	lsrs	r4, r4, #3
 80009d4:	e736      	b.n	8000844 <__aeabi_dadd+0x39c>
 80009d6:	0011      	movs	r1, r2
 80009d8:	4653      	mov	r3, sl
 80009da:	3920      	subs	r1, #32
 80009dc:	40cb      	lsrs	r3, r1
 80009de:	4699      	mov	r9, r3
 80009e0:	2a20      	cmp	r2, #32
 80009e2:	d006      	beq.n	80009f2 <__aeabi_dadd+0x54a>
 80009e4:	2140      	movs	r1, #64	@ 0x40
 80009e6:	4653      	mov	r3, sl
 80009e8:	1a8a      	subs	r2, r1, r2
 80009ea:	4093      	lsls	r3, r2
 80009ec:	4662      	mov	r2, ip
 80009ee:	431a      	orrs	r2, r3
 80009f0:	4694      	mov	ip, r2
 80009f2:	4665      	mov	r5, ip
 80009f4:	1e6b      	subs	r3, r5, #1
 80009f6:	419d      	sbcs	r5, r3
 80009f8:	464b      	mov	r3, r9
 80009fa:	431d      	orrs	r5, r3
 80009fc:	e659      	b.n	80006b2 <__aeabi_dadd+0x20a>
 80009fe:	0762      	lsls	r2, r4, #29
 8000a00:	08c0      	lsrs	r0, r0, #3
 8000a02:	4302      	orrs	r2, r0
 8000a04:	08e4      	lsrs	r4, r4, #3
 8000a06:	e70d      	b.n	8000824 <__aeabi_dadd+0x37c>
 8000a08:	4653      	mov	r3, sl
 8000a0a:	075a      	lsls	r2, r3, #29
 8000a0c:	4663      	mov	r3, ip
 8000a0e:	08d8      	lsrs	r0, r3, #3
 8000a10:	4653      	mov	r3, sl
 8000a12:	000e      	movs	r6, r1
 8000a14:	4302      	orrs	r2, r0
 8000a16:	08dc      	lsrs	r4, r3, #3
 8000a18:	e714      	b.n	8000844 <__aeabi_dadd+0x39c>
 8000a1a:	0015      	movs	r5, r2
 8000a1c:	0026      	movs	r6, r4
 8000a1e:	3d20      	subs	r5, #32
 8000a20:	40ee      	lsrs	r6, r5
 8000a22:	2a20      	cmp	r2, #32
 8000a24:	d003      	beq.n	8000a2e <__aeabi_dadd+0x586>
 8000a26:	2540      	movs	r5, #64	@ 0x40
 8000a28:	1aaa      	subs	r2, r5, r2
 8000a2a:	4094      	lsls	r4, r2
 8000a2c:	4320      	orrs	r0, r4
 8000a2e:	1e42      	subs	r2, r0, #1
 8000a30:	4190      	sbcs	r0, r2
 8000a32:	0005      	movs	r5, r0
 8000a34:	4335      	orrs	r5, r6
 8000a36:	e606      	b.n	8000646 <__aeabi_dadd+0x19e>
 8000a38:	2a00      	cmp	r2, #0
 8000a3a:	d07c      	beq.n	8000b36 <__aeabi_dadd+0x68e>
 8000a3c:	4662      	mov	r2, ip
 8000a3e:	4653      	mov	r3, sl
 8000a40:	08c0      	lsrs	r0, r0, #3
 8000a42:	431a      	orrs	r2, r3
 8000a44:	d100      	bne.n	8000a48 <__aeabi_dadd+0x5a0>
 8000a46:	e6fa      	b.n	800083e <__aeabi_dadd+0x396>
 8000a48:	0762      	lsls	r2, r4, #29
 8000a4a:	4310      	orrs	r0, r2
 8000a4c:	2280      	movs	r2, #128	@ 0x80
 8000a4e:	08e4      	lsrs	r4, r4, #3
 8000a50:	0312      	lsls	r2, r2, #12
 8000a52:	4214      	tst	r4, r2
 8000a54:	d008      	beq.n	8000a68 <__aeabi_dadd+0x5c0>
 8000a56:	08d9      	lsrs	r1, r3, #3
 8000a58:	4211      	tst	r1, r2
 8000a5a:	d105      	bne.n	8000a68 <__aeabi_dadd+0x5c0>
 8000a5c:	4663      	mov	r3, ip
 8000a5e:	08d8      	lsrs	r0, r3, #3
 8000a60:	4653      	mov	r3, sl
 8000a62:	000c      	movs	r4, r1
 8000a64:	075b      	lsls	r3, r3, #29
 8000a66:	4318      	orrs	r0, r3
 8000a68:	0f42      	lsrs	r2, r0, #29
 8000a6a:	00c0      	lsls	r0, r0, #3
 8000a6c:	08c0      	lsrs	r0, r0, #3
 8000a6e:	0752      	lsls	r2, r2, #29
 8000a70:	4302      	orrs	r2, r0
 8000a72:	e6e7      	b.n	8000844 <__aeabi_dadd+0x39c>
 8000a74:	2a00      	cmp	r2, #0
 8000a76:	d100      	bne.n	8000a7a <__aeabi_dadd+0x5d2>
 8000a78:	e72d      	b.n	80008d6 <__aeabi_dadd+0x42e>
 8000a7a:	4663      	mov	r3, ip
 8000a7c:	08d8      	lsrs	r0, r3, #3
 8000a7e:	4653      	mov	r3, sl
 8000a80:	075a      	lsls	r2, r3, #29
 8000a82:	000e      	movs	r6, r1
 8000a84:	4302      	orrs	r2, r0
 8000a86:	08dc      	lsrs	r4, r3, #3
 8000a88:	e6cc      	b.n	8000824 <__aeabi_dadd+0x37c>
 8000a8a:	4663      	mov	r3, ip
 8000a8c:	1a1d      	subs	r5, r3, r0
 8000a8e:	45ac      	cmp	ip, r5
 8000a90:	4192      	sbcs	r2, r2
 8000a92:	4653      	mov	r3, sl
 8000a94:	4252      	negs	r2, r2
 8000a96:	1b1c      	subs	r4, r3, r4
 8000a98:	000e      	movs	r6, r1
 8000a9a:	4688      	mov	r8, r1
 8000a9c:	1aa4      	subs	r4, r4, r2
 8000a9e:	3701      	adds	r7, #1
 8000aa0:	e555      	b.n	800054e <__aeabi_dadd+0xa6>
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	08d9      	lsrs	r1, r3, #3
 8000aa6:	4653      	mov	r3, sl
 8000aa8:	075a      	lsls	r2, r3, #29
 8000aaa:	430a      	orrs	r2, r1
 8000aac:	08dc      	lsrs	r4, r3, #3
 8000aae:	e6c9      	b.n	8000844 <__aeabi_dadd+0x39c>
 8000ab0:	4660      	mov	r0, ip
 8000ab2:	4654      	mov	r4, sl
 8000ab4:	e6d4      	b.n	8000860 <__aeabi_dadd+0x3b8>
 8000ab6:	08c0      	lsrs	r0, r0, #3
 8000ab8:	2a00      	cmp	r2, #0
 8000aba:	d100      	bne.n	8000abe <__aeabi_dadd+0x616>
 8000abc:	e6bf      	b.n	800083e <__aeabi_dadd+0x396>
 8000abe:	0762      	lsls	r2, r4, #29
 8000ac0:	4310      	orrs	r0, r2
 8000ac2:	2280      	movs	r2, #128	@ 0x80
 8000ac4:	08e4      	lsrs	r4, r4, #3
 8000ac6:	0312      	lsls	r2, r2, #12
 8000ac8:	4214      	tst	r4, r2
 8000aca:	d0cd      	beq.n	8000a68 <__aeabi_dadd+0x5c0>
 8000acc:	08dd      	lsrs	r5, r3, #3
 8000ace:	4215      	tst	r5, r2
 8000ad0:	d1ca      	bne.n	8000a68 <__aeabi_dadd+0x5c0>
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	08d8      	lsrs	r0, r3, #3
 8000ad6:	4653      	mov	r3, sl
 8000ad8:	075b      	lsls	r3, r3, #29
 8000ada:	000e      	movs	r6, r1
 8000adc:	002c      	movs	r4, r5
 8000ade:	4318      	orrs	r0, r3
 8000ae0:	e7c2      	b.n	8000a68 <__aeabi_dadd+0x5c0>
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	08d9      	lsrs	r1, r3, #3
 8000ae6:	4653      	mov	r3, sl
 8000ae8:	075a      	lsls	r2, r3, #29
 8000aea:	430a      	orrs	r2, r1
 8000aec:	08dc      	lsrs	r4, r3, #3
 8000aee:	e699      	b.n	8000824 <__aeabi_dadd+0x37c>
 8000af0:	4663      	mov	r3, ip
 8000af2:	08d8      	lsrs	r0, r3, #3
 8000af4:	4653      	mov	r3, sl
 8000af6:	075a      	lsls	r2, r3, #29
 8000af8:	000e      	movs	r6, r1
 8000afa:	4302      	orrs	r2, r0
 8000afc:	08dc      	lsrs	r4, r3, #3
 8000afe:	e6a1      	b.n	8000844 <__aeabi_dadd+0x39c>
 8000b00:	0011      	movs	r1, r2
 8000b02:	0027      	movs	r7, r4
 8000b04:	3920      	subs	r1, #32
 8000b06:	40cf      	lsrs	r7, r1
 8000b08:	2a20      	cmp	r2, #32
 8000b0a:	d003      	beq.n	8000b14 <__aeabi_dadd+0x66c>
 8000b0c:	2140      	movs	r1, #64	@ 0x40
 8000b0e:	1a8a      	subs	r2, r1, r2
 8000b10:	4094      	lsls	r4, r2
 8000b12:	4320      	orrs	r0, r4
 8000b14:	1e42      	subs	r2, r0, #1
 8000b16:	4190      	sbcs	r0, r2
 8000b18:	0005      	movs	r5, r0
 8000b1a:	433d      	orrs	r5, r7
 8000b1c:	e651      	b.n	80007c2 <__aeabi_dadd+0x31a>
 8000b1e:	000c      	movs	r4, r1
 8000b20:	2500      	movs	r5, #0
 8000b22:	2200      	movs	r2, #0
 8000b24:	e558      	b.n	80005d8 <__aeabi_dadd+0x130>
 8000b26:	4460      	add	r0, ip
 8000b28:	4560      	cmp	r0, ip
 8000b2a:	4192      	sbcs	r2, r2
 8000b2c:	4454      	add	r4, sl
 8000b2e:	4252      	negs	r2, r2
 8000b30:	0005      	movs	r5, r0
 8000b32:	18a4      	adds	r4, r4, r2
 8000b34:	e73a      	b.n	80009ac <__aeabi_dadd+0x504>
 8000b36:	4653      	mov	r3, sl
 8000b38:	075a      	lsls	r2, r3, #29
 8000b3a:	4663      	mov	r3, ip
 8000b3c:	08d9      	lsrs	r1, r3, #3
 8000b3e:	4653      	mov	r3, sl
 8000b40:	430a      	orrs	r2, r1
 8000b42:	08dc      	lsrs	r4, r3, #3
 8000b44:	e67e      	b.n	8000844 <__aeabi_dadd+0x39c>
 8000b46:	001a      	movs	r2, r3
 8000b48:	001c      	movs	r4, r3
 8000b4a:	432a      	orrs	r2, r5
 8000b4c:	d000      	beq.n	8000b50 <__aeabi_dadd+0x6a8>
 8000b4e:	e6ab      	b.n	80008a8 <__aeabi_dadd+0x400>
 8000b50:	e6c1      	b.n	80008d6 <__aeabi_dadd+0x42e>
 8000b52:	2120      	movs	r1, #32
 8000b54:	2500      	movs	r5, #0
 8000b56:	1a09      	subs	r1, r1, r0
 8000b58:	e519      	b.n	800058e <__aeabi_dadd+0xe6>
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2500      	movs	r5, #0
 8000b5e:	4c01      	ldr	r4, [pc, #4]	@ (8000b64 <__aeabi_dadd+0x6bc>)
 8000b60:	e53a      	b.n	80005d8 <__aeabi_dadd+0x130>
 8000b62:	46c0      	nop			@ (mov r8, r8)
 8000b64:	000007ff 	.word	0x000007ff
 8000b68:	ff7fffff 	.word	0xff7fffff
 8000b6c:	000007fe 	.word	0x000007fe

08000b70 <__aeabi_ddiv>:
 8000b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b72:	46de      	mov	lr, fp
 8000b74:	4645      	mov	r5, r8
 8000b76:	4657      	mov	r7, sl
 8000b78:	464e      	mov	r6, r9
 8000b7a:	b5e0      	push	{r5, r6, r7, lr}
 8000b7c:	b087      	sub	sp, #28
 8000b7e:	9200      	str	r2, [sp, #0]
 8000b80:	9301      	str	r3, [sp, #4]
 8000b82:	030b      	lsls	r3, r1, #12
 8000b84:	0b1b      	lsrs	r3, r3, #12
 8000b86:	469b      	mov	fp, r3
 8000b88:	0fca      	lsrs	r2, r1, #31
 8000b8a:	004b      	lsls	r3, r1, #1
 8000b8c:	0004      	movs	r4, r0
 8000b8e:	4680      	mov	r8, r0
 8000b90:	0d5b      	lsrs	r3, r3, #21
 8000b92:	9202      	str	r2, [sp, #8]
 8000b94:	d100      	bne.n	8000b98 <__aeabi_ddiv+0x28>
 8000b96:	e16a      	b.n	8000e6e <__aeabi_ddiv+0x2fe>
 8000b98:	4ad4      	ldr	r2, [pc, #848]	@ (8000eec <__aeabi_ddiv+0x37c>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d100      	bne.n	8000ba0 <__aeabi_ddiv+0x30>
 8000b9e:	e18c      	b.n	8000eba <__aeabi_ddiv+0x34a>
 8000ba0:	4659      	mov	r1, fp
 8000ba2:	0f42      	lsrs	r2, r0, #29
 8000ba4:	00c9      	lsls	r1, r1, #3
 8000ba6:	430a      	orrs	r2, r1
 8000ba8:	2180      	movs	r1, #128	@ 0x80
 8000baa:	0409      	lsls	r1, r1, #16
 8000bac:	4311      	orrs	r1, r2
 8000bae:	00c2      	lsls	r2, r0, #3
 8000bb0:	4690      	mov	r8, r2
 8000bb2:	4acf      	ldr	r2, [pc, #828]	@ (8000ef0 <__aeabi_ddiv+0x380>)
 8000bb4:	4689      	mov	r9, r1
 8000bb6:	4692      	mov	sl, r2
 8000bb8:	449a      	add	sl, r3
 8000bba:	2300      	movs	r3, #0
 8000bbc:	2400      	movs	r4, #0
 8000bbe:	9303      	str	r3, [sp, #12]
 8000bc0:	9e00      	ldr	r6, [sp, #0]
 8000bc2:	9f01      	ldr	r7, [sp, #4]
 8000bc4:	033b      	lsls	r3, r7, #12
 8000bc6:	0b1b      	lsrs	r3, r3, #12
 8000bc8:	469b      	mov	fp, r3
 8000bca:	007b      	lsls	r3, r7, #1
 8000bcc:	0030      	movs	r0, r6
 8000bce:	0d5b      	lsrs	r3, r3, #21
 8000bd0:	0ffd      	lsrs	r5, r7, #31
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d100      	bne.n	8000bd8 <__aeabi_ddiv+0x68>
 8000bd6:	e128      	b.n	8000e2a <__aeabi_ddiv+0x2ba>
 8000bd8:	4ac4      	ldr	r2, [pc, #784]	@ (8000eec <__aeabi_ddiv+0x37c>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d100      	bne.n	8000be0 <__aeabi_ddiv+0x70>
 8000bde:	e177      	b.n	8000ed0 <__aeabi_ddiv+0x360>
 8000be0:	4659      	mov	r1, fp
 8000be2:	0f72      	lsrs	r2, r6, #29
 8000be4:	00c9      	lsls	r1, r1, #3
 8000be6:	430a      	orrs	r2, r1
 8000be8:	2180      	movs	r1, #128	@ 0x80
 8000bea:	0409      	lsls	r1, r1, #16
 8000bec:	4311      	orrs	r1, r2
 8000bee:	468b      	mov	fp, r1
 8000bf0:	49bf      	ldr	r1, [pc, #764]	@ (8000ef0 <__aeabi_ddiv+0x380>)
 8000bf2:	00f2      	lsls	r2, r6, #3
 8000bf4:	468c      	mov	ip, r1
 8000bf6:	4651      	mov	r1, sl
 8000bf8:	4463      	add	r3, ip
 8000bfa:	1acb      	subs	r3, r1, r3
 8000bfc:	469a      	mov	sl, r3
 8000bfe:	2300      	movs	r3, #0
 8000c00:	9e02      	ldr	r6, [sp, #8]
 8000c02:	406e      	eors	r6, r5
 8000c04:	2c0f      	cmp	r4, #15
 8000c06:	d827      	bhi.n	8000c58 <__aeabi_ddiv+0xe8>
 8000c08:	49ba      	ldr	r1, [pc, #744]	@ (8000ef4 <__aeabi_ddiv+0x384>)
 8000c0a:	00a4      	lsls	r4, r4, #2
 8000c0c:	5909      	ldr	r1, [r1, r4]
 8000c0e:	468f      	mov	pc, r1
 8000c10:	46cb      	mov	fp, r9
 8000c12:	4642      	mov	r2, r8
 8000c14:	9e02      	ldr	r6, [sp, #8]
 8000c16:	9b03      	ldr	r3, [sp, #12]
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	d016      	beq.n	8000c4a <__aeabi_ddiv+0xda>
 8000c1c:	2b03      	cmp	r3, #3
 8000c1e:	d100      	bne.n	8000c22 <__aeabi_ddiv+0xb2>
 8000c20:	e2a6      	b.n	8001170 <__aeabi_ddiv+0x600>
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d000      	beq.n	8000c28 <__aeabi_ddiv+0xb8>
 8000c26:	e0df      	b.n	8000de8 <__aeabi_ddiv+0x278>
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	2400      	movs	r4, #0
 8000c2e:	4690      	mov	r8, r2
 8000c30:	051b      	lsls	r3, r3, #20
 8000c32:	4323      	orrs	r3, r4
 8000c34:	07f6      	lsls	r6, r6, #31
 8000c36:	4333      	orrs	r3, r6
 8000c38:	4640      	mov	r0, r8
 8000c3a:	0019      	movs	r1, r3
 8000c3c:	b007      	add	sp, #28
 8000c3e:	bcf0      	pop	{r4, r5, r6, r7}
 8000c40:	46bb      	mov	fp, r7
 8000c42:	46b2      	mov	sl, r6
 8000c44:	46a9      	mov	r9, r5
 8000c46:	46a0      	mov	r8, r4
 8000c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2400      	movs	r4, #0
 8000c4e:	4690      	mov	r8, r2
 8000c50:	4ba6      	ldr	r3, [pc, #664]	@ (8000eec <__aeabi_ddiv+0x37c>)
 8000c52:	e7ed      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8000c54:	002e      	movs	r6, r5
 8000c56:	e7df      	b.n	8000c18 <__aeabi_ddiv+0xa8>
 8000c58:	45cb      	cmp	fp, r9
 8000c5a:	d200      	bcs.n	8000c5e <__aeabi_ddiv+0xee>
 8000c5c:	e1d4      	b.n	8001008 <__aeabi_ddiv+0x498>
 8000c5e:	d100      	bne.n	8000c62 <__aeabi_ddiv+0xf2>
 8000c60:	e1cf      	b.n	8001002 <__aeabi_ddiv+0x492>
 8000c62:	2301      	movs	r3, #1
 8000c64:	425b      	negs	r3, r3
 8000c66:	469c      	mov	ip, r3
 8000c68:	4644      	mov	r4, r8
 8000c6a:	4648      	mov	r0, r9
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	44e2      	add	sl, ip
 8000c70:	465b      	mov	r3, fp
 8000c72:	0e15      	lsrs	r5, r2, #24
 8000c74:	021b      	lsls	r3, r3, #8
 8000c76:	431d      	orrs	r5, r3
 8000c78:	0c19      	lsrs	r1, r3, #16
 8000c7a:	042b      	lsls	r3, r5, #16
 8000c7c:	0212      	lsls	r2, r2, #8
 8000c7e:	9500      	str	r5, [sp, #0]
 8000c80:	0c1d      	lsrs	r5, r3, #16
 8000c82:	4691      	mov	r9, r2
 8000c84:	9102      	str	r1, [sp, #8]
 8000c86:	9503      	str	r5, [sp, #12]
 8000c88:	f7ff fae0 	bl	800024c <__aeabi_uidivmod>
 8000c8c:	0002      	movs	r2, r0
 8000c8e:	436a      	muls	r2, r5
 8000c90:	040b      	lsls	r3, r1, #16
 8000c92:	0c21      	lsrs	r1, r4, #16
 8000c94:	4680      	mov	r8, r0
 8000c96:	4319      	orrs	r1, r3
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	d909      	bls.n	8000cb0 <__aeabi_ddiv+0x140>
 8000c9c:	9d00      	ldr	r5, [sp, #0]
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	46ac      	mov	ip, r5
 8000ca2:	425b      	negs	r3, r3
 8000ca4:	4461      	add	r1, ip
 8000ca6:	469c      	mov	ip, r3
 8000ca8:	44e0      	add	r8, ip
 8000caa:	428d      	cmp	r5, r1
 8000cac:	d800      	bhi.n	8000cb0 <__aeabi_ddiv+0x140>
 8000cae:	e1fb      	b.n	80010a8 <__aeabi_ddiv+0x538>
 8000cb0:	1a88      	subs	r0, r1, r2
 8000cb2:	9902      	ldr	r1, [sp, #8]
 8000cb4:	f7ff faca 	bl	800024c <__aeabi_uidivmod>
 8000cb8:	9a03      	ldr	r2, [sp, #12]
 8000cba:	0424      	lsls	r4, r4, #16
 8000cbc:	4342      	muls	r2, r0
 8000cbe:	0409      	lsls	r1, r1, #16
 8000cc0:	0c24      	lsrs	r4, r4, #16
 8000cc2:	0003      	movs	r3, r0
 8000cc4:	430c      	orrs	r4, r1
 8000cc6:	42a2      	cmp	r2, r4
 8000cc8:	d906      	bls.n	8000cd8 <__aeabi_ddiv+0x168>
 8000cca:	9900      	ldr	r1, [sp, #0]
 8000ccc:	3b01      	subs	r3, #1
 8000cce:	468c      	mov	ip, r1
 8000cd0:	4464      	add	r4, ip
 8000cd2:	42a1      	cmp	r1, r4
 8000cd4:	d800      	bhi.n	8000cd8 <__aeabi_ddiv+0x168>
 8000cd6:	e1e1      	b.n	800109c <__aeabi_ddiv+0x52c>
 8000cd8:	1aa0      	subs	r0, r4, r2
 8000cda:	4642      	mov	r2, r8
 8000cdc:	0412      	lsls	r2, r2, #16
 8000cde:	431a      	orrs	r2, r3
 8000ce0:	4693      	mov	fp, r2
 8000ce2:	464b      	mov	r3, r9
 8000ce4:	4659      	mov	r1, fp
 8000ce6:	0c1b      	lsrs	r3, r3, #16
 8000ce8:	001d      	movs	r5, r3
 8000cea:	9304      	str	r3, [sp, #16]
 8000cec:	040b      	lsls	r3, r1, #16
 8000cee:	4649      	mov	r1, r9
 8000cf0:	0409      	lsls	r1, r1, #16
 8000cf2:	0c09      	lsrs	r1, r1, #16
 8000cf4:	000c      	movs	r4, r1
 8000cf6:	0c1b      	lsrs	r3, r3, #16
 8000cf8:	435c      	muls	r4, r3
 8000cfa:	0c12      	lsrs	r2, r2, #16
 8000cfc:	436b      	muls	r3, r5
 8000cfe:	4688      	mov	r8, r1
 8000d00:	4351      	muls	r1, r2
 8000d02:	436a      	muls	r2, r5
 8000d04:	0c25      	lsrs	r5, r4, #16
 8000d06:	46ac      	mov	ip, r5
 8000d08:	185b      	adds	r3, r3, r1
 8000d0a:	4463      	add	r3, ip
 8000d0c:	4299      	cmp	r1, r3
 8000d0e:	d903      	bls.n	8000d18 <__aeabi_ddiv+0x1a8>
 8000d10:	2180      	movs	r1, #128	@ 0x80
 8000d12:	0249      	lsls	r1, r1, #9
 8000d14:	468c      	mov	ip, r1
 8000d16:	4462      	add	r2, ip
 8000d18:	0c19      	lsrs	r1, r3, #16
 8000d1a:	0424      	lsls	r4, r4, #16
 8000d1c:	041b      	lsls	r3, r3, #16
 8000d1e:	0c24      	lsrs	r4, r4, #16
 8000d20:	188a      	adds	r2, r1, r2
 8000d22:	191c      	adds	r4, r3, r4
 8000d24:	4290      	cmp	r0, r2
 8000d26:	d302      	bcc.n	8000d2e <__aeabi_ddiv+0x1be>
 8000d28:	d116      	bne.n	8000d58 <__aeabi_ddiv+0x1e8>
 8000d2a:	42a7      	cmp	r7, r4
 8000d2c:	d214      	bcs.n	8000d58 <__aeabi_ddiv+0x1e8>
 8000d2e:	465b      	mov	r3, fp
 8000d30:	9d00      	ldr	r5, [sp, #0]
 8000d32:	3b01      	subs	r3, #1
 8000d34:	444f      	add	r7, r9
 8000d36:	9305      	str	r3, [sp, #20]
 8000d38:	454f      	cmp	r7, r9
 8000d3a:	419b      	sbcs	r3, r3
 8000d3c:	46ac      	mov	ip, r5
 8000d3e:	425b      	negs	r3, r3
 8000d40:	4463      	add	r3, ip
 8000d42:	18c0      	adds	r0, r0, r3
 8000d44:	4285      	cmp	r5, r0
 8000d46:	d300      	bcc.n	8000d4a <__aeabi_ddiv+0x1da>
 8000d48:	e1a1      	b.n	800108e <__aeabi_ddiv+0x51e>
 8000d4a:	4282      	cmp	r2, r0
 8000d4c:	d900      	bls.n	8000d50 <__aeabi_ddiv+0x1e0>
 8000d4e:	e1f6      	b.n	800113e <__aeabi_ddiv+0x5ce>
 8000d50:	d100      	bne.n	8000d54 <__aeabi_ddiv+0x1e4>
 8000d52:	e1f1      	b.n	8001138 <__aeabi_ddiv+0x5c8>
 8000d54:	9b05      	ldr	r3, [sp, #20]
 8000d56:	469b      	mov	fp, r3
 8000d58:	1b3c      	subs	r4, r7, r4
 8000d5a:	42a7      	cmp	r7, r4
 8000d5c:	41bf      	sbcs	r7, r7
 8000d5e:	9d00      	ldr	r5, [sp, #0]
 8000d60:	1a80      	subs	r0, r0, r2
 8000d62:	427f      	negs	r7, r7
 8000d64:	1bc0      	subs	r0, r0, r7
 8000d66:	4285      	cmp	r5, r0
 8000d68:	d100      	bne.n	8000d6c <__aeabi_ddiv+0x1fc>
 8000d6a:	e1d0      	b.n	800110e <__aeabi_ddiv+0x59e>
 8000d6c:	9902      	ldr	r1, [sp, #8]
 8000d6e:	f7ff fa6d 	bl	800024c <__aeabi_uidivmod>
 8000d72:	9a03      	ldr	r2, [sp, #12]
 8000d74:	040b      	lsls	r3, r1, #16
 8000d76:	4342      	muls	r2, r0
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	0007      	movs	r7, r0
 8000d7c:	4319      	orrs	r1, r3
 8000d7e:	428a      	cmp	r2, r1
 8000d80:	d900      	bls.n	8000d84 <__aeabi_ddiv+0x214>
 8000d82:	e178      	b.n	8001076 <__aeabi_ddiv+0x506>
 8000d84:	1a88      	subs	r0, r1, r2
 8000d86:	9902      	ldr	r1, [sp, #8]
 8000d88:	f7ff fa60 	bl	800024c <__aeabi_uidivmod>
 8000d8c:	9a03      	ldr	r2, [sp, #12]
 8000d8e:	0424      	lsls	r4, r4, #16
 8000d90:	4342      	muls	r2, r0
 8000d92:	0409      	lsls	r1, r1, #16
 8000d94:	0c24      	lsrs	r4, r4, #16
 8000d96:	0003      	movs	r3, r0
 8000d98:	430c      	orrs	r4, r1
 8000d9a:	42a2      	cmp	r2, r4
 8000d9c:	d900      	bls.n	8000da0 <__aeabi_ddiv+0x230>
 8000d9e:	e15d      	b.n	800105c <__aeabi_ddiv+0x4ec>
 8000da0:	4641      	mov	r1, r8
 8000da2:	1aa4      	subs	r4, r4, r2
 8000da4:	043a      	lsls	r2, r7, #16
 8000da6:	431a      	orrs	r2, r3
 8000da8:	9d04      	ldr	r5, [sp, #16]
 8000daa:	0413      	lsls	r3, r2, #16
 8000dac:	0c1b      	lsrs	r3, r3, #16
 8000dae:	4359      	muls	r1, r3
 8000db0:	4647      	mov	r7, r8
 8000db2:	436b      	muls	r3, r5
 8000db4:	469c      	mov	ip, r3
 8000db6:	0c10      	lsrs	r0, r2, #16
 8000db8:	4347      	muls	r7, r0
 8000dba:	0c0b      	lsrs	r3, r1, #16
 8000dbc:	44bc      	add	ip, r7
 8000dbe:	4463      	add	r3, ip
 8000dc0:	4368      	muls	r0, r5
 8000dc2:	429f      	cmp	r7, r3
 8000dc4:	d903      	bls.n	8000dce <__aeabi_ddiv+0x25e>
 8000dc6:	2580      	movs	r5, #128	@ 0x80
 8000dc8:	026d      	lsls	r5, r5, #9
 8000dca:	46ac      	mov	ip, r5
 8000dcc:	4460      	add	r0, ip
 8000dce:	0c1f      	lsrs	r7, r3, #16
 8000dd0:	0409      	lsls	r1, r1, #16
 8000dd2:	041b      	lsls	r3, r3, #16
 8000dd4:	0c09      	lsrs	r1, r1, #16
 8000dd6:	183f      	adds	r7, r7, r0
 8000dd8:	185b      	adds	r3, r3, r1
 8000dda:	42bc      	cmp	r4, r7
 8000ddc:	d200      	bcs.n	8000de0 <__aeabi_ddiv+0x270>
 8000dde:	e102      	b.n	8000fe6 <__aeabi_ddiv+0x476>
 8000de0:	d100      	bne.n	8000de4 <__aeabi_ddiv+0x274>
 8000de2:	e0fd      	b.n	8000fe0 <__aeabi_ddiv+0x470>
 8000de4:	2301      	movs	r3, #1
 8000de6:	431a      	orrs	r2, r3
 8000de8:	4b43      	ldr	r3, [pc, #268]	@ (8000ef8 <__aeabi_ddiv+0x388>)
 8000dea:	4453      	add	r3, sl
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	dc00      	bgt.n	8000df2 <__aeabi_ddiv+0x282>
 8000df0:	e0ae      	b.n	8000f50 <__aeabi_ddiv+0x3e0>
 8000df2:	0751      	lsls	r1, r2, #29
 8000df4:	d000      	beq.n	8000df8 <__aeabi_ddiv+0x288>
 8000df6:	e198      	b.n	800112a <__aeabi_ddiv+0x5ba>
 8000df8:	4659      	mov	r1, fp
 8000dfa:	01c9      	lsls	r1, r1, #7
 8000dfc:	d506      	bpl.n	8000e0c <__aeabi_ddiv+0x29c>
 8000dfe:	4659      	mov	r1, fp
 8000e00:	4b3e      	ldr	r3, [pc, #248]	@ (8000efc <__aeabi_ddiv+0x38c>)
 8000e02:	4019      	ands	r1, r3
 8000e04:	2380      	movs	r3, #128	@ 0x80
 8000e06:	468b      	mov	fp, r1
 8000e08:	00db      	lsls	r3, r3, #3
 8000e0a:	4453      	add	r3, sl
 8000e0c:	493c      	ldr	r1, [pc, #240]	@ (8000f00 <__aeabi_ddiv+0x390>)
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	dd00      	ble.n	8000e14 <__aeabi_ddiv+0x2a4>
 8000e12:	e71a      	b.n	8000c4a <__aeabi_ddiv+0xda>
 8000e14:	4659      	mov	r1, fp
 8000e16:	08d2      	lsrs	r2, r2, #3
 8000e18:	0749      	lsls	r1, r1, #29
 8000e1a:	4311      	orrs	r1, r2
 8000e1c:	465a      	mov	r2, fp
 8000e1e:	055b      	lsls	r3, r3, #21
 8000e20:	0254      	lsls	r4, r2, #9
 8000e22:	4688      	mov	r8, r1
 8000e24:	0b24      	lsrs	r4, r4, #12
 8000e26:	0d5b      	lsrs	r3, r3, #21
 8000e28:	e702      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8000e2a:	465a      	mov	r2, fp
 8000e2c:	9b00      	ldr	r3, [sp, #0]
 8000e2e:	431a      	orrs	r2, r3
 8000e30:	d100      	bne.n	8000e34 <__aeabi_ddiv+0x2c4>
 8000e32:	e07e      	b.n	8000f32 <__aeabi_ddiv+0x3c2>
 8000e34:	465b      	mov	r3, fp
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d100      	bne.n	8000e3c <__aeabi_ddiv+0x2cc>
 8000e3a:	e100      	b.n	800103e <__aeabi_ddiv+0x4ce>
 8000e3c:	4658      	mov	r0, fp
 8000e3e:	f001 fabb 	bl	80023b8 <__clzsi2>
 8000e42:	0002      	movs	r2, r0
 8000e44:	0003      	movs	r3, r0
 8000e46:	3a0b      	subs	r2, #11
 8000e48:	271d      	movs	r7, #29
 8000e4a:	9e00      	ldr	r6, [sp, #0]
 8000e4c:	1aba      	subs	r2, r7, r2
 8000e4e:	0019      	movs	r1, r3
 8000e50:	4658      	mov	r0, fp
 8000e52:	40d6      	lsrs	r6, r2
 8000e54:	3908      	subs	r1, #8
 8000e56:	4088      	lsls	r0, r1
 8000e58:	0032      	movs	r2, r6
 8000e5a:	4302      	orrs	r2, r0
 8000e5c:	4693      	mov	fp, r2
 8000e5e:	9a00      	ldr	r2, [sp, #0]
 8000e60:	408a      	lsls	r2, r1
 8000e62:	4928      	ldr	r1, [pc, #160]	@ (8000f04 <__aeabi_ddiv+0x394>)
 8000e64:	4453      	add	r3, sl
 8000e66:	468a      	mov	sl, r1
 8000e68:	449a      	add	sl, r3
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	e6c8      	b.n	8000c00 <__aeabi_ddiv+0x90>
 8000e6e:	465b      	mov	r3, fp
 8000e70:	4303      	orrs	r3, r0
 8000e72:	4699      	mov	r9, r3
 8000e74:	d056      	beq.n	8000f24 <__aeabi_ddiv+0x3b4>
 8000e76:	465b      	mov	r3, fp
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d100      	bne.n	8000e7e <__aeabi_ddiv+0x30e>
 8000e7c:	e0cd      	b.n	800101a <__aeabi_ddiv+0x4aa>
 8000e7e:	4658      	mov	r0, fp
 8000e80:	f001 fa9a 	bl	80023b8 <__clzsi2>
 8000e84:	230b      	movs	r3, #11
 8000e86:	425b      	negs	r3, r3
 8000e88:	469c      	mov	ip, r3
 8000e8a:	0002      	movs	r2, r0
 8000e8c:	4484      	add	ip, r0
 8000e8e:	4666      	mov	r6, ip
 8000e90:	231d      	movs	r3, #29
 8000e92:	1b9b      	subs	r3, r3, r6
 8000e94:	0026      	movs	r6, r4
 8000e96:	0011      	movs	r1, r2
 8000e98:	4658      	mov	r0, fp
 8000e9a:	40de      	lsrs	r6, r3
 8000e9c:	3908      	subs	r1, #8
 8000e9e:	4088      	lsls	r0, r1
 8000ea0:	0033      	movs	r3, r6
 8000ea2:	4303      	orrs	r3, r0
 8000ea4:	4699      	mov	r9, r3
 8000ea6:	0023      	movs	r3, r4
 8000ea8:	408b      	lsls	r3, r1
 8000eaa:	4698      	mov	r8, r3
 8000eac:	4b16      	ldr	r3, [pc, #88]	@ (8000f08 <__aeabi_ddiv+0x398>)
 8000eae:	2400      	movs	r4, #0
 8000eb0:	1a9b      	subs	r3, r3, r2
 8000eb2:	469a      	mov	sl, r3
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	9303      	str	r3, [sp, #12]
 8000eb8:	e682      	b.n	8000bc0 <__aeabi_ddiv+0x50>
 8000eba:	465a      	mov	r2, fp
 8000ebc:	4302      	orrs	r2, r0
 8000ebe:	4691      	mov	r9, r2
 8000ec0:	d12a      	bne.n	8000f18 <__aeabi_ddiv+0x3a8>
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	469a      	mov	sl, r3
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	4690      	mov	r8, r2
 8000eca:	2408      	movs	r4, #8
 8000ecc:	9303      	str	r3, [sp, #12]
 8000ece:	e677      	b.n	8000bc0 <__aeabi_ddiv+0x50>
 8000ed0:	465a      	mov	r2, fp
 8000ed2:	9b00      	ldr	r3, [sp, #0]
 8000ed4:	431a      	orrs	r2, r3
 8000ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8000f0c <__aeabi_ddiv+0x39c>)
 8000ed8:	469c      	mov	ip, r3
 8000eda:	44e2      	add	sl, ip
 8000edc:	2a00      	cmp	r2, #0
 8000ede:	d117      	bne.n	8000f10 <__aeabi_ddiv+0x3a0>
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	431c      	orrs	r4, r3
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	469b      	mov	fp, r3
 8000ee8:	3302      	adds	r3, #2
 8000eea:	e689      	b.n	8000c00 <__aeabi_ddiv+0x90>
 8000eec:	000007ff 	.word	0x000007ff
 8000ef0:	fffffc01 	.word	0xfffffc01
 8000ef4:	08007b6c 	.word	0x08007b6c
 8000ef8:	000003ff 	.word	0x000003ff
 8000efc:	feffffff 	.word	0xfeffffff
 8000f00:	000007fe 	.word	0x000007fe
 8000f04:	000003f3 	.word	0x000003f3
 8000f08:	fffffc0d 	.word	0xfffffc0d
 8000f0c:	fffff801 	.word	0xfffff801
 8000f10:	2303      	movs	r3, #3
 8000f12:	0032      	movs	r2, r6
 8000f14:	431c      	orrs	r4, r3
 8000f16:	e673      	b.n	8000c00 <__aeabi_ddiv+0x90>
 8000f18:	469a      	mov	sl, r3
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	46d9      	mov	r9, fp
 8000f1e:	240c      	movs	r4, #12
 8000f20:	9303      	str	r3, [sp, #12]
 8000f22:	e64d      	b.n	8000bc0 <__aeabi_ddiv+0x50>
 8000f24:	2300      	movs	r3, #0
 8000f26:	4698      	mov	r8, r3
 8000f28:	469a      	mov	sl, r3
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	2404      	movs	r4, #4
 8000f2e:	9303      	str	r3, [sp, #12]
 8000f30:	e646      	b.n	8000bc0 <__aeabi_ddiv+0x50>
 8000f32:	2301      	movs	r3, #1
 8000f34:	431c      	orrs	r4, r3
 8000f36:	2300      	movs	r3, #0
 8000f38:	469b      	mov	fp, r3
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	e660      	b.n	8000c00 <__aeabi_ddiv+0x90>
 8000f3e:	2300      	movs	r3, #0
 8000f40:	2480      	movs	r4, #128	@ 0x80
 8000f42:	4698      	mov	r8, r3
 8000f44:	2600      	movs	r6, #0
 8000f46:	4b92      	ldr	r3, [pc, #584]	@ (8001190 <__aeabi_ddiv+0x620>)
 8000f48:	0324      	lsls	r4, r4, #12
 8000f4a:	e671      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	4252      	negs	r2, r2
 8000f50:	2101      	movs	r1, #1
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	2938      	cmp	r1, #56	@ 0x38
 8000f56:	dd00      	ble.n	8000f5a <__aeabi_ddiv+0x3ea>
 8000f58:	e666      	b.n	8000c28 <__aeabi_ddiv+0xb8>
 8000f5a:	291f      	cmp	r1, #31
 8000f5c:	dc00      	bgt.n	8000f60 <__aeabi_ddiv+0x3f0>
 8000f5e:	e0ab      	b.n	80010b8 <__aeabi_ddiv+0x548>
 8000f60:	201f      	movs	r0, #31
 8000f62:	4240      	negs	r0, r0
 8000f64:	1ac3      	subs	r3, r0, r3
 8000f66:	4658      	mov	r0, fp
 8000f68:	40d8      	lsrs	r0, r3
 8000f6a:	0003      	movs	r3, r0
 8000f6c:	2920      	cmp	r1, #32
 8000f6e:	d004      	beq.n	8000f7a <__aeabi_ddiv+0x40a>
 8000f70:	4658      	mov	r0, fp
 8000f72:	4988      	ldr	r1, [pc, #544]	@ (8001194 <__aeabi_ddiv+0x624>)
 8000f74:	4451      	add	r1, sl
 8000f76:	4088      	lsls	r0, r1
 8000f78:	4302      	orrs	r2, r0
 8000f7a:	1e51      	subs	r1, r2, #1
 8000f7c:	418a      	sbcs	r2, r1
 8000f7e:	431a      	orrs	r2, r3
 8000f80:	2307      	movs	r3, #7
 8000f82:	0019      	movs	r1, r3
 8000f84:	2400      	movs	r4, #0
 8000f86:	4011      	ands	r1, r2
 8000f88:	4213      	tst	r3, r2
 8000f8a:	d00c      	beq.n	8000fa6 <__aeabi_ddiv+0x436>
 8000f8c:	230f      	movs	r3, #15
 8000f8e:	4013      	ands	r3, r2
 8000f90:	2b04      	cmp	r3, #4
 8000f92:	d100      	bne.n	8000f96 <__aeabi_ddiv+0x426>
 8000f94:	e0f9      	b.n	800118a <__aeabi_ddiv+0x61a>
 8000f96:	1d11      	adds	r1, r2, #4
 8000f98:	4291      	cmp	r1, r2
 8000f9a:	419b      	sbcs	r3, r3
 8000f9c:	000a      	movs	r2, r1
 8000f9e:	425b      	negs	r3, r3
 8000fa0:	0759      	lsls	r1, r3, #29
 8000fa2:	025b      	lsls	r3, r3, #9
 8000fa4:	0b1c      	lsrs	r4, r3, #12
 8000fa6:	08d2      	lsrs	r2, r2, #3
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	4690      	mov	r8, r2
 8000fac:	2300      	movs	r3, #0
 8000fae:	e63f      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8000fb0:	2480      	movs	r4, #128	@ 0x80
 8000fb2:	464b      	mov	r3, r9
 8000fb4:	0324      	lsls	r4, r4, #12
 8000fb6:	4223      	tst	r3, r4
 8000fb8:	d009      	beq.n	8000fce <__aeabi_ddiv+0x45e>
 8000fba:	465b      	mov	r3, fp
 8000fbc:	4223      	tst	r3, r4
 8000fbe:	d106      	bne.n	8000fce <__aeabi_ddiv+0x45e>
 8000fc0:	431c      	orrs	r4, r3
 8000fc2:	0324      	lsls	r4, r4, #12
 8000fc4:	002e      	movs	r6, r5
 8000fc6:	4690      	mov	r8, r2
 8000fc8:	4b71      	ldr	r3, [pc, #452]	@ (8001190 <__aeabi_ddiv+0x620>)
 8000fca:	0b24      	lsrs	r4, r4, #12
 8000fcc:	e630      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8000fce:	2480      	movs	r4, #128	@ 0x80
 8000fd0:	464b      	mov	r3, r9
 8000fd2:	0324      	lsls	r4, r4, #12
 8000fd4:	431c      	orrs	r4, r3
 8000fd6:	0324      	lsls	r4, r4, #12
 8000fd8:	9e02      	ldr	r6, [sp, #8]
 8000fda:	4b6d      	ldr	r3, [pc, #436]	@ (8001190 <__aeabi_ddiv+0x620>)
 8000fdc:	0b24      	lsrs	r4, r4, #12
 8000fde:	e627      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d100      	bne.n	8000fe6 <__aeabi_ddiv+0x476>
 8000fe4:	e700      	b.n	8000de8 <__aeabi_ddiv+0x278>
 8000fe6:	9800      	ldr	r0, [sp, #0]
 8000fe8:	1e51      	subs	r1, r2, #1
 8000fea:	4684      	mov	ip, r0
 8000fec:	4464      	add	r4, ip
 8000fee:	4284      	cmp	r4, r0
 8000ff0:	d200      	bcs.n	8000ff4 <__aeabi_ddiv+0x484>
 8000ff2:	e084      	b.n	80010fe <__aeabi_ddiv+0x58e>
 8000ff4:	42bc      	cmp	r4, r7
 8000ff6:	d200      	bcs.n	8000ffa <__aeabi_ddiv+0x48a>
 8000ff8:	e0ae      	b.n	8001158 <__aeabi_ddiv+0x5e8>
 8000ffa:	d100      	bne.n	8000ffe <__aeabi_ddiv+0x48e>
 8000ffc:	e0c1      	b.n	8001182 <__aeabi_ddiv+0x612>
 8000ffe:	000a      	movs	r2, r1
 8001000:	e6f0      	b.n	8000de4 <__aeabi_ddiv+0x274>
 8001002:	4542      	cmp	r2, r8
 8001004:	d900      	bls.n	8001008 <__aeabi_ddiv+0x498>
 8001006:	e62c      	b.n	8000c62 <__aeabi_ddiv+0xf2>
 8001008:	464b      	mov	r3, r9
 800100a:	07dc      	lsls	r4, r3, #31
 800100c:	0858      	lsrs	r0, r3, #1
 800100e:	4643      	mov	r3, r8
 8001010:	085b      	lsrs	r3, r3, #1
 8001012:	431c      	orrs	r4, r3
 8001014:	4643      	mov	r3, r8
 8001016:	07df      	lsls	r7, r3, #31
 8001018:	e62a      	b.n	8000c70 <__aeabi_ddiv+0x100>
 800101a:	f001 f9cd 	bl	80023b8 <__clzsi2>
 800101e:	2315      	movs	r3, #21
 8001020:	469c      	mov	ip, r3
 8001022:	4484      	add	ip, r0
 8001024:	0002      	movs	r2, r0
 8001026:	4663      	mov	r3, ip
 8001028:	3220      	adds	r2, #32
 800102a:	2b1c      	cmp	r3, #28
 800102c:	dc00      	bgt.n	8001030 <__aeabi_ddiv+0x4c0>
 800102e:	e72e      	b.n	8000e8e <__aeabi_ddiv+0x31e>
 8001030:	0023      	movs	r3, r4
 8001032:	3808      	subs	r0, #8
 8001034:	4083      	lsls	r3, r0
 8001036:	4699      	mov	r9, r3
 8001038:	2300      	movs	r3, #0
 800103a:	4698      	mov	r8, r3
 800103c:	e736      	b.n	8000eac <__aeabi_ddiv+0x33c>
 800103e:	f001 f9bb 	bl	80023b8 <__clzsi2>
 8001042:	0002      	movs	r2, r0
 8001044:	0003      	movs	r3, r0
 8001046:	3215      	adds	r2, #21
 8001048:	3320      	adds	r3, #32
 800104a:	2a1c      	cmp	r2, #28
 800104c:	dc00      	bgt.n	8001050 <__aeabi_ddiv+0x4e0>
 800104e:	e6fb      	b.n	8000e48 <__aeabi_ddiv+0x2d8>
 8001050:	9900      	ldr	r1, [sp, #0]
 8001052:	3808      	subs	r0, #8
 8001054:	4081      	lsls	r1, r0
 8001056:	2200      	movs	r2, #0
 8001058:	468b      	mov	fp, r1
 800105a:	e702      	b.n	8000e62 <__aeabi_ddiv+0x2f2>
 800105c:	9900      	ldr	r1, [sp, #0]
 800105e:	3b01      	subs	r3, #1
 8001060:	468c      	mov	ip, r1
 8001062:	4464      	add	r4, ip
 8001064:	42a1      	cmp	r1, r4
 8001066:	d900      	bls.n	800106a <__aeabi_ddiv+0x4fa>
 8001068:	e69a      	b.n	8000da0 <__aeabi_ddiv+0x230>
 800106a:	42a2      	cmp	r2, r4
 800106c:	d800      	bhi.n	8001070 <__aeabi_ddiv+0x500>
 800106e:	e697      	b.n	8000da0 <__aeabi_ddiv+0x230>
 8001070:	1e83      	subs	r3, r0, #2
 8001072:	4464      	add	r4, ip
 8001074:	e694      	b.n	8000da0 <__aeabi_ddiv+0x230>
 8001076:	46ac      	mov	ip, r5
 8001078:	4461      	add	r1, ip
 800107a:	3f01      	subs	r7, #1
 800107c:	428d      	cmp	r5, r1
 800107e:	d900      	bls.n	8001082 <__aeabi_ddiv+0x512>
 8001080:	e680      	b.n	8000d84 <__aeabi_ddiv+0x214>
 8001082:	428a      	cmp	r2, r1
 8001084:	d800      	bhi.n	8001088 <__aeabi_ddiv+0x518>
 8001086:	e67d      	b.n	8000d84 <__aeabi_ddiv+0x214>
 8001088:	1e87      	subs	r7, r0, #2
 800108a:	4461      	add	r1, ip
 800108c:	e67a      	b.n	8000d84 <__aeabi_ddiv+0x214>
 800108e:	4285      	cmp	r5, r0
 8001090:	d000      	beq.n	8001094 <__aeabi_ddiv+0x524>
 8001092:	e65f      	b.n	8000d54 <__aeabi_ddiv+0x1e4>
 8001094:	45b9      	cmp	r9, r7
 8001096:	d900      	bls.n	800109a <__aeabi_ddiv+0x52a>
 8001098:	e65c      	b.n	8000d54 <__aeabi_ddiv+0x1e4>
 800109a:	e656      	b.n	8000d4a <__aeabi_ddiv+0x1da>
 800109c:	42a2      	cmp	r2, r4
 800109e:	d800      	bhi.n	80010a2 <__aeabi_ddiv+0x532>
 80010a0:	e61a      	b.n	8000cd8 <__aeabi_ddiv+0x168>
 80010a2:	1e83      	subs	r3, r0, #2
 80010a4:	4464      	add	r4, ip
 80010a6:	e617      	b.n	8000cd8 <__aeabi_ddiv+0x168>
 80010a8:	428a      	cmp	r2, r1
 80010aa:	d800      	bhi.n	80010ae <__aeabi_ddiv+0x53e>
 80010ac:	e600      	b.n	8000cb0 <__aeabi_ddiv+0x140>
 80010ae:	46ac      	mov	ip, r5
 80010b0:	1e83      	subs	r3, r0, #2
 80010b2:	4698      	mov	r8, r3
 80010b4:	4461      	add	r1, ip
 80010b6:	e5fb      	b.n	8000cb0 <__aeabi_ddiv+0x140>
 80010b8:	4837      	ldr	r0, [pc, #220]	@ (8001198 <__aeabi_ddiv+0x628>)
 80010ba:	0014      	movs	r4, r2
 80010bc:	4450      	add	r0, sl
 80010be:	4082      	lsls	r2, r0
 80010c0:	465b      	mov	r3, fp
 80010c2:	0017      	movs	r7, r2
 80010c4:	4083      	lsls	r3, r0
 80010c6:	40cc      	lsrs	r4, r1
 80010c8:	1e7a      	subs	r2, r7, #1
 80010ca:	4197      	sbcs	r7, r2
 80010cc:	4323      	orrs	r3, r4
 80010ce:	433b      	orrs	r3, r7
 80010d0:	001a      	movs	r2, r3
 80010d2:	465b      	mov	r3, fp
 80010d4:	40cb      	lsrs	r3, r1
 80010d6:	0751      	lsls	r1, r2, #29
 80010d8:	d009      	beq.n	80010ee <__aeabi_ddiv+0x57e>
 80010da:	210f      	movs	r1, #15
 80010dc:	4011      	ands	r1, r2
 80010de:	2904      	cmp	r1, #4
 80010e0:	d005      	beq.n	80010ee <__aeabi_ddiv+0x57e>
 80010e2:	1d11      	adds	r1, r2, #4
 80010e4:	4291      	cmp	r1, r2
 80010e6:	4192      	sbcs	r2, r2
 80010e8:	4252      	negs	r2, r2
 80010ea:	189b      	adds	r3, r3, r2
 80010ec:	000a      	movs	r2, r1
 80010ee:	0219      	lsls	r1, r3, #8
 80010f0:	d400      	bmi.n	80010f4 <__aeabi_ddiv+0x584>
 80010f2:	e755      	b.n	8000fa0 <__aeabi_ddiv+0x430>
 80010f4:	2200      	movs	r2, #0
 80010f6:	2301      	movs	r3, #1
 80010f8:	2400      	movs	r4, #0
 80010fa:	4690      	mov	r8, r2
 80010fc:	e598      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 80010fe:	000a      	movs	r2, r1
 8001100:	42bc      	cmp	r4, r7
 8001102:	d000      	beq.n	8001106 <__aeabi_ddiv+0x596>
 8001104:	e66e      	b.n	8000de4 <__aeabi_ddiv+0x274>
 8001106:	454b      	cmp	r3, r9
 8001108:	d000      	beq.n	800110c <__aeabi_ddiv+0x59c>
 800110a:	e66b      	b.n	8000de4 <__aeabi_ddiv+0x274>
 800110c:	e66c      	b.n	8000de8 <__aeabi_ddiv+0x278>
 800110e:	4b23      	ldr	r3, [pc, #140]	@ (800119c <__aeabi_ddiv+0x62c>)
 8001110:	4a23      	ldr	r2, [pc, #140]	@ (80011a0 <__aeabi_ddiv+0x630>)
 8001112:	4453      	add	r3, sl
 8001114:	4592      	cmp	sl, r2
 8001116:	da00      	bge.n	800111a <__aeabi_ddiv+0x5aa>
 8001118:	e718      	b.n	8000f4c <__aeabi_ddiv+0x3dc>
 800111a:	2101      	movs	r1, #1
 800111c:	4249      	negs	r1, r1
 800111e:	1d0a      	adds	r2, r1, #4
 8001120:	428a      	cmp	r2, r1
 8001122:	4189      	sbcs	r1, r1
 8001124:	4249      	negs	r1, r1
 8001126:	448b      	add	fp, r1
 8001128:	e666      	b.n	8000df8 <__aeabi_ddiv+0x288>
 800112a:	210f      	movs	r1, #15
 800112c:	4011      	ands	r1, r2
 800112e:	2904      	cmp	r1, #4
 8001130:	d100      	bne.n	8001134 <__aeabi_ddiv+0x5c4>
 8001132:	e661      	b.n	8000df8 <__aeabi_ddiv+0x288>
 8001134:	0011      	movs	r1, r2
 8001136:	e7f2      	b.n	800111e <__aeabi_ddiv+0x5ae>
 8001138:	42bc      	cmp	r4, r7
 800113a:	d800      	bhi.n	800113e <__aeabi_ddiv+0x5ce>
 800113c:	e60a      	b.n	8000d54 <__aeabi_ddiv+0x1e4>
 800113e:	2302      	movs	r3, #2
 8001140:	425b      	negs	r3, r3
 8001142:	469c      	mov	ip, r3
 8001144:	9900      	ldr	r1, [sp, #0]
 8001146:	444f      	add	r7, r9
 8001148:	454f      	cmp	r7, r9
 800114a:	419b      	sbcs	r3, r3
 800114c:	44e3      	add	fp, ip
 800114e:	468c      	mov	ip, r1
 8001150:	425b      	negs	r3, r3
 8001152:	4463      	add	r3, ip
 8001154:	18c0      	adds	r0, r0, r3
 8001156:	e5ff      	b.n	8000d58 <__aeabi_ddiv+0x1e8>
 8001158:	4649      	mov	r1, r9
 800115a:	9d00      	ldr	r5, [sp, #0]
 800115c:	0048      	lsls	r0, r1, #1
 800115e:	4548      	cmp	r0, r9
 8001160:	4189      	sbcs	r1, r1
 8001162:	46ac      	mov	ip, r5
 8001164:	4249      	negs	r1, r1
 8001166:	4461      	add	r1, ip
 8001168:	4681      	mov	r9, r0
 800116a:	3a02      	subs	r2, #2
 800116c:	1864      	adds	r4, r4, r1
 800116e:	e7c7      	b.n	8001100 <__aeabi_ddiv+0x590>
 8001170:	2480      	movs	r4, #128	@ 0x80
 8001172:	465b      	mov	r3, fp
 8001174:	0324      	lsls	r4, r4, #12
 8001176:	431c      	orrs	r4, r3
 8001178:	0324      	lsls	r4, r4, #12
 800117a:	4690      	mov	r8, r2
 800117c:	4b04      	ldr	r3, [pc, #16]	@ (8001190 <__aeabi_ddiv+0x620>)
 800117e:	0b24      	lsrs	r4, r4, #12
 8001180:	e556      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8001182:	4599      	cmp	r9, r3
 8001184:	d3e8      	bcc.n	8001158 <__aeabi_ddiv+0x5e8>
 8001186:	000a      	movs	r2, r1
 8001188:	e7bd      	b.n	8001106 <__aeabi_ddiv+0x596>
 800118a:	2300      	movs	r3, #0
 800118c:	e708      	b.n	8000fa0 <__aeabi_ddiv+0x430>
 800118e:	46c0      	nop			@ (mov r8, r8)
 8001190:	000007ff 	.word	0x000007ff
 8001194:	0000043e 	.word	0x0000043e
 8001198:	0000041e 	.word	0x0000041e
 800119c:	000003ff 	.word	0x000003ff
 80011a0:	fffffc02 	.word	0xfffffc02

080011a4 <__eqdf2>:
 80011a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011a6:	4657      	mov	r7, sl
 80011a8:	46de      	mov	lr, fp
 80011aa:	464e      	mov	r6, r9
 80011ac:	4645      	mov	r5, r8
 80011ae:	b5e0      	push	{r5, r6, r7, lr}
 80011b0:	000d      	movs	r5, r1
 80011b2:	0004      	movs	r4, r0
 80011b4:	0fe8      	lsrs	r0, r5, #31
 80011b6:	4683      	mov	fp, r0
 80011b8:	0309      	lsls	r1, r1, #12
 80011ba:	0fd8      	lsrs	r0, r3, #31
 80011bc:	0b09      	lsrs	r1, r1, #12
 80011be:	4682      	mov	sl, r0
 80011c0:	4819      	ldr	r0, [pc, #100]	@ (8001228 <__eqdf2+0x84>)
 80011c2:	468c      	mov	ip, r1
 80011c4:	031f      	lsls	r7, r3, #12
 80011c6:	0069      	lsls	r1, r5, #1
 80011c8:	005e      	lsls	r6, r3, #1
 80011ca:	0d49      	lsrs	r1, r1, #21
 80011cc:	0b3f      	lsrs	r7, r7, #12
 80011ce:	0d76      	lsrs	r6, r6, #21
 80011d0:	4281      	cmp	r1, r0
 80011d2:	d018      	beq.n	8001206 <__eqdf2+0x62>
 80011d4:	4286      	cmp	r6, r0
 80011d6:	d00f      	beq.n	80011f8 <__eqdf2+0x54>
 80011d8:	2001      	movs	r0, #1
 80011da:	42b1      	cmp	r1, r6
 80011dc:	d10d      	bne.n	80011fa <__eqdf2+0x56>
 80011de:	45bc      	cmp	ip, r7
 80011e0:	d10b      	bne.n	80011fa <__eqdf2+0x56>
 80011e2:	4294      	cmp	r4, r2
 80011e4:	d109      	bne.n	80011fa <__eqdf2+0x56>
 80011e6:	45d3      	cmp	fp, sl
 80011e8:	d01c      	beq.n	8001224 <__eqdf2+0x80>
 80011ea:	2900      	cmp	r1, #0
 80011ec:	d105      	bne.n	80011fa <__eqdf2+0x56>
 80011ee:	4660      	mov	r0, ip
 80011f0:	4320      	orrs	r0, r4
 80011f2:	1e43      	subs	r3, r0, #1
 80011f4:	4198      	sbcs	r0, r3
 80011f6:	e000      	b.n	80011fa <__eqdf2+0x56>
 80011f8:	2001      	movs	r0, #1
 80011fa:	bcf0      	pop	{r4, r5, r6, r7}
 80011fc:	46bb      	mov	fp, r7
 80011fe:	46b2      	mov	sl, r6
 8001200:	46a9      	mov	r9, r5
 8001202:	46a0      	mov	r8, r4
 8001204:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001206:	2001      	movs	r0, #1
 8001208:	428e      	cmp	r6, r1
 800120a:	d1f6      	bne.n	80011fa <__eqdf2+0x56>
 800120c:	4661      	mov	r1, ip
 800120e:	4339      	orrs	r1, r7
 8001210:	000f      	movs	r7, r1
 8001212:	4317      	orrs	r7, r2
 8001214:	4327      	orrs	r7, r4
 8001216:	d1f0      	bne.n	80011fa <__eqdf2+0x56>
 8001218:	465b      	mov	r3, fp
 800121a:	4652      	mov	r2, sl
 800121c:	1a98      	subs	r0, r3, r2
 800121e:	1e43      	subs	r3, r0, #1
 8001220:	4198      	sbcs	r0, r3
 8001222:	e7ea      	b.n	80011fa <__eqdf2+0x56>
 8001224:	2000      	movs	r0, #0
 8001226:	e7e8      	b.n	80011fa <__eqdf2+0x56>
 8001228:	000007ff 	.word	0x000007ff

0800122c <__gedf2>:
 800122c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800122e:	4657      	mov	r7, sl
 8001230:	464e      	mov	r6, r9
 8001232:	4645      	mov	r5, r8
 8001234:	46de      	mov	lr, fp
 8001236:	b5e0      	push	{r5, r6, r7, lr}
 8001238:	000d      	movs	r5, r1
 800123a:	030f      	lsls	r7, r1, #12
 800123c:	0b39      	lsrs	r1, r7, #12
 800123e:	b083      	sub	sp, #12
 8001240:	0004      	movs	r4, r0
 8001242:	4680      	mov	r8, r0
 8001244:	9101      	str	r1, [sp, #4]
 8001246:	0058      	lsls	r0, r3, #1
 8001248:	0fe9      	lsrs	r1, r5, #31
 800124a:	4f31      	ldr	r7, [pc, #196]	@ (8001310 <__gedf2+0xe4>)
 800124c:	0d40      	lsrs	r0, r0, #21
 800124e:	468c      	mov	ip, r1
 8001250:	006e      	lsls	r6, r5, #1
 8001252:	0319      	lsls	r1, r3, #12
 8001254:	4682      	mov	sl, r0
 8001256:	4691      	mov	r9, r2
 8001258:	0d76      	lsrs	r6, r6, #21
 800125a:	0b09      	lsrs	r1, r1, #12
 800125c:	0fd8      	lsrs	r0, r3, #31
 800125e:	42be      	cmp	r6, r7
 8001260:	d01f      	beq.n	80012a2 <__gedf2+0x76>
 8001262:	45ba      	cmp	sl, r7
 8001264:	d00f      	beq.n	8001286 <__gedf2+0x5a>
 8001266:	2e00      	cmp	r6, #0
 8001268:	d12f      	bne.n	80012ca <__gedf2+0x9e>
 800126a:	4655      	mov	r5, sl
 800126c:	9e01      	ldr	r6, [sp, #4]
 800126e:	4334      	orrs	r4, r6
 8001270:	2d00      	cmp	r5, #0
 8001272:	d127      	bne.n	80012c4 <__gedf2+0x98>
 8001274:	430a      	orrs	r2, r1
 8001276:	d03a      	beq.n	80012ee <__gedf2+0xc2>
 8001278:	2c00      	cmp	r4, #0
 800127a:	d145      	bne.n	8001308 <__gedf2+0xdc>
 800127c:	2800      	cmp	r0, #0
 800127e:	d11a      	bne.n	80012b6 <__gedf2+0x8a>
 8001280:	2001      	movs	r0, #1
 8001282:	4240      	negs	r0, r0
 8001284:	e017      	b.n	80012b6 <__gedf2+0x8a>
 8001286:	4311      	orrs	r1, r2
 8001288:	d13b      	bne.n	8001302 <__gedf2+0xd6>
 800128a:	2e00      	cmp	r6, #0
 800128c:	d102      	bne.n	8001294 <__gedf2+0x68>
 800128e:	9f01      	ldr	r7, [sp, #4]
 8001290:	4327      	orrs	r7, r4
 8001292:	d0f3      	beq.n	800127c <__gedf2+0x50>
 8001294:	4584      	cmp	ip, r0
 8001296:	d109      	bne.n	80012ac <__gedf2+0x80>
 8001298:	4663      	mov	r3, ip
 800129a:	2b00      	cmp	r3, #0
 800129c:	d0f0      	beq.n	8001280 <__gedf2+0x54>
 800129e:	4660      	mov	r0, ip
 80012a0:	e009      	b.n	80012b6 <__gedf2+0x8a>
 80012a2:	9f01      	ldr	r7, [sp, #4]
 80012a4:	4327      	orrs	r7, r4
 80012a6:	d12c      	bne.n	8001302 <__gedf2+0xd6>
 80012a8:	45b2      	cmp	sl, r6
 80012aa:	d024      	beq.n	80012f6 <__gedf2+0xca>
 80012ac:	4663      	mov	r3, ip
 80012ae:	2002      	movs	r0, #2
 80012b0:	3b01      	subs	r3, #1
 80012b2:	4018      	ands	r0, r3
 80012b4:	3801      	subs	r0, #1
 80012b6:	b003      	add	sp, #12
 80012b8:	bcf0      	pop	{r4, r5, r6, r7}
 80012ba:	46bb      	mov	fp, r7
 80012bc:	46b2      	mov	sl, r6
 80012be:	46a9      	mov	r9, r5
 80012c0:	46a0      	mov	r8, r4
 80012c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012c4:	2c00      	cmp	r4, #0
 80012c6:	d0d9      	beq.n	800127c <__gedf2+0x50>
 80012c8:	e7e4      	b.n	8001294 <__gedf2+0x68>
 80012ca:	4654      	mov	r4, sl
 80012cc:	2c00      	cmp	r4, #0
 80012ce:	d0ed      	beq.n	80012ac <__gedf2+0x80>
 80012d0:	4584      	cmp	ip, r0
 80012d2:	d1eb      	bne.n	80012ac <__gedf2+0x80>
 80012d4:	4556      	cmp	r6, sl
 80012d6:	dce9      	bgt.n	80012ac <__gedf2+0x80>
 80012d8:	dbde      	blt.n	8001298 <__gedf2+0x6c>
 80012da:	9b01      	ldr	r3, [sp, #4]
 80012dc:	428b      	cmp	r3, r1
 80012de:	d8e5      	bhi.n	80012ac <__gedf2+0x80>
 80012e0:	d1da      	bne.n	8001298 <__gedf2+0x6c>
 80012e2:	45c8      	cmp	r8, r9
 80012e4:	d8e2      	bhi.n	80012ac <__gedf2+0x80>
 80012e6:	2000      	movs	r0, #0
 80012e8:	45c8      	cmp	r8, r9
 80012ea:	d2e4      	bcs.n	80012b6 <__gedf2+0x8a>
 80012ec:	e7d4      	b.n	8001298 <__gedf2+0x6c>
 80012ee:	2000      	movs	r0, #0
 80012f0:	2c00      	cmp	r4, #0
 80012f2:	d0e0      	beq.n	80012b6 <__gedf2+0x8a>
 80012f4:	e7da      	b.n	80012ac <__gedf2+0x80>
 80012f6:	4311      	orrs	r1, r2
 80012f8:	d103      	bne.n	8001302 <__gedf2+0xd6>
 80012fa:	4584      	cmp	ip, r0
 80012fc:	d1d6      	bne.n	80012ac <__gedf2+0x80>
 80012fe:	2000      	movs	r0, #0
 8001300:	e7d9      	b.n	80012b6 <__gedf2+0x8a>
 8001302:	2002      	movs	r0, #2
 8001304:	4240      	negs	r0, r0
 8001306:	e7d6      	b.n	80012b6 <__gedf2+0x8a>
 8001308:	4584      	cmp	ip, r0
 800130a:	d0e6      	beq.n	80012da <__gedf2+0xae>
 800130c:	e7ce      	b.n	80012ac <__gedf2+0x80>
 800130e:	46c0      	nop			@ (mov r8, r8)
 8001310:	000007ff 	.word	0x000007ff

08001314 <__ledf2>:
 8001314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001316:	4657      	mov	r7, sl
 8001318:	464e      	mov	r6, r9
 800131a:	4645      	mov	r5, r8
 800131c:	46de      	mov	lr, fp
 800131e:	b5e0      	push	{r5, r6, r7, lr}
 8001320:	000d      	movs	r5, r1
 8001322:	030f      	lsls	r7, r1, #12
 8001324:	0004      	movs	r4, r0
 8001326:	4680      	mov	r8, r0
 8001328:	0fe8      	lsrs	r0, r5, #31
 800132a:	0b39      	lsrs	r1, r7, #12
 800132c:	4684      	mov	ip, r0
 800132e:	b083      	sub	sp, #12
 8001330:	0058      	lsls	r0, r3, #1
 8001332:	4f30      	ldr	r7, [pc, #192]	@ (80013f4 <__ledf2+0xe0>)
 8001334:	0d40      	lsrs	r0, r0, #21
 8001336:	9101      	str	r1, [sp, #4]
 8001338:	031e      	lsls	r6, r3, #12
 800133a:	0069      	lsls	r1, r5, #1
 800133c:	4682      	mov	sl, r0
 800133e:	4691      	mov	r9, r2
 8001340:	0d49      	lsrs	r1, r1, #21
 8001342:	0b36      	lsrs	r6, r6, #12
 8001344:	0fd8      	lsrs	r0, r3, #31
 8001346:	42b9      	cmp	r1, r7
 8001348:	d020      	beq.n	800138c <__ledf2+0x78>
 800134a:	45ba      	cmp	sl, r7
 800134c:	d00f      	beq.n	800136e <__ledf2+0x5a>
 800134e:	2900      	cmp	r1, #0
 8001350:	d12b      	bne.n	80013aa <__ledf2+0x96>
 8001352:	9901      	ldr	r1, [sp, #4]
 8001354:	430c      	orrs	r4, r1
 8001356:	4651      	mov	r1, sl
 8001358:	2900      	cmp	r1, #0
 800135a:	d137      	bne.n	80013cc <__ledf2+0xb8>
 800135c:	4332      	orrs	r2, r6
 800135e:	d038      	beq.n	80013d2 <__ledf2+0xbe>
 8001360:	2c00      	cmp	r4, #0
 8001362:	d144      	bne.n	80013ee <__ledf2+0xda>
 8001364:	2800      	cmp	r0, #0
 8001366:	d119      	bne.n	800139c <__ledf2+0x88>
 8001368:	2001      	movs	r0, #1
 800136a:	4240      	negs	r0, r0
 800136c:	e016      	b.n	800139c <__ledf2+0x88>
 800136e:	4316      	orrs	r6, r2
 8001370:	d113      	bne.n	800139a <__ledf2+0x86>
 8001372:	2900      	cmp	r1, #0
 8001374:	d102      	bne.n	800137c <__ledf2+0x68>
 8001376:	9f01      	ldr	r7, [sp, #4]
 8001378:	4327      	orrs	r7, r4
 800137a:	d0f3      	beq.n	8001364 <__ledf2+0x50>
 800137c:	4584      	cmp	ip, r0
 800137e:	d020      	beq.n	80013c2 <__ledf2+0xae>
 8001380:	4663      	mov	r3, ip
 8001382:	2002      	movs	r0, #2
 8001384:	3b01      	subs	r3, #1
 8001386:	4018      	ands	r0, r3
 8001388:	3801      	subs	r0, #1
 800138a:	e007      	b.n	800139c <__ledf2+0x88>
 800138c:	9f01      	ldr	r7, [sp, #4]
 800138e:	4327      	orrs	r7, r4
 8001390:	d103      	bne.n	800139a <__ledf2+0x86>
 8001392:	458a      	cmp	sl, r1
 8001394:	d1f4      	bne.n	8001380 <__ledf2+0x6c>
 8001396:	4316      	orrs	r6, r2
 8001398:	d01f      	beq.n	80013da <__ledf2+0xc6>
 800139a:	2002      	movs	r0, #2
 800139c:	b003      	add	sp, #12
 800139e:	bcf0      	pop	{r4, r5, r6, r7}
 80013a0:	46bb      	mov	fp, r7
 80013a2:	46b2      	mov	sl, r6
 80013a4:	46a9      	mov	r9, r5
 80013a6:	46a0      	mov	r8, r4
 80013a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013aa:	4654      	mov	r4, sl
 80013ac:	2c00      	cmp	r4, #0
 80013ae:	d0e7      	beq.n	8001380 <__ledf2+0x6c>
 80013b0:	4584      	cmp	ip, r0
 80013b2:	d1e5      	bne.n	8001380 <__ledf2+0x6c>
 80013b4:	4551      	cmp	r1, sl
 80013b6:	dce3      	bgt.n	8001380 <__ledf2+0x6c>
 80013b8:	db03      	blt.n	80013c2 <__ledf2+0xae>
 80013ba:	9b01      	ldr	r3, [sp, #4]
 80013bc:	42b3      	cmp	r3, r6
 80013be:	d8df      	bhi.n	8001380 <__ledf2+0x6c>
 80013c0:	d00f      	beq.n	80013e2 <__ledf2+0xce>
 80013c2:	4663      	mov	r3, ip
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d0cf      	beq.n	8001368 <__ledf2+0x54>
 80013c8:	4660      	mov	r0, ip
 80013ca:	e7e7      	b.n	800139c <__ledf2+0x88>
 80013cc:	2c00      	cmp	r4, #0
 80013ce:	d0c9      	beq.n	8001364 <__ledf2+0x50>
 80013d0:	e7d4      	b.n	800137c <__ledf2+0x68>
 80013d2:	2000      	movs	r0, #0
 80013d4:	2c00      	cmp	r4, #0
 80013d6:	d0e1      	beq.n	800139c <__ledf2+0x88>
 80013d8:	e7d2      	b.n	8001380 <__ledf2+0x6c>
 80013da:	4584      	cmp	ip, r0
 80013dc:	d1d0      	bne.n	8001380 <__ledf2+0x6c>
 80013de:	2000      	movs	r0, #0
 80013e0:	e7dc      	b.n	800139c <__ledf2+0x88>
 80013e2:	45c8      	cmp	r8, r9
 80013e4:	d8cc      	bhi.n	8001380 <__ledf2+0x6c>
 80013e6:	2000      	movs	r0, #0
 80013e8:	45c8      	cmp	r8, r9
 80013ea:	d2d7      	bcs.n	800139c <__ledf2+0x88>
 80013ec:	e7e9      	b.n	80013c2 <__ledf2+0xae>
 80013ee:	4584      	cmp	ip, r0
 80013f0:	d0e3      	beq.n	80013ba <__ledf2+0xa6>
 80013f2:	e7c5      	b.n	8001380 <__ledf2+0x6c>
 80013f4:	000007ff 	.word	0x000007ff

080013f8 <__aeabi_dmul>:
 80013f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013fa:	4657      	mov	r7, sl
 80013fc:	46de      	mov	lr, fp
 80013fe:	464e      	mov	r6, r9
 8001400:	4645      	mov	r5, r8
 8001402:	b5e0      	push	{r5, r6, r7, lr}
 8001404:	001f      	movs	r7, r3
 8001406:	030b      	lsls	r3, r1, #12
 8001408:	0b1b      	lsrs	r3, r3, #12
 800140a:	0016      	movs	r6, r2
 800140c:	469a      	mov	sl, r3
 800140e:	0fca      	lsrs	r2, r1, #31
 8001410:	004b      	lsls	r3, r1, #1
 8001412:	0004      	movs	r4, r0
 8001414:	4693      	mov	fp, r2
 8001416:	b087      	sub	sp, #28
 8001418:	0d5b      	lsrs	r3, r3, #21
 800141a:	d100      	bne.n	800141e <__aeabi_dmul+0x26>
 800141c:	e0d5      	b.n	80015ca <__aeabi_dmul+0x1d2>
 800141e:	4abb      	ldr	r2, [pc, #748]	@ (800170c <__aeabi_dmul+0x314>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d100      	bne.n	8001426 <__aeabi_dmul+0x2e>
 8001424:	e0f8      	b.n	8001618 <__aeabi_dmul+0x220>
 8001426:	4651      	mov	r1, sl
 8001428:	0f42      	lsrs	r2, r0, #29
 800142a:	00c9      	lsls	r1, r1, #3
 800142c:	430a      	orrs	r2, r1
 800142e:	2180      	movs	r1, #128	@ 0x80
 8001430:	0409      	lsls	r1, r1, #16
 8001432:	4311      	orrs	r1, r2
 8001434:	00c2      	lsls	r2, r0, #3
 8001436:	4691      	mov	r9, r2
 8001438:	4ab5      	ldr	r2, [pc, #724]	@ (8001710 <__aeabi_dmul+0x318>)
 800143a:	468a      	mov	sl, r1
 800143c:	189d      	adds	r5, r3, r2
 800143e:	2300      	movs	r3, #0
 8001440:	4698      	mov	r8, r3
 8001442:	9302      	str	r3, [sp, #8]
 8001444:	033c      	lsls	r4, r7, #12
 8001446:	007b      	lsls	r3, r7, #1
 8001448:	0ffa      	lsrs	r2, r7, #31
 800144a:	0030      	movs	r0, r6
 800144c:	0b24      	lsrs	r4, r4, #12
 800144e:	0d5b      	lsrs	r3, r3, #21
 8001450:	9200      	str	r2, [sp, #0]
 8001452:	d100      	bne.n	8001456 <__aeabi_dmul+0x5e>
 8001454:	e096      	b.n	8001584 <__aeabi_dmul+0x18c>
 8001456:	4aad      	ldr	r2, [pc, #692]	@ (800170c <__aeabi_dmul+0x314>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d031      	beq.n	80014c0 <__aeabi_dmul+0xc8>
 800145c:	0f72      	lsrs	r2, r6, #29
 800145e:	00e4      	lsls	r4, r4, #3
 8001460:	4322      	orrs	r2, r4
 8001462:	2480      	movs	r4, #128	@ 0x80
 8001464:	0424      	lsls	r4, r4, #16
 8001466:	4314      	orrs	r4, r2
 8001468:	4aa9      	ldr	r2, [pc, #676]	@ (8001710 <__aeabi_dmul+0x318>)
 800146a:	00f0      	lsls	r0, r6, #3
 800146c:	4694      	mov	ip, r2
 800146e:	4463      	add	r3, ip
 8001470:	195b      	adds	r3, r3, r5
 8001472:	1c5a      	adds	r2, r3, #1
 8001474:	9201      	str	r2, [sp, #4]
 8001476:	4642      	mov	r2, r8
 8001478:	2600      	movs	r6, #0
 800147a:	2a0a      	cmp	r2, #10
 800147c:	dc42      	bgt.n	8001504 <__aeabi_dmul+0x10c>
 800147e:	465a      	mov	r2, fp
 8001480:	9900      	ldr	r1, [sp, #0]
 8001482:	404a      	eors	r2, r1
 8001484:	4693      	mov	fp, r2
 8001486:	4642      	mov	r2, r8
 8001488:	2a02      	cmp	r2, #2
 800148a:	dc32      	bgt.n	80014f2 <__aeabi_dmul+0xfa>
 800148c:	3a01      	subs	r2, #1
 800148e:	2a01      	cmp	r2, #1
 8001490:	d900      	bls.n	8001494 <__aeabi_dmul+0x9c>
 8001492:	e149      	b.n	8001728 <__aeabi_dmul+0x330>
 8001494:	2e02      	cmp	r6, #2
 8001496:	d100      	bne.n	800149a <__aeabi_dmul+0xa2>
 8001498:	e0ca      	b.n	8001630 <__aeabi_dmul+0x238>
 800149a:	2e01      	cmp	r6, #1
 800149c:	d13d      	bne.n	800151a <__aeabi_dmul+0x122>
 800149e:	2300      	movs	r3, #0
 80014a0:	2400      	movs	r4, #0
 80014a2:	2200      	movs	r2, #0
 80014a4:	0010      	movs	r0, r2
 80014a6:	465a      	mov	r2, fp
 80014a8:	051b      	lsls	r3, r3, #20
 80014aa:	4323      	orrs	r3, r4
 80014ac:	07d2      	lsls	r2, r2, #31
 80014ae:	4313      	orrs	r3, r2
 80014b0:	0019      	movs	r1, r3
 80014b2:	b007      	add	sp, #28
 80014b4:	bcf0      	pop	{r4, r5, r6, r7}
 80014b6:	46bb      	mov	fp, r7
 80014b8:	46b2      	mov	sl, r6
 80014ba:	46a9      	mov	r9, r5
 80014bc:	46a0      	mov	r8, r4
 80014be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014c0:	4b92      	ldr	r3, [pc, #584]	@ (800170c <__aeabi_dmul+0x314>)
 80014c2:	4326      	orrs	r6, r4
 80014c4:	18eb      	adds	r3, r5, r3
 80014c6:	2e00      	cmp	r6, #0
 80014c8:	d100      	bne.n	80014cc <__aeabi_dmul+0xd4>
 80014ca:	e0bb      	b.n	8001644 <__aeabi_dmul+0x24c>
 80014cc:	2203      	movs	r2, #3
 80014ce:	4641      	mov	r1, r8
 80014d0:	4311      	orrs	r1, r2
 80014d2:	465a      	mov	r2, fp
 80014d4:	4688      	mov	r8, r1
 80014d6:	9900      	ldr	r1, [sp, #0]
 80014d8:	404a      	eors	r2, r1
 80014da:	2180      	movs	r1, #128	@ 0x80
 80014dc:	0109      	lsls	r1, r1, #4
 80014de:	468c      	mov	ip, r1
 80014e0:	0029      	movs	r1, r5
 80014e2:	4461      	add	r1, ip
 80014e4:	9101      	str	r1, [sp, #4]
 80014e6:	4641      	mov	r1, r8
 80014e8:	290a      	cmp	r1, #10
 80014ea:	dd00      	ble.n	80014ee <__aeabi_dmul+0xf6>
 80014ec:	e233      	b.n	8001956 <__aeabi_dmul+0x55e>
 80014ee:	4693      	mov	fp, r2
 80014f0:	2603      	movs	r6, #3
 80014f2:	4642      	mov	r2, r8
 80014f4:	2701      	movs	r7, #1
 80014f6:	4097      	lsls	r7, r2
 80014f8:	21a6      	movs	r1, #166	@ 0xa6
 80014fa:	003a      	movs	r2, r7
 80014fc:	00c9      	lsls	r1, r1, #3
 80014fe:	400a      	ands	r2, r1
 8001500:	420f      	tst	r7, r1
 8001502:	d031      	beq.n	8001568 <__aeabi_dmul+0x170>
 8001504:	9e02      	ldr	r6, [sp, #8]
 8001506:	2e02      	cmp	r6, #2
 8001508:	d100      	bne.n	800150c <__aeabi_dmul+0x114>
 800150a:	e235      	b.n	8001978 <__aeabi_dmul+0x580>
 800150c:	2e03      	cmp	r6, #3
 800150e:	d100      	bne.n	8001512 <__aeabi_dmul+0x11a>
 8001510:	e1d2      	b.n	80018b8 <__aeabi_dmul+0x4c0>
 8001512:	4654      	mov	r4, sl
 8001514:	4648      	mov	r0, r9
 8001516:	2e01      	cmp	r6, #1
 8001518:	d0c1      	beq.n	800149e <__aeabi_dmul+0xa6>
 800151a:	9a01      	ldr	r2, [sp, #4]
 800151c:	4b7d      	ldr	r3, [pc, #500]	@ (8001714 <__aeabi_dmul+0x31c>)
 800151e:	4694      	mov	ip, r2
 8001520:	4463      	add	r3, ip
 8001522:	2b00      	cmp	r3, #0
 8001524:	dc00      	bgt.n	8001528 <__aeabi_dmul+0x130>
 8001526:	e0c0      	b.n	80016aa <__aeabi_dmul+0x2b2>
 8001528:	0742      	lsls	r2, r0, #29
 800152a:	d009      	beq.n	8001540 <__aeabi_dmul+0x148>
 800152c:	220f      	movs	r2, #15
 800152e:	4002      	ands	r2, r0
 8001530:	2a04      	cmp	r2, #4
 8001532:	d005      	beq.n	8001540 <__aeabi_dmul+0x148>
 8001534:	1d02      	adds	r2, r0, #4
 8001536:	4282      	cmp	r2, r0
 8001538:	4180      	sbcs	r0, r0
 800153a:	4240      	negs	r0, r0
 800153c:	1824      	adds	r4, r4, r0
 800153e:	0010      	movs	r0, r2
 8001540:	01e2      	lsls	r2, r4, #7
 8001542:	d506      	bpl.n	8001552 <__aeabi_dmul+0x15a>
 8001544:	4b74      	ldr	r3, [pc, #464]	@ (8001718 <__aeabi_dmul+0x320>)
 8001546:	9a01      	ldr	r2, [sp, #4]
 8001548:	401c      	ands	r4, r3
 800154a:	2380      	movs	r3, #128	@ 0x80
 800154c:	4694      	mov	ip, r2
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	4463      	add	r3, ip
 8001552:	4a72      	ldr	r2, [pc, #456]	@ (800171c <__aeabi_dmul+0x324>)
 8001554:	4293      	cmp	r3, r2
 8001556:	dc6b      	bgt.n	8001630 <__aeabi_dmul+0x238>
 8001558:	0762      	lsls	r2, r4, #29
 800155a:	08c0      	lsrs	r0, r0, #3
 800155c:	0264      	lsls	r4, r4, #9
 800155e:	055b      	lsls	r3, r3, #21
 8001560:	4302      	orrs	r2, r0
 8001562:	0b24      	lsrs	r4, r4, #12
 8001564:	0d5b      	lsrs	r3, r3, #21
 8001566:	e79d      	b.n	80014a4 <__aeabi_dmul+0xac>
 8001568:	2190      	movs	r1, #144	@ 0x90
 800156a:	0089      	lsls	r1, r1, #2
 800156c:	420f      	tst	r7, r1
 800156e:	d163      	bne.n	8001638 <__aeabi_dmul+0x240>
 8001570:	2288      	movs	r2, #136	@ 0x88
 8001572:	423a      	tst	r2, r7
 8001574:	d100      	bne.n	8001578 <__aeabi_dmul+0x180>
 8001576:	e0d7      	b.n	8001728 <__aeabi_dmul+0x330>
 8001578:	9b00      	ldr	r3, [sp, #0]
 800157a:	46a2      	mov	sl, r4
 800157c:	469b      	mov	fp, r3
 800157e:	4681      	mov	r9, r0
 8001580:	9602      	str	r6, [sp, #8]
 8001582:	e7bf      	b.n	8001504 <__aeabi_dmul+0x10c>
 8001584:	0023      	movs	r3, r4
 8001586:	4333      	orrs	r3, r6
 8001588:	d100      	bne.n	800158c <__aeabi_dmul+0x194>
 800158a:	e07f      	b.n	800168c <__aeabi_dmul+0x294>
 800158c:	2c00      	cmp	r4, #0
 800158e:	d100      	bne.n	8001592 <__aeabi_dmul+0x19a>
 8001590:	e1ad      	b.n	80018ee <__aeabi_dmul+0x4f6>
 8001592:	0020      	movs	r0, r4
 8001594:	f000 ff10 	bl	80023b8 <__clzsi2>
 8001598:	0002      	movs	r2, r0
 800159a:	0003      	movs	r3, r0
 800159c:	3a0b      	subs	r2, #11
 800159e:	201d      	movs	r0, #29
 80015a0:	0019      	movs	r1, r3
 80015a2:	1a82      	subs	r2, r0, r2
 80015a4:	0030      	movs	r0, r6
 80015a6:	3908      	subs	r1, #8
 80015a8:	40d0      	lsrs	r0, r2
 80015aa:	408c      	lsls	r4, r1
 80015ac:	4304      	orrs	r4, r0
 80015ae:	0030      	movs	r0, r6
 80015b0:	4088      	lsls	r0, r1
 80015b2:	4a5b      	ldr	r2, [pc, #364]	@ (8001720 <__aeabi_dmul+0x328>)
 80015b4:	1aeb      	subs	r3, r5, r3
 80015b6:	4694      	mov	ip, r2
 80015b8:	4463      	add	r3, ip
 80015ba:	1c5a      	adds	r2, r3, #1
 80015bc:	9201      	str	r2, [sp, #4]
 80015be:	4642      	mov	r2, r8
 80015c0:	2600      	movs	r6, #0
 80015c2:	2a0a      	cmp	r2, #10
 80015c4:	dc00      	bgt.n	80015c8 <__aeabi_dmul+0x1d0>
 80015c6:	e75a      	b.n	800147e <__aeabi_dmul+0x86>
 80015c8:	e79c      	b.n	8001504 <__aeabi_dmul+0x10c>
 80015ca:	4653      	mov	r3, sl
 80015cc:	4303      	orrs	r3, r0
 80015ce:	4699      	mov	r9, r3
 80015d0:	d054      	beq.n	800167c <__aeabi_dmul+0x284>
 80015d2:	4653      	mov	r3, sl
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d100      	bne.n	80015da <__aeabi_dmul+0x1e2>
 80015d8:	e177      	b.n	80018ca <__aeabi_dmul+0x4d2>
 80015da:	4650      	mov	r0, sl
 80015dc:	f000 feec 	bl	80023b8 <__clzsi2>
 80015e0:	230b      	movs	r3, #11
 80015e2:	425b      	negs	r3, r3
 80015e4:	469c      	mov	ip, r3
 80015e6:	0002      	movs	r2, r0
 80015e8:	4484      	add	ip, r0
 80015ea:	0011      	movs	r1, r2
 80015ec:	4650      	mov	r0, sl
 80015ee:	3908      	subs	r1, #8
 80015f0:	4088      	lsls	r0, r1
 80015f2:	231d      	movs	r3, #29
 80015f4:	4680      	mov	r8, r0
 80015f6:	4660      	mov	r0, ip
 80015f8:	1a1b      	subs	r3, r3, r0
 80015fa:	0020      	movs	r0, r4
 80015fc:	40d8      	lsrs	r0, r3
 80015fe:	0003      	movs	r3, r0
 8001600:	4640      	mov	r0, r8
 8001602:	4303      	orrs	r3, r0
 8001604:	469a      	mov	sl, r3
 8001606:	0023      	movs	r3, r4
 8001608:	408b      	lsls	r3, r1
 800160a:	4699      	mov	r9, r3
 800160c:	2300      	movs	r3, #0
 800160e:	4d44      	ldr	r5, [pc, #272]	@ (8001720 <__aeabi_dmul+0x328>)
 8001610:	4698      	mov	r8, r3
 8001612:	1aad      	subs	r5, r5, r2
 8001614:	9302      	str	r3, [sp, #8]
 8001616:	e715      	b.n	8001444 <__aeabi_dmul+0x4c>
 8001618:	4652      	mov	r2, sl
 800161a:	4302      	orrs	r2, r0
 800161c:	4691      	mov	r9, r2
 800161e:	d126      	bne.n	800166e <__aeabi_dmul+0x276>
 8001620:	2200      	movs	r2, #0
 8001622:	001d      	movs	r5, r3
 8001624:	2302      	movs	r3, #2
 8001626:	4692      	mov	sl, r2
 8001628:	3208      	adds	r2, #8
 800162a:	4690      	mov	r8, r2
 800162c:	9302      	str	r3, [sp, #8]
 800162e:	e709      	b.n	8001444 <__aeabi_dmul+0x4c>
 8001630:	2400      	movs	r4, #0
 8001632:	2200      	movs	r2, #0
 8001634:	4b35      	ldr	r3, [pc, #212]	@ (800170c <__aeabi_dmul+0x314>)
 8001636:	e735      	b.n	80014a4 <__aeabi_dmul+0xac>
 8001638:	2300      	movs	r3, #0
 800163a:	2480      	movs	r4, #128	@ 0x80
 800163c:	469b      	mov	fp, r3
 800163e:	0324      	lsls	r4, r4, #12
 8001640:	4b32      	ldr	r3, [pc, #200]	@ (800170c <__aeabi_dmul+0x314>)
 8001642:	e72f      	b.n	80014a4 <__aeabi_dmul+0xac>
 8001644:	2202      	movs	r2, #2
 8001646:	4641      	mov	r1, r8
 8001648:	4311      	orrs	r1, r2
 800164a:	2280      	movs	r2, #128	@ 0x80
 800164c:	0112      	lsls	r2, r2, #4
 800164e:	4694      	mov	ip, r2
 8001650:	002a      	movs	r2, r5
 8001652:	4462      	add	r2, ip
 8001654:	4688      	mov	r8, r1
 8001656:	9201      	str	r2, [sp, #4]
 8001658:	290a      	cmp	r1, #10
 800165a:	dd00      	ble.n	800165e <__aeabi_dmul+0x266>
 800165c:	e752      	b.n	8001504 <__aeabi_dmul+0x10c>
 800165e:	465a      	mov	r2, fp
 8001660:	2000      	movs	r0, #0
 8001662:	9900      	ldr	r1, [sp, #0]
 8001664:	0004      	movs	r4, r0
 8001666:	404a      	eors	r2, r1
 8001668:	4693      	mov	fp, r2
 800166a:	2602      	movs	r6, #2
 800166c:	e70b      	b.n	8001486 <__aeabi_dmul+0x8e>
 800166e:	220c      	movs	r2, #12
 8001670:	001d      	movs	r5, r3
 8001672:	2303      	movs	r3, #3
 8001674:	4681      	mov	r9, r0
 8001676:	4690      	mov	r8, r2
 8001678:	9302      	str	r3, [sp, #8]
 800167a:	e6e3      	b.n	8001444 <__aeabi_dmul+0x4c>
 800167c:	2300      	movs	r3, #0
 800167e:	469a      	mov	sl, r3
 8001680:	3304      	adds	r3, #4
 8001682:	4698      	mov	r8, r3
 8001684:	3b03      	subs	r3, #3
 8001686:	2500      	movs	r5, #0
 8001688:	9302      	str	r3, [sp, #8]
 800168a:	e6db      	b.n	8001444 <__aeabi_dmul+0x4c>
 800168c:	4642      	mov	r2, r8
 800168e:	3301      	adds	r3, #1
 8001690:	431a      	orrs	r2, r3
 8001692:	002b      	movs	r3, r5
 8001694:	4690      	mov	r8, r2
 8001696:	1c5a      	adds	r2, r3, #1
 8001698:	9201      	str	r2, [sp, #4]
 800169a:	4642      	mov	r2, r8
 800169c:	2400      	movs	r4, #0
 800169e:	2000      	movs	r0, #0
 80016a0:	2601      	movs	r6, #1
 80016a2:	2a0a      	cmp	r2, #10
 80016a4:	dc00      	bgt.n	80016a8 <__aeabi_dmul+0x2b0>
 80016a6:	e6ea      	b.n	800147e <__aeabi_dmul+0x86>
 80016a8:	e72c      	b.n	8001504 <__aeabi_dmul+0x10c>
 80016aa:	2201      	movs	r2, #1
 80016ac:	1ad2      	subs	r2, r2, r3
 80016ae:	2a38      	cmp	r2, #56	@ 0x38
 80016b0:	dd00      	ble.n	80016b4 <__aeabi_dmul+0x2bc>
 80016b2:	e6f4      	b.n	800149e <__aeabi_dmul+0xa6>
 80016b4:	2a1f      	cmp	r2, #31
 80016b6:	dc00      	bgt.n	80016ba <__aeabi_dmul+0x2c2>
 80016b8:	e12a      	b.n	8001910 <__aeabi_dmul+0x518>
 80016ba:	211f      	movs	r1, #31
 80016bc:	4249      	negs	r1, r1
 80016be:	1acb      	subs	r3, r1, r3
 80016c0:	0021      	movs	r1, r4
 80016c2:	40d9      	lsrs	r1, r3
 80016c4:	000b      	movs	r3, r1
 80016c6:	2a20      	cmp	r2, #32
 80016c8:	d005      	beq.n	80016d6 <__aeabi_dmul+0x2de>
 80016ca:	4a16      	ldr	r2, [pc, #88]	@ (8001724 <__aeabi_dmul+0x32c>)
 80016cc:	9d01      	ldr	r5, [sp, #4]
 80016ce:	4694      	mov	ip, r2
 80016d0:	4465      	add	r5, ip
 80016d2:	40ac      	lsls	r4, r5
 80016d4:	4320      	orrs	r0, r4
 80016d6:	1e42      	subs	r2, r0, #1
 80016d8:	4190      	sbcs	r0, r2
 80016da:	4318      	orrs	r0, r3
 80016dc:	2307      	movs	r3, #7
 80016de:	0019      	movs	r1, r3
 80016e0:	2400      	movs	r4, #0
 80016e2:	4001      	ands	r1, r0
 80016e4:	4203      	tst	r3, r0
 80016e6:	d00c      	beq.n	8001702 <__aeabi_dmul+0x30a>
 80016e8:	230f      	movs	r3, #15
 80016ea:	4003      	ands	r3, r0
 80016ec:	2b04      	cmp	r3, #4
 80016ee:	d100      	bne.n	80016f2 <__aeabi_dmul+0x2fa>
 80016f0:	e140      	b.n	8001974 <__aeabi_dmul+0x57c>
 80016f2:	1d03      	adds	r3, r0, #4
 80016f4:	4283      	cmp	r3, r0
 80016f6:	41a4      	sbcs	r4, r4
 80016f8:	0018      	movs	r0, r3
 80016fa:	4264      	negs	r4, r4
 80016fc:	0761      	lsls	r1, r4, #29
 80016fe:	0264      	lsls	r4, r4, #9
 8001700:	0b24      	lsrs	r4, r4, #12
 8001702:	08c2      	lsrs	r2, r0, #3
 8001704:	2300      	movs	r3, #0
 8001706:	430a      	orrs	r2, r1
 8001708:	e6cc      	b.n	80014a4 <__aeabi_dmul+0xac>
 800170a:	46c0      	nop			@ (mov r8, r8)
 800170c:	000007ff 	.word	0x000007ff
 8001710:	fffffc01 	.word	0xfffffc01
 8001714:	000003ff 	.word	0x000003ff
 8001718:	feffffff 	.word	0xfeffffff
 800171c:	000007fe 	.word	0x000007fe
 8001720:	fffffc0d 	.word	0xfffffc0d
 8001724:	0000043e 	.word	0x0000043e
 8001728:	4649      	mov	r1, r9
 800172a:	464a      	mov	r2, r9
 800172c:	0409      	lsls	r1, r1, #16
 800172e:	0c09      	lsrs	r1, r1, #16
 8001730:	000d      	movs	r5, r1
 8001732:	0c16      	lsrs	r6, r2, #16
 8001734:	0c02      	lsrs	r2, r0, #16
 8001736:	0400      	lsls	r0, r0, #16
 8001738:	0c00      	lsrs	r0, r0, #16
 800173a:	4345      	muls	r5, r0
 800173c:	46ac      	mov	ip, r5
 800173e:	0005      	movs	r5, r0
 8001740:	4375      	muls	r5, r6
 8001742:	46a8      	mov	r8, r5
 8001744:	0015      	movs	r5, r2
 8001746:	000f      	movs	r7, r1
 8001748:	4375      	muls	r5, r6
 800174a:	9200      	str	r2, [sp, #0]
 800174c:	9502      	str	r5, [sp, #8]
 800174e:	002a      	movs	r2, r5
 8001750:	9d00      	ldr	r5, [sp, #0]
 8001752:	436f      	muls	r7, r5
 8001754:	4665      	mov	r5, ip
 8001756:	0c2d      	lsrs	r5, r5, #16
 8001758:	46a9      	mov	r9, r5
 800175a:	4447      	add	r7, r8
 800175c:	444f      	add	r7, r9
 800175e:	45b8      	cmp	r8, r7
 8001760:	d905      	bls.n	800176e <__aeabi_dmul+0x376>
 8001762:	0015      	movs	r5, r2
 8001764:	2280      	movs	r2, #128	@ 0x80
 8001766:	0252      	lsls	r2, r2, #9
 8001768:	4690      	mov	r8, r2
 800176a:	4445      	add	r5, r8
 800176c:	9502      	str	r5, [sp, #8]
 800176e:	0c3d      	lsrs	r5, r7, #16
 8001770:	9503      	str	r5, [sp, #12]
 8001772:	4665      	mov	r5, ip
 8001774:	042d      	lsls	r5, r5, #16
 8001776:	043f      	lsls	r7, r7, #16
 8001778:	0c2d      	lsrs	r5, r5, #16
 800177a:	46ac      	mov	ip, r5
 800177c:	003d      	movs	r5, r7
 800177e:	4465      	add	r5, ip
 8001780:	9504      	str	r5, [sp, #16]
 8001782:	0c25      	lsrs	r5, r4, #16
 8001784:	0424      	lsls	r4, r4, #16
 8001786:	0c24      	lsrs	r4, r4, #16
 8001788:	46ac      	mov	ip, r5
 800178a:	0025      	movs	r5, r4
 800178c:	4375      	muls	r5, r6
 800178e:	46a8      	mov	r8, r5
 8001790:	4665      	mov	r5, ip
 8001792:	000f      	movs	r7, r1
 8001794:	4369      	muls	r1, r5
 8001796:	4441      	add	r1, r8
 8001798:	4689      	mov	r9, r1
 800179a:	4367      	muls	r7, r4
 800179c:	0c39      	lsrs	r1, r7, #16
 800179e:	4449      	add	r1, r9
 80017a0:	436e      	muls	r6, r5
 80017a2:	4588      	cmp	r8, r1
 80017a4:	d903      	bls.n	80017ae <__aeabi_dmul+0x3b6>
 80017a6:	2280      	movs	r2, #128	@ 0x80
 80017a8:	0252      	lsls	r2, r2, #9
 80017aa:	4690      	mov	r8, r2
 80017ac:	4446      	add	r6, r8
 80017ae:	0c0d      	lsrs	r5, r1, #16
 80017b0:	46a8      	mov	r8, r5
 80017b2:	0035      	movs	r5, r6
 80017b4:	4445      	add	r5, r8
 80017b6:	9505      	str	r5, [sp, #20]
 80017b8:	9d03      	ldr	r5, [sp, #12]
 80017ba:	043f      	lsls	r7, r7, #16
 80017bc:	46a8      	mov	r8, r5
 80017be:	0c3f      	lsrs	r7, r7, #16
 80017c0:	0409      	lsls	r1, r1, #16
 80017c2:	19c9      	adds	r1, r1, r7
 80017c4:	4488      	add	r8, r1
 80017c6:	4645      	mov	r5, r8
 80017c8:	9503      	str	r5, [sp, #12]
 80017ca:	4655      	mov	r5, sl
 80017cc:	042e      	lsls	r6, r5, #16
 80017ce:	0c36      	lsrs	r6, r6, #16
 80017d0:	0c2f      	lsrs	r7, r5, #16
 80017d2:	0035      	movs	r5, r6
 80017d4:	4345      	muls	r5, r0
 80017d6:	4378      	muls	r0, r7
 80017d8:	4681      	mov	r9, r0
 80017da:	0038      	movs	r0, r7
 80017dc:	46a8      	mov	r8, r5
 80017de:	0c2d      	lsrs	r5, r5, #16
 80017e0:	46aa      	mov	sl, r5
 80017e2:	9a00      	ldr	r2, [sp, #0]
 80017e4:	4350      	muls	r0, r2
 80017e6:	4372      	muls	r2, r6
 80017e8:	444a      	add	r2, r9
 80017ea:	4452      	add	r2, sl
 80017ec:	4591      	cmp	r9, r2
 80017ee:	d903      	bls.n	80017f8 <__aeabi_dmul+0x400>
 80017f0:	2580      	movs	r5, #128	@ 0x80
 80017f2:	026d      	lsls	r5, r5, #9
 80017f4:	46a9      	mov	r9, r5
 80017f6:	4448      	add	r0, r9
 80017f8:	0c15      	lsrs	r5, r2, #16
 80017fa:	46a9      	mov	r9, r5
 80017fc:	4645      	mov	r5, r8
 80017fe:	042d      	lsls	r5, r5, #16
 8001800:	0c2d      	lsrs	r5, r5, #16
 8001802:	46a8      	mov	r8, r5
 8001804:	4665      	mov	r5, ip
 8001806:	437d      	muls	r5, r7
 8001808:	0412      	lsls	r2, r2, #16
 800180a:	4448      	add	r0, r9
 800180c:	4490      	add	r8, r2
 800180e:	46a9      	mov	r9, r5
 8001810:	0032      	movs	r2, r6
 8001812:	4665      	mov	r5, ip
 8001814:	4362      	muls	r2, r4
 8001816:	436e      	muls	r6, r5
 8001818:	437c      	muls	r4, r7
 800181a:	0c17      	lsrs	r7, r2, #16
 800181c:	1936      	adds	r6, r6, r4
 800181e:	19bf      	adds	r7, r7, r6
 8001820:	42bc      	cmp	r4, r7
 8001822:	d903      	bls.n	800182c <__aeabi_dmul+0x434>
 8001824:	2480      	movs	r4, #128	@ 0x80
 8001826:	0264      	lsls	r4, r4, #9
 8001828:	46a4      	mov	ip, r4
 800182a:	44e1      	add	r9, ip
 800182c:	9c02      	ldr	r4, [sp, #8]
 800182e:	9e03      	ldr	r6, [sp, #12]
 8001830:	46a4      	mov	ip, r4
 8001832:	9d05      	ldr	r5, [sp, #20]
 8001834:	4466      	add	r6, ip
 8001836:	428e      	cmp	r6, r1
 8001838:	4189      	sbcs	r1, r1
 800183a:	46ac      	mov	ip, r5
 800183c:	0412      	lsls	r2, r2, #16
 800183e:	043c      	lsls	r4, r7, #16
 8001840:	0c12      	lsrs	r2, r2, #16
 8001842:	18a2      	adds	r2, r4, r2
 8001844:	4462      	add	r2, ip
 8001846:	4249      	negs	r1, r1
 8001848:	1854      	adds	r4, r2, r1
 800184a:	4446      	add	r6, r8
 800184c:	46a4      	mov	ip, r4
 800184e:	4546      	cmp	r6, r8
 8001850:	41a4      	sbcs	r4, r4
 8001852:	4682      	mov	sl, r0
 8001854:	4264      	negs	r4, r4
 8001856:	46a0      	mov	r8, r4
 8001858:	42aa      	cmp	r2, r5
 800185a:	4192      	sbcs	r2, r2
 800185c:	458c      	cmp	ip, r1
 800185e:	4189      	sbcs	r1, r1
 8001860:	44e2      	add	sl, ip
 8001862:	44d0      	add	r8, sl
 8001864:	4249      	negs	r1, r1
 8001866:	4252      	negs	r2, r2
 8001868:	430a      	orrs	r2, r1
 800186a:	45a0      	cmp	r8, r4
 800186c:	41a4      	sbcs	r4, r4
 800186e:	4582      	cmp	sl, r0
 8001870:	4189      	sbcs	r1, r1
 8001872:	4264      	negs	r4, r4
 8001874:	4249      	negs	r1, r1
 8001876:	430c      	orrs	r4, r1
 8001878:	4641      	mov	r1, r8
 800187a:	0c3f      	lsrs	r7, r7, #16
 800187c:	19d2      	adds	r2, r2, r7
 800187e:	1912      	adds	r2, r2, r4
 8001880:	0dcc      	lsrs	r4, r1, #23
 8001882:	9904      	ldr	r1, [sp, #16]
 8001884:	0270      	lsls	r0, r6, #9
 8001886:	4308      	orrs	r0, r1
 8001888:	1e41      	subs	r1, r0, #1
 800188a:	4188      	sbcs	r0, r1
 800188c:	4641      	mov	r1, r8
 800188e:	444a      	add	r2, r9
 8001890:	0df6      	lsrs	r6, r6, #23
 8001892:	0252      	lsls	r2, r2, #9
 8001894:	4330      	orrs	r0, r6
 8001896:	0249      	lsls	r1, r1, #9
 8001898:	4314      	orrs	r4, r2
 800189a:	4308      	orrs	r0, r1
 800189c:	01d2      	lsls	r2, r2, #7
 800189e:	d535      	bpl.n	800190c <__aeabi_dmul+0x514>
 80018a0:	2201      	movs	r2, #1
 80018a2:	0843      	lsrs	r3, r0, #1
 80018a4:	4002      	ands	r2, r0
 80018a6:	4313      	orrs	r3, r2
 80018a8:	07e0      	lsls	r0, r4, #31
 80018aa:	4318      	orrs	r0, r3
 80018ac:	0864      	lsrs	r4, r4, #1
 80018ae:	e634      	b.n	800151a <__aeabi_dmul+0x122>
 80018b0:	9b00      	ldr	r3, [sp, #0]
 80018b2:	46a2      	mov	sl, r4
 80018b4:	469b      	mov	fp, r3
 80018b6:	4681      	mov	r9, r0
 80018b8:	2480      	movs	r4, #128	@ 0x80
 80018ba:	4653      	mov	r3, sl
 80018bc:	0324      	lsls	r4, r4, #12
 80018be:	431c      	orrs	r4, r3
 80018c0:	0324      	lsls	r4, r4, #12
 80018c2:	464a      	mov	r2, r9
 80018c4:	4b2e      	ldr	r3, [pc, #184]	@ (8001980 <__aeabi_dmul+0x588>)
 80018c6:	0b24      	lsrs	r4, r4, #12
 80018c8:	e5ec      	b.n	80014a4 <__aeabi_dmul+0xac>
 80018ca:	f000 fd75 	bl	80023b8 <__clzsi2>
 80018ce:	2315      	movs	r3, #21
 80018d0:	469c      	mov	ip, r3
 80018d2:	4484      	add	ip, r0
 80018d4:	0002      	movs	r2, r0
 80018d6:	4663      	mov	r3, ip
 80018d8:	3220      	adds	r2, #32
 80018da:	2b1c      	cmp	r3, #28
 80018dc:	dc00      	bgt.n	80018e0 <__aeabi_dmul+0x4e8>
 80018de:	e684      	b.n	80015ea <__aeabi_dmul+0x1f2>
 80018e0:	2300      	movs	r3, #0
 80018e2:	4699      	mov	r9, r3
 80018e4:	0023      	movs	r3, r4
 80018e6:	3808      	subs	r0, #8
 80018e8:	4083      	lsls	r3, r0
 80018ea:	469a      	mov	sl, r3
 80018ec:	e68e      	b.n	800160c <__aeabi_dmul+0x214>
 80018ee:	f000 fd63 	bl	80023b8 <__clzsi2>
 80018f2:	0002      	movs	r2, r0
 80018f4:	0003      	movs	r3, r0
 80018f6:	3215      	adds	r2, #21
 80018f8:	3320      	adds	r3, #32
 80018fa:	2a1c      	cmp	r2, #28
 80018fc:	dc00      	bgt.n	8001900 <__aeabi_dmul+0x508>
 80018fe:	e64e      	b.n	800159e <__aeabi_dmul+0x1a6>
 8001900:	0002      	movs	r2, r0
 8001902:	0034      	movs	r4, r6
 8001904:	3a08      	subs	r2, #8
 8001906:	2000      	movs	r0, #0
 8001908:	4094      	lsls	r4, r2
 800190a:	e652      	b.n	80015b2 <__aeabi_dmul+0x1ba>
 800190c:	9301      	str	r3, [sp, #4]
 800190e:	e604      	b.n	800151a <__aeabi_dmul+0x122>
 8001910:	4b1c      	ldr	r3, [pc, #112]	@ (8001984 <__aeabi_dmul+0x58c>)
 8001912:	0021      	movs	r1, r4
 8001914:	469c      	mov	ip, r3
 8001916:	0003      	movs	r3, r0
 8001918:	9d01      	ldr	r5, [sp, #4]
 800191a:	40d3      	lsrs	r3, r2
 800191c:	4465      	add	r5, ip
 800191e:	40a9      	lsls	r1, r5
 8001920:	4319      	orrs	r1, r3
 8001922:	0003      	movs	r3, r0
 8001924:	40ab      	lsls	r3, r5
 8001926:	1e58      	subs	r0, r3, #1
 8001928:	4183      	sbcs	r3, r0
 800192a:	4319      	orrs	r1, r3
 800192c:	0008      	movs	r0, r1
 800192e:	40d4      	lsrs	r4, r2
 8001930:	074b      	lsls	r3, r1, #29
 8001932:	d009      	beq.n	8001948 <__aeabi_dmul+0x550>
 8001934:	230f      	movs	r3, #15
 8001936:	400b      	ands	r3, r1
 8001938:	2b04      	cmp	r3, #4
 800193a:	d005      	beq.n	8001948 <__aeabi_dmul+0x550>
 800193c:	1d0b      	adds	r3, r1, #4
 800193e:	428b      	cmp	r3, r1
 8001940:	4180      	sbcs	r0, r0
 8001942:	4240      	negs	r0, r0
 8001944:	1824      	adds	r4, r4, r0
 8001946:	0018      	movs	r0, r3
 8001948:	0223      	lsls	r3, r4, #8
 800194a:	d400      	bmi.n	800194e <__aeabi_dmul+0x556>
 800194c:	e6d6      	b.n	80016fc <__aeabi_dmul+0x304>
 800194e:	2301      	movs	r3, #1
 8001950:	2400      	movs	r4, #0
 8001952:	2200      	movs	r2, #0
 8001954:	e5a6      	b.n	80014a4 <__aeabi_dmul+0xac>
 8001956:	290f      	cmp	r1, #15
 8001958:	d1aa      	bne.n	80018b0 <__aeabi_dmul+0x4b8>
 800195a:	2380      	movs	r3, #128	@ 0x80
 800195c:	4652      	mov	r2, sl
 800195e:	031b      	lsls	r3, r3, #12
 8001960:	421a      	tst	r2, r3
 8001962:	d0a9      	beq.n	80018b8 <__aeabi_dmul+0x4c0>
 8001964:	421c      	tst	r4, r3
 8001966:	d1a7      	bne.n	80018b8 <__aeabi_dmul+0x4c0>
 8001968:	431c      	orrs	r4, r3
 800196a:	9b00      	ldr	r3, [sp, #0]
 800196c:	0002      	movs	r2, r0
 800196e:	469b      	mov	fp, r3
 8001970:	4b03      	ldr	r3, [pc, #12]	@ (8001980 <__aeabi_dmul+0x588>)
 8001972:	e597      	b.n	80014a4 <__aeabi_dmul+0xac>
 8001974:	2400      	movs	r4, #0
 8001976:	e6c1      	b.n	80016fc <__aeabi_dmul+0x304>
 8001978:	2400      	movs	r4, #0
 800197a:	4b01      	ldr	r3, [pc, #4]	@ (8001980 <__aeabi_dmul+0x588>)
 800197c:	0022      	movs	r2, r4
 800197e:	e591      	b.n	80014a4 <__aeabi_dmul+0xac>
 8001980:	000007ff 	.word	0x000007ff
 8001984:	0000041e 	.word	0x0000041e

08001988 <__aeabi_dsub>:
 8001988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800198a:	464e      	mov	r6, r9
 800198c:	4645      	mov	r5, r8
 800198e:	46de      	mov	lr, fp
 8001990:	4657      	mov	r7, sl
 8001992:	b5e0      	push	{r5, r6, r7, lr}
 8001994:	b085      	sub	sp, #20
 8001996:	9000      	str	r0, [sp, #0]
 8001998:	9101      	str	r1, [sp, #4]
 800199a:	030c      	lsls	r4, r1, #12
 800199c:	004f      	lsls	r7, r1, #1
 800199e:	0fce      	lsrs	r6, r1, #31
 80019a0:	0a61      	lsrs	r1, r4, #9
 80019a2:	9c00      	ldr	r4, [sp, #0]
 80019a4:	46b0      	mov	r8, r6
 80019a6:	0f64      	lsrs	r4, r4, #29
 80019a8:	430c      	orrs	r4, r1
 80019aa:	9900      	ldr	r1, [sp, #0]
 80019ac:	0d7f      	lsrs	r7, r7, #21
 80019ae:	00c8      	lsls	r0, r1, #3
 80019b0:	0011      	movs	r1, r2
 80019b2:	001a      	movs	r2, r3
 80019b4:	031b      	lsls	r3, r3, #12
 80019b6:	469c      	mov	ip, r3
 80019b8:	9100      	str	r1, [sp, #0]
 80019ba:	9201      	str	r2, [sp, #4]
 80019bc:	0051      	lsls	r1, r2, #1
 80019be:	0d4b      	lsrs	r3, r1, #21
 80019c0:	4699      	mov	r9, r3
 80019c2:	9b01      	ldr	r3, [sp, #4]
 80019c4:	9d00      	ldr	r5, [sp, #0]
 80019c6:	0fd9      	lsrs	r1, r3, #31
 80019c8:	4663      	mov	r3, ip
 80019ca:	0f6a      	lsrs	r2, r5, #29
 80019cc:	0a5b      	lsrs	r3, r3, #9
 80019ce:	4313      	orrs	r3, r2
 80019d0:	00ea      	lsls	r2, r5, #3
 80019d2:	4694      	mov	ip, r2
 80019d4:	4693      	mov	fp, r2
 80019d6:	4ac1      	ldr	r2, [pc, #772]	@ (8001cdc <__aeabi_dsub+0x354>)
 80019d8:	9003      	str	r0, [sp, #12]
 80019da:	9302      	str	r3, [sp, #8]
 80019dc:	4591      	cmp	r9, r2
 80019de:	d100      	bne.n	80019e2 <__aeabi_dsub+0x5a>
 80019e0:	e0cd      	b.n	8001b7e <__aeabi_dsub+0x1f6>
 80019e2:	2501      	movs	r5, #1
 80019e4:	4069      	eors	r1, r5
 80019e6:	464d      	mov	r5, r9
 80019e8:	1b7d      	subs	r5, r7, r5
 80019ea:	46aa      	mov	sl, r5
 80019ec:	428e      	cmp	r6, r1
 80019ee:	d100      	bne.n	80019f2 <__aeabi_dsub+0x6a>
 80019f0:	e080      	b.n	8001af4 <__aeabi_dsub+0x16c>
 80019f2:	2d00      	cmp	r5, #0
 80019f4:	dc00      	bgt.n	80019f8 <__aeabi_dsub+0x70>
 80019f6:	e335      	b.n	8002064 <__aeabi_dsub+0x6dc>
 80019f8:	4649      	mov	r1, r9
 80019fa:	2900      	cmp	r1, #0
 80019fc:	d100      	bne.n	8001a00 <__aeabi_dsub+0x78>
 80019fe:	e0df      	b.n	8001bc0 <__aeabi_dsub+0x238>
 8001a00:	4297      	cmp	r7, r2
 8001a02:	d100      	bne.n	8001a06 <__aeabi_dsub+0x7e>
 8001a04:	e194      	b.n	8001d30 <__aeabi_dsub+0x3a8>
 8001a06:	4652      	mov	r2, sl
 8001a08:	2501      	movs	r5, #1
 8001a0a:	2a38      	cmp	r2, #56	@ 0x38
 8001a0c:	dc19      	bgt.n	8001a42 <__aeabi_dsub+0xba>
 8001a0e:	2280      	movs	r2, #128	@ 0x80
 8001a10:	9b02      	ldr	r3, [sp, #8]
 8001a12:	0412      	lsls	r2, r2, #16
 8001a14:	4313      	orrs	r3, r2
 8001a16:	9302      	str	r3, [sp, #8]
 8001a18:	4652      	mov	r2, sl
 8001a1a:	2a1f      	cmp	r2, #31
 8001a1c:	dd00      	ble.n	8001a20 <__aeabi_dsub+0x98>
 8001a1e:	e1e3      	b.n	8001de8 <__aeabi_dsub+0x460>
 8001a20:	4653      	mov	r3, sl
 8001a22:	2220      	movs	r2, #32
 8001a24:	4661      	mov	r1, ip
 8001a26:	9d02      	ldr	r5, [sp, #8]
 8001a28:	1ad2      	subs	r2, r2, r3
 8001a2a:	4095      	lsls	r5, r2
 8001a2c:	40d9      	lsrs	r1, r3
 8001a2e:	430d      	orrs	r5, r1
 8001a30:	4661      	mov	r1, ip
 8001a32:	4091      	lsls	r1, r2
 8001a34:	000a      	movs	r2, r1
 8001a36:	1e51      	subs	r1, r2, #1
 8001a38:	418a      	sbcs	r2, r1
 8001a3a:	4315      	orrs	r5, r2
 8001a3c:	9a02      	ldr	r2, [sp, #8]
 8001a3e:	40da      	lsrs	r2, r3
 8001a40:	1aa4      	subs	r4, r4, r2
 8001a42:	1b45      	subs	r5, r0, r5
 8001a44:	42a8      	cmp	r0, r5
 8001a46:	4180      	sbcs	r0, r0
 8001a48:	4240      	negs	r0, r0
 8001a4a:	1a24      	subs	r4, r4, r0
 8001a4c:	0223      	lsls	r3, r4, #8
 8001a4e:	d400      	bmi.n	8001a52 <__aeabi_dsub+0xca>
 8001a50:	e13d      	b.n	8001cce <__aeabi_dsub+0x346>
 8001a52:	0264      	lsls	r4, r4, #9
 8001a54:	0a64      	lsrs	r4, r4, #9
 8001a56:	2c00      	cmp	r4, #0
 8001a58:	d100      	bne.n	8001a5c <__aeabi_dsub+0xd4>
 8001a5a:	e147      	b.n	8001cec <__aeabi_dsub+0x364>
 8001a5c:	0020      	movs	r0, r4
 8001a5e:	f000 fcab 	bl	80023b8 <__clzsi2>
 8001a62:	0003      	movs	r3, r0
 8001a64:	3b08      	subs	r3, #8
 8001a66:	2120      	movs	r1, #32
 8001a68:	0028      	movs	r0, r5
 8001a6a:	1aca      	subs	r2, r1, r3
 8001a6c:	40d0      	lsrs	r0, r2
 8001a6e:	409c      	lsls	r4, r3
 8001a70:	0002      	movs	r2, r0
 8001a72:	409d      	lsls	r5, r3
 8001a74:	4322      	orrs	r2, r4
 8001a76:	429f      	cmp	r7, r3
 8001a78:	dd00      	ble.n	8001a7c <__aeabi_dsub+0xf4>
 8001a7a:	e177      	b.n	8001d6c <__aeabi_dsub+0x3e4>
 8001a7c:	1bd8      	subs	r0, r3, r7
 8001a7e:	3001      	adds	r0, #1
 8001a80:	1a09      	subs	r1, r1, r0
 8001a82:	002c      	movs	r4, r5
 8001a84:	408d      	lsls	r5, r1
 8001a86:	40c4      	lsrs	r4, r0
 8001a88:	1e6b      	subs	r3, r5, #1
 8001a8a:	419d      	sbcs	r5, r3
 8001a8c:	0013      	movs	r3, r2
 8001a8e:	40c2      	lsrs	r2, r0
 8001a90:	408b      	lsls	r3, r1
 8001a92:	4325      	orrs	r5, r4
 8001a94:	2700      	movs	r7, #0
 8001a96:	0014      	movs	r4, r2
 8001a98:	431d      	orrs	r5, r3
 8001a9a:	076b      	lsls	r3, r5, #29
 8001a9c:	d009      	beq.n	8001ab2 <__aeabi_dsub+0x12a>
 8001a9e:	230f      	movs	r3, #15
 8001aa0:	402b      	ands	r3, r5
 8001aa2:	2b04      	cmp	r3, #4
 8001aa4:	d005      	beq.n	8001ab2 <__aeabi_dsub+0x12a>
 8001aa6:	1d2b      	adds	r3, r5, #4
 8001aa8:	42ab      	cmp	r3, r5
 8001aaa:	41ad      	sbcs	r5, r5
 8001aac:	426d      	negs	r5, r5
 8001aae:	1964      	adds	r4, r4, r5
 8001ab0:	001d      	movs	r5, r3
 8001ab2:	0223      	lsls	r3, r4, #8
 8001ab4:	d400      	bmi.n	8001ab8 <__aeabi_dsub+0x130>
 8001ab6:	e140      	b.n	8001d3a <__aeabi_dsub+0x3b2>
 8001ab8:	4a88      	ldr	r2, [pc, #544]	@ (8001cdc <__aeabi_dsub+0x354>)
 8001aba:	3701      	adds	r7, #1
 8001abc:	4297      	cmp	r7, r2
 8001abe:	d100      	bne.n	8001ac2 <__aeabi_dsub+0x13a>
 8001ac0:	e101      	b.n	8001cc6 <__aeabi_dsub+0x33e>
 8001ac2:	2601      	movs	r6, #1
 8001ac4:	4643      	mov	r3, r8
 8001ac6:	4986      	ldr	r1, [pc, #536]	@ (8001ce0 <__aeabi_dsub+0x358>)
 8001ac8:	08ed      	lsrs	r5, r5, #3
 8001aca:	4021      	ands	r1, r4
 8001acc:	074a      	lsls	r2, r1, #29
 8001ace:	432a      	orrs	r2, r5
 8001ad0:	057c      	lsls	r4, r7, #21
 8001ad2:	024d      	lsls	r5, r1, #9
 8001ad4:	0b2d      	lsrs	r5, r5, #12
 8001ad6:	0d64      	lsrs	r4, r4, #21
 8001ad8:	401e      	ands	r6, r3
 8001ada:	0524      	lsls	r4, r4, #20
 8001adc:	432c      	orrs	r4, r5
 8001ade:	07f6      	lsls	r6, r6, #31
 8001ae0:	4334      	orrs	r4, r6
 8001ae2:	0010      	movs	r0, r2
 8001ae4:	0021      	movs	r1, r4
 8001ae6:	b005      	add	sp, #20
 8001ae8:	bcf0      	pop	{r4, r5, r6, r7}
 8001aea:	46bb      	mov	fp, r7
 8001aec:	46b2      	mov	sl, r6
 8001aee:	46a9      	mov	r9, r5
 8001af0:	46a0      	mov	r8, r4
 8001af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001af4:	2d00      	cmp	r5, #0
 8001af6:	dc00      	bgt.n	8001afa <__aeabi_dsub+0x172>
 8001af8:	e2d0      	b.n	800209c <__aeabi_dsub+0x714>
 8001afa:	4649      	mov	r1, r9
 8001afc:	2900      	cmp	r1, #0
 8001afe:	d000      	beq.n	8001b02 <__aeabi_dsub+0x17a>
 8001b00:	e0d4      	b.n	8001cac <__aeabi_dsub+0x324>
 8001b02:	4661      	mov	r1, ip
 8001b04:	9b02      	ldr	r3, [sp, #8]
 8001b06:	4319      	orrs	r1, r3
 8001b08:	d100      	bne.n	8001b0c <__aeabi_dsub+0x184>
 8001b0a:	e12b      	b.n	8001d64 <__aeabi_dsub+0x3dc>
 8001b0c:	1e69      	subs	r1, r5, #1
 8001b0e:	2d01      	cmp	r5, #1
 8001b10:	d100      	bne.n	8001b14 <__aeabi_dsub+0x18c>
 8001b12:	e1d9      	b.n	8001ec8 <__aeabi_dsub+0x540>
 8001b14:	4295      	cmp	r5, r2
 8001b16:	d100      	bne.n	8001b1a <__aeabi_dsub+0x192>
 8001b18:	e10a      	b.n	8001d30 <__aeabi_dsub+0x3a8>
 8001b1a:	2501      	movs	r5, #1
 8001b1c:	2938      	cmp	r1, #56	@ 0x38
 8001b1e:	dc17      	bgt.n	8001b50 <__aeabi_dsub+0x1c8>
 8001b20:	468a      	mov	sl, r1
 8001b22:	4653      	mov	r3, sl
 8001b24:	2b1f      	cmp	r3, #31
 8001b26:	dd00      	ble.n	8001b2a <__aeabi_dsub+0x1a2>
 8001b28:	e1e7      	b.n	8001efa <__aeabi_dsub+0x572>
 8001b2a:	2220      	movs	r2, #32
 8001b2c:	1ad2      	subs	r2, r2, r3
 8001b2e:	9b02      	ldr	r3, [sp, #8]
 8001b30:	4661      	mov	r1, ip
 8001b32:	4093      	lsls	r3, r2
 8001b34:	001d      	movs	r5, r3
 8001b36:	4653      	mov	r3, sl
 8001b38:	40d9      	lsrs	r1, r3
 8001b3a:	4663      	mov	r3, ip
 8001b3c:	4093      	lsls	r3, r2
 8001b3e:	001a      	movs	r2, r3
 8001b40:	430d      	orrs	r5, r1
 8001b42:	1e51      	subs	r1, r2, #1
 8001b44:	418a      	sbcs	r2, r1
 8001b46:	4653      	mov	r3, sl
 8001b48:	4315      	orrs	r5, r2
 8001b4a:	9a02      	ldr	r2, [sp, #8]
 8001b4c:	40da      	lsrs	r2, r3
 8001b4e:	18a4      	adds	r4, r4, r2
 8001b50:	182d      	adds	r5, r5, r0
 8001b52:	4285      	cmp	r5, r0
 8001b54:	4180      	sbcs	r0, r0
 8001b56:	4240      	negs	r0, r0
 8001b58:	1824      	adds	r4, r4, r0
 8001b5a:	0223      	lsls	r3, r4, #8
 8001b5c:	d400      	bmi.n	8001b60 <__aeabi_dsub+0x1d8>
 8001b5e:	e0b6      	b.n	8001cce <__aeabi_dsub+0x346>
 8001b60:	4b5e      	ldr	r3, [pc, #376]	@ (8001cdc <__aeabi_dsub+0x354>)
 8001b62:	3701      	adds	r7, #1
 8001b64:	429f      	cmp	r7, r3
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dsub+0x1e2>
 8001b68:	e0ad      	b.n	8001cc6 <__aeabi_dsub+0x33e>
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	4b5c      	ldr	r3, [pc, #368]	@ (8001ce0 <__aeabi_dsub+0x358>)
 8001b6e:	086a      	lsrs	r2, r5, #1
 8001b70:	401c      	ands	r4, r3
 8001b72:	4029      	ands	r1, r5
 8001b74:	430a      	orrs	r2, r1
 8001b76:	07e5      	lsls	r5, r4, #31
 8001b78:	4315      	orrs	r5, r2
 8001b7a:	0864      	lsrs	r4, r4, #1
 8001b7c:	e78d      	b.n	8001a9a <__aeabi_dsub+0x112>
 8001b7e:	4a59      	ldr	r2, [pc, #356]	@ (8001ce4 <__aeabi_dsub+0x35c>)
 8001b80:	9b02      	ldr	r3, [sp, #8]
 8001b82:	4692      	mov	sl, r2
 8001b84:	4662      	mov	r2, ip
 8001b86:	44ba      	add	sl, r7
 8001b88:	431a      	orrs	r2, r3
 8001b8a:	d02c      	beq.n	8001be6 <__aeabi_dsub+0x25e>
 8001b8c:	428e      	cmp	r6, r1
 8001b8e:	d02e      	beq.n	8001bee <__aeabi_dsub+0x266>
 8001b90:	4652      	mov	r2, sl
 8001b92:	2a00      	cmp	r2, #0
 8001b94:	d060      	beq.n	8001c58 <__aeabi_dsub+0x2d0>
 8001b96:	2f00      	cmp	r7, #0
 8001b98:	d100      	bne.n	8001b9c <__aeabi_dsub+0x214>
 8001b9a:	e0db      	b.n	8001d54 <__aeabi_dsub+0x3cc>
 8001b9c:	4663      	mov	r3, ip
 8001b9e:	000e      	movs	r6, r1
 8001ba0:	9c02      	ldr	r4, [sp, #8]
 8001ba2:	08d8      	lsrs	r0, r3, #3
 8001ba4:	0762      	lsls	r2, r4, #29
 8001ba6:	4302      	orrs	r2, r0
 8001ba8:	08e4      	lsrs	r4, r4, #3
 8001baa:	0013      	movs	r3, r2
 8001bac:	4323      	orrs	r3, r4
 8001bae:	d100      	bne.n	8001bb2 <__aeabi_dsub+0x22a>
 8001bb0:	e254      	b.n	800205c <__aeabi_dsub+0x6d4>
 8001bb2:	2580      	movs	r5, #128	@ 0x80
 8001bb4:	032d      	lsls	r5, r5, #12
 8001bb6:	4325      	orrs	r5, r4
 8001bb8:	032d      	lsls	r5, r5, #12
 8001bba:	4c48      	ldr	r4, [pc, #288]	@ (8001cdc <__aeabi_dsub+0x354>)
 8001bbc:	0b2d      	lsrs	r5, r5, #12
 8001bbe:	e78c      	b.n	8001ada <__aeabi_dsub+0x152>
 8001bc0:	4661      	mov	r1, ip
 8001bc2:	9b02      	ldr	r3, [sp, #8]
 8001bc4:	4319      	orrs	r1, r3
 8001bc6:	d100      	bne.n	8001bca <__aeabi_dsub+0x242>
 8001bc8:	e0cc      	b.n	8001d64 <__aeabi_dsub+0x3dc>
 8001bca:	0029      	movs	r1, r5
 8001bcc:	3901      	subs	r1, #1
 8001bce:	2d01      	cmp	r5, #1
 8001bd0:	d100      	bne.n	8001bd4 <__aeabi_dsub+0x24c>
 8001bd2:	e188      	b.n	8001ee6 <__aeabi_dsub+0x55e>
 8001bd4:	4295      	cmp	r5, r2
 8001bd6:	d100      	bne.n	8001bda <__aeabi_dsub+0x252>
 8001bd8:	e0aa      	b.n	8001d30 <__aeabi_dsub+0x3a8>
 8001bda:	2501      	movs	r5, #1
 8001bdc:	2938      	cmp	r1, #56	@ 0x38
 8001bde:	dd00      	ble.n	8001be2 <__aeabi_dsub+0x25a>
 8001be0:	e72f      	b.n	8001a42 <__aeabi_dsub+0xba>
 8001be2:	468a      	mov	sl, r1
 8001be4:	e718      	b.n	8001a18 <__aeabi_dsub+0x90>
 8001be6:	2201      	movs	r2, #1
 8001be8:	4051      	eors	r1, r2
 8001bea:	428e      	cmp	r6, r1
 8001bec:	d1d0      	bne.n	8001b90 <__aeabi_dsub+0x208>
 8001bee:	4653      	mov	r3, sl
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d100      	bne.n	8001bf6 <__aeabi_dsub+0x26e>
 8001bf4:	e0be      	b.n	8001d74 <__aeabi_dsub+0x3ec>
 8001bf6:	2f00      	cmp	r7, #0
 8001bf8:	d000      	beq.n	8001bfc <__aeabi_dsub+0x274>
 8001bfa:	e138      	b.n	8001e6e <__aeabi_dsub+0x4e6>
 8001bfc:	46ca      	mov	sl, r9
 8001bfe:	0022      	movs	r2, r4
 8001c00:	4302      	orrs	r2, r0
 8001c02:	d100      	bne.n	8001c06 <__aeabi_dsub+0x27e>
 8001c04:	e1e2      	b.n	8001fcc <__aeabi_dsub+0x644>
 8001c06:	4653      	mov	r3, sl
 8001c08:	1e59      	subs	r1, r3, #1
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d100      	bne.n	8001c10 <__aeabi_dsub+0x288>
 8001c0e:	e20d      	b.n	800202c <__aeabi_dsub+0x6a4>
 8001c10:	4a32      	ldr	r2, [pc, #200]	@ (8001cdc <__aeabi_dsub+0x354>)
 8001c12:	4592      	cmp	sl, r2
 8001c14:	d100      	bne.n	8001c18 <__aeabi_dsub+0x290>
 8001c16:	e1d2      	b.n	8001fbe <__aeabi_dsub+0x636>
 8001c18:	2701      	movs	r7, #1
 8001c1a:	2938      	cmp	r1, #56	@ 0x38
 8001c1c:	dc13      	bgt.n	8001c46 <__aeabi_dsub+0x2be>
 8001c1e:	291f      	cmp	r1, #31
 8001c20:	dd00      	ble.n	8001c24 <__aeabi_dsub+0x29c>
 8001c22:	e1ee      	b.n	8002002 <__aeabi_dsub+0x67a>
 8001c24:	2220      	movs	r2, #32
 8001c26:	9b02      	ldr	r3, [sp, #8]
 8001c28:	1a52      	subs	r2, r2, r1
 8001c2a:	0025      	movs	r5, r4
 8001c2c:	0007      	movs	r7, r0
 8001c2e:	469a      	mov	sl, r3
 8001c30:	40cc      	lsrs	r4, r1
 8001c32:	4090      	lsls	r0, r2
 8001c34:	4095      	lsls	r5, r2
 8001c36:	40cf      	lsrs	r7, r1
 8001c38:	44a2      	add	sl, r4
 8001c3a:	1e42      	subs	r2, r0, #1
 8001c3c:	4190      	sbcs	r0, r2
 8001c3e:	4653      	mov	r3, sl
 8001c40:	432f      	orrs	r7, r5
 8001c42:	4307      	orrs	r7, r0
 8001c44:	9302      	str	r3, [sp, #8]
 8001c46:	003d      	movs	r5, r7
 8001c48:	4465      	add	r5, ip
 8001c4a:	4565      	cmp	r5, ip
 8001c4c:	4192      	sbcs	r2, r2
 8001c4e:	9b02      	ldr	r3, [sp, #8]
 8001c50:	4252      	negs	r2, r2
 8001c52:	464f      	mov	r7, r9
 8001c54:	18d4      	adds	r4, r2, r3
 8001c56:	e780      	b.n	8001b5a <__aeabi_dsub+0x1d2>
 8001c58:	4a23      	ldr	r2, [pc, #140]	@ (8001ce8 <__aeabi_dsub+0x360>)
 8001c5a:	1c7d      	adds	r5, r7, #1
 8001c5c:	4215      	tst	r5, r2
 8001c5e:	d000      	beq.n	8001c62 <__aeabi_dsub+0x2da>
 8001c60:	e0aa      	b.n	8001db8 <__aeabi_dsub+0x430>
 8001c62:	4662      	mov	r2, ip
 8001c64:	0025      	movs	r5, r4
 8001c66:	9b02      	ldr	r3, [sp, #8]
 8001c68:	4305      	orrs	r5, r0
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	2f00      	cmp	r7, #0
 8001c6e:	d000      	beq.n	8001c72 <__aeabi_dsub+0x2ea>
 8001c70:	e0f5      	b.n	8001e5e <__aeabi_dsub+0x4d6>
 8001c72:	2d00      	cmp	r5, #0
 8001c74:	d100      	bne.n	8001c78 <__aeabi_dsub+0x2f0>
 8001c76:	e16b      	b.n	8001f50 <__aeabi_dsub+0x5c8>
 8001c78:	2a00      	cmp	r2, #0
 8001c7a:	d100      	bne.n	8001c7e <__aeabi_dsub+0x2f6>
 8001c7c:	e152      	b.n	8001f24 <__aeabi_dsub+0x59c>
 8001c7e:	4663      	mov	r3, ip
 8001c80:	1ac5      	subs	r5, r0, r3
 8001c82:	9b02      	ldr	r3, [sp, #8]
 8001c84:	1ae2      	subs	r2, r4, r3
 8001c86:	42a8      	cmp	r0, r5
 8001c88:	419b      	sbcs	r3, r3
 8001c8a:	425b      	negs	r3, r3
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	021a      	lsls	r2, r3, #8
 8001c90:	d400      	bmi.n	8001c94 <__aeabi_dsub+0x30c>
 8001c92:	e1d5      	b.n	8002040 <__aeabi_dsub+0x6b8>
 8001c94:	4663      	mov	r3, ip
 8001c96:	1a1d      	subs	r5, r3, r0
 8001c98:	45ac      	cmp	ip, r5
 8001c9a:	4192      	sbcs	r2, r2
 8001c9c:	2601      	movs	r6, #1
 8001c9e:	9b02      	ldr	r3, [sp, #8]
 8001ca0:	4252      	negs	r2, r2
 8001ca2:	1b1c      	subs	r4, r3, r4
 8001ca4:	4688      	mov	r8, r1
 8001ca6:	1aa4      	subs	r4, r4, r2
 8001ca8:	400e      	ands	r6, r1
 8001caa:	e6f6      	b.n	8001a9a <__aeabi_dsub+0x112>
 8001cac:	4297      	cmp	r7, r2
 8001cae:	d03f      	beq.n	8001d30 <__aeabi_dsub+0x3a8>
 8001cb0:	4652      	mov	r2, sl
 8001cb2:	2501      	movs	r5, #1
 8001cb4:	2a38      	cmp	r2, #56	@ 0x38
 8001cb6:	dd00      	ble.n	8001cba <__aeabi_dsub+0x332>
 8001cb8:	e74a      	b.n	8001b50 <__aeabi_dsub+0x1c8>
 8001cba:	2280      	movs	r2, #128	@ 0x80
 8001cbc:	9b02      	ldr	r3, [sp, #8]
 8001cbe:	0412      	lsls	r2, r2, #16
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	9302      	str	r3, [sp, #8]
 8001cc4:	e72d      	b.n	8001b22 <__aeabi_dsub+0x19a>
 8001cc6:	003c      	movs	r4, r7
 8001cc8:	2500      	movs	r5, #0
 8001cca:	2200      	movs	r2, #0
 8001ccc:	e705      	b.n	8001ada <__aeabi_dsub+0x152>
 8001cce:	2307      	movs	r3, #7
 8001cd0:	402b      	ands	r3, r5
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d000      	beq.n	8001cd8 <__aeabi_dsub+0x350>
 8001cd6:	e6e2      	b.n	8001a9e <__aeabi_dsub+0x116>
 8001cd8:	e06b      	b.n	8001db2 <__aeabi_dsub+0x42a>
 8001cda:	46c0      	nop			@ (mov r8, r8)
 8001cdc:	000007ff 	.word	0x000007ff
 8001ce0:	ff7fffff 	.word	0xff7fffff
 8001ce4:	fffff801 	.word	0xfffff801
 8001ce8:	000007fe 	.word	0x000007fe
 8001cec:	0028      	movs	r0, r5
 8001cee:	f000 fb63 	bl	80023b8 <__clzsi2>
 8001cf2:	0003      	movs	r3, r0
 8001cf4:	3318      	adds	r3, #24
 8001cf6:	2b1f      	cmp	r3, #31
 8001cf8:	dc00      	bgt.n	8001cfc <__aeabi_dsub+0x374>
 8001cfa:	e6b4      	b.n	8001a66 <__aeabi_dsub+0xde>
 8001cfc:	002a      	movs	r2, r5
 8001cfe:	3808      	subs	r0, #8
 8001d00:	4082      	lsls	r2, r0
 8001d02:	429f      	cmp	r7, r3
 8001d04:	dd00      	ble.n	8001d08 <__aeabi_dsub+0x380>
 8001d06:	e0b9      	b.n	8001e7c <__aeabi_dsub+0x4f4>
 8001d08:	1bdb      	subs	r3, r3, r7
 8001d0a:	1c58      	adds	r0, r3, #1
 8001d0c:	281f      	cmp	r0, #31
 8001d0e:	dc00      	bgt.n	8001d12 <__aeabi_dsub+0x38a>
 8001d10:	e1a0      	b.n	8002054 <__aeabi_dsub+0x6cc>
 8001d12:	0015      	movs	r5, r2
 8001d14:	3b1f      	subs	r3, #31
 8001d16:	40dd      	lsrs	r5, r3
 8001d18:	2820      	cmp	r0, #32
 8001d1a:	d005      	beq.n	8001d28 <__aeabi_dsub+0x3a0>
 8001d1c:	2340      	movs	r3, #64	@ 0x40
 8001d1e:	1a1b      	subs	r3, r3, r0
 8001d20:	409a      	lsls	r2, r3
 8001d22:	1e53      	subs	r3, r2, #1
 8001d24:	419a      	sbcs	r2, r3
 8001d26:	4315      	orrs	r5, r2
 8001d28:	2307      	movs	r3, #7
 8001d2a:	2700      	movs	r7, #0
 8001d2c:	402b      	ands	r3, r5
 8001d2e:	e7d0      	b.n	8001cd2 <__aeabi_dsub+0x34a>
 8001d30:	08c0      	lsrs	r0, r0, #3
 8001d32:	0762      	lsls	r2, r4, #29
 8001d34:	4302      	orrs	r2, r0
 8001d36:	08e4      	lsrs	r4, r4, #3
 8001d38:	e737      	b.n	8001baa <__aeabi_dsub+0x222>
 8001d3a:	08ea      	lsrs	r2, r5, #3
 8001d3c:	0763      	lsls	r3, r4, #29
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	4bd3      	ldr	r3, [pc, #844]	@ (8002090 <__aeabi_dsub+0x708>)
 8001d42:	08e4      	lsrs	r4, r4, #3
 8001d44:	429f      	cmp	r7, r3
 8001d46:	d100      	bne.n	8001d4a <__aeabi_dsub+0x3c2>
 8001d48:	e72f      	b.n	8001baa <__aeabi_dsub+0x222>
 8001d4a:	0324      	lsls	r4, r4, #12
 8001d4c:	0b25      	lsrs	r5, r4, #12
 8001d4e:	057c      	lsls	r4, r7, #21
 8001d50:	0d64      	lsrs	r4, r4, #21
 8001d52:	e6c2      	b.n	8001ada <__aeabi_dsub+0x152>
 8001d54:	46ca      	mov	sl, r9
 8001d56:	0022      	movs	r2, r4
 8001d58:	4302      	orrs	r2, r0
 8001d5a:	d158      	bne.n	8001e0e <__aeabi_dsub+0x486>
 8001d5c:	4663      	mov	r3, ip
 8001d5e:	000e      	movs	r6, r1
 8001d60:	9c02      	ldr	r4, [sp, #8]
 8001d62:	9303      	str	r3, [sp, #12]
 8001d64:	9b03      	ldr	r3, [sp, #12]
 8001d66:	4657      	mov	r7, sl
 8001d68:	08da      	lsrs	r2, r3, #3
 8001d6a:	e7e7      	b.n	8001d3c <__aeabi_dsub+0x3b4>
 8001d6c:	4cc9      	ldr	r4, [pc, #804]	@ (8002094 <__aeabi_dsub+0x70c>)
 8001d6e:	1aff      	subs	r7, r7, r3
 8001d70:	4014      	ands	r4, r2
 8001d72:	e692      	b.n	8001a9a <__aeabi_dsub+0x112>
 8001d74:	4dc8      	ldr	r5, [pc, #800]	@ (8002098 <__aeabi_dsub+0x710>)
 8001d76:	1c7a      	adds	r2, r7, #1
 8001d78:	422a      	tst	r2, r5
 8001d7a:	d000      	beq.n	8001d7e <__aeabi_dsub+0x3f6>
 8001d7c:	e084      	b.n	8001e88 <__aeabi_dsub+0x500>
 8001d7e:	0022      	movs	r2, r4
 8001d80:	4302      	orrs	r2, r0
 8001d82:	2f00      	cmp	r7, #0
 8001d84:	d000      	beq.n	8001d88 <__aeabi_dsub+0x400>
 8001d86:	e0ef      	b.n	8001f68 <__aeabi_dsub+0x5e0>
 8001d88:	2a00      	cmp	r2, #0
 8001d8a:	d100      	bne.n	8001d8e <__aeabi_dsub+0x406>
 8001d8c:	e0e5      	b.n	8001f5a <__aeabi_dsub+0x5d2>
 8001d8e:	4662      	mov	r2, ip
 8001d90:	9902      	ldr	r1, [sp, #8]
 8001d92:	430a      	orrs	r2, r1
 8001d94:	d100      	bne.n	8001d98 <__aeabi_dsub+0x410>
 8001d96:	e0c5      	b.n	8001f24 <__aeabi_dsub+0x59c>
 8001d98:	4663      	mov	r3, ip
 8001d9a:	18c5      	adds	r5, r0, r3
 8001d9c:	468c      	mov	ip, r1
 8001d9e:	4285      	cmp	r5, r0
 8001da0:	4180      	sbcs	r0, r0
 8001da2:	4464      	add	r4, ip
 8001da4:	4240      	negs	r0, r0
 8001da6:	1824      	adds	r4, r4, r0
 8001da8:	0223      	lsls	r3, r4, #8
 8001daa:	d502      	bpl.n	8001db2 <__aeabi_dsub+0x42a>
 8001dac:	4bb9      	ldr	r3, [pc, #740]	@ (8002094 <__aeabi_dsub+0x70c>)
 8001dae:	3701      	adds	r7, #1
 8001db0:	401c      	ands	r4, r3
 8001db2:	46ba      	mov	sl, r7
 8001db4:	9503      	str	r5, [sp, #12]
 8001db6:	e7d5      	b.n	8001d64 <__aeabi_dsub+0x3dc>
 8001db8:	4662      	mov	r2, ip
 8001dba:	1a85      	subs	r5, r0, r2
 8001dbc:	42a8      	cmp	r0, r5
 8001dbe:	4192      	sbcs	r2, r2
 8001dc0:	4252      	negs	r2, r2
 8001dc2:	4691      	mov	r9, r2
 8001dc4:	9b02      	ldr	r3, [sp, #8]
 8001dc6:	1ae3      	subs	r3, r4, r3
 8001dc8:	001a      	movs	r2, r3
 8001dca:	464b      	mov	r3, r9
 8001dcc:	1ad2      	subs	r2, r2, r3
 8001dce:	0013      	movs	r3, r2
 8001dd0:	4691      	mov	r9, r2
 8001dd2:	021a      	lsls	r2, r3, #8
 8001dd4:	d46c      	bmi.n	8001eb0 <__aeabi_dsub+0x528>
 8001dd6:	464a      	mov	r2, r9
 8001dd8:	464c      	mov	r4, r9
 8001dda:	432a      	orrs	r2, r5
 8001ddc:	d000      	beq.n	8001de0 <__aeabi_dsub+0x458>
 8001dde:	e63a      	b.n	8001a56 <__aeabi_dsub+0xce>
 8001de0:	2600      	movs	r6, #0
 8001de2:	2400      	movs	r4, #0
 8001de4:	2500      	movs	r5, #0
 8001de6:	e678      	b.n	8001ada <__aeabi_dsub+0x152>
 8001de8:	9902      	ldr	r1, [sp, #8]
 8001dea:	4653      	mov	r3, sl
 8001dec:	000d      	movs	r5, r1
 8001dee:	3a20      	subs	r2, #32
 8001df0:	40d5      	lsrs	r5, r2
 8001df2:	2b20      	cmp	r3, #32
 8001df4:	d006      	beq.n	8001e04 <__aeabi_dsub+0x47c>
 8001df6:	2240      	movs	r2, #64	@ 0x40
 8001df8:	1ad2      	subs	r2, r2, r3
 8001dfa:	000b      	movs	r3, r1
 8001dfc:	4093      	lsls	r3, r2
 8001dfe:	4662      	mov	r2, ip
 8001e00:	431a      	orrs	r2, r3
 8001e02:	4693      	mov	fp, r2
 8001e04:	465b      	mov	r3, fp
 8001e06:	1e5a      	subs	r2, r3, #1
 8001e08:	4193      	sbcs	r3, r2
 8001e0a:	431d      	orrs	r5, r3
 8001e0c:	e619      	b.n	8001a42 <__aeabi_dsub+0xba>
 8001e0e:	4653      	mov	r3, sl
 8001e10:	1e5a      	subs	r2, r3, #1
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d100      	bne.n	8001e18 <__aeabi_dsub+0x490>
 8001e16:	e0c6      	b.n	8001fa6 <__aeabi_dsub+0x61e>
 8001e18:	4e9d      	ldr	r6, [pc, #628]	@ (8002090 <__aeabi_dsub+0x708>)
 8001e1a:	45b2      	cmp	sl, r6
 8001e1c:	d100      	bne.n	8001e20 <__aeabi_dsub+0x498>
 8001e1e:	e6bd      	b.n	8001b9c <__aeabi_dsub+0x214>
 8001e20:	4688      	mov	r8, r1
 8001e22:	000e      	movs	r6, r1
 8001e24:	2501      	movs	r5, #1
 8001e26:	2a38      	cmp	r2, #56	@ 0x38
 8001e28:	dc10      	bgt.n	8001e4c <__aeabi_dsub+0x4c4>
 8001e2a:	2a1f      	cmp	r2, #31
 8001e2c:	dc7f      	bgt.n	8001f2e <__aeabi_dsub+0x5a6>
 8001e2e:	2120      	movs	r1, #32
 8001e30:	0025      	movs	r5, r4
 8001e32:	1a89      	subs	r1, r1, r2
 8001e34:	0007      	movs	r7, r0
 8001e36:	4088      	lsls	r0, r1
 8001e38:	408d      	lsls	r5, r1
 8001e3a:	40d7      	lsrs	r7, r2
 8001e3c:	40d4      	lsrs	r4, r2
 8001e3e:	1e41      	subs	r1, r0, #1
 8001e40:	4188      	sbcs	r0, r1
 8001e42:	9b02      	ldr	r3, [sp, #8]
 8001e44:	433d      	orrs	r5, r7
 8001e46:	1b1b      	subs	r3, r3, r4
 8001e48:	4305      	orrs	r5, r0
 8001e4a:	9302      	str	r3, [sp, #8]
 8001e4c:	4662      	mov	r2, ip
 8001e4e:	1b55      	subs	r5, r2, r5
 8001e50:	45ac      	cmp	ip, r5
 8001e52:	4192      	sbcs	r2, r2
 8001e54:	9b02      	ldr	r3, [sp, #8]
 8001e56:	4252      	negs	r2, r2
 8001e58:	464f      	mov	r7, r9
 8001e5a:	1a9c      	subs	r4, r3, r2
 8001e5c:	e5f6      	b.n	8001a4c <__aeabi_dsub+0xc4>
 8001e5e:	2d00      	cmp	r5, #0
 8001e60:	d000      	beq.n	8001e64 <__aeabi_dsub+0x4dc>
 8001e62:	e0b7      	b.n	8001fd4 <__aeabi_dsub+0x64c>
 8001e64:	2a00      	cmp	r2, #0
 8001e66:	d100      	bne.n	8001e6a <__aeabi_dsub+0x4e2>
 8001e68:	e0f0      	b.n	800204c <__aeabi_dsub+0x6c4>
 8001e6a:	2601      	movs	r6, #1
 8001e6c:	400e      	ands	r6, r1
 8001e6e:	4663      	mov	r3, ip
 8001e70:	9802      	ldr	r0, [sp, #8]
 8001e72:	08d9      	lsrs	r1, r3, #3
 8001e74:	0742      	lsls	r2, r0, #29
 8001e76:	430a      	orrs	r2, r1
 8001e78:	08c4      	lsrs	r4, r0, #3
 8001e7a:	e696      	b.n	8001baa <__aeabi_dsub+0x222>
 8001e7c:	4c85      	ldr	r4, [pc, #532]	@ (8002094 <__aeabi_dsub+0x70c>)
 8001e7e:	1aff      	subs	r7, r7, r3
 8001e80:	4014      	ands	r4, r2
 8001e82:	0762      	lsls	r2, r4, #29
 8001e84:	08e4      	lsrs	r4, r4, #3
 8001e86:	e760      	b.n	8001d4a <__aeabi_dsub+0x3c2>
 8001e88:	4981      	ldr	r1, [pc, #516]	@ (8002090 <__aeabi_dsub+0x708>)
 8001e8a:	428a      	cmp	r2, r1
 8001e8c:	d100      	bne.n	8001e90 <__aeabi_dsub+0x508>
 8001e8e:	e0c9      	b.n	8002024 <__aeabi_dsub+0x69c>
 8001e90:	4663      	mov	r3, ip
 8001e92:	18c1      	adds	r1, r0, r3
 8001e94:	4281      	cmp	r1, r0
 8001e96:	4180      	sbcs	r0, r0
 8001e98:	9b02      	ldr	r3, [sp, #8]
 8001e9a:	4240      	negs	r0, r0
 8001e9c:	18e3      	adds	r3, r4, r3
 8001e9e:	181b      	adds	r3, r3, r0
 8001ea0:	07dd      	lsls	r5, r3, #31
 8001ea2:	085c      	lsrs	r4, r3, #1
 8001ea4:	2307      	movs	r3, #7
 8001ea6:	0849      	lsrs	r1, r1, #1
 8001ea8:	430d      	orrs	r5, r1
 8001eaa:	0017      	movs	r7, r2
 8001eac:	402b      	ands	r3, r5
 8001eae:	e710      	b.n	8001cd2 <__aeabi_dsub+0x34a>
 8001eb0:	4663      	mov	r3, ip
 8001eb2:	1a1d      	subs	r5, r3, r0
 8001eb4:	45ac      	cmp	ip, r5
 8001eb6:	4192      	sbcs	r2, r2
 8001eb8:	2601      	movs	r6, #1
 8001eba:	9b02      	ldr	r3, [sp, #8]
 8001ebc:	4252      	negs	r2, r2
 8001ebe:	1b1c      	subs	r4, r3, r4
 8001ec0:	4688      	mov	r8, r1
 8001ec2:	1aa4      	subs	r4, r4, r2
 8001ec4:	400e      	ands	r6, r1
 8001ec6:	e5c6      	b.n	8001a56 <__aeabi_dsub+0xce>
 8001ec8:	4663      	mov	r3, ip
 8001eca:	18c5      	adds	r5, r0, r3
 8001ecc:	9b02      	ldr	r3, [sp, #8]
 8001ece:	4285      	cmp	r5, r0
 8001ed0:	4180      	sbcs	r0, r0
 8001ed2:	469c      	mov	ip, r3
 8001ed4:	4240      	negs	r0, r0
 8001ed6:	4464      	add	r4, ip
 8001ed8:	1824      	adds	r4, r4, r0
 8001eda:	2701      	movs	r7, #1
 8001edc:	0223      	lsls	r3, r4, #8
 8001ede:	d400      	bmi.n	8001ee2 <__aeabi_dsub+0x55a>
 8001ee0:	e6f5      	b.n	8001cce <__aeabi_dsub+0x346>
 8001ee2:	2702      	movs	r7, #2
 8001ee4:	e641      	b.n	8001b6a <__aeabi_dsub+0x1e2>
 8001ee6:	4663      	mov	r3, ip
 8001ee8:	1ac5      	subs	r5, r0, r3
 8001eea:	42a8      	cmp	r0, r5
 8001eec:	4180      	sbcs	r0, r0
 8001eee:	9b02      	ldr	r3, [sp, #8]
 8001ef0:	4240      	negs	r0, r0
 8001ef2:	1ae4      	subs	r4, r4, r3
 8001ef4:	2701      	movs	r7, #1
 8001ef6:	1a24      	subs	r4, r4, r0
 8001ef8:	e5a8      	b.n	8001a4c <__aeabi_dsub+0xc4>
 8001efa:	9d02      	ldr	r5, [sp, #8]
 8001efc:	4652      	mov	r2, sl
 8001efe:	002b      	movs	r3, r5
 8001f00:	3a20      	subs	r2, #32
 8001f02:	40d3      	lsrs	r3, r2
 8001f04:	0019      	movs	r1, r3
 8001f06:	4653      	mov	r3, sl
 8001f08:	2b20      	cmp	r3, #32
 8001f0a:	d006      	beq.n	8001f1a <__aeabi_dsub+0x592>
 8001f0c:	2240      	movs	r2, #64	@ 0x40
 8001f0e:	1ad2      	subs	r2, r2, r3
 8001f10:	002b      	movs	r3, r5
 8001f12:	4093      	lsls	r3, r2
 8001f14:	4662      	mov	r2, ip
 8001f16:	431a      	orrs	r2, r3
 8001f18:	4693      	mov	fp, r2
 8001f1a:	465d      	mov	r5, fp
 8001f1c:	1e6b      	subs	r3, r5, #1
 8001f1e:	419d      	sbcs	r5, r3
 8001f20:	430d      	orrs	r5, r1
 8001f22:	e615      	b.n	8001b50 <__aeabi_dsub+0x1c8>
 8001f24:	0762      	lsls	r2, r4, #29
 8001f26:	08c0      	lsrs	r0, r0, #3
 8001f28:	4302      	orrs	r2, r0
 8001f2a:	08e4      	lsrs	r4, r4, #3
 8001f2c:	e70d      	b.n	8001d4a <__aeabi_dsub+0x3c2>
 8001f2e:	0011      	movs	r1, r2
 8001f30:	0027      	movs	r7, r4
 8001f32:	3920      	subs	r1, #32
 8001f34:	40cf      	lsrs	r7, r1
 8001f36:	2a20      	cmp	r2, #32
 8001f38:	d005      	beq.n	8001f46 <__aeabi_dsub+0x5be>
 8001f3a:	2140      	movs	r1, #64	@ 0x40
 8001f3c:	1a8a      	subs	r2, r1, r2
 8001f3e:	4094      	lsls	r4, r2
 8001f40:	0025      	movs	r5, r4
 8001f42:	4305      	orrs	r5, r0
 8001f44:	9503      	str	r5, [sp, #12]
 8001f46:	9d03      	ldr	r5, [sp, #12]
 8001f48:	1e6a      	subs	r2, r5, #1
 8001f4a:	4195      	sbcs	r5, r2
 8001f4c:	433d      	orrs	r5, r7
 8001f4e:	e77d      	b.n	8001e4c <__aeabi_dsub+0x4c4>
 8001f50:	2a00      	cmp	r2, #0
 8001f52:	d100      	bne.n	8001f56 <__aeabi_dsub+0x5ce>
 8001f54:	e744      	b.n	8001de0 <__aeabi_dsub+0x458>
 8001f56:	2601      	movs	r6, #1
 8001f58:	400e      	ands	r6, r1
 8001f5a:	4663      	mov	r3, ip
 8001f5c:	08d9      	lsrs	r1, r3, #3
 8001f5e:	9b02      	ldr	r3, [sp, #8]
 8001f60:	075a      	lsls	r2, r3, #29
 8001f62:	430a      	orrs	r2, r1
 8001f64:	08dc      	lsrs	r4, r3, #3
 8001f66:	e6f0      	b.n	8001d4a <__aeabi_dsub+0x3c2>
 8001f68:	2a00      	cmp	r2, #0
 8001f6a:	d028      	beq.n	8001fbe <__aeabi_dsub+0x636>
 8001f6c:	4662      	mov	r2, ip
 8001f6e:	9f02      	ldr	r7, [sp, #8]
 8001f70:	08c0      	lsrs	r0, r0, #3
 8001f72:	433a      	orrs	r2, r7
 8001f74:	d100      	bne.n	8001f78 <__aeabi_dsub+0x5f0>
 8001f76:	e6dc      	b.n	8001d32 <__aeabi_dsub+0x3aa>
 8001f78:	0762      	lsls	r2, r4, #29
 8001f7a:	4310      	orrs	r0, r2
 8001f7c:	2280      	movs	r2, #128	@ 0x80
 8001f7e:	08e4      	lsrs	r4, r4, #3
 8001f80:	0312      	lsls	r2, r2, #12
 8001f82:	4214      	tst	r4, r2
 8001f84:	d009      	beq.n	8001f9a <__aeabi_dsub+0x612>
 8001f86:	08fd      	lsrs	r5, r7, #3
 8001f88:	4215      	tst	r5, r2
 8001f8a:	d106      	bne.n	8001f9a <__aeabi_dsub+0x612>
 8001f8c:	4663      	mov	r3, ip
 8001f8e:	2601      	movs	r6, #1
 8001f90:	002c      	movs	r4, r5
 8001f92:	08d8      	lsrs	r0, r3, #3
 8001f94:	077b      	lsls	r3, r7, #29
 8001f96:	4318      	orrs	r0, r3
 8001f98:	400e      	ands	r6, r1
 8001f9a:	0f42      	lsrs	r2, r0, #29
 8001f9c:	00c0      	lsls	r0, r0, #3
 8001f9e:	08c0      	lsrs	r0, r0, #3
 8001fa0:	0752      	lsls	r2, r2, #29
 8001fa2:	4302      	orrs	r2, r0
 8001fa4:	e601      	b.n	8001baa <__aeabi_dsub+0x222>
 8001fa6:	4663      	mov	r3, ip
 8001fa8:	1a1d      	subs	r5, r3, r0
 8001faa:	45ac      	cmp	ip, r5
 8001fac:	4192      	sbcs	r2, r2
 8001fae:	9b02      	ldr	r3, [sp, #8]
 8001fb0:	4252      	negs	r2, r2
 8001fb2:	1b1c      	subs	r4, r3, r4
 8001fb4:	000e      	movs	r6, r1
 8001fb6:	4688      	mov	r8, r1
 8001fb8:	2701      	movs	r7, #1
 8001fba:	1aa4      	subs	r4, r4, r2
 8001fbc:	e546      	b.n	8001a4c <__aeabi_dsub+0xc4>
 8001fbe:	4663      	mov	r3, ip
 8001fc0:	08d9      	lsrs	r1, r3, #3
 8001fc2:	9b02      	ldr	r3, [sp, #8]
 8001fc4:	075a      	lsls	r2, r3, #29
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	08dc      	lsrs	r4, r3, #3
 8001fca:	e5ee      	b.n	8001baa <__aeabi_dsub+0x222>
 8001fcc:	4663      	mov	r3, ip
 8001fce:	9c02      	ldr	r4, [sp, #8]
 8001fd0:	9303      	str	r3, [sp, #12]
 8001fd2:	e6c7      	b.n	8001d64 <__aeabi_dsub+0x3dc>
 8001fd4:	08c0      	lsrs	r0, r0, #3
 8001fd6:	2a00      	cmp	r2, #0
 8001fd8:	d100      	bne.n	8001fdc <__aeabi_dsub+0x654>
 8001fda:	e6aa      	b.n	8001d32 <__aeabi_dsub+0x3aa>
 8001fdc:	0762      	lsls	r2, r4, #29
 8001fde:	4310      	orrs	r0, r2
 8001fe0:	2280      	movs	r2, #128	@ 0x80
 8001fe2:	08e4      	lsrs	r4, r4, #3
 8001fe4:	0312      	lsls	r2, r2, #12
 8001fe6:	4214      	tst	r4, r2
 8001fe8:	d0d7      	beq.n	8001f9a <__aeabi_dsub+0x612>
 8001fea:	9f02      	ldr	r7, [sp, #8]
 8001fec:	08fd      	lsrs	r5, r7, #3
 8001fee:	4215      	tst	r5, r2
 8001ff0:	d1d3      	bne.n	8001f9a <__aeabi_dsub+0x612>
 8001ff2:	4663      	mov	r3, ip
 8001ff4:	2601      	movs	r6, #1
 8001ff6:	08d8      	lsrs	r0, r3, #3
 8001ff8:	077b      	lsls	r3, r7, #29
 8001ffa:	002c      	movs	r4, r5
 8001ffc:	4318      	orrs	r0, r3
 8001ffe:	400e      	ands	r6, r1
 8002000:	e7cb      	b.n	8001f9a <__aeabi_dsub+0x612>
 8002002:	000a      	movs	r2, r1
 8002004:	0027      	movs	r7, r4
 8002006:	3a20      	subs	r2, #32
 8002008:	40d7      	lsrs	r7, r2
 800200a:	2920      	cmp	r1, #32
 800200c:	d005      	beq.n	800201a <__aeabi_dsub+0x692>
 800200e:	2240      	movs	r2, #64	@ 0x40
 8002010:	1a52      	subs	r2, r2, r1
 8002012:	4094      	lsls	r4, r2
 8002014:	0025      	movs	r5, r4
 8002016:	4305      	orrs	r5, r0
 8002018:	9503      	str	r5, [sp, #12]
 800201a:	9d03      	ldr	r5, [sp, #12]
 800201c:	1e6a      	subs	r2, r5, #1
 800201e:	4195      	sbcs	r5, r2
 8002020:	432f      	orrs	r7, r5
 8002022:	e610      	b.n	8001c46 <__aeabi_dsub+0x2be>
 8002024:	0014      	movs	r4, r2
 8002026:	2500      	movs	r5, #0
 8002028:	2200      	movs	r2, #0
 800202a:	e556      	b.n	8001ada <__aeabi_dsub+0x152>
 800202c:	9b02      	ldr	r3, [sp, #8]
 800202e:	4460      	add	r0, ip
 8002030:	4699      	mov	r9, r3
 8002032:	4560      	cmp	r0, ip
 8002034:	4192      	sbcs	r2, r2
 8002036:	444c      	add	r4, r9
 8002038:	4252      	negs	r2, r2
 800203a:	0005      	movs	r5, r0
 800203c:	18a4      	adds	r4, r4, r2
 800203e:	e74c      	b.n	8001eda <__aeabi_dsub+0x552>
 8002040:	001a      	movs	r2, r3
 8002042:	001c      	movs	r4, r3
 8002044:	432a      	orrs	r2, r5
 8002046:	d000      	beq.n	800204a <__aeabi_dsub+0x6c2>
 8002048:	e6b3      	b.n	8001db2 <__aeabi_dsub+0x42a>
 800204a:	e6c9      	b.n	8001de0 <__aeabi_dsub+0x458>
 800204c:	2480      	movs	r4, #128	@ 0x80
 800204e:	2600      	movs	r6, #0
 8002050:	0324      	lsls	r4, r4, #12
 8002052:	e5ae      	b.n	8001bb2 <__aeabi_dsub+0x22a>
 8002054:	2120      	movs	r1, #32
 8002056:	2500      	movs	r5, #0
 8002058:	1a09      	subs	r1, r1, r0
 800205a:	e517      	b.n	8001a8c <__aeabi_dsub+0x104>
 800205c:	2200      	movs	r2, #0
 800205e:	2500      	movs	r5, #0
 8002060:	4c0b      	ldr	r4, [pc, #44]	@ (8002090 <__aeabi_dsub+0x708>)
 8002062:	e53a      	b.n	8001ada <__aeabi_dsub+0x152>
 8002064:	2d00      	cmp	r5, #0
 8002066:	d100      	bne.n	800206a <__aeabi_dsub+0x6e2>
 8002068:	e5f6      	b.n	8001c58 <__aeabi_dsub+0x2d0>
 800206a:	464b      	mov	r3, r9
 800206c:	1bda      	subs	r2, r3, r7
 800206e:	4692      	mov	sl, r2
 8002070:	2f00      	cmp	r7, #0
 8002072:	d100      	bne.n	8002076 <__aeabi_dsub+0x6ee>
 8002074:	e66f      	b.n	8001d56 <__aeabi_dsub+0x3ce>
 8002076:	2a38      	cmp	r2, #56	@ 0x38
 8002078:	dc05      	bgt.n	8002086 <__aeabi_dsub+0x6fe>
 800207a:	2680      	movs	r6, #128	@ 0x80
 800207c:	0436      	lsls	r6, r6, #16
 800207e:	4334      	orrs	r4, r6
 8002080:	4688      	mov	r8, r1
 8002082:	000e      	movs	r6, r1
 8002084:	e6d1      	b.n	8001e2a <__aeabi_dsub+0x4a2>
 8002086:	4688      	mov	r8, r1
 8002088:	000e      	movs	r6, r1
 800208a:	2501      	movs	r5, #1
 800208c:	e6de      	b.n	8001e4c <__aeabi_dsub+0x4c4>
 800208e:	46c0      	nop			@ (mov r8, r8)
 8002090:	000007ff 	.word	0x000007ff
 8002094:	ff7fffff 	.word	0xff7fffff
 8002098:	000007fe 	.word	0x000007fe
 800209c:	2d00      	cmp	r5, #0
 800209e:	d100      	bne.n	80020a2 <__aeabi_dsub+0x71a>
 80020a0:	e668      	b.n	8001d74 <__aeabi_dsub+0x3ec>
 80020a2:	464b      	mov	r3, r9
 80020a4:	1bd9      	subs	r1, r3, r7
 80020a6:	2f00      	cmp	r7, #0
 80020a8:	d101      	bne.n	80020ae <__aeabi_dsub+0x726>
 80020aa:	468a      	mov	sl, r1
 80020ac:	e5a7      	b.n	8001bfe <__aeabi_dsub+0x276>
 80020ae:	2701      	movs	r7, #1
 80020b0:	2938      	cmp	r1, #56	@ 0x38
 80020b2:	dd00      	ble.n	80020b6 <__aeabi_dsub+0x72e>
 80020b4:	e5c7      	b.n	8001c46 <__aeabi_dsub+0x2be>
 80020b6:	2280      	movs	r2, #128	@ 0x80
 80020b8:	0412      	lsls	r2, r2, #16
 80020ba:	4314      	orrs	r4, r2
 80020bc:	e5af      	b.n	8001c1e <__aeabi_dsub+0x296>
 80020be:	46c0      	nop			@ (mov r8, r8)

080020c0 <__aeabi_dcmpun>:
 80020c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020c2:	46c6      	mov	lr, r8
 80020c4:	031e      	lsls	r6, r3, #12
 80020c6:	0b36      	lsrs	r6, r6, #12
 80020c8:	46b0      	mov	r8, r6
 80020ca:	4e0d      	ldr	r6, [pc, #52]	@ (8002100 <__aeabi_dcmpun+0x40>)
 80020cc:	030c      	lsls	r4, r1, #12
 80020ce:	004d      	lsls	r5, r1, #1
 80020d0:	005f      	lsls	r7, r3, #1
 80020d2:	b500      	push	{lr}
 80020d4:	0b24      	lsrs	r4, r4, #12
 80020d6:	0d6d      	lsrs	r5, r5, #21
 80020d8:	0d7f      	lsrs	r7, r7, #21
 80020da:	42b5      	cmp	r5, r6
 80020dc:	d00b      	beq.n	80020f6 <__aeabi_dcmpun+0x36>
 80020de:	4908      	ldr	r1, [pc, #32]	@ (8002100 <__aeabi_dcmpun+0x40>)
 80020e0:	2000      	movs	r0, #0
 80020e2:	428f      	cmp	r7, r1
 80020e4:	d104      	bne.n	80020f0 <__aeabi_dcmpun+0x30>
 80020e6:	4646      	mov	r6, r8
 80020e8:	4316      	orrs	r6, r2
 80020ea:	0030      	movs	r0, r6
 80020ec:	1e43      	subs	r3, r0, #1
 80020ee:	4198      	sbcs	r0, r3
 80020f0:	bc80      	pop	{r7}
 80020f2:	46b8      	mov	r8, r7
 80020f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020f6:	4304      	orrs	r4, r0
 80020f8:	2001      	movs	r0, #1
 80020fa:	2c00      	cmp	r4, #0
 80020fc:	d1f8      	bne.n	80020f0 <__aeabi_dcmpun+0x30>
 80020fe:	e7ee      	b.n	80020de <__aeabi_dcmpun+0x1e>
 8002100:	000007ff 	.word	0x000007ff

08002104 <__aeabi_d2iz>:
 8002104:	000b      	movs	r3, r1
 8002106:	0002      	movs	r2, r0
 8002108:	b570      	push	{r4, r5, r6, lr}
 800210a:	4d16      	ldr	r5, [pc, #88]	@ (8002164 <__aeabi_d2iz+0x60>)
 800210c:	030c      	lsls	r4, r1, #12
 800210e:	b082      	sub	sp, #8
 8002110:	0049      	lsls	r1, r1, #1
 8002112:	2000      	movs	r0, #0
 8002114:	9200      	str	r2, [sp, #0]
 8002116:	9301      	str	r3, [sp, #4]
 8002118:	0b24      	lsrs	r4, r4, #12
 800211a:	0d49      	lsrs	r1, r1, #21
 800211c:	0fde      	lsrs	r6, r3, #31
 800211e:	42a9      	cmp	r1, r5
 8002120:	dd04      	ble.n	800212c <__aeabi_d2iz+0x28>
 8002122:	4811      	ldr	r0, [pc, #68]	@ (8002168 <__aeabi_d2iz+0x64>)
 8002124:	4281      	cmp	r1, r0
 8002126:	dd03      	ble.n	8002130 <__aeabi_d2iz+0x2c>
 8002128:	4b10      	ldr	r3, [pc, #64]	@ (800216c <__aeabi_d2iz+0x68>)
 800212a:	18f0      	adds	r0, r6, r3
 800212c:	b002      	add	sp, #8
 800212e:	bd70      	pop	{r4, r5, r6, pc}
 8002130:	2080      	movs	r0, #128	@ 0x80
 8002132:	0340      	lsls	r0, r0, #13
 8002134:	4320      	orrs	r0, r4
 8002136:	4c0e      	ldr	r4, [pc, #56]	@ (8002170 <__aeabi_d2iz+0x6c>)
 8002138:	1a64      	subs	r4, r4, r1
 800213a:	2c1f      	cmp	r4, #31
 800213c:	dd08      	ble.n	8002150 <__aeabi_d2iz+0x4c>
 800213e:	4b0d      	ldr	r3, [pc, #52]	@ (8002174 <__aeabi_d2iz+0x70>)
 8002140:	1a5b      	subs	r3, r3, r1
 8002142:	40d8      	lsrs	r0, r3
 8002144:	0003      	movs	r3, r0
 8002146:	4258      	negs	r0, r3
 8002148:	2e00      	cmp	r6, #0
 800214a:	d1ef      	bne.n	800212c <__aeabi_d2iz+0x28>
 800214c:	0018      	movs	r0, r3
 800214e:	e7ed      	b.n	800212c <__aeabi_d2iz+0x28>
 8002150:	4b09      	ldr	r3, [pc, #36]	@ (8002178 <__aeabi_d2iz+0x74>)
 8002152:	9a00      	ldr	r2, [sp, #0]
 8002154:	469c      	mov	ip, r3
 8002156:	0003      	movs	r3, r0
 8002158:	4461      	add	r1, ip
 800215a:	408b      	lsls	r3, r1
 800215c:	40e2      	lsrs	r2, r4
 800215e:	4313      	orrs	r3, r2
 8002160:	e7f1      	b.n	8002146 <__aeabi_d2iz+0x42>
 8002162:	46c0      	nop			@ (mov r8, r8)
 8002164:	000003fe 	.word	0x000003fe
 8002168:	0000041d 	.word	0x0000041d
 800216c:	7fffffff 	.word	0x7fffffff
 8002170:	00000433 	.word	0x00000433
 8002174:	00000413 	.word	0x00000413
 8002178:	fffffbed 	.word	0xfffffbed

0800217c <__aeabi_i2d>:
 800217c:	b570      	push	{r4, r5, r6, lr}
 800217e:	2800      	cmp	r0, #0
 8002180:	d016      	beq.n	80021b0 <__aeabi_i2d+0x34>
 8002182:	17c3      	asrs	r3, r0, #31
 8002184:	18c5      	adds	r5, r0, r3
 8002186:	405d      	eors	r5, r3
 8002188:	0fc4      	lsrs	r4, r0, #31
 800218a:	0028      	movs	r0, r5
 800218c:	f000 f914 	bl	80023b8 <__clzsi2>
 8002190:	4b10      	ldr	r3, [pc, #64]	@ (80021d4 <__aeabi_i2d+0x58>)
 8002192:	1a1b      	subs	r3, r3, r0
 8002194:	055b      	lsls	r3, r3, #21
 8002196:	0d5b      	lsrs	r3, r3, #21
 8002198:	280a      	cmp	r0, #10
 800219a:	dc14      	bgt.n	80021c6 <__aeabi_i2d+0x4a>
 800219c:	0002      	movs	r2, r0
 800219e:	002e      	movs	r6, r5
 80021a0:	3215      	adds	r2, #21
 80021a2:	4096      	lsls	r6, r2
 80021a4:	220b      	movs	r2, #11
 80021a6:	1a12      	subs	r2, r2, r0
 80021a8:	40d5      	lsrs	r5, r2
 80021aa:	032d      	lsls	r5, r5, #12
 80021ac:	0b2d      	lsrs	r5, r5, #12
 80021ae:	e003      	b.n	80021b8 <__aeabi_i2d+0x3c>
 80021b0:	2400      	movs	r4, #0
 80021b2:	2300      	movs	r3, #0
 80021b4:	2500      	movs	r5, #0
 80021b6:	2600      	movs	r6, #0
 80021b8:	051b      	lsls	r3, r3, #20
 80021ba:	432b      	orrs	r3, r5
 80021bc:	07e4      	lsls	r4, r4, #31
 80021be:	4323      	orrs	r3, r4
 80021c0:	0030      	movs	r0, r6
 80021c2:	0019      	movs	r1, r3
 80021c4:	bd70      	pop	{r4, r5, r6, pc}
 80021c6:	380b      	subs	r0, #11
 80021c8:	4085      	lsls	r5, r0
 80021ca:	032d      	lsls	r5, r5, #12
 80021cc:	2600      	movs	r6, #0
 80021ce:	0b2d      	lsrs	r5, r5, #12
 80021d0:	e7f2      	b.n	80021b8 <__aeabi_i2d+0x3c>
 80021d2:	46c0      	nop			@ (mov r8, r8)
 80021d4:	0000041e 	.word	0x0000041e

080021d8 <__aeabi_ui2d>:
 80021d8:	b510      	push	{r4, lr}
 80021da:	1e04      	subs	r4, r0, #0
 80021dc:	d010      	beq.n	8002200 <__aeabi_ui2d+0x28>
 80021de:	f000 f8eb 	bl	80023b8 <__clzsi2>
 80021e2:	4b0e      	ldr	r3, [pc, #56]	@ (800221c <__aeabi_ui2d+0x44>)
 80021e4:	1a1b      	subs	r3, r3, r0
 80021e6:	055b      	lsls	r3, r3, #21
 80021e8:	0d5b      	lsrs	r3, r3, #21
 80021ea:	280a      	cmp	r0, #10
 80021ec:	dc0f      	bgt.n	800220e <__aeabi_ui2d+0x36>
 80021ee:	220b      	movs	r2, #11
 80021f0:	0021      	movs	r1, r4
 80021f2:	1a12      	subs	r2, r2, r0
 80021f4:	40d1      	lsrs	r1, r2
 80021f6:	3015      	adds	r0, #21
 80021f8:	030a      	lsls	r2, r1, #12
 80021fa:	4084      	lsls	r4, r0
 80021fc:	0b12      	lsrs	r2, r2, #12
 80021fe:	e001      	b.n	8002204 <__aeabi_ui2d+0x2c>
 8002200:	2300      	movs	r3, #0
 8002202:	2200      	movs	r2, #0
 8002204:	051b      	lsls	r3, r3, #20
 8002206:	4313      	orrs	r3, r2
 8002208:	0020      	movs	r0, r4
 800220a:	0019      	movs	r1, r3
 800220c:	bd10      	pop	{r4, pc}
 800220e:	0022      	movs	r2, r4
 8002210:	380b      	subs	r0, #11
 8002212:	4082      	lsls	r2, r0
 8002214:	0312      	lsls	r2, r2, #12
 8002216:	2400      	movs	r4, #0
 8002218:	0b12      	lsrs	r2, r2, #12
 800221a:	e7f3      	b.n	8002204 <__aeabi_ui2d+0x2c>
 800221c:	0000041e 	.word	0x0000041e

08002220 <__aeabi_f2d>:
 8002220:	b570      	push	{r4, r5, r6, lr}
 8002222:	0242      	lsls	r2, r0, #9
 8002224:	0043      	lsls	r3, r0, #1
 8002226:	0fc4      	lsrs	r4, r0, #31
 8002228:	20fe      	movs	r0, #254	@ 0xfe
 800222a:	0e1b      	lsrs	r3, r3, #24
 800222c:	1c59      	adds	r1, r3, #1
 800222e:	0a55      	lsrs	r5, r2, #9
 8002230:	4208      	tst	r0, r1
 8002232:	d00c      	beq.n	800224e <__aeabi_f2d+0x2e>
 8002234:	21e0      	movs	r1, #224	@ 0xe0
 8002236:	0089      	lsls	r1, r1, #2
 8002238:	468c      	mov	ip, r1
 800223a:	076d      	lsls	r5, r5, #29
 800223c:	0b12      	lsrs	r2, r2, #12
 800223e:	4463      	add	r3, ip
 8002240:	051b      	lsls	r3, r3, #20
 8002242:	4313      	orrs	r3, r2
 8002244:	07e4      	lsls	r4, r4, #31
 8002246:	4323      	orrs	r3, r4
 8002248:	0028      	movs	r0, r5
 800224a:	0019      	movs	r1, r3
 800224c:	bd70      	pop	{r4, r5, r6, pc}
 800224e:	2b00      	cmp	r3, #0
 8002250:	d114      	bne.n	800227c <__aeabi_f2d+0x5c>
 8002252:	2d00      	cmp	r5, #0
 8002254:	d01b      	beq.n	800228e <__aeabi_f2d+0x6e>
 8002256:	0028      	movs	r0, r5
 8002258:	f000 f8ae 	bl	80023b8 <__clzsi2>
 800225c:	280a      	cmp	r0, #10
 800225e:	dc1c      	bgt.n	800229a <__aeabi_f2d+0x7a>
 8002260:	230b      	movs	r3, #11
 8002262:	002a      	movs	r2, r5
 8002264:	1a1b      	subs	r3, r3, r0
 8002266:	40da      	lsrs	r2, r3
 8002268:	0003      	movs	r3, r0
 800226a:	3315      	adds	r3, #21
 800226c:	409d      	lsls	r5, r3
 800226e:	4b0e      	ldr	r3, [pc, #56]	@ (80022a8 <__aeabi_f2d+0x88>)
 8002270:	0312      	lsls	r2, r2, #12
 8002272:	1a1b      	subs	r3, r3, r0
 8002274:	055b      	lsls	r3, r3, #21
 8002276:	0b12      	lsrs	r2, r2, #12
 8002278:	0d5b      	lsrs	r3, r3, #21
 800227a:	e7e1      	b.n	8002240 <__aeabi_f2d+0x20>
 800227c:	2d00      	cmp	r5, #0
 800227e:	d009      	beq.n	8002294 <__aeabi_f2d+0x74>
 8002280:	0b13      	lsrs	r3, r2, #12
 8002282:	2280      	movs	r2, #128	@ 0x80
 8002284:	0312      	lsls	r2, r2, #12
 8002286:	431a      	orrs	r2, r3
 8002288:	076d      	lsls	r5, r5, #29
 800228a:	4b08      	ldr	r3, [pc, #32]	@ (80022ac <__aeabi_f2d+0x8c>)
 800228c:	e7d8      	b.n	8002240 <__aeabi_f2d+0x20>
 800228e:	2300      	movs	r3, #0
 8002290:	2200      	movs	r2, #0
 8002292:	e7d5      	b.n	8002240 <__aeabi_f2d+0x20>
 8002294:	2200      	movs	r2, #0
 8002296:	4b05      	ldr	r3, [pc, #20]	@ (80022ac <__aeabi_f2d+0x8c>)
 8002298:	e7d2      	b.n	8002240 <__aeabi_f2d+0x20>
 800229a:	0003      	movs	r3, r0
 800229c:	002a      	movs	r2, r5
 800229e:	3b0b      	subs	r3, #11
 80022a0:	409a      	lsls	r2, r3
 80022a2:	2500      	movs	r5, #0
 80022a4:	e7e3      	b.n	800226e <__aeabi_f2d+0x4e>
 80022a6:	46c0      	nop			@ (mov r8, r8)
 80022a8:	00000389 	.word	0x00000389
 80022ac:	000007ff 	.word	0x000007ff

080022b0 <__aeabi_d2f>:
 80022b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022b2:	004b      	lsls	r3, r1, #1
 80022b4:	030f      	lsls	r7, r1, #12
 80022b6:	0d5b      	lsrs	r3, r3, #21
 80022b8:	4c3b      	ldr	r4, [pc, #236]	@ (80023a8 <__aeabi_d2f+0xf8>)
 80022ba:	0f45      	lsrs	r5, r0, #29
 80022bc:	b083      	sub	sp, #12
 80022be:	0a7f      	lsrs	r7, r7, #9
 80022c0:	1c5e      	adds	r6, r3, #1
 80022c2:	432f      	orrs	r7, r5
 80022c4:	9000      	str	r0, [sp, #0]
 80022c6:	9101      	str	r1, [sp, #4]
 80022c8:	0fca      	lsrs	r2, r1, #31
 80022ca:	00c5      	lsls	r5, r0, #3
 80022cc:	4226      	tst	r6, r4
 80022ce:	d00b      	beq.n	80022e8 <__aeabi_d2f+0x38>
 80022d0:	4936      	ldr	r1, [pc, #216]	@ (80023ac <__aeabi_d2f+0xfc>)
 80022d2:	185c      	adds	r4, r3, r1
 80022d4:	2cfe      	cmp	r4, #254	@ 0xfe
 80022d6:	dd13      	ble.n	8002300 <__aeabi_d2f+0x50>
 80022d8:	20ff      	movs	r0, #255	@ 0xff
 80022da:	2300      	movs	r3, #0
 80022dc:	05c0      	lsls	r0, r0, #23
 80022de:	4318      	orrs	r0, r3
 80022e0:	07d2      	lsls	r2, r2, #31
 80022e2:	4310      	orrs	r0, r2
 80022e4:	b003      	add	sp, #12
 80022e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d102      	bne.n	80022f2 <__aeabi_d2f+0x42>
 80022ec:	2000      	movs	r0, #0
 80022ee:	2300      	movs	r3, #0
 80022f0:	e7f4      	b.n	80022dc <__aeabi_d2f+0x2c>
 80022f2:	433d      	orrs	r5, r7
 80022f4:	d0f0      	beq.n	80022d8 <__aeabi_d2f+0x28>
 80022f6:	2380      	movs	r3, #128	@ 0x80
 80022f8:	03db      	lsls	r3, r3, #15
 80022fa:	20ff      	movs	r0, #255	@ 0xff
 80022fc:	433b      	orrs	r3, r7
 80022fe:	e7ed      	b.n	80022dc <__aeabi_d2f+0x2c>
 8002300:	2c00      	cmp	r4, #0
 8002302:	dd14      	ble.n	800232e <__aeabi_d2f+0x7e>
 8002304:	9b00      	ldr	r3, [sp, #0]
 8002306:	00ff      	lsls	r7, r7, #3
 8002308:	019b      	lsls	r3, r3, #6
 800230a:	1e58      	subs	r0, r3, #1
 800230c:	4183      	sbcs	r3, r0
 800230e:	0f69      	lsrs	r1, r5, #29
 8002310:	433b      	orrs	r3, r7
 8002312:	430b      	orrs	r3, r1
 8002314:	0759      	lsls	r1, r3, #29
 8002316:	d041      	beq.n	800239c <__aeabi_d2f+0xec>
 8002318:	210f      	movs	r1, #15
 800231a:	4019      	ands	r1, r3
 800231c:	2904      	cmp	r1, #4
 800231e:	d028      	beq.n	8002372 <__aeabi_d2f+0xc2>
 8002320:	3304      	adds	r3, #4
 8002322:	0159      	lsls	r1, r3, #5
 8002324:	d525      	bpl.n	8002372 <__aeabi_d2f+0xc2>
 8002326:	3401      	adds	r4, #1
 8002328:	2300      	movs	r3, #0
 800232a:	b2e0      	uxtb	r0, r4
 800232c:	e7d6      	b.n	80022dc <__aeabi_d2f+0x2c>
 800232e:	0021      	movs	r1, r4
 8002330:	3117      	adds	r1, #23
 8002332:	dbdb      	blt.n	80022ec <__aeabi_d2f+0x3c>
 8002334:	2180      	movs	r1, #128	@ 0x80
 8002336:	201e      	movs	r0, #30
 8002338:	0409      	lsls	r1, r1, #16
 800233a:	4339      	orrs	r1, r7
 800233c:	1b00      	subs	r0, r0, r4
 800233e:	281f      	cmp	r0, #31
 8002340:	dd1b      	ble.n	800237a <__aeabi_d2f+0xca>
 8002342:	2602      	movs	r6, #2
 8002344:	4276      	negs	r6, r6
 8002346:	1b34      	subs	r4, r6, r4
 8002348:	000e      	movs	r6, r1
 800234a:	40e6      	lsrs	r6, r4
 800234c:	0034      	movs	r4, r6
 800234e:	2820      	cmp	r0, #32
 8002350:	d004      	beq.n	800235c <__aeabi_d2f+0xac>
 8002352:	4817      	ldr	r0, [pc, #92]	@ (80023b0 <__aeabi_d2f+0x100>)
 8002354:	4684      	mov	ip, r0
 8002356:	4463      	add	r3, ip
 8002358:	4099      	lsls	r1, r3
 800235a:	430d      	orrs	r5, r1
 800235c:	002b      	movs	r3, r5
 800235e:	1e59      	subs	r1, r3, #1
 8002360:	418b      	sbcs	r3, r1
 8002362:	4323      	orrs	r3, r4
 8002364:	0759      	lsls	r1, r3, #29
 8002366:	d015      	beq.n	8002394 <__aeabi_d2f+0xe4>
 8002368:	210f      	movs	r1, #15
 800236a:	2400      	movs	r4, #0
 800236c:	4019      	ands	r1, r3
 800236e:	2904      	cmp	r1, #4
 8002370:	d117      	bne.n	80023a2 <__aeabi_d2f+0xf2>
 8002372:	019b      	lsls	r3, r3, #6
 8002374:	0a5b      	lsrs	r3, r3, #9
 8002376:	b2e0      	uxtb	r0, r4
 8002378:	e7b0      	b.n	80022dc <__aeabi_d2f+0x2c>
 800237a:	4c0e      	ldr	r4, [pc, #56]	@ (80023b4 <__aeabi_d2f+0x104>)
 800237c:	191c      	adds	r4, r3, r4
 800237e:	002b      	movs	r3, r5
 8002380:	40a5      	lsls	r5, r4
 8002382:	40c3      	lsrs	r3, r0
 8002384:	40a1      	lsls	r1, r4
 8002386:	1e68      	subs	r0, r5, #1
 8002388:	4185      	sbcs	r5, r0
 800238a:	4329      	orrs	r1, r5
 800238c:	430b      	orrs	r3, r1
 800238e:	2400      	movs	r4, #0
 8002390:	0759      	lsls	r1, r3, #29
 8002392:	d1c1      	bne.n	8002318 <__aeabi_d2f+0x68>
 8002394:	019b      	lsls	r3, r3, #6
 8002396:	2000      	movs	r0, #0
 8002398:	0a5b      	lsrs	r3, r3, #9
 800239a:	e79f      	b.n	80022dc <__aeabi_d2f+0x2c>
 800239c:	08db      	lsrs	r3, r3, #3
 800239e:	b2e0      	uxtb	r0, r4
 80023a0:	e79c      	b.n	80022dc <__aeabi_d2f+0x2c>
 80023a2:	3304      	adds	r3, #4
 80023a4:	e7e5      	b.n	8002372 <__aeabi_d2f+0xc2>
 80023a6:	46c0      	nop			@ (mov r8, r8)
 80023a8:	000007fe 	.word	0x000007fe
 80023ac:	fffffc80 	.word	0xfffffc80
 80023b0:	fffffca2 	.word	0xfffffca2
 80023b4:	fffffc82 	.word	0xfffffc82

080023b8 <__clzsi2>:
 80023b8:	211c      	movs	r1, #28
 80023ba:	2301      	movs	r3, #1
 80023bc:	041b      	lsls	r3, r3, #16
 80023be:	4298      	cmp	r0, r3
 80023c0:	d301      	bcc.n	80023c6 <__clzsi2+0xe>
 80023c2:	0c00      	lsrs	r0, r0, #16
 80023c4:	3910      	subs	r1, #16
 80023c6:	0a1b      	lsrs	r3, r3, #8
 80023c8:	4298      	cmp	r0, r3
 80023ca:	d301      	bcc.n	80023d0 <__clzsi2+0x18>
 80023cc:	0a00      	lsrs	r0, r0, #8
 80023ce:	3908      	subs	r1, #8
 80023d0:	091b      	lsrs	r3, r3, #4
 80023d2:	4298      	cmp	r0, r3
 80023d4:	d301      	bcc.n	80023da <__clzsi2+0x22>
 80023d6:	0900      	lsrs	r0, r0, #4
 80023d8:	3904      	subs	r1, #4
 80023da:	a202      	add	r2, pc, #8	@ (adr r2, 80023e4 <__clzsi2+0x2c>)
 80023dc:	5c10      	ldrb	r0, [r2, r0]
 80023de:	1840      	adds	r0, r0, r1
 80023e0:	4770      	bx	lr
 80023e2:	46c0      	nop			@ (mov r8, r8)
 80023e4:	02020304 	.word	0x02020304
 80023e8:	01010101 	.word	0x01010101
	...

080023f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023f4:	b590      	push	{r4, r7, lr}
 80023f6:	b08d      	sub	sp, #52	@ 0x34
 80023f8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023fa:	f000 fb65 	bl	8002ac8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023fe:	f000 f85f 	bl	80024c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002402:	f000 f951 	bl	80026a8 <MX_GPIO_Init>
  MX_ADC_Init();
 8002406:	f000 f8c3 	bl	8002590 <MX_ADC_Init>
  MX_USART1_UART_Init();
 800240a:	f000 f91d 	bl	8002648 <MX_USART1_UART_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_ADC_Start(&hadc);
 800240e:	4b27      	ldr	r3, [pc, #156]	@ (80024ac <main+0xb8>)
 8002410:	0018      	movs	r0, r3
 8002412:	f000 fd21 	bl	8002e58 <HAL_ADC_Start>
	  HAL_Delay(500);
 8002416:	23fa      	movs	r3, #250	@ 0xfa
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	0018      	movs	r0, r3
 800241c:	f000 fbb8 	bl	8002b90 <HAL_Delay>
	  HAL_ADC_PollForConversion(&hadc, 100);
 8002420:	4b22      	ldr	r3, [pc, #136]	@ (80024ac <main+0xb8>)
 8002422:	2164      	movs	r1, #100	@ 0x64
 8002424:	0018      	movs	r0, r3
 8002426:	f000 fdab 	bl	8002f80 <HAL_ADC_PollForConversion>
	  HAL_Delay(500);
 800242a:	23fa      	movs	r3, #250	@ 0xfa
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	0018      	movs	r0, r3
 8002430:	f000 fbae 	bl	8002b90 <HAL_Delay>
	  raw = HAL_ADC_GetValue(&hadc);
 8002434:	4b1d      	ldr	r3, [pc, #116]	@ (80024ac <main+0xb8>)
 8002436:	0018      	movs	r0, r3
 8002438:	f000 fe3a 	bl	80030b0 <HAL_ADC_GetValue>
 800243c:	0003      	movs	r3, r0
 800243e:	627b      	str	r3, [r7, #36]	@ 0x24
	  HAL_ADC_Stop(&hadc);
 8002440:	4b1a      	ldr	r3, [pc, #104]	@ (80024ac <main+0xb8>)
 8002442:	0018      	movs	r0, r3
 8002444:	f000 fd5c 	bl	8002f00 <HAL_ADC_Stop>


	  voltage = (raw * 5.0) / 4095;
 8002448:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800244a:	f7ff fec5 	bl	80021d8 <__aeabi_ui2d>
 800244e:	2200      	movs	r2, #0
 8002450:	4b17      	ldr	r3, [pc, #92]	@ (80024b0 <main+0xbc>)
 8002452:	f7fe ffd1 	bl	80013f8 <__aeabi_dmul>
 8002456:	0002      	movs	r2, r0
 8002458:	000b      	movs	r3, r1
 800245a:	0010      	movs	r0, r2
 800245c:	0019      	movs	r1, r3
 800245e:	2200      	movs	r2, #0
 8002460:	4b14      	ldr	r3, [pc, #80]	@ (80024b4 <main+0xc0>)
 8002462:	f7fe fb85 	bl	8000b70 <__aeabi_ddiv>
 8002466:	0002      	movs	r2, r0
 8002468:	000b      	movs	r3, r1
 800246a:	0010      	movs	r0, r2
 800246c:	0019      	movs	r1, r3
 800246e:	f7ff ff1f 	bl	80022b0 <__aeabi_d2f>
 8002472:	1c03      	adds	r3, r0, #0
 8002474:	623b      	str	r3, [r7, #32]

	  sprintf(msg, "voltage: %.2f V\r\nraw: %u\r\n\n", voltage, raw);
 8002476:	6a38      	ldr	r0, [r7, #32]
 8002478:	f7ff fed2 	bl	8002220 <__aeabi_f2d>
 800247c:	0002      	movs	r2, r0
 800247e:	000b      	movs	r3, r1
 8002480:	4c0d      	ldr	r4, [pc, #52]	@ (80024b8 <main+0xc4>)
 8002482:	0038      	movs	r0, r7
 8002484:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002486:	9100      	str	r1, [sp, #0]
 8002488:	0021      	movs	r1, r4
 800248a:	f003 f975 	bl	8005778 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800248e:	003b      	movs	r3, r7
 8002490:	0018      	movs	r0, r3
 8002492:	f7fd fe39 	bl	8000108 <strlen>
 8002496:	0003      	movs	r3, r0
 8002498:	b29a      	uxth	r2, r3
 800249a:	2301      	movs	r3, #1
 800249c:	425b      	negs	r3, r3
 800249e:	0039      	movs	r1, r7
 80024a0:	4806      	ldr	r0, [pc, #24]	@ (80024bc <main+0xc8>)
 80024a2:	f002 f833 	bl	800450c <HAL_UART_Transmit>
	  HAL_ADC_Start(&hadc);
 80024a6:	46c0      	nop			@ (mov r8, r8)
 80024a8:	e7b1      	b.n	800240e <main+0x1a>
 80024aa:	46c0      	nop			@ (mov r8, r8)
 80024ac:	200001f0 	.word	0x200001f0
 80024b0:	40140000 	.word	0x40140000
 80024b4:	40affe00 	.word	0x40affe00
 80024b8:	08007b50 	.word	0x08007b50
 80024bc:	20000230 	.word	0x20000230

080024c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024c0:	b590      	push	{r4, r7, lr}
 80024c2:	b097      	sub	sp, #92	@ 0x5c
 80024c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024c6:	2428      	movs	r4, #40	@ 0x28
 80024c8:	193b      	adds	r3, r7, r4
 80024ca:	0018      	movs	r0, r3
 80024cc:	2330      	movs	r3, #48	@ 0x30
 80024ce:	001a      	movs	r2, r3
 80024d0:	2100      	movs	r1, #0
 80024d2:	f003 f9bd 	bl	8005850 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024d6:	2318      	movs	r3, #24
 80024d8:	18fb      	adds	r3, r7, r3
 80024da:	0018      	movs	r0, r3
 80024dc:	2310      	movs	r3, #16
 80024de:	001a      	movs	r2, r3
 80024e0:	2100      	movs	r1, #0
 80024e2:	f003 f9b5 	bl	8005850 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024e6:	1d3b      	adds	r3, r7, #4
 80024e8:	0018      	movs	r0, r3
 80024ea:	2314      	movs	r3, #20
 80024ec:	001a      	movs	r2, r3
 80024ee:	2100      	movs	r1, #0
 80024f0:	f003 f9ae 	bl	8005850 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80024f4:	0021      	movs	r1, r4
 80024f6:	187b      	adds	r3, r7, r1
 80024f8:	2212      	movs	r2, #18
 80024fa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024fc:	187b      	adds	r3, r7, r1
 80024fe:	2201      	movs	r2, #1
 8002500:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8002502:	187b      	adds	r3, r7, r1
 8002504:	2201      	movs	r2, #1
 8002506:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002508:	187b      	adds	r3, r7, r1
 800250a:	2210      	movs	r2, #16
 800250c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800250e:	187b      	adds	r3, r7, r1
 8002510:	2210      	movs	r2, #16
 8002512:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002514:	187b      	adds	r3, r7, r1
 8002516:	2202      	movs	r2, #2
 8002518:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800251a:	187b      	adds	r3, r7, r1
 800251c:	2200      	movs	r2, #0
 800251e:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002520:	187b      	adds	r3, r7, r1
 8002522:	22a0      	movs	r2, #160	@ 0xa0
 8002524:	0392      	lsls	r2, r2, #14
 8002526:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002528:	187b      	adds	r3, r7, r1
 800252a:	2200      	movs	r2, #0
 800252c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800252e:	187b      	adds	r3, r7, r1
 8002530:	0018      	movs	r0, r3
 8002532:	f001 fa5b 	bl	80039ec <HAL_RCC_OscConfig>
 8002536:	1e03      	subs	r3, r0, #0
 8002538:	d001      	beq.n	800253e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800253a:	f000 f8ff 	bl	800273c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800253e:	2118      	movs	r1, #24
 8002540:	187b      	adds	r3, r7, r1
 8002542:	2207      	movs	r2, #7
 8002544:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002546:	187b      	adds	r3, r7, r1
 8002548:	2202      	movs	r2, #2
 800254a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800254c:	187b      	adds	r3, r7, r1
 800254e:	2200      	movs	r2, #0
 8002550:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002552:	187b      	adds	r3, r7, r1
 8002554:	2200      	movs	r2, #0
 8002556:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002558:	187b      	adds	r3, r7, r1
 800255a:	2101      	movs	r1, #1
 800255c:	0018      	movs	r0, r3
 800255e:	f001 fd5f 	bl	8004020 <HAL_RCC_ClockConfig>
 8002562:	1e03      	subs	r3, r0, #0
 8002564:	d001      	beq.n	800256a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8002566:	f000 f8e9 	bl	800273c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800256a:	1d3b      	adds	r3, r7, #4
 800256c:	2201      	movs	r2, #1
 800256e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002570:	1d3b      	adds	r3, r7, #4
 8002572:	2200      	movs	r2, #0
 8002574:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002576:	1d3b      	adds	r3, r7, #4
 8002578:	0018      	movs	r0, r3
 800257a:	f001 fe95 	bl	80042a8 <HAL_RCCEx_PeriphCLKConfig>
 800257e:	1e03      	subs	r3, r0, #0
 8002580:	d001      	beq.n	8002586 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002582:	f000 f8db 	bl	800273c <Error_Handler>
  }
}
 8002586:	46c0      	nop			@ (mov r8, r8)
 8002588:	46bd      	mov	sp, r7
 800258a:	b017      	add	sp, #92	@ 0x5c
 800258c:	bd90      	pop	{r4, r7, pc}
	...

08002590 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002596:	1d3b      	adds	r3, r7, #4
 8002598:	0018      	movs	r0, r3
 800259a:	230c      	movs	r3, #12
 800259c:	001a      	movs	r2, r3
 800259e:	2100      	movs	r1, #0
 80025a0:	f003 f956 	bl	8005850 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80025a4:	4b26      	ldr	r3, [pc, #152]	@ (8002640 <MX_ADC_Init+0xb0>)
 80025a6:	4a27      	ldr	r2, [pc, #156]	@ (8002644 <MX_ADC_Init+0xb4>)
 80025a8:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80025aa:	4b25      	ldr	r3, [pc, #148]	@ (8002640 <MX_ADC_Init+0xb0>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80025b0:	4b23      	ldr	r3, [pc, #140]	@ (8002640 <MX_ADC_Init+0xb0>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80025b6:	4b22      	ldr	r3, [pc, #136]	@ (8002640 <MX_ADC_Init+0xb0>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80025bc:	4b20      	ldr	r3, [pc, #128]	@ (8002640 <MX_ADC_Init+0xb0>)
 80025be:	2201      	movs	r2, #1
 80025c0:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80025c2:	4b1f      	ldr	r3, [pc, #124]	@ (8002640 <MX_ADC_Init+0xb0>)
 80025c4:	2204      	movs	r2, #4
 80025c6:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80025c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002640 <MX_ADC_Init+0xb0>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80025ce:	4b1c      	ldr	r3, [pc, #112]	@ (8002640 <MX_ADC_Init+0xb0>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80025d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002640 <MX_ADC_Init+0xb0>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80025da:	4b19      	ldr	r3, [pc, #100]	@ (8002640 <MX_ADC_Init+0xb0>)
 80025dc:	2200      	movs	r2, #0
 80025de:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80025e0:	4b17      	ldr	r3, [pc, #92]	@ (8002640 <MX_ADC_Init+0xb0>)
 80025e2:	22c2      	movs	r2, #194	@ 0xc2
 80025e4:	32ff      	adds	r2, #255	@ 0xff
 80025e6:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80025e8:	4b15      	ldr	r3, [pc, #84]	@ (8002640 <MX_ADC_Init+0xb0>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80025ee:	4b14      	ldr	r3, [pc, #80]	@ (8002640 <MX_ADC_Init+0xb0>)
 80025f0:	2224      	movs	r2, #36	@ 0x24
 80025f2:	2100      	movs	r1, #0
 80025f4:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80025f6:	4b12      	ldr	r3, [pc, #72]	@ (8002640 <MX_ADC_Init+0xb0>)
 80025f8:	2201      	movs	r2, #1
 80025fa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80025fc:	4b10      	ldr	r3, [pc, #64]	@ (8002640 <MX_ADC_Init+0xb0>)
 80025fe:	0018      	movs	r0, r3
 8002600:	f000 faea 	bl	8002bd8 <HAL_ADC_Init>
 8002604:	1e03      	subs	r3, r0, #0
 8002606:	d001      	beq.n	800260c <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8002608:	f000 f898 	bl	800273c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800260c:	1d3b      	adds	r3, r7, #4
 800260e:	2205      	movs	r2, #5
 8002610:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002612:	1d3b      	adds	r3, r7, #4
 8002614:	2280      	movs	r2, #128	@ 0x80
 8002616:	0152      	lsls	r2, r2, #5
 8002618:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800261a:	1d3b      	adds	r3, r7, #4
 800261c:	2280      	movs	r2, #128	@ 0x80
 800261e:	0552      	lsls	r2, r2, #21
 8002620:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002622:	1d3a      	adds	r2, r7, #4
 8002624:	4b06      	ldr	r3, [pc, #24]	@ (8002640 <MX_ADC_Init+0xb0>)
 8002626:	0011      	movs	r1, r2
 8002628:	0018      	movs	r0, r3
 800262a:	f000 fd4d 	bl	80030c8 <HAL_ADC_ConfigChannel>
 800262e:	1e03      	subs	r3, r0, #0
 8002630:	d001      	beq.n	8002636 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8002632:	f000 f883 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002636:	46c0      	nop			@ (mov r8, r8)
 8002638:	46bd      	mov	sp, r7
 800263a:	b004      	add	sp, #16
 800263c:	bd80      	pop	{r7, pc}
 800263e:	46c0      	nop			@ (mov r8, r8)
 8002640:	200001f0 	.word	0x200001f0
 8002644:	40012400 	.word	0x40012400

08002648 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800264c:	4b14      	ldr	r3, [pc, #80]	@ (80026a0 <MX_USART1_UART_Init+0x58>)
 800264e:	4a15      	ldr	r2, [pc, #84]	@ (80026a4 <MX_USART1_UART_Init+0x5c>)
 8002650:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002652:	4b13      	ldr	r3, [pc, #76]	@ (80026a0 <MX_USART1_UART_Init+0x58>)
 8002654:	22e1      	movs	r2, #225	@ 0xe1
 8002656:	0252      	lsls	r2, r2, #9
 8002658:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800265a:	4b11      	ldr	r3, [pc, #68]	@ (80026a0 <MX_USART1_UART_Init+0x58>)
 800265c:	2200      	movs	r2, #0
 800265e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002660:	4b0f      	ldr	r3, [pc, #60]	@ (80026a0 <MX_USART1_UART_Init+0x58>)
 8002662:	2200      	movs	r2, #0
 8002664:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002666:	4b0e      	ldr	r3, [pc, #56]	@ (80026a0 <MX_USART1_UART_Init+0x58>)
 8002668:	2200      	movs	r2, #0
 800266a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800266c:	4b0c      	ldr	r3, [pc, #48]	@ (80026a0 <MX_USART1_UART_Init+0x58>)
 800266e:	220c      	movs	r2, #12
 8002670:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002672:	4b0b      	ldr	r3, [pc, #44]	@ (80026a0 <MX_USART1_UART_Init+0x58>)
 8002674:	2200      	movs	r2, #0
 8002676:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002678:	4b09      	ldr	r3, [pc, #36]	@ (80026a0 <MX_USART1_UART_Init+0x58>)
 800267a:	2200      	movs	r2, #0
 800267c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800267e:	4b08      	ldr	r3, [pc, #32]	@ (80026a0 <MX_USART1_UART_Init+0x58>)
 8002680:	2200      	movs	r2, #0
 8002682:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002684:	4b06      	ldr	r3, [pc, #24]	@ (80026a0 <MX_USART1_UART_Init+0x58>)
 8002686:	2200      	movs	r2, #0
 8002688:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800268a:	4b05      	ldr	r3, [pc, #20]	@ (80026a0 <MX_USART1_UART_Init+0x58>)
 800268c:	0018      	movs	r0, r3
 800268e:	f001 fee9 	bl	8004464 <HAL_UART_Init>
 8002692:	1e03      	subs	r3, r0, #0
 8002694:	d001      	beq.n	800269a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002696:	f000 f851 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800269a:	46c0      	nop			@ (mov r8, r8)
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	20000230 	.word	0x20000230
 80026a4:	40013800 	.word	0x40013800

080026a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026a8:	b590      	push	{r4, r7, lr}
 80026aa:	b089      	sub	sp, #36	@ 0x24
 80026ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ae:	240c      	movs	r4, #12
 80026b0:	193b      	adds	r3, r7, r4
 80026b2:	0018      	movs	r0, r3
 80026b4:	2314      	movs	r3, #20
 80026b6:	001a      	movs	r2, r3
 80026b8:	2100      	movs	r1, #0
 80026ba:	f003 f8c9 	bl	8005850 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026be:	4b1d      	ldr	r3, [pc, #116]	@ (8002734 <MX_GPIO_Init+0x8c>)
 80026c0:	695a      	ldr	r2, [r3, #20]
 80026c2:	4b1c      	ldr	r3, [pc, #112]	@ (8002734 <MX_GPIO_Init+0x8c>)
 80026c4:	2180      	movs	r1, #128	@ 0x80
 80026c6:	0309      	lsls	r1, r1, #12
 80026c8:	430a      	orrs	r2, r1
 80026ca:	615a      	str	r2, [r3, #20]
 80026cc:	4b19      	ldr	r3, [pc, #100]	@ (8002734 <MX_GPIO_Init+0x8c>)
 80026ce:	695a      	ldr	r2, [r3, #20]
 80026d0:	2380      	movs	r3, #128	@ 0x80
 80026d2:	031b      	lsls	r3, r3, #12
 80026d4:	4013      	ands	r3, r2
 80026d6:	60bb      	str	r3, [r7, #8]
 80026d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026da:	4b16      	ldr	r3, [pc, #88]	@ (8002734 <MX_GPIO_Init+0x8c>)
 80026dc:	695a      	ldr	r2, [r3, #20]
 80026de:	4b15      	ldr	r3, [pc, #84]	@ (8002734 <MX_GPIO_Init+0x8c>)
 80026e0:	2180      	movs	r1, #128	@ 0x80
 80026e2:	0289      	lsls	r1, r1, #10
 80026e4:	430a      	orrs	r2, r1
 80026e6:	615a      	str	r2, [r3, #20]
 80026e8:	4b12      	ldr	r3, [pc, #72]	@ (8002734 <MX_GPIO_Init+0x8c>)
 80026ea:	695a      	ldr	r2, [r3, #20]
 80026ec:	2380      	movs	r3, #128	@ 0x80
 80026ee:	029b      	lsls	r3, r3, #10
 80026f0:	4013      	ands	r3, r2
 80026f2:	607b      	str	r3, [r7, #4]
 80026f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15|LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 80026f6:	2383      	movs	r3, #131	@ 0x83
 80026f8:	021b      	lsls	r3, r3, #8
 80026fa:	480f      	ldr	r0, [pc, #60]	@ (8002738 <MX_GPIO_Init+0x90>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	0019      	movs	r1, r3
 8002700:	f001 f956 	bl	80039b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC15 LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_15|LD4_Pin|LD3_Pin;
 8002704:	193b      	adds	r3, r7, r4
 8002706:	2283      	movs	r2, #131	@ 0x83
 8002708:	0212      	lsls	r2, r2, #8
 800270a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800270c:	193b      	adds	r3, r7, r4
 800270e:	2201      	movs	r2, #1
 8002710:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002712:	193b      	adds	r3, r7, r4
 8002714:	2200      	movs	r2, #0
 8002716:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002718:	193b      	adds	r3, r7, r4
 800271a:	2200      	movs	r2, #0
 800271c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800271e:	193b      	adds	r3, r7, r4
 8002720:	4a05      	ldr	r2, [pc, #20]	@ (8002738 <MX_GPIO_Init+0x90>)
 8002722:	0019      	movs	r1, r3
 8002724:	0010      	movs	r0, r2
 8002726:	f000 ffd3 	bl	80036d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800272a:	46c0      	nop			@ (mov r8, r8)
 800272c:	46bd      	mov	sp, r7
 800272e:	b009      	add	sp, #36	@ 0x24
 8002730:	bd90      	pop	{r4, r7, pc}
 8002732:	46c0      	nop			@ (mov r8, r8)
 8002734:	40021000 	.word	0x40021000
 8002738:	48000800 	.word	0x48000800

0800273c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002740:	b672      	cpsid	i
}
 8002742:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002744:	46c0      	nop			@ (mov r8, r8)
 8002746:	e7fd      	b.n	8002744 <Error_Handler+0x8>

08002748 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800274e:	4b0f      	ldr	r3, [pc, #60]	@ (800278c <HAL_MspInit+0x44>)
 8002750:	699a      	ldr	r2, [r3, #24]
 8002752:	4b0e      	ldr	r3, [pc, #56]	@ (800278c <HAL_MspInit+0x44>)
 8002754:	2101      	movs	r1, #1
 8002756:	430a      	orrs	r2, r1
 8002758:	619a      	str	r2, [r3, #24]
 800275a:	4b0c      	ldr	r3, [pc, #48]	@ (800278c <HAL_MspInit+0x44>)
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	2201      	movs	r2, #1
 8002760:	4013      	ands	r3, r2
 8002762:	607b      	str	r3, [r7, #4]
 8002764:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002766:	4b09      	ldr	r3, [pc, #36]	@ (800278c <HAL_MspInit+0x44>)
 8002768:	69da      	ldr	r2, [r3, #28]
 800276a:	4b08      	ldr	r3, [pc, #32]	@ (800278c <HAL_MspInit+0x44>)
 800276c:	2180      	movs	r1, #128	@ 0x80
 800276e:	0549      	lsls	r1, r1, #21
 8002770:	430a      	orrs	r2, r1
 8002772:	61da      	str	r2, [r3, #28]
 8002774:	4b05      	ldr	r3, [pc, #20]	@ (800278c <HAL_MspInit+0x44>)
 8002776:	69da      	ldr	r2, [r3, #28]
 8002778:	2380      	movs	r3, #128	@ 0x80
 800277a:	055b      	lsls	r3, r3, #21
 800277c:	4013      	ands	r3, r2
 800277e:	603b      	str	r3, [r7, #0]
 8002780:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002782:	46c0      	nop			@ (mov r8, r8)
 8002784:	46bd      	mov	sp, r7
 8002786:	b002      	add	sp, #8
 8002788:	bd80      	pop	{r7, pc}
 800278a:	46c0      	nop			@ (mov r8, r8)
 800278c:	40021000 	.word	0x40021000

08002790 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002790:	b590      	push	{r4, r7, lr}
 8002792:	b08b      	sub	sp, #44	@ 0x2c
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002798:	2414      	movs	r4, #20
 800279a:	193b      	adds	r3, r7, r4
 800279c:	0018      	movs	r0, r3
 800279e:	2314      	movs	r3, #20
 80027a0:	001a      	movs	r2, r3
 80027a2:	2100      	movs	r1, #0
 80027a4:	f003 f854 	bl	8005850 <memset>
  if(hadc->Instance==ADC1)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a19      	ldr	r2, [pc, #100]	@ (8002814 <HAL_ADC_MspInit+0x84>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d12b      	bne.n	800280a <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80027b2:	4b19      	ldr	r3, [pc, #100]	@ (8002818 <HAL_ADC_MspInit+0x88>)
 80027b4:	699a      	ldr	r2, [r3, #24]
 80027b6:	4b18      	ldr	r3, [pc, #96]	@ (8002818 <HAL_ADC_MspInit+0x88>)
 80027b8:	2180      	movs	r1, #128	@ 0x80
 80027ba:	0089      	lsls	r1, r1, #2
 80027bc:	430a      	orrs	r2, r1
 80027be:	619a      	str	r2, [r3, #24]
 80027c0:	4b15      	ldr	r3, [pc, #84]	@ (8002818 <HAL_ADC_MspInit+0x88>)
 80027c2:	699a      	ldr	r2, [r3, #24]
 80027c4:	2380      	movs	r3, #128	@ 0x80
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	4013      	ands	r3, r2
 80027ca:	613b      	str	r3, [r7, #16]
 80027cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ce:	4b12      	ldr	r3, [pc, #72]	@ (8002818 <HAL_ADC_MspInit+0x88>)
 80027d0:	695a      	ldr	r2, [r3, #20]
 80027d2:	4b11      	ldr	r3, [pc, #68]	@ (8002818 <HAL_ADC_MspInit+0x88>)
 80027d4:	2180      	movs	r1, #128	@ 0x80
 80027d6:	0289      	lsls	r1, r1, #10
 80027d8:	430a      	orrs	r2, r1
 80027da:	615a      	str	r2, [r3, #20]
 80027dc:	4b0e      	ldr	r3, [pc, #56]	@ (8002818 <HAL_ADC_MspInit+0x88>)
 80027de:	695a      	ldr	r2, [r3, #20]
 80027e0:	2380      	movs	r3, #128	@ 0x80
 80027e2:	029b      	lsls	r3, r3, #10
 80027e4:	4013      	ands	r3, r2
 80027e6:	60fb      	str	r3, [r7, #12]
 80027e8:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA5     ------> ADC_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80027ea:	193b      	adds	r3, r7, r4
 80027ec:	2220      	movs	r2, #32
 80027ee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027f0:	193b      	adds	r3, r7, r4
 80027f2:	2203      	movs	r2, #3
 80027f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f6:	193b      	adds	r3, r7, r4
 80027f8:	2200      	movs	r2, #0
 80027fa:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027fc:	193a      	adds	r2, r7, r4
 80027fe:	2390      	movs	r3, #144	@ 0x90
 8002800:	05db      	lsls	r3, r3, #23
 8002802:	0011      	movs	r1, r2
 8002804:	0018      	movs	r0, r3
 8002806:	f000 ff63 	bl	80036d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800280a:	46c0      	nop			@ (mov r8, r8)
 800280c:	46bd      	mov	sp, r7
 800280e:	b00b      	add	sp, #44	@ 0x2c
 8002810:	bd90      	pop	{r4, r7, pc}
 8002812:	46c0      	nop			@ (mov r8, r8)
 8002814:	40012400 	.word	0x40012400
 8002818:	40021000 	.word	0x40021000

0800281c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800281c:	b590      	push	{r4, r7, lr}
 800281e:	b08b      	sub	sp, #44	@ 0x2c
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002824:	2414      	movs	r4, #20
 8002826:	193b      	adds	r3, r7, r4
 8002828:	0018      	movs	r0, r3
 800282a:	2314      	movs	r3, #20
 800282c:	001a      	movs	r2, r3
 800282e:	2100      	movs	r1, #0
 8002830:	f003 f80e 	bl	8005850 <memset>
  if(huart->Instance==USART1)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a1d      	ldr	r2, [pc, #116]	@ (80028b0 <HAL_UART_MspInit+0x94>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d133      	bne.n	80028a6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800283e:	4b1d      	ldr	r3, [pc, #116]	@ (80028b4 <HAL_UART_MspInit+0x98>)
 8002840:	699a      	ldr	r2, [r3, #24]
 8002842:	4b1c      	ldr	r3, [pc, #112]	@ (80028b4 <HAL_UART_MspInit+0x98>)
 8002844:	2180      	movs	r1, #128	@ 0x80
 8002846:	01c9      	lsls	r1, r1, #7
 8002848:	430a      	orrs	r2, r1
 800284a:	619a      	str	r2, [r3, #24]
 800284c:	4b19      	ldr	r3, [pc, #100]	@ (80028b4 <HAL_UART_MspInit+0x98>)
 800284e:	699a      	ldr	r2, [r3, #24]
 8002850:	2380      	movs	r3, #128	@ 0x80
 8002852:	01db      	lsls	r3, r3, #7
 8002854:	4013      	ands	r3, r2
 8002856:	613b      	str	r3, [r7, #16]
 8002858:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800285a:	4b16      	ldr	r3, [pc, #88]	@ (80028b4 <HAL_UART_MspInit+0x98>)
 800285c:	695a      	ldr	r2, [r3, #20]
 800285e:	4b15      	ldr	r3, [pc, #84]	@ (80028b4 <HAL_UART_MspInit+0x98>)
 8002860:	2180      	movs	r1, #128	@ 0x80
 8002862:	0289      	lsls	r1, r1, #10
 8002864:	430a      	orrs	r2, r1
 8002866:	615a      	str	r2, [r3, #20]
 8002868:	4b12      	ldr	r3, [pc, #72]	@ (80028b4 <HAL_UART_MspInit+0x98>)
 800286a:	695a      	ldr	r2, [r3, #20]
 800286c:	2380      	movs	r3, #128	@ 0x80
 800286e:	029b      	lsls	r3, r3, #10
 8002870:	4013      	ands	r3, r2
 8002872:	60fb      	str	r3, [r7, #12]
 8002874:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002876:	193b      	adds	r3, r7, r4
 8002878:	22c0      	movs	r2, #192	@ 0xc0
 800287a:	00d2      	lsls	r2, r2, #3
 800287c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287e:	0021      	movs	r1, r4
 8002880:	187b      	adds	r3, r7, r1
 8002882:	2202      	movs	r2, #2
 8002884:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002886:	187b      	adds	r3, r7, r1
 8002888:	2200      	movs	r2, #0
 800288a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800288c:	187b      	adds	r3, r7, r1
 800288e:	2203      	movs	r2, #3
 8002890:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002892:	187b      	adds	r3, r7, r1
 8002894:	2201      	movs	r2, #1
 8002896:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002898:	187a      	adds	r2, r7, r1
 800289a:	2390      	movs	r3, #144	@ 0x90
 800289c:	05db      	lsls	r3, r3, #23
 800289e:	0011      	movs	r1, r2
 80028a0:	0018      	movs	r0, r3
 80028a2:	f000 ff15 	bl	80036d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80028a6:	46c0      	nop			@ (mov r8, r8)
 80028a8:	46bd      	mov	sp, r7
 80028aa:	b00b      	add	sp, #44	@ 0x2c
 80028ac:	bd90      	pop	{r4, r7, pc}
 80028ae:	46c0      	nop			@ (mov r8, r8)
 80028b0:	40013800 	.word	0x40013800
 80028b4:	40021000 	.word	0x40021000

080028b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80028bc:	46c0      	nop			@ (mov r8, r8)
 80028be:	e7fd      	b.n	80028bc <NMI_Handler+0x4>

080028c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028c4:	46c0      	nop			@ (mov r8, r8)
 80028c6:	e7fd      	b.n	80028c4 <HardFault_Handler+0x4>

080028c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80028cc:	46c0      	nop			@ (mov r8, r8)
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028d6:	46c0      	nop			@ (mov r8, r8)
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028e0:	f000 f93a 	bl	8002b58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028e4:	46c0      	nop			@ (mov r8, r8)
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	af00      	add	r7, sp, #0
  return 1;
 80028ee:	2301      	movs	r3, #1
}
 80028f0:	0018      	movs	r0, r3
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <_kill>:

int _kill(int pid, int sig)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b082      	sub	sp, #8
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
 80028fe:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002900:	f003 f800 	bl	8005904 <__errno>
 8002904:	0003      	movs	r3, r0
 8002906:	2216      	movs	r2, #22
 8002908:	601a      	str	r2, [r3, #0]
  return -1;
 800290a:	2301      	movs	r3, #1
 800290c:	425b      	negs	r3, r3
}
 800290e:	0018      	movs	r0, r3
 8002910:	46bd      	mov	sp, r7
 8002912:	b002      	add	sp, #8
 8002914:	bd80      	pop	{r7, pc}

08002916 <_exit>:

void _exit (int status)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b082      	sub	sp, #8
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800291e:	2301      	movs	r3, #1
 8002920:	425a      	negs	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	0011      	movs	r1, r2
 8002926:	0018      	movs	r0, r3
 8002928:	f7ff ffe5 	bl	80028f6 <_kill>
  while (1) {}    /* Make sure we hang here */
 800292c:	46c0      	nop			@ (mov r8, r8)
 800292e:	e7fd      	b.n	800292c <_exit+0x16>

08002930 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b086      	sub	sp, #24
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800293c:	2300      	movs	r3, #0
 800293e:	617b      	str	r3, [r7, #20]
 8002940:	e00a      	b.n	8002958 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002942:	e000      	b.n	8002946 <_read+0x16>
 8002944:	bf00      	nop
 8002946:	0001      	movs	r1, r0
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	1c5a      	adds	r2, r3, #1
 800294c:	60ba      	str	r2, [r7, #8]
 800294e:	b2ca      	uxtb	r2, r1
 8002950:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	3301      	adds	r3, #1
 8002956:	617b      	str	r3, [r7, #20]
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	429a      	cmp	r2, r3
 800295e:	dbf0      	blt.n	8002942 <_read+0x12>
  }

  return len;
 8002960:	687b      	ldr	r3, [r7, #4]
}
 8002962:	0018      	movs	r0, r3
 8002964:	46bd      	mov	sp, r7
 8002966:	b006      	add	sp, #24
 8002968:	bd80      	pop	{r7, pc}

0800296a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b086      	sub	sp, #24
 800296e:	af00      	add	r7, sp, #0
 8002970:	60f8      	str	r0, [r7, #12]
 8002972:	60b9      	str	r1, [r7, #8]
 8002974:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002976:	2300      	movs	r3, #0
 8002978:	617b      	str	r3, [r7, #20]
 800297a:	e009      	b.n	8002990 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	1c5a      	adds	r2, r3, #1
 8002980:	60ba      	str	r2, [r7, #8]
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	0018      	movs	r0, r3
 8002986:	e000      	b.n	800298a <_write+0x20>
 8002988:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	3301      	adds	r3, #1
 800298e:	617b      	str	r3, [r7, #20]
 8002990:	697a      	ldr	r2, [r7, #20]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	429a      	cmp	r2, r3
 8002996:	dbf1      	blt.n	800297c <_write+0x12>
  }
  return len;
 8002998:	687b      	ldr	r3, [r7, #4]
}
 800299a:	0018      	movs	r0, r3
 800299c:	46bd      	mov	sp, r7
 800299e:	b006      	add	sp, #24
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <_close>:

int _close(int file)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b082      	sub	sp, #8
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80029aa:	2301      	movs	r3, #1
 80029ac:	425b      	negs	r3, r3
}
 80029ae:	0018      	movs	r0, r3
 80029b0:	46bd      	mov	sp, r7
 80029b2:	b002      	add	sp, #8
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b082      	sub	sp, #8
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
 80029be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	2280      	movs	r2, #128	@ 0x80
 80029c4:	0192      	lsls	r2, r2, #6
 80029c6:	605a      	str	r2, [r3, #4]
  return 0;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	0018      	movs	r0, r3
 80029cc:	46bd      	mov	sp, r7
 80029ce:	b002      	add	sp, #8
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <_isatty>:

int _isatty(int file)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b082      	sub	sp, #8
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80029da:	2301      	movs	r3, #1
}
 80029dc:	0018      	movs	r0, r3
 80029de:	46bd      	mov	sp, r7
 80029e0:	b002      	add	sp, #8
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	0018      	movs	r0, r3
 80029f4:	46bd      	mov	sp, r7
 80029f6:	b004      	add	sp, #16
 80029f8:	bd80      	pop	{r7, pc}
	...

080029fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a04:	4a14      	ldr	r2, [pc, #80]	@ (8002a58 <_sbrk+0x5c>)
 8002a06:	4b15      	ldr	r3, [pc, #84]	@ (8002a5c <_sbrk+0x60>)
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a10:	4b13      	ldr	r3, [pc, #76]	@ (8002a60 <_sbrk+0x64>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d102      	bne.n	8002a1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a18:	4b11      	ldr	r3, [pc, #68]	@ (8002a60 <_sbrk+0x64>)
 8002a1a:	4a12      	ldr	r2, [pc, #72]	@ (8002a64 <_sbrk+0x68>)
 8002a1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a1e:	4b10      	ldr	r3, [pc, #64]	@ (8002a60 <_sbrk+0x64>)
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	18d3      	adds	r3, r2, r3
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d207      	bcs.n	8002a3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a2c:	f002 ff6a 	bl	8005904 <__errno>
 8002a30:	0003      	movs	r3, r0
 8002a32:	220c      	movs	r2, #12
 8002a34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a36:	2301      	movs	r3, #1
 8002a38:	425b      	negs	r3, r3
 8002a3a:	e009      	b.n	8002a50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a3c:	4b08      	ldr	r3, [pc, #32]	@ (8002a60 <_sbrk+0x64>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a42:	4b07      	ldr	r3, [pc, #28]	@ (8002a60 <_sbrk+0x64>)
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	18d2      	adds	r2, r2, r3
 8002a4a:	4b05      	ldr	r3, [pc, #20]	@ (8002a60 <_sbrk+0x64>)
 8002a4c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
}
 8002a50:	0018      	movs	r0, r3
 8002a52:	46bd      	mov	sp, r7
 8002a54:	b006      	add	sp, #24
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	20002000 	.word	0x20002000
 8002a5c:	00000400 	.word	0x00000400
 8002a60:	200002b8 	.word	0x200002b8
 8002a64:	20000410 	.word	0x20000410

08002a68 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002a6c:	46c0      	nop			@ (mov r8, r8)
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
	...

08002a74 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002a74:	480d      	ldr	r0, [pc, #52]	@ (8002aac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002a76:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 8002a78:	f7ff fff6 	bl	8002a68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a7c:	480c      	ldr	r0, [pc, #48]	@ (8002ab0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a7e:	490d      	ldr	r1, [pc, #52]	@ (8002ab4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a80:	4a0d      	ldr	r2, [pc, #52]	@ (8002ab8 <LoopForever+0xe>)
  movs r3, #0
 8002a82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a84:	e002      	b.n	8002a8c <LoopCopyDataInit>

08002a86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a8a:	3304      	adds	r3, #4

08002a8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a90:	d3f9      	bcc.n	8002a86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a92:	4a0a      	ldr	r2, [pc, #40]	@ (8002abc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a94:	4c0a      	ldr	r4, [pc, #40]	@ (8002ac0 <LoopForever+0x16>)
  movs r3, #0
 8002a96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a98:	e001      	b.n	8002a9e <LoopFillZerobss>

08002a9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a9c:	3204      	adds	r2, #4

08002a9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002aa0:	d3fb      	bcc.n	8002a9a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002aa2:	f002 ff35 	bl	8005910 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002aa6:	f7ff fca5 	bl	80023f4 <main>

08002aaa <LoopForever>:

LoopForever:
    b LoopForever
 8002aaa:	e7fe      	b.n	8002aaa <LoopForever>
  ldr   r0, =_estack
 8002aac:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002ab0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ab4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002ab8:	08007f60 	.word	0x08007f60
  ldr r2, =_sbss
 8002abc:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002ac0:	2000040c 	.word	0x2000040c

08002ac4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ac4:	e7fe      	b.n	8002ac4 <ADC1_COMP_IRQHandler>
	...

08002ac8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002acc:	4b07      	ldr	r3, [pc, #28]	@ (8002aec <HAL_Init+0x24>)
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	4b06      	ldr	r3, [pc, #24]	@ (8002aec <HAL_Init+0x24>)
 8002ad2:	2110      	movs	r1, #16
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002ad8:	2000      	movs	r0, #0
 8002ada:	f000 f809 	bl	8002af0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ade:	f7ff fe33 	bl	8002748 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	0018      	movs	r0, r3
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	46c0      	nop			@ (mov r8, r8)
 8002aec:	40022000 	.word	0x40022000

08002af0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002af0:	b590      	push	{r4, r7, lr}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002af8:	4b14      	ldr	r3, [pc, #80]	@ (8002b4c <HAL_InitTick+0x5c>)
 8002afa:	681c      	ldr	r4, [r3, #0]
 8002afc:	4b14      	ldr	r3, [pc, #80]	@ (8002b50 <HAL_InitTick+0x60>)
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	0019      	movs	r1, r3
 8002b02:	23fa      	movs	r3, #250	@ 0xfa
 8002b04:	0098      	lsls	r0, r3, #2
 8002b06:	f7fd fb1b 	bl	8000140 <__udivsi3>
 8002b0a:	0003      	movs	r3, r0
 8002b0c:	0019      	movs	r1, r3
 8002b0e:	0020      	movs	r0, r4
 8002b10:	f7fd fb16 	bl	8000140 <__udivsi3>
 8002b14:	0003      	movs	r3, r0
 8002b16:	0018      	movs	r0, r3
 8002b18:	f000 fdcd 	bl	80036b6 <HAL_SYSTICK_Config>
 8002b1c:	1e03      	subs	r3, r0, #0
 8002b1e:	d001      	beq.n	8002b24 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e00f      	b.n	8002b44 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b03      	cmp	r3, #3
 8002b28:	d80b      	bhi.n	8002b42 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b2a:	6879      	ldr	r1, [r7, #4]
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	425b      	negs	r3, r3
 8002b30:	2200      	movs	r2, #0
 8002b32:	0018      	movs	r0, r3
 8002b34:	f000 fdaa 	bl	800368c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b38:	4b06      	ldr	r3, [pc, #24]	@ (8002b54 <HAL_InitTick+0x64>)
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	e000      	b.n	8002b44 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
}
 8002b44:	0018      	movs	r0, r3
 8002b46:	46bd      	mov	sp, r7
 8002b48:	b003      	add	sp, #12
 8002b4a:	bd90      	pop	{r4, r7, pc}
 8002b4c:	20000000 	.word	0x20000000
 8002b50:	20000008 	.word	0x20000008
 8002b54:	20000004 	.word	0x20000004

08002b58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b5c:	4b05      	ldr	r3, [pc, #20]	@ (8002b74 <HAL_IncTick+0x1c>)
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	001a      	movs	r2, r3
 8002b62:	4b05      	ldr	r3, [pc, #20]	@ (8002b78 <HAL_IncTick+0x20>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	18d2      	adds	r2, r2, r3
 8002b68:	4b03      	ldr	r3, [pc, #12]	@ (8002b78 <HAL_IncTick+0x20>)
 8002b6a:	601a      	str	r2, [r3, #0]
}
 8002b6c:	46c0      	nop			@ (mov r8, r8)
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	46c0      	nop			@ (mov r8, r8)
 8002b74:	20000008 	.word	0x20000008
 8002b78:	200002bc 	.word	0x200002bc

08002b7c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b80:	4b02      	ldr	r3, [pc, #8]	@ (8002b8c <HAL_GetTick+0x10>)
 8002b82:	681b      	ldr	r3, [r3, #0]
}
 8002b84:	0018      	movs	r0, r3
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	46c0      	nop			@ (mov r8, r8)
 8002b8c:	200002bc 	.word	0x200002bc

08002b90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b98:	f7ff fff0 	bl	8002b7c <HAL_GetTick>
 8002b9c:	0003      	movs	r3, r0
 8002b9e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	d005      	beq.n	8002bb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002baa:	4b0a      	ldr	r3, [pc, #40]	@ (8002bd4 <HAL_Delay+0x44>)
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	001a      	movs	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	189b      	adds	r3, r3, r2
 8002bb4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002bb6:	46c0      	nop			@ (mov r8, r8)
 8002bb8:	f7ff ffe0 	bl	8002b7c <HAL_GetTick>
 8002bbc:	0002      	movs	r2, r0
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d8f7      	bhi.n	8002bb8 <HAL_Delay+0x28>
  {
  }
}
 8002bc8:	46c0      	nop			@ (mov r8, r8)
 8002bca:	46c0      	nop			@ (mov r8, r8)
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	b004      	add	sp, #16
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	46c0      	nop			@ (mov r8, r8)
 8002bd4:	20000008 	.word	0x20000008

08002bd8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002be0:	230f      	movs	r3, #15
 8002be2:	18fb      	adds	r3, r7, r3
 8002be4:	2200      	movs	r2, #0
 8002be6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002be8:	2300      	movs	r3, #0
 8002bea:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e125      	b.n	8002e42 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d10a      	bne.n	8002c14 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2234      	movs	r2, #52	@ 0x34
 8002c08:	2100      	movs	r1, #0
 8002c0a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	0018      	movs	r0, r3
 8002c10:	f7ff fdbe 	bl	8002790 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c18:	2210      	movs	r2, #16
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	d000      	beq.n	8002c20 <HAL_ADC_Init+0x48>
 8002c1e:	e103      	b.n	8002e28 <HAL_ADC_Init+0x250>
 8002c20:	230f      	movs	r3, #15
 8002c22:	18fb      	adds	r3, r7, r3
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d000      	beq.n	8002c2c <HAL_ADC_Init+0x54>
 8002c2a:	e0fd      	b.n	8002e28 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	2204      	movs	r2, #4
 8002c34:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8002c36:	d000      	beq.n	8002c3a <HAL_ADC_Init+0x62>
 8002c38:	e0f6      	b.n	8002e28 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c3e:	4a83      	ldr	r2, [pc, #524]	@ (8002e4c <HAL_ADC_Init+0x274>)
 8002c40:	4013      	ands	r3, r2
 8002c42:	2202      	movs	r2, #2
 8002c44:	431a      	orrs	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	2203      	movs	r2, #3
 8002c52:	4013      	ands	r3, r2
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d112      	bne.n	8002c7e <HAL_ADC_Init+0xa6>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	4013      	ands	r3, r2
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d009      	beq.n	8002c7a <HAL_ADC_Init+0xa2>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68da      	ldr	r2, [r3, #12]
 8002c6c:	2380      	movs	r3, #128	@ 0x80
 8002c6e:	021b      	lsls	r3, r3, #8
 8002c70:	401a      	ands	r2, r3
 8002c72:	2380      	movs	r3, #128	@ 0x80
 8002c74:	021b      	lsls	r3, r3, #8
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d101      	bne.n	8002c7e <HAL_ADC_Init+0xa6>
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e000      	b.n	8002c80 <HAL_ADC_Init+0xa8>
 8002c7e:	2300      	movs	r3, #0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d116      	bne.n	8002cb2 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	2218      	movs	r2, #24
 8002c8c:	4393      	bics	r3, r2
 8002c8e:	0019      	movs	r1, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689a      	ldr	r2, [r3, #8]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	0899      	lsrs	r1, r3, #2
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685a      	ldr	r2, [r3, #4]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68da      	ldr	r2, [r3, #12]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4964      	ldr	r1, [pc, #400]	@ (8002e50 <HAL_ADC_Init+0x278>)
 8002cbe:	400a      	ands	r2, r1
 8002cc0:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	7e1b      	ldrb	r3, [r3, #24]
 8002cc6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	7e5b      	ldrb	r3, [r3, #25]
 8002ccc:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002cce:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	7e9b      	ldrb	r3, [r3, #26]
 8002cd4:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002cd6:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d002      	beq.n	8002ce6 <HAL_ADC_Init+0x10e>
 8002ce0:	2380      	movs	r3, #128	@ 0x80
 8002ce2:	015b      	lsls	r3, r3, #5
 8002ce4:	e000      	b.n	8002ce8 <HAL_ADC_Init+0x110>
 8002ce6:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002ce8:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002cee:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d101      	bne.n	8002cfc <HAL_ADC_Init+0x124>
 8002cf8:	2304      	movs	r3, #4
 8002cfa:	e000      	b.n	8002cfe <HAL_ADC_Init+0x126>
 8002cfc:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8002cfe:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2124      	movs	r1, #36	@ 0x24
 8002d04:	5c5b      	ldrb	r3, [r3, r1]
 8002d06:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002d08:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d0a:	68ba      	ldr	r2, [r7, #8]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	7edb      	ldrb	r3, [r3, #27]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d115      	bne.n	8002d44 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	7e9b      	ldrb	r3, [r3, #26]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d105      	bne.n	8002d2c <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	2280      	movs	r2, #128	@ 0x80
 8002d24:	0252      	lsls	r2, r2, #9
 8002d26:	4313      	orrs	r3, r2
 8002d28:	60bb      	str	r3, [r7, #8]
 8002d2a:	e00b      	b.n	8002d44 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d30:	2220      	movs	r2, #32
 8002d32:	431a      	orrs	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	431a      	orrs	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	69da      	ldr	r2, [r3, #28]
 8002d48:	23c2      	movs	r3, #194	@ 0xc2
 8002d4a:	33ff      	adds	r3, #255	@ 0xff
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d007      	beq.n	8002d60 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	68ba      	ldr	r2, [r7, #8]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68d9      	ldr	r1, [r3, #12]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68ba      	ldr	r2, [r7, #8]
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d74:	2380      	movs	r3, #128	@ 0x80
 8002d76:	055b      	lsls	r3, r3, #21
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d01b      	beq.n	8002db4 <HAL_ADC_Init+0x1dc>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d017      	beq.n	8002db4 <HAL_ADC_Init+0x1dc>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d013      	beq.n	8002db4 <HAL_ADC_Init+0x1dc>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d90:	2b03      	cmp	r3, #3
 8002d92:	d00f      	beq.n	8002db4 <HAL_ADC_Init+0x1dc>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d98:	2b04      	cmp	r3, #4
 8002d9a:	d00b      	beq.n	8002db4 <HAL_ADC_Init+0x1dc>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002da0:	2b05      	cmp	r3, #5
 8002da2:	d007      	beq.n	8002db4 <HAL_ADC_Init+0x1dc>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002da8:	2b06      	cmp	r3, #6
 8002daa:	d003      	beq.n	8002db4 <HAL_ADC_Init+0x1dc>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002db0:	2b07      	cmp	r3, #7
 8002db2:	d112      	bne.n	8002dda <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	695a      	ldr	r2, [r3, #20]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2107      	movs	r1, #7
 8002dc0:	438a      	bics	r2, r1
 8002dc2:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6959      	ldr	r1, [r3, #20]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dce:	2207      	movs	r2, #7
 8002dd0:	401a      	ands	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	4a1c      	ldr	r2, [pc, #112]	@ (8002e54 <HAL_ADC_Init+0x27c>)
 8002de2:	4013      	ands	r3, r2
 8002de4:	68ba      	ldr	r2, [r7, #8]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d10b      	bne.n	8002e02 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002df4:	2203      	movs	r2, #3
 8002df6:	4393      	bics	r3, r2
 8002df8:	2201      	movs	r2, #1
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002e00:	e01c      	b.n	8002e3c <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e06:	2212      	movs	r2, #18
 8002e08:	4393      	bics	r3, r2
 8002e0a:	2210      	movs	r2, #16
 8002e0c:	431a      	orrs	r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e16:	2201      	movs	r2, #1
 8002e18:	431a      	orrs	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8002e1e:	230f      	movs	r3, #15
 8002e20:	18fb      	adds	r3, r7, r3
 8002e22:	2201      	movs	r2, #1
 8002e24:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002e26:	e009      	b.n	8002e3c <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e2c:	2210      	movs	r2, #16
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8002e34:	230f      	movs	r3, #15
 8002e36:	18fb      	adds	r3, r7, r3
 8002e38:	2201      	movs	r2, #1
 8002e3a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002e3c:	230f      	movs	r3, #15
 8002e3e:	18fb      	adds	r3, r7, r3
 8002e40:	781b      	ldrb	r3, [r3, #0]
}
 8002e42:	0018      	movs	r0, r3
 8002e44:	46bd      	mov	sp, r7
 8002e46:	b004      	add	sp, #16
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	46c0      	nop			@ (mov r8, r8)
 8002e4c:	fffffefd 	.word	0xfffffefd
 8002e50:	fffe0219 	.word	0xfffe0219
 8002e54:	833fffe7 	.word	0x833fffe7

08002e58 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002e58:	b590      	push	{r4, r7, lr}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e60:	230f      	movs	r3, #15
 8002e62:	18fb      	adds	r3, r7, r3
 8002e64:	2200      	movs	r2, #0
 8002e66:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	2204      	movs	r2, #4
 8002e70:	4013      	ands	r3, r2
 8002e72:	d138      	bne.n	8002ee6 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2234      	movs	r2, #52	@ 0x34
 8002e78:	5c9b      	ldrb	r3, [r3, r2]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d101      	bne.n	8002e82 <HAL_ADC_Start+0x2a>
 8002e7e:	2302      	movs	r3, #2
 8002e80:	e038      	b.n	8002ef4 <HAL_ADC_Start+0x9c>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2234      	movs	r2, #52	@ 0x34
 8002e86:	2101      	movs	r1, #1
 8002e88:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	7e5b      	ldrb	r3, [r3, #25]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d007      	beq.n	8002ea2 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002e92:	230f      	movs	r3, #15
 8002e94:	18fc      	adds	r4, r7, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	0018      	movs	r0, r3
 8002e9a:	f000 fa23 	bl	80032e4 <ADC_Enable>
 8002e9e:	0003      	movs	r3, r0
 8002ea0:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002ea2:	230f      	movs	r3, #15
 8002ea4:	18fb      	adds	r3, r7, r3
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d120      	bne.n	8002eee <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eb0:	4a12      	ldr	r2, [pc, #72]	@ (8002efc <HAL_ADC_Start+0xa4>)
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	2280      	movs	r2, #128	@ 0x80
 8002eb6:	0052      	lsls	r2, r2, #1
 8002eb8:	431a      	orrs	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2234      	movs	r2, #52	@ 0x34
 8002ec8:	2100      	movs	r1, #0
 8002eca:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	221c      	movs	r2, #28
 8002ed2:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	689a      	ldr	r2, [r3, #8]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2104      	movs	r1, #4
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	609a      	str	r2, [r3, #8]
 8002ee4:	e003      	b.n	8002eee <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002ee6:	230f      	movs	r3, #15
 8002ee8:	18fb      	adds	r3, r7, r3
 8002eea:	2202      	movs	r2, #2
 8002eec:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002eee:	230f      	movs	r3, #15
 8002ef0:	18fb      	adds	r3, r7, r3
 8002ef2:	781b      	ldrb	r3, [r3, #0]
}
 8002ef4:	0018      	movs	r0, r3
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	b005      	add	sp, #20
 8002efa:	bd90      	pop	{r4, r7, pc}
 8002efc:	fffff0fe 	.word	0xfffff0fe

08002f00 <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 8002f00:	b5b0      	push	{r4, r5, r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f08:	230f      	movs	r3, #15
 8002f0a:	18fb      	adds	r3, r7, r3
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2234      	movs	r2, #52	@ 0x34
 8002f14:	5c9b      	ldrb	r3, [r3, r2]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d101      	bne.n	8002f1e <HAL_ADC_Stop+0x1e>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	e029      	b.n	8002f72 <HAL_ADC_Stop+0x72>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2234      	movs	r2, #52	@ 0x34
 8002f22:	2101      	movs	r1, #1
 8002f24:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002f26:	250f      	movs	r5, #15
 8002f28:	197c      	adds	r4, r7, r5
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	0018      	movs	r0, r3
 8002f2e:	f000 face 	bl	80034ce <ADC_ConversionStop>
 8002f32:	0003      	movs	r3, r0
 8002f34:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002f36:	197b      	adds	r3, r7, r5
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d112      	bne.n	8002f64 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002f3e:	197c      	adds	r4, r7, r5
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	0018      	movs	r0, r3
 8002f44:	f000 fa52 	bl	80033ec <ADC_Disable>
 8002f48:	0003      	movs	r3, r0
 8002f4a:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002f4c:	197b      	adds	r3, r7, r5
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d107      	bne.n	8002f64 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f58:	4a08      	ldr	r2, [pc, #32]	@ (8002f7c <HAL_ADC_Stop+0x7c>)
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2234      	movs	r2, #52	@ 0x34
 8002f68:	2100      	movs	r1, #0
 8002f6a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002f6c:	230f      	movs	r3, #15
 8002f6e:	18fb      	adds	r3, r7, r3
 8002f70:	781b      	ldrb	r3, [r3, #0]
}
 8002f72:	0018      	movs	r0, r3
 8002f74:	46bd      	mov	sp, r7
 8002f76:	b004      	add	sp, #16
 8002f78:	bdb0      	pop	{r4, r5, r7, pc}
 8002f7a:	46c0      	nop			@ (mov r8, r8)
 8002f7c:	fffffefe 	.word	0xfffffefe

08002f80 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	2b08      	cmp	r3, #8
 8002f90:	d102      	bne.n	8002f98 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8002f92:	2308      	movs	r3, #8
 8002f94:	60fb      	str	r3, [r7, #12]
 8002f96:	e014      	b.n	8002fc2 <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d10b      	bne.n	8002fbe <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002faa:	2220      	movs	r2, #32
 8002fac:	431a      	orrs	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	639a      	str	r2, [r3, #56]	@ 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2234      	movs	r2, #52	@ 0x34
 8002fb6:	2100      	movs	r1, #0
 8002fb8:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e071      	b.n	80030a2 <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002fbe:	230c      	movs	r3, #12
 8002fc0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002fc2:	f7ff fddb 	bl	8002b7c <HAL_GetTick>
 8002fc6:	0003      	movs	r3, r0
 8002fc8:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002fca:	e01f      	b.n	800300c <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	3301      	adds	r3, #1
 8002fd0:	d01c      	beq.n	800300c <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d007      	beq.n	8002fe8 <HAL_ADC_PollForConversion+0x68>
 8002fd8:	f7ff fdd0 	bl	8002b7c <HAL_GetTick>
 8002fdc:	0002      	movs	r2, r0
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d211      	bcs.n	800300c <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	d10b      	bne.n	800300c <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ff8:	2204      	movs	r2, #4
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2234      	movs	r2, #52	@ 0x34
 8003004:	2100      	movs	r1, #0
 8003006:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e04a      	b.n	80030a2 <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	4013      	ands	r3, r2
 8003016:	d0d9      	beq.n	8002fcc <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800301c:	2280      	movs	r2, #128	@ 0x80
 800301e:	0092      	lsls	r2, r2, #2
 8003020:	431a      	orrs	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68da      	ldr	r2, [r3, #12]
 800302c:	23c0      	movs	r3, #192	@ 0xc0
 800302e:	011b      	lsls	r3, r3, #4
 8003030:	4013      	ands	r3, r2
 8003032:	d12d      	bne.n	8003090 <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003038:	2b00      	cmp	r3, #0
 800303a:	d129      	bne.n	8003090 <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2208      	movs	r2, #8
 8003044:	4013      	ands	r3, r2
 8003046:	2b08      	cmp	r3, #8
 8003048:	d122      	bne.n	8003090 <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	2204      	movs	r2, #4
 8003052:	4013      	ands	r3, r2
 8003054:	d110      	bne.n	8003078 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	685a      	ldr	r2, [r3, #4]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	210c      	movs	r1, #12
 8003062:	438a      	bics	r2, r1
 8003064:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800306a:	4a10      	ldr	r2, [pc, #64]	@ (80030ac <HAL_ADC_PollForConversion+0x12c>)
 800306c:	4013      	ands	r3, r2
 800306e:	2201      	movs	r2, #1
 8003070:	431a      	orrs	r2, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	639a      	str	r2, [r3, #56]	@ 0x38
 8003076:	e00b      	b.n	8003090 <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800307c:	2220      	movs	r2, #32
 800307e:	431a      	orrs	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003088:	2201      	movs	r2, #1
 800308a:	431a      	orrs	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	7e1b      	ldrb	r3, [r3, #24]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d103      	bne.n	80030a0 <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	220c      	movs	r2, #12
 800309e:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	0018      	movs	r0, r3
 80030a4:	46bd      	mov	sp, r7
 80030a6:	b004      	add	sp, #16
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	46c0      	nop			@ (mov r8, r8)
 80030ac:	fffffefe 	.word	0xfffffefe

080030b0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80030be:	0018      	movs	r0, r3
 80030c0:	46bd      	mov	sp, r7
 80030c2:	b002      	add	sp, #8
 80030c4:	bd80      	pop	{r7, pc}
	...

080030c8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030d2:	230f      	movs	r3, #15
 80030d4:	18fb      	adds	r3, r7, r3
 80030d6:	2200      	movs	r2, #0
 80030d8:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80030da:	2300      	movs	r3, #0
 80030dc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030e2:	2380      	movs	r3, #128	@ 0x80
 80030e4:	055b      	lsls	r3, r3, #21
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d011      	beq.n	800310e <HAL_ADC_ConfigChannel+0x46>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d00d      	beq.n	800310e <HAL_ADC_ConfigChannel+0x46>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d009      	beq.n	800310e <HAL_ADC_ConfigChannel+0x46>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030fe:	2b03      	cmp	r3, #3
 8003100:	d005      	beq.n	800310e <HAL_ADC_ConfigChannel+0x46>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003106:	2b04      	cmp	r3, #4
 8003108:	d001      	beq.n	800310e <HAL_ADC_ConfigChannel+0x46>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2234      	movs	r2, #52	@ 0x34
 8003112:	5c9b      	ldrb	r3, [r3, r2]
 8003114:	2b01      	cmp	r3, #1
 8003116:	d101      	bne.n	800311c <HAL_ADC_ConfigChannel+0x54>
 8003118:	2302      	movs	r3, #2
 800311a:	e0d0      	b.n	80032be <HAL_ADC_ConfigChannel+0x1f6>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2234      	movs	r2, #52	@ 0x34
 8003120:	2101      	movs	r1, #1
 8003122:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	2204      	movs	r2, #4
 800312c:	4013      	ands	r3, r2
 800312e:	d000      	beq.n	8003132 <HAL_ADC_ConfigChannel+0x6a>
 8003130:	e0b4      	b.n	800329c <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	4a64      	ldr	r2, [pc, #400]	@ (80032c8 <HAL_ADC_ConfigChannel+0x200>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d100      	bne.n	800313e <HAL_ADC_ConfigChannel+0x76>
 800313c:	e082      	b.n	8003244 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2201      	movs	r2, #1
 800314a:	409a      	lsls	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	430a      	orrs	r2, r1
 8003152:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003158:	2380      	movs	r3, #128	@ 0x80
 800315a:	055b      	lsls	r3, r3, #21
 800315c:	429a      	cmp	r2, r3
 800315e:	d037      	beq.n	80031d0 <HAL_ADC_ConfigChannel+0x108>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003164:	2b01      	cmp	r3, #1
 8003166:	d033      	beq.n	80031d0 <HAL_ADC_ConfigChannel+0x108>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800316c:	2b02      	cmp	r3, #2
 800316e:	d02f      	beq.n	80031d0 <HAL_ADC_ConfigChannel+0x108>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003174:	2b03      	cmp	r3, #3
 8003176:	d02b      	beq.n	80031d0 <HAL_ADC_ConfigChannel+0x108>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800317c:	2b04      	cmp	r3, #4
 800317e:	d027      	beq.n	80031d0 <HAL_ADC_ConfigChannel+0x108>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003184:	2b05      	cmp	r3, #5
 8003186:	d023      	beq.n	80031d0 <HAL_ADC_ConfigChannel+0x108>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800318c:	2b06      	cmp	r3, #6
 800318e:	d01f      	beq.n	80031d0 <HAL_ADC_ConfigChannel+0x108>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003194:	2b07      	cmp	r3, #7
 8003196:	d01b      	beq.n	80031d0 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	689a      	ldr	r2, [r3, #8]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	2107      	movs	r1, #7
 80031a4:	400b      	ands	r3, r1
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d012      	beq.n	80031d0 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	695a      	ldr	r2, [r3, #20]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2107      	movs	r1, #7
 80031b6:	438a      	bics	r2, r1
 80031b8:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	6959      	ldr	r1, [r3, #20]
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	2207      	movs	r2, #7
 80031c6:	401a      	ands	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	430a      	orrs	r2, r1
 80031ce:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2b10      	cmp	r3, #16
 80031d6:	d007      	beq.n	80031e8 <HAL_ADC_ConfigChannel+0x120>
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2b11      	cmp	r3, #17
 80031de:	d003      	beq.n	80031e8 <HAL_ADC_ConfigChannel+0x120>
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2b12      	cmp	r3, #18
 80031e6:	d163      	bne.n	80032b0 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80031e8:	4b38      	ldr	r3, [pc, #224]	@ (80032cc <HAL_ADC_ConfigChannel+0x204>)
 80031ea:	6819      	ldr	r1, [r3, #0]
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2b10      	cmp	r3, #16
 80031f2:	d009      	beq.n	8003208 <HAL_ADC_ConfigChannel+0x140>
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2b11      	cmp	r3, #17
 80031fa:	d102      	bne.n	8003202 <HAL_ADC_ConfigChannel+0x13a>
 80031fc:	2380      	movs	r3, #128	@ 0x80
 80031fe:	03db      	lsls	r3, r3, #15
 8003200:	e004      	b.n	800320c <HAL_ADC_ConfigChannel+0x144>
 8003202:	2380      	movs	r3, #128	@ 0x80
 8003204:	045b      	lsls	r3, r3, #17
 8003206:	e001      	b.n	800320c <HAL_ADC_ConfigChannel+0x144>
 8003208:	2380      	movs	r3, #128	@ 0x80
 800320a:	041b      	lsls	r3, r3, #16
 800320c:	4a2f      	ldr	r2, [pc, #188]	@ (80032cc <HAL_ADC_ConfigChannel+0x204>)
 800320e:	430b      	orrs	r3, r1
 8003210:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2b10      	cmp	r3, #16
 8003218:	d14a      	bne.n	80032b0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800321a:	4b2d      	ldr	r3, [pc, #180]	@ (80032d0 <HAL_ADC_ConfigChannel+0x208>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	492d      	ldr	r1, [pc, #180]	@ (80032d4 <HAL_ADC_ConfigChannel+0x20c>)
 8003220:	0018      	movs	r0, r3
 8003222:	f7fc ff8d 	bl	8000140 <__udivsi3>
 8003226:	0003      	movs	r3, r0
 8003228:	001a      	movs	r2, r3
 800322a:	0013      	movs	r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	189b      	adds	r3, r3, r2
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003234:	e002      	b.n	800323c <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	3b01      	subs	r3, #1
 800323a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1f9      	bne.n	8003236 <HAL_ADC_ConfigChannel+0x16e>
 8003242:	e035      	b.n	80032b0 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2101      	movs	r1, #1
 8003250:	4099      	lsls	r1, r3
 8003252:	000b      	movs	r3, r1
 8003254:	43d9      	mvns	r1, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	400a      	ands	r2, r1
 800325c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2b10      	cmp	r3, #16
 8003264:	d007      	beq.n	8003276 <HAL_ADC_ConfigChannel+0x1ae>
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2b11      	cmp	r3, #17
 800326c:	d003      	beq.n	8003276 <HAL_ADC_ConfigChannel+0x1ae>
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2b12      	cmp	r3, #18
 8003274:	d11c      	bne.n	80032b0 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003276:	4b15      	ldr	r3, [pc, #84]	@ (80032cc <HAL_ADC_ConfigChannel+0x204>)
 8003278:	6819      	ldr	r1, [r3, #0]
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2b10      	cmp	r3, #16
 8003280:	d007      	beq.n	8003292 <HAL_ADC_ConfigChannel+0x1ca>
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2b11      	cmp	r3, #17
 8003288:	d101      	bne.n	800328e <HAL_ADC_ConfigChannel+0x1c6>
 800328a:	4b13      	ldr	r3, [pc, #76]	@ (80032d8 <HAL_ADC_ConfigChannel+0x210>)
 800328c:	e002      	b.n	8003294 <HAL_ADC_ConfigChannel+0x1cc>
 800328e:	4b13      	ldr	r3, [pc, #76]	@ (80032dc <HAL_ADC_ConfigChannel+0x214>)
 8003290:	e000      	b.n	8003294 <HAL_ADC_ConfigChannel+0x1cc>
 8003292:	4b13      	ldr	r3, [pc, #76]	@ (80032e0 <HAL_ADC_ConfigChannel+0x218>)
 8003294:	4a0d      	ldr	r2, [pc, #52]	@ (80032cc <HAL_ADC_ConfigChannel+0x204>)
 8003296:	400b      	ands	r3, r1
 8003298:	6013      	str	r3, [r2, #0]
 800329a:	e009      	b.n	80032b0 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032a0:	2220      	movs	r2, #32
 80032a2:	431a      	orrs	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 80032a8:	230f      	movs	r3, #15
 80032aa:	18fb      	adds	r3, r7, r3
 80032ac:	2201      	movs	r2, #1
 80032ae:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2234      	movs	r2, #52	@ 0x34
 80032b4:	2100      	movs	r1, #0
 80032b6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80032b8:	230f      	movs	r3, #15
 80032ba:	18fb      	adds	r3, r7, r3
 80032bc:	781b      	ldrb	r3, [r3, #0]
}
 80032be:	0018      	movs	r0, r3
 80032c0:	46bd      	mov	sp, r7
 80032c2:	b004      	add	sp, #16
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	46c0      	nop			@ (mov r8, r8)
 80032c8:	00001001 	.word	0x00001001
 80032cc:	40012708 	.word	0x40012708
 80032d0:	20000000 	.word	0x20000000
 80032d4:	000f4240 	.word	0x000f4240
 80032d8:	ffbfffff 	.word	0xffbfffff
 80032dc:	feffffff 	.word	0xfeffffff
 80032e0:	ff7fffff 	.word	0xff7fffff

080032e4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032ec:	2300      	movs	r3, #0
 80032ee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80032f0:	2300      	movs	r3, #0
 80032f2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	2203      	movs	r2, #3
 80032fc:	4013      	ands	r3, r2
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d112      	bne.n	8003328 <ADC_Enable+0x44>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2201      	movs	r2, #1
 800330a:	4013      	ands	r3, r2
 800330c:	2b01      	cmp	r3, #1
 800330e:	d009      	beq.n	8003324 <ADC_Enable+0x40>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68da      	ldr	r2, [r3, #12]
 8003316:	2380      	movs	r3, #128	@ 0x80
 8003318:	021b      	lsls	r3, r3, #8
 800331a:	401a      	ands	r2, r3
 800331c:	2380      	movs	r3, #128	@ 0x80
 800331e:	021b      	lsls	r3, r3, #8
 8003320:	429a      	cmp	r2, r3
 8003322:	d101      	bne.n	8003328 <ADC_Enable+0x44>
 8003324:	2301      	movs	r3, #1
 8003326:	e000      	b.n	800332a <ADC_Enable+0x46>
 8003328:	2300      	movs	r3, #0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d152      	bne.n	80033d4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	4a2a      	ldr	r2, [pc, #168]	@ (80033e0 <ADC_Enable+0xfc>)
 8003336:	4013      	ands	r3, r2
 8003338:	d00d      	beq.n	8003356 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800333e:	2210      	movs	r2, #16
 8003340:	431a      	orrs	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800334a:	2201      	movs	r2, #1
 800334c:	431a      	orrs	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e03f      	b.n	80033d6 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2101      	movs	r1, #1
 8003362:	430a      	orrs	r2, r1
 8003364:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003366:	4b1f      	ldr	r3, [pc, #124]	@ (80033e4 <ADC_Enable+0x100>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	491f      	ldr	r1, [pc, #124]	@ (80033e8 <ADC_Enable+0x104>)
 800336c:	0018      	movs	r0, r3
 800336e:	f7fc fee7 	bl	8000140 <__udivsi3>
 8003372:	0003      	movs	r3, r0
 8003374:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003376:	e002      	b.n	800337e <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	3b01      	subs	r3, #1
 800337c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d1f9      	bne.n	8003378 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003384:	f7ff fbfa 	bl	8002b7c <HAL_GetTick>
 8003388:	0003      	movs	r3, r0
 800338a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800338c:	e01b      	b.n	80033c6 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800338e:	f7ff fbf5 	bl	8002b7c <HAL_GetTick>
 8003392:	0002      	movs	r2, r0
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d914      	bls.n	80033c6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2201      	movs	r2, #1
 80033a4:	4013      	ands	r3, r2
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d00d      	beq.n	80033c6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ae:	2210      	movs	r2, #16
 80033b0:	431a      	orrs	r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033ba:	2201      	movs	r2, #1
 80033bc:	431a      	orrs	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e007      	b.n	80033d6 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2201      	movs	r2, #1
 80033ce:	4013      	ands	r3, r2
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d1dc      	bne.n	800338e <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	0018      	movs	r0, r3
 80033d8:	46bd      	mov	sp, r7
 80033da:	b004      	add	sp, #16
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	46c0      	nop			@ (mov r8, r8)
 80033e0:	80000017 	.word	0x80000017
 80033e4:	20000000 	.word	0x20000000
 80033e8:	000f4240 	.word	0x000f4240

080033ec <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033f4:	2300      	movs	r3, #0
 80033f6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	2203      	movs	r2, #3
 8003400:	4013      	ands	r3, r2
 8003402:	2b01      	cmp	r3, #1
 8003404:	d112      	bne.n	800342c <ADC_Disable+0x40>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2201      	movs	r2, #1
 800340e:	4013      	ands	r3, r2
 8003410:	2b01      	cmp	r3, #1
 8003412:	d009      	beq.n	8003428 <ADC_Disable+0x3c>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68da      	ldr	r2, [r3, #12]
 800341a:	2380      	movs	r3, #128	@ 0x80
 800341c:	021b      	lsls	r3, r3, #8
 800341e:	401a      	ands	r2, r3
 8003420:	2380      	movs	r3, #128	@ 0x80
 8003422:	021b      	lsls	r3, r3, #8
 8003424:	429a      	cmp	r2, r3
 8003426:	d101      	bne.n	800342c <ADC_Disable+0x40>
 8003428:	2301      	movs	r3, #1
 800342a:	e000      	b.n	800342e <ADC_Disable+0x42>
 800342c:	2300      	movs	r3, #0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d048      	beq.n	80034c4 <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	2205      	movs	r2, #5
 800343a:	4013      	ands	r3, r2
 800343c:	2b01      	cmp	r3, #1
 800343e:	d110      	bne.n	8003462 <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689a      	ldr	r2, [r3, #8]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2102      	movs	r1, #2
 800344c:	430a      	orrs	r2, r1
 800344e:	609a      	str	r2, [r3, #8]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2203      	movs	r2, #3
 8003456:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003458:	f7ff fb90 	bl	8002b7c <HAL_GetTick>
 800345c:	0003      	movs	r3, r0
 800345e:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003460:	e029      	b.n	80034b6 <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003466:	2210      	movs	r2, #16
 8003468:	431a      	orrs	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	639a      	str	r2, [r3, #56]	@ 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003472:	2201      	movs	r2, #1
 8003474:	431a      	orrs	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	63da      	str	r2, [r3, #60]	@ 0x3c
      return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e023      	b.n	80034c6 <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800347e:	f7ff fb7d 	bl	8002b7c <HAL_GetTick>
 8003482:	0002      	movs	r2, r0
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d914      	bls.n	80034b6 <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	2201      	movs	r2, #1
 8003494:	4013      	ands	r3, r2
 8003496:	2b01      	cmp	r3, #1
 8003498:	d10d      	bne.n	80034b6 <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800349e:	2210      	movs	r2, #16
 80034a0:	431a      	orrs	r2, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034aa:	2201      	movs	r2, #1
 80034ac:	431a      	orrs	r2, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e007      	b.n	80034c6 <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	2201      	movs	r2, #1
 80034be:	4013      	ands	r3, r2
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d0dc      	beq.n	800347e <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	0018      	movs	r0, r3
 80034c8:	46bd      	mov	sp, r7
 80034ca:	b004      	add	sp, #16
 80034cc:	bd80      	pop	{r7, pc}

080034ce <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b084      	sub	sp, #16
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034d6:	2300      	movs	r3, #0
 80034d8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	2204      	movs	r2, #4
 80034e2:	4013      	ands	r3, r2
 80034e4:	d03a      	beq.n	800355c <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	2204      	movs	r2, #4
 80034ee:	4013      	ands	r3, r2
 80034f0:	2b04      	cmp	r3, #4
 80034f2:	d10d      	bne.n	8003510 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	2202      	movs	r2, #2
 80034fc:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80034fe:	d107      	bne.n	8003510 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	689a      	ldr	r2, [r3, #8]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2110      	movs	r1, #16
 800350c:	430a      	orrs	r2, r1
 800350e:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003510:	f7ff fb34 	bl	8002b7c <HAL_GetTick>
 8003514:	0003      	movs	r3, r0
 8003516:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003518:	e01a      	b.n	8003550 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800351a:	f7ff fb2f 	bl	8002b7c <HAL_GetTick>
 800351e:	0002      	movs	r2, r0
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b02      	cmp	r3, #2
 8003526:	d913      	bls.n	8003550 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	2204      	movs	r2, #4
 8003530:	4013      	ands	r3, r2
 8003532:	d00d      	beq.n	8003550 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003538:	2210      	movs	r2, #16
 800353a:	431a      	orrs	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003544:	2201      	movs	r2, #1
 8003546:	431a      	orrs	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e006      	b.n	800355e <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	2204      	movs	r2, #4
 8003558:	4013      	ands	r3, r2
 800355a:	d1de      	bne.n	800351a <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	0018      	movs	r0, r3
 8003560:	46bd      	mov	sp, r7
 8003562:	b004      	add	sp, #16
 8003564:	bd80      	pop	{r7, pc}
	...

08003568 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003568:	b590      	push	{r4, r7, lr}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	0002      	movs	r2, r0
 8003570:	6039      	str	r1, [r7, #0]
 8003572:	1dfb      	adds	r3, r7, #7
 8003574:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003576:	1dfb      	adds	r3, r7, #7
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	2b7f      	cmp	r3, #127	@ 0x7f
 800357c:	d828      	bhi.n	80035d0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800357e:	4a2f      	ldr	r2, [pc, #188]	@ (800363c <__NVIC_SetPriority+0xd4>)
 8003580:	1dfb      	adds	r3, r7, #7
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	b25b      	sxtb	r3, r3
 8003586:	089b      	lsrs	r3, r3, #2
 8003588:	33c0      	adds	r3, #192	@ 0xc0
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	589b      	ldr	r3, [r3, r2]
 800358e:	1dfa      	adds	r2, r7, #7
 8003590:	7812      	ldrb	r2, [r2, #0]
 8003592:	0011      	movs	r1, r2
 8003594:	2203      	movs	r2, #3
 8003596:	400a      	ands	r2, r1
 8003598:	00d2      	lsls	r2, r2, #3
 800359a:	21ff      	movs	r1, #255	@ 0xff
 800359c:	4091      	lsls	r1, r2
 800359e:	000a      	movs	r2, r1
 80035a0:	43d2      	mvns	r2, r2
 80035a2:	401a      	ands	r2, r3
 80035a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	019b      	lsls	r3, r3, #6
 80035aa:	22ff      	movs	r2, #255	@ 0xff
 80035ac:	401a      	ands	r2, r3
 80035ae:	1dfb      	adds	r3, r7, #7
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	0018      	movs	r0, r3
 80035b4:	2303      	movs	r3, #3
 80035b6:	4003      	ands	r3, r0
 80035b8:	00db      	lsls	r3, r3, #3
 80035ba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80035bc:	481f      	ldr	r0, [pc, #124]	@ (800363c <__NVIC_SetPriority+0xd4>)
 80035be:	1dfb      	adds	r3, r7, #7
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	b25b      	sxtb	r3, r3
 80035c4:	089b      	lsrs	r3, r3, #2
 80035c6:	430a      	orrs	r2, r1
 80035c8:	33c0      	adds	r3, #192	@ 0xc0
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80035ce:	e031      	b.n	8003634 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80035d0:	4a1b      	ldr	r2, [pc, #108]	@ (8003640 <__NVIC_SetPriority+0xd8>)
 80035d2:	1dfb      	adds	r3, r7, #7
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	0019      	movs	r1, r3
 80035d8:	230f      	movs	r3, #15
 80035da:	400b      	ands	r3, r1
 80035dc:	3b08      	subs	r3, #8
 80035de:	089b      	lsrs	r3, r3, #2
 80035e0:	3306      	adds	r3, #6
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	18d3      	adds	r3, r2, r3
 80035e6:	3304      	adds	r3, #4
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	1dfa      	adds	r2, r7, #7
 80035ec:	7812      	ldrb	r2, [r2, #0]
 80035ee:	0011      	movs	r1, r2
 80035f0:	2203      	movs	r2, #3
 80035f2:	400a      	ands	r2, r1
 80035f4:	00d2      	lsls	r2, r2, #3
 80035f6:	21ff      	movs	r1, #255	@ 0xff
 80035f8:	4091      	lsls	r1, r2
 80035fa:	000a      	movs	r2, r1
 80035fc:	43d2      	mvns	r2, r2
 80035fe:	401a      	ands	r2, r3
 8003600:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	019b      	lsls	r3, r3, #6
 8003606:	22ff      	movs	r2, #255	@ 0xff
 8003608:	401a      	ands	r2, r3
 800360a:	1dfb      	adds	r3, r7, #7
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	0018      	movs	r0, r3
 8003610:	2303      	movs	r3, #3
 8003612:	4003      	ands	r3, r0
 8003614:	00db      	lsls	r3, r3, #3
 8003616:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003618:	4809      	ldr	r0, [pc, #36]	@ (8003640 <__NVIC_SetPriority+0xd8>)
 800361a:	1dfb      	adds	r3, r7, #7
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	001c      	movs	r4, r3
 8003620:	230f      	movs	r3, #15
 8003622:	4023      	ands	r3, r4
 8003624:	3b08      	subs	r3, #8
 8003626:	089b      	lsrs	r3, r3, #2
 8003628:	430a      	orrs	r2, r1
 800362a:	3306      	adds	r3, #6
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	18c3      	adds	r3, r0, r3
 8003630:	3304      	adds	r3, #4
 8003632:	601a      	str	r2, [r3, #0]
}
 8003634:	46c0      	nop			@ (mov r8, r8)
 8003636:	46bd      	mov	sp, r7
 8003638:	b003      	add	sp, #12
 800363a:	bd90      	pop	{r4, r7, pc}
 800363c:	e000e100 	.word	0xe000e100
 8003640:	e000ed00 	.word	0xe000ed00

08003644 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	1e5a      	subs	r2, r3, #1
 8003650:	2380      	movs	r3, #128	@ 0x80
 8003652:	045b      	lsls	r3, r3, #17
 8003654:	429a      	cmp	r2, r3
 8003656:	d301      	bcc.n	800365c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003658:	2301      	movs	r3, #1
 800365a:	e010      	b.n	800367e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800365c:	4b0a      	ldr	r3, [pc, #40]	@ (8003688 <SysTick_Config+0x44>)
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	3a01      	subs	r2, #1
 8003662:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003664:	2301      	movs	r3, #1
 8003666:	425b      	negs	r3, r3
 8003668:	2103      	movs	r1, #3
 800366a:	0018      	movs	r0, r3
 800366c:	f7ff ff7c 	bl	8003568 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003670:	4b05      	ldr	r3, [pc, #20]	@ (8003688 <SysTick_Config+0x44>)
 8003672:	2200      	movs	r2, #0
 8003674:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003676:	4b04      	ldr	r3, [pc, #16]	@ (8003688 <SysTick_Config+0x44>)
 8003678:	2207      	movs	r2, #7
 800367a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800367c:	2300      	movs	r3, #0
}
 800367e:	0018      	movs	r0, r3
 8003680:	46bd      	mov	sp, r7
 8003682:	b002      	add	sp, #8
 8003684:	bd80      	pop	{r7, pc}
 8003686:	46c0      	nop			@ (mov r8, r8)
 8003688:	e000e010 	.word	0xe000e010

0800368c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	60b9      	str	r1, [r7, #8]
 8003694:	607a      	str	r2, [r7, #4]
 8003696:	210f      	movs	r1, #15
 8003698:	187b      	adds	r3, r7, r1
 800369a:	1c02      	adds	r2, r0, #0
 800369c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800369e:	68ba      	ldr	r2, [r7, #8]
 80036a0:	187b      	adds	r3, r7, r1
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	b25b      	sxtb	r3, r3
 80036a6:	0011      	movs	r1, r2
 80036a8:	0018      	movs	r0, r3
 80036aa:	f7ff ff5d 	bl	8003568 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80036ae:	46c0      	nop			@ (mov r8, r8)
 80036b0:	46bd      	mov	sp, r7
 80036b2:	b004      	add	sp, #16
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b082      	sub	sp, #8
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	0018      	movs	r0, r3
 80036c2:	f7ff ffbf 	bl	8003644 <SysTick_Config>
 80036c6:	0003      	movs	r3, r0
}
 80036c8:	0018      	movs	r0, r3
 80036ca:	46bd      	mov	sp, r7
 80036cc:	b002      	add	sp, #8
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036da:	2300      	movs	r3, #0
 80036dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036de:	e14f      	b.n	8003980 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2101      	movs	r1, #1
 80036e6:	697a      	ldr	r2, [r7, #20]
 80036e8:	4091      	lsls	r1, r2
 80036ea:	000a      	movs	r2, r1
 80036ec:	4013      	ands	r3, r2
 80036ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d100      	bne.n	80036f8 <HAL_GPIO_Init+0x28>
 80036f6:	e140      	b.n	800397a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	2203      	movs	r2, #3
 80036fe:	4013      	ands	r3, r2
 8003700:	2b01      	cmp	r3, #1
 8003702:	d005      	beq.n	8003710 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	2203      	movs	r2, #3
 800370a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800370c:	2b02      	cmp	r3, #2
 800370e:	d130      	bne.n	8003772 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	005b      	lsls	r3, r3, #1
 800371a:	2203      	movs	r2, #3
 800371c:	409a      	lsls	r2, r3
 800371e:	0013      	movs	r3, r2
 8003720:	43da      	mvns	r2, r3
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	4013      	ands	r3, r2
 8003726:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	68da      	ldr	r2, [r3, #12]
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	409a      	lsls	r2, r3
 8003732:	0013      	movs	r3, r2
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	4313      	orrs	r3, r2
 8003738:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003746:	2201      	movs	r2, #1
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	409a      	lsls	r2, r3
 800374c:	0013      	movs	r3, r2
 800374e:	43da      	mvns	r2, r3
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	4013      	ands	r3, r2
 8003754:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	091b      	lsrs	r3, r3, #4
 800375c:	2201      	movs	r2, #1
 800375e:	401a      	ands	r2, r3
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	409a      	lsls	r2, r3
 8003764:	0013      	movs	r3, r2
 8003766:	693a      	ldr	r2, [r7, #16]
 8003768:	4313      	orrs	r3, r2
 800376a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	2203      	movs	r2, #3
 8003778:	4013      	ands	r3, r2
 800377a:	2b03      	cmp	r3, #3
 800377c:	d017      	beq.n	80037ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	005b      	lsls	r3, r3, #1
 8003788:	2203      	movs	r2, #3
 800378a:	409a      	lsls	r2, r3
 800378c:	0013      	movs	r3, r2
 800378e:	43da      	mvns	r2, r3
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	4013      	ands	r3, r2
 8003794:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	689a      	ldr	r2, [r3, #8]
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	409a      	lsls	r2, r3
 80037a0:	0013      	movs	r3, r2
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	2203      	movs	r2, #3
 80037b4:	4013      	ands	r3, r2
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d123      	bne.n	8003802 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	08da      	lsrs	r2, r3, #3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	3208      	adds	r2, #8
 80037c2:	0092      	lsls	r2, r2, #2
 80037c4:	58d3      	ldr	r3, [r2, r3]
 80037c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	2207      	movs	r2, #7
 80037cc:	4013      	ands	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	220f      	movs	r2, #15
 80037d2:	409a      	lsls	r2, r3
 80037d4:	0013      	movs	r3, r2
 80037d6:	43da      	mvns	r2, r3
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	4013      	ands	r3, r2
 80037dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	691a      	ldr	r2, [r3, #16]
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	2107      	movs	r1, #7
 80037e6:	400b      	ands	r3, r1
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	409a      	lsls	r2, r3
 80037ec:	0013      	movs	r3, r2
 80037ee:	693a      	ldr	r2, [r7, #16]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	08da      	lsrs	r2, r3, #3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	3208      	adds	r2, #8
 80037fc:	0092      	lsls	r2, r2, #2
 80037fe:	6939      	ldr	r1, [r7, #16]
 8003800:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	005b      	lsls	r3, r3, #1
 800380c:	2203      	movs	r2, #3
 800380e:	409a      	lsls	r2, r3
 8003810:	0013      	movs	r3, r2
 8003812:	43da      	mvns	r2, r3
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	4013      	ands	r3, r2
 8003818:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	2203      	movs	r2, #3
 8003820:	401a      	ands	r2, r3
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	005b      	lsls	r3, r3, #1
 8003826:	409a      	lsls	r2, r3
 8003828:	0013      	movs	r3, r2
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	4313      	orrs	r3, r2
 800382e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	685a      	ldr	r2, [r3, #4]
 800383a:	23c0      	movs	r3, #192	@ 0xc0
 800383c:	029b      	lsls	r3, r3, #10
 800383e:	4013      	ands	r3, r2
 8003840:	d100      	bne.n	8003844 <HAL_GPIO_Init+0x174>
 8003842:	e09a      	b.n	800397a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003844:	4b54      	ldr	r3, [pc, #336]	@ (8003998 <HAL_GPIO_Init+0x2c8>)
 8003846:	699a      	ldr	r2, [r3, #24]
 8003848:	4b53      	ldr	r3, [pc, #332]	@ (8003998 <HAL_GPIO_Init+0x2c8>)
 800384a:	2101      	movs	r1, #1
 800384c:	430a      	orrs	r2, r1
 800384e:	619a      	str	r2, [r3, #24]
 8003850:	4b51      	ldr	r3, [pc, #324]	@ (8003998 <HAL_GPIO_Init+0x2c8>)
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	2201      	movs	r2, #1
 8003856:	4013      	ands	r3, r2
 8003858:	60bb      	str	r3, [r7, #8]
 800385a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800385c:	4a4f      	ldr	r2, [pc, #316]	@ (800399c <HAL_GPIO_Init+0x2cc>)
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	089b      	lsrs	r3, r3, #2
 8003862:	3302      	adds	r3, #2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	589b      	ldr	r3, [r3, r2]
 8003868:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	2203      	movs	r2, #3
 800386e:	4013      	ands	r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	220f      	movs	r2, #15
 8003874:	409a      	lsls	r2, r3
 8003876:	0013      	movs	r3, r2
 8003878:	43da      	mvns	r2, r3
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	4013      	ands	r3, r2
 800387e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	2390      	movs	r3, #144	@ 0x90
 8003884:	05db      	lsls	r3, r3, #23
 8003886:	429a      	cmp	r2, r3
 8003888:	d013      	beq.n	80038b2 <HAL_GPIO_Init+0x1e2>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a44      	ldr	r2, [pc, #272]	@ (80039a0 <HAL_GPIO_Init+0x2d0>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d00d      	beq.n	80038ae <HAL_GPIO_Init+0x1de>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a43      	ldr	r2, [pc, #268]	@ (80039a4 <HAL_GPIO_Init+0x2d4>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d007      	beq.n	80038aa <HAL_GPIO_Init+0x1da>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a42      	ldr	r2, [pc, #264]	@ (80039a8 <HAL_GPIO_Init+0x2d8>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d101      	bne.n	80038a6 <HAL_GPIO_Init+0x1d6>
 80038a2:	2303      	movs	r3, #3
 80038a4:	e006      	b.n	80038b4 <HAL_GPIO_Init+0x1e4>
 80038a6:	2305      	movs	r3, #5
 80038a8:	e004      	b.n	80038b4 <HAL_GPIO_Init+0x1e4>
 80038aa:	2302      	movs	r3, #2
 80038ac:	e002      	b.n	80038b4 <HAL_GPIO_Init+0x1e4>
 80038ae:	2301      	movs	r3, #1
 80038b0:	e000      	b.n	80038b4 <HAL_GPIO_Init+0x1e4>
 80038b2:	2300      	movs	r3, #0
 80038b4:	697a      	ldr	r2, [r7, #20]
 80038b6:	2103      	movs	r1, #3
 80038b8:	400a      	ands	r2, r1
 80038ba:	0092      	lsls	r2, r2, #2
 80038bc:	4093      	lsls	r3, r2
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80038c4:	4935      	ldr	r1, [pc, #212]	@ (800399c <HAL_GPIO_Init+0x2cc>)
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	089b      	lsrs	r3, r3, #2
 80038ca:	3302      	adds	r3, #2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038d2:	4b36      	ldr	r3, [pc, #216]	@ (80039ac <HAL_GPIO_Init+0x2dc>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	43da      	mvns	r2, r3
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	4013      	ands	r3, r2
 80038e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	685a      	ldr	r2, [r3, #4]
 80038e6:	2380      	movs	r3, #128	@ 0x80
 80038e8:	035b      	lsls	r3, r3, #13
 80038ea:	4013      	ands	r3, r2
 80038ec:	d003      	beq.n	80038f6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80038f6:	4b2d      	ldr	r3, [pc, #180]	@ (80039ac <HAL_GPIO_Init+0x2dc>)
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80038fc:	4b2b      	ldr	r3, [pc, #172]	@ (80039ac <HAL_GPIO_Init+0x2dc>)
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	43da      	mvns	r2, r3
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	4013      	ands	r3, r2
 800390a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685a      	ldr	r2, [r3, #4]
 8003910:	2380      	movs	r3, #128	@ 0x80
 8003912:	039b      	lsls	r3, r3, #14
 8003914:	4013      	ands	r3, r2
 8003916:	d003      	beq.n	8003920 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	4313      	orrs	r3, r2
 800391e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003920:	4b22      	ldr	r3, [pc, #136]	@ (80039ac <HAL_GPIO_Init+0x2dc>)
 8003922:	693a      	ldr	r2, [r7, #16]
 8003924:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8003926:	4b21      	ldr	r3, [pc, #132]	@ (80039ac <HAL_GPIO_Init+0x2dc>)
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	43da      	mvns	r2, r3
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	4013      	ands	r3, r2
 8003934:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	685a      	ldr	r2, [r3, #4]
 800393a:	2380      	movs	r3, #128	@ 0x80
 800393c:	029b      	lsls	r3, r3, #10
 800393e:	4013      	ands	r3, r2
 8003940:	d003      	beq.n	800394a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	4313      	orrs	r3, r2
 8003948:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800394a:	4b18      	ldr	r3, [pc, #96]	@ (80039ac <HAL_GPIO_Init+0x2dc>)
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8003950:	4b16      	ldr	r3, [pc, #88]	@ (80039ac <HAL_GPIO_Init+0x2dc>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	43da      	mvns	r2, r3
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	4013      	ands	r3, r2
 800395e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685a      	ldr	r2, [r3, #4]
 8003964:	2380      	movs	r3, #128	@ 0x80
 8003966:	025b      	lsls	r3, r3, #9
 8003968:	4013      	ands	r3, r2
 800396a:	d003      	beq.n	8003974 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	4313      	orrs	r3, r2
 8003972:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003974:	4b0d      	ldr	r3, [pc, #52]	@ (80039ac <HAL_GPIO_Init+0x2dc>)
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	3301      	adds	r3, #1
 800397e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	40da      	lsrs	r2, r3
 8003988:	1e13      	subs	r3, r2, #0
 800398a:	d000      	beq.n	800398e <HAL_GPIO_Init+0x2be>
 800398c:	e6a8      	b.n	80036e0 <HAL_GPIO_Init+0x10>
  } 
}
 800398e:	46c0      	nop			@ (mov r8, r8)
 8003990:	46c0      	nop			@ (mov r8, r8)
 8003992:	46bd      	mov	sp, r7
 8003994:	b006      	add	sp, #24
 8003996:	bd80      	pop	{r7, pc}
 8003998:	40021000 	.word	0x40021000
 800399c:	40010000 	.word	0x40010000
 80039a0:	48000400 	.word	0x48000400
 80039a4:	48000800 	.word	0x48000800
 80039a8:	48000c00 	.word	0x48000c00
 80039ac:	40010400 	.word	0x40010400

080039b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	0008      	movs	r0, r1
 80039ba:	0011      	movs	r1, r2
 80039bc:	1cbb      	adds	r3, r7, #2
 80039be:	1c02      	adds	r2, r0, #0
 80039c0:	801a      	strh	r2, [r3, #0]
 80039c2:	1c7b      	adds	r3, r7, #1
 80039c4:	1c0a      	adds	r2, r1, #0
 80039c6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80039c8:	1c7b      	adds	r3, r7, #1
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d004      	beq.n	80039da <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80039d0:	1cbb      	adds	r3, r7, #2
 80039d2:	881a      	ldrh	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80039d8:	e003      	b.n	80039e2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80039da:	1cbb      	adds	r3, r7, #2
 80039dc:	881a      	ldrh	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80039e2:	46c0      	nop			@ (mov r8, r8)
 80039e4:	46bd      	mov	sp, r7
 80039e6:	b002      	add	sp, #8
 80039e8:	bd80      	pop	{r7, pc}
	...

080039ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b088      	sub	sp, #32
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e301      	b.n	8004002 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2201      	movs	r2, #1
 8003a04:	4013      	ands	r3, r2
 8003a06:	d100      	bne.n	8003a0a <HAL_RCC_OscConfig+0x1e>
 8003a08:	e08d      	b.n	8003b26 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003a0a:	4bc3      	ldr	r3, [pc, #780]	@ (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	220c      	movs	r2, #12
 8003a10:	4013      	ands	r3, r2
 8003a12:	2b04      	cmp	r3, #4
 8003a14:	d00e      	beq.n	8003a34 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003a16:	4bc0      	ldr	r3, [pc, #768]	@ (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	220c      	movs	r2, #12
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	2b08      	cmp	r3, #8
 8003a20:	d116      	bne.n	8003a50 <HAL_RCC_OscConfig+0x64>
 8003a22:	4bbd      	ldr	r3, [pc, #756]	@ (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003a24:	685a      	ldr	r2, [r3, #4]
 8003a26:	2380      	movs	r3, #128	@ 0x80
 8003a28:	025b      	lsls	r3, r3, #9
 8003a2a:	401a      	ands	r2, r3
 8003a2c:	2380      	movs	r3, #128	@ 0x80
 8003a2e:	025b      	lsls	r3, r3, #9
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d10d      	bne.n	8003a50 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a34:	4bb8      	ldr	r3, [pc, #736]	@ (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	2380      	movs	r3, #128	@ 0x80
 8003a3a:	029b      	lsls	r3, r3, #10
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	d100      	bne.n	8003a42 <HAL_RCC_OscConfig+0x56>
 8003a40:	e070      	b.n	8003b24 <HAL_RCC_OscConfig+0x138>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d000      	beq.n	8003a4c <HAL_RCC_OscConfig+0x60>
 8003a4a:	e06b      	b.n	8003b24 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e2d8      	b.n	8004002 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d107      	bne.n	8003a68 <HAL_RCC_OscConfig+0x7c>
 8003a58:	4baf      	ldr	r3, [pc, #700]	@ (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	4bae      	ldr	r3, [pc, #696]	@ (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003a5e:	2180      	movs	r1, #128	@ 0x80
 8003a60:	0249      	lsls	r1, r1, #9
 8003a62:	430a      	orrs	r2, r1
 8003a64:	601a      	str	r2, [r3, #0]
 8003a66:	e02f      	b.n	8003ac8 <HAL_RCC_OscConfig+0xdc>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d10c      	bne.n	8003a8a <HAL_RCC_OscConfig+0x9e>
 8003a70:	4ba9      	ldr	r3, [pc, #676]	@ (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	4ba8      	ldr	r3, [pc, #672]	@ (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003a76:	49a9      	ldr	r1, [pc, #676]	@ (8003d1c <HAL_RCC_OscConfig+0x330>)
 8003a78:	400a      	ands	r2, r1
 8003a7a:	601a      	str	r2, [r3, #0]
 8003a7c:	4ba6      	ldr	r3, [pc, #664]	@ (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	4ba5      	ldr	r3, [pc, #660]	@ (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003a82:	49a7      	ldr	r1, [pc, #668]	@ (8003d20 <HAL_RCC_OscConfig+0x334>)
 8003a84:	400a      	ands	r2, r1
 8003a86:	601a      	str	r2, [r3, #0]
 8003a88:	e01e      	b.n	8003ac8 <HAL_RCC_OscConfig+0xdc>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	2b05      	cmp	r3, #5
 8003a90:	d10e      	bne.n	8003ab0 <HAL_RCC_OscConfig+0xc4>
 8003a92:	4ba1      	ldr	r3, [pc, #644]	@ (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	4ba0      	ldr	r3, [pc, #640]	@ (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003a98:	2180      	movs	r1, #128	@ 0x80
 8003a9a:	02c9      	lsls	r1, r1, #11
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	601a      	str	r2, [r3, #0]
 8003aa0:	4b9d      	ldr	r3, [pc, #628]	@ (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	4b9c      	ldr	r3, [pc, #624]	@ (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003aa6:	2180      	movs	r1, #128	@ 0x80
 8003aa8:	0249      	lsls	r1, r1, #9
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	601a      	str	r2, [r3, #0]
 8003aae:	e00b      	b.n	8003ac8 <HAL_RCC_OscConfig+0xdc>
 8003ab0:	4b99      	ldr	r3, [pc, #612]	@ (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	4b98      	ldr	r3, [pc, #608]	@ (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003ab6:	4999      	ldr	r1, [pc, #612]	@ (8003d1c <HAL_RCC_OscConfig+0x330>)
 8003ab8:	400a      	ands	r2, r1
 8003aba:	601a      	str	r2, [r3, #0]
 8003abc:	4b96      	ldr	r3, [pc, #600]	@ (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	4b95      	ldr	r3, [pc, #596]	@ (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003ac2:	4997      	ldr	r1, [pc, #604]	@ (8003d20 <HAL_RCC_OscConfig+0x334>)
 8003ac4:	400a      	ands	r2, r1
 8003ac6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d014      	beq.n	8003afa <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad0:	f7ff f854 	bl	8002b7c <HAL_GetTick>
 8003ad4:	0003      	movs	r3, r0
 8003ad6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ad8:	e008      	b.n	8003aec <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ada:	f7ff f84f 	bl	8002b7c <HAL_GetTick>
 8003ade:	0002      	movs	r2, r0
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	2b64      	cmp	r3, #100	@ 0x64
 8003ae6:	d901      	bls.n	8003aec <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e28a      	b.n	8004002 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aec:	4b8a      	ldr	r3, [pc, #552]	@ (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	2380      	movs	r3, #128	@ 0x80
 8003af2:	029b      	lsls	r3, r3, #10
 8003af4:	4013      	ands	r3, r2
 8003af6:	d0f0      	beq.n	8003ada <HAL_RCC_OscConfig+0xee>
 8003af8:	e015      	b.n	8003b26 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003afa:	f7ff f83f 	bl	8002b7c <HAL_GetTick>
 8003afe:	0003      	movs	r3, r0
 8003b00:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b02:	e008      	b.n	8003b16 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b04:	f7ff f83a 	bl	8002b7c <HAL_GetTick>
 8003b08:	0002      	movs	r2, r0
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b64      	cmp	r3, #100	@ 0x64
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e275      	b.n	8004002 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b16:	4b80      	ldr	r3, [pc, #512]	@ (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	2380      	movs	r3, #128	@ 0x80
 8003b1c:	029b      	lsls	r3, r3, #10
 8003b1e:	4013      	ands	r3, r2
 8003b20:	d1f0      	bne.n	8003b04 <HAL_RCC_OscConfig+0x118>
 8003b22:	e000      	b.n	8003b26 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b24:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	d100      	bne.n	8003b32 <HAL_RCC_OscConfig+0x146>
 8003b30:	e069      	b.n	8003c06 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003b32:	4b79      	ldr	r3, [pc, #484]	@ (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	220c      	movs	r2, #12
 8003b38:	4013      	ands	r3, r2
 8003b3a:	d00b      	beq.n	8003b54 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003b3c:	4b76      	ldr	r3, [pc, #472]	@ (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	220c      	movs	r2, #12
 8003b42:	4013      	ands	r3, r2
 8003b44:	2b08      	cmp	r3, #8
 8003b46:	d11c      	bne.n	8003b82 <HAL_RCC_OscConfig+0x196>
 8003b48:	4b73      	ldr	r3, [pc, #460]	@ (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003b4a:	685a      	ldr	r2, [r3, #4]
 8003b4c:	2380      	movs	r3, #128	@ 0x80
 8003b4e:	025b      	lsls	r3, r3, #9
 8003b50:	4013      	ands	r3, r2
 8003b52:	d116      	bne.n	8003b82 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b54:	4b70      	ldr	r3, [pc, #448]	@ (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2202      	movs	r2, #2
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	d005      	beq.n	8003b6a <HAL_RCC_OscConfig+0x17e>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d001      	beq.n	8003b6a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e24b      	b.n	8004002 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b6a:	4b6b      	ldr	r3, [pc, #428]	@ (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	22f8      	movs	r2, #248	@ 0xf8
 8003b70:	4393      	bics	r3, r2
 8003b72:	0019      	movs	r1, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	00da      	lsls	r2, r3, #3
 8003b7a:	4b67      	ldr	r3, [pc, #412]	@ (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b80:	e041      	b.n	8003c06 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d024      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b8a:	4b63      	ldr	r3, [pc, #396]	@ (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	4b62      	ldr	r3, [pc, #392]	@ (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003b90:	2101      	movs	r1, #1
 8003b92:	430a      	orrs	r2, r1
 8003b94:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b96:	f7fe fff1 	bl	8002b7c <HAL_GetTick>
 8003b9a:	0003      	movs	r3, r0
 8003b9c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b9e:	e008      	b.n	8003bb2 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ba0:	f7fe ffec 	bl	8002b7c <HAL_GetTick>
 8003ba4:	0002      	movs	r2, r0
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e227      	b.n	8004002 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bb2:	4b59      	ldr	r3, [pc, #356]	@ (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	4013      	ands	r3, r2
 8003bba:	d0f1      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bbc:	4b56      	ldr	r3, [pc, #344]	@ (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	22f8      	movs	r2, #248	@ 0xf8
 8003bc2:	4393      	bics	r3, r2
 8003bc4:	0019      	movs	r1, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	00da      	lsls	r2, r3, #3
 8003bcc:	4b52      	ldr	r3, [pc, #328]	@ (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	601a      	str	r2, [r3, #0]
 8003bd2:	e018      	b.n	8003c06 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bd4:	4b50      	ldr	r3, [pc, #320]	@ (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	4b4f      	ldr	r3, [pc, #316]	@ (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003bda:	2101      	movs	r1, #1
 8003bdc:	438a      	bics	r2, r1
 8003bde:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be0:	f7fe ffcc 	bl	8002b7c <HAL_GetTick>
 8003be4:	0003      	movs	r3, r0
 8003be6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003be8:	e008      	b.n	8003bfc <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bea:	f7fe ffc7 	bl	8002b7c <HAL_GetTick>
 8003bee:	0002      	movs	r2, r0
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d901      	bls.n	8003bfc <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e202      	b.n	8004002 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bfc:	4b46      	ldr	r3, [pc, #280]	@ (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2202      	movs	r2, #2
 8003c02:	4013      	ands	r3, r2
 8003c04:	d1f1      	bne.n	8003bea <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2208      	movs	r2, #8
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	d036      	beq.n	8003c7e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	69db      	ldr	r3, [r3, #28]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d019      	beq.n	8003c4c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c18:	4b3f      	ldr	r3, [pc, #252]	@ (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003c1a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c1c:	4b3e      	ldr	r3, [pc, #248]	@ (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003c1e:	2101      	movs	r1, #1
 8003c20:	430a      	orrs	r2, r1
 8003c22:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c24:	f7fe ffaa 	bl	8002b7c <HAL_GetTick>
 8003c28:	0003      	movs	r3, r0
 8003c2a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c2c:	e008      	b.n	8003c40 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c2e:	f7fe ffa5 	bl	8002b7c <HAL_GetTick>
 8003c32:	0002      	movs	r2, r0
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d901      	bls.n	8003c40 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e1e0      	b.n	8004002 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c40:	4b35      	ldr	r3, [pc, #212]	@ (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c44:	2202      	movs	r2, #2
 8003c46:	4013      	ands	r3, r2
 8003c48:	d0f1      	beq.n	8003c2e <HAL_RCC_OscConfig+0x242>
 8003c4a:	e018      	b.n	8003c7e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c4c:	4b32      	ldr	r3, [pc, #200]	@ (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003c4e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c50:	4b31      	ldr	r3, [pc, #196]	@ (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003c52:	2101      	movs	r1, #1
 8003c54:	438a      	bics	r2, r1
 8003c56:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c58:	f7fe ff90 	bl	8002b7c <HAL_GetTick>
 8003c5c:	0003      	movs	r3, r0
 8003c5e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c60:	e008      	b.n	8003c74 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c62:	f7fe ff8b 	bl	8002b7c <HAL_GetTick>
 8003c66:	0002      	movs	r2, r0
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d901      	bls.n	8003c74 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e1c6      	b.n	8004002 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c74:	4b28      	ldr	r3, [pc, #160]	@ (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c78:	2202      	movs	r2, #2
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	d1f1      	bne.n	8003c62 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2204      	movs	r2, #4
 8003c84:	4013      	ands	r3, r2
 8003c86:	d100      	bne.n	8003c8a <HAL_RCC_OscConfig+0x29e>
 8003c88:	e0b4      	b.n	8003df4 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c8a:	201f      	movs	r0, #31
 8003c8c:	183b      	adds	r3, r7, r0
 8003c8e:	2200      	movs	r2, #0
 8003c90:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c92:	4b21      	ldr	r3, [pc, #132]	@ (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003c94:	69da      	ldr	r2, [r3, #28]
 8003c96:	2380      	movs	r3, #128	@ 0x80
 8003c98:	055b      	lsls	r3, r3, #21
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	d110      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c9e:	4b1e      	ldr	r3, [pc, #120]	@ (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003ca0:	69da      	ldr	r2, [r3, #28]
 8003ca2:	4b1d      	ldr	r3, [pc, #116]	@ (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003ca4:	2180      	movs	r1, #128	@ 0x80
 8003ca6:	0549      	lsls	r1, r1, #21
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	61da      	str	r2, [r3, #28]
 8003cac:	4b1a      	ldr	r3, [pc, #104]	@ (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003cae:	69da      	ldr	r2, [r3, #28]
 8003cb0:	2380      	movs	r3, #128	@ 0x80
 8003cb2:	055b      	lsls	r3, r3, #21
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	60fb      	str	r3, [r7, #12]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003cba:	183b      	adds	r3, r7, r0
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cc0:	4b18      	ldr	r3, [pc, #96]	@ (8003d24 <HAL_RCC_OscConfig+0x338>)
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	2380      	movs	r3, #128	@ 0x80
 8003cc6:	005b      	lsls	r3, r3, #1
 8003cc8:	4013      	ands	r3, r2
 8003cca:	d11a      	bne.n	8003d02 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ccc:	4b15      	ldr	r3, [pc, #84]	@ (8003d24 <HAL_RCC_OscConfig+0x338>)
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	4b14      	ldr	r3, [pc, #80]	@ (8003d24 <HAL_RCC_OscConfig+0x338>)
 8003cd2:	2180      	movs	r1, #128	@ 0x80
 8003cd4:	0049      	lsls	r1, r1, #1
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cda:	f7fe ff4f 	bl	8002b7c <HAL_GetTick>
 8003cde:	0003      	movs	r3, r0
 8003ce0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ce2:	e008      	b.n	8003cf6 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ce4:	f7fe ff4a 	bl	8002b7c <HAL_GetTick>
 8003ce8:	0002      	movs	r2, r0
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	2b64      	cmp	r3, #100	@ 0x64
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e185      	b.n	8004002 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8003d24 <HAL_RCC_OscConfig+0x338>)
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	2380      	movs	r3, #128	@ 0x80
 8003cfc:	005b      	lsls	r3, r3, #1
 8003cfe:	4013      	ands	r3, r2
 8003d00:	d0f0      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d10e      	bne.n	8003d28 <HAL_RCC_OscConfig+0x33c>
 8003d0a:	4b03      	ldr	r3, [pc, #12]	@ (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003d0c:	6a1a      	ldr	r2, [r3, #32]
 8003d0e:	4b02      	ldr	r3, [pc, #8]	@ (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003d10:	2101      	movs	r1, #1
 8003d12:	430a      	orrs	r2, r1
 8003d14:	621a      	str	r2, [r3, #32]
 8003d16:	e035      	b.n	8003d84 <HAL_RCC_OscConfig+0x398>
 8003d18:	40021000 	.word	0x40021000
 8003d1c:	fffeffff 	.word	0xfffeffff
 8003d20:	fffbffff 	.word	0xfffbffff
 8003d24:	40007000 	.word	0x40007000
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d10c      	bne.n	8003d4a <HAL_RCC_OscConfig+0x35e>
 8003d30:	4bb6      	ldr	r3, [pc, #728]	@ (800400c <HAL_RCC_OscConfig+0x620>)
 8003d32:	6a1a      	ldr	r2, [r3, #32]
 8003d34:	4bb5      	ldr	r3, [pc, #724]	@ (800400c <HAL_RCC_OscConfig+0x620>)
 8003d36:	2101      	movs	r1, #1
 8003d38:	438a      	bics	r2, r1
 8003d3a:	621a      	str	r2, [r3, #32]
 8003d3c:	4bb3      	ldr	r3, [pc, #716]	@ (800400c <HAL_RCC_OscConfig+0x620>)
 8003d3e:	6a1a      	ldr	r2, [r3, #32]
 8003d40:	4bb2      	ldr	r3, [pc, #712]	@ (800400c <HAL_RCC_OscConfig+0x620>)
 8003d42:	2104      	movs	r1, #4
 8003d44:	438a      	bics	r2, r1
 8003d46:	621a      	str	r2, [r3, #32]
 8003d48:	e01c      	b.n	8003d84 <HAL_RCC_OscConfig+0x398>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	2b05      	cmp	r3, #5
 8003d50:	d10c      	bne.n	8003d6c <HAL_RCC_OscConfig+0x380>
 8003d52:	4bae      	ldr	r3, [pc, #696]	@ (800400c <HAL_RCC_OscConfig+0x620>)
 8003d54:	6a1a      	ldr	r2, [r3, #32]
 8003d56:	4bad      	ldr	r3, [pc, #692]	@ (800400c <HAL_RCC_OscConfig+0x620>)
 8003d58:	2104      	movs	r1, #4
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	621a      	str	r2, [r3, #32]
 8003d5e:	4bab      	ldr	r3, [pc, #684]	@ (800400c <HAL_RCC_OscConfig+0x620>)
 8003d60:	6a1a      	ldr	r2, [r3, #32]
 8003d62:	4baa      	ldr	r3, [pc, #680]	@ (800400c <HAL_RCC_OscConfig+0x620>)
 8003d64:	2101      	movs	r1, #1
 8003d66:	430a      	orrs	r2, r1
 8003d68:	621a      	str	r2, [r3, #32]
 8003d6a:	e00b      	b.n	8003d84 <HAL_RCC_OscConfig+0x398>
 8003d6c:	4ba7      	ldr	r3, [pc, #668]	@ (800400c <HAL_RCC_OscConfig+0x620>)
 8003d6e:	6a1a      	ldr	r2, [r3, #32]
 8003d70:	4ba6      	ldr	r3, [pc, #664]	@ (800400c <HAL_RCC_OscConfig+0x620>)
 8003d72:	2101      	movs	r1, #1
 8003d74:	438a      	bics	r2, r1
 8003d76:	621a      	str	r2, [r3, #32]
 8003d78:	4ba4      	ldr	r3, [pc, #656]	@ (800400c <HAL_RCC_OscConfig+0x620>)
 8003d7a:	6a1a      	ldr	r2, [r3, #32]
 8003d7c:	4ba3      	ldr	r3, [pc, #652]	@ (800400c <HAL_RCC_OscConfig+0x620>)
 8003d7e:	2104      	movs	r1, #4
 8003d80:	438a      	bics	r2, r1
 8003d82:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d014      	beq.n	8003db6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d8c:	f7fe fef6 	bl	8002b7c <HAL_GetTick>
 8003d90:	0003      	movs	r3, r0
 8003d92:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d94:	e009      	b.n	8003daa <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d96:	f7fe fef1 	bl	8002b7c <HAL_GetTick>
 8003d9a:	0002      	movs	r2, r0
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	4a9b      	ldr	r2, [pc, #620]	@ (8004010 <HAL_RCC_OscConfig+0x624>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e12b      	b.n	8004002 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003daa:	4b98      	ldr	r3, [pc, #608]	@ (800400c <HAL_RCC_OscConfig+0x620>)
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	2202      	movs	r2, #2
 8003db0:	4013      	ands	r3, r2
 8003db2:	d0f0      	beq.n	8003d96 <HAL_RCC_OscConfig+0x3aa>
 8003db4:	e013      	b.n	8003dde <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003db6:	f7fe fee1 	bl	8002b7c <HAL_GetTick>
 8003dba:	0003      	movs	r3, r0
 8003dbc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dbe:	e009      	b.n	8003dd4 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dc0:	f7fe fedc 	bl	8002b7c <HAL_GetTick>
 8003dc4:	0002      	movs	r2, r0
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	4a91      	ldr	r2, [pc, #580]	@ (8004010 <HAL_RCC_OscConfig+0x624>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d901      	bls.n	8003dd4 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e116      	b.n	8004002 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dd4:	4b8d      	ldr	r3, [pc, #564]	@ (800400c <HAL_RCC_OscConfig+0x620>)
 8003dd6:	6a1b      	ldr	r3, [r3, #32]
 8003dd8:	2202      	movs	r2, #2
 8003dda:	4013      	ands	r3, r2
 8003ddc:	d1f0      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003dde:	231f      	movs	r3, #31
 8003de0:	18fb      	adds	r3, r7, r3
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d105      	bne.n	8003df4 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003de8:	4b88      	ldr	r3, [pc, #544]	@ (800400c <HAL_RCC_OscConfig+0x620>)
 8003dea:	69da      	ldr	r2, [r3, #28]
 8003dec:	4b87      	ldr	r3, [pc, #540]	@ (800400c <HAL_RCC_OscConfig+0x620>)
 8003dee:	4989      	ldr	r1, [pc, #548]	@ (8004014 <HAL_RCC_OscConfig+0x628>)
 8003df0:	400a      	ands	r2, r1
 8003df2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2210      	movs	r2, #16
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	d063      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d12a      	bne.n	8003e5c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003e06:	4b81      	ldr	r3, [pc, #516]	@ (800400c <HAL_RCC_OscConfig+0x620>)
 8003e08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e0a:	4b80      	ldr	r3, [pc, #512]	@ (800400c <HAL_RCC_OscConfig+0x620>)
 8003e0c:	2104      	movs	r1, #4
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003e12:	4b7e      	ldr	r3, [pc, #504]	@ (800400c <HAL_RCC_OscConfig+0x620>)
 8003e14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e16:	4b7d      	ldr	r3, [pc, #500]	@ (800400c <HAL_RCC_OscConfig+0x620>)
 8003e18:	2101      	movs	r1, #1
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e1e:	f7fe fead 	bl	8002b7c <HAL_GetTick>
 8003e22:	0003      	movs	r3, r0
 8003e24:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003e26:	e008      	b.n	8003e3a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003e28:	f7fe fea8 	bl	8002b7c <HAL_GetTick>
 8003e2c:	0002      	movs	r2, r0
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e0e3      	b.n	8004002 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003e3a:	4b74      	ldr	r3, [pc, #464]	@ (800400c <HAL_RCC_OscConfig+0x620>)
 8003e3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e3e:	2202      	movs	r2, #2
 8003e40:	4013      	ands	r3, r2
 8003e42:	d0f1      	beq.n	8003e28 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003e44:	4b71      	ldr	r3, [pc, #452]	@ (800400c <HAL_RCC_OscConfig+0x620>)
 8003e46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e48:	22f8      	movs	r2, #248	@ 0xf8
 8003e4a:	4393      	bics	r3, r2
 8003e4c:	0019      	movs	r1, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	00da      	lsls	r2, r3, #3
 8003e54:	4b6d      	ldr	r3, [pc, #436]	@ (800400c <HAL_RCC_OscConfig+0x620>)
 8003e56:	430a      	orrs	r2, r1
 8003e58:	635a      	str	r2, [r3, #52]	@ 0x34
 8003e5a:	e034      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	695b      	ldr	r3, [r3, #20]
 8003e60:	3305      	adds	r3, #5
 8003e62:	d111      	bne.n	8003e88 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003e64:	4b69      	ldr	r3, [pc, #420]	@ (800400c <HAL_RCC_OscConfig+0x620>)
 8003e66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e68:	4b68      	ldr	r3, [pc, #416]	@ (800400c <HAL_RCC_OscConfig+0x620>)
 8003e6a:	2104      	movs	r1, #4
 8003e6c:	438a      	bics	r2, r1
 8003e6e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003e70:	4b66      	ldr	r3, [pc, #408]	@ (800400c <HAL_RCC_OscConfig+0x620>)
 8003e72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e74:	22f8      	movs	r2, #248	@ 0xf8
 8003e76:	4393      	bics	r3, r2
 8003e78:	0019      	movs	r1, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	699b      	ldr	r3, [r3, #24]
 8003e7e:	00da      	lsls	r2, r3, #3
 8003e80:	4b62      	ldr	r3, [pc, #392]	@ (800400c <HAL_RCC_OscConfig+0x620>)
 8003e82:	430a      	orrs	r2, r1
 8003e84:	635a      	str	r2, [r3, #52]	@ 0x34
 8003e86:	e01e      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003e88:	4b60      	ldr	r3, [pc, #384]	@ (800400c <HAL_RCC_OscConfig+0x620>)
 8003e8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e8c:	4b5f      	ldr	r3, [pc, #380]	@ (800400c <HAL_RCC_OscConfig+0x620>)
 8003e8e:	2104      	movs	r1, #4
 8003e90:	430a      	orrs	r2, r1
 8003e92:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003e94:	4b5d      	ldr	r3, [pc, #372]	@ (800400c <HAL_RCC_OscConfig+0x620>)
 8003e96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e98:	4b5c      	ldr	r3, [pc, #368]	@ (800400c <HAL_RCC_OscConfig+0x620>)
 8003e9a:	2101      	movs	r1, #1
 8003e9c:	438a      	bics	r2, r1
 8003e9e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ea0:	f7fe fe6c 	bl	8002b7c <HAL_GetTick>
 8003ea4:	0003      	movs	r3, r0
 8003ea6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003ea8:	e008      	b.n	8003ebc <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003eaa:	f7fe fe67 	bl	8002b7c <HAL_GetTick>
 8003eae:	0002      	movs	r2, r0
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d901      	bls.n	8003ebc <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e0a2      	b.n	8004002 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003ebc:	4b53      	ldr	r3, [pc, #332]	@ (800400c <HAL_RCC_OscConfig+0x620>)
 8003ebe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ec0:	2202      	movs	r2, #2
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	d1f1      	bne.n	8003eaa <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d100      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x4e4>
 8003ece:	e097      	b.n	8004000 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ed0:	4b4e      	ldr	r3, [pc, #312]	@ (800400c <HAL_RCC_OscConfig+0x620>)
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	220c      	movs	r2, #12
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	2b08      	cmp	r3, #8
 8003eda:	d100      	bne.n	8003ede <HAL_RCC_OscConfig+0x4f2>
 8003edc:	e06b      	b.n	8003fb6 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d14c      	bne.n	8003f80 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ee6:	4b49      	ldr	r3, [pc, #292]	@ (800400c <HAL_RCC_OscConfig+0x620>)
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	4b48      	ldr	r3, [pc, #288]	@ (800400c <HAL_RCC_OscConfig+0x620>)
 8003eec:	494a      	ldr	r1, [pc, #296]	@ (8004018 <HAL_RCC_OscConfig+0x62c>)
 8003eee:	400a      	ands	r2, r1
 8003ef0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef2:	f7fe fe43 	bl	8002b7c <HAL_GetTick>
 8003ef6:	0003      	movs	r3, r0
 8003ef8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003efa:	e008      	b.n	8003f0e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003efc:	f7fe fe3e 	bl	8002b7c <HAL_GetTick>
 8003f00:	0002      	movs	r2, r0
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e079      	b.n	8004002 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f0e:	4b3f      	ldr	r3, [pc, #252]	@ (800400c <HAL_RCC_OscConfig+0x620>)
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	2380      	movs	r3, #128	@ 0x80
 8003f14:	049b      	lsls	r3, r3, #18
 8003f16:	4013      	ands	r3, r2
 8003f18:	d1f0      	bne.n	8003efc <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f1a:	4b3c      	ldr	r3, [pc, #240]	@ (800400c <HAL_RCC_OscConfig+0x620>)
 8003f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f1e:	220f      	movs	r2, #15
 8003f20:	4393      	bics	r3, r2
 8003f22:	0019      	movs	r1, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f28:	4b38      	ldr	r3, [pc, #224]	@ (800400c <HAL_RCC_OscConfig+0x620>)
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003f2e:	4b37      	ldr	r3, [pc, #220]	@ (800400c <HAL_RCC_OscConfig+0x620>)
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	4a3a      	ldr	r2, [pc, #232]	@ (800401c <HAL_RCC_OscConfig+0x630>)
 8003f34:	4013      	ands	r3, r2
 8003f36:	0019      	movs	r1, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f40:	431a      	orrs	r2, r3
 8003f42:	4b32      	ldr	r3, [pc, #200]	@ (800400c <HAL_RCC_OscConfig+0x620>)
 8003f44:	430a      	orrs	r2, r1
 8003f46:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f48:	4b30      	ldr	r3, [pc, #192]	@ (800400c <HAL_RCC_OscConfig+0x620>)
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	4b2f      	ldr	r3, [pc, #188]	@ (800400c <HAL_RCC_OscConfig+0x620>)
 8003f4e:	2180      	movs	r1, #128	@ 0x80
 8003f50:	0449      	lsls	r1, r1, #17
 8003f52:	430a      	orrs	r2, r1
 8003f54:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f56:	f7fe fe11 	bl	8002b7c <HAL_GetTick>
 8003f5a:	0003      	movs	r3, r0
 8003f5c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f5e:	e008      	b.n	8003f72 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f60:	f7fe fe0c 	bl	8002b7c <HAL_GetTick>
 8003f64:	0002      	movs	r2, r0
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e047      	b.n	8004002 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f72:	4b26      	ldr	r3, [pc, #152]	@ (800400c <HAL_RCC_OscConfig+0x620>)
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	2380      	movs	r3, #128	@ 0x80
 8003f78:	049b      	lsls	r3, r3, #18
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	d0f0      	beq.n	8003f60 <HAL_RCC_OscConfig+0x574>
 8003f7e:	e03f      	b.n	8004000 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f80:	4b22      	ldr	r3, [pc, #136]	@ (800400c <HAL_RCC_OscConfig+0x620>)
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	4b21      	ldr	r3, [pc, #132]	@ (800400c <HAL_RCC_OscConfig+0x620>)
 8003f86:	4924      	ldr	r1, [pc, #144]	@ (8004018 <HAL_RCC_OscConfig+0x62c>)
 8003f88:	400a      	ands	r2, r1
 8003f8a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f8c:	f7fe fdf6 	bl	8002b7c <HAL_GetTick>
 8003f90:	0003      	movs	r3, r0
 8003f92:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f94:	e008      	b.n	8003fa8 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f96:	f7fe fdf1 	bl	8002b7c <HAL_GetTick>
 8003f9a:	0002      	movs	r2, r0
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d901      	bls.n	8003fa8 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e02c      	b.n	8004002 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fa8:	4b18      	ldr	r3, [pc, #96]	@ (800400c <HAL_RCC_OscConfig+0x620>)
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	2380      	movs	r3, #128	@ 0x80
 8003fae:	049b      	lsls	r3, r3, #18
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	d1f0      	bne.n	8003f96 <HAL_RCC_OscConfig+0x5aa>
 8003fb4:	e024      	b.n	8004000 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d101      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e01f      	b.n	8004002 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003fc2:	4b12      	ldr	r3, [pc, #72]	@ (800400c <HAL_RCC_OscConfig+0x620>)
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003fc8:	4b10      	ldr	r3, [pc, #64]	@ (800400c <HAL_RCC_OscConfig+0x620>)
 8003fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fcc:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fce:	697a      	ldr	r2, [r7, #20]
 8003fd0:	2380      	movs	r3, #128	@ 0x80
 8003fd2:	025b      	lsls	r3, r3, #9
 8003fd4:	401a      	ands	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d10e      	bne.n	8003ffc <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	220f      	movs	r2, #15
 8003fe2:	401a      	ands	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d107      	bne.n	8003ffc <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003fec:	697a      	ldr	r2, [r7, #20]
 8003fee:	23f0      	movs	r3, #240	@ 0xf0
 8003ff0:	039b      	lsls	r3, r3, #14
 8003ff2:	401a      	ands	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d001      	beq.n	8004000 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e000      	b.n	8004002 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	0018      	movs	r0, r3
 8004004:	46bd      	mov	sp, r7
 8004006:	b008      	add	sp, #32
 8004008:	bd80      	pop	{r7, pc}
 800400a:	46c0      	nop			@ (mov r8, r8)
 800400c:	40021000 	.word	0x40021000
 8004010:	00001388 	.word	0x00001388
 8004014:	efffffff 	.word	0xefffffff
 8004018:	feffffff 	.word	0xfeffffff
 800401c:	ffc2ffff 	.word	0xffc2ffff

08004020 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d101      	bne.n	8004034 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e0b3      	b.n	800419c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004034:	4b5b      	ldr	r3, [pc, #364]	@ (80041a4 <HAL_RCC_ClockConfig+0x184>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2201      	movs	r2, #1
 800403a:	4013      	ands	r3, r2
 800403c:	683a      	ldr	r2, [r7, #0]
 800403e:	429a      	cmp	r2, r3
 8004040:	d911      	bls.n	8004066 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004042:	4b58      	ldr	r3, [pc, #352]	@ (80041a4 <HAL_RCC_ClockConfig+0x184>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2201      	movs	r2, #1
 8004048:	4393      	bics	r3, r2
 800404a:	0019      	movs	r1, r3
 800404c:	4b55      	ldr	r3, [pc, #340]	@ (80041a4 <HAL_RCC_ClockConfig+0x184>)
 800404e:	683a      	ldr	r2, [r7, #0]
 8004050:	430a      	orrs	r2, r1
 8004052:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004054:	4b53      	ldr	r3, [pc, #332]	@ (80041a4 <HAL_RCC_ClockConfig+0x184>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2201      	movs	r2, #1
 800405a:	4013      	ands	r3, r2
 800405c:	683a      	ldr	r2, [r7, #0]
 800405e:	429a      	cmp	r2, r3
 8004060:	d001      	beq.n	8004066 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e09a      	b.n	800419c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2202      	movs	r2, #2
 800406c:	4013      	ands	r3, r2
 800406e:	d015      	beq.n	800409c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2204      	movs	r2, #4
 8004076:	4013      	ands	r3, r2
 8004078:	d006      	beq.n	8004088 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800407a:	4b4b      	ldr	r3, [pc, #300]	@ (80041a8 <HAL_RCC_ClockConfig+0x188>)
 800407c:	685a      	ldr	r2, [r3, #4]
 800407e:	4b4a      	ldr	r3, [pc, #296]	@ (80041a8 <HAL_RCC_ClockConfig+0x188>)
 8004080:	21e0      	movs	r1, #224	@ 0xe0
 8004082:	00c9      	lsls	r1, r1, #3
 8004084:	430a      	orrs	r2, r1
 8004086:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004088:	4b47      	ldr	r3, [pc, #284]	@ (80041a8 <HAL_RCC_ClockConfig+0x188>)
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	22f0      	movs	r2, #240	@ 0xf0
 800408e:	4393      	bics	r3, r2
 8004090:	0019      	movs	r1, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	689a      	ldr	r2, [r3, #8]
 8004096:	4b44      	ldr	r3, [pc, #272]	@ (80041a8 <HAL_RCC_ClockConfig+0x188>)
 8004098:	430a      	orrs	r2, r1
 800409a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2201      	movs	r2, #1
 80040a2:	4013      	ands	r3, r2
 80040a4:	d040      	beq.n	8004128 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d107      	bne.n	80040be <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ae:	4b3e      	ldr	r3, [pc, #248]	@ (80041a8 <HAL_RCC_ClockConfig+0x188>)
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	2380      	movs	r3, #128	@ 0x80
 80040b4:	029b      	lsls	r3, r3, #10
 80040b6:	4013      	ands	r3, r2
 80040b8:	d114      	bne.n	80040e4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e06e      	b.n	800419c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d107      	bne.n	80040d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040c6:	4b38      	ldr	r3, [pc, #224]	@ (80041a8 <HAL_RCC_ClockConfig+0x188>)
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	2380      	movs	r3, #128	@ 0x80
 80040cc:	049b      	lsls	r3, r3, #18
 80040ce:	4013      	ands	r3, r2
 80040d0:	d108      	bne.n	80040e4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e062      	b.n	800419c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040d6:	4b34      	ldr	r3, [pc, #208]	@ (80041a8 <HAL_RCC_ClockConfig+0x188>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2202      	movs	r2, #2
 80040dc:	4013      	ands	r3, r2
 80040de:	d101      	bne.n	80040e4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e05b      	b.n	800419c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040e4:	4b30      	ldr	r3, [pc, #192]	@ (80041a8 <HAL_RCC_ClockConfig+0x188>)
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	2203      	movs	r2, #3
 80040ea:	4393      	bics	r3, r2
 80040ec:	0019      	movs	r1, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685a      	ldr	r2, [r3, #4]
 80040f2:	4b2d      	ldr	r3, [pc, #180]	@ (80041a8 <HAL_RCC_ClockConfig+0x188>)
 80040f4:	430a      	orrs	r2, r1
 80040f6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040f8:	f7fe fd40 	bl	8002b7c <HAL_GetTick>
 80040fc:	0003      	movs	r3, r0
 80040fe:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004100:	e009      	b.n	8004116 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004102:	f7fe fd3b 	bl	8002b7c <HAL_GetTick>
 8004106:	0002      	movs	r2, r0
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	4a27      	ldr	r2, [pc, #156]	@ (80041ac <HAL_RCC_ClockConfig+0x18c>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d901      	bls.n	8004116 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e042      	b.n	800419c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004116:	4b24      	ldr	r3, [pc, #144]	@ (80041a8 <HAL_RCC_ClockConfig+0x188>)
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	220c      	movs	r2, #12
 800411c:	401a      	ands	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	429a      	cmp	r2, r3
 8004126:	d1ec      	bne.n	8004102 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004128:	4b1e      	ldr	r3, [pc, #120]	@ (80041a4 <HAL_RCC_ClockConfig+0x184>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2201      	movs	r2, #1
 800412e:	4013      	ands	r3, r2
 8004130:	683a      	ldr	r2, [r7, #0]
 8004132:	429a      	cmp	r2, r3
 8004134:	d211      	bcs.n	800415a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004136:	4b1b      	ldr	r3, [pc, #108]	@ (80041a4 <HAL_RCC_ClockConfig+0x184>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2201      	movs	r2, #1
 800413c:	4393      	bics	r3, r2
 800413e:	0019      	movs	r1, r3
 8004140:	4b18      	ldr	r3, [pc, #96]	@ (80041a4 <HAL_RCC_ClockConfig+0x184>)
 8004142:	683a      	ldr	r2, [r7, #0]
 8004144:	430a      	orrs	r2, r1
 8004146:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004148:	4b16      	ldr	r3, [pc, #88]	@ (80041a4 <HAL_RCC_ClockConfig+0x184>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2201      	movs	r2, #1
 800414e:	4013      	ands	r3, r2
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	429a      	cmp	r2, r3
 8004154:	d001      	beq.n	800415a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e020      	b.n	800419c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2204      	movs	r2, #4
 8004160:	4013      	ands	r3, r2
 8004162:	d009      	beq.n	8004178 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004164:	4b10      	ldr	r3, [pc, #64]	@ (80041a8 <HAL_RCC_ClockConfig+0x188>)
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	4a11      	ldr	r2, [pc, #68]	@ (80041b0 <HAL_RCC_ClockConfig+0x190>)
 800416a:	4013      	ands	r3, r2
 800416c:	0019      	movs	r1, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	68da      	ldr	r2, [r3, #12]
 8004172:	4b0d      	ldr	r3, [pc, #52]	@ (80041a8 <HAL_RCC_ClockConfig+0x188>)
 8004174:	430a      	orrs	r2, r1
 8004176:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004178:	f000 f820 	bl	80041bc <HAL_RCC_GetSysClockFreq>
 800417c:	0001      	movs	r1, r0
 800417e:	4b0a      	ldr	r3, [pc, #40]	@ (80041a8 <HAL_RCC_ClockConfig+0x188>)
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	091b      	lsrs	r3, r3, #4
 8004184:	220f      	movs	r2, #15
 8004186:	4013      	ands	r3, r2
 8004188:	4a0a      	ldr	r2, [pc, #40]	@ (80041b4 <HAL_RCC_ClockConfig+0x194>)
 800418a:	5cd3      	ldrb	r3, [r2, r3]
 800418c:	000a      	movs	r2, r1
 800418e:	40da      	lsrs	r2, r3
 8004190:	4b09      	ldr	r3, [pc, #36]	@ (80041b8 <HAL_RCC_ClockConfig+0x198>)
 8004192:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004194:	2000      	movs	r0, #0
 8004196:	f7fe fcab 	bl	8002af0 <HAL_InitTick>
  
  return HAL_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	0018      	movs	r0, r3
 800419e:	46bd      	mov	sp, r7
 80041a0:	b004      	add	sp, #16
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	40022000 	.word	0x40022000
 80041a8:	40021000 	.word	0x40021000
 80041ac:	00001388 	.word	0x00001388
 80041b0:	fffff8ff 	.word	0xfffff8ff
 80041b4:	08007bac 	.word	0x08007bac
 80041b8:	20000000 	.word	0x20000000

080041bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b086      	sub	sp, #24
 80041c0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80041c2:	2300      	movs	r3, #0
 80041c4:	60fb      	str	r3, [r7, #12]
 80041c6:	2300      	movs	r3, #0
 80041c8:	60bb      	str	r3, [r7, #8]
 80041ca:	2300      	movs	r3, #0
 80041cc:	617b      	str	r3, [r7, #20]
 80041ce:	2300      	movs	r3, #0
 80041d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80041d2:	2300      	movs	r3, #0
 80041d4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80041d6:	4b20      	ldr	r3, [pc, #128]	@ (8004258 <HAL_RCC_GetSysClockFreq+0x9c>)
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	220c      	movs	r2, #12
 80041e0:	4013      	ands	r3, r2
 80041e2:	2b04      	cmp	r3, #4
 80041e4:	d002      	beq.n	80041ec <HAL_RCC_GetSysClockFreq+0x30>
 80041e6:	2b08      	cmp	r3, #8
 80041e8:	d003      	beq.n	80041f2 <HAL_RCC_GetSysClockFreq+0x36>
 80041ea:	e02c      	b.n	8004246 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80041ec:	4b1b      	ldr	r3, [pc, #108]	@ (800425c <HAL_RCC_GetSysClockFreq+0xa0>)
 80041ee:	613b      	str	r3, [r7, #16]
      break;
 80041f0:	e02c      	b.n	800424c <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	0c9b      	lsrs	r3, r3, #18
 80041f6:	220f      	movs	r2, #15
 80041f8:	4013      	ands	r3, r2
 80041fa:	4a19      	ldr	r2, [pc, #100]	@ (8004260 <HAL_RCC_GetSysClockFreq+0xa4>)
 80041fc:	5cd3      	ldrb	r3, [r2, r3]
 80041fe:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004200:	4b15      	ldr	r3, [pc, #84]	@ (8004258 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004204:	220f      	movs	r2, #15
 8004206:	4013      	ands	r3, r2
 8004208:	4a16      	ldr	r2, [pc, #88]	@ (8004264 <HAL_RCC_GetSysClockFreq+0xa8>)
 800420a:	5cd3      	ldrb	r3, [r2, r3]
 800420c:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800420e:	68fa      	ldr	r2, [r7, #12]
 8004210:	2380      	movs	r3, #128	@ 0x80
 8004212:	025b      	lsls	r3, r3, #9
 8004214:	4013      	ands	r3, r2
 8004216:	d009      	beq.n	800422c <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004218:	68b9      	ldr	r1, [r7, #8]
 800421a:	4810      	ldr	r0, [pc, #64]	@ (800425c <HAL_RCC_GetSysClockFreq+0xa0>)
 800421c:	f7fb ff90 	bl	8000140 <__udivsi3>
 8004220:	0003      	movs	r3, r0
 8004222:	001a      	movs	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4353      	muls	r3, r2
 8004228:	617b      	str	r3, [r7, #20]
 800422a:	e009      	b.n	8004240 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800422c:	6879      	ldr	r1, [r7, #4]
 800422e:	000a      	movs	r2, r1
 8004230:	0152      	lsls	r2, r2, #5
 8004232:	1a52      	subs	r2, r2, r1
 8004234:	0193      	lsls	r3, r2, #6
 8004236:	1a9b      	subs	r3, r3, r2
 8004238:	00db      	lsls	r3, r3, #3
 800423a:	185b      	adds	r3, r3, r1
 800423c:	021b      	lsls	r3, r3, #8
 800423e:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	613b      	str	r3, [r7, #16]
      break;
 8004244:	e002      	b.n	800424c <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004246:	4b05      	ldr	r3, [pc, #20]	@ (800425c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004248:	613b      	str	r3, [r7, #16]
      break;
 800424a:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800424c:	693b      	ldr	r3, [r7, #16]
}
 800424e:	0018      	movs	r0, r3
 8004250:	46bd      	mov	sp, r7
 8004252:	b006      	add	sp, #24
 8004254:	bd80      	pop	{r7, pc}
 8004256:	46c0      	nop			@ (mov r8, r8)
 8004258:	40021000 	.word	0x40021000
 800425c:	007a1200 	.word	0x007a1200
 8004260:	08007bc4 	.word	0x08007bc4
 8004264:	08007bd4 	.word	0x08007bd4

08004268 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800426c:	4b02      	ldr	r3, [pc, #8]	@ (8004278 <HAL_RCC_GetHCLKFreq+0x10>)
 800426e:	681b      	ldr	r3, [r3, #0]
}
 8004270:	0018      	movs	r0, r3
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	46c0      	nop			@ (mov r8, r8)
 8004278:	20000000 	.word	0x20000000

0800427c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004280:	f7ff fff2 	bl	8004268 <HAL_RCC_GetHCLKFreq>
 8004284:	0001      	movs	r1, r0
 8004286:	4b06      	ldr	r3, [pc, #24]	@ (80042a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	0a1b      	lsrs	r3, r3, #8
 800428c:	2207      	movs	r2, #7
 800428e:	4013      	ands	r3, r2
 8004290:	4a04      	ldr	r2, [pc, #16]	@ (80042a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004292:	5cd3      	ldrb	r3, [r2, r3]
 8004294:	40d9      	lsrs	r1, r3
 8004296:	000b      	movs	r3, r1
}    
 8004298:	0018      	movs	r0, r3
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	46c0      	nop			@ (mov r8, r8)
 80042a0:	40021000 	.word	0x40021000
 80042a4:	08007bbc 	.word	0x08007bbc

080042a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b086      	sub	sp, #24
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042b0:	2300      	movs	r3, #0
 80042b2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80042b4:	2300      	movs	r3, #0
 80042b6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	2380      	movs	r3, #128	@ 0x80
 80042be:	025b      	lsls	r3, r3, #9
 80042c0:	4013      	ands	r3, r2
 80042c2:	d100      	bne.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80042c4:	e08e      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80042c6:	2017      	movs	r0, #23
 80042c8:	183b      	adds	r3, r7, r0
 80042ca:	2200      	movs	r2, #0
 80042cc:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042ce:	4b5f      	ldr	r3, [pc, #380]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80042d0:	69da      	ldr	r2, [r3, #28]
 80042d2:	2380      	movs	r3, #128	@ 0x80
 80042d4:	055b      	lsls	r3, r3, #21
 80042d6:	4013      	ands	r3, r2
 80042d8:	d110      	bne.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80042da:	4b5c      	ldr	r3, [pc, #368]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80042dc:	69da      	ldr	r2, [r3, #28]
 80042de:	4b5b      	ldr	r3, [pc, #364]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80042e0:	2180      	movs	r1, #128	@ 0x80
 80042e2:	0549      	lsls	r1, r1, #21
 80042e4:	430a      	orrs	r2, r1
 80042e6:	61da      	str	r2, [r3, #28]
 80042e8:	4b58      	ldr	r3, [pc, #352]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80042ea:	69da      	ldr	r2, [r3, #28]
 80042ec:	2380      	movs	r3, #128	@ 0x80
 80042ee:	055b      	lsls	r3, r3, #21
 80042f0:	4013      	ands	r3, r2
 80042f2:	60bb      	str	r3, [r7, #8]
 80042f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042f6:	183b      	adds	r3, r7, r0
 80042f8:	2201      	movs	r2, #1
 80042fa:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042fc:	4b54      	ldr	r3, [pc, #336]	@ (8004450 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	2380      	movs	r3, #128	@ 0x80
 8004302:	005b      	lsls	r3, r3, #1
 8004304:	4013      	ands	r3, r2
 8004306:	d11a      	bne.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004308:	4b51      	ldr	r3, [pc, #324]	@ (8004450 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	4b50      	ldr	r3, [pc, #320]	@ (8004450 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800430e:	2180      	movs	r1, #128	@ 0x80
 8004310:	0049      	lsls	r1, r1, #1
 8004312:	430a      	orrs	r2, r1
 8004314:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004316:	f7fe fc31 	bl	8002b7c <HAL_GetTick>
 800431a:	0003      	movs	r3, r0
 800431c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800431e:	e008      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004320:	f7fe fc2c 	bl	8002b7c <HAL_GetTick>
 8004324:	0002      	movs	r2, r0
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	2b64      	cmp	r3, #100	@ 0x64
 800432c:	d901      	bls.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e087      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004332:	4b47      	ldr	r3, [pc, #284]	@ (8004450 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	2380      	movs	r3, #128	@ 0x80
 8004338:	005b      	lsls	r3, r3, #1
 800433a:	4013      	ands	r3, r2
 800433c:	d0f0      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800433e:	4b43      	ldr	r3, [pc, #268]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004340:	6a1a      	ldr	r2, [r3, #32]
 8004342:	23c0      	movs	r3, #192	@ 0xc0
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	4013      	ands	r3, r2
 8004348:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d034      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685a      	ldr	r2, [r3, #4]
 8004354:	23c0      	movs	r3, #192	@ 0xc0
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	4013      	ands	r3, r2
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	429a      	cmp	r2, r3
 800435e:	d02c      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004360:	4b3a      	ldr	r3, [pc, #232]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004362:	6a1b      	ldr	r3, [r3, #32]
 8004364:	4a3b      	ldr	r2, [pc, #236]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004366:	4013      	ands	r3, r2
 8004368:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800436a:	4b38      	ldr	r3, [pc, #224]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800436c:	6a1a      	ldr	r2, [r3, #32]
 800436e:	4b37      	ldr	r3, [pc, #220]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004370:	2180      	movs	r1, #128	@ 0x80
 8004372:	0249      	lsls	r1, r1, #9
 8004374:	430a      	orrs	r2, r1
 8004376:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004378:	4b34      	ldr	r3, [pc, #208]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800437a:	6a1a      	ldr	r2, [r3, #32]
 800437c:	4b33      	ldr	r3, [pc, #204]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800437e:	4936      	ldr	r1, [pc, #216]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004380:	400a      	ands	r2, r1
 8004382:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004384:	4b31      	ldr	r3, [pc, #196]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2201      	movs	r2, #1
 800438e:	4013      	ands	r3, r2
 8004390:	d013      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004392:	f7fe fbf3 	bl	8002b7c <HAL_GetTick>
 8004396:	0003      	movs	r3, r0
 8004398:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800439a:	e009      	b.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800439c:	f7fe fbee 	bl	8002b7c <HAL_GetTick>
 80043a0:	0002      	movs	r2, r0
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	4a2d      	ldr	r2, [pc, #180]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d901      	bls.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e048      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043b0:	4b26      	ldr	r3, [pc, #152]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80043b2:	6a1b      	ldr	r3, [r3, #32]
 80043b4:	2202      	movs	r2, #2
 80043b6:	4013      	ands	r3, r2
 80043b8:	d0f0      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043ba:	4b24      	ldr	r3, [pc, #144]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80043bc:	6a1b      	ldr	r3, [r3, #32]
 80043be:	4a25      	ldr	r2, [pc, #148]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043c0:	4013      	ands	r3, r2
 80043c2:	0019      	movs	r1, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685a      	ldr	r2, [r3, #4]
 80043c8:	4b20      	ldr	r3, [pc, #128]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80043ca:	430a      	orrs	r2, r1
 80043cc:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80043ce:	2317      	movs	r3, #23
 80043d0:	18fb      	adds	r3, r7, r3
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d105      	bne.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043d8:	4b1c      	ldr	r3, [pc, #112]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80043da:	69da      	ldr	r2, [r3, #28]
 80043dc:	4b1b      	ldr	r3, [pc, #108]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80043de:	4920      	ldr	r1, [pc, #128]	@ (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043e0:	400a      	ands	r2, r1
 80043e2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2201      	movs	r2, #1
 80043ea:	4013      	ands	r3, r2
 80043ec:	d009      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043ee:	4b17      	ldr	r3, [pc, #92]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80043f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043f2:	2203      	movs	r2, #3
 80043f4:	4393      	bics	r3, r2
 80043f6:	0019      	movs	r1, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	689a      	ldr	r2, [r3, #8]
 80043fc:	4b13      	ldr	r3, [pc, #76]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80043fe:	430a      	orrs	r2, r1
 8004400:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2220      	movs	r2, #32
 8004408:	4013      	ands	r3, r2
 800440a:	d009      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800440c:	4b0f      	ldr	r3, [pc, #60]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800440e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004410:	2210      	movs	r2, #16
 8004412:	4393      	bics	r3, r2
 8004414:	0019      	movs	r1, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68da      	ldr	r2, [r3, #12]
 800441a:	4b0c      	ldr	r3, [pc, #48]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800441c:	430a      	orrs	r2, r1
 800441e:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	2380      	movs	r3, #128	@ 0x80
 8004426:	00db      	lsls	r3, r3, #3
 8004428:	4013      	ands	r3, r2
 800442a:	d009      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800442c:	4b07      	ldr	r3, [pc, #28]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800442e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004430:	2240      	movs	r2, #64	@ 0x40
 8004432:	4393      	bics	r3, r2
 8004434:	0019      	movs	r1, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	691a      	ldr	r2, [r3, #16]
 800443a:	4b04      	ldr	r3, [pc, #16]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800443c:	430a      	orrs	r2, r1
 800443e:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	0018      	movs	r0, r3
 8004444:	46bd      	mov	sp, r7
 8004446:	b006      	add	sp, #24
 8004448:	bd80      	pop	{r7, pc}
 800444a:	46c0      	nop			@ (mov r8, r8)
 800444c:	40021000 	.word	0x40021000
 8004450:	40007000 	.word	0x40007000
 8004454:	fffffcff 	.word	0xfffffcff
 8004458:	fffeffff 	.word	0xfffeffff
 800445c:	00001388 	.word	0x00001388
 8004460:	efffffff 	.word	0xefffffff

08004464 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e044      	b.n	8004500 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800447a:	2b00      	cmp	r3, #0
 800447c:	d107      	bne.n	800448e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2278      	movs	r2, #120	@ 0x78
 8004482:	2100      	movs	r1, #0
 8004484:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	0018      	movs	r0, r3
 800448a:	f7fe f9c7 	bl	800281c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2224      	movs	r2, #36	@ 0x24
 8004492:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2101      	movs	r1, #1
 80044a0:	438a      	bics	r2, r1
 80044a2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d003      	beq.n	80044b4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	0018      	movs	r0, r3
 80044b0:	f000 fa0c 	bl	80048cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	0018      	movs	r0, r3
 80044b8:	f000 f8c8 	bl	800464c <UART_SetConfig>
 80044bc:	0003      	movs	r3, r0
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d101      	bne.n	80044c6 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e01c      	b.n	8004500 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	685a      	ldr	r2, [r3, #4]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	490d      	ldr	r1, [pc, #52]	@ (8004508 <HAL_UART_Init+0xa4>)
 80044d2:	400a      	ands	r2, r1
 80044d4:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	689a      	ldr	r2, [r3, #8]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	212a      	movs	r1, #42	@ 0x2a
 80044e2:	438a      	bics	r2, r1
 80044e4:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2101      	movs	r1, #1
 80044f2:	430a      	orrs	r2, r1
 80044f4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	0018      	movs	r0, r3
 80044fa:	f000 fa9b 	bl	8004a34 <UART_CheckIdleState>
 80044fe:	0003      	movs	r3, r0
}
 8004500:	0018      	movs	r0, r3
 8004502:	46bd      	mov	sp, r7
 8004504:	b002      	add	sp, #8
 8004506:	bd80      	pop	{r7, pc}
 8004508:	ffffb7ff 	.word	0xffffb7ff

0800450c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b08a      	sub	sp, #40	@ 0x28
 8004510:	af02      	add	r7, sp, #8
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	603b      	str	r3, [r7, #0]
 8004518:	1dbb      	adds	r3, r7, #6
 800451a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004520:	2b20      	cmp	r3, #32
 8004522:	d000      	beq.n	8004526 <HAL_UART_Transmit+0x1a>
 8004524:	e08c      	b.n	8004640 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d003      	beq.n	8004534 <HAL_UART_Transmit+0x28>
 800452c:	1dbb      	adds	r3, r7, #6
 800452e:	881b      	ldrh	r3, [r3, #0]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d101      	bne.n	8004538 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e084      	b.n	8004642 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	689a      	ldr	r2, [r3, #8]
 800453c:	2380      	movs	r3, #128	@ 0x80
 800453e:	015b      	lsls	r3, r3, #5
 8004540:	429a      	cmp	r2, r3
 8004542:	d109      	bne.n	8004558 <HAL_UART_Transmit+0x4c>
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	691b      	ldr	r3, [r3, #16]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d105      	bne.n	8004558 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	2201      	movs	r2, #1
 8004550:	4013      	ands	r3, r2
 8004552:	d001      	beq.n	8004558 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e074      	b.n	8004642 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2284      	movs	r2, #132	@ 0x84
 800455c:	2100      	movs	r1, #0
 800455e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2221      	movs	r2, #33	@ 0x21
 8004564:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004566:	f7fe fb09 	bl	8002b7c <HAL_GetTick>
 800456a:	0003      	movs	r3, r0
 800456c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	1dba      	adds	r2, r7, #6
 8004572:	2150      	movs	r1, #80	@ 0x50
 8004574:	8812      	ldrh	r2, [r2, #0]
 8004576:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	1dba      	adds	r2, r7, #6
 800457c:	2152      	movs	r1, #82	@ 0x52
 800457e:	8812      	ldrh	r2, [r2, #0]
 8004580:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	689a      	ldr	r2, [r3, #8]
 8004586:	2380      	movs	r3, #128	@ 0x80
 8004588:	015b      	lsls	r3, r3, #5
 800458a:	429a      	cmp	r2, r3
 800458c:	d108      	bne.n	80045a0 <HAL_UART_Transmit+0x94>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d104      	bne.n	80045a0 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8004596:	2300      	movs	r3, #0
 8004598:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	61bb      	str	r3, [r7, #24]
 800459e:	e003      	b.n	80045a8 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045a4:	2300      	movs	r3, #0
 80045a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80045a8:	e02f      	b.n	800460a <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	9300      	str	r3, [sp, #0]
 80045b2:	0013      	movs	r3, r2
 80045b4:	2200      	movs	r2, #0
 80045b6:	2180      	movs	r1, #128	@ 0x80
 80045b8:	f000 fae4 	bl	8004b84 <UART_WaitOnFlagUntilTimeout>
 80045bc:	1e03      	subs	r3, r0, #0
 80045be:	d004      	beq.n	80045ca <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2220      	movs	r2, #32
 80045c4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e03b      	b.n	8004642 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d10b      	bne.n	80045e8 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	881a      	ldrh	r2, [r3, #0]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	05d2      	lsls	r2, r2, #23
 80045da:	0dd2      	lsrs	r2, r2, #23
 80045dc:	b292      	uxth	r2, r2
 80045de:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	3302      	adds	r3, #2
 80045e4:	61bb      	str	r3, [r7, #24]
 80045e6:	e007      	b.n	80045f8 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	781a      	ldrb	r2, [r3, #0]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	3301      	adds	r3, #1
 80045f6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2252      	movs	r2, #82	@ 0x52
 80045fc:	5a9b      	ldrh	r3, [r3, r2]
 80045fe:	b29b      	uxth	r3, r3
 8004600:	3b01      	subs	r3, #1
 8004602:	b299      	uxth	r1, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2252      	movs	r2, #82	@ 0x52
 8004608:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2252      	movs	r2, #82	@ 0x52
 800460e:	5a9b      	ldrh	r3, [r3, r2]
 8004610:	b29b      	uxth	r3, r3
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1c9      	bne.n	80045aa <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004616:	697a      	ldr	r2, [r7, #20]
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	9300      	str	r3, [sp, #0]
 800461e:	0013      	movs	r3, r2
 8004620:	2200      	movs	r2, #0
 8004622:	2140      	movs	r1, #64	@ 0x40
 8004624:	f000 faae 	bl	8004b84 <UART_WaitOnFlagUntilTimeout>
 8004628:	1e03      	subs	r3, r0, #0
 800462a:	d004      	beq.n	8004636 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2220      	movs	r2, #32
 8004630:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e005      	b.n	8004642 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2220      	movs	r2, #32
 800463a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800463c:	2300      	movs	r3, #0
 800463e:	e000      	b.n	8004642 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8004640:	2302      	movs	r3, #2
  }
}
 8004642:	0018      	movs	r0, r3
 8004644:	46bd      	mov	sp, r7
 8004646:	b008      	add	sp, #32
 8004648:	bd80      	pop	{r7, pc}
	...

0800464c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b088      	sub	sp, #32
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004654:	231e      	movs	r3, #30
 8004656:	18fb      	adds	r3, r7, r3
 8004658:	2200      	movs	r2, #0
 800465a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689a      	ldr	r2, [r3, #8]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	431a      	orrs	r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	431a      	orrs	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	69db      	ldr	r3, [r3, #28]
 8004670:	4313      	orrs	r3, r2
 8004672:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a8d      	ldr	r2, [pc, #564]	@ (80048b0 <UART_SetConfig+0x264>)
 800467c:	4013      	ands	r3, r2
 800467e:	0019      	movs	r1, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	430a      	orrs	r2, r1
 8004688:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	4a88      	ldr	r2, [pc, #544]	@ (80048b4 <UART_SetConfig+0x268>)
 8004692:	4013      	ands	r3, r2
 8004694:	0019      	movs	r1, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	68da      	ldr	r2, [r3, #12]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	430a      	orrs	r2, r1
 80046a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a1b      	ldr	r3, [r3, #32]
 80046ac:	697a      	ldr	r2, [r7, #20]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	4a7f      	ldr	r2, [pc, #508]	@ (80048b8 <UART_SetConfig+0x26c>)
 80046ba:	4013      	ands	r3, r2
 80046bc:	0019      	movs	r1, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	430a      	orrs	r2, r1
 80046c6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a7b      	ldr	r2, [pc, #492]	@ (80048bc <UART_SetConfig+0x270>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d127      	bne.n	8004722 <UART_SetConfig+0xd6>
 80046d2:	4b7b      	ldr	r3, [pc, #492]	@ (80048c0 <UART_SetConfig+0x274>)
 80046d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046d6:	2203      	movs	r2, #3
 80046d8:	4013      	ands	r3, r2
 80046da:	2b03      	cmp	r3, #3
 80046dc:	d00d      	beq.n	80046fa <UART_SetConfig+0xae>
 80046de:	d81b      	bhi.n	8004718 <UART_SetConfig+0xcc>
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d014      	beq.n	800470e <UART_SetConfig+0xc2>
 80046e4:	d818      	bhi.n	8004718 <UART_SetConfig+0xcc>
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d002      	beq.n	80046f0 <UART_SetConfig+0xa4>
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d00a      	beq.n	8004704 <UART_SetConfig+0xb8>
 80046ee:	e013      	b.n	8004718 <UART_SetConfig+0xcc>
 80046f0:	231f      	movs	r3, #31
 80046f2:	18fb      	adds	r3, r7, r3
 80046f4:	2200      	movs	r2, #0
 80046f6:	701a      	strb	r2, [r3, #0]
 80046f8:	e021      	b.n	800473e <UART_SetConfig+0xf2>
 80046fa:	231f      	movs	r3, #31
 80046fc:	18fb      	adds	r3, r7, r3
 80046fe:	2202      	movs	r2, #2
 8004700:	701a      	strb	r2, [r3, #0]
 8004702:	e01c      	b.n	800473e <UART_SetConfig+0xf2>
 8004704:	231f      	movs	r3, #31
 8004706:	18fb      	adds	r3, r7, r3
 8004708:	2204      	movs	r2, #4
 800470a:	701a      	strb	r2, [r3, #0]
 800470c:	e017      	b.n	800473e <UART_SetConfig+0xf2>
 800470e:	231f      	movs	r3, #31
 8004710:	18fb      	adds	r3, r7, r3
 8004712:	2208      	movs	r2, #8
 8004714:	701a      	strb	r2, [r3, #0]
 8004716:	e012      	b.n	800473e <UART_SetConfig+0xf2>
 8004718:	231f      	movs	r3, #31
 800471a:	18fb      	adds	r3, r7, r3
 800471c:	2210      	movs	r2, #16
 800471e:	701a      	strb	r2, [r3, #0]
 8004720:	e00d      	b.n	800473e <UART_SetConfig+0xf2>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a67      	ldr	r2, [pc, #412]	@ (80048c4 <UART_SetConfig+0x278>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d104      	bne.n	8004736 <UART_SetConfig+0xea>
 800472c:	231f      	movs	r3, #31
 800472e:	18fb      	adds	r3, r7, r3
 8004730:	2200      	movs	r2, #0
 8004732:	701a      	strb	r2, [r3, #0]
 8004734:	e003      	b.n	800473e <UART_SetConfig+0xf2>
 8004736:	231f      	movs	r3, #31
 8004738:	18fb      	adds	r3, r7, r3
 800473a:	2210      	movs	r2, #16
 800473c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	69da      	ldr	r2, [r3, #28]
 8004742:	2380      	movs	r3, #128	@ 0x80
 8004744:	021b      	lsls	r3, r3, #8
 8004746:	429a      	cmp	r2, r3
 8004748:	d15c      	bne.n	8004804 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 800474a:	231f      	movs	r3, #31
 800474c:	18fb      	adds	r3, r7, r3
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	2b08      	cmp	r3, #8
 8004752:	d015      	beq.n	8004780 <UART_SetConfig+0x134>
 8004754:	dc18      	bgt.n	8004788 <UART_SetConfig+0x13c>
 8004756:	2b04      	cmp	r3, #4
 8004758:	d00d      	beq.n	8004776 <UART_SetConfig+0x12a>
 800475a:	dc15      	bgt.n	8004788 <UART_SetConfig+0x13c>
 800475c:	2b00      	cmp	r3, #0
 800475e:	d002      	beq.n	8004766 <UART_SetConfig+0x11a>
 8004760:	2b02      	cmp	r3, #2
 8004762:	d005      	beq.n	8004770 <UART_SetConfig+0x124>
 8004764:	e010      	b.n	8004788 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004766:	f7ff fd89 	bl	800427c <HAL_RCC_GetPCLK1Freq>
 800476a:	0003      	movs	r3, r0
 800476c:	61bb      	str	r3, [r7, #24]
        break;
 800476e:	e012      	b.n	8004796 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004770:	4b55      	ldr	r3, [pc, #340]	@ (80048c8 <UART_SetConfig+0x27c>)
 8004772:	61bb      	str	r3, [r7, #24]
        break;
 8004774:	e00f      	b.n	8004796 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004776:	f7ff fd21 	bl	80041bc <HAL_RCC_GetSysClockFreq>
 800477a:	0003      	movs	r3, r0
 800477c:	61bb      	str	r3, [r7, #24]
        break;
 800477e:	e00a      	b.n	8004796 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004780:	2380      	movs	r3, #128	@ 0x80
 8004782:	021b      	lsls	r3, r3, #8
 8004784:	61bb      	str	r3, [r7, #24]
        break;
 8004786:	e006      	b.n	8004796 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8004788:	2300      	movs	r3, #0
 800478a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800478c:	231e      	movs	r3, #30
 800478e:	18fb      	adds	r3, r7, r3
 8004790:	2201      	movs	r2, #1
 8004792:	701a      	strb	r2, [r3, #0]
        break;
 8004794:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d100      	bne.n	800479e <UART_SetConfig+0x152>
 800479c:	e07a      	b.n	8004894 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	005a      	lsls	r2, r3, #1
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	085b      	lsrs	r3, r3, #1
 80047a8:	18d2      	adds	r2, r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	0019      	movs	r1, r3
 80047b0:	0010      	movs	r0, r2
 80047b2:	f7fb fcc5 	bl	8000140 <__udivsi3>
 80047b6:	0003      	movs	r3, r0
 80047b8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	2b0f      	cmp	r3, #15
 80047be:	d91c      	bls.n	80047fa <UART_SetConfig+0x1ae>
 80047c0:	693a      	ldr	r2, [r7, #16]
 80047c2:	2380      	movs	r3, #128	@ 0x80
 80047c4:	025b      	lsls	r3, r3, #9
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d217      	bcs.n	80047fa <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	b29a      	uxth	r2, r3
 80047ce:	200e      	movs	r0, #14
 80047d0:	183b      	adds	r3, r7, r0
 80047d2:	210f      	movs	r1, #15
 80047d4:	438a      	bics	r2, r1
 80047d6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	085b      	lsrs	r3, r3, #1
 80047dc:	b29b      	uxth	r3, r3
 80047de:	2207      	movs	r2, #7
 80047e0:	4013      	ands	r3, r2
 80047e2:	b299      	uxth	r1, r3
 80047e4:	183b      	adds	r3, r7, r0
 80047e6:	183a      	adds	r2, r7, r0
 80047e8:	8812      	ldrh	r2, [r2, #0]
 80047ea:	430a      	orrs	r2, r1
 80047ec:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	183a      	adds	r2, r7, r0
 80047f4:	8812      	ldrh	r2, [r2, #0]
 80047f6:	60da      	str	r2, [r3, #12]
 80047f8:	e04c      	b.n	8004894 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80047fa:	231e      	movs	r3, #30
 80047fc:	18fb      	adds	r3, r7, r3
 80047fe:	2201      	movs	r2, #1
 8004800:	701a      	strb	r2, [r3, #0]
 8004802:	e047      	b.n	8004894 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004804:	231f      	movs	r3, #31
 8004806:	18fb      	adds	r3, r7, r3
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	2b08      	cmp	r3, #8
 800480c:	d015      	beq.n	800483a <UART_SetConfig+0x1ee>
 800480e:	dc18      	bgt.n	8004842 <UART_SetConfig+0x1f6>
 8004810:	2b04      	cmp	r3, #4
 8004812:	d00d      	beq.n	8004830 <UART_SetConfig+0x1e4>
 8004814:	dc15      	bgt.n	8004842 <UART_SetConfig+0x1f6>
 8004816:	2b00      	cmp	r3, #0
 8004818:	d002      	beq.n	8004820 <UART_SetConfig+0x1d4>
 800481a:	2b02      	cmp	r3, #2
 800481c:	d005      	beq.n	800482a <UART_SetConfig+0x1de>
 800481e:	e010      	b.n	8004842 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004820:	f7ff fd2c 	bl	800427c <HAL_RCC_GetPCLK1Freq>
 8004824:	0003      	movs	r3, r0
 8004826:	61bb      	str	r3, [r7, #24]
        break;
 8004828:	e012      	b.n	8004850 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800482a:	4b27      	ldr	r3, [pc, #156]	@ (80048c8 <UART_SetConfig+0x27c>)
 800482c:	61bb      	str	r3, [r7, #24]
        break;
 800482e:	e00f      	b.n	8004850 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004830:	f7ff fcc4 	bl	80041bc <HAL_RCC_GetSysClockFreq>
 8004834:	0003      	movs	r3, r0
 8004836:	61bb      	str	r3, [r7, #24]
        break;
 8004838:	e00a      	b.n	8004850 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800483a:	2380      	movs	r3, #128	@ 0x80
 800483c:	021b      	lsls	r3, r3, #8
 800483e:	61bb      	str	r3, [r7, #24]
        break;
 8004840:	e006      	b.n	8004850 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004842:	2300      	movs	r3, #0
 8004844:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004846:	231e      	movs	r3, #30
 8004848:	18fb      	adds	r3, r7, r3
 800484a:	2201      	movs	r2, #1
 800484c:	701a      	strb	r2, [r3, #0]
        break;
 800484e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d01e      	beq.n	8004894 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	085a      	lsrs	r2, r3, #1
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	18d2      	adds	r2, r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	0019      	movs	r1, r3
 8004866:	0010      	movs	r0, r2
 8004868:	f7fb fc6a 	bl	8000140 <__udivsi3>
 800486c:	0003      	movs	r3, r0
 800486e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	2b0f      	cmp	r3, #15
 8004874:	d90a      	bls.n	800488c <UART_SetConfig+0x240>
 8004876:	693a      	ldr	r2, [r7, #16]
 8004878:	2380      	movs	r3, #128	@ 0x80
 800487a:	025b      	lsls	r3, r3, #9
 800487c:	429a      	cmp	r2, r3
 800487e:	d205      	bcs.n	800488c <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	b29a      	uxth	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	60da      	str	r2, [r3, #12]
 800488a:	e003      	b.n	8004894 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 800488c:	231e      	movs	r3, #30
 800488e:	18fb      	adds	r3, r7, r3
 8004890:	2201      	movs	r2, #1
 8004892:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80048a0:	231e      	movs	r3, #30
 80048a2:	18fb      	adds	r3, r7, r3
 80048a4:	781b      	ldrb	r3, [r3, #0]
}
 80048a6:	0018      	movs	r0, r3
 80048a8:	46bd      	mov	sp, r7
 80048aa:	b008      	add	sp, #32
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	46c0      	nop			@ (mov r8, r8)
 80048b0:	ffff69f3 	.word	0xffff69f3
 80048b4:	ffffcfff 	.word	0xffffcfff
 80048b8:	fffff4ff 	.word	0xfffff4ff
 80048bc:	40013800 	.word	0x40013800
 80048c0:	40021000 	.word	0x40021000
 80048c4:	40004400 	.word	0x40004400
 80048c8:	007a1200 	.word	0x007a1200

080048cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d8:	2208      	movs	r2, #8
 80048da:	4013      	ands	r3, r2
 80048dc:	d00b      	beq.n	80048f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	4a4a      	ldr	r2, [pc, #296]	@ (8004a10 <UART_AdvFeatureConfig+0x144>)
 80048e6:	4013      	ands	r3, r2
 80048e8:	0019      	movs	r1, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	430a      	orrs	r2, r1
 80048f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048fa:	2201      	movs	r2, #1
 80048fc:	4013      	ands	r3, r2
 80048fe:	d00b      	beq.n	8004918 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	4a43      	ldr	r2, [pc, #268]	@ (8004a14 <UART_AdvFeatureConfig+0x148>)
 8004908:	4013      	ands	r3, r2
 800490a:	0019      	movs	r1, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	430a      	orrs	r2, r1
 8004916:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800491c:	2202      	movs	r2, #2
 800491e:	4013      	ands	r3, r2
 8004920:	d00b      	beq.n	800493a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	4a3b      	ldr	r2, [pc, #236]	@ (8004a18 <UART_AdvFeatureConfig+0x14c>)
 800492a:	4013      	ands	r3, r2
 800492c:	0019      	movs	r1, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	430a      	orrs	r2, r1
 8004938:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800493e:	2204      	movs	r2, #4
 8004940:	4013      	ands	r3, r2
 8004942:	d00b      	beq.n	800495c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	4a34      	ldr	r2, [pc, #208]	@ (8004a1c <UART_AdvFeatureConfig+0x150>)
 800494c:	4013      	ands	r3, r2
 800494e:	0019      	movs	r1, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	430a      	orrs	r2, r1
 800495a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004960:	2210      	movs	r2, #16
 8004962:	4013      	ands	r3, r2
 8004964:	d00b      	beq.n	800497e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	4a2c      	ldr	r2, [pc, #176]	@ (8004a20 <UART_AdvFeatureConfig+0x154>)
 800496e:	4013      	ands	r3, r2
 8004970:	0019      	movs	r1, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	430a      	orrs	r2, r1
 800497c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004982:	2220      	movs	r2, #32
 8004984:	4013      	ands	r3, r2
 8004986:	d00b      	beq.n	80049a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	4a25      	ldr	r2, [pc, #148]	@ (8004a24 <UART_AdvFeatureConfig+0x158>)
 8004990:	4013      	ands	r3, r2
 8004992:	0019      	movs	r1, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	430a      	orrs	r2, r1
 800499e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a4:	2240      	movs	r2, #64	@ 0x40
 80049a6:	4013      	ands	r3, r2
 80049a8:	d01d      	beq.n	80049e6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	4a1d      	ldr	r2, [pc, #116]	@ (8004a28 <UART_AdvFeatureConfig+0x15c>)
 80049b2:	4013      	ands	r3, r2
 80049b4:	0019      	movs	r1, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	430a      	orrs	r2, r1
 80049c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80049c6:	2380      	movs	r3, #128	@ 0x80
 80049c8:	035b      	lsls	r3, r3, #13
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d10b      	bne.n	80049e6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	4a15      	ldr	r2, [pc, #84]	@ (8004a2c <UART_AdvFeatureConfig+0x160>)
 80049d6:	4013      	ands	r3, r2
 80049d8:	0019      	movs	r1, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	430a      	orrs	r2, r1
 80049e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ea:	2280      	movs	r2, #128	@ 0x80
 80049ec:	4013      	ands	r3, r2
 80049ee:	d00b      	beq.n	8004a08 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	4a0e      	ldr	r2, [pc, #56]	@ (8004a30 <UART_AdvFeatureConfig+0x164>)
 80049f8:	4013      	ands	r3, r2
 80049fa:	0019      	movs	r1, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	430a      	orrs	r2, r1
 8004a06:	605a      	str	r2, [r3, #4]
  }
}
 8004a08:	46c0      	nop			@ (mov r8, r8)
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	b002      	add	sp, #8
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	ffff7fff 	.word	0xffff7fff
 8004a14:	fffdffff 	.word	0xfffdffff
 8004a18:	fffeffff 	.word	0xfffeffff
 8004a1c:	fffbffff 	.word	0xfffbffff
 8004a20:	ffffefff 	.word	0xffffefff
 8004a24:	ffffdfff 	.word	0xffffdfff
 8004a28:	ffefffff 	.word	0xffefffff
 8004a2c:	ff9fffff 	.word	0xff9fffff
 8004a30:	fff7ffff 	.word	0xfff7ffff

08004a34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b092      	sub	sp, #72	@ 0x48
 8004a38:	af02      	add	r7, sp, #8
 8004a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2284      	movs	r2, #132	@ 0x84
 8004a40:	2100      	movs	r1, #0
 8004a42:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a44:	f7fe f89a 	bl	8002b7c <HAL_GetTick>
 8004a48:	0003      	movs	r3, r0
 8004a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2208      	movs	r2, #8
 8004a54:	4013      	ands	r3, r2
 8004a56:	2b08      	cmp	r3, #8
 8004a58:	d12c      	bne.n	8004ab4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a5c:	2280      	movs	r2, #128	@ 0x80
 8004a5e:	0391      	lsls	r1, r2, #14
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	4a46      	ldr	r2, [pc, #280]	@ (8004b7c <UART_CheckIdleState+0x148>)
 8004a64:	9200      	str	r2, [sp, #0]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f000 f88c 	bl	8004b84 <UART_WaitOnFlagUntilTimeout>
 8004a6c:	1e03      	subs	r3, r0, #0
 8004a6e:	d021      	beq.n	8004ab4 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a70:	f3ef 8310 	mrs	r3, PRIMASK
 8004a74:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004a78:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a80:	f383 8810 	msr	PRIMASK, r3
}
 8004a84:	46c0      	nop			@ (mov r8, r8)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2180      	movs	r1, #128	@ 0x80
 8004a92:	438a      	bics	r2, r1
 8004a94:	601a      	str	r2, [r3, #0]
 8004a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a9c:	f383 8810 	msr	PRIMASK, r3
}
 8004aa0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2220      	movs	r2, #32
 8004aa6:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2278      	movs	r2, #120	@ 0x78
 8004aac:	2100      	movs	r1, #0
 8004aae:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e05f      	b.n	8004b74 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2204      	movs	r2, #4
 8004abc:	4013      	ands	r3, r2
 8004abe:	2b04      	cmp	r3, #4
 8004ac0:	d146      	bne.n	8004b50 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ac2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ac4:	2280      	movs	r2, #128	@ 0x80
 8004ac6:	03d1      	lsls	r1, r2, #15
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	4a2c      	ldr	r2, [pc, #176]	@ (8004b7c <UART_CheckIdleState+0x148>)
 8004acc:	9200      	str	r2, [sp, #0]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f000 f858 	bl	8004b84 <UART_WaitOnFlagUntilTimeout>
 8004ad4:	1e03      	subs	r3, r0, #0
 8004ad6:	d03b      	beq.n	8004b50 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ad8:	f3ef 8310 	mrs	r3, PRIMASK
 8004adc:	60fb      	str	r3, [r7, #12]
  return(result);
 8004ade:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ae0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	f383 8810 	msr	PRIMASK, r3
}
 8004aec:	46c0      	nop			@ (mov r8, r8)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4921      	ldr	r1, [pc, #132]	@ (8004b80 <UART_CheckIdleState+0x14c>)
 8004afa:	400a      	ands	r2, r1
 8004afc:	601a      	str	r2, [r3, #0]
 8004afe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b00:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	f383 8810 	msr	PRIMASK, r3
}
 8004b08:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b0a:	f3ef 8310 	mrs	r3, PRIMASK
 8004b0e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004b10:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b12:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b14:	2301      	movs	r3, #1
 8004b16:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	f383 8810 	msr	PRIMASK, r3
}
 8004b1e:	46c0      	nop			@ (mov r8, r8)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	689a      	ldr	r2, [r3, #8]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	2101      	movs	r1, #1
 8004b2c:	438a      	bics	r2, r1
 8004b2e:	609a      	str	r2, [r3, #8]
 8004b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b32:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b34:	6a3b      	ldr	r3, [r7, #32]
 8004b36:	f383 8810 	msr	PRIMASK, r3
}
 8004b3a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2280      	movs	r2, #128	@ 0x80
 8004b40:	2120      	movs	r1, #32
 8004b42:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2278      	movs	r2, #120	@ 0x78
 8004b48:	2100      	movs	r1, #0
 8004b4a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e011      	b.n	8004b74 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2220      	movs	r2, #32
 8004b54:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2280      	movs	r2, #128	@ 0x80
 8004b5a:	2120      	movs	r1, #32
 8004b5c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2278      	movs	r2, #120	@ 0x78
 8004b6e:	2100      	movs	r1, #0
 8004b70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	0018      	movs	r0, r3
 8004b76:	46bd      	mov	sp, r7
 8004b78:	b010      	add	sp, #64	@ 0x40
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	01ffffff 	.word	0x01ffffff
 8004b80:	fffffedf 	.word	0xfffffedf

08004b84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	603b      	str	r3, [r7, #0]
 8004b90:	1dfb      	adds	r3, r7, #7
 8004b92:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b94:	e051      	b.n	8004c3a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	3301      	adds	r3, #1
 8004b9a:	d04e      	beq.n	8004c3a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b9c:	f7fd ffee 	bl	8002b7c <HAL_GetTick>
 8004ba0:	0002      	movs	r2, r0
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	69ba      	ldr	r2, [r7, #24]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d302      	bcc.n	8004bb2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d101      	bne.n	8004bb6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e051      	b.n	8004c5a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2204      	movs	r2, #4
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	d03b      	beq.n	8004c3a <UART_WaitOnFlagUntilTimeout+0xb6>
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	2b80      	cmp	r3, #128	@ 0x80
 8004bc6:	d038      	beq.n	8004c3a <UART_WaitOnFlagUntilTimeout+0xb6>
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	2b40      	cmp	r3, #64	@ 0x40
 8004bcc:	d035      	beq.n	8004c3a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	69db      	ldr	r3, [r3, #28]
 8004bd4:	2208      	movs	r2, #8
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	2b08      	cmp	r3, #8
 8004bda:	d111      	bne.n	8004c00 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2208      	movs	r2, #8
 8004be2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	0018      	movs	r0, r3
 8004be8:	f000 f83c 	bl	8004c64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2284      	movs	r2, #132	@ 0x84
 8004bf0:	2108      	movs	r1, #8
 8004bf2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2278      	movs	r2, #120	@ 0x78
 8004bf8:	2100      	movs	r1, #0
 8004bfa:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e02c      	b.n	8004c5a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	69da      	ldr	r2, [r3, #28]
 8004c06:	2380      	movs	r3, #128	@ 0x80
 8004c08:	011b      	lsls	r3, r3, #4
 8004c0a:	401a      	ands	r2, r3
 8004c0c:	2380      	movs	r3, #128	@ 0x80
 8004c0e:	011b      	lsls	r3, r3, #4
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d112      	bne.n	8004c3a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2280      	movs	r2, #128	@ 0x80
 8004c1a:	0112      	lsls	r2, r2, #4
 8004c1c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	0018      	movs	r0, r3
 8004c22:	f000 f81f 	bl	8004c64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2284      	movs	r2, #132	@ 0x84
 8004c2a:	2120      	movs	r1, #32
 8004c2c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2278      	movs	r2, #120	@ 0x78
 8004c32:	2100      	movs	r1, #0
 8004c34:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e00f      	b.n	8004c5a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	69db      	ldr	r3, [r3, #28]
 8004c40:	68ba      	ldr	r2, [r7, #8]
 8004c42:	4013      	ands	r3, r2
 8004c44:	68ba      	ldr	r2, [r7, #8]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	425a      	negs	r2, r3
 8004c4a:	4153      	adcs	r3, r2
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	001a      	movs	r2, r3
 8004c50:	1dfb      	adds	r3, r7, #7
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d09e      	beq.n	8004b96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	0018      	movs	r0, r3
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	b004      	add	sp, #16
 8004c60:	bd80      	pop	{r7, pc}
	...

08004c64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b08e      	sub	sp, #56	@ 0x38
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c6c:	f3ef 8310 	mrs	r3, PRIMASK
 8004c70:	617b      	str	r3, [r7, #20]
  return(result);
 8004c72:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c74:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c76:	2301      	movs	r3, #1
 8004c78:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	f383 8810 	msr	PRIMASK, r3
}
 8004c80:	46c0      	nop			@ (mov r8, r8)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4926      	ldr	r1, [pc, #152]	@ (8004d28 <UART_EndRxTransfer+0xc4>)
 8004c8e:	400a      	ands	r2, r1
 8004c90:	601a      	str	r2, [r3, #0]
 8004c92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c94:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	f383 8810 	msr	PRIMASK, r3
}
 8004c9c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c9e:	f3ef 8310 	mrs	r3, PRIMASK
 8004ca2:	623b      	str	r3, [r7, #32]
  return(result);
 8004ca4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ca6:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ca8:	2301      	movs	r3, #1
 8004caa:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cae:	f383 8810 	msr	PRIMASK, r3
}
 8004cb2:	46c0      	nop			@ (mov r8, r8)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	689a      	ldr	r2, [r3, #8]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2101      	movs	r1, #1
 8004cc0:	438a      	bics	r2, r1
 8004cc2:	609a      	str	r2, [r3, #8]
 8004cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cca:	f383 8810 	msr	PRIMASK, r3
}
 8004cce:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d118      	bne.n	8004d0a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cd8:	f3ef 8310 	mrs	r3, PRIMASK
 8004cdc:	60bb      	str	r3, [r7, #8]
  return(result);
 8004cde:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ce0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f383 8810 	msr	PRIMASK, r3
}
 8004cec:	46c0      	nop			@ (mov r8, r8)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2110      	movs	r1, #16
 8004cfa:	438a      	bics	r2, r1
 8004cfc:	601a      	str	r2, [r3, #0]
 8004cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d00:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	f383 8810 	msr	PRIMASK, r3
}
 8004d08:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2280      	movs	r2, #128	@ 0x80
 8004d0e:	2120      	movs	r1, #32
 8004d10:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004d1e:	46c0      	nop			@ (mov r8, r8)
 8004d20:	46bd      	mov	sp, r7
 8004d22:	b00e      	add	sp, #56	@ 0x38
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	46c0      	nop			@ (mov r8, r8)
 8004d28:	fffffedf 	.word	0xfffffedf

08004d2c <__cvt>:
 8004d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d2e:	001f      	movs	r7, r3
 8004d30:	2300      	movs	r3, #0
 8004d32:	0016      	movs	r6, r2
 8004d34:	b08b      	sub	sp, #44	@ 0x2c
 8004d36:	429f      	cmp	r7, r3
 8004d38:	da04      	bge.n	8004d44 <__cvt+0x18>
 8004d3a:	2180      	movs	r1, #128	@ 0x80
 8004d3c:	0609      	lsls	r1, r1, #24
 8004d3e:	187b      	adds	r3, r7, r1
 8004d40:	001f      	movs	r7, r3
 8004d42:	232d      	movs	r3, #45	@ 0x2d
 8004d44:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004d46:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8004d48:	7013      	strb	r3, [r2, #0]
 8004d4a:	2320      	movs	r3, #32
 8004d4c:	2203      	movs	r2, #3
 8004d4e:	439d      	bics	r5, r3
 8004d50:	2d46      	cmp	r5, #70	@ 0x46
 8004d52:	d007      	beq.n	8004d64 <__cvt+0x38>
 8004d54:	002b      	movs	r3, r5
 8004d56:	3b45      	subs	r3, #69	@ 0x45
 8004d58:	4259      	negs	r1, r3
 8004d5a:	414b      	adcs	r3, r1
 8004d5c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8004d5e:	3a01      	subs	r2, #1
 8004d60:	18cb      	adds	r3, r1, r3
 8004d62:	9310      	str	r3, [sp, #64]	@ 0x40
 8004d64:	ab09      	add	r3, sp, #36	@ 0x24
 8004d66:	9304      	str	r3, [sp, #16]
 8004d68:	ab08      	add	r3, sp, #32
 8004d6a:	9303      	str	r3, [sp, #12]
 8004d6c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004d6e:	9200      	str	r2, [sp, #0]
 8004d70:	9302      	str	r3, [sp, #8]
 8004d72:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004d74:	0032      	movs	r2, r6
 8004d76:	9301      	str	r3, [sp, #4]
 8004d78:	003b      	movs	r3, r7
 8004d7a:	f000 fe89 	bl	8005a90 <_dtoa_r>
 8004d7e:	0004      	movs	r4, r0
 8004d80:	2d47      	cmp	r5, #71	@ 0x47
 8004d82:	d11b      	bne.n	8004dbc <__cvt+0x90>
 8004d84:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004d86:	07db      	lsls	r3, r3, #31
 8004d88:	d511      	bpl.n	8004dae <__cvt+0x82>
 8004d8a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004d8c:	18c3      	adds	r3, r0, r3
 8004d8e:	9307      	str	r3, [sp, #28]
 8004d90:	2200      	movs	r2, #0
 8004d92:	2300      	movs	r3, #0
 8004d94:	0030      	movs	r0, r6
 8004d96:	0039      	movs	r1, r7
 8004d98:	f7fb fb58 	bl	800044c <__aeabi_dcmpeq>
 8004d9c:	2800      	cmp	r0, #0
 8004d9e:	d001      	beq.n	8004da4 <__cvt+0x78>
 8004da0:	9b07      	ldr	r3, [sp, #28]
 8004da2:	9309      	str	r3, [sp, #36]	@ 0x24
 8004da4:	2230      	movs	r2, #48	@ 0x30
 8004da6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004da8:	9907      	ldr	r1, [sp, #28]
 8004daa:	428b      	cmp	r3, r1
 8004dac:	d320      	bcc.n	8004df0 <__cvt+0xc4>
 8004dae:	0020      	movs	r0, r4
 8004db0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004db2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004db4:	1b1b      	subs	r3, r3, r4
 8004db6:	6013      	str	r3, [r2, #0]
 8004db8:	b00b      	add	sp, #44	@ 0x2c
 8004dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dbc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004dbe:	18c3      	adds	r3, r0, r3
 8004dc0:	9307      	str	r3, [sp, #28]
 8004dc2:	2d46      	cmp	r5, #70	@ 0x46
 8004dc4:	d1e4      	bne.n	8004d90 <__cvt+0x64>
 8004dc6:	7803      	ldrb	r3, [r0, #0]
 8004dc8:	2b30      	cmp	r3, #48	@ 0x30
 8004dca:	d10c      	bne.n	8004de6 <__cvt+0xba>
 8004dcc:	2200      	movs	r2, #0
 8004dce:	2300      	movs	r3, #0
 8004dd0:	0030      	movs	r0, r6
 8004dd2:	0039      	movs	r1, r7
 8004dd4:	f7fb fb3a 	bl	800044c <__aeabi_dcmpeq>
 8004dd8:	2800      	cmp	r0, #0
 8004dda:	d104      	bne.n	8004de6 <__cvt+0xba>
 8004ddc:	2301      	movs	r3, #1
 8004dde:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8004de0:	1a9b      	subs	r3, r3, r2
 8004de2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004de4:	6013      	str	r3, [r2, #0]
 8004de6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004de8:	9a07      	ldr	r2, [sp, #28]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	18d3      	adds	r3, r2, r3
 8004dee:	e7ce      	b.n	8004d8e <__cvt+0x62>
 8004df0:	1c59      	adds	r1, r3, #1
 8004df2:	9109      	str	r1, [sp, #36]	@ 0x24
 8004df4:	701a      	strb	r2, [r3, #0]
 8004df6:	e7d6      	b.n	8004da6 <__cvt+0x7a>

08004df8 <__exponent>:
 8004df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dfa:	232b      	movs	r3, #43	@ 0x2b
 8004dfc:	0005      	movs	r5, r0
 8004dfe:	000c      	movs	r4, r1
 8004e00:	b085      	sub	sp, #20
 8004e02:	7002      	strb	r2, [r0, #0]
 8004e04:	2900      	cmp	r1, #0
 8004e06:	da01      	bge.n	8004e0c <__exponent+0x14>
 8004e08:	424c      	negs	r4, r1
 8004e0a:	3302      	adds	r3, #2
 8004e0c:	706b      	strb	r3, [r5, #1]
 8004e0e:	2c09      	cmp	r4, #9
 8004e10:	dd2c      	ble.n	8004e6c <__exponent+0x74>
 8004e12:	ab02      	add	r3, sp, #8
 8004e14:	1dde      	adds	r6, r3, #7
 8004e16:	0020      	movs	r0, r4
 8004e18:	210a      	movs	r1, #10
 8004e1a:	f7fb fb01 	bl	8000420 <__aeabi_idivmod>
 8004e1e:	0037      	movs	r7, r6
 8004e20:	3130      	adds	r1, #48	@ 0x30
 8004e22:	3e01      	subs	r6, #1
 8004e24:	0020      	movs	r0, r4
 8004e26:	7031      	strb	r1, [r6, #0]
 8004e28:	210a      	movs	r1, #10
 8004e2a:	9401      	str	r4, [sp, #4]
 8004e2c:	f7fb fa12 	bl	8000254 <__divsi3>
 8004e30:	9b01      	ldr	r3, [sp, #4]
 8004e32:	0004      	movs	r4, r0
 8004e34:	2b63      	cmp	r3, #99	@ 0x63
 8004e36:	dcee      	bgt.n	8004e16 <__exponent+0x1e>
 8004e38:	1eba      	subs	r2, r7, #2
 8004e3a:	1ca8      	adds	r0, r5, #2
 8004e3c:	0001      	movs	r1, r0
 8004e3e:	0013      	movs	r3, r2
 8004e40:	3430      	adds	r4, #48	@ 0x30
 8004e42:	7014      	strb	r4, [r2, #0]
 8004e44:	ac02      	add	r4, sp, #8
 8004e46:	3407      	adds	r4, #7
 8004e48:	429c      	cmp	r4, r3
 8004e4a:	d80a      	bhi.n	8004e62 <__exponent+0x6a>
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	42a2      	cmp	r2, r4
 8004e50:	d803      	bhi.n	8004e5a <__exponent+0x62>
 8004e52:	3309      	adds	r3, #9
 8004e54:	aa02      	add	r2, sp, #8
 8004e56:	189b      	adds	r3, r3, r2
 8004e58:	1bdb      	subs	r3, r3, r7
 8004e5a:	18c0      	adds	r0, r0, r3
 8004e5c:	1b40      	subs	r0, r0, r5
 8004e5e:	b005      	add	sp, #20
 8004e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e62:	781c      	ldrb	r4, [r3, #0]
 8004e64:	3301      	adds	r3, #1
 8004e66:	700c      	strb	r4, [r1, #0]
 8004e68:	3101      	adds	r1, #1
 8004e6a:	e7eb      	b.n	8004e44 <__exponent+0x4c>
 8004e6c:	2330      	movs	r3, #48	@ 0x30
 8004e6e:	18e4      	adds	r4, r4, r3
 8004e70:	70ab      	strb	r3, [r5, #2]
 8004e72:	1d28      	adds	r0, r5, #4
 8004e74:	70ec      	strb	r4, [r5, #3]
 8004e76:	e7f1      	b.n	8004e5c <__exponent+0x64>

08004e78 <_printf_float>:
 8004e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e7a:	b097      	sub	sp, #92	@ 0x5c
 8004e7c:	000d      	movs	r5, r1
 8004e7e:	920a      	str	r2, [sp, #40]	@ 0x28
 8004e80:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8004e82:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004e84:	9009      	str	r0, [sp, #36]	@ 0x24
 8004e86:	f000 fceb 	bl	8005860 <_localeconv_r>
 8004e8a:	6803      	ldr	r3, [r0, #0]
 8004e8c:	0018      	movs	r0, r3
 8004e8e:	930d      	str	r3, [sp, #52]	@ 0x34
 8004e90:	f7fb f93a 	bl	8000108 <strlen>
 8004e94:	2300      	movs	r3, #0
 8004e96:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004e98:	9314      	str	r3, [sp, #80]	@ 0x50
 8004e9a:	7e2b      	ldrb	r3, [r5, #24]
 8004e9c:	2207      	movs	r2, #7
 8004e9e:	930c      	str	r3, [sp, #48]	@ 0x30
 8004ea0:	682b      	ldr	r3, [r5, #0]
 8004ea2:	930e      	str	r3, [sp, #56]	@ 0x38
 8004ea4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8004ea6:	6823      	ldr	r3, [r4, #0]
 8004ea8:	05c9      	lsls	r1, r1, #23
 8004eaa:	d545      	bpl.n	8004f38 <_printf_float+0xc0>
 8004eac:	189b      	adds	r3, r3, r2
 8004eae:	4393      	bics	r3, r2
 8004eb0:	001a      	movs	r2, r3
 8004eb2:	3208      	adds	r2, #8
 8004eb4:	6022      	str	r2, [r4, #0]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	681e      	ldr	r6, [r3, #0]
 8004eba:	685f      	ldr	r7, [r3, #4]
 8004ebc:	007b      	lsls	r3, r7, #1
 8004ebe:	085b      	lsrs	r3, r3, #1
 8004ec0:	9311      	str	r3, [sp, #68]	@ 0x44
 8004ec2:	9610      	str	r6, [sp, #64]	@ 0x40
 8004ec4:	64ae      	str	r6, [r5, #72]	@ 0x48
 8004ec6:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8004ec8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8004eca:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8004ecc:	4ba7      	ldr	r3, [pc, #668]	@ (800516c <_printf_float+0x2f4>)
 8004ece:	4252      	negs	r2, r2
 8004ed0:	f7fd f8f6 	bl	80020c0 <__aeabi_dcmpun>
 8004ed4:	2800      	cmp	r0, #0
 8004ed6:	d131      	bne.n	8004f3c <_printf_float+0xc4>
 8004ed8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8004eda:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8004edc:	2201      	movs	r2, #1
 8004ede:	4ba3      	ldr	r3, [pc, #652]	@ (800516c <_printf_float+0x2f4>)
 8004ee0:	4252      	negs	r2, r2
 8004ee2:	f7fb fac3 	bl	800046c <__aeabi_dcmple>
 8004ee6:	2800      	cmp	r0, #0
 8004ee8:	d128      	bne.n	8004f3c <_printf_float+0xc4>
 8004eea:	2200      	movs	r2, #0
 8004eec:	2300      	movs	r3, #0
 8004eee:	0030      	movs	r0, r6
 8004ef0:	0039      	movs	r1, r7
 8004ef2:	f7fb fab1 	bl	8000458 <__aeabi_dcmplt>
 8004ef6:	2800      	cmp	r0, #0
 8004ef8:	d003      	beq.n	8004f02 <_printf_float+0x8a>
 8004efa:	002b      	movs	r3, r5
 8004efc:	222d      	movs	r2, #45	@ 0x2d
 8004efe:	3343      	adds	r3, #67	@ 0x43
 8004f00:	701a      	strb	r2, [r3, #0]
 8004f02:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004f04:	4f9a      	ldr	r7, [pc, #616]	@ (8005170 <_printf_float+0x2f8>)
 8004f06:	2b47      	cmp	r3, #71	@ 0x47
 8004f08:	d900      	bls.n	8004f0c <_printf_float+0x94>
 8004f0a:	4f9a      	ldr	r7, [pc, #616]	@ (8005174 <_printf_float+0x2fc>)
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	2400      	movs	r4, #0
 8004f10:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004f12:	612b      	str	r3, [r5, #16]
 8004f14:	3301      	adds	r3, #1
 8004f16:	439a      	bics	r2, r3
 8004f18:	602a      	str	r2, [r5, #0]
 8004f1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004f1c:	0029      	movs	r1, r5
 8004f1e:	9300      	str	r3, [sp, #0]
 8004f20:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004f22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004f24:	aa15      	add	r2, sp, #84	@ 0x54
 8004f26:	f000 f9e5 	bl	80052f4 <_printf_common>
 8004f2a:	3001      	adds	r0, #1
 8004f2c:	d000      	beq.n	8004f30 <_printf_float+0xb8>
 8004f2e:	e09f      	b.n	8005070 <_printf_float+0x1f8>
 8004f30:	2001      	movs	r0, #1
 8004f32:	4240      	negs	r0, r0
 8004f34:	b017      	add	sp, #92	@ 0x5c
 8004f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f38:	3307      	adds	r3, #7
 8004f3a:	e7b8      	b.n	8004eae <_printf_float+0x36>
 8004f3c:	0032      	movs	r2, r6
 8004f3e:	003b      	movs	r3, r7
 8004f40:	0030      	movs	r0, r6
 8004f42:	0039      	movs	r1, r7
 8004f44:	f7fd f8bc 	bl	80020c0 <__aeabi_dcmpun>
 8004f48:	2800      	cmp	r0, #0
 8004f4a:	d00b      	beq.n	8004f64 <_printf_float+0xec>
 8004f4c:	2f00      	cmp	r7, #0
 8004f4e:	da03      	bge.n	8004f58 <_printf_float+0xe0>
 8004f50:	002b      	movs	r3, r5
 8004f52:	222d      	movs	r2, #45	@ 0x2d
 8004f54:	3343      	adds	r3, #67	@ 0x43
 8004f56:	701a      	strb	r2, [r3, #0]
 8004f58:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004f5a:	4f87      	ldr	r7, [pc, #540]	@ (8005178 <_printf_float+0x300>)
 8004f5c:	2b47      	cmp	r3, #71	@ 0x47
 8004f5e:	d9d5      	bls.n	8004f0c <_printf_float+0x94>
 8004f60:	4f86      	ldr	r7, [pc, #536]	@ (800517c <_printf_float+0x304>)
 8004f62:	e7d3      	b.n	8004f0c <_printf_float+0x94>
 8004f64:	2220      	movs	r2, #32
 8004f66:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8004f68:	686b      	ldr	r3, [r5, #4]
 8004f6a:	4394      	bics	r4, r2
 8004f6c:	1c5a      	adds	r2, r3, #1
 8004f6e:	d146      	bne.n	8004ffe <_printf_float+0x186>
 8004f70:	3307      	adds	r3, #7
 8004f72:	606b      	str	r3, [r5, #4]
 8004f74:	2380      	movs	r3, #128	@ 0x80
 8004f76:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004f78:	00db      	lsls	r3, r3, #3
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	602b      	str	r3, [r5, #0]
 8004f80:	9206      	str	r2, [sp, #24]
 8004f82:	aa14      	add	r2, sp, #80	@ 0x50
 8004f84:	9205      	str	r2, [sp, #20]
 8004f86:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004f88:	a90a      	add	r1, sp, #40	@ 0x28
 8004f8a:	9204      	str	r2, [sp, #16]
 8004f8c:	aa13      	add	r2, sp, #76	@ 0x4c
 8004f8e:	9203      	str	r2, [sp, #12]
 8004f90:	2223      	movs	r2, #35	@ 0x23
 8004f92:	1852      	adds	r2, r2, r1
 8004f94:	9202      	str	r2, [sp, #8]
 8004f96:	9301      	str	r3, [sp, #4]
 8004f98:	686b      	ldr	r3, [r5, #4]
 8004f9a:	0032      	movs	r2, r6
 8004f9c:	9300      	str	r3, [sp, #0]
 8004f9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004fa0:	003b      	movs	r3, r7
 8004fa2:	f7ff fec3 	bl	8004d2c <__cvt>
 8004fa6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004fa8:	0007      	movs	r7, r0
 8004faa:	2c47      	cmp	r4, #71	@ 0x47
 8004fac:	d12d      	bne.n	800500a <_printf_float+0x192>
 8004fae:	1cd3      	adds	r3, r2, #3
 8004fb0:	db02      	blt.n	8004fb8 <_printf_float+0x140>
 8004fb2:	686b      	ldr	r3, [r5, #4]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	dd48      	ble.n	800504a <_printf_float+0x1d2>
 8004fb8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004fba:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8004fbc:	3b02      	subs	r3, #2
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	930c      	str	r3, [sp, #48]	@ 0x30
 8004fc2:	0028      	movs	r0, r5
 8004fc4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004fc6:	3901      	subs	r1, #1
 8004fc8:	3050      	adds	r0, #80	@ 0x50
 8004fca:	9113      	str	r1, [sp, #76]	@ 0x4c
 8004fcc:	f7ff ff14 	bl	8004df8 <__exponent>
 8004fd0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8004fd2:	0004      	movs	r4, r0
 8004fd4:	1813      	adds	r3, r2, r0
 8004fd6:	612b      	str	r3, [r5, #16]
 8004fd8:	2a01      	cmp	r2, #1
 8004fda:	dc02      	bgt.n	8004fe2 <_printf_float+0x16a>
 8004fdc:	682a      	ldr	r2, [r5, #0]
 8004fde:	07d2      	lsls	r2, r2, #31
 8004fe0:	d501      	bpl.n	8004fe6 <_printf_float+0x16e>
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	612b      	str	r3, [r5, #16]
 8004fe6:	2323      	movs	r3, #35	@ 0x23
 8004fe8:	aa0a      	add	r2, sp, #40	@ 0x28
 8004fea:	189b      	adds	r3, r3, r2
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d100      	bne.n	8004ff4 <_printf_float+0x17c>
 8004ff2:	e792      	b.n	8004f1a <_printf_float+0xa2>
 8004ff4:	002b      	movs	r3, r5
 8004ff6:	222d      	movs	r2, #45	@ 0x2d
 8004ff8:	3343      	adds	r3, #67	@ 0x43
 8004ffa:	701a      	strb	r2, [r3, #0]
 8004ffc:	e78d      	b.n	8004f1a <_printf_float+0xa2>
 8004ffe:	2c47      	cmp	r4, #71	@ 0x47
 8005000:	d1b8      	bne.n	8004f74 <_printf_float+0xfc>
 8005002:	2b00      	cmp	r3, #0
 8005004:	d1b6      	bne.n	8004f74 <_printf_float+0xfc>
 8005006:	3301      	adds	r3, #1
 8005008:	e7b3      	b.n	8004f72 <_printf_float+0xfa>
 800500a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800500c:	0011      	movs	r1, r2
 800500e:	2b65      	cmp	r3, #101	@ 0x65
 8005010:	d9d7      	bls.n	8004fc2 <_printf_float+0x14a>
 8005012:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005014:	2b66      	cmp	r3, #102	@ 0x66
 8005016:	d11a      	bne.n	800504e <_printf_float+0x1d6>
 8005018:	686b      	ldr	r3, [r5, #4]
 800501a:	2a00      	cmp	r2, #0
 800501c:	dd09      	ble.n	8005032 <_printf_float+0x1ba>
 800501e:	612a      	str	r2, [r5, #16]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d102      	bne.n	800502a <_printf_float+0x1b2>
 8005024:	6829      	ldr	r1, [r5, #0]
 8005026:	07c9      	lsls	r1, r1, #31
 8005028:	d50b      	bpl.n	8005042 <_printf_float+0x1ca>
 800502a:	3301      	adds	r3, #1
 800502c:	189b      	adds	r3, r3, r2
 800502e:	612b      	str	r3, [r5, #16]
 8005030:	e007      	b.n	8005042 <_printf_float+0x1ca>
 8005032:	2b00      	cmp	r3, #0
 8005034:	d103      	bne.n	800503e <_printf_float+0x1c6>
 8005036:	2201      	movs	r2, #1
 8005038:	6829      	ldr	r1, [r5, #0]
 800503a:	4211      	tst	r1, r2
 800503c:	d000      	beq.n	8005040 <_printf_float+0x1c8>
 800503e:	1c9a      	adds	r2, r3, #2
 8005040:	612a      	str	r2, [r5, #16]
 8005042:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005044:	2400      	movs	r4, #0
 8005046:	65ab      	str	r3, [r5, #88]	@ 0x58
 8005048:	e7cd      	b.n	8004fe6 <_printf_float+0x16e>
 800504a:	2367      	movs	r3, #103	@ 0x67
 800504c:	930c      	str	r3, [sp, #48]	@ 0x30
 800504e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8005050:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005052:	4299      	cmp	r1, r3
 8005054:	db06      	blt.n	8005064 <_printf_float+0x1ec>
 8005056:	682b      	ldr	r3, [r5, #0]
 8005058:	6129      	str	r1, [r5, #16]
 800505a:	07db      	lsls	r3, r3, #31
 800505c:	d5f1      	bpl.n	8005042 <_printf_float+0x1ca>
 800505e:	3101      	adds	r1, #1
 8005060:	6129      	str	r1, [r5, #16]
 8005062:	e7ee      	b.n	8005042 <_printf_float+0x1ca>
 8005064:	2201      	movs	r2, #1
 8005066:	2900      	cmp	r1, #0
 8005068:	dce0      	bgt.n	800502c <_printf_float+0x1b4>
 800506a:	1892      	adds	r2, r2, r2
 800506c:	1a52      	subs	r2, r2, r1
 800506e:	e7dd      	b.n	800502c <_printf_float+0x1b4>
 8005070:	682a      	ldr	r2, [r5, #0]
 8005072:	0553      	lsls	r3, r2, #21
 8005074:	d408      	bmi.n	8005088 <_printf_float+0x210>
 8005076:	692b      	ldr	r3, [r5, #16]
 8005078:	003a      	movs	r2, r7
 800507a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800507c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800507e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005080:	47a0      	blx	r4
 8005082:	3001      	adds	r0, #1
 8005084:	d129      	bne.n	80050da <_printf_float+0x262>
 8005086:	e753      	b.n	8004f30 <_printf_float+0xb8>
 8005088:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800508a:	2b65      	cmp	r3, #101	@ 0x65
 800508c:	d800      	bhi.n	8005090 <_printf_float+0x218>
 800508e:	e0da      	b.n	8005246 <_printf_float+0x3ce>
 8005090:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8005092:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8005094:	2200      	movs	r2, #0
 8005096:	2300      	movs	r3, #0
 8005098:	f7fb f9d8 	bl	800044c <__aeabi_dcmpeq>
 800509c:	2800      	cmp	r0, #0
 800509e:	d033      	beq.n	8005108 <_printf_float+0x290>
 80050a0:	2301      	movs	r3, #1
 80050a2:	4a37      	ldr	r2, [pc, #220]	@ (8005180 <_printf_float+0x308>)
 80050a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80050a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80050a8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80050aa:	47a0      	blx	r4
 80050ac:	3001      	adds	r0, #1
 80050ae:	d100      	bne.n	80050b2 <_printf_float+0x23a>
 80050b0:	e73e      	b.n	8004f30 <_printf_float+0xb8>
 80050b2:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80050b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80050b6:	42b3      	cmp	r3, r6
 80050b8:	db02      	blt.n	80050c0 <_printf_float+0x248>
 80050ba:	682b      	ldr	r3, [r5, #0]
 80050bc:	07db      	lsls	r3, r3, #31
 80050be:	d50c      	bpl.n	80050da <_printf_float+0x262>
 80050c0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80050c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80050c4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80050c6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80050c8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80050ca:	47a0      	blx	r4
 80050cc:	2400      	movs	r4, #0
 80050ce:	3001      	adds	r0, #1
 80050d0:	d100      	bne.n	80050d4 <_printf_float+0x25c>
 80050d2:	e72d      	b.n	8004f30 <_printf_float+0xb8>
 80050d4:	1e73      	subs	r3, r6, #1
 80050d6:	42a3      	cmp	r3, r4
 80050d8:	dc0a      	bgt.n	80050f0 <_printf_float+0x278>
 80050da:	682b      	ldr	r3, [r5, #0]
 80050dc:	079b      	lsls	r3, r3, #30
 80050de:	d500      	bpl.n	80050e2 <_printf_float+0x26a>
 80050e0:	e105      	b.n	80052ee <_printf_float+0x476>
 80050e2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80050e4:	68e8      	ldr	r0, [r5, #12]
 80050e6:	4298      	cmp	r0, r3
 80050e8:	db00      	blt.n	80050ec <_printf_float+0x274>
 80050ea:	e723      	b.n	8004f34 <_printf_float+0xbc>
 80050ec:	0018      	movs	r0, r3
 80050ee:	e721      	b.n	8004f34 <_printf_float+0xbc>
 80050f0:	002a      	movs	r2, r5
 80050f2:	2301      	movs	r3, #1
 80050f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80050f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80050f8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80050fa:	321a      	adds	r2, #26
 80050fc:	47b8      	blx	r7
 80050fe:	3001      	adds	r0, #1
 8005100:	d100      	bne.n	8005104 <_printf_float+0x28c>
 8005102:	e715      	b.n	8004f30 <_printf_float+0xb8>
 8005104:	3401      	adds	r4, #1
 8005106:	e7e5      	b.n	80050d4 <_printf_float+0x25c>
 8005108:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800510a:	2b00      	cmp	r3, #0
 800510c:	dc3a      	bgt.n	8005184 <_printf_float+0x30c>
 800510e:	2301      	movs	r3, #1
 8005110:	4a1b      	ldr	r2, [pc, #108]	@ (8005180 <_printf_float+0x308>)
 8005112:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005114:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005116:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005118:	47a0      	blx	r4
 800511a:	3001      	adds	r0, #1
 800511c:	d100      	bne.n	8005120 <_printf_float+0x2a8>
 800511e:	e707      	b.n	8004f30 <_printf_float+0xb8>
 8005120:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8005122:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005124:	4333      	orrs	r3, r6
 8005126:	d102      	bne.n	800512e <_printf_float+0x2b6>
 8005128:	682b      	ldr	r3, [r5, #0]
 800512a:	07db      	lsls	r3, r3, #31
 800512c:	d5d5      	bpl.n	80050da <_printf_float+0x262>
 800512e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005130:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005132:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005134:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005136:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005138:	47a0      	blx	r4
 800513a:	2300      	movs	r3, #0
 800513c:	3001      	adds	r0, #1
 800513e:	d100      	bne.n	8005142 <_printf_float+0x2ca>
 8005140:	e6f6      	b.n	8004f30 <_printf_float+0xb8>
 8005142:	930c      	str	r3, [sp, #48]	@ 0x30
 8005144:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005146:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005148:	425b      	negs	r3, r3
 800514a:	4293      	cmp	r3, r2
 800514c:	dc01      	bgt.n	8005152 <_printf_float+0x2da>
 800514e:	0033      	movs	r3, r6
 8005150:	e792      	b.n	8005078 <_printf_float+0x200>
 8005152:	002a      	movs	r2, r5
 8005154:	2301      	movs	r3, #1
 8005156:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005158:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800515a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800515c:	321a      	adds	r2, #26
 800515e:	47a0      	blx	r4
 8005160:	3001      	adds	r0, #1
 8005162:	d100      	bne.n	8005166 <_printf_float+0x2ee>
 8005164:	e6e4      	b.n	8004f30 <_printf_float+0xb8>
 8005166:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005168:	3301      	adds	r3, #1
 800516a:	e7ea      	b.n	8005142 <_printf_float+0x2ca>
 800516c:	7fefffff 	.word	0x7fefffff
 8005170:	08007be4 	.word	0x08007be4
 8005174:	08007be8 	.word	0x08007be8
 8005178:	08007bec 	.word	0x08007bec
 800517c:	08007bf0 	.word	0x08007bf0
 8005180:	08007bf4 	.word	0x08007bf4
 8005184:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005186:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8005188:	930c      	str	r3, [sp, #48]	@ 0x30
 800518a:	429e      	cmp	r6, r3
 800518c:	dd00      	ble.n	8005190 <_printf_float+0x318>
 800518e:	001e      	movs	r6, r3
 8005190:	2e00      	cmp	r6, #0
 8005192:	dc31      	bgt.n	80051f8 <_printf_float+0x380>
 8005194:	43f3      	mvns	r3, r6
 8005196:	2400      	movs	r4, #0
 8005198:	17db      	asrs	r3, r3, #31
 800519a:	4033      	ands	r3, r6
 800519c:	930e      	str	r3, [sp, #56]	@ 0x38
 800519e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 80051a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80051a2:	1af3      	subs	r3, r6, r3
 80051a4:	42a3      	cmp	r3, r4
 80051a6:	dc30      	bgt.n	800520a <_printf_float+0x392>
 80051a8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80051aa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80051ac:	429a      	cmp	r2, r3
 80051ae:	dc38      	bgt.n	8005222 <_printf_float+0x3aa>
 80051b0:	682b      	ldr	r3, [r5, #0]
 80051b2:	07db      	lsls	r3, r3, #31
 80051b4:	d435      	bmi.n	8005222 <_printf_float+0x3aa>
 80051b6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80051b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80051ba:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80051bc:	1b9b      	subs	r3, r3, r6
 80051be:	1b14      	subs	r4, r2, r4
 80051c0:	429c      	cmp	r4, r3
 80051c2:	dd00      	ble.n	80051c6 <_printf_float+0x34e>
 80051c4:	001c      	movs	r4, r3
 80051c6:	2c00      	cmp	r4, #0
 80051c8:	dc34      	bgt.n	8005234 <_printf_float+0x3bc>
 80051ca:	43e3      	mvns	r3, r4
 80051cc:	2600      	movs	r6, #0
 80051ce:	17db      	asrs	r3, r3, #31
 80051d0:	401c      	ands	r4, r3
 80051d2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80051d4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	1b1b      	subs	r3, r3, r4
 80051da:	42b3      	cmp	r3, r6
 80051dc:	dc00      	bgt.n	80051e0 <_printf_float+0x368>
 80051de:	e77c      	b.n	80050da <_printf_float+0x262>
 80051e0:	002a      	movs	r2, r5
 80051e2:	2301      	movs	r3, #1
 80051e4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80051e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80051e8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80051ea:	321a      	adds	r2, #26
 80051ec:	47b8      	blx	r7
 80051ee:	3001      	adds	r0, #1
 80051f0:	d100      	bne.n	80051f4 <_printf_float+0x37c>
 80051f2:	e69d      	b.n	8004f30 <_printf_float+0xb8>
 80051f4:	3601      	adds	r6, #1
 80051f6:	e7ec      	b.n	80051d2 <_printf_float+0x35a>
 80051f8:	0033      	movs	r3, r6
 80051fa:	003a      	movs	r2, r7
 80051fc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80051fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005200:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005202:	47a0      	blx	r4
 8005204:	3001      	adds	r0, #1
 8005206:	d1c5      	bne.n	8005194 <_printf_float+0x31c>
 8005208:	e692      	b.n	8004f30 <_printf_float+0xb8>
 800520a:	002a      	movs	r2, r5
 800520c:	2301      	movs	r3, #1
 800520e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005210:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005212:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8005214:	321a      	adds	r2, #26
 8005216:	47b0      	blx	r6
 8005218:	3001      	adds	r0, #1
 800521a:	d100      	bne.n	800521e <_printf_float+0x3a6>
 800521c:	e688      	b.n	8004f30 <_printf_float+0xb8>
 800521e:	3401      	adds	r4, #1
 8005220:	e7bd      	b.n	800519e <_printf_float+0x326>
 8005222:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005224:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005226:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005228:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800522a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800522c:	47a0      	blx	r4
 800522e:	3001      	adds	r0, #1
 8005230:	d1c1      	bne.n	80051b6 <_printf_float+0x33e>
 8005232:	e67d      	b.n	8004f30 <_printf_float+0xb8>
 8005234:	19ba      	adds	r2, r7, r6
 8005236:	0023      	movs	r3, r4
 8005238:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800523a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800523c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800523e:	47b0      	blx	r6
 8005240:	3001      	adds	r0, #1
 8005242:	d1c2      	bne.n	80051ca <_printf_float+0x352>
 8005244:	e674      	b.n	8004f30 <_printf_float+0xb8>
 8005246:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005248:	930c      	str	r3, [sp, #48]	@ 0x30
 800524a:	2b01      	cmp	r3, #1
 800524c:	dc02      	bgt.n	8005254 <_printf_float+0x3dc>
 800524e:	2301      	movs	r3, #1
 8005250:	421a      	tst	r2, r3
 8005252:	d039      	beq.n	80052c8 <_printf_float+0x450>
 8005254:	2301      	movs	r3, #1
 8005256:	003a      	movs	r2, r7
 8005258:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800525a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800525c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800525e:	47b0      	blx	r6
 8005260:	3001      	adds	r0, #1
 8005262:	d100      	bne.n	8005266 <_printf_float+0x3ee>
 8005264:	e664      	b.n	8004f30 <_printf_float+0xb8>
 8005266:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005268:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800526a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800526c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800526e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8005270:	47b0      	blx	r6
 8005272:	3001      	adds	r0, #1
 8005274:	d100      	bne.n	8005278 <_printf_float+0x400>
 8005276:	e65b      	b.n	8004f30 <_printf_float+0xb8>
 8005278:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800527a:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800527c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800527e:	2200      	movs	r2, #0
 8005280:	3b01      	subs	r3, #1
 8005282:	930c      	str	r3, [sp, #48]	@ 0x30
 8005284:	2300      	movs	r3, #0
 8005286:	f7fb f8e1 	bl	800044c <__aeabi_dcmpeq>
 800528a:	2800      	cmp	r0, #0
 800528c:	d11a      	bne.n	80052c4 <_printf_float+0x44c>
 800528e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005290:	1c7a      	adds	r2, r7, #1
 8005292:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005294:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005296:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8005298:	47b0      	blx	r6
 800529a:	3001      	adds	r0, #1
 800529c:	d10e      	bne.n	80052bc <_printf_float+0x444>
 800529e:	e647      	b.n	8004f30 <_printf_float+0xb8>
 80052a0:	002a      	movs	r2, r5
 80052a2:	2301      	movs	r3, #1
 80052a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80052a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80052a8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80052aa:	321a      	adds	r2, #26
 80052ac:	47b8      	blx	r7
 80052ae:	3001      	adds	r0, #1
 80052b0:	d100      	bne.n	80052b4 <_printf_float+0x43c>
 80052b2:	e63d      	b.n	8004f30 <_printf_float+0xb8>
 80052b4:	3601      	adds	r6, #1
 80052b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80052b8:	429e      	cmp	r6, r3
 80052ba:	dbf1      	blt.n	80052a0 <_printf_float+0x428>
 80052bc:	002a      	movs	r2, r5
 80052be:	0023      	movs	r3, r4
 80052c0:	3250      	adds	r2, #80	@ 0x50
 80052c2:	e6da      	b.n	800507a <_printf_float+0x202>
 80052c4:	2600      	movs	r6, #0
 80052c6:	e7f6      	b.n	80052b6 <_printf_float+0x43e>
 80052c8:	003a      	movs	r2, r7
 80052ca:	e7e2      	b.n	8005292 <_printf_float+0x41a>
 80052cc:	002a      	movs	r2, r5
 80052ce:	2301      	movs	r3, #1
 80052d0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80052d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80052d4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80052d6:	3219      	adds	r2, #25
 80052d8:	47b0      	blx	r6
 80052da:	3001      	adds	r0, #1
 80052dc:	d100      	bne.n	80052e0 <_printf_float+0x468>
 80052de:	e627      	b.n	8004f30 <_printf_float+0xb8>
 80052e0:	3401      	adds	r4, #1
 80052e2:	68eb      	ldr	r3, [r5, #12]
 80052e4:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80052e6:	1a9b      	subs	r3, r3, r2
 80052e8:	42a3      	cmp	r3, r4
 80052ea:	dcef      	bgt.n	80052cc <_printf_float+0x454>
 80052ec:	e6f9      	b.n	80050e2 <_printf_float+0x26a>
 80052ee:	2400      	movs	r4, #0
 80052f0:	e7f7      	b.n	80052e2 <_printf_float+0x46a>
 80052f2:	46c0      	nop			@ (mov r8, r8)

080052f4 <_printf_common>:
 80052f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80052f6:	0016      	movs	r6, r2
 80052f8:	9301      	str	r3, [sp, #4]
 80052fa:	688a      	ldr	r2, [r1, #8]
 80052fc:	690b      	ldr	r3, [r1, #16]
 80052fe:	000c      	movs	r4, r1
 8005300:	9000      	str	r0, [sp, #0]
 8005302:	4293      	cmp	r3, r2
 8005304:	da00      	bge.n	8005308 <_printf_common+0x14>
 8005306:	0013      	movs	r3, r2
 8005308:	0022      	movs	r2, r4
 800530a:	6033      	str	r3, [r6, #0]
 800530c:	3243      	adds	r2, #67	@ 0x43
 800530e:	7812      	ldrb	r2, [r2, #0]
 8005310:	2a00      	cmp	r2, #0
 8005312:	d001      	beq.n	8005318 <_printf_common+0x24>
 8005314:	3301      	adds	r3, #1
 8005316:	6033      	str	r3, [r6, #0]
 8005318:	6823      	ldr	r3, [r4, #0]
 800531a:	069b      	lsls	r3, r3, #26
 800531c:	d502      	bpl.n	8005324 <_printf_common+0x30>
 800531e:	6833      	ldr	r3, [r6, #0]
 8005320:	3302      	adds	r3, #2
 8005322:	6033      	str	r3, [r6, #0]
 8005324:	6822      	ldr	r2, [r4, #0]
 8005326:	2306      	movs	r3, #6
 8005328:	0015      	movs	r5, r2
 800532a:	401d      	ands	r5, r3
 800532c:	421a      	tst	r2, r3
 800532e:	d027      	beq.n	8005380 <_printf_common+0x8c>
 8005330:	0023      	movs	r3, r4
 8005332:	3343      	adds	r3, #67	@ 0x43
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	1e5a      	subs	r2, r3, #1
 8005338:	4193      	sbcs	r3, r2
 800533a:	6822      	ldr	r2, [r4, #0]
 800533c:	0692      	lsls	r2, r2, #26
 800533e:	d430      	bmi.n	80053a2 <_printf_common+0xae>
 8005340:	0022      	movs	r2, r4
 8005342:	9901      	ldr	r1, [sp, #4]
 8005344:	9800      	ldr	r0, [sp, #0]
 8005346:	9d08      	ldr	r5, [sp, #32]
 8005348:	3243      	adds	r2, #67	@ 0x43
 800534a:	47a8      	blx	r5
 800534c:	3001      	adds	r0, #1
 800534e:	d025      	beq.n	800539c <_printf_common+0xa8>
 8005350:	2206      	movs	r2, #6
 8005352:	6823      	ldr	r3, [r4, #0]
 8005354:	2500      	movs	r5, #0
 8005356:	4013      	ands	r3, r2
 8005358:	2b04      	cmp	r3, #4
 800535a:	d105      	bne.n	8005368 <_printf_common+0x74>
 800535c:	6833      	ldr	r3, [r6, #0]
 800535e:	68e5      	ldr	r5, [r4, #12]
 8005360:	1aed      	subs	r5, r5, r3
 8005362:	43eb      	mvns	r3, r5
 8005364:	17db      	asrs	r3, r3, #31
 8005366:	401d      	ands	r5, r3
 8005368:	68a3      	ldr	r3, [r4, #8]
 800536a:	6922      	ldr	r2, [r4, #16]
 800536c:	4293      	cmp	r3, r2
 800536e:	dd01      	ble.n	8005374 <_printf_common+0x80>
 8005370:	1a9b      	subs	r3, r3, r2
 8005372:	18ed      	adds	r5, r5, r3
 8005374:	2600      	movs	r6, #0
 8005376:	42b5      	cmp	r5, r6
 8005378:	d120      	bne.n	80053bc <_printf_common+0xc8>
 800537a:	2000      	movs	r0, #0
 800537c:	e010      	b.n	80053a0 <_printf_common+0xac>
 800537e:	3501      	adds	r5, #1
 8005380:	68e3      	ldr	r3, [r4, #12]
 8005382:	6832      	ldr	r2, [r6, #0]
 8005384:	1a9b      	subs	r3, r3, r2
 8005386:	42ab      	cmp	r3, r5
 8005388:	ddd2      	ble.n	8005330 <_printf_common+0x3c>
 800538a:	0022      	movs	r2, r4
 800538c:	2301      	movs	r3, #1
 800538e:	9901      	ldr	r1, [sp, #4]
 8005390:	9800      	ldr	r0, [sp, #0]
 8005392:	9f08      	ldr	r7, [sp, #32]
 8005394:	3219      	adds	r2, #25
 8005396:	47b8      	blx	r7
 8005398:	3001      	adds	r0, #1
 800539a:	d1f0      	bne.n	800537e <_printf_common+0x8a>
 800539c:	2001      	movs	r0, #1
 800539e:	4240      	negs	r0, r0
 80053a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80053a2:	2030      	movs	r0, #48	@ 0x30
 80053a4:	18e1      	adds	r1, r4, r3
 80053a6:	3143      	adds	r1, #67	@ 0x43
 80053a8:	7008      	strb	r0, [r1, #0]
 80053aa:	0021      	movs	r1, r4
 80053ac:	1c5a      	adds	r2, r3, #1
 80053ae:	3145      	adds	r1, #69	@ 0x45
 80053b0:	7809      	ldrb	r1, [r1, #0]
 80053b2:	18a2      	adds	r2, r4, r2
 80053b4:	3243      	adds	r2, #67	@ 0x43
 80053b6:	3302      	adds	r3, #2
 80053b8:	7011      	strb	r1, [r2, #0]
 80053ba:	e7c1      	b.n	8005340 <_printf_common+0x4c>
 80053bc:	0022      	movs	r2, r4
 80053be:	2301      	movs	r3, #1
 80053c0:	9901      	ldr	r1, [sp, #4]
 80053c2:	9800      	ldr	r0, [sp, #0]
 80053c4:	9f08      	ldr	r7, [sp, #32]
 80053c6:	321a      	adds	r2, #26
 80053c8:	47b8      	blx	r7
 80053ca:	3001      	adds	r0, #1
 80053cc:	d0e6      	beq.n	800539c <_printf_common+0xa8>
 80053ce:	3601      	adds	r6, #1
 80053d0:	e7d1      	b.n	8005376 <_printf_common+0x82>
	...

080053d4 <_printf_i>:
 80053d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053d6:	b08b      	sub	sp, #44	@ 0x2c
 80053d8:	9206      	str	r2, [sp, #24]
 80053da:	000a      	movs	r2, r1
 80053dc:	3243      	adds	r2, #67	@ 0x43
 80053de:	9307      	str	r3, [sp, #28]
 80053e0:	9005      	str	r0, [sp, #20]
 80053e2:	9203      	str	r2, [sp, #12]
 80053e4:	7e0a      	ldrb	r2, [r1, #24]
 80053e6:	000c      	movs	r4, r1
 80053e8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80053ea:	2a78      	cmp	r2, #120	@ 0x78
 80053ec:	d809      	bhi.n	8005402 <_printf_i+0x2e>
 80053ee:	2a62      	cmp	r2, #98	@ 0x62
 80053f0:	d80b      	bhi.n	800540a <_printf_i+0x36>
 80053f2:	2a00      	cmp	r2, #0
 80053f4:	d100      	bne.n	80053f8 <_printf_i+0x24>
 80053f6:	e0bc      	b.n	8005572 <_printf_i+0x19e>
 80053f8:	497b      	ldr	r1, [pc, #492]	@ (80055e8 <_printf_i+0x214>)
 80053fa:	9104      	str	r1, [sp, #16]
 80053fc:	2a58      	cmp	r2, #88	@ 0x58
 80053fe:	d100      	bne.n	8005402 <_printf_i+0x2e>
 8005400:	e090      	b.n	8005524 <_printf_i+0x150>
 8005402:	0025      	movs	r5, r4
 8005404:	3542      	adds	r5, #66	@ 0x42
 8005406:	702a      	strb	r2, [r5, #0]
 8005408:	e022      	b.n	8005450 <_printf_i+0x7c>
 800540a:	0010      	movs	r0, r2
 800540c:	3863      	subs	r0, #99	@ 0x63
 800540e:	2815      	cmp	r0, #21
 8005410:	d8f7      	bhi.n	8005402 <_printf_i+0x2e>
 8005412:	f7fa fe8b 	bl	800012c <__gnu_thumb1_case_shi>
 8005416:	0016      	.short	0x0016
 8005418:	fff6001f 	.word	0xfff6001f
 800541c:	fff6fff6 	.word	0xfff6fff6
 8005420:	001ffff6 	.word	0x001ffff6
 8005424:	fff6fff6 	.word	0xfff6fff6
 8005428:	fff6fff6 	.word	0xfff6fff6
 800542c:	003600a1 	.word	0x003600a1
 8005430:	fff60080 	.word	0xfff60080
 8005434:	00b2fff6 	.word	0x00b2fff6
 8005438:	0036fff6 	.word	0x0036fff6
 800543c:	fff6fff6 	.word	0xfff6fff6
 8005440:	0084      	.short	0x0084
 8005442:	0025      	movs	r5, r4
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	3542      	adds	r5, #66	@ 0x42
 8005448:	1d11      	adds	r1, r2, #4
 800544a:	6019      	str	r1, [r3, #0]
 800544c:	6813      	ldr	r3, [r2, #0]
 800544e:	702b      	strb	r3, [r5, #0]
 8005450:	2301      	movs	r3, #1
 8005452:	e0a0      	b.n	8005596 <_printf_i+0x1c2>
 8005454:	6818      	ldr	r0, [r3, #0]
 8005456:	6809      	ldr	r1, [r1, #0]
 8005458:	1d02      	adds	r2, r0, #4
 800545a:	060d      	lsls	r5, r1, #24
 800545c:	d50b      	bpl.n	8005476 <_printf_i+0xa2>
 800545e:	6806      	ldr	r6, [r0, #0]
 8005460:	601a      	str	r2, [r3, #0]
 8005462:	2e00      	cmp	r6, #0
 8005464:	da03      	bge.n	800546e <_printf_i+0x9a>
 8005466:	232d      	movs	r3, #45	@ 0x2d
 8005468:	9a03      	ldr	r2, [sp, #12]
 800546a:	4276      	negs	r6, r6
 800546c:	7013      	strb	r3, [r2, #0]
 800546e:	4b5e      	ldr	r3, [pc, #376]	@ (80055e8 <_printf_i+0x214>)
 8005470:	270a      	movs	r7, #10
 8005472:	9304      	str	r3, [sp, #16]
 8005474:	e018      	b.n	80054a8 <_printf_i+0xd4>
 8005476:	6806      	ldr	r6, [r0, #0]
 8005478:	601a      	str	r2, [r3, #0]
 800547a:	0649      	lsls	r1, r1, #25
 800547c:	d5f1      	bpl.n	8005462 <_printf_i+0x8e>
 800547e:	b236      	sxth	r6, r6
 8005480:	e7ef      	b.n	8005462 <_printf_i+0x8e>
 8005482:	6808      	ldr	r0, [r1, #0]
 8005484:	6819      	ldr	r1, [r3, #0]
 8005486:	c940      	ldmia	r1!, {r6}
 8005488:	0605      	lsls	r5, r0, #24
 800548a:	d402      	bmi.n	8005492 <_printf_i+0xbe>
 800548c:	0640      	lsls	r0, r0, #25
 800548e:	d500      	bpl.n	8005492 <_printf_i+0xbe>
 8005490:	b2b6      	uxth	r6, r6
 8005492:	6019      	str	r1, [r3, #0]
 8005494:	4b54      	ldr	r3, [pc, #336]	@ (80055e8 <_printf_i+0x214>)
 8005496:	270a      	movs	r7, #10
 8005498:	9304      	str	r3, [sp, #16]
 800549a:	2a6f      	cmp	r2, #111	@ 0x6f
 800549c:	d100      	bne.n	80054a0 <_printf_i+0xcc>
 800549e:	3f02      	subs	r7, #2
 80054a0:	0023      	movs	r3, r4
 80054a2:	2200      	movs	r2, #0
 80054a4:	3343      	adds	r3, #67	@ 0x43
 80054a6:	701a      	strb	r2, [r3, #0]
 80054a8:	6863      	ldr	r3, [r4, #4]
 80054aa:	60a3      	str	r3, [r4, #8]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	db03      	blt.n	80054b8 <_printf_i+0xe4>
 80054b0:	2104      	movs	r1, #4
 80054b2:	6822      	ldr	r2, [r4, #0]
 80054b4:	438a      	bics	r2, r1
 80054b6:	6022      	str	r2, [r4, #0]
 80054b8:	2e00      	cmp	r6, #0
 80054ba:	d102      	bne.n	80054c2 <_printf_i+0xee>
 80054bc:	9d03      	ldr	r5, [sp, #12]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00c      	beq.n	80054dc <_printf_i+0x108>
 80054c2:	9d03      	ldr	r5, [sp, #12]
 80054c4:	0030      	movs	r0, r6
 80054c6:	0039      	movs	r1, r7
 80054c8:	f7fa fec0 	bl	800024c <__aeabi_uidivmod>
 80054cc:	9b04      	ldr	r3, [sp, #16]
 80054ce:	3d01      	subs	r5, #1
 80054d0:	5c5b      	ldrb	r3, [r3, r1]
 80054d2:	702b      	strb	r3, [r5, #0]
 80054d4:	0033      	movs	r3, r6
 80054d6:	0006      	movs	r6, r0
 80054d8:	429f      	cmp	r7, r3
 80054da:	d9f3      	bls.n	80054c4 <_printf_i+0xf0>
 80054dc:	2f08      	cmp	r7, #8
 80054de:	d109      	bne.n	80054f4 <_printf_i+0x120>
 80054e0:	6823      	ldr	r3, [r4, #0]
 80054e2:	07db      	lsls	r3, r3, #31
 80054e4:	d506      	bpl.n	80054f4 <_printf_i+0x120>
 80054e6:	6862      	ldr	r2, [r4, #4]
 80054e8:	6923      	ldr	r3, [r4, #16]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	dc02      	bgt.n	80054f4 <_printf_i+0x120>
 80054ee:	2330      	movs	r3, #48	@ 0x30
 80054f0:	3d01      	subs	r5, #1
 80054f2:	702b      	strb	r3, [r5, #0]
 80054f4:	9b03      	ldr	r3, [sp, #12]
 80054f6:	1b5b      	subs	r3, r3, r5
 80054f8:	6123      	str	r3, [r4, #16]
 80054fa:	9b07      	ldr	r3, [sp, #28]
 80054fc:	0021      	movs	r1, r4
 80054fe:	9300      	str	r3, [sp, #0]
 8005500:	9805      	ldr	r0, [sp, #20]
 8005502:	9b06      	ldr	r3, [sp, #24]
 8005504:	aa09      	add	r2, sp, #36	@ 0x24
 8005506:	f7ff fef5 	bl	80052f4 <_printf_common>
 800550a:	3001      	adds	r0, #1
 800550c:	d148      	bne.n	80055a0 <_printf_i+0x1cc>
 800550e:	2001      	movs	r0, #1
 8005510:	4240      	negs	r0, r0
 8005512:	b00b      	add	sp, #44	@ 0x2c
 8005514:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005516:	2220      	movs	r2, #32
 8005518:	6809      	ldr	r1, [r1, #0]
 800551a:	430a      	orrs	r2, r1
 800551c:	6022      	str	r2, [r4, #0]
 800551e:	2278      	movs	r2, #120	@ 0x78
 8005520:	4932      	ldr	r1, [pc, #200]	@ (80055ec <_printf_i+0x218>)
 8005522:	9104      	str	r1, [sp, #16]
 8005524:	0021      	movs	r1, r4
 8005526:	3145      	adds	r1, #69	@ 0x45
 8005528:	700a      	strb	r2, [r1, #0]
 800552a:	6819      	ldr	r1, [r3, #0]
 800552c:	6822      	ldr	r2, [r4, #0]
 800552e:	c940      	ldmia	r1!, {r6}
 8005530:	0610      	lsls	r0, r2, #24
 8005532:	d402      	bmi.n	800553a <_printf_i+0x166>
 8005534:	0650      	lsls	r0, r2, #25
 8005536:	d500      	bpl.n	800553a <_printf_i+0x166>
 8005538:	b2b6      	uxth	r6, r6
 800553a:	6019      	str	r1, [r3, #0]
 800553c:	07d3      	lsls	r3, r2, #31
 800553e:	d502      	bpl.n	8005546 <_printf_i+0x172>
 8005540:	2320      	movs	r3, #32
 8005542:	4313      	orrs	r3, r2
 8005544:	6023      	str	r3, [r4, #0]
 8005546:	2e00      	cmp	r6, #0
 8005548:	d001      	beq.n	800554e <_printf_i+0x17a>
 800554a:	2710      	movs	r7, #16
 800554c:	e7a8      	b.n	80054a0 <_printf_i+0xcc>
 800554e:	2220      	movs	r2, #32
 8005550:	6823      	ldr	r3, [r4, #0]
 8005552:	4393      	bics	r3, r2
 8005554:	6023      	str	r3, [r4, #0]
 8005556:	e7f8      	b.n	800554a <_printf_i+0x176>
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	680d      	ldr	r5, [r1, #0]
 800555c:	1d10      	adds	r0, r2, #4
 800555e:	6949      	ldr	r1, [r1, #20]
 8005560:	6018      	str	r0, [r3, #0]
 8005562:	6813      	ldr	r3, [r2, #0]
 8005564:	062e      	lsls	r6, r5, #24
 8005566:	d501      	bpl.n	800556c <_printf_i+0x198>
 8005568:	6019      	str	r1, [r3, #0]
 800556a:	e002      	b.n	8005572 <_printf_i+0x19e>
 800556c:	066d      	lsls	r5, r5, #25
 800556e:	d5fb      	bpl.n	8005568 <_printf_i+0x194>
 8005570:	8019      	strh	r1, [r3, #0]
 8005572:	2300      	movs	r3, #0
 8005574:	9d03      	ldr	r5, [sp, #12]
 8005576:	6123      	str	r3, [r4, #16]
 8005578:	e7bf      	b.n	80054fa <_printf_i+0x126>
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	1d11      	adds	r1, r2, #4
 800557e:	6019      	str	r1, [r3, #0]
 8005580:	6815      	ldr	r5, [r2, #0]
 8005582:	2100      	movs	r1, #0
 8005584:	0028      	movs	r0, r5
 8005586:	6862      	ldr	r2, [r4, #4]
 8005588:	f000 f9e9 	bl	800595e <memchr>
 800558c:	2800      	cmp	r0, #0
 800558e:	d001      	beq.n	8005594 <_printf_i+0x1c0>
 8005590:	1b40      	subs	r0, r0, r5
 8005592:	6060      	str	r0, [r4, #4]
 8005594:	6863      	ldr	r3, [r4, #4]
 8005596:	6123      	str	r3, [r4, #16]
 8005598:	2300      	movs	r3, #0
 800559a:	9a03      	ldr	r2, [sp, #12]
 800559c:	7013      	strb	r3, [r2, #0]
 800559e:	e7ac      	b.n	80054fa <_printf_i+0x126>
 80055a0:	002a      	movs	r2, r5
 80055a2:	6923      	ldr	r3, [r4, #16]
 80055a4:	9906      	ldr	r1, [sp, #24]
 80055a6:	9805      	ldr	r0, [sp, #20]
 80055a8:	9d07      	ldr	r5, [sp, #28]
 80055aa:	47a8      	blx	r5
 80055ac:	3001      	adds	r0, #1
 80055ae:	d0ae      	beq.n	800550e <_printf_i+0x13a>
 80055b0:	6823      	ldr	r3, [r4, #0]
 80055b2:	079b      	lsls	r3, r3, #30
 80055b4:	d415      	bmi.n	80055e2 <_printf_i+0x20e>
 80055b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055b8:	68e0      	ldr	r0, [r4, #12]
 80055ba:	4298      	cmp	r0, r3
 80055bc:	daa9      	bge.n	8005512 <_printf_i+0x13e>
 80055be:	0018      	movs	r0, r3
 80055c0:	e7a7      	b.n	8005512 <_printf_i+0x13e>
 80055c2:	0022      	movs	r2, r4
 80055c4:	2301      	movs	r3, #1
 80055c6:	9906      	ldr	r1, [sp, #24]
 80055c8:	9805      	ldr	r0, [sp, #20]
 80055ca:	9e07      	ldr	r6, [sp, #28]
 80055cc:	3219      	adds	r2, #25
 80055ce:	47b0      	blx	r6
 80055d0:	3001      	adds	r0, #1
 80055d2:	d09c      	beq.n	800550e <_printf_i+0x13a>
 80055d4:	3501      	adds	r5, #1
 80055d6:	68e3      	ldr	r3, [r4, #12]
 80055d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80055da:	1a9b      	subs	r3, r3, r2
 80055dc:	42ab      	cmp	r3, r5
 80055de:	dcf0      	bgt.n	80055c2 <_printf_i+0x1ee>
 80055e0:	e7e9      	b.n	80055b6 <_printf_i+0x1e2>
 80055e2:	2500      	movs	r5, #0
 80055e4:	e7f7      	b.n	80055d6 <_printf_i+0x202>
 80055e6:	46c0      	nop			@ (mov r8, r8)
 80055e8:	08007bf6 	.word	0x08007bf6
 80055ec:	08007c07 	.word	0x08007c07

080055f0 <std>:
 80055f0:	2300      	movs	r3, #0
 80055f2:	b510      	push	{r4, lr}
 80055f4:	0004      	movs	r4, r0
 80055f6:	6003      	str	r3, [r0, #0]
 80055f8:	6043      	str	r3, [r0, #4]
 80055fa:	6083      	str	r3, [r0, #8]
 80055fc:	8181      	strh	r1, [r0, #12]
 80055fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8005600:	81c2      	strh	r2, [r0, #14]
 8005602:	6103      	str	r3, [r0, #16]
 8005604:	6143      	str	r3, [r0, #20]
 8005606:	6183      	str	r3, [r0, #24]
 8005608:	0019      	movs	r1, r3
 800560a:	2208      	movs	r2, #8
 800560c:	305c      	adds	r0, #92	@ 0x5c
 800560e:	f000 f91f 	bl	8005850 <memset>
 8005612:	4b0b      	ldr	r3, [pc, #44]	@ (8005640 <std+0x50>)
 8005614:	6224      	str	r4, [r4, #32]
 8005616:	6263      	str	r3, [r4, #36]	@ 0x24
 8005618:	4b0a      	ldr	r3, [pc, #40]	@ (8005644 <std+0x54>)
 800561a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800561c:	4b0a      	ldr	r3, [pc, #40]	@ (8005648 <std+0x58>)
 800561e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005620:	4b0a      	ldr	r3, [pc, #40]	@ (800564c <std+0x5c>)
 8005622:	6323      	str	r3, [r4, #48]	@ 0x30
 8005624:	4b0a      	ldr	r3, [pc, #40]	@ (8005650 <std+0x60>)
 8005626:	429c      	cmp	r4, r3
 8005628:	d005      	beq.n	8005636 <std+0x46>
 800562a:	4b0a      	ldr	r3, [pc, #40]	@ (8005654 <std+0x64>)
 800562c:	429c      	cmp	r4, r3
 800562e:	d002      	beq.n	8005636 <std+0x46>
 8005630:	4b09      	ldr	r3, [pc, #36]	@ (8005658 <std+0x68>)
 8005632:	429c      	cmp	r4, r3
 8005634:	d103      	bne.n	800563e <std+0x4e>
 8005636:	0020      	movs	r0, r4
 8005638:	3058      	adds	r0, #88	@ 0x58
 800563a:	f000 f98d 	bl	8005958 <__retarget_lock_init_recursive>
 800563e:	bd10      	pop	{r4, pc}
 8005640:	080057b9 	.word	0x080057b9
 8005644:	080057e1 	.word	0x080057e1
 8005648:	08005819 	.word	0x08005819
 800564c:	08005845 	.word	0x08005845
 8005650:	200002c0 	.word	0x200002c0
 8005654:	20000328 	.word	0x20000328
 8005658:	20000390 	.word	0x20000390

0800565c <stdio_exit_handler>:
 800565c:	b510      	push	{r4, lr}
 800565e:	4a03      	ldr	r2, [pc, #12]	@ (800566c <stdio_exit_handler+0x10>)
 8005660:	4903      	ldr	r1, [pc, #12]	@ (8005670 <stdio_exit_handler+0x14>)
 8005662:	4804      	ldr	r0, [pc, #16]	@ (8005674 <stdio_exit_handler+0x18>)
 8005664:	f000 f86c 	bl	8005740 <_fwalk_sglue>
 8005668:	bd10      	pop	{r4, pc}
 800566a:	46c0      	nop			@ (mov r8, r8)
 800566c:	2000000c 	.word	0x2000000c
 8005670:	08007395 	.word	0x08007395
 8005674:	2000001c 	.word	0x2000001c

08005678 <cleanup_stdio>:
 8005678:	6841      	ldr	r1, [r0, #4]
 800567a:	4b0b      	ldr	r3, [pc, #44]	@ (80056a8 <cleanup_stdio+0x30>)
 800567c:	b510      	push	{r4, lr}
 800567e:	0004      	movs	r4, r0
 8005680:	4299      	cmp	r1, r3
 8005682:	d001      	beq.n	8005688 <cleanup_stdio+0x10>
 8005684:	f001 fe86 	bl	8007394 <_fflush_r>
 8005688:	68a1      	ldr	r1, [r4, #8]
 800568a:	4b08      	ldr	r3, [pc, #32]	@ (80056ac <cleanup_stdio+0x34>)
 800568c:	4299      	cmp	r1, r3
 800568e:	d002      	beq.n	8005696 <cleanup_stdio+0x1e>
 8005690:	0020      	movs	r0, r4
 8005692:	f001 fe7f 	bl	8007394 <_fflush_r>
 8005696:	68e1      	ldr	r1, [r4, #12]
 8005698:	4b05      	ldr	r3, [pc, #20]	@ (80056b0 <cleanup_stdio+0x38>)
 800569a:	4299      	cmp	r1, r3
 800569c:	d002      	beq.n	80056a4 <cleanup_stdio+0x2c>
 800569e:	0020      	movs	r0, r4
 80056a0:	f001 fe78 	bl	8007394 <_fflush_r>
 80056a4:	bd10      	pop	{r4, pc}
 80056a6:	46c0      	nop			@ (mov r8, r8)
 80056a8:	200002c0 	.word	0x200002c0
 80056ac:	20000328 	.word	0x20000328
 80056b0:	20000390 	.word	0x20000390

080056b4 <global_stdio_init.part.0>:
 80056b4:	b510      	push	{r4, lr}
 80056b6:	4b09      	ldr	r3, [pc, #36]	@ (80056dc <global_stdio_init.part.0+0x28>)
 80056b8:	4a09      	ldr	r2, [pc, #36]	@ (80056e0 <global_stdio_init.part.0+0x2c>)
 80056ba:	2104      	movs	r1, #4
 80056bc:	601a      	str	r2, [r3, #0]
 80056be:	4809      	ldr	r0, [pc, #36]	@ (80056e4 <global_stdio_init.part.0+0x30>)
 80056c0:	2200      	movs	r2, #0
 80056c2:	f7ff ff95 	bl	80055f0 <std>
 80056c6:	2201      	movs	r2, #1
 80056c8:	2109      	movs	r1, #9
 80056ca:	4807      	ldr	r0, [pc, #28]	@ (80056e8 <global_stdio_init.part.0+0x34>)
 80056cc:	f7ff ff90 	bl	80055f0 <std>
 80056d0:	2202      	movs	r2, #2
 80056d2:	2112      	movs	r1, #18
 80056d4:	4805      	ldr	r0, [pc, #20]	@ (80056ec <global_stdio_init.part.0+0x38>)
 80056d6:	f7ff ff8b 	bl	80055f0 <std>
 80056da:	bd10      	pop	{r4, pc}
 80056dc:	200003f8 	.word	0x200003f8
 80056e0:	0800565d 	.word	0x0800565d
 80056e4:	200002c0 	.word	0x200002c0
 80056e8:	20000328 	.word	0x20000328
 80056ec:	20000390 	.word	0x20000390

080056f0 <__sfp_lock_acquire>:
 80056f0:	b510      	push	{r4, lr}
 80056f2:	4802      	ldr	r0, [pc, #8]	@ (80056fc <__sfp_lock_acquire+0xc>)
 80056f4:	f000 f931 	bl	800595a <__retarget_lock_acquire_recursive>
 80056f8:	bd10      	pop	{r4, pc}
 80056fa:	46c0      	nop			@ (mov r8, r8)
 80056fc:	20000401 	.word	0x20000401

08005700 <__sfp_lock_release>:
 8005700:	b510      	push	{r4, lr}
 8005702:	4802      	ldr	r0, [pc, #8]	@ (800570c <__sfp_lock_release+0xc>)
 8005704:	f000 f92a 	bl	800595c <__retarget_lock_release_recursive>
 8005708:	bd10      	pop	{r4, pc}
 800570a:	46c0      	nop			@ (mov r8, r8)
 800570c:	20000401 	.word	0x20000401

08005710 <__sinit>:
 8005710:	b510      	push	{r4, lr}
 8005712:	0004      	movs	r4, r0
 8005714:	f7ff ffec 	bl	80056f0 <__sfp_lock_acquire>
 8005718:	6a23      	ldr	r3, [r4, #32]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d002      	beq.n	8005724 <__sinit+0x14>
 800571e:	f7ff ffef 	bl	8005700 <__sfp_lock_release>
 8005722:	bd10      	pop	{r4, pc}
 8005724:	4b04      	ldr	r3, [pc, #16]	@ (8005738 <__sinit+0x28>)
 8005726:	6223      	str	r3, [r4, #32]
 8005728:	4b04      	ldr	r3, [pc, #16]	@ (800573c <__sinit+0x2c>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1f6      	bne.n	800571e <__sinit+0xe>
 8005730:	f7ff ffc0 	bl	80056b4 <global_stdio_init.part.0>
 8005734:	e7f3      	b.n	800571e <__sinit+0xe>
 8005736:	46c0      	nop			@ (mov r8, r8)
 8005738:	08005679 	.word	0x08005679
 800573c:	200003f8 	.word	0x200003f8

08005740 <_fwalk_sglue>:
 8005740:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005742:	0014      	movs	r4, r2
 8005744:	2600      	movs	r6, #0
 8005746:	9000      	str	r0, [sp, #0]
 8005748:	9101      	str	r1, [sp, #4]
 800574a:	68a5      	ldr	r5, [r4, #8]
 800574c:	6867      	ldr	r7, [r4, #4]
 800574e:	3f01      	subs	r7, #1
 8005750:	d504      	bpl.n	800575c <_fwalk_sglue+0x1c>
 8005752:	6824      	ldr	r4, [r4, #0]
 8005754:	2c00      	cmp	r4, #0
 8005756:	d1f8      	bne.n	800574a <_fwalk_sglue+0xa>
 8005758:	0030      	movs	r0, r6
 800575a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800575c:	89ab      	ldrh	r3, [r5, #12]
 800575e:	2b01      	cmp	r3, #1
 8005760:	d908      	bls.n	8005774 <_fwalk_sglue+0x34>
 8005762:	220e      	movs	r2, #14
 8005764:	5eab      	ldrsh	r3, [r5, r2]
 8005766:	3301      	adds	r3, #1
 8005768:	d004      	beq.n	8005774 <_fwalk_sglue+0x34>
 800576a:	0029      	movs	r1, r5
 800576c:	9800      	ldr	r0, [sp, #0]
 800576e:	9b01      	ldr	r3, [sp, #4]
 8005770:	4798      	blx	r3
 8005772:	4306      	orrs	r6, r0
 8005774:	3568      	adds	r5, #104	@ 0x68
 8005776:	e7ea      	b.n	800574e <_fwalk_sglue+0xe>

08005778 <siprintf>:
 8005778:	b40e      	push	{r1, r2, r3}
 800577a:	b500      	push	{lr}
 800577c:	490b      	ldr	r1, [pc, #44]	@ (80057ac <siprintf+0x34>)
 800577e:	b09c      	sub	sp, #112	@ 0x70
 8005780:	ab1d      	add	r3, sp, #116	@ 0x74
 8005782:	9002      	str	r0, [sp, #8]
 8005784:	9006      	str	r0, [sp, #24]
 8005786:	9107      	str	r1, [sp, #28]
 8005788:	9104      	str	r1, [sp, #16]
 800578a:	4809      	ldr	r0, [pc, #36]	@ (80057b0 <siprintf+0x38>)
 800578c:	4909      	ldr	r1, [pc, #36]	@ (80057b4 <siprintf+0x3c>)
 800578e:	cb04      	ldmia	r3!, {r2}
 8005790:	9105      	str	r1, [sp, #20]
 8005792:	6800      	ldr	r0, [r0, #0]
 8005794:	a902      	add	r1, sp, #8
 8005796:	9301      	str	r3, [sp, #4]
 8005798:	f001 fc78 	bl	800708c <_svfiprintf_r>
 800579c:	2200      	movs	r2, #0
 800579e:	9b02      	ldr	r3, [sp, #8]
 80057a0:	701a      	strb	r2, [r3, #0]
 80057a2:	b01c      	add	sp, #112	@ 0x70
 80057a4:	bc08      	pop	{r3}
 80057a6:	b003      	add	sp, #12
 80057a8:	4718      	bx	r3
 80057aa:	46c0      	nop			@ (mov r8, r8)
 80057ac:	7fffffff 	.word	0x7fffffff
 80057b0:	20000018 	.word	0x20000018
 80057b4:	ffff0208 	.word	0xffff0208

080057b8 <__sread>:
 80057b8:	b570      	push	{r4, r5, r6, lr}
 80057ba:	000c      	movs	r4, r1
 80057bc:	250e      	movs	r5, #14
 80057be:	5f49      	ldrsh	r1, [r1, r5]
 80057c0:	f000 f878 	bl	80058b4 <_read_r>
 80057c4:	2800      	cmp	r0, #0
 80057c6:	db03      	blt.n	80057d0 <__sread+0x18>
 80057c8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80057ca:	181b      	adds	r3, r3, r0
 80057cc:	6563      	str	r3, [r4, #84]	@ 0x54
 80057ce:	bd70      	pop	{r4, r5, r6, pc}
 80057d0:	89a3      	ldrh	r3, [r4, #12]
 80057d2:	4a02      	ldr	r2, [pc, #8]	@ (80057dc <__sread+0x24>)
 80057d4:	4013      	ands	r3, r2
 80057d6:	81a3      	strh	r3, [r4, #12]
 80057d8:	e7f9      	b.n	80057ce <__sread+0x16>
 80057da:	46c0      	nop			@ (mov r8, r8)
 80057dc:	ffffefff 	.word	0xffffefff

080057e0 <__swrite>:
 80057e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057e2:	001f      	movs	r7, r3
 80057e4:	898b      	ldrh	r3, [r1, #12]
 80057e6:	0005      	movs	r5, r0
 80057e8:	000c      	movs	r4, r1
 80057ea:	0016      	movs	r6, r2
 80057ec:	05db      	lsls	r3, r3, #23
 80057ee:	d505      	bpl.n	80057fc <__swrite+0x1c>
 80057f0:	230e      	movs	r3, #14
 80057f2:	5ec9      	ldrsh	r1, [r1, r3]
 80057f4:	2200      	movs	r2, #0
 80057f6:	2302      	movs	r3, #2
 80057f8:	f000 f848 	bl	800588c <_lseek_r>
 80057fc:	89a3      	ldrh	r3, [r4, #12]
 80057fe:	4a05      	ldr	r2, [pc, #20]	@ (8005814 <__swrite+0x34>)
 8005800:	0028      	movs	r0, r5
 8005802:	4013      	ands	r3, r2
 8005804:	81a3      	strh	r3, [r4, #12]
 8005806:	0032      	movs	r2, r6
 8005808:	230e      	movs	r3, #14
 800580a:	5ee1      	ldrsh	r1, [r4, r3]
 800580c:	003b      	movs	r3, r7
 800580e:	f000 f865 	bl	80058dc <_write_r>
 8005812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005814:	ffffefff 	.word	0xffffefff

08005818 <__sseek>:
 8005818:	b570      	push	{r4, r5, r6, lr}
 800581a:	000c      	movs	r4, r1
 800581c:	250e      	movs	r5, #14
 800581e:	5f49      	ldrsh	r1, [r1, r5]
 8005820:	f000 f834 	bl	800588c <_lseek_r>
 8005824:	89a3      	ldrh	r3, [r4, #12]
 8005826:	1c42      	adds	r2, r0, #1
 8005828:	d103      	bne.n	8005832 <__sseek+0x1a>
 800582a:	4a05      	ldr	r2, [pc, #20]	@ (8005840 <__sseek+0x28>)
 800582c:	4013      	ands	r3, r2
 800582e:	81a3      	strh	r3, [r4, #12]
 8005830:	bd70      	pop	{r4, r5, r6, pc}
 8005832:	2280      	movs	r2, #128	@ 0x80
 8005834:	0152      	lsls	r2, r2, #5
 8005836:	4313      	orrs	r3, r2
 8005838:	81a3      	strh	r3, [r4, #12]
 800583a:	6560      	str	r0, [r4, #84]	@ 0x54
 800583c:	e7f8      	b.n	8005830 <__sseek+0x18>
 800583e:	46c0      	nop			@ (mov r8, r8)
 8005840:	ffffefff 	.word	0xffffefff

08005844 <__sclose>:
 8005844:	b510      	push	{r4, lr}
 8005846:	230e      	movs	r3, #14
 8005848:	5ec9      	ldrsh	r1, [r1, r3]
 800584a:	f000 f80d 	bl	8005868 <_close_r>
 800584e:	bd10      	pop	{r4, pc}

08005850 <memset>:
 8005850:	0003      	movs	r3, r0
 8005852:	1882      	adds	r2, r0, r2
 8005854:	4293      	cmp	r3, r2
 8005856:	d100      	bne.n	800585a <memset+0xa>
 8005858:	4770      	bx	lr
 800585a:	7019      	strb	r1, [r3, #0]
 800585c:	3301      	adds	r3, #1
 800585e:	e7f9      	b.n	8005854 <memset+0x4>

08005860 <_localeconv_r>:
 8005860:	4800      	ldr	r0, [pc, #0]	@ (8005864 <_localeconv_r+0x4>)
 8005862:	4770      	bx	lr
 8005864:	20000158 	.word	0x20000158

08005868 <_close_r>:
 8005868:	2300      	movs	r3, #0
 800586a:	b570      	push	{r4, r5, r6, lr}
 800586c:	4d06      	ldr	r5, [pc, #24]	@ (8005888 <_close_r+0x20>)
 800586e:	0004      	movs	r4, r0
 8005870:	0008      	movs	r0, r1
 8005872:	602b      	str	r3, [r5, #0]
 8005874:	f7fd f895 	bl	80029a2 <_close>
 8005878:	1c43      	adds	r3, r0, #1
 800587a:	d103      	bne.n	8005884 <_close_r+0x1c>
 800587c:	682b      	ldr	r3, [r5, #0]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d000      	beq.n	8005884 <_close_r+0x1c>
 8005882:	6023      	str	r3, [r4, #0]
 8005884:	bd70      	pop	{r4, r5, r6, pc}
 8005886:	46c0      	nop			@ (mov r8, r8)
 8005888:	200003fc 	.word	0x200003fc

0800588c <_lseek_r>:
 800588c:	b570      	push	{r4, r5, r6, lr}
 800588e:	0004      	movs	r4, r0
 8005890:	0008      	movs	r0, r1
 8005892:	0011      	movs	r1, r2
 8005894:	001a      	movs	r2, r3
 8005896:	2300      	movs	r3, #0
 8005898:	4d05      	ldr	r5, [pc, #20]	@ (80058b0 <_lseek_r+0x24>)
 800589a:	602b      	str	r3, [r5, #0]
 800589c:	f7fd f8a2 	bl	80029e4 <_lseek>
 80058a0:	1c43      	adds	r3, r0, #1
 80058a2:	d103      	bne.n	80058ac <_lseek_r+0x20>
 80058a4:	682b      	ldr	r3, [r5, #0]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d000      	beq.n	80058ac <_lseek_r+0x20>
 80058aa:	6023      	str	r3, [r4, #0]
 80058ac:	bd70      	pop	{r4, r5, r6, pc}
 80058ae:	46c0      	nop			@ (mov r8, r8)
 80058b0:	200003fc 	.word	0x200003fc

080058b4 <_read_r>:
 80058b4:	b570      	push	{r4, r5, r6, lr}
 80058b6:	0004      	movs	r4, r0
 80058b8:	0008      	movs	r0, r1
 80058ba:	0011      	movs	r1, r2
 80058bc:	001a      	movs	r2, r3
 80058be:	2300      	movs	r3, #0
 80058c0:	4d05      	ldr	r5, [pc, #20]	@ (80058d8 <_read_r+0x24>)
 80058c2:	602b      	str	r3, [r5, #0]
 80058c4:	f7fd f834 	bl	8002930 <_read>
 80058c8:	1c43      	adds	r3, r0, #1
 80058ca:	d103      	bne.n	80058d4 <_read_r+0x20>
 80058cc:	682b      	ldr	r3, [r5, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d000      	beq.n	80058d4 <_read_r+0x20>
 80058d2:	6023      	str	r3, [r4, #0]
 80058d4:	bd70      	pop	{r4, r5, r6, pc}
 80058d6:	46c0      	nop			@ (mov r8, r8)
 80058d8:	200003fc 	.word	0x200003fc

080058dc <_write_r>:
 80058dc:	b570      	push	{r4, r5, r6, lr}
 80058de:	0004      	movs	r4, r0
 80058e0:	0008      	movs	r0, r1
 80058e2:	0011      	movs	r1, r2
 80058e4:	001a      	movs	r2, r3
 80058e6:	2300      	movs	r3, #0
 80058e8:	4d05      	ldr	r5, [pc, #20]	@ (8005900 <_write_r+0x24>)
 80058ea:	602b      	str	r3, [r5, #0]
 80058ec:	f7fd f83d 	bl	800296a <_write>
 80058f0:	1c43      	adds	r3, r0, #1
 80058f2:	d103      	bne.n	80058fc <_write_r+0x20>
 80058f4:	682b      	ldr	r3, [r5, #0]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d000      	beq.n	80058fc <_write_r+0x20>
 80058fa:	6023      	str	r3, [r4, #0]
 80058fc:	bd70      	pop	{r4, r5, r6, pc}
 80058fe:	46c0      	nop			@ (mov r8, r8)
 8005900:	200003fc 	.word	0x200003fc

08005904 <__errno>:
 8005904:	4b01      	ldr	r3, [pc, #4]	@ (800590c <__errno+0x8>)
 8005906:	6818      	ldr	r0, [r3, #0]
 8005908:	4770      	bx	lr
 800590a:	46c0      	nop			@ (mov r8, r8)
 800590c:	20000018 	.word	0x20000018

08005910 <__libc_init_array>:
 8005910:	b570      	push	{r4, r5, r6, lr}
 8005912:	2600      	movs	r6, #0
 8005914:	4c0c      	ldr	r4, [pc, #48]	@ (8005948 <__libc_init_array+0x38>)
 8005916:	4d0d      	ldr	r5, [pc, #52]	@ (800594c <__libc_init_array+0x3c>)
 8005918:	1b64      	subs	r4, r4, r5
 800591a:	10a4      	asrs	r4, r4, #2
 800591c:	42a6      	cmp	r6, r4
 800591e:	d109      	bne.n	8005934 <__libc_init_array+0x24>
 8005920:	2600      	movs	r6, #0
 8005922:	f002 f907 	bl	8007b34 <_init>
 8005926:	4c0a      	ldr	r4, [pc, #40]	@ (8005950 <__libc_init_array+0x40>)
 8005928:	4d0a      	ldr	r5, [pc, #40]	@ (8005954 <__libc_init_array+0x44>)
 800592a:	1b64      	subs	r4, r4, r5
 800592c:	10a4      	asrs	r4, r4, #2
 800592e:	42a6      	cmp	r6, r4
 8005930:	d105      	bne.n	800593e <__libc_init_array+0x2e>
 8005932:	bd70      	pop	{r4, r5, r6, pc}
 8005934:	00b3      	lsls	r3, r6, #2
 8005936:	58eb      	ldr	r3, [r5, r3]
 8005938:	4798      	blx	r3
 800593a:	3601      	adds	r6, #1
 800593c:	e7ee      	b.n	800591c <__libc_init_array+0xc>
 800593e:	00b3      	lsls	r3, r6, #2
 8005940:	58eb      	ldr	r3, [r5, r3]
 8005942:	4798      	blx	r3
 8005944:	3601      	adds	r6, #1
 8005946:	e7f2      	b.n	800592e <__libc_init_array+0x1e>
 8005948:	08007f58 	.word	0x08007f58
 800594c:	08007f58 	.word	0x08007f58
 8005950:	08007f5c 	.word	0x08007f5c
 8005954:	08007f58 	.word	0x08007f58

08005958 <__retarget_lock_init_recursive>:
 8005958:	4770      	bx	lr

0800595a <__retarget_lock_acquire_recursive>:
 800595a:	4770      	bx	lr

0800595c <__retarget_lock_release_recursive>:
 800595c:	4770      	bx	lr

0800595e <memchr>:
 800595e:	b2c9      	uxtb	r1, r1
 8005960:	1882      	adds	r2, r0, r2
 8005962:	4290      	cmp	r0, r2
 8005964:	d101      	bne.n	800596a <memchr+0xc>
 8005966:	2000      	movs	r0, #0
 8005968:	4770      	bx	lr
 800596a:	7803      	ldrb	r3, [r0, #0]
 800596c:	428b      	cmp	r3, r1
 800596e:	d0fb      	beq.n	8005968 <memchr+0xa>
 8005970:	3001      	adds	r0, #1
 8005972:	e7f6      	b.n	8005962 <memchr+0x4>

08005974 <quorem>:
 8005974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005976:	6902      	ldr	r2, [r0, #16]
 8005978:	690f      	ldr	r7, [r1, #16]
 800597a:	b087      	sub	sp, #28
 800597c:	0006      	movs	r6, r0
 800597e:	000b      	movs	r3, r1
 8005980:	2000      	movs	r0, #0
 8005982:	9102      	str	r1, [sp, #8]
 8005984:	42ba      	cmp	r2, r7
 8005986:	db6d      	blt.n	8005a64 <quorem+0xf0>
 8005988:	3f01      	subs	r7, #1
 800598a:	00bc      	lsls	r4, r7, #2
 800598c:	3314      	adds	r3, #20
 800598e:	9305      	str	r3, [sp, #20]
 8005990:	191b      	adds	r3, r3, r4
 8005992:	9303      	str	r3, [sp, #12]
 8005994:	0033      	movs	r3, r6
 8005996:	3314      	adds	r3, #20
 8005998:	191c      	adds	r4, r3, r4
 800599a:	9301      	str	r3, [sp, #4]
 800599c:	6823      	ldr	r3, [r4, #0]
 800599e:	9304      	str	r3, [sp, #16]
 80059a0:	9b03      	ldr	r3, [sp, #12]
 80059a2:	9804      	ldr	r0, [sp, #16]
 80059a4:	681d      	ldr	r5, [r3, #0]
 80059a6:	3501      	adds	r5, #1
 80059a8:	0029      	movs	r1, r5
 80059aa:	f7fa fbc9 	bl	8000140 <__udivsi3>
 80059ae:	9b04      	ldr	r3, [sp, #16]
 80059b0:	9000      	str	r0, [sp, #0]
 80059b2:	42ab      	cmp	r3, r5
 80059b4:	d32b      	bcc.n	8005a0e <quorem+0x9a>
 80059b6:	9b05      	ldr	r3, [sp, #20]
 80059b8:	9d01      	ldr	r5, [sp, #4]
 80059ba:	469c      	mov	ip, r3
 80059bc:	2300      	movs	r3, #0
 80059be:	9305      	str	r3, [sp, #20]
 80059c0:	9304      	str	r3, [sp, #16]
 80059c2:	4662      	mov	r2, ip
 80059c4:	ca08      	ldmia	r2!, {r3}
 80059c6:	6828      	ldr	r0, [r5, #0]
 80059c8:	4694      	mov	ip, r2
 80059ca:	9a00      	ldr	r2, [sp, #0]
 80059cc:	b299      	uxth	r1, r3
 80059ce:	4351      	muls	r1, r2
 80059d0:	9a05      	ldr	r2, [sp, #20]
 80059d2:	0c1b      	lsrs	r3, r3, #16
 80059d4:	1889      	adds	r1, r1, r2
 80059d6:	9a00      	ldr	r2, [sp, #0]
 80059d8:	4353      	muls	r3, r2
 80059da:	0c0a      	lsrs	r2, r1, #16
 80059dc:	189b      	adds	r3, r3, r2
 80059de:	0c1a      	lsrs	r2, r3, #16
 80059e0:	b289      	uxth	r1, r1
 80059e2:	9205      	str	r2, [sp, #20]
 80059e4:	b282      	uxth	r2, r0
 80059e6:	1a52      	subs	r2, r2, r1
 80059e8:	9904      	ldr	r1, [sp, #16]
 80059ea:	0c00      	lsrs	r0, r0, #16
 80059ec:	1852      	adds	r2, r2, r1
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	1411      	asrs	r1, r2, #16
 80059f2:	1ac3      	subs	r3, r0, r3
 80059f4:	185b      	adds	r3, r3, r1
 80059f6:	1419      	asrs	r1, r3, #16
 80059f8:	b292      	uxth	r2, r2
 80059fa:	041b      	lsls	r3, r3, #16
 80059fc:	431a      	orrs	r2, r3
 80059fe:	9b03      	ldr	r3, [sp, #12]
 8005a00:	9104      	str	r1, [sp, #16]
 8005a02:	c504      	stmia	r5!, {r2}
 8005a04:	4563      	cmp	r3, ip
 8005a06:	d2dc      	bcs.n	80059c2 <quorem+0x4e>
 8005a08:	6823      	ldr	r3, [r4, #0]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d030      	beq.n	8005a70 <quorem+0xfc>
 8005a0e:	0030      	movs	r0, r6
 8005a10:	9902      	ldr	r1, [sp, #8]
 8005a12:	f001 f9c5 	bl	8006da0 <__mcmp>
 8005a16:	2800      	cmp	r0, #0
 8005a18:	db23      	blt.n	8005a62 <quorem+0xee>
 8005a1a:	0034      	movs	r4, r6
 8005a1c:	2500      	movs	r5, #0
 8005a1e:	9902      	ldr	r1, [sp, #8]
 8005a20:	3414      	adds	r4, #20
 8005a22:	3114      	adds	r1, #20
 8005a24:	6823      	ldr	r3, [r4, #0]
 8005a26:	c901      	ldmia	r1!, {r0}
 8005a28:	9302      	str	r3, [sp, #8]
 8005a2a:	466b      	mov	r3, sp
 8005a2c:	891b      	ldrh	r3, [r3, #8]
 8005a2e:	b282      	uxth	r2, r0
 8005a30:	1a9a      	subs	r2, r3, r2
 8005a32:	9b02      	ldr	r3, [sp, #8]
 8005a34:	1952      	adds	r2, r2, r5
 8005a36:	0c00      	lsrs	r0, r0, #16
 8005a38:	0c1b      	lsrs	r3, r3, #16
 8005a3a:	1a1b      	subs	r3, r3, r0
 8005a3c:	1410      	asrs	r0, r2, #16
 8005a3e:	181b      	adds	r3, r3, r0
 8005a40:	141d      	asrs	r5, r3, #16
 8005a42:	b292      	uxth	r2, r2
 8005a44:	041b      	lsls	r3, r3, #16
 8005a46:	431a      	orrs	r2, r3
 8005a48:	9b03      	ldr	r3, [sp, #12]
 8005a4a:	c404      	stmia	r4!, {r2}
 8005a4c:	428b      	cmp	r3, r1
 8005a4e:	d2e9      	bcs.n	8005a24 <quorem+0xb0>
 8005a50:	9a01      	ldr	r2, [sp, #4]
 8005a52:	00bb      	lsls	r3, r7, #2
 8005a54:	18d3      	adds	r3, r2, r3
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	2a00      	cmp	r2, #0
 8005a5a:	d013      	beq.n	8005a84 <quorem+0x110>
 8005a5c:	9b00      	ldr	r3, [sp, #0]
 8005a5e:	3301      	adds	r3, #1
 8005a60:	9300      	str	r3, [sp, #0]
 8005a62:	9800      	ldr	r0, [sp, #0]
 8005a64:	b007      	add	sp, #28
 8005a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a68:	6823      	ldr	r3, [r4, #0]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d104      	bne.n	8005a78 <quorem+0x104>
 8005a6e:	3f01      	subs	r7, #1
 8005a70:	9b01      	ldr	r3, [sp, #4]
 8005a72:	3c04      	subs	r4, #4
 8005a74:	42a3      	cmp	r3, r4
 8005a76:	d3f7      	bcc.n	8005a68 <quorem+0xf4>
 8005a78:	6137      	str	r7, [r6, #16]
 8005a7a:	e7c8      	b.n	8005a0e <quorem+0x9a>
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	2a00      	cmp	r2, #0
 8005a80:	d104      	bne.n	8005a8c <quorem+0x118>
 8005a82:	3f01      	subs	r7, #1
 8005a84:	9a01      	ldr	r2, [sp, #4]
 8005a86:	3b04      	subs	r3, #4
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d3f7      	bcc.n	8005a7c <quorem+0x108>
 8005a8c:	6137      	str	r7, [r6, #16]
 8005a8e:	e7e5      	b.n	8005a5c <quorem+0xe8>

08005a90 <_dtoa_r>:
 8005a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a92:	0014      	movs	r4, r2
 8005a94:	001d      	movs	r5, r3
 8005a96:	69c6      	ldr	r6, [r0, #28]
 8005a98:	b09d      	sub	sp, #116	@ 0x74
 8005a9a:	940a      	str	r4, [sp, #40]	@ 0x28
 8005a9c:	950b      	str	r5, [sp, #44]	@ 0x2c
 8005a9e:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8005aa0:	9003      	str	r0, [sp, #12]
 8005aa2:	2e00      	cmp	r6, #0
 8005aa4:	d10f      	bne.n	8005ac6 <_dtoa_r+0x36>
 8005aa6:	2010      	movs	r0, #16
 8005aa8:	f000 fe30 	bl	800670c <malloc>
 8005aac:	9b03      	ldr	r3, [sp, #12]
 8005aae:	1e02      	subs	r2, r0, #0
 8005ab0:	61d8      	str	r0, [r3, #28]
 8005ab2:	d104      	bne.n	8005abe <_dtoa_r+0x2e>
 8005ab4:	21ef      	movs	r1, #239	@ 0xef
 8005ab6:	4bc7      	ldr	r3, [pc, #796]	@ (8005dd4 <_dtoa_r+0x344>)
 8005ab8:	48c7      	ldr	r0, [pc, #796]	@ (8005dd8 <_dtoa_r+0x348>)
 8005aba:	f001 fcc5 	bl	8007448 <__assert_func>
 8005abe:	6046      	str	r6, [r0, #4]
 8005ac0:	6086      	str	r6, [r0, #8]
 8005ac2:	6006      	str	r6, [r0, #0]
 8005ac4:	60c6      	str	r6, [r0, #12]
 8005ac6:	9b03      	ldr	r3, [sp, #12]
 8005ac8:	69db      	ldr	r3, [r3, #28]
 8005aca:	6819      	ldr	r1, [r3, #0]
 8005acc:	2900      	cmp	r1, #0
 8005ace:	d00b      	beq.n	8005ae8 <_dtoa_r+0x58>
 8005ad0:	685a      	ldr	r2, [r3, #4]
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	4093      	lsls	r3, r2
 8005ad6:	604a      	str	r2, [r1, #4]
 8005ad8:	608b      	str	r3, [r1, #8]
 8005ada:	9803      	ldr	r0, [sp, #12]
 8005adc:	f000 ff16 	bl	800690c <_Bfree>
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	9b03      	ldr	r3, [sp, #12]
 8005ae4:	69db      	ldr	r3, [r3, #28]
 8005ae6:	601a      	str	r2, [r3, #0]
 8005ae8:	2d00      	cmp	r5, #0
 8005aea:	da1e      	bge.n	8005b2a <_dtoa_r+0x9a>
 8005aec:	2301      	movs	r3, #1
 8005aee:	603b      	str	r3, [r7, #0]
 8005af0:	006b      	lsls	r3, r5, #1
 8005af2:	085b      	lsrs	r3, r3, #1
 8005af4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005af6:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8005af8:	4bb8      	ldr	r3, [pc, #736]	@ (8005ddc <_dtoa_r+0x34c>)
 8005afa:	4ab8      	ldr	r2, [pc, #736]	@ (8005ddc <_dtoa_r+0x34c>)
 8005afc:	403b      	ands	r3, r7
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d116      	bne.n	8005b30 <_dtoa_r+0xa0>
 8005b02:	4bb7      	ldr	r3, [pc, #732]	@ (8005de0 <_dtoa_r+0x350>)
 8005b04:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005b06:	6013      	str	r3, [r2, #0]
 8005b08:	033b      	lsls	r3, r7, #12
 8005b0a:	0b1b      	lsrs	r3, r3, #12
 8005b0c:	4323      	orrs	r3, r4
 8005b0e:	d101      	bne.n	8005b14 <_dtoa_r+0x84>
 8005b10:	f000 fd83 	bl	800661a <_dtoa_r+0xb8a>
 8005b14:	4bb3      	ldr	r3, [pc, #716]	@ (8005de4 <_dtoa_r+0x354>)
 8005b16:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8005b18:	9308      	str	r3, [sp, #32]
 8005b1a:	2a00      	cmp	r2, #0
 8005b1c:	d002      	beq.n	8005b24 <_dtoa_r+0x94>
 8005b1e:	4bb2      	ldr	r3, [pc, #712]	@ (8005de8 <_dtoa_r+0x358>)
 8005b20:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8005b22:	6013      	str	r3, [r2, #0]
 8005b24:	9808      	ldr	r0, [sp, #32]
 8005b26:	b01d      	add	sp, #116	@ 0x74
 8005b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	603b      	str	r3, [r7, #0]
 8005b2e:	e7e2      	b.n	8005af6 <_dtoa_r+0x66>
 8005b30:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005b32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005b34:	9212      	str	r2, [sp, #72]	@ 0x48
 8005b36:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005b38:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8005b3a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	2300      	movs	r3, #0
 8005b40:	f7fa fc84 	bl	800044c <__aeabi_dcmpeq>
 8005b44:	1e06      	subs	r6, r0, #0
 8005b46:	d00b      	beq.n	8005b60 <_dtoa_r+0xd0>
 8005b48:	2301      	movs	r3, #1
 8005b4a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005b4c:	6013      	str	r3, [r2, #0]
 8005b4e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d002      	beq.n	8005b5a <_dtoa_r+0xca>
 8005b54:	4ba5      	ldr	r3, [pc, #660]	@ (8005dec <_dtoa_r+0x35c>)
 8005b56:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8005b58:	6013      	str	r3, [r2, #0]
 8005b5a:	4ba5      	ldr	r3, [pc, #660]	@ (8005df0 <_dtoa_r+0x360>)
 8005b5c:	9308      	str	r3, [sp, #32]
 8005b5e:	e7e1      	b.n	8005b24 <_dtoa_r+0x94>
 8005b60:	ab1a      	add	r3, sp, #104	@ 0x68
 8005b62:	9301      	str	r3, [sp, #4]
 8005b64:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005b66:	9300      	str	r3, [sp, #0]
 8005b68:	9803      	ldr	r0, [sp, #12]
 8005b6a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005b6c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005b6e:	f001 f9cd 	bl	8006f0c <__d2b>
 8005b72:	007a      	lsls	r2, r7, #1
 8005b74:	9005      	str	r0, [sp, #20]
 8005b76:	0d52      	lsrs	r2, r2, #21
 8005b78:	d100      	bne.n	8005b7c <_dtoa_r+0xec>
 8005b7a:	e07b      	b.n	8005c74 <_dtoa_r+0x1e4>
 8005b7c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005b7e:	9618      	str	r6, [sp, #96]	@ 0x60
 8005b80:	0319      	lsls	r1, r3, #12
 8005b82:	4b9c      	ldr	r3, [pc, #624]	@ (8005df4 <_dtoa_r+0x364>)
 8005b84:	0b09      	lsrs	r1, r1, #12
 8005b86:	430b      	orrs	r3, r1
 8005b88:	499b      	ldr	r1, [pc, #620]	@ (8005df8 <_dtoa_r+0x368>)
 8005b8a:	1857      	adds	r7, r2, r1
 8005b8c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8005b8e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8005b90:	0019      	movs	r1, r3
 8005b92:	2200      	movs	r2, #0
 8005b94:	4b99      	ldr	r3, [pc, #612]	@ (8005dfc <_dtoa_r+0x36c>)
 8005b96:	f7fb fef7 	bl	8001988 <__aeabi_dsub>
 8005b9a:	4a99      	ldr	r2, [pc, #612]	@ (8005e00 <_dtoa_r+0x370>)
 8005b9c:	4b99      	ldr	r3, [pc, #612]	@ (8005e04 <_dtoa_r+0x374>)
 8005b9e:	f7fb fc2b 	bl	80013f8 <__aeabi_dmul>
 8005ba2:	4a99      	ldr	r2, [pc, #612]	@ (8005e08 <_dtoa_r+0x378>)
 8005ba4:	4b99      	ldr	r3, [pc, #612]	@ (8005e0c <_dtoa_r+0x37c>)
 8005ba6:	f7fa fc7f 	bl	80004a8 <__aeabi_dadd>
 8005baa:	0004      	movs	r4, r0
 8005bac:	0038      	movs	r0, r7
 8005bae:	000d      	movs	r5, r1
 8005bb0:	f7fc fae4 	bl	800217c <__aeabi_i2d>
 8005bb4:	4a96      	ldr	r2, [pc, #600]	@ (8005e10 <_dtoa_r+0x380>)
 8005bb6:	4b97      	ldr	r3, [pc, #604]	@ (8005e14 <_dtoa_r+0x384>)
 8005bb8:	f7fb fc1e 	bl	80013f8 <__aeabi_dmul>
 8005bbc:	0002      	movs	r2, r0
 8005bbe:	000b      	movs	r3, r1
 8005bc0:	0020      	movs	r0, r4
 8005bc2:	0029      	movs	r1, r5
 8005bc4:	f7fa fc70 	bl	80004a8 <__aeabi_dadd>
 8005bc8:	0004      	movs	r4, r0
 8005bca:	000d      	movs	r5, r1
 8005bcc:	f7fc fa9a 	bl	8002104 <__aeabi_d2iz>
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	9004      	str	r0, [sp, #16]
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	0020      	movs	r0, r4
 8005bd8:	0029      	movs	r1, r5
 8005bda:	f7fa fc3d 	bl	8000458 <__aeabi_dcmplt>
 8005bde:	2800      	cmp	r0, #0
 8005be0:	d00b      	beq.n	8005bfa <_dtoa_r+0x16a>
 8005be2:	9804      	ldr	r0, [sp, #16]
 8005be4:	f7fc faca 	bl	800217c <__aeabi_i2d>
 8005be8:	002b      	movs	r3, r5
 8005bea:	0022      	movs	r2, r4
 8005bec:	f7fa fc2e 	bl	800044c <__aeabi_dcmpeq>
 8005bf0:	4243      	negs	r3, r0
 8005bf2:	4158      	adcs	r0, r3
 8005bf4:	9b04      	ldr	r3, [sp, #16]
 8005bf6:	1a1b      	subs	r3, r3, r0
 8005bf8:	9304      	str	r3, [sp, #16]
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	9315      	str	r3, [sp, #84]	@ 0x54
 8005bfe:	9b04      	ldr	r3, [sp, #16]
 8005c00:	2b16      	cmp	r3, #22
 8005c02:	d810      	bhi.n	8005c26 <_dtoa_r+0x196>
 8005c04:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8005c06:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8005c08:	9a04      	ldr	r2, [sp, #16]
 8005c0a:	4b83      	ldr	r3, [pc, #524]	@ (8005e18 <_dtoa_r+0x388>)
 8005c0c:	00d2      	lsls	r2, r2, #3
 8005c0e:	189b      	adds	r3, r3, r2
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	f7fa fc20 	bl	8000458 <__aeabi_dcmplt>
 8005c18:	2800      	cmp	r0, #0
 8005c1a:	d047      	beq.n	8005cac <_dtoa_r+0x21c>
 8005c1c:	9b04      	ldr	r3, [sp, #16]
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	9304      	str	r3, [sp, #16]
 8005c22:	2300      	movs	r3, #0
 8005c24:	9315      	str	r3, [sp, #84]	@ 0x54
 8005c26:	2200      	movs	r2, #0
 8005c28:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8005c2a:	9206      	str	r2, [sp, #24]
 8005c2c:	1bdb      	subs	r3, r3, r7
 8005c2e:	1e5a      	subs	r2, r3, #1
 8005c30:	d53e      	bpl.n	8005cb0 <_dtoa_r+0x220>
 8005c32:	2201      	movs	r2, #1
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	9306      	str	r3, [sp, #24]
 8005c38:	2300      	movs	r3, #0
 8005c3a:	930d      	str	r3, [sp, #52]	@ 0x34
 8005c3c:	9b04      	ldr	r3, [sp, #16]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	db38      	blt.n	8005cb4 <_dtoa_r+0x224>
 8005c42:	9a04      	ldr	r2, [sp, #16]
 8005c44:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005c46:	4694      	mov	ip, r2
 8005c48:	4463      	add	r3, ip
 8005c4a:	930d      	str	r3, [sp, #52]	@ 0x34
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	9214      	str	r2, [sp, #80]	@ 0x50
 8005c50:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005c52:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005c54:	2401      	movs	r4, #1
 8005c56:	2b09      	cmp	r3, #9
 8005c58:	d867      	bhi.n	8005d2a <_dtoa_r+0x29a>
 8005c5a:	2b05      	cmp	r3, #5
 8005c5c:	dd02      	ble.n	8005c64 <_dtoa_r+0x1d4>
 8005c5e:	2400      	movs	r4, #0
 8005c60:	3b04      	subs	r3, #4
 8005c62:	9322      	str	r3, [sp, #136]	@ 0x88
 8005c64:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005c66:	1e98      	subs	r0, r3, #2
 8005c68:	2803      	cmp	r0, #3
 8005c6a:	d867      	bhi.n	8005d3c <_dtoa_r+0x2ac>
 8005c6c:	f7fa fa54 	bl	8000118 <__gnu_thumb1_case_uqi>
 8005c70:	5b383a2b 	.word	0x5b383a2b
 8005c74:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8005c76:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8005c78:	18f6      	adds	r6, r6, r3
 8005c7a:	4b68      	ldr	r3, [pc, #416]	@ (8005e1c <_dtoa_r+0x38c>)
 8005c7c:	18f2      	adds	r2, r6, r3
 8005c7e:	2a20      	cmp	r2, #32
 8005c80:	dd0f      	ble.n	8005ca2 <_dtoa_r+0x212>
 8005c82:	2340      	movs	r3, #64	@ 0x40
 8005c84:	1a9b      	subs	r3, r3, r2
 8005c86:	409f      	lsls	r7, r3
 8005c88:	4b65      	ldr	r3, [pc, #404]	@ (8005e20 <_dtoa_r+0x390>)
 8005c8a:	0038      	movs	r0, r7
 8005c8c:	18f3      	adds	r3, r6, r3
 8005c8e:	40dc      	lsrs	r4, r3
 8005c90:	4320      	orrs	r0, r4
 8005c92:	f7fc faa1 	bl	80021d8 <__aeabi_ui2d>
 8005c96:	2201      	movs	r2, #1
 8005c98:	4b62      	ldr	r3, [pc, #392]	@ (8005e24 <_dtoa_r+0x394>)
 8005c9a:	1e77      	subs	r7, r6, #1
 8005c9c:	18cb      	adds	r3, r1, r3
 8005c9e:	9218      	str	r2, [sp, #96]	@ 0x60
 8005ca0:	e776      	b.n	8005b90 <_dtoa_r+0x100>
 8005ca2:	2320      	movs	r3, #32
 8005ca4:	0020      	movs	r0, r4
 8005ca6:	1a9b      	subs	r3, r3, r2
 8005ca8:	4098      	lsls	r0, r3
 8005caa:	e7f2      	b.n	8005c92 <_dtoa_r+0x202>
 8005cac:	9015      	str	r0, [sp, #84]	@ 0x54
 8005cae:	e7ba      	b.n	8005c26 <_dtoa_r+0x196>
 8005cb0:	920d      	str	r2, [sp, #52]	@ 0x34
 8005cb2:	e7c3      	b.n	8005c3c <_dtoa_r+0x1ac>
 8005cb4:	9b06      	ldr	r3, [sp, #24]
 8005cb6:	9a04      	ldr	r2, [sp, #16]
 8005cb8:	1a9b      	subs	r3, r3, r2
 8005cba:	9306      	str	r3, [sp, #24]
 8005cbc:	4253      	negs	r3, r2
 8005cbe:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	9314      	str	r3, [sp, #80]	@ 0x50
 8005cc4:	e7c5      	b.n	8005c52 <_dtoa_r+0x1c2>
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	9310      	str	r3, [sp, #64]	@ 0x40
 8005cca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005ccc:	930e      	str	r3, [sp, #56]	@ 0x38
 8005cce:	9309      	str	r3, [sp, #36]	@ 0x24
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	dc13      	bgt.n	8005cfc <_dtoa_r+0x26c>
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	001a      	movs	r2, r3
 8005cd8:	930e      	str	r3, [sp, #56]	@ 0x38
 8005cda:	9309      	str	r3, [sp, #36]	@ 0x24
 8005cdc:	9223      	str	r2, [sp, #140]	@ 0x8c
 8005cde:	e00d      	b.n	8005cfc <_dtoa_r+0x26c>
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e7f1      	b.n	8005cc8 <_dtoa_r+0x238>
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005ce8:	9310      	str	r3, [sp, #64]	@ 0x40
 8005cea:	4694      	mov	ip, r2
 8005cec:	9b04      	ldr	r3, [sp, #16]
 8005cee:	4463      	add	r3, ip
 8005cf0:	930e      	str	r3, [sp, #56]	@ 0x38
 8005cf2:	3301      	adds	r3, #1
 8005cf4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	dc00      	bgt.n	8005cfc <_dtoa_r+0x26c>
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	9a03      	ldr	r2, [sp, #12]
 8005cfe:	2100      	movs	r1, #0
 8005d00:	69d0      	ldr	r0, [r2, #28]
 8005d02:	2204      	movs	r2, #4
 8005d04:	0015      	movs	r5, r2
 8005d06:	3514      	adds	r5, #20
 8005d08:	429d      	cmp	r5, r3
 8005d0a:	d91b      	bls.n	8005d44 <_dtoa_r+0x2b4>
 8005d0c:	6041      	str	r1, [r0, #4]
 8005d0e:	9803      	ldr	r0, [sp, #12]
 8005d10:	f000 fdb8 	bl	8006884 <_Balloc>
 8005d14:	9008      	str	r0, [sp, #32]
 8005d16:	2800      	cmp	r0, #0
 8005d18:	d117      	bne.n	8005d4a <_dtoa_r+0x2ba>
 8005d1a:	21b0      	movs	r1, #176	@ 0xb0
 8005d1c:	4b42      	ldr	r3, [pc, #264]	@ (8005e28 <_dtoa_r+0x398>)
 8005d1e:	482e      	ldr	r0, [pc, #184]	@ (8005dd8 <_dtoa_r+0x348>)
 8005d20:	9a08      	ldr	r2, [sp, #32]
 8005d22:	31ff      	adds	r1, #255	@ 0xff
 8005d24:	e6c9      	b.n	8005aba <_dtoa_r+0x2a>
 8005d26:	2301      	movs	r3, #1
 8005d28:	e7dd      	b.n	8005ce6 <_dtoa_r+0x256>
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	9410      	str	r4, [sp, #64]	@ 0x40
 8005d2e:	9322      	str	r3, [sp, #136]	@ 0x88
 8005d30:	3b01      	subs	r3, #1
 8005d32:	930e      	str	r3, [sp, #56]	@ 0x38
 8005d34:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d36:	2200      	movs	r2, #0
 8005d38:	3313      	adds	r3, #19
 8005d3a:	e7cf      	b.n	8005cdc <_dtoa_r+0x24c>
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	9310      	str	r3, [sp, #64]	@ 0x40
 8005d40:	3b02      	subs	r3, #2
 8005d42:	e7f6      	b.n	8005d32 <_dtoa_r+0x2a2>
 8005d44:	3101      	adds	r1, #1
 8005d46:	0052      	lsls	r2, r2, #1
 8005d48:	e7dc      	b.n	8005d04 <_dtoa_r+0x274>
 8005d4a:	9b03      	ldr	r3, [sp, #12]
 8005d4c:	9a08      	ldr	r2, [sp, #32]
 8005d4e:	69db      	ldr	r3, [r3, #28]
 8005d50:	601a      	str	r2, [r3, #0]
 8005d52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d54:	2b0e      	cmp	r3, #14
 8005d56:	d900      	bls.n	8005d5a <_dtoa_r+0x2ca>
 8005d58:	e0d9      	b.n	8005f0e <_dtoa_r+0x47e>
 8005d5a:	2c00      	cmp	r4, #0
 8005d5c:	d100      	bne.n	8005d60 <_dtoa_r+0x2d0>
 8005d5e:	e0d6      	b.n	8005f0e <_dtoa_r+0x47e>
 8005d60:	9b04      	ldr	r3, [sp, #16]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	dd64      	ble.n	8005e30 <_dtoa_r+0x3a0>
 8005d66:	210f      	movs	r1, #15
 8005d68:	9a04      	ldr	r2, [sp, #16]
 8005d6a:	4b2b      	ldr	r3, [pc, #172]	@ (8005e18 <_dtoa_r+0x388>)
 8005d6c:	400a      	ands	r2, r1
 8005d6e:	00d2      	lsls	r2, r2, #3
 8005d70:	189b      	adds	r3, r3, r2
 8005d72:	681e      	ldr	r6, [r3, #0]
 8005d74:	685f      	ldr	r7, [r3, #4]
 8005d76:	9b04      	ldr	r3, [sp, #16]
 8005d78:	2402      	movs	r4, #2
 8005d7a:	111d      	asrs	r5, r3, #4
 8005d7c:	05db      	lsls	r3, r3, #23
 8005d7e:	d50a      	bpl.n	8005d96 <_dtoa_r+0x306>
 8005d80:	4b2a      	ldr	r3, [pc, #168]	@ (8005e2c <_dtoa_r+0x39c>)
 8005d82:	400d      	ands	r5, r1
 8005d84:	6a1a      	ldr	r2, [r3, #32]
 8005d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d88:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8005d8a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8005d8c:	f7fa fef0 	bl	8000b70 <__aeabi_ddiv>
 8005d90:	900a      	str	r0, [sp, #40]	@ 0x28
 8005d92:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005d94:	3401      	adds	r4, #1
 8005d96:	4b25      	ldr	r3, [pc, #148]	@ (8005e2c <_dtoa_r+0x39c>)
 8005d98:	930c      	str	r3, [sp, #48]	@ 0x30
 8005d9a:	2d00      	cmp	r5, #0
 8005d9c:	d108      	bne.n	8005db0 <_dtoa_r+0x320>
 8005d9e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005da0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005da2:	0032      	movs	r2, r6
 8005da4:	003b      	movs	r3, r7
 8005da6:	f7fa fee3 	bl	8000b70 <__aeabi_ddiv>
 8005daa:	900a      	str	r0, [sp, #40]	@ 0x28
 8005dac:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005dae:	e05a      	b.n	8005e66 <_dtoa_r+0x3d6>
 8005db0:	2301      	movs	r3, #1
 8005db2:	421d      	tst	r5, r3
 8005db4:	d009      	beq.n	8005dca <_dtoa_r+0x33a>
 8005db6:	18e4      	adds	r4, r4, r3
 8005db8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005dba:	0030      	movs	r0, r6
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	0039      	movs	r1, r7
 8005dc2:	f7fb fb19 	bl	80013f8 <__aeabi_dmul>
 8005dc6:	0006      	movs	r6, r0
 8005dc8:	000f      	movs	r7, r1
 8005dca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005dcc:	106d      	asrs	r5, r5, #1
 8005dce:	3308      	adds	r3, #8
 8005dd0:	e7e2      	b.n	8005d98 <_dtoa_r+0x308>
 8005dd2:	46c0      	nop			@ (mov r8, r8)
 8005dd4:	08007c25 	.word	0x08007c25
 8005dd8:	08007c3c 	.word	0x08007c3c
 8005ddc:	7ff00000 	.word	0x7ff00000
 8005de0:	0000270f 	.word	0x0000270f
 8005de4:	08007c21 	.word	0x08007c21
 8005de8:	08007c24 	.word	0x08007c24
 8005dec:	08007bf5 	.word	0x08007bf5
 8005df0:	08007bf4 	.word	0x08007bf4
 8005df4:	3ff00000 	.word	0x3ff00000
 8005df8:	fffffc01 	.word	0xfffffc01
 8005dfc:	3ff80000 	.word	0x3ff80000
 8005e00:	636f4361 	.word	0x636f4361
 8005e04:	3fd287a7 	.word	0x3fd287a7
 8005e08:	8b60c8b3 	.word	0x8b60c8b3
 8005e0c:	3fc68a28 	.word	0x3fc68a28
 8005e10:	509f79fb 	.word	0x509f79fb
 8005e14:	3fd34413 	.word	0x3fd34413
 8005e18:	08007d38 	.word	0x08007d38
 8005e1c:	00000432 	.word	0x00000432
 8005e20:	00000412 	.word	0x00000412
 8005e24:	fe100000 	.word	0xfe100000
 8005e28:	08007c94 	.word	0x08007c94
 8005e2c:	08007d10 	.word	0x08007d10
 8005e30:	9b04      	ldr	r3, [sp, #16]
 8005e32:	2402      	movs	r4, #2
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d016      	beq.n	8005e66 <_dtoa_r+0x3d6>
 8005e38:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8005e3a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8005e3c:	220f      	movs	r2, #15
 8005e3e:	425d      	negs	r5, r3
 8005e40:	402a      	ands	r2, r5
 8005e42:	4bd7      	ldr	r3, [pc, #860]	@ (80061a0 <_dtoa_r+0x710>)
 8005e44:	00d2      	lsls	r2, r2, #3
 8005e46:	189b      	adds	r3, r3, r2
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	f7fb fad4 	bl	80013f8 <__aeabi_dmul>
 8005e50:	2701      	movs	r7, #1
 8005e52:	2300      	movs	r3, #0
 8005e54:	900a      	str	r0, [sp, #40]	@ 0x28
 8005e56:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005e58:	4ed2      	ldr	r6, [pc, #840]	@ (80061a4 <_dtoa_r+0x714>)
 8005e5a:	112d      	asrs	r5, r5, #4
 8005e5c:	2d00      	cmp	r5, #0
 8005e5e:	d000      	beq.n	8005e62 <_dtoa_r+0x3d2>
 8005e60:	e0ba      	b.n	8005fd8 <_dtoa_r+0x548>
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d1a1      	bne.n	8005daa <_dtoa_r+0x31a>
 8005e66:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8005e68:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8005e6a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d100      	bne.n	8005e72 <_dtoa_r+0x3e2>
 8005e70:	e0bd      	b.n	8005fee <_dtoa_r+0x55e>
 8005e72:	2200      	movs	r2, #0
 8005e74:	0030      	movs	r0, r6
 8005e76:	0039      	movs	r1, r7
 8005e78:	4bcb      	ldr	r3, [pc, #812]	@ (80061a8 <_dtoa_r+0x718>)
 8005e7a:	f7fa faed 	bl	8000458 <__aeabi_dcmplt>
 8005e7e:	2800      	cmp	r0, #0
 8005e80:	d100      	bne.n	8005e84 <_dtoa_r+0x3f4>
 8005e82:	e0b4      	b.n	8005fee <_dtoa_r+0x55e>
 8005e84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d100      	bne.n	8005e8c <_dtoa_r+0x3fc>
 8005e8a:	e0b0      	b.n	8005fee <_dtoa_r+0x55e>
 8005e8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	dd39      	ble.n	8005f06 <_dtoa_r+0x476>
 8005e92:	9b04      	ldr	r3, [sp, #16]
 8005e94:	2200      	movs	r2, #0
 8005e96:	3b01      	subs	r3, #1
 8005e98:	930c      	str	r3, [sp, #48]	@ 0x30
 8005e9a:	0030      	movs	r0, r6
 8005e9c:	4bc3      	ldr	r3, [pc, #780]	@ (80061ac <_dtoa_r+0x71c>)
 8005e9e:	0039      	movs	r1, r7
 8005ea0:	f7fb faaa 	bl	80013f8 <__aeabi_dmul>
 8005ea4:	900a      	str	r0, [sp, #40]	@ 0x28
 8005ea6:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005ea8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005eaa:	3401      	adds	r4, #1
 8005eac:	0020      	movs	r0, r4
 8005eae:	9311      	str	r3, [sp, #68]	@ 0x44
 8005eb0:	f7fc f964 	bl	800217c <__aeabi_i2d>
 8005eb4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005eb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005eb8:	f7fb fa9e 	bl	80013f8 <__aeabi_dmul>
 8005ebc:	4bbc      	ldr	r3, [pc, #752]	@ (80061b0 <_dtoa_r+0x720>)
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f7fa faf2 	bl	80004a8 <__aeabi_dadd>
 8005ec4:	4bbb      	ldr	r3, [pc, #748]	@ (80061b4 <_dtoa_r+0x724>)
 8005ec6:	0006      	movs	r6, r0
 8005ec8:	18cf      	adds	r7, r1, r3
 8005eca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d000      	beq.n	8005ed2 <_dtoa_r+0x442>
 8005ed0:	e091      	b.n	8005ff6 <_dtoa_r+0x566>
 8005ed2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005ed4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	4bb7      	ldr	r3, [pc, #732]	@ (80061b8 <_dtoa_r+0x728>)
 8005eda:	f7fb fd55 	bl	8001988 <__aeabi_dsub>
 8005ede:	0032      	movs	r2, r6
 8005ee0:	003b      	movs	r3, r7
 8005ee2:	0004      	movs	r4, r0
 8005ee4:	000d      	movs	r5, r1
 8005ee6:	f7fa facb 	bl	8000480 <__aeabi_dcmpgt>
 8005eea:	2800      	cmp	r0, #0
 8005eec:	d000      	beq.n	8005ef0 <_dtoa_r+0x460>
 8005eee:	e29d      	b.n	800642c <_dtoa_r+0x99c>
 8005ef0:	2180      	movs	r1, #128	@ 0x80
 8005ef2:	0609      	lsls	r1, r1, #24
 8005ef4:	187b      	adds	r3, r7, r1
 8005ef6:	0032      	movs	r2, r6
 8005ef8:	0020      	movs	r0, r4
 8005efa:	0029      	movs	r1, r5
 8005efc:	f7fa faac 	bl	8000458 <__aeabi_dcmplt>
 8005f00:	2800      	cmp	r0, #0
 8005f02:	d000      	beq.n	8005f06 <_dtoa_r+0x476>
 8005f04:	e130      	b.n	8006168 <_dtoa_r+0x6d8>
 8005f06:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005f08:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8005f0a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f0c:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005f0e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	da00      	bge.n	8005f16 <_dtoa_r+0x486>
 8005f14:	e177      	b.n	8006206 <_dtoa_r+0x776>
 8005f16:	9a04      	ldr	r2, [sp, #16]
 8005f18:	2a0e      	cmp	r2, #14
 8005f1a:	dd00      	ble.n	8005f1e <_dtoa_r+0x48e>
 8005f1c:	e173      	b.n	8006206 <_dtoa_r+0x776>
 8005f1e:	4ba0      	ldr	r3, [pc, #640]	@ (80061a0 <_dtoa_r+0x710>)
 8005f20:	00d2      	lsls	r2, r2, #3
 8005f22:	189b      	adds	r3, r3, r2
 8005f24:	685c      	ldr	r4, [r3, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	9306      	str	r3, [sp, #24]
 8005f2a:	9407      	str	r4, [sp, #28]
 8005f2c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	da03      	bge.n	8005f3a <_dtoa_r+0x4aa>
 8005f32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	dc00      	bgt.n	8005f3a <_dtoa_r+0x4aa>
 8005f38:	e106      	b.n	8006148 <_dtoa_r+0x6b8>
 8005f3a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8005f3c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8005f3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f40:	9d08      	ldr	r5, [sp, #32]
 8005f42:	3b01      	subs	r3, #1
 8005f44:	195b      	adds	r3, r3, r5
 8005f46:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f48:	9a06      	ldr	r2, [sp, #24]
 8005f4a:	9b07      	ldr	r3, [sp, #28]
 8005f4c:	0030      	movs	r0, r6
 8005f4e:	0039      	movs	r1, r7
 8005f50:	f7fa fe0e 	bl	8000b70 <__aeabi_ddiv>
 8005f54:	f7fc f8d6 	bl	8002104 <__aeabi_d2iz>
 8005f58:	9009      	str	r0, [sp, #36]	@ 0x24
 8005f5a:	f7fc f90f 	bl	800217c <__aeabi_i2d>
 8005f5e:	9a06      	ldr	r2, [sp, #24]
 8005f60:	9b07      	ldr	r3, [sp, #28]
 8005f62:	f7fb fa49 	bl	80013f8 <__aeabi_dmul>
 8005f66:	0002      	movs	r2, r0
 8005f68:	000b      	movs	r3, r1
 8005f6a:	0030      	movs	r0, r6
 8005f6c:	0039      	movs	r1, r7
 8005f6e:	f7fb fd0b 	bl	8001988 <__aeabi_dsub>
 8005f72:	002b      	movs	r3, r5
 8005f74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f76:	3501      	adds	r5, #1
 8005f78:	3230      	adds	r2, #48	@ 0x30
 8005f7a:	701a      	strb	r2, [r3, #0]
 8005f7c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005f7e:	002c      	movs	r4, r5
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d000      	beq.n	8005f86 <_dtoa_r+0x4f6>
 8005f84:	e131      	b.n	80061ea <_dtoa_r+0x75a>
 8005f86:	0002      	movs	r2, r0
 8005f88:	000b      	movs	r3, r1
 8005f8a:	f7fa fa8d 	bl	80004a8 <__aeabi_dadd>
 8005f8e:	9a06      	ldr	r2, [sp, #24]
 8005f90:	9b07      	ldr	r3, [sp, #28]
 8005f92:	0006      	movs	r6, r0
 8005f94:	000f      	movs	r7, r1
 8005f96:	f7fa fa73 	bl	8000480 <__aeabi_dcmpgt>
 8005f9a:	2800      	cmp	r0, #0
 8005f9c:	d000      	beq.n	8005fa0 <_dtoa_r+0x510>
 8005f9e:	e10f      	b.n	80061c0 <_dtoa_r+0x730>
 8005fa0:	9a06      	ldr	r2, [sp, #24]
 8005fa2:	9b07      	ldr	r3, [sp, #28]
 8005fa4:	0030      	movs	r0, r6
 8005fa6:	0039      	movs	r1, r7
 8005fa8:	f7fa fa50 	bl	800044c <__aeabi_dcmpeq>
 8005fac:	2800      	cmp	r0, #0
 8005fae:	d003      	beq.n	8005fb8 <_dtoa_r+0x528>
 8005fb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fb2:	07dd      	lsls	r5, r3, #31
 8005fb4:	d500      	bpl.n	8005fb8 <_dtoa_r+0x528>
 8005fb6:	e103      	b.n	80061c0 <_dtoa_r+0x730>
 8005fb8:	9905      	ldr	r1, [sp, #20]
 8005fba:	9803      	ldr	r0, [sp, #12]
 8005fbc:	f000 fca6 	bl	800690c <_Bfree>
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	7023      	strb	r3, [r4, #0]
 8005fc4:	9b04      	ldr	r3, [sp, #16]
 8005fc6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005fc8:	3301      	adds	r3, #1
 8005fca:	6013      	str	r3, [r2, #0]
 8005fcc:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d100      	bne.n	8005fd4 <_dtoa_r+0x544>
 8005fd2:	e5a7      	b.n	8005b24 <_dtoa_r+0x94>
 8005fd4:	601c      	str	r4, [r3, #0]
 8005fd6:	e5a5      	b.n	8005b24 <_dtoa_r+0x94>
 8005fd8:	423d      	tst	r5, r7
 8005fda:	d005      	beq.n	8005fe8 <_dtoa_r+0x558>
 8005fdc:	6832      	ldr	r2, [r6, #0]
 8005fde:	6873      	ldr	r3, [r6, #4]
 8005fe0:	f7fb fa0a 	bl	80013f8 <__aeabi_dmul>
 8005fe4:	003b      	movs	r3, r7
 8005fe6:	3401      	adds	r4, #1
 8005fe8:	106d      	asrs	r5, r5, #1
 8005fea:	3608      	adds	r6, #8
 8005fec:	e736      	b.n	8005e5c <_dtoa_r+0x3cc>
 8005fee:	9b04      	ldr	r3, [sp, #16]
 8005ff0:	930c      	str	r3, [sp, #48]	@ 0x30
 8005ff2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ff4:	e75a      	b.n	8005eac <_dtoa_r+0x41c>
 8005ff6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005ff8:	4b69      	ldr	r3, [pc, #420]	@ (80061a0 <_dtoa_r+0x710>)
 8005ffa:	3a01      	subs	r2, #1
 8005ffc:	00d2      	lsls	r2, r2, #3
 8005ffe:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8006000:	189b      	adds	r3, r3, r2
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	2900      	cmp	r1, #0
 8006008:	d04c      	beq.n	80060a4 <_dtoa_r+0x614>
 800600a:	2000      	movs	r0, #0
 800600c:	496b      	ldr	r1, [pc, #428]	@ (80061bc <_dtoa_r+0x72c>)
 800600e:	f7fa fdaf 	bl	8000b70 <__aeabi_ddiv>
 8006012:	0032      	movs	r2, r6
 8006014:	003b      	movs	r3, r7
 8006016:	f7fb fcb7 	bl	8001988 <__aeabi_dsub>
 800601a:	9a08      	ldr	r2, [sp, #32]
 800601c:	0006      	movs	r6, r0
 800601e:	4694      	mov	ip, r2
 8006020:	000f      	movs	r7, r1
 8006022:	9b08      	ldr	r3, [sp, #32]
 8006024:	9316      	str	r3, [sp, #88]	@ 0x58
 8006026:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006028:	4463      	add	r3, ip
 800602a:	9311      	str	r3, [sp, #68]	@ 0x44
 800602c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800602e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006030:	f7fc f868 	bl	8002104 <__aeabi_d2iz>
 8006034:	0005      	movs	r5, r0
 8006036:	f7fc f8a1 	bl	800217c <__aeabi_i2d>
 800603a:	0002      	movs	r2, r0
 800603c:	000b      	movs	r3, r1
 800603e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006040:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006042:	f7fb fca1 	bl	8001988 <__aeabi_dsub>
 8006046:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006048:	3530      	adds	r5, #48	@ 0x30
 800604a:	1c5c      	adds	r4, r3, #1
 800604c:	701d      	strb	r5, [r3, #0]
 800604e:	0032      	movs	r2, r6
 8006050:	003b      	movs	r3, r7
 8006052:	900a      	str	r0, [sp, #40]	@ 0x28
 8006054:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006056:	f7fa f9ff 	bl	8000458 <__aeabi_dcmplt>
 800605a:	2800      	cmp	r0, #0
 800605c:	d16a      	bne.n	8006134 <_dtoa_r+0x6a4>
 800605e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006060:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006062:	2000      	movs	r0, #0
 8006064:	4950      	ldr	r1, [pc, #320]	@ (80061a8 <_dtoa_r+0x718>)
 8006066:	f7fb fc8f 	bl	8001988 <__aeabi_dsub>
 800606a:	0032      	movs	r2, r6
 800606c:	003b      	movs	r3, r7
 800606e:	f7fa f9f3 	bl	8000458 <__aeabi_dcmplt>
 8006072:	2800      	cmp	r0, #0
 8006074:	d000      	beq.n	8006078 <_dtoa_r+0x5e8>
 8006076:	e0a5      	b.n	80061c4 <_dtoa_r+0x734>
 8006078:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800607a:	42a3      	cmp	r3, r4
 800607c:	d100      	bne.n	8006080 <_dtoa_r+0x5f0>
 800607e:	e742      	b.n	8005f06 <_dtoa_r+0x476>
 8006080:	2200      	movs	r2, #0
 8006082:	0030      	movs	r0, r6
 8006084:	0039      	movs	r1, r7
 8006086:	4b49      	ldr	r3, [pc, #292]	@ (80061ac <_dtoa_r+0x71c>)
 8006088:	f7fb f9b6 	bl	80013f8 <__aeabi_dmul>
 800608c:	2200      	movs	r2, #0
 800608e:	0006      	movs	r6, r0
 8006090:	000f      	movs	r7, r1
 8006092:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006094:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006096:	4b45      	ldr	r3, [pc, #276]	@ (80061ac <_dtoa_r+0x71c>)
 8006098:	f7fb f9ae 	bl	80013f8 <__aeabi_dmul>
 800609c:	9416      	str	r4, [sp, #88]	@ 0x58
 800609e:	900a      	str	r0, [sp, #40]	@ 0x28
 80060a0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80060a2:	e7c3      	b.n	800602c <_dtoa_r+0x59c>
 80060a4:	0030      	movs	r0, r6
 80060a6:	0039      	movs	r1, r7
 80060a8:	f7fb f9a6 	bl	80013f8 <__aeabi_dmul>
 80060ac:	9d08      	ldr	r5, [sp, #32]
 80060ae:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80060b0:	002b      	movs	r3, r5
 80060b2:	4694      	mov	ip, r2
 80060b4:	9016      	str	r0, [sp, #88]	@ 0x58
 80060b6:	9117      	str	r1, [sp, #92]	@ 0x5c
 80060b8:	4463      	add	r3, ip
 80060ba:	9319      	str	r3, [sp, #100]	@ 0x64
 80060bc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80060be:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80060c0:	f7fc f820 	bl	8002104 <__aeabi_d2iz>
 80060c4:	0004      	movs	r4, r0
 80060c6:	f7fc f859 	bl	800217c <__aeabi_i2d>
 80060ca:	000b      	movs	r3, r1
 80060cc:	0002      	movs	r2, r0
 80060ce:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80060d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80060d2:	f7fb fc59 	bl	8001988 <__aeabi_dsub>
 80060d6:	3430      	adds	r4, #48	@ 0x30
 80060d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80060da:	702c      	strb	r4, [r5, #0]
 80060dc:	3501      	adds	r5, #1
 80060de:	0006      	movs	r6, r0
 80060e0:	000f      	movs	r7, r1
 80060e2:	42ab      	cmp	r3, r5
 80060e4:	d129      	bne.n	800613a <_dtoa_r+0x6aa>
 80060e6:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80060e8:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80060ea:	9b08      	ldr	r3, [sp, #32]
 80060ec:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80060ee:	469c      	mov	ip, r3
 80060f0:	2200      	movs	r2, #0
 80060f2:	4b32      	ldr	r3, [pc, #200]	@ (80061bc <_dtoa_r+0x72c>)
 80060f4:	4464      	add	r4, ip
 80060f6:	f7fa f9d7 	bl	80004a8 <__aeabi_dadd>
 80060fa:	0002      	movs	r2, r0
 80060fc:	000b      	movs	r3, r1
 80060fe:	0030      	movs	r0, r6
 8006100:	0039      	movs	r1, r7
 8006102:	f7fa f9bd 	bl	8000480 <__aeabi_dcmpgt>
 8006106:	2800      	cmp	r0, #0
 8006108:	d15c      	bne.n	80061c4 <_dtoa_r+0x734>
 800610a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800610c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800610e:	2000      	movs	r0, #0
 8006110:	492a      	ldr	r1, [pc, #168]	@ (80061bc <_dtoa_r+0x72c>)
 8006112:	f7fb fc39 	bl	8001988 <__aeabi_dsub>
 8006116:	0002      	movs	r2, r0
 8006118:	000b      	movs	r3, r1
 800611a:	0030      	movs	r0, r6
 800611c:	0039      	movs	r1, r7
 800611e:	f7fa f99b 	bl	8000458 <__aeabi_dcmplt>
 8006122:	2800      	cmp	r0, #0
 8006124:	d100      	bne.n	8006128 <_dtoa_r+0x698>
 8006126:	e6ee      	b.n	8005f06 <_dtoa_r+0x476>
 8006128:	0023      	movs	r3, r4
 800612a:	3c01      	subs	r4, #1
 800612c:	7822      	ldrb	r2, [r4, #0]
 800612e:	2a30      	cmp	r2, #48	@ 0x30
 8006130:	d0fa      	beq.n	8006128 <_dtoa_r+0x698>
 8006132:	001c      	movs	r4, r3
 8006134:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006136:	9304      	str	r3, [sp, #16]
 8006138:	e73e      	b.n	8005fb8 <_dtoa_r+0x528>
 800613a:	2200      	movs	r2, #0
 800613c:	4b1b      	ldr	r3, [pc, #108]	@ (80061ac <_dtoa_r+0x71c>)
 800613e:	f7fb f95b 	bl	80013f8 <__aeabi_dmul>
 8006142:	900a      	str	r0, [sp, #40]	@ 0x28
 8006144:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006146:	e7b9      	b.n	80060bc <_dtoa_r+0x62c>
 8006148:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800614a:	2b00      	cmp	r3, #0
 800614c:	d10c      	bne.n	8006168 <_dtoa_r+0x6d8>
 800614e:	9806      	ldr	r0, [sp, #24]
 8006150:	9907      	ldr	r1, [sp, #28]
 8006152:	2200      	movs	r2, #0
 8006154:	4b18      	ldr	r3, [pc, #96]	@ (80061b8 <_dtoa_r+0x728>)
 8006156:	f7fb f94f 	bl	80013f8 <__aeabi_dmul>
 800615a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800615c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800615e:	f7fa f999 	bl	8000494 <__aeabi_dcmpge>
 8006162:	2800      	cmp	r0, #0
 8006164:	d100      	bne.n	8006168 <_dtoa_r+0x6d8>
 8006166:	e164      	b.n	8006432 <_dtoa_r+0x9a2>
 8006168:	2600      	movs	r6, #0
 800616a:	0037      	movs	r7, r6
 800616c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800616e:	9c08      	ldr	r4, [sp, #32]
 8006170:	43db      	mvns	r3, r3
 8006172:	930c      	str	r3, [sp, #48]	@ 0x30
 8006174:	2300      	movs	r3, #0
 8006176:	9304      	str	r3, [sp, #16]
 8006178:	0031      	movs	r1, r6
 800617a:	9803      	ldr	r0, [sp, #12]
 800617c:	f000 fbc6 	bl	800690c <_Bfree>
 8006180:	2f00      	cmp	r7, #0
 8006182:	d0d7      	beq.n	8006134 <_dtoa_r+0x6a4>
 8006184:	9b04      	ldr	r3, [sp, #16]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d005      	beq.n	8006196 <_dtoa_r+0x706>
 800618a:	42bb      	cmp	r3, r7
 800618c:	d003      	beq.n	8006196 <_dtoa_r+0x706>
 800618e:	0019      	movs	r1, r3
 8006190:	9803      	ldr	r0, [sp, #12]
 8006192:	f000 fbbb 	bl	800690c <_Bfree>
 8006196:	0039      	movs	r1, r7
 8006198:	9803      	ldr	r0, [sp, #12]
 800619a:	f000 fbb7 	bl	800690c <_Bfree>
 800619e:	e7c9      	b.n	8006134 <_dtoa_r+0x6a4>
 80061a0:	08007d38 	.word	0x08007d38
 80061a4:	08007d10 	.word	0x08007d10
 80061a8:	3ff00000 	.word	0x3ff00000
 80061ac:	40240000 	.word	0x40240000
 80061b0:	401c0000 	.word	0x401c0000
 80061b4:	fcc00000 	.word	0xfcc00000
 80061b8:	40140000 	.word	0x40140000
 80061bc:	3fe00000 	.word	0x3fe00000
 80061c0:	9b04      	ldr	r3, [sp, #16]
 80061c2:	930c      	str	r3, [sp, #48]	@ 0x30
 80061c4:	0023      	movs	r3, r4
 80061c6:	001c      	movs	r4, r3
 80061c8:	3b01      	subs	r3, #1
 80061ca:	781a      	ldrb	r2, [r3, #0]
 80061cc:	2a39      	cmp	r2, #57	@ 0x39
 80061ce:	d108      	bne.n	80061e2 <_dtoa_r+0x752>
 80061d0:	9a08      	ldr	r2, [sp, #32]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d1f7      	bne.n	80061c6 <_dtoa_r+0x736>
 80061d6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80061d8:	9908      	ldr	r1, [sp, #32]
 80061da:	3201      	adds	r2, #1
 80061dc:	920c      	str	r2, [sp, #48]	@ 0x30
 80061de:	2230      	movs	r2, #48	@ 0x30
 80061e0:	700a      	strb	r2, [r1, #0]
 80061e2:	781a      	ldrb	r2, [r3, #0]
 80061e4:	3201      	adds	r2, #1
 80061e6:	701a      	strb	r2, [r3, #0]
 80061e8:	e7a4      	b.n	8006134 <_dtoa_r+0x6a4>
 80061ea:	2200      	movs	r2, #0
 80061ec:	4bc6      	ldr	r3, [pc, #792]	@ (8006508 <_dtoa_r+0xa78>)
 80061ee:	f7fb f903 	bl	80013f8 <__aeabi_dmul>
 80061f2:	2200      	movs	r2, #0
 80061f4:	2300      	movs	r3, #0
 80061f6:	0006      	movs	r6, r0
 80061f8:	000f      	movs	r7, r1
 80061fa:	f7fa f927 	bl	800044c <__aeabi_dcmpeq>
 80061fe:	2800      	cmp	r0, #0
 8006200:	d100      	bne.n	8006204 <_dtoa_r+0x774>
 8006202:	e6a1      	b.n	8005f48 <_dtoa_r+0x4b8>
 8006204:	e6d8      	b.n	8005fb8 <_dtoa_r+0x528>
 8006206:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8006208:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800620a:	9c06      	ldr	r4, [sp, #24]
 800620c:	2f00      	cmp	r7, #0
 800620e:	d014      	beq.n	800623a <_dtoa_r+0x7aa>
 8006210:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006212:	2a01      	cmp	r2, #1
 8006214:	dd00      	ble.n	8006218 <_dtoa_r+0x788>
 8006216:	e0c8      	b.n	80063aa <_dtoa_r+0x91a>
 8006218:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800621a:	2a00      	cmp	r2, #0
 800621c:	d100      	bne.n	8006220 <_dtoa_r+0x790>
 800621e:	e0be      	b.n	800639e <_dtoa_r+0x90e>
 8006220:	4aba      	ldr	r2, [pc, #744]	@ (800650c <_dtoa_r+0xa7c>)
 8006222:	189b      	adds	r3, r3, r2
 8006224:	9a06      	ldr	r2, [sp, #24]
 8006226:	2101      	movs	r1, #1
 8006228:	18d2      	adds	r2, r2, r3
 800622a:	9206      	str	r2, [sp, #24]
 800622c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800622e:	9803      	ldr	r0, [sp, #12]
 8006230:	18d3      	adds	r3, r2, r3
 8006232:	930d      	str	r3, [sp, #52]	@ 0x34
 8006234:	f000 fc22 	bl	8006a7c <__i2b>
 8006238:	0007      	movs	r7, r0
 800623a:	2c00      	cmp	r4, #0
 800623c:	d00e      	beq.n	800625c <_dtoa_r+0x7cc>
 800623e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006240:	2b00      	cmp	r3, #0
 8006242:	dd0b      	ble.n	800625c <_dtoa_r+0x7cc>
 8006244:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006246:	0023      	movs	r3, r4
 8006248:	4294      	cmp	r4, r2
 800624a:	dd00      	ble.n	800624e <_dtoa_r+0x7be>
 800624c:	0013      	movs	r3, r2
 800624e:	9a06      	ldr	r2, [sp, #24]
 8006250:	1ae4      	subs	r4, r4, r3
 8006252:	1ad2      	subs	r2, r2, r3
 8006254:	9206      	str	r2, [sp, #24]
 8006256:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	930d      	str	r3, [sp, #52]	@ 0x34
 800625c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800625e:	2b00      	cmp	r3, #0
 8006260:	d01f      	beq.n	80062a2 <_dtoa_r+0x812>
 8006262:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006264:	2b00      	cmp	r3, #0
 8006266:	d100      	bne.n	800626a <_dtoa_r+0x7da>
 8006268:	e0b5      	b.n	80063d6 <_dtoa_r+0x946>
 800626a:	2d00      	cmp	r5, #0
 800626c:	d010      	beq.n	8006290 <_dtoa_r+0x800>
 800626e:	0039      	movs	r1, r7
 8006270:	002a      	movs	r2, r5
 8006272:	9803      	ldr	r0, [sp, #12]
 8006274:	f000 fccc 	bl	8006c10 <__pow5mult>
 8006278:	9a05      	ldr	r2, [sp, #20]
 800627a:	0001      	movs	r1, r0
 800627c:	0007      	movs	r7, r0
 800627e:	9803      	ldr	r0, [sp, #12]
 8006280:	f000 fc14 	bl	8006aac <__multiply>
 8006284:	0006      	movs	r6, r0
 8006286:	9905      	ldr	r1, [sp, #20]
 8006288:	9803      	ldr	r0, [sp, #12]
 800628a:	f000 fb3f 	bl	800690c <_Bfree>
 800628e:	9605      	str	r6, [sp, #20]
 8006290:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006292:	1b5a      	subs	r2, r3, r5
 8006294:	42ab      	cmp	r3, r5
 8006296:	d004      	beq.n	80062a2 <_dtoa_r+0x812>
 8006298:	9905      	ldr	r1, [sp, #20]
 800629a:	9803      	ldr	r0, [sp, #12]
 800629c:	f000 fcb8 	bl	8006c10 <__pow5mult>
 80062a0:	9005      	str	r0, [sp, #20]
 80062a2:	2101      	movs	r1, #1
 80062a4:	9803      	ldr	r0, [sp, #12]
 80062a6:	f000 fbe9 	bl	8006a7c <__i2b>
 80062aa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80062ac:	0006      	movs	r6, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d100      	bne.n	80062b4 <_dtoa_r+0x824>
 80062b2:	e1bc      	b.n	800662e <_dtoa_r+0xb9e>
 80062b4:	001a      	movs	r2, r3
 80062b6:	0001      	movs	r1, r0
 80062b8:	9803      	ldr	r0, [sp, #12]
 80062ba:	f000 fca9 	bl	8006c10 <__pow5mult>
 80062be:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80062c0:	0006      	movs	r6, r0
 80062c2:	2500      	movs	r5, #0
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	dc16      	bgt.n	80062f6 <_dtoa_r+0x866>
 80062c8:	2500      	movs	r5, #0
 80062ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80062cc:	42ab      	cmp	r3, r5
 80062ce:	d10e      	bne.n	80062ee <_dtoa_r+0x85e>
 80062d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80062d2:	031b      	lsls	r3, r3, #12
 80062d4:	42ab      	cmp	r3, r5
 80062d6:	d10a      	bne.n	80062ee <_dtoa_r+0x85e>
 80062d8:	4b8d      	ldr	r3, [pc, #564]	@ (8006510 <_dtoa_r+0xa80>)
 80062da:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80062dc:	4213      	tst	r3, r2
 80062de:	d006      	beq.n	80062ee <_dtoa_r+0x85e>
 80062e0:	9b06      	ldr	r3, [sp, #24]
 80062e2:	3501      	adds	r5, #1
 80062e4:	3301      	adds	r3, #1
 80062e6:	9306      	str	r3, [sp, #24]
 80062e8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80062ea:	3301      	adds	r3, #1
 80062ec:	930d      	str	r3, [sp, #52]	@ 0x34
 80062ee:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80062f0:	2001      	movs	r0, #1
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d008      	beq.n	8006308 <_dtoa_r+0x878>
 80062f6:	6933      	ldr	r3, [r6, #16]
 80062f8:	3303      	adds	r3, #3
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	18f3      	adds	r3, r6, r3
 80062fe:	6858      	ldr	r0, [r3, #4]
 8006300:	f000 fb6c 	bl	80069dc <__hi0bits>
 8006304:	2320      	movs	r3, #32
 8006306:	1a18      	subs	r0, r3, r0
 8006308:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800630a:	1818      	adds	r0, r3, r0
 800630c:	0002      	movs	r2, r0
 800630e:	231f      	movs	r3, #31
 8006310:	401a      	ands	r2, r3
 8006312:	4218      	tst	r0, r3
 8006314:	d065      	beq.n	80063e2 <_dtoa_r+0x952>
 8006316:	3301      	adds	r3, #1
 8006318:	1a9b      	subs	r3, r3, r2
 800631a:	2b04      	cmp	r3, #4
 800631c:	dd5d      	ble.n	80063da <_dtoa_r+0x94a>
 800631e:	231c      	movs	r3, #28
 8006320:	1a9b      	subs	r3, r3, r2
 8006322:	9a06      	ldr	r2, [sp, #24]
 8006324:	18e4      	adds	r4, r4, r3
 8006326:	18d2      	adds	r2, r2, r3
 8006328:	9206      	str	r2, [sp, #24]
 800632a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800632c:	18d3      	adds	r3, r2, r3
 800632e:	930d      	str	r3, [sp, #52]	@ 0x34
 8006330:	9b06      	ldr	r3, [sp, #24]
 8006332:	2b00      	cmp	r3, #0
 8006334:	dd05      	ble.n	8006342 <_dtoa_r+0x8b2>
 8006336:	001a      	movs	r2, r3
 8006338:	9905      	ldr	r1, [sp, #20]
 800633a:	9803      	ldr	r0, [sp, #12]
 800633c:	f000 fcc4 	bl	8006cc8 <__lshift>
 8006340:	9005      	str	r0, [sp, #20]
 8006342:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006344:	2b00      	cmp	r3, #0
 8006346:	dd05      	ble.n	8006354 <_dtoa_r+0x8c4>
 8006348:	0031      	movs	r1, r6
 800634a:	001a      	movs	r2, r3
 800634c:	9803      	ldr	r0, [sp, #12]
 800634e:	f000 fcbb 	bl	8006cc8 <__lshift>
 8006352:	0006      	movs	r6, r0
 8006354:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006356:	2b00      	cmp	r3, #0
 8006358:	d045      	beq.n	80063e6 <_dtoa_r+0x956>
 800635a:	0031      	movs	r1, r6
 800635c:	9805      	ldr	r0, [sp, #20]
 800635e:	f000 fd1f 	bl	8006da0 <__mcmp>
 8006362:	2800      	cmp	r0, #0
 8006364:	da3f      	bge.n	80063e6 <_dtoa_r+0x956>
 8006366:	9b04      	ldr	r3, [sp, #16]
 8006368:	220a      	movs	r2, #10
 800636a:	3b01      	subs	r3, #1
 800636c:	930c      	str	r3, [sp, #48]	@ 0x30
 800636e:	9905      	ldr	r1, [sp, #20]
 8006370:	2300      	movs	r3, #0
 8006372:	9803      	ldr	r0, [sp, #12]
 8006374:	f000 faee 	bl	8006954 <__multadd>
 8006378:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800637a:	9005      	str	r0, [sp, #20]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d100      	bne.n	8006382 <_dtoa_r+0x8f2>
 8006380:	e15c      	b.n	800663c <_dtoa_r+0xbac>
 8006382:	2300      	movs	r3, #0
 8006384:	0039      	movs	r1, r7
 8006386:	220a      	movs	r2, #10
 8006388:	9803      	ldr	r0, [sp, #12]
 800638a:	f000 fae3 	bl	8006954 <__multadd>
 800638e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006390:	0007      	movs	r7, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	dc55      	bgt.n	8006442 <_dtoa_r+0x9b2>
 8006396:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006398:	2b02      	cmp	r3, #2
 800639a:	dc2d      	bgt.n	80063f8 <_dtoa_r+0x968>
 800639c:	e051      	b.n	8006442 <_dtoa_r+0x9b2>
 800639e:	2336      	movs	r3, #54	@ 0x36
 80063a0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80063a2:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80063a4:	9c06      	ldr	r4, [sp, #24]
 80063a6:	1a9b      	subs	r3, r3, r2
 80063a8:	e73c      	b.n	8006224 <_dtoa_r+0x794>
 80063aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063ac:	1e5d      	subs	r5, r3, #1
 80063ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80063b0:	42ab      	cmp	r3, r5
 80063b2:	db08      	blt.n	80063c6 <_dtoa_r+0x936>
 80063b4:	1b5d      	subs	r5, r3, r5
 80063b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063b8:	9c06      	ldr	r4, [sp, #24]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	db00      	blt.n	80063c0 <_dtoa_r+0x930>
 80063be:	e731      	b.n	8006224 <_dtoa_r+0x794>
 80063c0:	1ae4      	subs	r4, r4, r3
 80063c2:	2300      	movs	r3, #0
 80063c4:	e72e      	b.n	8006224 <_dtoa_r+0x794>
 80063c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80063c8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80063ca:	1aeb      	subs	r3, r5, r3
 80063cc:	18d3      	adds	r3, r2, r3
 80063ce:	950f      	str	r5, [sp, #60]	@ 0x3c
 80063d0:	9314      	str	r3, [sp, #80]	@ 0x50
 80063d2:	2500      	movs	r5, #0
 80063d4:	e7ef      	b.n	80063b6 <_dtoa_r+0x926>
 80063d6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80063d8:	e75e      	b.n	8006298 <_dtoa_r+0x808>
 80063da:	2b04      	cmp	r3, #4
 80063dc:	d0a8      	beq.n	8006330 <_dtoa_r+0x8a0>
 80063de:	331c      	adds	r3, #28
 80063e0:	e79f      	b.n	8006322 <_dtoa_r+0x892>
 80063e2:	0013      	movs	r3, r2
 80063e4:	e7fb      	b.n	80063de <_dtoa_r+0x94e>
 80063e6:	9b04      	ldr	r3, [sp, #16]
 80063e8:	930c      	str	r3, [sp, #48]	@ 0x30
 80063ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063ec:	930e      	str	r3, [sp, #56]	@ 0x38
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	dc23      	bgt.n	800643a <_dtoa_r+0x9aa>
 80063f2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80063f4:	2b02      	cmp	r3, #2
 80063f6:	dd20      	ble.n	800643a <_dtoa_r+0x9aa>
 80063f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d000      	beq.n	8006400 <_dtoa_r+0x970>
 80063fe:	e6b5      	b.n	800616c <_dtoa_r+0x6dc>
 8006400:	0031      	movs	r1, r6
 8006402:	2205      	movs	r2, #5
 8006404:	9803      	ldr	r0, [sp, #12]
 8006406:	f000 faa5 	bl	8006954 <__multadd>
 800640a:	0006      	movs	r6, r0
 800640c:	0001      	movs	r1, r0
 800640e:	9805      	ldr	r0, [sp, #20]
 8006410:	f000 fcc6 	bl	8006da0 <__mcmp>
 8006414:	2800      	cmp	r0, #0
 8006416:	dc00      	bgt.n	800641a <_dtoa_r+0x98a>
 8006418:	e6a8      	b.n	800616c <_dtoa_r+0x6dc>
 800641a:	9b08      	ldr	r3, [sp, #32]
 800641c:	9a08      	ldr	r2, [sp, #32]
 800641e:	1c5c      	adds	r4, r3, #1
 8006420:	2331      	movs	r3, #49	@ 0x31
 8006422:	7013      	strb	r3, [r2, #0]
 8006424:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006426:	3301      	adds	r3, #1
 8006428:	930c      	str	r3, [sp, #48]	@ 0x30
 800642a:	e6a3      	b.n	8006174 <_dtoa_r+0x6e4>
 800642c:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800642e:	0037      	movs	r7, r6
 8006430:	e7f3      	b.n	800641a <_dtoa_r+0x98a>
 8006432:	9b04      	ldr	r3, [sp, #16]
 8006434:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8006436:	930c      	str	r3, [sp, #48]	@ 0x30
 8006438:	e7f9      	b.n	800642e <_dtoa_r+0x99e>
 800643a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800643c:	2b00      	cmp	r3, #0
 800643e:	d100      	bne.n	8006442 <_dtoa_r+0x9b2>
 8006440:	e100      	b.n	8006644 <_dtoa_r+0xbb4>
 8006442:	2c00      	cmp	r4, #0
 8006444:	dd05      	ble.n	8006452 <_dtoa_r+0x9c2>
 8006446:	0039      	movs	r1, r7
 8006448:	0022      	movs	r2, r4
 800644a:	9803      	ldr	r0, [sp, #12]
 800644c:	f000 fc3c 	bl	8006cc8 <__lshift>
 8006450:	0007      	movs	r7, r0
 8006452:	0038      	movs	r0, r7
 8006454:	2d00      	cmp	r5, #0
 8006456:	d018      	beq.n	800648a <_dtoa_r+0x9fa>
 8006458:	6879      	ldr	r1, [r7, #4]
 800645a:	9803      	ldr	r0, [sp, #12]
 800645c:	f000 fa12 	bl	8006884 <_Balloc>
 8006460:	1e04      	subs	r4, r0, #0
 8006462:	d105      	bne.n	8006470 <_dtoa_r+0x9e0>
 8006464:	0022      	movs	r2, r4
 8006466:	4b2b      	ldr	r3, [pc, #172]	@ (8006514 <_dtoa_r+0xa84>)
 8006468:	482b      	ldr	r0, [pc, #172]	@ (8006518 <_dtoa_r+0xa88>)
 800646a:	492c      	ldr	r1, [pc, #176]	@ (800651c <_dtoa_r+0xa8c>)
 800646c:	f7ff fb25 	bl	8005aba <_dtoa_r+0x2a>
 8006470:	0039      	movs	r1, r7
 8006472:	693a      	ldr	r2, [r7, #16]
 8006474:	310c      	adds	r1, #12
 8006476:	3202      	adds	r2, #2
 8006478:	0092      	lsls	r2, r2, #2
 800647a:	300c      	adds	r0, #12
 800647c:	f000 ffda 	bl	8007434 <memcpy>
 8006480:	2201      	movs	r2, #1
 8006482:	0021      	movs	r1, r4
 8006484:	9803      	ldr	r0, [sp, #12]
 8006486:	f000 fc1f 	bl	8006cc8 <__lshift>
 800648a:	9b08      	ldr	r3, [sp, #32]
 800648c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800648e:	9306      	str	r3, [sp, #24]
 8006490:	3b01      	subs	r3, #1
 8006492:	189b      	adds	r3, r3, r2
 8006494:	2201      	movs	r2, #1
 8006496:	9704      	str	r7, [sp, #16]
 8006498:	0007      	movs	r7, r0
 800649a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800649c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800649e:	4013      	ands	r3, r2
 80064a0:	930e      	str	r3, [sp, #56]	@ 0x38
 80064a2:	0031      	movs	r1, r6
 80064a4:	9805      	ldr	r0, [sp, #20]
 80064a6:	f7ff fa65 	bl	8005974 <quorem>
 80064aa:	9904      	ldr	r1, [sp, #16]
 80064ac:	0005      	movs	r5, r0
 80064ae:	900a      	str	r0, [sp, #40]	@ 0x28
 80064b0:	9805      	ldr	r0, [sp, #20]
 80064b2:	f000 fc75 	bl	8006da0 <__mcmp>
 80064b6:	003a      	movs	r2, r7
 80064b8:	900d      	str	r0, [sp, #52]	@ 0x34
 80064ba:	0031      	movs	r1, r6
 80064bc:	9803      	ldr	r0, [sp, #12]
 80064be:	f000 fc8b 	bl	8006dd8 <__mdiff>
 80064c2:	2201      	movs	r2, #1
 80064c4:	68c3      	ldr	r3, [r0, #12]
 80064c6:	0004      	movs	r4, r0
 80064c8:	3530      	adds	r5, #48	@ 0x30
 80064ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d104      	bne.n	80064da <_dtoa_r+0xa4a>
 80064d0:	0001      	movs	r1, r0
 80064d2:	9805      	ldr	r0, [sp, #20]
 80064d4:	f000 fc64 	bl	8006da0 <__mcmp>
 80064d8:	9009      	str	r0, [sp, #36]	@ 0x24
 80064da:	0021      	movs	r1, r4
 80064dc:	9803      	ldr	r0, [sp, #12]
 80064de:	f000 fa15 	bl	800690c <_Bfree>
 80064e2:	9b06      	ldr	r3, [sp, #24]
 80064e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80064e6:	1c5c      	adds	r4, r3, #1
 80064e8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80064ea:	4313      	orrs	r3, r2
 80064ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80064ee:	4313      	orrs	r3, r2
 80064f0:	d116      	bne.n	8006520 <_dtoa_r+0xa90>
 80064f2:	2d39      	cmp	r5, #57	@ 0x39
 80064f4:	d02f      	beq.n	8006556 <_dtoa_r+0xac6>
 80064f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	dd01      	ble.n	8006500 <_dtoa_r+0xa70>
 80064fc:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80064fe:	3531      	adds	r5, #49	@ 0x31
 8006500:	9b06      	ldr	r3, [sp, #24]
 8006502:	701d      	strb	r5, [r3, #0]
 8006504:	e638      	b.n	8006178 <_dtoa_r+0x6e8>
 8006506:	46c0      	nop			@ (mov r8, r8)
 8006508:	40240000 	.word	0x40240000
 800650c:	00000433 	.word	0x00000433
 8006510:	7ff00000 	.word	0x7ff00000
 8006514:	08007c94 	.word	0x08007c94
 8006518:	08007c3c 	.word	0x08007c3c
 800651c:	000002ef 	.word	0x000002ef
 8006520:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006522:	2b00      	cmp	r3, #0
 8006524:	db04      	blt.n	8006530 <_dtoa_r+0xaa0>
 8006526:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006528:	4313      	orrs	r3, r2
 800652a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800652c:	4313      	orrs	r3, r2
 800652e:	d11e      	bne.n	800656e <_dtoa_r+0xade>
 8006530:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006532:	2b00      	cmp	r3, #0
 8006534:	dde4      	ble.n	8006500 <_dtoa_r+0xa70>
 8006536:	9905      	ldr	r1, [sp, #20]
 8006538:	2201      	movs	r2, #1
 800653a:	9803      	ldr	r0, [sp, #12]
 800653c:	f000 fbc4 	bl	8006cc8 <__lshift>
 8006540:	0031      	movs	r1, r6
 8006542:	9005      	str	r0, [sp, #20]
 8006544:	f000 fc2c 	bl	8006da0 <__mcmp>
 8006548:	2800      	cmp	r0, #0
 800654a:	dc02      	bgt.n	8006552 <_dtoa_r+0xac2>
 800654c:	d1d8      	bne.n	8006500 <_dtoa_r+0xa70>
 800654e:	07eb      	lsls	r3, r5, #31
 8006550:	d5d6      	bpl.n	8006500 <_dtoa_r+0xa70>
 8006552:	2d39      	cmp	r5, #57	@ 0x39
 8006554:	d1d2      	bne.n	80064fc <_dtoa_r+0xa6c>
 8006556:	2339      	movs	r3, #57	@ 0x39
 8006558:	9a06      	ldr	r2, [sp, #24]
 800655a:	7013      	strb	r3, [r2, #0]
 800655c:	0023      	movs	r3, r4
 800655e:	001c      	movs	r4, r3
 8006560:	3b01      	subs	r3, #1
 8006562:	781a      	ldrb	r2, [r3, #0]
 8006564:	2a39      	cmp	r2, #57	@ 0x39
 8006566:	d04f      	beq.n	8006608 <_dtoa_r+0xb78>
 8006568:	3201      	adds	r2, #1
 800656a:	701a      	strb	r2, [r3, #0]
 800656c:	e604      	b.n	8006178 <_dtoa_r+0x6e8>
 800656e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006570:	2b00      	cmp	r3, #0
 8006572:	dd03      	ble.n	800657c <_dtoa_r+0xaec>
 8006574:	2d39      	cmp	r5, #57	@ 0x39
 8006576:	d0ee      	beq.n	8006556 <_dtoa_r+0xac6>
 8006578:	3501      	adds	r5, #1
 800657a:	e7c1      	b.n	8006500 <_dtoa_r+0xa70>
 800657c:	9b06      	ldr	r3, [sp, #24]
 800657e:	9a06      	ldr	r2, [sp, #24]
 8006580:	701d      	strb	r5, [r3, #0]
 8006582:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006584:	4293      	cmp	r3, r2
 8006586:	d02a      	beq.n	80065de <_dtoa_r+0xb4e>
 8006588:	2300      	movs	r3, #0
 800658a:	220a      	movs	r2, #10
 800658c:	9905      	ldr	r1, [sp, #20]
 800658e:	9803      	ldr	r0, [sp, #12]
 8006590:	f000 f9e0 	bl	8006954 <__multadd>
 8006594:	9b04      	ldr	r3, [sp, #16]
 8006596:	9005      	str	r0, [sp, #20]
 8006598:	42bb      	cmp	r3, r7
 800659a:	d109      	bne.n	80065b0 <_dtoa_r+0xb20>
 800659c:	2300      	movs	r3, #0
 800659e:	220a      	movs	r2, #10
 80065a0:	9904      	ldr	r1, [sp, #16]
 80065a2:	9803      	ldr	r0, [sp, #12]
 80065a4:	f000 f9d6 	bl	8006954 <__multadd>
 80065a8:	9004      	str	r0, [sp, #16]
 80065aa:	0007      	movs	r7, r0
 80065ac:	9406      	str	r4, [sp, #24]
 80065ae:	e778      	b.n	80064a2 <_dtoa_r+0xa12>
 80065b0:	9904      	ldr	r1, [sp, #16]
 80065b2:	2300      	movs	r3, #0
 80065b4:	220a      	movs	r2, #10
 80065b6:	9803      	ldr	r0, [sp, #12]
 80065b8:	f000 f9cc 	bl	8006954 <__multadd>
 80065bc:	2300      	movs	r3, #0
 80065be:	9004      	str	r0, [sp, #16]
 80065c0:	220a      	movs	r2, #10
 80065c2:	0039      	movs	r1, r7
 80065c4:	9803      	ldr	r0, [sp, #12]
 80065c6:	f000 f9c5 	bl	8006954 <__multadd>
 80065ca:	e7ee      	b.n	80065aa <_dtoa_r+0xb1a>
 80065cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80065ce:	2401      	movs	r4, #1
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	dd00      	ble.n	80065d6 <_dtoa_r+0xb46>
 80065d4:	001c      	movs	r4, r3
 80065d6:	9b08      	ldr	r3, [sp, #32]
 80065d8:	191c      	adds	r4, r3, r4
 80065da:	2300      	movs	r3, #0
 80065dc:	9304      	str	r3, [sp, #16]
 80065de:	9905      	ldr	r1, [sp, #20]
 80065e0:	2201      	movs	r2, #1
 80065e2:	9803      	ldr	r0, [sp, #12]
 80065e4:	f000 fb70 	bl	8006cc8 <__lshift>
 80065e8:	0031      	movs	r1, r6
 80065ea:	9005      	str	r0, [sp, #20]
 80065ec:	f000 fbd8 	bl	8006da0 <__mcmp>
 80065f0:	2800      	cmp	r0, #0
 80065f2:	dcb3      	bgt.n	800655c <_dtoa_r+0xacc>
 80065f4:	d101      	bne.n	80065fa <_dtoa_r+0xb6a>
 80065f6:	07ed      	lsls	r5, r5, #31
 80065f8:	d4b0      	bmi.n	800655c <_dtoa_r+0xacc>
 80065fa:	0023      	movs	r3, r4
 80065fc:	001c      	movs	r4, r3
 80065fe:	3b01      	subs	r3, #1
 8006600:	781a      	ldrb	r2, [r3, #0]
 8006602:	2a30      	cmp	r2, #48	@ 0x30
 8006604:	d0fa      	beq.n	80065fc <_dtoa_r+0xb6c>
 8006606:	e5b7      	b.n	8006178 <_dtoa_r+0x6e8>
 8006608:	9a08      	ldr	r2, [sp, #32]
 800660a:	429a      	cmp	r2, r3
 800660c:	d1a7      	bne.n	800655e <_dtoa_r+0xace>
 800660e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006610:	3301      	adds	r3, #1
 8006612:	930c      	str	r3, [sp, #48]	@ 0x30
 8006614:	2331      	movs	r3, #49	@ 0x31
 8006616:	7013      	strb	r3, [r2, #0]
 8006618:	e5ae      	b.n	8006178 <_dtoa_r+0x6e8>
 800661a:	4b15      	ldr	r3, [pc, #84]	@ (8006670 <_dtoa_r+0xbe0>)
 800661c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800661e:	9308      	str	r3, [sp, #32]
 8006620:	4b14      	ldr	r3, [pc, #80]	@ (8006674 <_dtoa_r+0xbe4>)
 8006622:	2a00      	cmp	r2, #0
 8006624:	d001      	beq.n	800662a <_dtoa_r+0xb9a>
 8006626:	f7ff fa7b 	bl	8005b20 <_dtoa_r+0x90>
 800662a:	f7ff fa7b 	bl	8005b24 <_dtoa_r+0x94>
 800662e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006630:	2b01      	cmp	r3, #1
 8006632:	dc00      	bgt.n	8006636 <_dtoa_r+0xba6>
 8006634:	e648      	b.n	80062c8 <_dtoa_r+0x838>
 8006636:	2001      	movs	r0, #1
 8006638:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800663a:	e665      	b.n	8006308 <_dtoa_r+0x878>
 800663c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800663e:	2b00      	cmp	r3, #0
 8006640:	dc00      	bgt.n	8006644 <_dtoa_r+0xbb4>
 8006642:	e6d6      	b.n	80063f2 <_dtoa_r+0x962>
 8006644:	2400      	movs	r4, #0
 8006646:	0031      	movs	r1, r6
 8006648:	9805      	ldr	r0, [sp, #20]
 800664a:	f7ff f993 	bl	8005974 <quorem>
 800664e:	9b08      	ldr	r3, [sp, #32]
 8006650:	3030      	adds	r0, #48	@ 0x30
 8006652:	5518      	strb	r0, [r3, r4]
 8006654:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006656:	3401      	adds	r4, #1
 8006658:	0005      	movs	r5, r0
 800665a:	429c      	cmp	r4, r3
 800665c:	dab6      	bge.n	80065cc <_dtoa_r+0xb3c>
 800665e:	2300      	movs	r3, #0
 8006660:	220a      	movs	r2, #10
 8006662:	9905      	ldr	r1, [sp, #20]
 8006664:	9803      	ldr	r0, [sp, #12]
 8006666:	f000 f975 	bl	8006954 <__multadd>
 800666a:	9005      	str	r0, [sp, #20]
 800666c:	e7eb      	b.n	8006646 <_dtoa_r+0xbb6>
 800666e:	46c0      	nop			@ (mov r8, r8)
 8006670:	08007c18 	.word	0x08007c18
 8006674:	08007c20 	.word	0x08007c20

08006678 <_free_r>:
 8006678:	b570      	push	{r4, r5, r6, lr}
 800667a:	0005      	movs	r5, r0
 800667c:	1e0c      	subs	r4, r1, #0
 800667e:	d010      	beq.n	80066a2 <_free_r+0x2a>
 8006680:	3c04      	subs	r4, #4
 8006682:	6823      	ldr	r3, [r4, #0]
 8006684:	2b00      	cmp	r3, #0
 8006686:	da00      	bge.n	800668a <_free_r+0x12>
 8006688:	18e4      	adds	r4, r4, r3
 800668a:	0028      	movs	r0, r5
 800668c:	f000 f8ea 	bl	8006864 <__malloc_lock>
 8006690:	4a1d      	ldr	r2, [pc, #116]	@ (8006708 <_free_r+0x90>)
 8006692:	6813      	ldr	r3, [r2, #0]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d105      	bne.n	80066a4 <_free_r+0x2c>
 8006698:	6063      	str	r3, [r4, #4]
 800669a:	6014      	str	r4, [r2, #0]
 800669c:	0028      	movs	r0, r5
 800669e:	f000 f8e9 	bl	8006874 <__malloc_unlock>
 80066a2:	bd70      	pop	{r4, r5, r6, pc}
 80066a4:	42a3      	cmp	r3, r4
 80066a6:	d908      	bls.n	80066ba <_free_r+0x42>
 80066a8:	6820      	ldr	r0, [r4, #0]
 80066aa:	1821      	adds	r1, r4, r0
 80066ac:	428b      	cmp	r3, r1
 80066ae:	d1f3      	bne.n	8006698 <_free_r+0x20>
 80066b0:	6819      	ldr	r1, [r3, #0]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	1809      	adds	r1, r1, r0
 80066b6:	6021      	str	r1, [r4, #0]
 80066b8:	e7ee      	b.n	8006698 <_free_r+0x20>
 80066ba:	001a      	movs	r2, r3
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d001      	beq.n	80066c6 <_free_r+0x4e>
 80066c2:	42a3      	cmp	r3, r4
 80066c4:	d9f9      	bls.n	80066ba <_free_r+0x42>
 80066c6:	6811      	ldr	r1, [r2, #0]
 80066c8:	1850      	adds	r0, r2, r1
 80066ca:	42a0      	cmp	r0, r4
 80066cc:	d10b      	bne.n	80066e6 <_free_r+0x6e>
 80066ce:	6820      	ldr	r0, [r4, #0]
 80066d0:	1809      	adds	r1, r1, r0
 80066d2:	1850      	adds	r0, r2, r1
 80066d4:	6011      	str	r1, [r2, #0]
 80066d6:	4283      	cmp	r3, r0
 80066d8:	d1e0      	bne.n	800669c <_free_r+0x24>
 80066da:	6818      	ldr	r0, [r3, #0]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	1841      	adds	r1, r0, r1
 80066e0:	6011      	str	r1, [r2, #0]
 80066e2:	6053      	str	r3, [r2, #4]
 80066e4:	e7da      	b.n	800669c <_free_r+0x24>
 80066e6:	42a0      	cmp	r0, r4
 80066e8:	d902      	bls.n	80066f0 <_free_r+0x78>
 80066ea:	230c      	movs	r3, #12
 80066ec:	602b      	str	r3, [r5, #0]
 80066ee:	e7d5      	b.n	800669c <_free_r+0x24>
 80066f0:	6820      	ldr	r0, [r4, #0]
 80066f2:	1821      	adds	r1, r4, r0
 80066f4:	428b      	cmp	r3, r1
 80066f6:	d103      	bne.n	8006700 <_free_r+0x88>
 80066f8:	6819      	ldr	r1, [r3, #0]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	1809      	adds	r1, r1, r0
 80066fe:	6021      	str	r1, [r4, #0]
 8006700:	6063      	str	r3, [r4, #4]
 8006702:	6054      	str	r4, [r2, #4]
 8006704:	e7ca      	b.n	800669c <_free_r+0x24>
 8006706:	46c0      	nop			@ (mov r8, r8)
 8006708:	20000408 	.word	0x20000408

0800670c <malloc>:
 800670c:	b510      	push	{r4, lr}
 800670e:	4b03      	ldr	r3, [pc, #12]	@ (800671c <malloc+0x10>)
 8006710:	0001      	movs	r1, r0
 8006712:	6818      	ldr	r0, [r3, #0]
 8006714:	f000 f826 	bl	8006764 <_malloc_r>
 8006718:	bd10      	pop	{r4, pc}
 800671a:	46c0      	nop			@ (mov r8, r8)
 800671c:	20000018 	.word	0x20000018

08006720 <sbrk_aligned>:
 8006720:	b570      	push	{r4, r5, r6, lr}
 8006722:	4e0f      	ldr	r6, [pc, #60]	@ (8006760 <sbrk_aligned+0x40>)
 8006724:	000d      	movs	r5, r1
 8006726:	6831      	ldr	r1, [r6, #0]
 8006728:	0004      	movs	r4, r0
 800672a:	2900      	cmp	r1, #0
 800672c:	d102      	bne.n	8006734 <sbrk_aligned+0x14>
 800672e:	f000 fe6f 	bl	8007410 <_sbrk_r>
 8006732:	6030      	str	r0, [r6, #0]
 8006734:	0029      	movs	r1, r5
 8006736:	0020      	movs	r0, r4
 8006738:	f000 fe6a 	bl	8007410 <_sbrk_r>
 800673c:	1c43      	adds	r3, r0, #1
 800673e:	d103      	bne.n	8006748 <sbrk_aligned+0x28>
 8006740:	2501      	movs	r5, #1
 8006742:	426d      	negs	r5, r5
 8006744:	0028      	movs	r0, r5
 8006746:	bd70      	pop	{r4, r5, r6, pc}
 8006748:	2303      	movs	r3, #3
 800674a:	1cc5      	adds	r5, r0, #3
 800674c:	439d      	bics	r5, r3
 800674e:	42a8      	cmp	r0, r5
 8006750:	d0f8      	beq.n	8006744 <sbrk_aligned+0x24>
 8006752:	1a29      	subs	r1, r5, r0
 8006754:	0020      	movs	r0, r4
 8006756:	f000 fe5b 	bl	8007410 <_sbrk_r>
 800675a:	3001      	adds	r0, #1
 800675c:	d1f2      	bne.n	8006744 <sbrk_aligned+0x24>
 800675e:	e7ef      	b.n	8006740 <sbrk_aligned+0x20>
 8006760:	20000404 	.word	0x20000404

08006764 <_malloc_r>:
 8006764:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006766:	2203      	movs	r2, #3
 8006768:	1ccb      	adds	r3, r1, #3
 800676a:	4393      	bics	r3, r2
 800676c:	3308      	adds	r3, #8
 800676e:	0005      	movs	r5, r0
 8006770:	001f      	movs	r7, r3
 8006772:	2b0c      	cmp	r3, #12
 8006774:	d234      	bcs.n	80067e0 <_malloc_r+0x7c>
 8006776:	270c      	movs	r7, #12
 8006778:	42b9      	cmp	r1, r7
 800677a:	d833      	bhi.n	80067e4 <_malloc_r+0x80>
 800677c:	0028      	movs	r0, r5
 800677e:	f000 f871 	bl	8006864 <__malloc_lock>
 8006782:	4e37      	ldr	r6, [pc, #220]	@ (8006860 <_malloc_r+0xfc>)
 8006784:	6833      	ldr	r3, [r6, #0]
 8006786:	001c      	movs	r4, r3
 8006788:	2c00      	cmp	r4, #0
 800678a:	d12f      	bne.n	80067ec <_malloc_r+0x88>
 800678c:	0039      	movs	r1, r7
 800678e:	0028      	movs	r0, r5
 8006790:	f7ff ffc6 	bl	8006720 <sbrk_aligned>
 8006794:	0004      	movs	r4, r0
 8006796:	1c43      	adds	r3, r0, #1
 8006798:	d15f      	bne.n	800685a <_malloc_r+0xf6>
 800679a:	6834      	ldr	r4, [r6, #0]
 800679c:	9400      	str	r4, [sp, #0]
 800679e:	9b00      	ldr	r3, [sp, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d14a      	bne.n	800683a <_malloc_r+0xd6>
 80067a4:	2c00      	cmp	r4, #0
 80067a6:	d052      	beq.n	800684e <_malloc_r+0xea>
 80067a8:	6823      	ldr	r3, [r4, #0]
 80067aa:	0028      	movs	r0, r5
 80067ac:	18e3      	adds	r3, r4, r3
 80067ae:	9900      	ldr	r1, [sp, #0]
 80067b0:	9301      	str	r3, [sp, #4]
 80067b2:	f000 fe2d 	bl	8007410 <_sbrk_r>
 80067b6:	9b01      	ldr	r3, [sp, #4]
 80067b8:	4283      	cmp	r3, r0
 80067ba:	d148      	bne.n	800684e <_malloc_r+0xea>
 80067bc:	6823      	ldr	r3, [r4, #0]
 80067be:	0028      	movs	r0, r5
 80067c0:	1aff      	subs	r7, r7, r3
 80067c2:	0039      	movs	r1, r7
 80067c4:	f7ff ffac 	bl	8006720 <sbrk_aligned>
 80067c8:	3001      	adds	r0, #1
 80067ca:	d040      	beq.n	800684e <_malloc_r+0xea>
 80067cc:	6823      	ldr	r3, [r4, #0]
 80067ce:	19db      	adds	r3, r3, r7
 80067d0:	6023      	str	r3, [r4, #0]
 80067d2:	6833      	ldr	r3, [r6, #0]
 80067d4:	685a      	ldr	r2, [r3, #4]
 80067d6:	2a00      	cmp	r2, #0
 80067d8:	d133      	bne.n	8006842 <_malloc_r+0xde>
 80067da:	9b00      	ldr	r3, [sp, #0]
 80067dc:	6033      	str	r3, [r6, #0]
 80067de:	e019      	b.n	8006814 <_malloc_r+0xb0>
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	dac9      	bge.n	8006778 <_malloc_r+0x14>
 80067e4:	230c      	movs	r3, #12
 80067e6:	602b      	str	r3, [r5, #0]
 80067e8:	2000      	movs	r0, #0
 80067ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80067ec:	6821      	ldr	r1, [r4, #0]
 80067ee:	1bc9      	subs	r1, r1, r7
 80067f0:	d420      	bmi.n	8006834 <_malloc_r+0xd0>
 80067f2:	290b      	cmp	r1, #11
 80067f4:	d90a      	bls.n	800680c <_malloc_r+0xa8>
 80067f6:	19e2      	adds	r2, r4, r7
 80067f8:	6027      	str	r7, [r4, #0]
 80067fa:	42a3      	cmp	r3, r4
 80067fc:	d104      	bne.n	8006808 <_malloc_r+0xa4>
 80067fe:	6032      	str	r2, [r6, #0]
 8006800:	6863      	ldr	r3, [r4, #4]
 8006802:	6011      	str	r1, [r2, #0]
 8006804:	6053      	str	r3, [r2, #4]
 8006806:	e005      	b.n	8006814 <_malloc_r+0xb0>
 8006808:	605a      	str	r2, [r3, #4]
 800680a:	e7f9      	b.n	8006800 <_malloc_r+0x9c>
 800680c:	6862      	ldr	r2, [r4, #4]
 800680e:	42a3      	cmp	r3, r4
 8006810:	d10e      	bne.n	8006830 <_malloc_r+0xcc>
 8006812:	6032      	str	r2, [r6, #0]
 8006814:	0028      	movs	r0, r5
 8006816:	f000 f82d 	bl	8006874 <__malloc_unlock>
 800681a:	0020      	movs	r0, r4
 800681c:	2207      	movs	r2, #7
 800681e:	300b      	adds	r0, #11
 8006820:	1d23      	adds	r3, r4, #4
 8006822:	4390      	bics	r0, r2
 8006824:	1ac2      	subs	r2, r0, r3
 8006826:	4298      	cmp	r0, r3
 8006828:	d0df      	beq.n	80067ea <_malloc_r+0x86>
 800682a:	1a1b      	subs	r3, r3, r0
 800682c:	50a3      	str	r3, [r4, r2]
 800682e:	e7dc      	b.n	80067ea <_malloc_r+0x86>
 8006830:	605a      	str	r2, [r3, #4]
 8006832:	e7ef      	b.n	8006814 <_malloc_r+0xb0>
 8006834:	0023      	movs	r3, r4
 8006836:	6864      	ldr	r4, [r4, #4]
 8006838:	e7a6      	b.n	8006788 <_malloc_r+0x24>
 800683a:	9c00      	ldr	r4, [sp, #0]
 800683c:	6863      	ldr	r3, [r4, #4]
 800683e:	9300      	str	r3, [sp, #0]
 8006840:	e7ad      	b.n	800679e <_malloc_r+0x3a>
 8006842:	001a      	movs	r2, r3
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	42a3      	cmp	r3, r4
 8006848:	d1fb      	bne.n	8006842 <_malloc_r+0xde>
 800684a:	2300      	movs	r3, #0
 800684c:	e7da      	b.n	8006804 <_malloc_r+0xa0>
 800684e:	230c      	movs	r3, #12
 8006850:	0028      	movs	r0, r5
 8006852:	602b      	str	r3, [r5, #0]
 8006854:	f000 f80e 	bl	8006874 <__malloc_unlock>
 8006858:	e7c6      	b.n	80067e8 <_malloc_r+0x84>
 800685a:	6007      	str	r7, [r0, #0]
 800685c:	e7da      	b.n	8006814 <_malloc_r+0xb0>
 800685e:	46c0      	nop			@ (mov r8, r8)
 8006860:	20000408 	.word	0x20000408

08006864 <__malloc_lock>:
 8006864:	b510      	push	{r4, lr}
 8006866:	4802      	ldr	r0, [pc, #8]	@ (8006870 <__malloc_lock+0xc>)
 8006868:	f7ff f877 	bl	800595a <__retarget_lock_acquire_recursive>
 800686c:	bd10      	pop	{r4, pc}
 800686e:	46c0      	nop			@ (mov r8, r8)
 8006870:	20000400 	.word	0x20000400

08006874 <__malloc_unlock>:
 8006874:	b510      	push	{r4, lr}
 8006876:	4802      	ldr	r0, [pc, #8]	@ (8006880 <__malloc_unlock+0xc>)
 8006878:	f7ff f870 	bl	800595c <__retarget_lock_release_recursive>
 800687c:	bd10      	pop	{r4, pc}
 800687e:	46c0      	nop			@ (mov r8, r8)
 8006880:	20000400 	.word	0x20000400

08006884 <_Balloc>:
 8006884:	b570      	push	{r4, r5, r6, lr}
 8006886:	69c5      	ldr	r5, [r0, #28]
 8006888:	0006      	movs	r6, r0
 800688a:	000c      	movs	r4, r1
 800688c:	2d00      	cmp	r5, #0
 800688e:	d10e      	bne.n	80068ae <_Balloc+0x2a>
 8006890:	2010      	movs	r0, #16
 8006892:	f7ff ff3b 	bl	800670c <malloc>
 8006896:	1e02      	subs	r2, r0, #0
 8006898:	61f0      	str	r0, [r6, #28]
 800689a:	d104      	bne.n	80068a6 <_Balloc+0x22>
 800689c:	216b      	movs	r1, #107	@ 0x6b
 800689e:	4b19      	ldr	r3, [pc, #100]	@ (8006904 <_Balloc+0x80>)
 80068a0:	4819      	ldr	r0, [pc, #100]	@ (8006908 <_Balloc+0x84>)
 80068a2:	f000 fdd1 	bl	8007448 <__assert_func>
 80068a6:	6045      	str	r5, [r0, #4]
 80068a8:	6085      	str	r5, [r0, #8]
 80068aa:	6005      	str	r5, [r0, #0]
 80068ac:	60c5      	str	r5, [r0, #12]
 80068ae:	69f5      	ldr	r5, [r6, #28]
 80068b0:	68eb      	ldr	r3, [r5, #12]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d013      	beq.n	80068de <_Balloc+0x5a>
 80068b6:	69f3      	ldr	r3, [r6, #28]
 80068b8:	00a2      	lsls	r2, r4, #2
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	189b      	adds	r3, r3, r2
 80068be:	6818      	ldr	r0, [r3, #0]
 80068c0:	2800      	cmp	r0, #0
 80068c2:	d118      	bne.n	80068f6 <_Balloc+0x72>
 80068c4:	2101      	movs	r1, #1
 80068c6:	000d      	movs	r5, r1
 80068c8:	40a5      	lsls	r5, r4
 80068ca:	1d6a      	adds	r2, r5, #5
 80068cc:	0030      	movs	r0, r6
 80068ce:	0092      	lsls	r2, r2, #2
 80068d0:	f000 fdd8 	bl	8007484 <_calloc_r>
 80068d4:	2800      	cmp	r0, #0
 80068d6:	d00c      	beq.n	80068f2 <_Balloc+0x6e>
 80068d8:	6044      	str	r4, [r0, #4]
 80068da:	6085      	str	r5, [r0, #8]
 80068dc:	e00d      	b.n	80068fa <_Balloc+0x76>
 80068de:	2221      	movs	r2, #33	@ 0x21
 80068e0:	2104      	movs	r1, #4
 80068e2:	0030      	movs	r0, r6
 80068e4:	f000 fdce 	bl	8007484 <_calloc_r>
 80068e8:	69f3      	ldr	r3, [r6, #28]
 80068ea:	60e8      	str	r0, [r5, #12]
 80068ec:	68db      	ldr	r3, [r3, #12]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d1e1      	bne.n	80068b6 <_Balloc+0x32>
 80068f2:	2000      	movs	r0, #0
 80068f4:	bd70      	pop	{r4, r5, r6, pc}
 80068f6:	6802      	ldr	r2, [r0, #0]
 80068f8:	601a      	str	r2, [r3, #0]
 80068fa:	2300      	movs	r3, #0
 80068fc:	6103      	str	r3, [r0, #16]
 80068fe:	60c3      	str	r3, [r0, #12]
 8006900:	e7f8      	b.n	80068f4 <_Balloc+0x70>
 8006902:	46c0      	nop			@ (mov r8, r8)
 8006904:	08007c25 	.word	0x08007c25
 8006908:	08007ca5 	.word	0x08007ca5

0800690c <_Bfree>:
 800690c:	b570      	push	{r4, r5, r6, lr}
 800690e:	69c6      	ldr	r6, [r0, #28]
 8006910:	0005      	movs	r5, r0
 8006912:	000c      	movs	r4, r1
 8006914:	2e00      	cmp	r6, #0
 8006916:	d10e      	bne.n	8006936 <_Bfree+0x2a>
 8006918:	2010      	movs	r0, #16
 800691a:	f7ff fef7 	bl	800670c <malloc>
 800691e:	1e02      	subs	r2, r0, #0
 8006920:	61e8      	str	r0, [r5, #28]
 8006922:	d104      	bne.n	800692e <_Bfree+0x22>
 8006924:	218f      	movs	r1, #143	@ 0x8f
 8006926:	4b09      	ldr	r3, [pc, #36]	@ (800694c <_Bfree+0x40>)
 8006928:	4809      	ldr	r0, [pc, #36]	@ (8006950 <_Bfree+0x44>)
 800692a:	f000 fd8d 	bl	8007448 <__assert_func>
 800692e:	6046      	str	r6, [r0, #4]
 8006930:	6086      	str	r6, [r0, #8]
 8006932:	6006      	str	r6, [r0, #0]
 8006934:	60c6      	str	r6, [r0, #12]
 8006936:	2c00      	cmp	r4, #0
 8006938:	d007      	beq.n	800694a <_Bfree+0x3e>
 800693a:	69eb      	ldr	r3, [r5, #28]
 800693c:	6862      	ldr	r2, [r4, #4]
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	0092      	lsls	r2, r2, #2
 8006942:	189b      	adds	r3, r3, r2
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	6022      	str	r2, [r4, #0]
 8006948:	601c      	str	r4, [r3, #0]
 800694a:	bd70      	pop	{r4, r5, r6, pc}
 800694c:	08007c25 	.word	0x08007c25
 8006950:	08007ca5 	.word	0x08007ca5

08006954 <__multadd>:
 8006954:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006956:	000f      	movs	r7, r1
 8006958:	9001      	str	r0, [sp, #4]
 800695a:	000c      	movs	r4, r1
 800695c:	001e      	movs	r6, r3
 800695e:	2000      	movs	r0, #0
 8006960:	690d      	ldr	r5, [r1, #16]
 8006962:	3714      	adds	r7, #20
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	3001      	adds	r0, #1
 8006968:	b299      	uxth	r1, r3
 800696a:	4351      	muls	r1, r2
 800696c:	0c1b      	lsrs	r3, r3, #16
 800696e:	4353      	muls	r3, r2
 8006970:	1989      	adds	r1, r1, r6
 8006972:	0c0e      	lsrs	r6, r1, #16
 8006974:	199b      	adds	r3, r3, r6
 8006976:	0c1e      	lsrs	r6, r3, #16
 8006978:	b289      	uxth	r1, r1
 800697a:	041b      	lsls	r3, r3, #16
 800697c:	185b      	adds	r3, r3, r1
 800697e:	c708      	stmia	r7!, {r3}
 8006980:	4285      	cmp	r5, r0
 8006982:	dcef      	bgt.n	8006964 <__multadd+0x10>
 8006984:	2e00      	cmp	r6, #0
 8006986:	d022      	beq.n	80069ce <__multadd+0x7a>
 8006988:	68a3      	ldr	r3, [r4, #8]
 800698a:	42ab      	cmp	r3, r5
 800698c:	dc19      	bgt.n	80069c2 <__multadd+0x6e>
 800698e:	6861      	ldr	r1, [r4, #4]
 8006990:	9801      	ldr	r0, [sp, #4]
 8006992:	3101      	adds	r1, #1
 8006994:	f7ff ff76 	bl	8006884 <_Balloc>
 8006998:	1e07      	subs	r7, r0, #0
 800699a:	d105      	bne.n	80069a8 <__multadd+0x54>
 800699c:	003a      	movs	r2, r7
 800699e:	21ba      	movs	r1, #186	@ 0xba
 80069a0:	4b0c      	ldr	r3, [pc, #48]	@ (80069d4 <__multadd+0x80>)
 80069a2:	480d      	ldr	r0, [pc, #52]	@ (80069d8 <__multadd+0x84>)
 80069a4:	f000 fd50 	bl	8007448 <__assert_func>
 80069a8:	0021      	movs	r1, r4
 80069aa:	6922      	ldr	r2, [r4, #16]
 80069ac:	310c      	adds	r1, #12
 80069ae:	3202      	adds	r2, #2
 80069b0:	0092      	lsls	r2, r2, #2
 80069b2:	300c      	adds	r0, #12
 80069b4:	f000 fd3e 	bl	8007434 <memcpy>
 80069b8:	0021      	movs	r1, r4
 80069ba:	9801      	ldr	r0, [sp, #4]
 80069bc:	f7ff ffa6 	bl	800690c <_Bfree>
 80069c0:	003c      	movs	r4, r7
 80069c2:	1d2b      	adds	r3, r5, #4
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	18e3      	adds	r3, r4, r3
 80069c8:	3501      	adds	r5, #1
 80069ca:	605e      	str	r6, [r3, #4]
 80069cc:	6125      	str	r5, [r4, #16]
 80069ce:	0020      	movs	r0, r4
 80069d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80069d2:	46c0      	nop			@ (mov r8, r8)
 80069d4:	08007c94 	.word	0x08007c94
 80069d8:	08007ca5 	.word	0x08007ca5

080069dc <__hi0bits>:
 80069dc:	2280      	movs	r2, #128	@ 0x80
 80069de:	0003      	movs	r3, r0
 80069e0:	0252      	lsls	r2, r2, #9
 80069e2:	2000      	movs	r0, #0
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d201      	bcs.n	80069ec <__hi0bits+0x10>
 80069e8:	041b      	lsls	r3, r3, #16
 80069ea:	3010      	adds	r0, #16
 80069ec:	2280      	movs	r2, #128	@ 0x80
 80069ee:	0452      	lsls	r2, r2, #17
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d201      	bcs.n	80069f8 <__hi0bits+0x1c>
 80069f4:	3008      	adds	r0, #8
 80069f6:	021b      	lsls	r3, r3, #8
 80069f8:	2280      	movs	r2, #128	@ 0x80
 80069fa:	0552      	lsls	r2, r2, #21
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d201      	bcs.n	8006a04 <__hi0bits+0x28>
 8006a00:	3004      	adds	r0, #4
 8006a02:	011b      	lsls	r3, r3, #4
 8006a04:	2280      	movs	r2, #128	@ 0x80
 8006a06:	05d2      	lsls	r2, r2, #23
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d201      	bcs.n	8006a10 <__hi0bits+0x34>
 8006a0c:	3002      	adds	r0, #2
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	db03      	blt.n	8006a1c <__hi0bits+0x40>
 8006a14:	3001      	adds	r0, #1
 8006a16:	4213      	tst	r3, r2
 8006a18:	d100      	bne.n	8006a1c <__hi0bits+0x40>
 8006a1a:	2020      	movs	r0, #32
 8006a1c:	4770      	bx	lr

08006a1e <__lo0bits>:
 8006a1e:	6803      	ldr	r3, [r0, #0]
 8006a20:	0001      	movs	r1, r0
 8006a22:	2207      	movs	r2, #7
 8006a24:	0018      	movs	r0, r3
 8006a26:	4010      	ands	r0, r2
 8006a28:	4213      	tst	r3, r2
 8006a2a:	d00d      	beq.n	8006a48 <__lo0bits+0x2a>
 8006a2c:	3a06      	subs	r2, #6
 8006a2e:	2000      	movs	r0, #0
 8006a30:	4213      	tst	r3, r2
 8006a32:	d105      	bne.n	8006a40 <__lo0bits+0x22>
 8006a34:	3002      	adds	r0, #2
 8006a36:	4203      	tst	r3, r0
 8006a38:	d003      	beq.n	8006a42 <__lo0bits+0x24>
 8006a3a:	40d3      	lsrs	r3, r2
 8006a3c:	0010      	movs	r0, r2
 8006a3e:	600b      	str	r3, [r1, #0]
 8006a40:	4770      	bx	lr
 8006a42:	089b      	lsrs	r3, r3, #2
 8006a44:	600b      	str	r3, [r1, #0]
 8006a46:	e7fb      	b.n	8006a40 <__lo0bits+0x22>
 8006a48:	b29a      	uxth	r2, r3
 8006a4a:	2a00      	cmp	r2, #0
 8006a4c:	d101      	bne.n	8006a52 <__lo0bits+0x34>
 8006a4e:	2010      	movs	r0, #16
 8006a50:	0c1b      	lsrs	r3, r3, #16
 8006a52:	b2da      	uxtb	r2, r3
 8006a54:	2a00      	cmp	r2, #0
 8006a56:	d101      	bne.n	8006a5c <__lo0bits+0x3e>
 8006a58:	3008      	adds	r0, #8
 8006a5a:	0a1b      	lsrs	r3, r3, #8
 8006a5c:	071a      	lsls	r2, r3, #28
 8006a5e:	d101      	bne.n	8006a64 <__lo0bits+0x46>
 8006a60:	3004      	adds	r0, #4
 8006a62:	091b      	lsrs	r3, r3, #4
 8006a64:	079a      	lsls	r2, r3, #30
 8006a66:	d101      	bne.n	8006a6c <__lo0bits+0x4e>
 8006a68:	3002      	adds	r0, #2
 8006a6a:	089b      	lsrs	r3, r3, #2
 8006a6c:	07da      	lsls	r2, r3, #31
 8006a6e:	d4e9      	bmi.n	8006a44 <__lo0bits+0x26>
 8006a70:	3001      	adds	r0, #1
 8006a72:	085b      	lsrs	r3, r3, #1
 8006a74:	d1e6      	bne.n	8006a44 <__lo0bits+0x26>
 8006a76:	2020      	movs	r0, #32
 8006a78:	e7e2      	b.n	8006a40 <__lo0bits+0x22>
	...

08006a7c <__i2b>:
 8006a7c:	b510      	push	{r4, lr}
 8006a7e:	000c      	movs	r4, r1
 8006a80:	2101      	movs	r1, #1
 8006a82:	f7ff feff 	bl	8006884 <_Balloc>
 8006a86:	2800      	cmp	r0, #0
 8006a88:	d107      	bne.n	8006a9a <__i2b+0x1e>
 8006a8a:	2146      	movs	r1, #70	@ 0x46
 8006a8c:	4c05      	ldr	r4, [pc, #20]	@ (8006aa4 <__i2b+0x28>)
 8006a8e:	0002      	movs	r2, r0
 8006a90:	4b05      	ldr	r3, [pc, #20]	@ (8006aa8 <__i2b+0x2c>)
 8006a92:	0020      	movs	r0, r4
 8006a94:	31ff      	adds	r1, #255	@ 0xff
 8006a96:	f000 fcd7 	bl	8007448 <__assert_func>
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	6144      	str	r4, [r0, #20]
 8006a9e:	6103      	str	r3, [r0, #16]
 8006aa0:	bd10      	pop	{r4, pc}
 8006aa2:	46c0      	nop			@ (mov r8, r8)
 8006aa4:	08007ca5 	.word	0x08007ca5
 8006aa8:	08007c94 	.word	0x08007c94

08006aac <__multiply>:
 8006aac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006aae:	0014      	movs	r4, r2
 8006ab0:	690a      	ldr	r2, [r1, #16]
 8006ab2:	6923      	ldr	r3, [r4, #16]
 8006ab4:	000d      	movs	r5, r1
 8006ab6:	b08b      	sub	sp, #44	@ 0x2c
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	db02      	blt.n	8006ac2 <__multiply+0x16>
 8006abc:	0023      	movs	r3, r4
 8006abe:	000c      	movs	r4, r1
 8006ac0:	001d      	movs	r5, r3
 8006ac2:	6927      	ldr	r7, [r4, #16]
 8006ac4:	692e      	ldr	r6, [r5, #16]
 8006ac6:	6861      	ldr	r1, [r4, #4]
 8006ac8:	19bb      	adds	r3, r7, r6
 8006aca:	9303      	str	r3, [sp, #12]
 8006acc:	68a3      	ldr	r3, [r4, #8]
 8006ace:	19ba      	adds	r2, r7, r6
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	da00      	bge.n	8006ad6 <__multiply+0x2a>
 8006ad4:	3101      	adds	r1, #1
 8006ad6:	f7ff fed5 	bl	8006884 <_Balloc>
 8006ada:	9002      	str	r0, [sp, #8]
 8006adc:	2800      	cmp	r0, #0
 8006ade:	d106      	bne.n	8006aee <__multiply+0x42>
 8006ae0:	21b1      	movs	r1, #177	@ 0xb1
 8006ae2:	4b49      	ldr	r3, [pc, #292]	@ (8006c08 <__multiply+0x15c>)
 8006ae4:	4849      	ldr	r0, [pc, #292]	@ (8006c0c <__multiply+0x160>)
 8006ae6:	9a02      	ldr	r2, [sp, #8]
 8006ae8:	0049      	lsls	r1, r1, #1
 8006aea:	f000 fcad 	bl	8007448 <__assert_func>
 8006aee:	9b02      	ldr	r3, [sp, #8]
 8006af0:	2200      	movs	r2, #0
 8006af2:	3314      	adds	r3, #20
 8006af4:	469c      	mov	ip, r3
 8006af6:	19bb      	adds	r3, r7, r6
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	4463      	add	r3, ip
 8006afc:	9304      	str	r3, [sp, #16]
 8006afe:	4663      	mov	r3, ip
 8006b00:	9904      	ldr	r1, [sp, #16]
 8006b02:	428b      	cmp	r3, r1
 8006b04:	d32a      	bcc.n	8006b5c <__multiply+0xb0>
 8006b06:	0023      	movs	r3, r4
 8006b08:	00bf      	lsls	r7, r7, #2
 8006b0a:	3314      	adds	r3, #20
 8006b0c:	3514      	adds	r5, #20
 8006b0e:	9308      	str	r3, [sp, #32]
 8006b10:	00b6      	lsls	r6, r6, #2
 8006b12:	19db      	adds	r3, r3, r7
 8006b14:	9305      	str	r3, [sp, #20]
 8006b16:	19ab      	adds	r3, r5, r6
 8006b18:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b1a:	2304      	movs	r3, #4
 8006b1c:	9306      	str	r3, [sp, #24]
 8006b1e:	0023      	movs	r3, r4
 8006b20:	9a05      	ldr	r2, [sp, #20]
 8006b22:	3315      	adds	r3, #21
 8006b24:	9501      	str	r5, [sp, #4]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d305      	bcc.n	8006b36 <__multiply+0x8a>
 8006b2a:	1b13      	subs	r3, r2, r4
 8006b2c:	3b15      	subs	r3, #21
 8006b2e:	089b      	lsrs	r3, r3, #2
 8006b30:	3301      	adds	r3, #1
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	9306      	str	r3, [sp, #24]
 8006b36:	9b01      	ldr	r3, [sp, #4]
 8006b38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d310      	bcc.n	8006b60 <__multiply+0xb4>
 8006b3e:	9b03      	ldr	r3, [sp, #12]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	dd05      	ble.n	8006b50 <__multiply+0xa4>
 8006b44:	9b04      	ldr	r3, [sp, #16]
 8006b46:	3b04      	subs	r3, #4
 8006b48:	9304      	str	r3, [sp, #16]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d056      	beq.n	8006bfe <__multiply+0x152>
 8006b50:	9b02      	ldr	r3, [sp, #8]
 8006b52:	9a03      	ldr	r2, [sp, #12]
 8006b54:	0018      	movs	r0, r3
 8006b56:	611a      	str	r2, [r3, #16]
 8006b58:	b00b      	add	sp, #44	@ 0x2c
 8006b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b5c:	c304      	stmia	r3!, {r2}
 8006b5e:	e7cf      	b.n	8006b00 <__multiply+0x54>
 8006b60:	9b01      	ldr	r3, [sp, #4]
 8006b62:	6818      	ldr	r0, [r3, #0]
 8006b64:	b280      	uxth	r0, r0
 8006b66:	2800      	cmp	r0, #0
 8006b68:	d01e      	beq.n	8006ba8 <__multiply+0xfc>
 8006b6a:	4667      	mov	r7, ip
 8006b6c:	2500      	movs	r5, #0
 8006b6e:	9e08      	ldr	r6, [sp, #32]
 8006b70:	ce02      	ldmia	r6!, {r1}
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	9307      	str	r3, [sp, #28]
 8006b76:	b28b      	uxth	r3, r1
 8006b78:	4343      	muls	r3, r0
 8006b7a:	001a      	movs	r2, r3
 8006b7c:	466b      	mov	r3, sp
 8006b7e:	0c09      	lsrs	r1, r1, #16
 8006b80:	8b9b      	ldrh	r3, [r3, #28]
 8006b82:	4341      	muls	r1, r0
 8006b84:	18d3      	adds	r3, r2, r3
 8006b86:	9a07      	ldr	r2, [sp, #28]
 8006b88:	195b      	adds	r3, r3, r5
 8006b8a:	0c12      	lsrs	r2, r2, #16
 8006b8c:	1889      	adds	r1, r1, r2
 8006b8e:	0c1a      	lsrs	r2, r3, #16
 8006b90:	188a      	adds	r2, r1, r2
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	0c15      	lsrs	r5, r2, #16
 8006b96:	0412      	lsls	r2, r2, #16
 8006b98:	431a      	orrs	r2, r3
 8006b9a:	9b05      	ldr	r3, [sp, #20]
 8006b9c:	c704      	stmia	r7!, {r2}
 8006b9e:	42b3      	cmp	r3, r6
 8006ba0:	d8e6      	bhi.n	8006b70 <__multiply+0xc4>
 8006ba2:	4663      	mov	r3, ip
 8006ba4:	9a06      	ldr	r2, [sp, #24]
 8006ba6:	509d      	str	r5, [r3, r2]
 8006ba8:	9b01      	ldr	r3, [sp, #4]
 8006baa:	6818      	ldr	r0, [r3, #0]
 8006bac:	0c00      	lsrs	r0, r0, #16
 8006bae:	d020      	beq.n	8006bf2 <__multiply+0x146>
 8006bb0:	4663      	mov	r3, ip
 8006bb2:	0025      	movs	r5, r4
 8006bb4:	4661      	mov	r1, ip
 8006bb6:	2700      	movs	r7, #0
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	3514      	adds	r5, #20
 8006bbc:	682a      	ldr	r2, [r5, #0]
 8006bbe:	680e      	ldr	r6, [r1, #0]
 8006bc0:	b292      	uxth	r2, r2
 8006bc2:	4342      	muls	r2, r0
 8006bc4:	0c36      	lsrs	r6, r6, #16
 8006bc6:	1992      	adds	r2, r2, r6
 8006bc8:	19d2      	adds	r2, r2, r7
 8006bca:	0416      	lsls	r6, r2, #16
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	431e      	orrs	r6, r3
 8006bd0:	600e      	str	r6, [r1, #0]
 8006bd2:	cd40      	ldmia	r5!, {r6}
 8006bd4:	684b      	ldr	r3, [r1, #4]
 8006bd6:	0c36      	lsrs	r6, r6, #16
 8006bd8:	4346      	muls	r6, r0
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	0c12      	lsrs	r2, r2, #16
 8006bde:	18f3      	adds	r3, r6, r3
 8006be0:	189b      	adds	r3, r3, r2
 8006be2:	9a05      	ldr	r2, [sp, #20]
 8006be4:	0c1f      	lsrs	r7, r3, #16
 8006be6:	3104      	adds	r1, #4
 8006be8:	42aa      	cmp	r2, r5
 8006bea:	d8e7      	bhi.n	8006bbc <__multiply+0x110>
 8006bec:	4662      	mov	r2, ip
 8006bee:	9906      	ldr	r1, [sp, #24]
 8006bf0:	5053      	str	r3, [r2, r1]
 8006bf2:	9b01      	ldr	r3, [sp, #4]
 8006bf4:	3304      	adds	r3, #4
 8006bf6:	9301      	str	r3, [sp, #4]
 8006bf8:	2304      	movs	r3, #4
 8006bfa:	449c      	add	ip, r3
 8006bfc:	e79b      	b.n	8006b36 <__multiply+0x8a>
 8006bfe:	9b03      	ldr	r3, [sp, #12]
 8006c00:	3b01      	subs	r3, #1
 8006c02:	9303      	str	r3, [sp, #12]
 8006c04:	e79b      	b.n	8006b3e <__multiply+0x92>
 8006c06:	46c0      	nop			@ (mov r8, r8)
 8006c08:	08007c94 	.word	0x08007c94
 8006c0c:	08007ca5 	.word	0x08007ca5

08006c10 <__pow5mult>:
 8006c10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c12:	2303      	movs	r3, #3
 8006c14:	0015      	movs	r5, r2
 8006c16:	0007      	movs	r7, r0
 8006c18:	000e      	movs	r6, r1
 8006c1a:	401a      	ands	r2, r3
 8006c1c:	421d      	tst	r5, r3
 8006c1e:	d008      	beq.n	8006c32 <__pow5mult+0x22>
 8006c20:	4925      	ldr	r1, [pc, #148]	@ (8006cb8 <__pow5mult+0xa8>)
 8006c22:	3a01      	subs	r2, #1
 8006c24:	0092      	lsls	r2, r2, #2
 8006c26:	5852      	ldr	r2, [r2, r1]
 8006c28:	2300      	movs	r3, #0
 8006c2a:	0031      	movs	r1, r6
 8006c2c:	f7ff fe92 	bl	8006954 <__multadd>
 8006c30:	0006      	movs	r6, r0
 8006c32:	10ad      	asrs	r5, r5, #2
 8006c34:	d03d      	beq.n	8006cb2 <__pow5mult+0xa2>
 8006c36:	69fc      	ldr	r4, [r7, #28]
 8006c38:	2c00      	cmp	r4, #0
 8006c3a:	d10f      	bne.n	8006c5c <__pow5mult+0x4c>
 8006c3c:	2010      	movs	r0, #16
 8006c3e:	f7ff fd65 	bl	800670c <malloc>
 8006c42:	1e02      	subs	r2, r0, #0
 8006c44:	61f8      	str	r0, [r7, #28]
 8006c46:	d105      	bne.n	8006c54 <__pow5mult+0x44>
 8006c48:	21b4      	movs	r1, #180	@ 0xb4
 8006c4a:	4b1c      	ldr	r3, [pc, #112]	@ (8006cbc <__pow5mult+0xac>)
 8006c4c:	481c      	ldr	r0, [pc, #112]	@ (8006cc0 <__pow5mult+0xb0>)
 8006c4e:	31ff      	adds	r1, #255	@ 0xff
 8006c50:	f000 fbfa 	bl	8007448 <__assert_func>
 8006c54:	6044      	str	r4, [r0, #4]
 8006c56:	6084      	str	r4, [r0, #8]
 8006c58:	6004      	str	r4, [r0, #0]
 8006c5a:	60c4      	str	r4, [r0, #12]
 8006c5c:	69fb      	ldr	r3, [r7, #28]
 8006c5e:	689c      	ldr	r4, [r3, #8]
 8006c60:	9301      	str	r3, [sp, #4]
 8006c62:	2c00      	cmp	r4, #0
 8006c64:	d108      	bne.n	8006c78 <__pow5mult+0x68>
 8006c66:	0038      	movs	r0, r7
 8006c68:	4916      	ldr	r1, [pc, #88]	@ (8006cc4 <__pow5mult+0xb4>)
 8006c6a:	f7ff ff07 	bl	8006a7c <__i2b>
 8006c6e:	9b01      	ldr	r3, [sp, #4]
 8006c70:	0004      	movs	r4, r0
 8006c72:	6098      	str	r0, [r3, #8]
 8006c74:	2300      	movs	r3, #0
 8006c76:	6003      	str	r3, [r0, #0]
 8006c78:	2301      	movs	r3, #1
 8006c7a:	421d      	tst	r5, r3
 8006c7c:	d00a      	beq.n	8006c94 <__pow5mult+0x84>
 8006c7e:	0031      	movs	r1, r6
 8006c80:	0022      	movs	r2, r4
 8006c82:	0038      	movs	r0, r7
 8006c84:	f7ff ff12 	bl	8006aac <__multiply>
 8006c88:	0031      	movs	r1, r6
 8006c8a:	9001      	str	r0, [sp, #4]
 8006c8c:	0038      	movs	r0, r7
 8006c8e:	f7ff fe3d 	bl	800690c <_Bfree>
 8006c92:	9e01      	ldr	r6, [sp, #4]
 8006c94:	106d      	asrs	r5, r5, #1
 8006c96:	d00c      	beq.n	8006cb2 <__pow5mult+0xa2>
 8006c98:	6820      	ldr	r0, [r4, #0]
 8006c9a:	2800      	cmp	r0, #0
 8006c9c:	d107      	bne.n	8006cae <__pow5mult+0x9e>
 8006c9e:	0022      	movs	r2, r4
 8006ca0:	0021      	movs	r1, r4
 8006ca2:	0038      	movs	r0, r7
 8006ca4:	f7ff ff02 	bl	8006aac <__multiply>
 8006ca8:	2300      	movs	r3, #0
 8006caa:	6020      	str	r0, [r4, #0]
 8006cac:	6003      	str	r3, [r0, #0]
 8006cae:	0004      	movs	r4, r0
 8006cb0:	e7e2      	b.n	8006c78 <__pow5mult+0x68>
 8006cb2:	0030      	movs	r0, r6
 8006cb4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006cb6:	46c0      	nop			@ (mov r8, r8)
 8006cb8:	08007d00 	.word	0x08007d00
 8006cbc:	08007c25 	.word	0x08007c25
 8006cc0:	08007ca5 	.word	0x08007ca5
 8006cc4:	00000271 	.word	0x00000271

08006cc8 <__lshift>:
 8006cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cca:	000c      	movs	r4, r1
 8006ccc:	0016      	movs	r6, r2
 8006cce:	6923      	ldr	r3, [r4, #16]
 8006cd0:	1157      	asrs	r7, r2, #5
 8006cd2:	b085      	sub	sp, #20
 8006cd4:	18fb      	adds	r3, r7, r3
 8006cd6:	9301      	str	r3, [sp, #4]
 8006cd8:	3301      	adds	r3, #1
 8006cda:	9300      	str	r3, [sp, #0]
 8006cdc:	6849      	ldr	r1, [r1, #4]
 8006cde:	68a3      	ldr	r3, [r4, #8]
 8006ce0:	9002      	str	r0, [sp, #8]
 8006ce2:	9a00      	ldr	r2, [sp, #0]
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	db10      	blt.n	8006d0a <__lshift+0x42>
 8006ce8:	9802      	ldr	r0, [sp, #8]
 8006cea:	f7ff fdcb 	bl	8006884 <_Balloc>
 8006cee:	2300      	movs	r3, #0
 8006cf0:	0001      	movs	r1, r0
 8006cf2:	0005      	movs	r5, r0
 8006cf4:	001a      	movs	r2, r3
 8006cf6:	3114      	adds	r1, #20
 8006cf8:	4298      	cmp	r0, r3
 8006cfa:	d10c      	bne.n	8006d16 <__lshift+0x4e>
 8006cfc:	21ef      	movs	r1, #239	@ 0xef
 8006cfe:	002a      	movs	r2, r5
 8006d00:	4b25      	ldr	r3, [pc, #148]	@ (8006d98 <__lshift+0xd0>)
 8006d02:	4826      	ldr	r0, [pc, #152]	@ (8006d9c <__lshift+0xd4>)
 8006d04:	0049      	lsls	r1, r1, #1
 8006d06:	f000 fb9f 	bl	8007448 <__assert_func>
 8006d0a:	3101      	adds	r1, #1
 8006d0c:	005b      	lsls	r3, r3, #1
 8006d0e:	e7e8      	b.n	8006ce2 <__lshift+0x1a>
 8006d10:	0098      	lsls	r0, r3, #2
 8006d12:	500a      	str	r2, [r1, r0]
 8006d14:	3301      	adds	r3, #1
 8006d16:	42bb      	cmp	r3, r7
 8006d18:	dbfa      	blt.n	8006d10 <__lshift+0x48>
 8006d1a:	43fb      	mvns	r3, r7
 8006d1c:	17db      	asrs	r3, r3, #31
 8006d1e:	401f      	ands	r7, r3
 8006d20:	00bf      	lsls	r7, r7, #2
 8006d22:	0023      	movs	r3, r4
 8006d24:	201f      	movs	r0, #31
 8006d26:	19c9      	adds	r1, r1, r7
 8006d28:	0037      	movs	r7, r6
 8006d2a:	6922      	ldr	r2, [r4, #16]
 8006d2c:	3314      	adds	r3, #20
 8006d2e:	0092      	lsls	r2, r2, #2
 8006d30:	189a      	adds	r2, r3, r2
 8006d32:	4007      	ands	r7, r0
 8006d34:	4206      	tst	r6, r0
 8006d36:	d029      	beq.n	8006d8c <__lshift+0xc4>
 8006d38:	3001      	adds	r0, #1
 8006d3a:	1bc0      	subs	r0, r0, r7
 8006d3c:	9003      	str	r0, [sp, #12]
 8006d3e:	468c      	mov	ip, r1
 8006d40:	2000      	movs	r0, #0
 8006d42:	681e      	ldr	r6, [r3, #0]
 8006d44:	40be      	lsls	r6, r7
 8006d46:	4306      	orrs	r6, r0
 8006d48:	4660      	mov	r0, ip
 8006d4a:	c040      	stmia	r0!, {r6}
 8006d4c:	4684      	mov	ip, r0
 8006d4e:	9e03      	ldr	r6, [sp, #12]
 8006d50:	cb01      	ldmia	r3!, {r0}
 8006d52:	40f0      	lsrs	r0, r6
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d8f4      	bhi.n	8006d42 <__lshift+0x7a>
 8006d58:	0026      	movs	r6, r4
 8006d5a:	3615      	adds	r6, #21
 8006d5c:	2304      	movs	r3, #4
 8006d5e:	42b2      	cmp	r2, r6
 8006d60:	d304      	bcc.n	8006d6c <__lshift+0xa4>
 8006d62:	1b13      	subs	r3, r2, r4
 8006d64:	3b15      	subs	r3, #21
 8006d66:	089b      	lsrs	r3, r3, #2
 8006d68:	3301      	adds	r3, #1
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	50c8      	str	r0, [r1, r3]
 8006d6e:	2800      	cmp	r0, #0
 8006d70:	d002      	beq.n	8006d78 <__lshift+0xb0>
 8006d72:	9b01      	ldr	r3, [sp, #4]
 8006d74:	3302      	adds	r3, #2
 8006d76:	9300      	str	r3, [sp, #0]
 8006d78:	9b00      	ldr	r3, [sp, #0]
 8006d7a:	9802      	ldr	r0, [sp, #8]
 8006d7c:	3b01      	subs	r3, #1
 8006d7e:	0021      	movs	r1, r4
 8006d80:	612b      	str	r3, [r5, #16]
 8006d82:	f7ff fdc3 	bl	800690c <_Bfree>
 8006d86:	0028      	movs	r0, r5
 8006d88:	b005      	add	sp, #20
 8006d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d8c:	cb01      	ldmia	r3!, {r0}
 8006d8e:	c101      	stmia	r1!, {r0}
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d8fb      	bhi.n	8006d8c <__lshift+0xc4>
 8006d94:	e7f0      	b.n	8006d78 <__lshift+0xb0>
 8006d96:	46c0      	nop			@ (mov r8, r8)
 8006d98:	08007c94 	.word	0x08007c94
 8006d9c:	08007ca5 	.word	0x08007ca5

08006da0 <__mcmp>:
 8006da0:	b530      	push	{r4, r5, lr}
 8006da2:	690b      	ldr	r3, [r1, #16]
 8006da4:	6904      	ldr	r4, [r0, #16]
 8006da6:	0002      	movs	r2, r0
 8006da8:	1ae0      	subs	r0, r4, r3
 8006daa:	429c      	cmp	r4, r3
 8006dac:	d10f      	bne.n	8006dce <__mcmp+0x2e>
 8006dae:	3214      	adds	r2, #20
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	3114      	adds	r1, #20
 8006db4:	0014      	movs	r4, r2
 8006db6:	18c9      	adds	r1, r1, r3
 8006db8:	18d2      	adds	r2, r2, r3
 8006dba:	3a04      	subs	r2, #4
 8006dbc:	3904      	subs	r1, #4
 8006dbe:	6815      	ldr	r5, [r2, #0]
 8006dc0:	680b      	ldr	r3, [r1, #0]
 8006dc2:	429d      	cmp	r5, r3
 8006dc4:	d004      	beq.n	8006dd0 <__mcmp+0x30>
 8006dc6:	2001      	movs	r0, #1
 8006dc8:	429d      	cmp	r5, r3
 8006dca:	d200      	bcs.n	8006dce <__mcmp+0x2e>
 8006dcc:	3802      	subs	r0, #2
 8006dce:	bd30      	pop	{r4, r5, pc}
 8006dd0:	4294      	cmp	r4, r2
 8006dd2:	d3f2      	bcc.n	8006dba <__mcmp+0x1a>
 8006dd4:	e7fb      	b.n	8006dce <__mcmp+0x2e>
	...

08006dd8 <__mdiff>:
 8006dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dda:	000c      	movs	r4, r1
 8006ddc:	b087      	sub	sp, #28
 8006dde:	9000      	str	r0, [sp, #0]
 8006de0:	0011      	movs	r1, r2
 8006de2:	0020      	movs	r0, r4
 8006de4:	0017      	movs	r7, r2
 8006de6:	f7ff ffdb 	bl	8006da0 <__mcmp>
 8006dea:	1e05      	subs	r5, r0, #0
 8006dec:	d110      	bne.n	8006e10 <__mdiff+0x38>
 8006dee:	0001      	movs	r1, r0
 8006df0:	9800      	ldr	r0, [sp, #0]
 8006df2:	f7ff fd47 	bl	8006884 <_Balloc>
 8006df6:	1e02      	subs	r2, r0, #0
 8006df8:	d104      	bne.n	8006e04 <__mdiff+0x2c>
 8006dfa:	4b40      	ldr	r3, [pc, #256]	@ (8006efc <__mdiff+0x124>)
 8006dfc:	4840      	ldr	r0, [pc, #256]	@ (8006f00 <__mdiff+0x128>)
 8006dfe:	4941      	ldr	r1, [pc, #260]	@ (8006f04 <__mdiff+0x12c>)
 8006e00:	f000 fb22 	bl	8007448 <__assert_func>
 8006e04:	2301      	movs	r3, #1
 8006e06:	6145      	str	r5, [r0, #20]
 8006e08:	6103      	str	r3, [r0, #16]
 8006e0a:	0010      	movs	r0, r2
 8006e0c:	b007      	add	sp, #28
 8006e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e10:	2600      	movs	r6, #0
 8006e12:	42b0      	cmp	r0, r6
 8006e14:	da03      	bge.n	8006e1e <__mdiff+0x46>
 8006e16:	0023      	movs	r3, r4
 8006e18:	003c      	movs	r4, r7
 8006e1a:	001f      	movs	r7, r3
 8006e1c:	3601      	adds	r6, #1
 8006e1e:	6861      	ldr	r1, [r4, #4]
 8006e20:	9800      	ldr	r0, [sp, #0]
 8006e22:	f7ff fd2f 	bl	8006884 <_Balloc>
 8006e26:	1e02      	subs	r2, r0, #0
 8006e28:	d103      	bne.n	8006e32 <__mdiff+0x5a>
 8006e2a:	4b34      	ldr	r3, [pc, #208]	@ (8006efc <__mdiff+0x124>)
 8006e2c:	4834      	ldr	r0, [pc, #208]	@ (8006f00 <__mdiff+0x128>)
 8006e2e:	4936      	ldr	r1, [pc, #216]	@ (8006f08 <__mdiff+0x130>)
 8006e30:	e7e6      	b.n	8006e00 <__mdiff+0x28>
 8006e32:	6923      	ldr	r3, [r4, #16]
 8006e34:	3414      	adds	r4, #20
 8006e36:	9300      	str	r3, [sp, #0]
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	18e3      	adds	r3, r4, r3
 8006e3c:	0021      	movs	r1, r4
 8006e3e:	9401      	str	r4, [sp, #4]
 8006e40:	003c      	movs	r4, r7
 8006e42:	9302      	str	r3, [sp, #8]
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	3414      	adds	r4, #20
 8006e48:	009b      	lsls	r3, r3, #2
 8006e4a:	18e3      	adds	r3, r4, r3
 8006e4c:	9303      	str	r3, [sp, #12]
 8006e4e:	0003      	movs	r3, r0
 8006e50:	60c6      	str	r6, [r0, #12]
 8006e52:	468c      	mov	ip, r1
 8006e54:	2000      	movs	r0, #0
 8006e56:	3314      	adds	r3, #20
 8006e58:	9304      	str	r3, [sp, #16]
 8006e5a:	9305      	str	r3, [sp, #20]
 8006e5c:	4663      	mov	r3, ip
 8006e5e:	cb20      	ldmia	r3!, {r5}
 8006e60:	b2a9      	uxth	r1, r5
 8006e62:	000e      	movs	r6, r1
 8006e64:	469c      	mov	ip, r3
 8006e66:	cc08      	ldmia	r4!, {r3}
 8006e68:	0c2d      	lsrs	r5, r5, #16
 8006e6a:	b299      	uxth	r1, r3
 8006e6c:	1a71      	subs	r1, r6, r1
 8006e6e:	1809      	adds	r1, r1, r0
 8006e70:	0c1b      	lsrs	r3, r3, #16
 8006e72:	1408      	asrs	r0, r1, #16
 8006e74:	1aeb      	subs	r3, r5, r3
 8006e76:	181b      	adds	r3, r3, r0
 8006e78:	1418      	asrs	r0, r3, #16
 8006e7a:	b289      	uxth	r1, r1
 8006e7c:	041b      	lsls	r3, r3, #16
 8006e7e:	4319      	orrs	r1, r3
 8006e80:	9b05      	ldr	r3, [sp, #20]
 8006e82:	c302      	stmia	r3!, {r1}
 8006e84:	9305      	str	r3, [sp, #20]
 8006e86:	9b03      	ldr	r3, [sp, #12]
 8006e88:	42a3      	cmp	r3, r4
 8006e8a:	d8e7      	bhi.n	8006e5c <__mdiff+0x84>
 8006e8c:	0039      	movs	r1, r7
 8006e8e:	9c03      	ldr	r4, [sp, #12]
 8006e90:	3115      	adds	r1, #21
 8006e92:	2304      	movs	r3, #4
 8006e94:	428c      	cmp	r4, r1
 8006e96:	d304      	bcc.n	8006ea2 <__mdiff+0xca>
 8006e98:	1be3      	subs	r3, r4, r7
 8006e9a:	3b15      	subs	r3, #21
 8006e9c:	089b      	lsrs	r3, r3, #2
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	9901      	ldr	r1, [sp, #4]
 8006ea4:	18cd      	adds	r5, r1, r3
 8006ea6:	9904      	ldr	r1, [sp, #16]
 8006ea8:	002e      	movs	r6, r5
 8006eaa:	18cb      	adds	r3, r1, r3
 8006eac:	001f      	movs	r7, r3
 8006eae:	9902      	ldr	r1, [sp, #8]
 8006eb0:	428e      	cmp	r6, r1
 8006eb2:	d311      	bcc.n	8006ed8 <__mdiff+0x100>
 8006eb4:	9c02      	ldr	r4, [sp, #8]
 8006eb6:	1ee9      	subs	r1, r5, #3
 8006eb8:	2000      	movs	r0, #0
 8006eba:	428c      	cmp	r4, r1
 8006ebc:	d304      	bcc.n	8006ec8 <__mdiff+0xf0>
 8006ebe:	0021      	movs	r1, r4
 8006ec0:	3103      	adds	r1, #3
 8006ec2:	1b49      	subs	r1, r1, r5
 8006ec4:	0889      	lsrs	r1, r1, #2
 8006ec6:	0088      	lsls	r0, r1, #2
 8006ec8:	181b      	adds	r3, r3, r0
 8006eca:	3b04      	subs	r3, #4
 8006ecc:	6819      	ldr	r1, [r3, #0]
 8006ece:	2900      	cmp	r1, #0
 8006ed0:	d010      	beq.n	8006ef4 <__mdiff+0x11c>
 8006ed2:	9b00      	ldr	r3, [sp, #0]
 8006ed4:	6113      	str	r3, [r2, #16]
 8006ed6:	e798      	b.n	8006e0a <__mdiff+0x32>
 8006ed8:	4684      	mov	ip, r0
 8006eda:	ce02      	ldmia	r6!, {r1}
 8006edc:	b288      	uxth	r0, r1
 8006ede:	4460      	add	r0, ip
 8006ee0:	1400      	asrs	r0, r0, #16
 8006ee2:	0c0c      	lsrs	r4, r1, #16
 8006ee4:	1904      	adds	r4, r0, r4
 8006ee6:	4461      	add	r1, ip
 8006ee8:	1420      	asrs	r0, r4, #16
 8006eea:	b289      	uxth	r1, r1
 8006eec:	0424      	lsls	r4, r4, #16
 8006eee:	4321      	orrs	r1, r4
 8006ef0:	c702      	stmia	r7!, {r1}
 8006ef2:	e7dc      	b.n	8006eae <__mdiff+0xd6>
 8006ef4:	9900      	ldr	r1, [sp, #0]
 8006ef6:	3901      	subs	r1, #1
 8006ef8:	9100      	str	r1, [sp, #0]
 8006efa:	e7e6      	b.n	8006eca <__mdiff+0xf2>
 8006efc:	08007c94 	.word	0x08007c94
 8006f00:	08007ca5 	.word	0x08007ca5
 8006f04:	00000237 	.word	0x00000237
 8006f08:	00000245 	.word	0x00000245

08006f0c <__d2b>:
 8006f0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f0e:	2101      	movs	r1, #1
 8006f10:	0016      	movs	r6, r2
 8006f12:	001f      	movs	r7, r3
 8006f14:	f7ff fcb6 	bl	8006884 <_Balloc>
 8006f18:	1e04      	subs	r4, r0, #0
 8006f1a:	d105      	bne.n	8006f28 <__d2b+0x1c>
 8006f1c:	0022      	movs	r2, r4
 8006f1e:	4b25      	ldr	r3, [pc, #148]	@ (8006fb4 <__d2b+0xa8>)
 8006f20:	4825      	ldr	r0, [pc, #148]	@ (8006fb8 <__d2b+0xac>)
 8006f22:	4926      	ldr	r1, [pc, #152]	@ (8006fbc <__d2b+0xb0>)
 8006f24:	f000 fa90 	bl	8007448 <__assert_func>
 8006f28:	033b      	lsls	r3, r7, #12
 8006f2a:	007d      	lsls	r5, r7, #1
 8006f2c:	0b1b      	lsrs	r3, r3, #12
 8006f2e:	0d6d      	lsrs	r5, r5, #21
 8006f30:	d002      	beq.n	8006f38 <__d2b+0x2c>
 8006f32:	2280      	movs	r2, #128	@ 0x80
 8006f34:	0352      	lsls	r2, r2, #13
 8006f36:	4313      	orrs	r3, r2
 8006f38:	9301      	str	r3, [sp, #4]
 8006f3a:	2e00      	cmp	r6, #0
 8006f3c:	d025      	beq.n	8006f8a <__d2b+0x7e>
 8006f3e:	4668      	mov	r0, sp
 8006f40:	9600      	str	r6, [sp, #0]
 8006f42:	f7ff fd6c 	bl	8006a1e <__lo0bits>
 8006f46:	9b01      	ldr	r3, [sp, #4]
 8006f48:	9900      	ldr	r1, [sp, #0]
 8006f4a:	2800      	cmp	r0, #0
 8006f4c:	d01b      	beq.n	8006f86 <__d2b+0x7a>
 8006f4e:	2220      	movs	r2, #32
 8006f50:	001e      	movs	r6, r3
 8006f52:	1a12      	subs	r2, r2, r0
 8006f54:	4096      	lsls	r6, r2
 8006f56:	0032      	movs	r2, r6
 8006f58:	40c3      	lsrs	r3, r0
 8006f5a:	430a      	orrs	r2, r1
 8006f5c:	6162      	str	r2, [r4, #20]
 8006f5e:	9301      	str	r3, [sp, #4]
 8006f60:	9e01      	ldr	r6, [sp, #4]
 8006f62:	61a6      	str	r6, [r4, #24]
 8006f64:	1e73      	subs	r3, r6, #1
 8006f66:	419e      	sbcs	r6, r3
 8006f68:	3601      	adds	r6, #1
 8006f6a:	6126      	str	r6, [r4, #16]
 8006f6c:	2d00      	cmp	r5, #0
 8006f6e:	d014      	beq.n	8006f9a <__d2b+0x8e>
 8006f70:	2635      	movs	r6, #53	@ 0x35
 8006f72:	4b13      	ldr	r3, [pc, #76]	@ (8006fc0 <__d2b+0xb4>)
 8006f74:	18ed      	adds	r5, r5, r3
 8006f76:	9b08      	ldr	r3, [sp, #32]
 8006f78:	182d      	adds	r5, r5, r0
 8006f7a:	601d      	str	r5, [r3, #0]
 8006f7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f7e:	1a36      	subs	r6, r6, r0
 8006f80:	601e      	str	r6, [r3, #0]
 8006f82:	0020      	movs	r0, r4
 8006f84:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006f86:	6161      	str	r1, [r4, #20]
 8006f88:	e7ea      	b.n	8006f60 <__d2b+0x54>
 8006f8a:	a801      	add	r0, sp, #4
 8006f8c:	f7ff fd47 	bl	8006a1e <__lo0bits>
 8006f90:	9b01      	ldr	r3, [sp, #4]
 8006f92:	2601      	movs	r6, #1
 8006f94:	6163      	str	r3, [r4, #20]
 8006f96:	3020      	adds	r0, #32
 8006f98:	e7e7      	b.n	8006f6a <__d2b+0x5e>
 8006f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8006fc4 <__d2b+0xb8>)
 8006f9c:	18c0      	adds	r0, r0, r3
 8006f9e:	9b08      	ldr	r3, [sp, #32]
 8006fa0:	6018      	str	r0, [r3, #0]
 8006fa2:	4b09      	ldr	r3, [pc, #36]	@ (8006fc8 <__d2b+0xbc>)
 8006fa4:	18f3      	adds	r3, r6, r3
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	18e3      	adds	r3, r4, r3
 8006faa:	6958      	ldr	r0, [r3, #20]
 8006fac:	f7ff fd16 	bl	80069dc <__hi0bits>
 8006fb0:	0176      	lsls	r6, r6, #5
 8006fb2:	e7e3      	b.n	8006f7c <__d2b+0x70>
 8006fb4:	08007c94 	.word	0x08007c94
 8006fb8:	08007ca5 	.word	0x08007ca5
 8006fbc:	0000030f 	.word	0x0000030f
 8006fc0:	fffffbcd 	.word	0xfffffbcd
 8006fc4:	fffffbce 	.word	0xfffffbce
 8006fc8:	3fffffff 	.word	0x3fffffff

08006fcc <__ssputs_r>:
 8006fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fce:	688e      	ldr	r6, [r1, #8]
 8006fd0:	b085      	sub	sp, #20
 8006fd2:	001f      	movs	r7, r3
 8006fd4:	000c      	movs	r4, r1
 8006fd6:	680b      	ldr	r3, [r1, #0]
 8006fd8:	9002      	str	r0, [sp, #8]
 8006fda:	9203      	str	r2, [sp, #12]
 8006fdc:	42be      	cmp	r6, r7
 8006fde:	d830      	bhi.n	8007042 <__ssputs_r+0x76>
 8006fe0:	210c      	movs	r1, #12
 8006fe2:	5e62      	ldrsh	r2, [r4, r1]
 8006fe4:	2190      	movs	r1, #144	@ 0x90
 8006fe6:	00c9      	lsls	r1, r1, #3
 8006fe8:	420a      	tst	r2, r1
 8006fea:	d028      	beq.n	800703e <__ssputs_r+0x72>
 8006fec:	2003      	movs	r0, #3
 8006fee:	6921      	ldr	r1, [r4, #16]
 8006ff0:	1a5b      	subs	r3, r3, r1
 8006ff2:	9301      	str	r3, [sp, #4]
 8006ff4:	6963      	ldr	r3, [r4, #20]
 8006ff6:	4343      	muls	r3, r0
 8006ff8:	9801      	ldr	r0, [sp, #4]
 8006ffa:	0fdd      	lsrs	r5, r3, #31
 8006ffc:	18ed      	adds	r5, r5, r3
 8006ffe:	1c7b      	adds	r3, r7, #1
 8007000:	181b      	adds	r3, r3, r0
 8007002:	106d      	asrs	r5, r5, #1
 8007004:	42ab      	cmp	r3, r5
 8007006:	d900      	bls.n	800700a <__ssputs_r+0x3e>
 8007008:	001d      	movs	r5, r3
 800700a:	0552      	lsls	r2, r2, #21
 800700c:	d528      	bpl.n	8007060 <__ssputs_r+0x94>
 800700e:	0029      	movs	r1, r5
 8007010:	9802      	ldr	r0, [sp, #8]
 8007012:	f7ff fba7 	bl	8006764 <_malloc_r>
 8007016:	1e06      	subs	r6, r0, #0
 8007018:	d02c      	beq.n	8007074 <__ssputs_r+0xa8>
 800701a:	9a01      	ldr	r2, [sp, #4]
 800701c:	6921      	ldr	r1, [r4, #16]
 800701e:	f000 fa09 	bl	8007434 <memcpy>
 8007022:	89a2      	ldrh	r2, [r4, #12]
 8007024:	4b18      	ldr	r3, [pc, #96]	@ (8007088 <__ssputs_r+0xbc>)
 8007026:	401a      	ands	r2, r3
 8007028:	2380      	movs	r3, #128	@ 0x80
 800702a:	4313      	orrs	r3, r2
 800702c:	81a3      	strh	r3, [r4, #12]
 800702e:	9b01      	ldr	r3, [sp, #4]
 8007030:	6126      	str	r6, [r4, #16]
 8007032:	18f6      	adds	r6, r6, r3
 8007034:	6026      	str	r6, [r4, #0]
 8007036:	003e      	movs	r6, r7
 8007038:	6165      	str	r5, [r4, #20]
 800703a:	1aed      	subs	r5, r5, r3
 800703c:	60a5      	str	r5, [r4, #8]
 800703e:	42be      	cmp	r6, r7
 8007040:	d900      	bls.n	8007044 <__ssputs_r+0x78>
 8007042:	003e      	movs	r6, r7
 8007044:	0032      	movs	r2, r6
 8007046:	9903      	ldr	r1, [sp, #12]
 8007048:	6820      	ldr	r0, [r4, #0]
 800704a:	f000 f9ce 	bl	80073ea <memmove>
 800704e:	2000      	movs	r0, #0
 8007050:	68a3      	ldr	r3, [r4, #8]
 8007052:	1b9b      	subs	r3, r3, r6
 8007054:	60a3      	str	r3, [r4, #8]
 8007056:	6823      	ldr	r3, [r4, #0]
 8007058:	199b      	adds	r3, r3, r6
 800705a:	6023      	str	r3, [r4, #0]
 800705c:	b005      	add	sp, #20
 800705e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007060:	002a      	movs	r2, r5
 8007062:	9802      	ldr	r0, [sp, #8]
 8007064:	f000 fa4d 	bl	8007502 <_realloc_r>
 8007068:	1e06      	subs	r6, r0, #0
 800706a:	d1e0      	bne.n	800702e <__ssputs_r+0x62>
 800706c:	6921      	ldr	r1, [r4, #16]
 800706e:	9802      	ldr	r0, [sp, #8]
 8007070:	f7ff fb02 	bl	8006678 <_free_r>
 8007074:	230c      	movs	r3, #12
 8007076:	2001      	movs	r0, #1
 8007078:	9a02      	ldr	r2, [sp, #8]
 800707a:	4240      	negs	r0, r0
 800707c:	6013      	str	r3, [r2, #0]
 800707e:	89a2      	ldrh	r2, [r4, #12]
 8007080:	3334      	adds	r3, #52	@ 0x34
 8007082:	4313      	orrs	r3, r2
 8007084:	81a3      	strh	r3, [r4, #12]
 8007086:	e7e9      	b.n	800705c <__ssputs_r+0x90>
 8007088:	fffffb7f 	.word	0xfffffb7f

0800708c <_svfiprintf_r>:
 800708c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800708e:	b0a1      	sub	sp, #132	@ 0x84
 8007090:	9003      	str	r0, [sp, #12]
 8007092:	001d      	movs	r5, r3
 8007094:	898b      	ldrh	r3, [r1, #12]
 8007096:	000f      	movs	r7, r1
 8007098:	0016      	movs	r6, r2
 800709a:	061b      	lsls	r3, r3, #24
 800709c:	d511      	bpl.n	80070c2 <_svfiprintf_r+0x36>
 800709e:	690b      	ldr	r3, [r1, #16]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d10e      	bne.n	80070c2 <_svfiprintf_r+0x36>
 80070a4:	2140      	movs	r1, #64	@ 0x40
 80070a6:	f7ff fb5d 	bl	8006764 <_malloc_r>
 80070aa:	6038      	str	r0, [r7, #0]
 80070ac:	6138      	str	r0, [r7, #16]
 80070ae:	2800      	cmp	r0, #0
 80070b0:	d105      	bne.n	80070be <_svfiprintf_r+0x32>
 80070b2:	230c      	movs	r3, #12
 80070b4:	9a03      	ldr	r2, [sp, #12]
 80070b6:	6013      	str	r3, [r2, #0]
 80070b8:	2001      	movs	r0, #1
 80070ba:	4240      	negs	r0, r0
 80070bc:	e0cf      	b.n	800725e <_svfiprintf_r+0x1d2>
 80070be:	2340      	movs	r3, #64	@ 0x40
 80070c0:	617b      	str	r3, [r7, #20]
 80070c2:	2300      	movs	r3, #0
 80070c4:	ac08      	add	r4, sp, #32
 80070c6:	6163      	str	r3, [r4, #20]
 80070c8:	3320      	adds	r3, #32
 80070ca:	7663      	strb	r3, [r4, #25]
 80070cc:	3310      	adds	r3, #16
 80070ce:	76a3      	strb	r3, [r4, #26]
 80070d0:	9507      	str	r5, [sp, #28]
 80070d2:	0035      	movs	r5, r6
 80070d4:	782b      	ldrb	r3, [r5, #0]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d001      	beq.n	80070de <_svfiprintf_r+0x52>
 80070da:	2b25      	cmp	r3, #37	@ 0x25
 80070dc:	d148      	bne.n	8007170 <_svfiprintf_r+0xe4>
 80070de:	1bab      	subs	r3, r5, r6
 80070e0:	9305      	str	r3, [sp, #20]
 80070e2:	42b5      	cmp	r5, r6
 80070e4:	d00b      	beq.n	80070fe <_svfiprintf_r+0x72>
 80070e6:	0032      	movs	r2, r6
 80070e8:	0039      	movs	r1, r7
 80070ea:	9803      	ldr	r0, [sp, #12]
 80070ec:	f7ff ff6e 	bl	8006fcc <__ssputs_r>
 80070f0:	3001      	adds	r0, #1
 80070f2:	d100      	bne.n	80070f6 <_svfiprintf_r+0x6a>
 80070f4:	e0ae      	b.n	8007254 <_svfiprintf_r+0x1c8>
 80070f6:	6963      	ldr	r3, [r4, #20]
 80070f8:	9a05      	ldr	r2, [sp, #20]
 80070fa:	189b      	adds	r3, r3, r2
 80070fc:	6163      	str	r3, [r4, #20]
 80070fe:	782b      	ldrb	r3, [r5, #0]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d100      	bne.n	8007106 <_svfiprintf_r+0x7a>
 8007104:	e0a6      	b.n	8007254 <_svfiprintf_r+0x1c8>
 8007106:	2201      	movs	r2, #1
 8007108:	2300      	movs	r3, #0
 800710a:	4252      	negs	r2, r2
 800710c:	6062      	str	r2, [r4, #4]
 800710e:	a904      	add	r1, sp, #16
 8007110:	3254      	adds	r2, #84	@ 0x54
 8007112:	1852      	adds	r2, r2, r1
 8007114:	1c6e      	adds	r6, r5, #1
 8007116:	6023      	str	r3, [r4, #0]
 8007118:	60e3      	str	r3, [r4, #12]
 800711a:	60a3      	str	r3, [r4, #8]
 800711c:	7013      	strb	r3, [r2, #0]
 800711e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8007120:	4b54      	ldr	r3, [pc, #336]	@ (8007274 <_svfiprintf_r+0x1e8>)
 8007122:	2205      	movs	r2, #5
 8007124:	0018      	movs	r0, r3
 8007126:	7831      	ldrb	r1, [r6, #0]
 8007128:	9305      	str	r3, [sp, #20]
 800712a:	f7fe fc18 	bl	800595e <memchr>
 800712e:	1c75      	adds	r5, r6, #1
 8007130:	2800      	cmp	r0, #0
 8007132:	d11f      	bne.n	8007174 <_svfiprintf_r+0xe8>
 8007134:	6822      	ldr	r2, [r4, #0]
 8007136:	06d3      	lsls	r3, r2, #27
 8007138:	d504      	bpl.n	8007144 <_svfiprintf_r+0xb8>
 800713a:	2353      	movs	r3, #83	@ 0x53
 800713c:	a904      	add	r1, sp, #16
 800713e:	185b      	adds	r3, r3, r1
 8007140:	2120      	movs	r1, #32
 8007142:	7019      	strb	r1, [r3, #0]
 8007144:	0713      	lsls	r3, r2, #28
 8007146:	d504      	bpl.n	8007152 <_svfiprintf_r+0xc6>
 8007148:	2353      	movs	r3, #83	@ 0x53
 800714a:	a904      	add	r1, sp, #16
 800714c:	185b      	adds	r3, r3, r1
 800714e:	212b      	movs	r1, #43	@ 0x2b
 8007150:	7019      	strb	r1, [r3, #0]
 8007152:	7833      	ldrb	r3, [r6, #0]
 8007154:	2b2a      	cmp	r3, #42	@ 0x2a
 8007156:	d016      	beq.n	8007186 <_svfiprintf_r+0xfa>
 8007158:	0035      	movs	r5, r6
 800715a:	2100      	movs	r1, #0
 800715c:	200a      	movs	r0, #10
 800715e:	68e3      	ldr	r3, [r4, #12]
 8007160:	782a      	ldrb	r2, [r5, #0]
 8007162:	1c6e      	adds	r6, r5, #1
 8007164:	3a30      	subs	r2, #48	@ 0x30
 8007166:	2a09      	cmp	r2, #9
 8007168:	d950      	bls.n	800720c <_svfiprintf_r+0x180>
 800716a:	2900      	cmp	r1, #0
 800716c:	d111      	bne.n	8007192 <_svfiprintf_r+0x106>
 800716e:	e017      	b.n	80071a0 <_svfiprintf_r+0x114>
 8007170:	3501      	adds	r5, #1
 8007172:	e7af      	b.n	80070d4 <_svfiprintf_r+0x48>
 8007174:	9b05      	ldr	r3, [sp, #20]
 8007176:	6822      	ldr	r2, [r4, #0]
 8007178:	1ac0      	subs	r0, r0, r3
 800717a:	2301      	movs	r3, #1
 800717c:	4083      	lsls	r3, r0
 800717e:	4313      	orrs	r3, r2
 8007180:	002e      	movs	r6, r5
 8007182:	6023      	str	r3, [r4, #0]
 8007184:	e7cc      	b.n	8007120 <_svfiprintf_r+0x94>
 8007186:	9b07      	ldr	r3, [sp, #28]
 8007188:	1d19      	adds	r1, r3, #4
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	9107      	str	r1, [sp, #28]
 800718e:	2b00      	cmp	r3, #0
 8007190:	db01      	blt.n	8007196 <_svfiprintf_r+0x10a>
 8007192:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007194:	e004      	b.n	80071a0 <_svfiprintf_r+0x114>
 8007196:	425b      	negs	r3, r3
 8007198:	60e3      	str	r3, [r4, #12]
 800719a:	2302      	movs	r3, #2
 800719c:	4313      	orrs	r3, r2
 800719e:	6023      	str	r3, [r4, #0]
 80071a0:	782b      	ldrb	r3, [r5, #0]
 80071a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80071a4:	d10c      	bne.n	80071c0 <_svfiprintf_r+0x134>
 80071a6:	786b      	ldrb	r3, [r5, #1]
 80071a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80071aa:	d134      	bne.n	8007216 <_svfiprintf_r+0x18a>
 80071ac:	9b07      	ldr	r3, [sp, #28]
 80071ae:	3502      	adds	r5, #2
 80071b0:	1d1a      	adds	r2, r3, #4
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	9207      	str	r2, [sp, #28]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	da01      	bge.n	80071be <_svfiprintf_r+0x132>
 80071ba:	2301      	movs	r3, #1
 80071bc:	425b      	negs	r3, r3
 80071be:	9309      	str	r3, [sp, #36]	@ 0x24
 80071c0:	4e2d      	ldr	r6, [pc, #180]	@ (8007278 <_svfiprintf_r+0x1ec>)
 80071c2:	2203      	movs	r2, #3
 80071c4:	0030      	movs	r0, r6
 80071c6:	7829      	ldrb	r1, [r5, #0]
 80071c8:	f7fe fbc9 	bl	800595e <memchr>
 80071cc:	2800      	cmp	r0, #0
 80071ce:	d006      	beq.n	80071de <_svfiprintf_r+0x152>
 80071d0:	2340      	movs	r3, #64	@ 0x40
 80071d2:	1b80      	subs	r0, r0, r6
 80071d4:	4083      	lsls	r3, r0
 80071d6:	6822      	ldr	r2, [r4, #0]
 80071d8:	3501      	adds	r5, #1
 80071da:	4313      	orrs	r3, r2
 80071dc:	6023      	str	r3, [r4, #0]
 80071de:	7829      	ldrb	r1, [r5, #0]
 80071e0:	2206      	movs	r2, #6
 80071e2:	4826      	ldr	r0, [pc, #152]	@ (800727c <_svfiprintf_r+0x1f0>)
 80071e4:	1c6e      	adds	r6, r5, #1
 80071e6:	7621      	strb	r1, [r4, #24]
 80071e8:	f7fe fbb9 	bl	800595e <memchr>
 80071ec:	2800      	cmp	r0, #0
 80071ee:	d038      	beq.n	8007262 <_svfiprintf_r+0x1d6>
 80071f0:	4b23      	ldr	r3, [pc, #140]	@ (8007280 <_svfiprintf_r+0x1f4>)
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d122      	bne.n	800723c <_svfiprintf_r+0x1b0>
 80071f6:	2207      	movs	r2, #7
 80071f8:	9b07      	ldr	r3, [sp, #28]
 80071fa:	3307      	adds	r3, #7
 80071fc:	4393      	bics	r3, r2
 80071fe:	3308      	adds	r3, #8
 8007200:	9307      	str	r3, [sp, #28]
 8007202:	6963      	ldr	r3, [r4, #20]
 8007204:	9a04      	ldr	r2, [sp, #16]
 8007206:	189b      	adds	r3, r3, r2
 8007208:	6163      	str	r3, [r4, #20]
 800720a:	e762      	b.n	80070d2 <_svfiprintf_r+0x46>
 800720c:	4343      	muls	r3, r0
 800720e:	0035      	movs	r5, r6
 8007210:	2101      	movs	r1, #1
 8007212:	189b      	adds	r3, r3, r2
 8007214:	e7a4      	b.n	8007160 <_svfiprintf_r+0xd4>
 8007216:	2300      	movs	r3, #0
 8007218:	200a      	movs	r0, #10
 800721a:	0019      	movs	r1, r3
 800721c:	3501      	adds	r5, #1
 800721e:	6063      	str	r3, [r4, #4]
 8007220:	782a      	ldrb	r2, [r5, #0]
 8007222:	1c6e      	adds	r6, r5, #1
 8007224:	3a30      	subs	r2, #48	@ 0x30
 8007226:	2a09      	cmp	r2, #9
 8007228:	d903      	bls.n	8007232 <_svfiprintf_r+0x1a6>
 800722a:	2b00      	cmp	r3, #0
 800722c:	d0c8      	beq.n	80071c0 <_svfiprintf_r+0x134>
 800722e:	9109      	str	r1, [sp, #36]	@ 0x24
 8007230:	e7c6      	b.n	80071c0 <_svfiprintf_r+0x134>
 8007232:	4341      	muls	r1, r0
 8007234:	0035      	movs	r5, r6
 8007236:	2301      	movs	r3, #1
 8007238:	1889      	adds	r1, r1, r2
 800723a:	e7f1      	b.n	8007220 <_svfiprintf_r+0x194>
 800723c:	aa07      	add	r2, sp, #28
 800723e:	9200      	str	r2, [sp, #0]
 8007240:	0021      	movs	r1, r4
 8007242:	003a      	movs	r2, r7
 8007244:	4b0f      	ldr	r3, [pc, #60]	@ (8007284 <_svfiprintf_r+0x1f8>)
 8007246:	9803      	ldr	r0, [sp, #12]
 8007248:	f7fd fe16 	bl	8004e78 <_printf_float>
 800724c:	9004      	str	r0, [sp, #16]
 800724e:	9b04      	ldr	r3, [sp, #16]
 8007250:	3301      	adds	r3, #1
 8007252:	d1d6      	bne.n	8007202 <_svfiprintf_r+0x176>
 8007254:	89bb      	ldrh	r3, [r7, #12]
 8007256:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8007258:	065b      	lsls	r3, r3, #25
 800725a:	d500      	bpl.n	800725e <_svfiprintf_r+0x1d2>
 800725c:	e72c      	b.n	80070b8 <_svfiprintf_r+0x2c>
 800725e:	b021      	add	sp, #132	@ 0x84
 8007260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007262:	aa07      	add	r2, sp, #28
 8007264:	9200      	str	r2, [sp, #0]
 8007266:	0021      	movs	r1, r4
 8007268:	003a      	movs	r2, r7
 800726a:	4b06      	ldr	r3, [pc, #24]	@ (8007284 <_svfiprintf_r+0x1f8>)
 800726c:	9803      	ldr	r0, [sp, #12]
 800726e:	f7fe f8b1 	bl	80053d4 <_printf_i>
 8007272:	e7eb      	b.n	800724c <_svfiprintf_r+0x1c0>
 8007274:	08007e00 	.word	0x08007e00
 8007278:	08007e06 	.word	0x08007e06
 800727c:	08007e0a 	.word	0x08007e0a
 8007280:	08004e79 	.word	0x08004e79
 8007284:	08006fcd 	.word	0x08006fcd

08007288 <__sflush_r>:
 8007288:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800728a:	220c      	movs	r2, #12
 800728c:	5e8b      	ldrsh	r3, [r1, r2]
 800728e:	0005      	movs	r5, r0
 8007290:	000c      	movs	r4, r1
 8007292:	071a      	lsls	r2, r3, #28
 8007294:	d456      	bmi.n	8007344 <__sflush_r+0xbc>
 8007296:	684a      	ldr	r2, [r1, #4]
 8007298:	2a00      	cmp	r2, #0
 800729a:	dc02      	bgt.n	80072a2 <__sflush_r+0x1a>
 800729c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800729e:	2a00      	cmp	r2, #0
 80072a0:	dd4e      	ble.n	8007340 <__sflush_r+0xb8>
 80072a2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80072a4:	2f00      	cmp	r7, #0
 80072a6:	d04b      	beq.n	8007340 <__sflush_r+0xb8>
 80072a8:	2200      	movs	r2, #0
 80072aa:	2080      	movs	r0, #128	@ 0x80
 80072ac:	682e      	ldr	r6, [r5, #0]
 80072ae:	602a      	str	r2, [r5, #0]
 80072b0:	001a      	movs	r2, r3
 80072b2:	0140      	lsls	r0, r0, #5
 80072b4:	6a21      	ldr	r1, [r4, #32]
 80072b6:	4002      	ands	r2, r0
 80072b8:	4203      	tst	r3, r0
 80072ba:	d033      	beq.n	8007324 <__sflush_r+0x9c>
 80072bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80072be:	89a3      	ldrh	r3, [r4, #12]
 80072c0:	075b      	lsls	r3, r3, #29
 80072c2:	d506      	bpl.n	80072d2 <__sflush_r+0x4a>
 80072c4:	6863      	ldr	r3, [r4, #4]
 80072c6:	1ad2      	subs	r2, r2, r3
 80072c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d001      	beq.n	80072d2 <__sflush_r+0x4a>
 80072ce:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80072d0:	1ad2      	subs	r2, r2, r3
 80072d2:	2300      	movs	r3, #0
 80072d4:	0028      	movs	r0, r5
 80072d6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80072d8:	6a21      	ldr	r1, [r4, #32]
 80072da:	47b8      	blx	r7
 80072dc:	89a2      	ldrh	r2, [r4, #12]
 80072de:	1c43      	adds	r3, r0, #1
 80072e0:	d106      	bne.n	80072f0 <__sflush_r+0x68>
 80072e2:	6829      	ldr	r1, [r5, #0]
 80072e4:	291d      	cmp	r1, #29
 80072e6:	d846      	bhi.n	8007376 <__sflush_r+0xee>
 80072e8:	4b29      	ldr	r3, [pc, #164]	@ (8007390 <__sflush_r+0x108>)
 80072ea:	410b      	asrs	r3, r1
 80072ec:	07db      	lsls	r3, r3, #31
 80072ee:	d442      	bmi.n	8007376 <__sflush_r+0xee>
 80072f0:	2300      	movs	r3, #0
 80072f2:	6063      	str	r3, [r4, #4]
 80072f4:	6923      	ldr	r3, [r4, #16]
 80072f6:	6023      	str	r3, [r4, #0]
 80072f8:	04d2      	lsls	r2, r2, #19
 80072fa:	d505      	bpl.n	8007308 <__sflush_r+0x80>
 80072fc:	1c43      	adds	r3, r0, #1
 80072fe:	d102      	bne.n	8007306 <__sflush_r+0x7e>
 8007300:	682b      	ldr	r3, [r5, #0]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d100      	bne.n	8007308 <__sflush_r+0x80>
 8007306:	6560      	str	r0, [r4, #84]	@ 0x54
 8007308:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800730a:	602e      	str	r6, [r5, #0]
 800730c:	2900      	cmp	r1, #0
 800730e:	d017      	beq.n	8007340 <__sflush_r+0xb8>
 8007310:	0023      	movs	r3, r4
 8007312:	3344      	adds	r3, #68	@ 0x44
 8007314:	4299      	cmp	r1, r3
 8007316:	d002      	beq.n	800731e <__sflush_r+0x96>
 8007318:	0028      	movs	r0, r5
 800731a:	f7ff f9ad 	bl	8006678 <_free_r>
 800731e:	2300      	movs	r3, #0
 8007320:	6363      	str	r3, [r4, #52]	@ 0x34
 8007322:	e00d      	b.n	8007340 <__sflush_r+0xb8>
 8007324:	2301      	movs	r3, #1
 8007326:	0028      	movs	r0, r5
 8007328:	47b8      	blx	r7
 800732a:	0002      	movs	r2, r0
 800732c:	1c43      	adds	r3, r0, #1
 800732e:	d1c6      	bne.n	80072be <__sflush_r+0x36>
 8007330:	682b      	ldr	r3, [r5, #0]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d0c3      	beq.n	80072be <__sflush_r+0x36>
 8007336:	2b1d      	cmp	r3, #29
 8007338:	d001      	beq.n	800733e <__sflush_r+0xb6>
 800733a:	2b16      	cmp	r3, #22
 800733c:	d11a      	bne.n	8007374 <__sflush_r+0xec>
 800733e:	602e      	str	r6, [r5, #0]
 8007340:	2000      	movs	r0, #0
 8007342:	e01e      	b.n	8007382 <__sflush_r+0xfa>
 8007344:	690e      	ldr	r6, [r1, #16]
 8007346:	2e00      	cmp	r6, #0
 8007348:	d0fa      	beq.n	8007340 <__sflush_r+0xb8>
 800734a:	680f      	ldr	r7, [r1, #0]
 800734c:	600e      	str	r6, [r1, #0]
 800734e:	1bba      	subs	r2, r7, r6
 8007350:	9201      	str	r2, [sp, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	079b      	lsls	r3, r3, #30
 8007356:	d100      	bne.n	800735a <__sflush_r+0xd2>
 8007358:	694a      	ldr	r2, [r1, #20]
 800735a:	60a2      	str	r2, [r4, #8]
 800735c:	9b01      	ldr	r3, [sp, #4]
 800735e:	2b00      	cmp	r3, #0
 8007360:	ddee      	ble.n	8007340 <__sflush_r+0xb8>
 8007362:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007364:	0032      	movs	r2, r6
 8007366:	001f      	movs	r7, r3
 8007368:	0028      	movs	r0, r5
 800736a:	9b01      	ldr	r3, [sp, #4]
 800736c:	6a21      	ldr	r1, [r4, #32]
 800736e:	47b8      	blx	r7
 8007370:	2800      	cmp	r0, #0
 8007372:	dc07      	bgt.n	8007384 <__sflush_r+0xfc>
 8007374:	89a2      	ldrh	r2, [r4, #12]
 8007376:	2340      	movs	r3, #64	@ 0x40
 8007378:	2001      	movs	r0, #1
 800737a:	4313      	orrs	r3, r2
 800737c:	b21b      	sxth	r3, r3
 800737e:	81a3      	strh	r3, [r4, #12]
 8007380:	4240      	negs	r0, r0
 8007382:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007384:	9b01      	ldr	r3, [sp, #4]
 8007386:	1836      	adds	r6, r6, r0
 8007388:	1a1b      	subs	r3, r3, r0
 800738a:	9301      	str	r3, [sp, #4]
 800738c:	e7e6      	b.n	800735c <__sflush_r+0xd4>
 800738e:	46c0      	nop			@ (mov r8, r8)
 8007390:	dfbffffe 	.word	0xdfbffffe

08007394 <_fflush_r>:
 8007394:	690b      	ldr	r3, [r1, #16]
 8007396:	b570      	push	{r4, r5, r6, lr}
 8007398:	0005      	movs	r5, r0
 800739a:	000c      	movs	r4, r1
 800739c:	2b00      	cmp	r3, #0
 800739e:	d102      	bne.n	80073a6 <_fflush_r+0x12>
 80073a0:	2500      	movs	r5, #0
 80073a2:	0028      	movs	r0, r5
 80073a4:	bd70      	pop	{r4, r5, r6, pc}
 80073a6:	2800      	cmp	r0, #0
 80073a8:	d004      	beq.n	80073b4 <_fflush_r+0x20>
 80073aa:	6a03      	ldr	r3, [r0, #32]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d101      	bne.n	80073b4 <_fflush_r+0x20>
 80073b0:	f7fe f9ae 	bl	8005710 <__sinit>
 80073b4:	220c      	movs	r2, #12
 80073b6:	5ea3      	ldrsh	r3, [r4, r2]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d0f1      	beq.n	80073a0 <_fflush_r+0xc>
 80073bc:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80073be:	07d2      	lsls	r2, r2, #31
 80073c0:	d404      	bmi.n	80073cc <_fflush_r+0x38>
 80073c2:	059b      	lsls	r3, r3, #22
 80073c4:	d402      	bmi.n	80073cc <_fflush_r+0x38>
 80073c6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80073c8:	f7fe fac7 	bl	800595a <__retarget_lock_acquire_recursive>
 80073cc:	0028      	movs	r0, r5
 80073ce:	0021      	movs	r1, r4
 80073d0:	f7ff ff5a 	bl	8007288 <__sflush_r>
 80073d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80073d6:	0005      	movs	r5, r0
 80073d8:	07db      	lsls	r3, r3, #31
 80073da:	d4e2      	bmi.n	80073a2 <_fflush_r+0xe>
 80073dc:	89a3      	ldrh	r3, [r4, #12]
 80073de:	059b      	lsls	r3, r3, #22
 80073e0:	d4df      	bmi.n	80073a2 <_fflush_r+0xe>
 80073e2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80073e4:	f7fe faba 	bl	800595c <__retarget_lock_release_recursive>
 80073e8:	e7db      	b.n	80073a2 <_fflush_r+0xe>

080073ea <memmove>:
 80073ea:	b510      	push	{r4, lr}
 80073ec:	4288      	cmp	r0, r1
 80073ee:	d806      	bhi.n	80073fe <memmove+0x14>
 80073f0:	2300      	movs	r3, #0
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d008      	beq.n	8007408 <memmove+0x1e>
 80073f6:	5ccc      	ldrb	r4, [r1, r3]
 80073f8:	54c4      	strb	r4, [r0, r3]
 80073fa:	3301      	adds	r3, #1
 80073fc:	e7f9      	b.n	80073f2 <memmove+0x8>
 80073fe:	188b      	adds	r3, r1, r2
 8007400:	4298      	cmp	r0, r3
 8007402:	d2f5      	bcs.n	80073f0 <memmove+0x6>
 8007404:	3a01      	subs	r2, #1
 8007406:	d200      	bcs.n	800740a <memmove+0x20>
 8007408:	bd10      	pop	{r4, pc}
 800740a:	5c8b      	ldrb	r3, [r1, r2]
 800740c:	5483      	strb	r3, [r0, r2]
 800740e:	e7f9      	b.n	8007404 <memmove+0x1a>

08007410 <_sbrk_r>:
 8007410:	2300      	movs	r3, #0
 8007412:	b570      	push	{r4, r5, r6, lr}
 8007414:	4d06      	ldr	r5, [pc, #24]	@ (8007430 <_sbrk_r+0x20>)
 8007416:	0004      	movs	r4, r0
 8007418:	0008      	movs	r0, r1
 800741a:	602b      	str	r3, [r5, #0]
 800741c:	f7fb faee 	bl	80029fc <_sbrk>
 8007420:	1c43      	adds	r3, r0, #1
 8007422:	d103      	bne.n	800742c <_sbrk_r+0x1c>
 8007424:	682b      	ldr	r3, [r5, #0]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d000      	beq.n	800742c <_sbrk_r+0x1c>
 800742a:	6023      	str	r3, [r4, #0]
 800742c:	bd70      	pop	{r4, r5, r6, pc}
 800742e:	46c0      	nop			@ (mov r8, r8)
 8007430:	200003fc 	.word	0x200003fc

08007434 <memcpy>:
 8007434:	2300      	movs	r3, #0
 8007436:	b510      	push	{r4, lr}
 8007438:	429a      	cmp	r2, r3
 800743a:	d100      	bne.n	800743e <memcpy+0xa>
 800743c:	bd10      	pop	{r4, pc}
 800743e:	5ccc      	ldrb	r4, [r1, r3]
 8007440:	54c4      	strb	r4, [r0, r3]
 8007442:	3301      	adds	r3, #1
 8007444:	e7f8      	b.n	8007438 <memcpy+0x4>
	...

08007448 <__assert_func>:
 8007448:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800744a:	0014      	movs	r4, r2
 800744c:	001a      	movs	r2, r3
 800744e:	4b09      	ldr	r3, [pc, #36]	@ (8007474 <__assert_func+0x2c>)
 8007450:	0005      	movs	r5, r0
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	000e      	movs	r6, r1
 8007456:	68d8      	ldr	r0, [r3, #12]
 8007458:	4b07      	ldr	r3, [pc, #28]	@ (8007478 <__assert_func+0x30>)
 800745a:	2c00      	cmp	r4, #0
 800745c:	d101      	bne.n	8007462 <__assert_func+0x1a>
 800745e:	4b07      	ldr	r3, [pc, #28]	@ (800747c <__assert_func+0x34>)
 8007460:	001c      	movs	r4, r3
 8007462:	4907      	ldr	r1, [pc, #28]	@ (8007480 <__assert_func+0x38>)
 8007464:	9301      	str	r3, [sp, #4]
 8007466:	9402      	str	r4, [sp, #8]
 8007468:	002b      	movs	r3, r5
 800746a:	9600      	str	r6, [sp, #0]
 800746c:	f000 f886 	bl	800757c <fiprintf>
 8007470:	f000 f894 	bl	800759c <abort>
 8007474:	20000018 	.word	0x20000018
 8007478:	08007e1b 	.word	0x08007e1b
 800747c:	08007e56 	.word	0x08007e56
 8007480:	08007e28 	.word	0x08007e28

08007484 <_calloc_r>:
 8007484:	b570      	push	{r4, r5, r6, lr}
 8007486:	0c0b      	lsrs	r3, r1, #16
 8007488:	0c15      	lsrs	r5, r2, #16
 800748a:	2b00      	cmp	r3, #0
 800748c:	d11e      	bne.n	80074cc <_calloc_r+0x48>
 800748e:	2d00      	cmp	r5, #0
 8007490:	d10c      	bne.n	80074ac <_calloc_r+0x28>
 8007492:	b289      	uxth	r1, r1
 8007494:	b294      	uxth	r4, r2
 8007496:	434c      	muls	r4, r1
 8007498:	0021      	movs	r1, r4
 800749a:	f7ff f963 	bl	8006764 <_malloc_r>
 800749e:	1e05      	subs	r5, r0, #0
 80074a0:	d01a      	beq.n	80074d8 <_calloc_r+0x54>
 80074a2:	0022      	movs	r2, r4
 80074a4:	2100      	movs	r1, #0
 80074a6:	f7fe f9d3 	bl	8005850 <memset>
 80074aa:	e016      	b.n	80074da <_calloc_r+0x56>
 80074ac:	1c2b      	adds	r3, r5, #0
 80074ae:	1c0c      	adds	r4, r1, #0
 80074b0:	b289      	uxth	r1, r1
 80074b2:	b292      	uxth	r2, r2
 80074b4:	434a      	muls	r2, r1
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	b2a1      	uxth	r1, r4
 80074ba:	4359      	muls	r1, r3
 80074bc:	0c14      	lsrs	r4, r2, #16
 80074be:	190c      	adds	r4, r1, r4
 80074c0:	0c23      	lsrs	r3, r4, #16
 80074c2:	d107      	bne.n	80074d4 <_calloc_r+0x50>
 80074c4:	0424      	lsls	r4, r4, #16
 80074c6:	b292      	uxth	r2, r2
 80074c8:	4314      	orrs	r4, r2
 80074ca:	e7e5      	b.n	8007498 <_calloc_r+0x14>
 80074cc:	2d00      	cmp	r5, #0
 80074ce:	d101      	bne.n	80074d4 <_calloc_r+0x50>
 80074d0:	1c14      	adds	r4, r2, #0
 80074d2:	e7ed      	b.n	80074b0 <_calloc_r+0x2c>
 80074d4:	230c      	movs	r3, #12
 80074d6:	6003      	str	r3, [r0, #0]
 80074d8:	2500      	movs	r5, #0
 80074da:	0028      	movs	r0, r5
 80074dc:	bd70      	pop	{r4, r5, r6, pc}

080074de <__ascii_mbtowc>:
 80074de:	b082      	sub	sp, #8
 80074e0:	2900      	cmp	r1, #0
 80074e2:	d100      	bne.n	80074e6 <__ascii_mbtowc+0x8>
 80074e4:	a901      	add	r1, sp, #4
 80074e6:	1e10      	subs	r0, r2, #0
 80074e8:	d006      	beq.n	80074f8 <__ascii_mbtowc+0x1a>
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d006      	beq.n	80074fc <__ascii_mbtowc+0x1e>
 80074ee:	7813      	ldrb	r3, [r2, #0]
 80074f0:	600b      	str	r3, [r1, #0]
 80074f2:	7810      	ldrb	r0, [r2, #0]
 80074f4:	1e43      	subs	r3, r0, #1
 80074f6:	4198      	sbcs	r0, r3
 80074f8:	b002      	add	sp, #8
 80074fa:	4770      	bx	lr
 80074fc:	2002      	movs	r0, #2
 80074fe:	4240      	negs	r0, r0
 8007500:	e7fa      	b.n	80074f8 <__ascii_mbtowc+0x1a>

08007502 <_realloc_r>:
 8007502:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007504:	0006      	movs	r6, r0
 8007506:	000c      	movs	r4, r1
 8007508:	0015      	movs	r5, r2
 800750a:	2900      	cmp	r1, #0
 800750c:	d105      	bne.n	800751a <_realloc_r+0x18>
 800750e:	0011      	movs	r1, r2
 8007510:	f7ff f928 	bl	8006764 <_malloc_r>
 8007514:	0004      	movs	r4, r0
 8007516:	0020      	movs	r0, r4
 8007518:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800751a:	2a00      	cmp	r2, #0
 800751c:	d103      	bne.n	8007526 <_realloc_r+0x24>
 800751e:	f7ff f8ab 	bl	8006678 <_free_r>
 8007522:	2400      	movs	r4, #0
 8007524:	e7f7      	b.n	8007516 <_realloc_r+0x14>
 8007526:	f000 f840 	bl	80075aa <_malloc_usable_size_r>
 800752a:	0007      	movs	r7, r0
 800752c:	4285      	cmp	r5, r0
 800752e:	d802      	bhi.n	8007536 <_realloc_r+0x34>
 8007530:	0843      	lsrs	r3, r0, #1
 8007532:	42ab      	cmp	r3, r5
 8007534:	d3ef      	bcc.n	8007516 <_realloc_r+0x14>
 8007536:	0029      	movs	r1, r5
 8007538:	0030      	movs	r0, r6
 800753a:	f7ff f913 	bl	8006764 <_malloc_r>
 800753e:	9001      	str	r0, [sp, #4]
 8007540:	2800      	cmp	r0, #0
 8007542:	d0ee      	beq.n	8007522 <_realloc_r+0x20>
 8007544:	002a      	movs	r2, r5
 8007546:	42bd      	cmp	r5, r7
 8007548:	d900      	bls.n	800754c <_realloc_r+0x4a>
 800754a:	003a      	movs	r2, r7
 800754c:	0021      	movs	r1, r4
 800754e:	9801      	ldr	r0, [sp, #4]
 8007550:	f7ff ff70 	bl	8007434 <memcpy>
 8007554:	0021      	movs	r1, r4
 8007556:	0030      	movs	r0, r6
 8007558:	f7ff f88e 	bl	8006678 <_free_r>
 800755c:	9c01      	ldr	r4, [sp, #4]
 800755e:	e7da      	b.n	8007516 <_realloc_r+0x14>

08007560 <__ascii_wctomb>:
 8007560:	0003      	movs	r3, r0
 8007562:	1e08      	subs	r0, r1, #0
 8007564:	d005      	beq.n	8007572 <__ascii_wctomb+0x12>
 8007566:	2aff      	cmp	r2, #255	@ 0xff
 8007568:	d904      	bls.n	8007574 <__ascii_wctomb+0x14>
 800756a:	228a      	movs	r2, #138	@ 0x8a
 800756c:	2001      	movs	r0, #1
 800756e:	601a      	str	r2, [r3, #0]
 8007570:	4240      	negs	r0, r0
 8007572:	4770      	bx	lr
 8007574:	2001      	movs	r0, #1
 8007576:	700a      	strb	r2, [r1, #0]
 8007578:	e7fb      	b.n	8007572 <__ascii_wctomb+0x12>
	...

0800757c <fiprintf>:
 800757c:	b40e      	push	{r1, r2, r3}
 800757e:	b517      	push	{r0, r1, r2, r4, lr}
 8007580:	4c05      	ldr	r4, [pc, #20]	@ (8007598 <fiprintf+0x1c>)
 8007582:	ab05      	add	r3, sp, #20
 8007584:	cb04      	ldmia	r3!, {r2}
 8007586:	0001      	movs	r1, r0
 8007588:	6820      	ldr	r0, [r4, #0]
 800758a:	9301      	str	r3, [sp, #4]
 800758c:	f000 f83c 	bl	8007608 <_vfiprintf_r>
 8007590:	bc1e      	pop	{r1, r2, r3, r4}
 8007592:	bc08      	pop	{r3}
 8007594:	b003      	add	sp, #12
 8007596:	4718      	bx	r3
 8007598:	20000018 	.word	0x20000018

0800759c <abort>:
 800759c:	2006      	movs	r0, #6
 800759e:	b510      	push	{r4, lr}
 80075a0:	f000 fa18 	bl	80079d4 <raise>
 80075a4:	2001      	movs	r0, #1
 80075a6:	f7fb f9b6 	bl	8002916 <_exit>

080075aa <_malloc_usable_size_r>:
 80075aa:	1f0b      	subs	r3, r1, #4
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	1f18      	subs	r0, r3, #4
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	da01      	bge.n	80075b8 <_malloc_usable_size_r+0xe>
 80075b4:	580b      	ldr	r3, [r1, r0]
 80075b6:	18c0      	adds	r0, r0, r3
 80075b8:	4770      	bx	lr

080075ba <__sfputc_r>:
 80075ba:	6893      	ldr	r3, [r2, #8]
 80075bc:	b510      	push	{r4, lr}
 80075be:	3b01      	subs	r3, #1
 80075c0:	6093      	str	r3, [r2, #8]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	da04      	bge.n	80075d0 <__sfputc_r+0x16>
 80075c6:	6994      	ldr	r4, [r2, #24]
 80075c8:	42a3      	cmp	r3, r4
 80075ca:	db07      	blt.n	80075dc <__sfputc_r+0x22>
 80075cc:	290a      	cmp	r1, #10
 80075ce:	d005      	beq.n	80075dc <__sfputc_r+0x22>
 80075d0:	6813      	ldr	r3, [r2, #0]
 80075d2:	1c58      	adds	r0, r3, #1
 80075d4:	6010      	str	r0, [r2, #0]
 80075d6:	7019      	strb	r1, [r3, #0]
 80075d8:	0008      	movs	r0, r1
 80075da:	bd10      	pop	{r4, pc}
 80075dc:	f000 f930 	bl	8007840 <__swbuf_r>
 80075e0:	0001      	movs	r1, r0
 80075e2:	e7f9      	b.n	80075d8 <__sfputc_r+0x1e>

080075e4 <__sfputs_r>:
 80075e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075e6:	0006      	movs	r6, r0
 80075e8:	000f      	movs	r7, r1
 80075ea:	0014      	movs	r4, r2
 80075ec:	18d5      	adds	r5, r2, r3
 80075ee:	42ac      	cmp	r4, r5
 80075f0:	d101      	bne.n	80075f6 <__sfputs_r+0x12>
 80075f2:	2000      	movs	r0, #0
 80075f4:	e007      	b.n	8007606 <__sfputs_r+0x22>
 80075f6:	7821      	ldrb	r1, [r4, #0]
 80075f8:	003a      	movs	r2, r7
 80075fa:	0030      	movs	r0, r6
 80075fc:	f7ff ffdd 	bl	80075ba <__sfputc_r>
 8007600:	3401      	adds	r4, #1
 8007602:	1c43      	adds	r3, r0, #1
 8007604:	d1f3      	bne.n	80075ee <__sfputs_r+0xa>
 8007606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007608 <_vfiprintf_r>:
 8007608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800760a:	b0a1      	sub	sp, #132	@ 0x84
 800760c:	000f      	movs	r7, r1
 800760e:	0015      	movs	r5, r2
 8007610:	001e      	movs	r6, r3
 8007612:	9003      	str	r0, [sp, #12]
 8007614:	2800      	cmp	r0, #0
 8007616:	d004      	beq.n	8007622 <_vfiprintf_r+0x1a>
 8007618:	6a03      	ldr	r3, [r0, #32]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d101      	bne.n	8007622 <_vfiprintf_r+0x1a>
 800761e:	f7fe f877 	bl	8005710 <__sinit>
 8007622:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007624:	07db      	lsls	r3, r3, #31
 8007626:	d405      	bmi.n	8007634 <_vfiprintf_r+0x2c>
 8007628:	89bb      	ldrh	r3, [r7, #12]
 800762a:	059b      	lsls	r3, r3, #22
 800762c:	d402      	bmi.n	8007634 <_vfiprintf_r+0x2c>
 800762e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8007630:	f7fe f993 	bl	800595a <__retarget_lock_acquire_recursive>
 8007634:	89bb      	ldrh	r3, [r7, #12]
 8007636:	071b      	lsls	r3, r3, #28
 8007638:	d502      	bpl.n	8007640 <_vfiprintf_r+0x38>
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d113      	bne.n	8007668 <_vfiprintf_r+0x60>
 8007640:	0039      	movs	r1, r7
 8007642:	9803      	ldr	r0, [sp, #12]
 8007644:	f000 f93e 	bl	80078c4 <__swsetup_r>
 8007648:	2800      	cmp	r0, #0
 800764a:	d00d      	beq.n	8007668 <_vfiprintf_r+0x60>
 800764c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800764e:	07db      	lsls	r3, r3, #31
 8007650:	d503      	bpl.n	800765a <_vfiprintf_r+0x52>
 8007652:	2001      	movs	r0, #1
 8007654:	4240      	negs	r0, r0
 8007656:	b021      	add	sp, #132	@ 0x84
 8007658:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800765a:	89bb      	ldrh	r3, [r7, #12]
 800765c:	059b      	lsls	r3, r3, #22
 800765e:	d4f8      	bmi.n	8007652 <_vfiprintf_r+0x4a>
 8007660:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8007662:	f7fe f97b 	bl	800595c <__retarget_lock_release_recursive>
 8007666:	e7f4      	b.n	8007652 <_vfiprintf_r+0x4a>
 8007668:	2300      	movs	r3, #0
 800766a:	ac08      	add	r4, sp, #32
 800766c:	6163      	str	r3, [r4, #20]
 800766e:	3320      	adds	r3, #32
 8007670:	7663      	strb	r3, [r4, #25]
 8007672:	3310      	adds	r3, #16
 8007674:	76a3      	strb	r3, [r4, #26]
 8007676:	9607      	str	r6, [sp, #28]
 8007678:	002e      	movs	r6, r5
 800767a:	7833      	ldrb	r3, [r6, #0]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d001      	beq.n	8007684 <_vfiprintf_r+0x7c>
 8007680:	2b25      	cmp	r3, #37	@ 0x25
 8007682:	d148      	bne.n	8007716 <_vfiprintf_r+0x10e>
 8007684:	1b73      	subs	r3, r6, r5
 8007686:	9305      	str	r3, [sp, #20]
 8007688:	42ae      	cmp	r6, r5
 800768a:	d00b      	beq.n	80076a4 <_vfiprintf_r+0x9c>
 800768c:	002a      	movs	r2, r5
 800768e:	0039      	movs	r1, r7
 8007690:	9803      	ldr	r0, [sp, #12]
 8007692:	f7ff ffa7 	bl	80075e4 <__sfputs_r>
 8007696:	3001      	adds	r0, #1
 8007698:	d100      	bne.n	800769c <_vfiprintf_r+0x94>
 800769a:	e0ae      	b.n	80077fa <_vfiprintf_r+0x1f2>
 800769c:	6963      	ldr	r3, [r4, #20]
 800769e:	9a05      	ldr	r2, [sp, #20]
 80076a0:	189b      	adds	r3, r3, r2
 80076a2:	6163      	str	r3, [r4, #20]
 80076a4:	7833      	ldrb	r3, [r6, #0]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d100      	bne.n	80076ac <_vfiprintf_r+0xa4>
 80076aa:	e0a6      	b.n	80077fa <_vfiprintf_r+0x1f2>
 80076ac:	2201      	movs	r2, #1
 80076ae:	2300      	movs	r3, #0
 80076b0:	4252      	negs	r2, r2
 80076b2:	6062      	str	r2, [r4, #4]
 80076b4:	a904      	add	r1, sp, #16
 80076b6:	3254      	adds	r2, #84	@ 0x54
 80076b8:	1852      	adds	r2, r2, r1
 80076ba:	1c75      	adds	r5, r6, #1
 80076bc:	6023      	str	r3, [r4, #0]
 80076be:	60e3      	str	r3, [r4, #12]
 80076c0:	60a3      	str	r3, [r4, #8]
 80076c2:	7013      	strb	r3, [r2, #0]
 80076c4:	65a3      	str	r3, [r4, #88]	@ 0x58
 80076c6:	4b59      	ldr	r3, [pc, #356]	@ (800782c <_vfiprintf_r+0x224>)
 80076c8:	2205      	movs	r2, #5
 80076ca:	0018      	movs	r0, r3
 80076cc:	7829      	ldrb	r1, [r5, #0]
 80076ce:	9305      	str	r3, [sp, #20]
 80076d0:	f7fe f945 	bl	800595e <memchr>
 80076d4:	1c6e      	adds	r6, r5, #1
 80076d6:	2800      	cmp	r0, #0
 80076d8:	d11f      	bne.n	800771a <_vfiprintf_r+0x112>
 80076da:	6822      	ldr	r2, [r4, #0]
 80076dc:	06d3      	lsls	r3, r2, #27
 80076de:	d504      	bpl.n	80076ea <_vfiprintf_r+0xe2>
 80076e0:	2353      	movs	r3, #83	@ 0x53
 80076e2:	a904      	add	r1, sp, #16
 80076e4:	185b      	adds	r3, r3, r1
 80076e6:	2120      	movs	r1, #32
 80076e8:	7019      	strb	r1, [r3, #0]
 80076ea:	0713      	lsls	r3, r2, #28
 80076ec:	d504      	bpl.n	80076f8 <_vfiprintf_r+0xf0>
 80076ee:	2353      	movs	r3, #83	@ 0x53
 80076f0:	a904      	add	r1, sp, #16
 80076f2:	185b      	adds	r3, r3, r1
 80076f4:	212b      	movs	r1, #43	@ 0x2b
 80076f6:	7019      	strb	r1, [r3, #0]
 80076f8:	782b      	ldrb	r3, [r5, #0]
 80076fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80076fc:	d016      	beq.n	800772c <_vfiprintf_r+0x124>
 80076fe:	002e      	movs	r6, r5
 8007700:	2100      	movs	r1, #0
 8007702:	200a      	movs	r0, #10
 8007704:	68e3      	ldr	r3, [r4, #12]
 8007706:	7832      	ldrb	r2, [r6, #0]
 8007708:	1c75      	adds	r5, r6, #1
 800770a:	3a30      	subs	r2, #48	@ 0x30
 800770c:	2a09      	cmp	r2, #9
 800770e:	d950      	bls.n	80077b2 <_vfiprintf_r+0x1aa>
 8007710:	2900      	cmp	r1, #0
 8007712:	d111      	bne.n	8007738 <_vfiprintf_r+0x130>
 8007714:	e017      	b.n	8007746 <_vfiprintf_r+0x13e>
 8007716:	3601      	adds	r6, #1
 8007718:	e7af      	b.n	800767a <_vfiprintf_r+0x72>
 800771a:	9b05      	ldr	r3, [sp, #20]
 800771c:	6822      	ldr	r2, [r4, #0]
 800771e:	1ac0      	subs	r0, r0, r3
 8007720:	2301      	movs	r3, #1
 8007722:	4083      	lsls	r3, r0
 8007724:	4313      	orrs	r3, r2
 8007726:	0035      	movs	r5, r6
 8007728:	6023      	str	r3, [r4, #0]
 800772a:	e7cc      	b.n	80076c6 <_vfiprintf_r+0xbe>
 800772c:	9b07      	ldr	r3, [sp, #28]
 800772e:	1d19      	adds	r1, r3, #4
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	9107      	str	r1, [sp, #28]
 8007734:	2b00      	cmp	r3, #0
 8007736:	db01      	blt.n	800773c <_vfiprintf_r+0x134>
 8007738:	930b      	str	r3, [sp, #44]	@ 0x2c
 800773a:	e004      	b.n	8007746 <_vfiprintf_r+0x13e>
 800773c:	425b      	negs	r3, r3
 800773e:	60e3      	str	r3, [r4, #12]
 8007740:	2302      	movs	r3, #2
 8007742:	4313      	orrs	r3, r2
 8007744:	6023      	str	r3, [r4, #0]
 8007746:	7833      	ldrb	r3, [r6, #0]
 8007748:	2b2e      	cmp	r3, #46	@ 0x2e
 800774a:	d10c      	bne.n	8007766 <_vfiprintf_r+0x15e>
 800774c:	7873      	ldrb	r3, [r6, #1]
 800774e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007750:	d134      	bne.n	80077bc <_vfiprintf_r+0x1b4>
 8007752:	9b07      	ldr	r3, [sp, #28]
 8007754:	3602      	adds	r6, #2
 8007756:	1d1a      	adds	r2, r3, #4
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	9207      	str	r2, [sp, #28]
 800775c:	2b00      	cmp	r3, #0
 800775e:	da01      	bge.n	8007764 <_vfiprintf_r+0x15c>
 8007760:	2301      	movs	r3, #1
 8007762:	425b      	negs	r3, r3
 8007764:	9309      	str	r3, [sp, #36]	@ 0x24
 8007766:	4d32      	ldr	r5, [pc, #200]	@ (8007830 <_vfiprintf_r+0x228>)
 8007768:	2203      	movs	r2, #3
 800776a:	0028      	movs	r0, r5
 800776c:	7831      	ldrb	r1, [r6, #0]
 800776e:	f7fe f8f6 	bl	800595e <memchr>
 8007772:	2800      	cmp	r0, #0
 8007774:	d006      	beq.n	8007784 <_vfiprintf_r+0x17c>
 8007776:	2340      	movs	r3, #64	@ 0x40
 8007778:	1b40      	subs	r0, r0, r5
 800777a:	4083      	lsls	r3, r0
 800777c:	6822      	ldr	r2, [r4, #0]
 800777e:	3601      	adds	r6, #1
 8007780:	4313      	orrs	r3, r2
 8007782:	6023      	str	r3, [r4, #0]
 8007784:	7831      	ldrb	r1, [r6, #0]
 8007786:	2206      	movs	r2, #6
 8007788:	482a      	ldr	r0, [pc, #168]	@ (8007834 <_vfiprintf_r+0x22c>)
 800778a:	1c75      	adds	r5, r6, #1
 800778c:	7621      	strb	r1, [r4, #24]
 800778e:	f7fe f8e6 	bl	800595e <memchr>
 8007792:	2800      	cmp	r0, #0
 8007794:	d040      	beq.n	8007818 <_vfiprintf_r+0x210>
 8007796:	4b28      	ldr	r3, [pc, #160]	@ (8007838 <_vfiprintf_r+0x230>)
 8007798:	2b00      	cmp	r3, #0
 800779a:	d122      	bne.n	80077e2 <_vfiprintf_r+0x1da>
 800779c:	2207      	movs	r2, #7
 800779e:	9b07      	ldr	r3, [sp, #28]
 80077a0:	3307      	adds	r3, #7
 80077a2:	4393      	bics	r3, r2
 80077a4:	3308      	adds	r3, #8
 80077a6:	9307      	str	r3, [sp, #28]
 80077a8:	6963      	ldr	r3, [r4, #20]
 80077aa:	9a04      	ldr	r2, [sp, #16]
 80077ac:	189b      	adds	r3, r3, r2
 80077ae:	6163      	str	r3, [r4, #20]
 80077b0:	e762      	b.n	8007678 <_vfiprintf_r+0x70>
 80077b2:	4343      	muls	r3, r0
 80077b4:	002e      	movs	r6, r5
 80077b6:	2101      	movs	r1, #1
 80077b8:	189b      	adds	r3, r3, r2
 80077ba:	e7a4      	b.n	8007706 <_vfiprintf_r+0xfe>
 80077bc:	2300      	movs	r3, #0
 80077be:	200a      	movs	r0, #10
 80077c0:	0019      	movs	r1, r3
 80077c2:	3601      	adds	r6, #1
 80077c4:	6063      	str	r3, [r4, #4]
 80077c6:	7832      	ldrb	r2, [r6, #0]
 80077c8:	1c75      	adds	r5, r6, #1
 80077ca:	3a30      	subs	r2, #48	@ 0x30
 80077cc:	2a09      	cmp	r2, #9
 80077ce:	d903      	bls.n	80077d8 <_vfiprintf_r+0x1d0>
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d0c8      	beq.n	8007766 <_vfiprintf_r+0x15e>
 80077d4:	9109      	str	r1, [sp, #36]	@ 0x24
 80077d6:	e7c6      	b.n	8007766 <_vfiprintf_r+0x15e>
 80077d8:	4341      	muls	r1, r0
 80077da:	002e      	movs	r6, r5
 80077dc:	2301      	movs	r3, #1
 80077de:	1889      	adds	r1, r1, r2
 80077e0:	e7f1      	b.n	80077c6 <_vfiprintf_r+0x1be>
 80077e2:	aa07      	add	r2, sp, #28
 80077e4:	9200      	str	r2, [sp, #0]
 80077e6:	0021      	movs	r1, r4
 80077e8:	003a      	movs	r2, r7
 80077ea:	4b14      	ldr	r3, [pc, #80]	@ (800783c <_vfiprintf_r+0x234>)
 80077ec:	9803      	ldr	r0, [sp, #12]
 80077ee:	f7fd fb43 	bl	8004e78 <_printf_float>
 80077f2:	9004      	str	r0, [sp, #16]
 80077f4:	9b04      	ldr	r3, [sp, #16]
 80077f6:	3301      	adds	r3, #1
 80077f8:	d1d6      	bne.n	80077a8 <_vfiprintf_r+0x1a0>
 80077fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80077fc:	07db      	lsls	r3, r3, #31
 80077fe:	d405      	bmi.n	800780c <_vfiprintf_r+0x204>
 8007800:	89bb      	ldrh	r3, [r7, #12]
 8007802:	059b      	lsls	r3, r3, #22
 8007804:	d402      	bmi.n	800780c <_vfiprintf_r+0x204>
 8007806:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8007808:	f7fe f8a8 	bl	800595c <__retarget_lock_release_recursive>
 800780c:	89bb      	ldrh	r3, [r7, #12]
 800780e:	065b      	lsls	r3, r3, #25
 8007810:	d500      	bpl.n	8007814 <_vfiprintf_r+0x20c>
 8007812:	e71e      	b.n	8007652 <_vfiprintf_r+0x4a>
 8007814:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8007816:	e71e      	b.n	8007656 <_vfiprintf_r+0x4e>
 8007818:	aa07      	add	r2, sp, #28
 800781a:	9200      	str	r2, [sp, #0]
 800781c:	0021      	movs	r1, r4
 800781e:	003a      	movs	r2, r7
 8007820:	4b06      	ldr	r3, [pc, #24]	@ (800783c <_vfiprintf_r+0x234>)
 8007822:	9803      	ldr	r0, [sp, #12]
 8007824:	f7fd fdd6 	bl	80053d4 <_printf_i>
 8007828:	e7e3      	b.n	80077f2 <_vfiprintf_r+0x1ea>
 800782a:	46c0      	nop			@ (mov r8, r8)
 800782c:	08007e00 	.word	0x08007e00
 8007830:	08007e06 	.word	0x08007e06
 8007834:	08007e0a 	.word	0x08007e0a
 8007838:	08004e79 	.word	0x08004e79
 800783c:	080075e5 	.word	0x080075e5

08007840 <__swbuf_r>:
 8007840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007842:	0006      	movs	r6, r0
 8007844:	000d      	movs	r5, r1
 8007846:	0014      	movs	r4, r2
 8007848:	2800      	cmp	r0, #0
 800784a:	d004      	beq.n	8007856 <__swbuf_r+0x16>
 800784c:	6a03      	ldr	r3, [r0, #32]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d101      	bne.n	8007856 <__swbuf_r+0x16>
 8007852:	f7fd ff5d 	bl	8005710 <__sinit>
 8007856:	69a3      	ldr	r3, [r4, #24]
 8007858:	60a3      	str	r3, [r4, #8]
 800785a:	89a3      	ldrh	r3, [r4, #12]
 800785c:	071b      	lsls	r3, r3, #28
 800785e:	d502      	bpl.n	8007866 <__swbuf_r+0x26>
 8007860:	6923      	ldr	r3, [r4, #16]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d109      	bne.n	800787a <__swbuf_r+0x3a>
 8007866:	0021      	movs	r1, r4
 8007868:	0030      	movs	r0, r6
 800786a:	f000 f82b 	bl	80078c4 <__swsetup_r>
 800786e:	2800      	cmp	r0, #0
 8007870:	d003      	beq.n	800787a <__swbuf_r+0x3a>
 8007872:	2501      	movs	r5, #1
 8007874:	426d      	negs	r5, r5
 8007876:	0028      	movs	r0, r5
 8007878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800787a:	6923      	ldr	r3, [r4, #16]
 800787c:	6820      	ldr	r0, [r4, #0]
 800787e:	b2ef      	uxtb	r7, r5
 8007880:	1ac0      	subs	r0, r0, r3
 8007882:	6963      	ldr	r3, [r4, #20]
 8007884:	b2ed      	uxtb	r5, r5
 8007886:	4283      	cmp	r3, r0
 8007888:	dc05      	bgt.n	8007896 <__swbuf_r+0x56>
 800788a:	0021      	movs	r1, r4
 800788c:	0030      	movs	r0, r6
 800788e:	f7ff fd81 	bl	8007394 <_fflush_r>
 8007892:	2800      	cmp	r0, #0
 8007894:	d1ed      	bne.n	8007872 <__swbuf_r+0x32>
 8007896:	68a3      	ldr	r3, [r4, #8]
 8007898:	3001      	adds	r0, #1
 800789a:	3b01      	subs	r3, #1
 800789c:	60a3      	str	r3, [r4, #8]
 800789e:	6823      	ldr	r3, [r4, #0]
 80078a0:	1c5a      	adds	r2, r3, #1
 80078a2:	6022      	str	r2, [r4, #0]
 80078a4:	701f      	strb	r7, [r3, #0]
 80078a6:	6963      	ldr	r3, [r4, #20]
 80078a8:	4283      	cmp	r3, r0
 80078aa:	d004      	beq.n	80078b6 <__swbuf_r+0x76>
 80078ac:	89a3      	ldrh	r3, [r4, #12]
 80078ae:	07db      	lsls	r3, r3, #31
 80078b0:	d5e1      	bpl.n	8007876 <__swbuf_r+0x36>
 80078b2:	2d0a      	cmp	r5, #10
 80078b4:	d1df      	bne.n	8007876 <__swbuf_r+0x36>
 80078b6:	0021      	movs	r1, r4
 80078b8:	0030      	movs	r0, r6
 80078ba:	f7ff fd6b 	bl	8007394 <_fflush_r>
 80078be:	2800      	cmp	r0, #0
 80078c0:	d0d9      	beq.n	8007876 <__swbuf_r+0x36>
 80078c2:	e7d6      	b.n	8007872 <__swbuf_r+0x32>

080078c4 <__swsetup_r>:
 80078c4:	4b2d      	ldr	r3, [pc, #180]	@ (800797c <__swsetup_r+0xb8>)
 80078c6:	b570      	push	{r4, r5, r6, lr}
 80078c8:	0005      	movs	r5, r0
 80078ca:	6818      	ldr	r0, [r3, #0]
 80078cc:	000c      	movs	r4, r1
 80078ce:	2800      	cmp	r0, #0
 80078d0:	d004      	beq.n	80078dc <__swsetup_r+0x18>
 80078d2:	6a03      	ldr	r3, [r0, #32]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d101      	bne.n	80078dc <__swsetup_r+0x18>
 80078d8:	f7fd ff1a 	bl	8005710 <__sinit>
 80078dc:	230c      	movs	r3, #12
 80078de:	5ee2      	ldrsh	r2, [r4, r3]
 80078e0:	0713      	lsls	r3, r2, #28
 80078e2:	d423      	bmi.n	800792c <__swsetup_r+0x68>
 80078e4:	06d3      	lsls	r3, r2, #27
 80078e6:	d407      	bmi.n	80078f8 <__swsetup_r+0x34>
 80078e8:	2309      	movs	r3, #9
 80078ea:	602b      	str	r3, [r5, #0]
 80078ec:	2340      	movs	r3, #64	@ 0x40
 80078ee:	2001      	movs	r0, #1
 80078f0:	4313      	orrs	r3, r2
 80078f2:	81a3      	strh	r3, [r4, #12]
 80078f4:	4240      	negs	r0, r0
 80078f6:	e03a      	b.n	800796e <__swsetup_r+0xaa>
 80078f8:	0752      	lsls	r2, r2, #29
 80078fa:	d513      	bpl.n	8007924 <__swsetup_r+0x60>
 80078fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80078fe:	2900      	cmp	r1, #0
 8007900:	d008      	beq.n	8007914 <__swsetup_r+0x50>
 8007902:	0023      	movs	r3, r4
 8007904:	3344      	adds	r3, #68	@ 0x44
 8007906:	4299      	cmp	r1, r3
 8007908:	d002      	beq.n	8007910 <__swsetup_r+0x4c>
 800790a:	0028      	movs	r0, r5
 800790c:	f7fe feb4 	bl	8006678 <_free_r>
 8007910:	2300      	movs	r3, #0
 8007912:	6363      	str	r3, [r4, #52]	@ 0x34
 8007914:	2224      	movs	r2, #36	@ 0x24
 8007916:	89a3      	ldrh	r3, [r4, #12]
 8007918:	4393      	bics	r3, r2
 800791a:	81a3      	strh	r3, [r4, #12]
 800791c:	2300      	movs	r3, #0
 800791e:	6063      	str	r3, [r4, #4]
 8007920:	6923      	ldr	r3, [r4, #16]
 8007922:	6023      	str	r3, [r4, #0]
 8007924:	2308      	movs	r3, #8
 8007926:	89a2      	ldrh	r2, [r4, #12]
 8007928:	4313      	orrs	r3, r2
 800792a:	81a3      	strh	r3, [r4, #12]
 800792c:	6923      	ldr	r3, [r4, #16]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d10b      	bne.n	800794a <__swsetup_r+0x86>
 8007932:	21a0      	movs	r1, #160	@ 0xa0
 8007934:	2280      	movs	r2, #128	@ 0x80
 8007936:	89a3      	ldrh	r3, [r4, #12]
 8007938:	0089      	lsls	r1, r1, #2
 800793a:	0092      	lsls	r2, r2, #2
 800793c:	400b      	ands	r3, r1
 800793e:	4293      	cmp	r3, r2
 8007940:	d003      	beq.n	800794a <__swsetup_r+0x86>
 8007942:	0021      	movs	r1, r4
 8007944:	0028      	movs	r0, r5
 8007946:	f000 f88f 	bl	8007a68 <__smakebuf_r>
 800794a:	230c      	movs	r3, #12
 800794c:	5ee2      	ldrsh	r2, [r4, r3]
 800794e:	2101      	movs	r1, #1
 8007950:	0013      	movs	r3, r2
 8007952:	400b      	ands	r3, r1
 8007954:	420a      	tst	r2, r1
 8007956:	d00b      	beq.n	8007970 <__swsetup_r+0xac>
 8007958:	2300      	movs	r3, #0
 800795a:	60a3      	str	r3, [r4, #8]
 800795c:	6963      	ldr	r3, [r4, #20]
 800795e:	425b      	negs	r3, r3
 8007960:	61a3      	str	r3, [r4, #24]
 8007962:	2000      	movs	r0, #0
 8007964:	6923      	ldr	r3, [r4, #16]
 8007966:	4283      	cmp	r3, r0
 8007968:	d101      	bne.n	800796e <__swsetup_r+0xaa>
 800796a:	0613      	lsls	r3, r2, #24
 800796c:	d4be      	bmi.n	80078ec <__swsetup_r+0x28>
 800796e:	bd70      	pop	{r4, r5, r6, pc}
 8007970:	0791      	lsls	r1, r2, #30
 8007972:	d400      	bmi.n	8007976 <__swsetup_r+0xb2>
 8007974:	6963      	ldr	r3, [r4, #20]
 8007976:	60a3      	str	r3, [r4, #8]
 8007978:	e7f3      	b.n	8007962 <__swsetup_r+0x9e>
 800797a:	46c0      	nop			@ (mov r8, r8)
 800797c:	20000018 	.word	0x20000018

08007980 <_raise_r>:
 8007980:	b570      	push	{r4, r5, r6, lr}
 8007982:	0004      	movs	r4, r0
 8007984:	000d      	movs	r5, r1
 8007986:	291f      	cmp	r1, #31
 8007988:	d904      	bls.n	8007994 <_raise_r+0x14>
 800798a:	2316      	movs	r3, #22
 800798c:	6003      	str	r3, [r0, #0]
 800798e:	2001      	movs	r0, #1
 8007990:	4240      	negs	r0, r0
 8007992:	bd70      	pop	{r4, r5, r6, pc}
 8007994:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8007996:	2b00      	cmp	r3, #0
 8007998:	d004      	beq.n	80079a4 <_raise_r+0x24>
 800799a:	008a      	lsls	r2, r1, #2
 800799c:	189b      	adds	r3, r3, r2
 800799e:	681a      	ldr	r2, [r3, #0]
 80079a0:	2a00      	cmp	r2, #0
 80079a2:	d108      	bne.n	80079b6 <_raise_r+0x36>
 80079a4:	0020      	movs	r0, r4
 80079a6:	f000 f831 	bl	8007a0c <_getpid_r>
 80079aa:	002a      	movs	r2, r5
 80079ac:	0001      	movs	r1, r0
 80079ae:	0020      	movs	r0, r4
 80079b0:	f000 f81a 	bl	80079e8 <_kill_r>
 80079b4:	e7ed      	b.n	8007992 <_raise_r+0x12>
 80079b6:	2a01      	cmp	r2, #1
 80079b8:	d009      	beq.n	80079ce <_raise_r+0x4e>
 80079ba:	1c51      	adds	r1, r2, #1
 80079bc:	d103      	bne.n	80079c6 <_raise_r+0x46>
 80079be:	2316      	movs	r3, #22
 80079c0:	6003      	str	r3, [r0, #0]
 80079c2:	2001      	movs	r0, #1
 80079c4:	e7e5      	b.n	8007992 <_raise_r+0x12>
 80079c6:	2100      	movs	r1, #0
 80079c8:	0028      	movs	r0, r5
 80079ca:	6019      	str	r1, [r3, #0]
 80079cc:	4790      	blx	r2
 80079ce:	2000      	movs	r0, #0
 80079d0:	e7df      	b.n	8007992 <_raise_r+0x12>
	...

080079d4 <raise>:
 80079d4:	b510      	push	{r4, lr}
 80079d6:	4b03      	ldr	r3, [pc, #12]	@ (80079e4 <raise+0x10>)
 80079d8:	0001      	movs	r1, r0
 80079da:	6818      	ldr	r0, [r3, #0]
 80079dc:	f7ff ffd0 	bl	8007980 <_raise_r>
 80079e0:	bd10      	pop	{r4, pc}
 80079e2:	46c0      	nop			@ (mov r8, r8)
 80079e4:	20000018 	.word	0x20000018

080079e8 <_kill_r>:
 80079e8:	2300      	movs	r3, #0
 80079ea:	b570      	push	{r4, r5, r6, lr}
 80079ec:	4d06      	ldr	r5, [pc, #24]	@ (8007a08 <_kill_r+0x20>)
 80079ee:	0004      	movs	r4, r0
 80079f0:	0008      	movs	r0, r1
 80079f2:	0011      	movs	r1, r2
 80079f4:	602b      	str	r3, [r5, #0]
 80079f6:	f7fa ff7e 	bl	80028f6 <_kill>
 80079fa:	1c43      	adds	r3, r0, #1
 80079fc:	d103      	bne.n	8007a06 <_kill_r+0x1e>
 80079fe:	682b      	ldr	r3, [r5, #0]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d000      	beq.n	8007a06 <_kill_r+0x1e>
 8007a04:	6023      	str	r3, [r4, #0]
 8007a06:	bd70      	pop	{r4, r5, r6, pc}
 8007a08:	200003fc 	.word	0x200003fc

08007a0c <_getpid_r>:
 8007a0c:	b510      	push	{r4, lr}
 8007a0e:	f7fa ff6c 	bl	80028ea <_getpid>
 8007a12:	bd10      	pop	{r4, pc}

08007a14 <__swhatbuf_r>:
 8007a14:	b570      	push	{r4, r5, r6, lr}
 8007a16:	000e      	movs	r6, r1
 8007a18:	001d      	movs	r5, r3
 8007a1a:	230e      	movs	r3, #14
 8007a1c:	5ec9      	ldrsh	r1, [r1, r3]
 8007a1e:	0014      	movs	r4, r2
 8007a20:	b096      	sub	sp, #88	@ 0x58
 8007a22:	2900      	cmp	r1, #0
 8007a24:	da0c      	bge.n	8007a40 <__swhatbuf_r+0x2c>
 8007a26:	89b2      	ldrh	r2, [r6, #12]
 8007a28:	2380      	movs	r3, #128	@ 0x80
 8007a2a:	0011      	movs	r1, r2
 8007a2c:	4019      	ands	r1, r3
 8007a2e:	421a      	tst	r2, r3
 8007a30:	d114      	bne.n	8007a5c <__swhatbuf_r+0x48>
 8007a32:	2380      	movs	r3, #128	@ 0x80
 8007a34:	00db      	lsls	r3, r3, #3
 8007a36:	2000      	movs	r0, #0
 8007a38:	6029      	str	r1, [r5, #0]
 8007a3a:	6023      	str	r3, [r4, #0]
 8007a3c:	b016      	add	sp, #88	@ 0x58
 8007a3e:	bd70      	pop	{r4, r5, r6, pc}
 8007a40:	466a      	mov	r2, sp
 8007a42:	f000 f853 	bl	8007aec <_fstat_r>
 8007a46:	2800      	cmp	r0, #0
 8007a48:	dbed      	blt.n	8007a26 <__swhatbuf_r+0x12>
 8007a4a:	23f0      	movs	r3, #240	@ 0xf0
 8007a4c:	9901      	ldr	r1, [sp, #4]
 8007a4e:	021b      	lsls	r3, r3, #8
 8007a50:	4019      	ands	r1, r3
 8007a52:	4b04      	ldr	r3, [pc, #16]	@ (8007a64 <__swhatbuf_r+0x50>)
 8007a54:	18c9      	adds	r1, r1, r3
 8007a56:	424b      	negs	r3, r1
 8007a58:	4159      	adcs	r1, r3
 8007a5a:	e7ea      	b.n	8007a32 <__swhatbuf_r+0x1e>
 8007a5c:	2100      	movs	r1, #0
 8007a5e:	2340      	movs	r3, #64	@ 0x40
 8007a60:	e7e9      	b.n	8007a36 <__swhatbuf_r+0x22>
 8007a62:	46c0      	nop			@ (mov r8, r8)
 8007a64:	ffffe000 	.word	0xffffe000

08007a68 <__smakebuf_r>:
 8007a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a6a:	2602      	movs	r6, #2
 8007a6c:	898b      	ldrh	r3, [r1, #12]
 8007a6e:	0005      	movs	r5, r0
 8007a70:	000c      	movs	r4, r1
 8007a72:	b085      	sub	sp, #20
 8007a74:	4233      	tst	r3, r6
 8007a76:	d007      	beq.n	8007a88 <__smakebuf_r+0x20>
 8007a78:	0023      	movs	r3, r4
 8007a7a:	3347      	adds	r3, #71	@ 0x47
 8007a7c:	6023      	str	r3, [r4, #0]
 8007a7e:	6123      	str	r3, [r4, #16]
 8007a80:	2301      	movs	r3, #1
 8007a82:	6163      	str	r3, [r4, #20]
 8007a84:	b005      	add	sp, #20
 8007a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a88:	ab03      	add	r3, sp, #12
 8007a8a:	aa02      	add	r2, sp, #8
 8007a8c:	f7ff ffc2 	bl	8007a14 <__swhatbuf_r>
 8007a90:	9f02      	ldr	r7, [sp, #8]
 8007a92:	9001      	str	r0, [sp, #4]
 8007a94:	0039      	movs	r1, r7
 8007a96:	0028      	movs	r0, r5
 8007a98:	f7fe fe64 	bl	8006764 <_malloc_r>
 8007a9c:	2800      	cmp	r0, #0
 8007a9e:	d108      	bne.n	8007ab2 <__smakebuf_r+0x4a>
 8007aa0:	220c      	movs	r2, #12
 8007aa2:	5ea3      	ldrsh	r3, [r4, r2]
 8007aa4:	059a      	lsls	r2, r3, #22
 8007aa6:	d4ed      	bmi.n	8007a84 <__smakebuf_r+0x1c>
 8007aa8:	2203      	movs	r2, #3
 8007aaa:	4393      	bics	r3, r2
 8007aac:	431e      	orrs	r6, r3
 8007aae:	81a6      	strh	r6, [r4, #12]
 8007ab0:	e7e2      	b.n	8007a78 <__smakebuf_r+0x10>
 8007ab2:	2380      	movs	r3, #128	@ 0x80
 8007ab4:	89a2      	ldrh	r2, [r4, #12]
 8007ab6:	6020      	str	r0, [r4, #0]
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	81a3      	strh	r3, [r4, #12]
 8007abc:	9b03      	ldr	r3, [sp, #12]
 8007abe:	6120      	str	r0, [r4, #16]
 8007ac0:	6167      	str	r7, [r4, #20]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d00c      	beq.n	8007ae0 <__smakebuf_r+0x78>
 8007ac6:	0028      	movs	r0, r5
 8007ac8:	230e      	movs	r3, #14
 8007aca:	5ee1      	ldrsh	r1, [r4, r3]
 8007acc:	f000 f820 	bl	8007b10 <_isatty_r>
 8007ad0:	2800      	cmp	r0, #0
 8007ad2:	d005      	beq.n	8007ae0 <__smakebuf_r+0x78>
 8007ad4:	2303      	movs	r3, #3
 8007ad6:	89a2      	ldrh	r2, [r4, #12]
 8007ad8:	439a      	bics	r2, r3
 8007ada:	3b02      	subs	r3, #2
 8007adc:	4313      	orrs	r3, r2
 8007ade:	81a3      	strh	r3, [r4, #12]
 8007ae0:	89a3      	ldrh	r3, [r4, #12]
 8007ae2:	9a01      	ldr	r2, [sp, #4]
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	81a3      	strh	r3, [r4, #12]
 8007ae8:	e7cc      	b.n	8007a84 <__smakebuf_r+0x1c>
	...

08007aec <_fstat_r>:
 8007aec:	2300      	movs	r3, #0
 8007aee:	b570      	push	{r4, r5, r6, lr}
 8007af0:	4d06      	ldr	r5, [pc, #24]	@ (8007b0c <_fstat_r+0x20>)
 8007af2:	0004      	movs	r4, r0
 8007af4:	0008      	movs	r0, r1
 8007af6:	0011      	movs	r1, r2
 8007af8:	602b      	str	r3, [r5, #0]
 8007afa:	f7fa ff5c 	bl	80029b6 <_fstat>
 8007afe:	1c43      	adds	r3, r0, #1
 8007b00:	d103      	bne.n	8007b0a <_fstat_r+0x1e>
 8007b02:	682b      	ldr	r3, [r5, #0]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d000      	beq.n	8007b0a <_fstat_r+0x1e>
 8007b08:	6023      	str	r3, [r4, #0]
 8007b0a:	bd70      	pop	{r4, r5, r6, pc}
 8007b0c:	200003fc 	.word	0x200003fc

08007b10 <_isatty_r>:
 8007b10:	2300      	movs	r3, #0
 8007b12:	b570      	push	{r4, r5, r6, lr}
 8007b14:	4d06      	ldr	r5, [pc, #24]	@ (8007b30 <_isatty_r+0x20>)
 8007b16:	0004      	movs	r4, r0
 8007b18:	0008      	movs	r0, r1
 8007b1a:	602b      	str	r3, [r5, #0]
 8007b1c:	f7fa ff59 	bl	80029d2 <_isatty>
 8007b20:	1c43      	adds	r3, r0, #1
 8007b22:	d103      	bne.n	8007b2c <_isatty_r+0x1c>
 8007b24:	682b      	ldr	r3, [r5, #0]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d000      	beq.n	8007b2c <_isatty_r+0x1c>
 8007b2a:	6023      	str	r3, [r4, #0]
 8007b2c:	bd70      	pop	{r4, r5, r6, pc}
 8007b2e:	46c0      	nop			@ (mov r8, r8)
 8007b30:	200003fc 	.word	0x200003fc

08007b34 <_init>:
 8007b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b36:	46c0      	nop			@ (mov r8, r8)
 8007b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b3a:	bc08      	pop	{r3}
 8007b3c:	469e      	mov	lr, r3
 8007b3e:	4770      	bx	lr

08007b40 <_fini>:
 8007b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b42:	46c0      	nop			@ (mov r8, r8)
 8007b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b46:	bc08      	pop	{r3}
 8007b48:	469e      	mov	lr, r3
 8007b4a:	4770      	bx	lr
