
SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000324c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800330c  0800330c  0001330c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003390  08003390  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003390  08003390  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003390  08003390  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003390  08003390  00013390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003394  08003394  00013394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003398  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  20000070  08003408  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000190  08003408  00020190  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000091f3  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001470  00000000  00000000  0002928b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a0  00000000  00000000  0002a700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000718  00000000  00000000  0002aea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011dbf  00000000  00000000  0002b5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009c19  00000000  00000000  0003d377  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006b0b3  00000000  00000000  00046f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b2043  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e18  00000000  00000000  000b2094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080032f4 	.word	0x080032f4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080032f4 	.word	0x080032f4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000244:	b590      	push	{r4, r7, lr}
 8000246:	b08f      	sub	sp, #60	; 0x3c
 8000248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t buf[48];
	uint8_t raw_data = {0};
 800024a:	2337      	movs	r3, #55	; 0x37
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	2200      	movs	r2, #0
 8000250:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000252:	f000 fa67 	bl	8000724 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000256:	f000 f83f 	bl	80002d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800025a:	f000 f8e9 	bl	8000430 <MX_GPIO_Init>
  MX_SPI1_Init();
 800025e:	f000 f87b 	bl	8000358 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000262:	f000 f8b5 	bl	80003d0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  // Write high
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8000266:	2380      	movs	r3, #128	; 0x80
 8000268:	0119      	lsls	r1, r3, #4
 800026a:	2390      	movs	r3, #144	; 0x90
 800026c:	05db      	lsls	r3, r3, #23
 800026e:	2201      	movs	r2, #1
 8000270:	0018      	movs	r0, r3
 8000272:	f000 fd03 	bl	8000c7c <HAL_GPIO_WritePin>

	  // Receive
	  HAL_SPI_Receive(&hspi1, (uint8_t*)raw_data, 2, HAL_MAX_DELAY);
 8000276:	2437      	movs	r4, #55	; 0x37
 8000278:	193b      	adds	r3, r7, r4
 800027a:	781b      	ldrb	r3, [r3, #0]
 800027c:	0019      	movs	r1, r3
 800027e:	2301      	movs	r3, #1
 8000280:	425b      	negs	r3, r3
 8000282:	4812      	ldr	r0, [pc, #72]	; (80002cc <main+0x88>)
 8000284:	2202      	movs	r2, #2
 8000286:	f001 fa2d 	bl	80016e4 <HAL_SPI_Receive>

	  // Write low to reset
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800028a:	2380      	movs	r3, #128	; 0x80
 800028c:	0119      	lsls	r1, r3, #4
 800028e:	2390      	movs	r3, #144	; 0x90
 8000290:	05db      	lsls	r3, r3, #23
 8000292:	2200      	movs	r2, #0
 8000294:	0018      	movs	r0, r3
 8000296:	f000 fcf1 	bl	8000c7c <HAL_GPIO_WritePin>

    /* USER CODE BEGIN 3 */
	  sprintf((char*)buf, "ADC Reading | %uV |\r\n", raw_data);
 800029a:	193b      	adds	r3, r7, r4
 800029c:	781a      	ldrb	r2, [r3, #0]
 800029e:	490c      	ldr	r1, [pc, #48]	; (80002d0 <main+0x8c>)
 80002a0:	1d3b      	adds	r3, r7, #4
 80002a2:	0018      	movs	r0, r3
 80002a4:	f002 fbbc 	bl	8002a20 <siprintf>

	  HAL_UART_Transmit(&huart2, (uint8_t*)buf, strlen((char*)buf), HAL_MAX_DELAY);
 80002a8:	1d3b      	adds	r3, r7, #4
 80002aa:	0018      	movs	r0, r3
 80002ac:	f7ff ff2c 	bl	8000108 <strlen>
 80002b0:	0003      	movs	r3, r0
 80002b2:	b29a      	uxth	r2, r3
 80002b4:	2301      	movs	r3, #1
 80002b6:	425b      	negs	r3, r3
 80002b8:	1d39      	adds	r1, r7, #4
 80002ba:	4806      	ldr	r0, [pc, #24]	; (80002d4 <main+0x90>)
 80002bc:	f001 ff6e 	bl	800219c <HAL_UART_Transmit>
	  HAL_Delay(500);
 80002c0:	23fa      	movs	r3, #250	; 0xfa
 80002c2:	005b      	lsls	r3, r3, #1
 80002c4:	0018      	movs	r0, r3
 80002c6:	f000 fa91 	bl	80007ec <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80002ca:	e7cc      	b.n	8000266 <main+0x22>
 80002cc:	2000008c 	.word	0x2000008c
 80002d0:	0800330c 	.word	0x0800330c
 80002d4:	200000f0 	.word	0x200000f0

080002d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d8:	b590      	push	{r4, r7, lr}
 80002da:	b091      	sub	sp, #68	; 0x44
 80002dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002de:	2410      	movs	r4, #16
 80002e0:	193b      	adds	r3, r7, r4
 80002e2:	0018      	movs	r0, r3
 80002e4:	2330      	movs	r3, #48	; 0x30
 80002e6:	001a      	movs	r2, r3
 80002e8:	2100      	movs	r1, #0
 80002ea:	f002 fb91 	bl	8002a10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ee:	003b      	movs	r3, r7
 80002f0:	0018      	movs	r0, r3
 80002f2:	2310      	movs	r3, #16
 80002f4:	001a      	movs	r2, r3
 80002f6:	2100      	movs	r1, #0
 80002f8:	f002 fb8a 	bl	8002a10 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002fc:	0021      	movs	r1, r4
 80002fe:	187b      	adds	r3, r7, r1
 8000300:	2202      	movs	r2, #2
 8000302:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000304:	187b      	adds	r3, r7, r1
 8000306:	2201      	movs	r2, #1
 8000308:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800030a:	187b      	adds	r3, r7, r1
 800030c:	2210      	movs	r2, #16
 800030e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000310:	187b      	adds	r3, r7, r1
 8000312:	2200      	movs	r2, #0
 8000314:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000316:	187b      	adds	r3, r7, r1
 8000318:	0018      	movs	r0, r3
 800031a:	f000 fccd 	bl	8000cb8 <HAL_RCC_OscConfig>
 800031e:	1e03      	subs	r3, r0, #0
 8000320:	d001      	beq.n	8000326 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000322:	f000 f8bf 	bl	80004a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000326:	003b      	movs	r3, r7
 8000328:	2207      	movs	r2, #7
 800032a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800032c:	003b      	movs	r3, r7
 800032e:	2200      	movs	r2, #0
 8000330:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000332:	003b      	movs	r3, r7
 8000334:	2200      	movs	r2, #0
 8000336:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000338:	003b      	movs	r3, r7
 800033a:	2200      	movs	r2, #0
 800033c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800033e:	003b      	movs	r3, r7
 8000340:	2100      	movs	r1, #0
 8000342:	0018      	movs	r0, r3
 8000344:	f000 ffd2 	bl	80012ec <HAL_RCC_ClockConfig>
 8000348:	1e03      	subs	r3, r0, #0
 800034a:	d001      	beq.n	8000350 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800034c:	f000 f8aa 	bl	80004a4 <Error_Handler>
  }
}
 8000350:	46c0      	nop			; (mov r8, r8)
 8000352:	46bd      	mov	sp, r7
 8000354:	b011      	add	sp, #68	; 0x44
 8000356:	bd90      	pop	{r4, r7, pc}

08000358 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800035c:	4b1a      	ldr	r3, [pc, #104]	; (80003c8 <MX_SPI1_Init+0x70>)
 800035e:	4a1b      	ldr	r2, [pc, #108]	; (80003cc <MX_SPI1_Init+0x74>)
 8000360:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000362:	4b19      	ldr	r3, [pc, #100]	; (80003c8 <MX_SPI1_Init+0x70>)
 8000364:	2200      	movs	r2, #0
 8000366:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000368:	4b17      	ldr	r3, [pc, #92]	; (80003c8 <MX_SPI1_Init+0x70>)
 800036a:	2280      	movs	r2, #128	; 0x80
 800036c:	0212      	lsls	r2, r2, #8
 800036e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000370:	4b15      	ldr	r3, [pc, #84]	; (80003c8 <MX_SPI1_Init+0x70>)
 8000372:	22e0      	movs	r2, #224	; 0xe0
 8000374:	00d2      	lsls	r2, r2, #3
 8000376:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000378:	4b13      	ldr	r3, [pc, #76]	; (80003c8 <MX_SPI1_Init+0x70>)
 800037a:	2200      	movs	r2, #0
 800037c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800037e:	4b12      	ldr	r3, [pc, #72]	; (80003c8 <MX_SPI1_Init+0x70>)
 8000380:	2200      	movs	r2, #0
 8000382:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000384:	4b10      	ldr	r3, [pc, #64]	; (80003c8 <MX_SPI1_Init+0x70>)
 8000386:	2280      	movs	r2, #128	; 0x80
 8000388:	0092      	lsls	r2, r2, #2
 800038a:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800038c:	4b0e      	ldr	r3, [pc, #56]	; (80003c8 <MX_SPI1_Init+0x70>)
 800038e:	2200      	movs	r2, #0
 8000390:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000392:	4b0d      	ldr	r3, [pc, #52]	; (80003c8 <MX_SPI1_Init+0x70>)
 8000394:	2200      	movs	r2, #0
 8000396:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000398:	4b0b      	ldr	r3, [pc, #44]	; (80003c8 <MX_SPI1_Init+0x70>)
 800039a:	2200      	movs	r2, #0
 800039c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800039e:	4b0a      	ldr	r3, [pc, #40]	; (80003c8 <MX_SPI1_Init+0x70>)
 80003a0:	2207      	movs	r2, #7
 80003a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003a4:	4b08      	ldr	r3, [pc, #32]	; (80003c8 <MX_SPI1_Init+0x70>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80003aa:	4b07      	ldr	r3, [pc, #28]	; (80003c8 <MX_SPI1_Init+0x70>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003b0:	4b05      	ldr	r3, [pc, #20]	; (80003c8 <MX_SPI1_Init+0x70>)
 80003b2:	0018      	movs	r0, r3
 80003b4:	f001 f8de 	bl	8001574 <HAL_SPI_Init>
 80003b8:	1e03      	subs	r3, r0, #0
 80003ba:	d001      	beq.n	80003c0 <MX_SPI1_Init+0x68>
  {
    Error_Handler();
 80003bc:	f000 f872 	bl	80004a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003c0:	46c0      	nop			; (mov r8, r8)
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	46c0      	nop			; (mov r8, r8)
 80003c8:	2000008c 	.word	0x2000008c
 80003cc:	40013000 	.word	0x40013000

080003d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003d4:	4b14      	ldr	r3, [pc, #80]	; (8000428 <MX_USART2_UART_Init+0x58>)
 80003d6:	4a15      	ldr	r2, [pc, #84]	; (800042c <MX_USART2_UART_Init+0x5c>)
 80003d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80003da:	4b13      	ldr	r3, [pc, #76]	; (8000428 <MX_USART2_UART_Init+0x58>)
 80003dc:	22e1      	movs	r2, #225	; 0xe1
 80003de:	0252      	lsls	r2, r2, #9
 80003e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003e2:	4b11      	ldr	r3, [pc, #68]	; (8000428 <MX_USART2_UART_Init+0x58>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003e8:	4b0f      	ldr	r3, [pc, #60]	; (8000428 <MX_USART2_UART_Init+0x58>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003ee:	4b0e      	ldr	r3, [pc, #56]	; (8000428 <MX_USART2_UART_Init+0x58>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003f4:	4b0c      	ldr	r3, [pc, #48]	; (8000428 <MX_USART2_UART_Init+0x58>)
 80003f6:	220c      	movs	r2, #12
 80003f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003fa:	4b0b      	ldr	r3, [pc, #44]	; (8000428 <MX_USART2_UART_Init+0x58>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000400:	4b09      	ldr	r3, [pc, #36]	; (8000428 <MX_USART2_UART_Init+0x58>)
 8000402:	2200      	movs	r2, #0
 8000404:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000406:	4b08      	ldr	r3, [pc, #32]	; (8000428 <MX_USART2_UART_Init+0x58>)
 8000408:	2200      	movs	r2, #0
 800040a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800040c:	4b06      	ldr	r3, [pc, #24]	; (8000428 <MX_USART2_UART_Init+0x58>)
 800040e:	2200      	movs	r2, #0
 8000410:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000412:	4b05      	ldr	r3, [pc, #20]	; (8000428 <MX_USART2_UART_Init+0x58>)
 8000414:	0018      	movs	r0, r3
 8000416:	f001 fe6d 	bl	80020f4 <HAL_UART_Init>
 800041a:	1e03      	subs	r3, r0, #0
 800041c:	d001      	beq.n	8000422 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800041e:	f000 f841 	bl	80004a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}
 8000428:	200000f0 	.word	0x200000f0
 800042c:	40004400 	.word	0x40004400

08000430 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b086      	sub	sp, #24
 8000434:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000436:	1d3b      	adds	r3, r7, #4
 8000438:	0018      	movs	r0, r3
 800043a:	2314      	movs	r3, #20
 800043c:	001a      	movs	r2, r3
 800043e:	2100      	movs	r1, #0
 8000440:	f002 fae6 	bl	8002a10 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000444:	4b16      	ldr	r3, [pc, #88]	; (80004a0 <MX_GPIO_Init+0x70>)
 8000446:	695a      	ldr	r2, [r3, #20]
 8000448:	4b15      	ldr	r3, [pc, #84]	; (80004a0 <MX_GPIO_Init+0x70>)
 800044a:	2180      	movs	r1, #128	; 0x80
 800044c:	0289      	lsls	r1, r1, #10
 800044e:	430a      	orrs	r2, r1
 8000450:	615a      	str	r2, [r3, #20]
 8000452:	4b13      	ldr	r3, [pc, #76]	; (80004a0 <MX_GPIO_Init+0x70>)
 8000454:	695a      	ldr	r2, [r3, #20]
 8000456:	2380      	movs	r3, #128	; 0x80
 8000458:	029b      	lsls	r3, r3, #10
 800045a:	4013      	ands	r3, r2
 800045c:	603b      	str	r3, [r7, #0]
 800045e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000460:	2380      	movs	r3, #128	; 0x80
 8000462:	0119      	lsls	r1, r3, #4
 8000464:	2390      	movs	r3, #144	; 0x90
 8000466:	05db      	lsls	r3, r3, #23
 8000468:	2200      	movs	r2, #0
 800046a:	0018      	movs	r0, r3
 800046c:	f000 fc06 	bl	8000c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000470:	1d3b      	adds	r3, r7, #4
 8000472:	2280      	movs	r2, #128	; 0x80
 8000474:	0112      	lsls	r2, r2, #4
 8000476:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000478:	1d3b      	adds	r3, r7, #4
 800047a:	2201      	movs	r2, #1
 800047c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047e:	1d3b      	adds	r3, r7, #4
 8000480:	2200      	movs	r2, #0
 8000482:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000484:	1d3b      	adds	r3, r7, #4
 8000486:	2200      	movs	r2, #0
 8000488:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800048a:	1d3a      	adds	r2, r7, #4
 800048c:	2390      	movs	r3, #144	; 0x90
 800048e:	05db      	lsls	r3, r3, #23
 8000490:	0011      	movs	r1, r2
 8000492:	0018      	movs	r0, r3
 8000494:	f000 fa82 	bl	800099c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000498:	46c0      	nop			; (mov r8, r8)
 800049a:	46bd      	mov	sp, r7
 800049c:	b006      	add	sp, #24
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	40021000 	.word	0x40021000

080004a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004a8:	b672      	cpsid	i
}
 80004aa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004ac:	e7fe      	b.n	80004ac <Error_Handler+0x8>
	...

080004b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004b6:	4b0f      	ldr	r3, [pc, #60]	; (80004f4 <HAL_MspInit+0x44>)
 80004b8:	699a      	ldr	r2, [r3, #24]
 80004ba:	4b0e      	ldr	r3, [pc, #56]	; (80004f4 <HAL_MspInit+0x44>)
 80004bc:	2101      	movs	r1, #1
 80004be:	430a      	orrs	r2, r1
 80004c0:	619a      	str	r2, [r3, #24]
 80004c2:	4b0c      	ldr	r3, [pc, #48]	; (80004f4 <HAL_MspInit+0x44>)
 80004c4:	699b      	ldr	r3, [r3, #24]
 80004c6:	2201      	movs	r2, #1
 80004c8:	4013      	ands	r3, r2
 80004ca:	607b      	str	r3, [r7, #4]
 80004cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ce:	4b09      	ldr	r3, [pc, #36]	; (80004f4 <HAL_MspInit+0x44>)
 80004d0:	69da      	ldr	r2, [r3, #28]
 80004d2:	4b08      	ldr	r3, [pc, #32]	; (80004f4 <HAL_MspInit+0x44>)
 80004d4:	2180      	movs	r1, #128	; 0x80
 80004d6:	0549      	lsls	r1, r1, #21
 80004d8:	430a      	orrs	r2, r1
 80004da:	61da      	str	r2, [r3, #28]
 80004dc:	4b05      	ldr	r3, [pc, #20]	; (80004f4 <HAL_MspInit+0x44>)
 80004de:	69da      	ldr	r2, [r3, #28]
 80004e0:	2380      	movs	r3, #128	; 0x80
 80004e2:	055b      	lsls	r3, r3, #21
 80004e4:	4013      	ands	r3, r2
 80004e6:	603b      	str	r3, [r7, #0]
 80004e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	46bd      	mov	sp, r7
 80004ee:	b002      	add	sp, #8
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	40021000 	.word	0x40021000

080004f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80004f8:	b590      	push	{r4, r7, lr}
 80004fa:	b08b      	sub	sp, #44	; 0x2c
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000500:	2414      	movs	r4, #20
 8000502:	193b      	adds	r3, r7, r4
 8000504:	0018      	movs	r0, r3
 8000506:	2314      	movs	r3, #20
 8000508:	001a      	movs	r2, r3
 800050a:	2100      	movs	r1, #0
 800050c:	f002 fa80 	bl	8002a10 <memset>
  if(hspi->Instance==SPI1)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a1c      	ldr	r2, [pc, #112]	; (8000588 <HAL_SPI_MspInit+0x90>)
 8000516:	4293      	cmp	r3, r2
 8000518:	d132      	bne.n	8000580 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800051a:	4b1c      	ldr	r3, [pc, #112]	; (800058c <HAL_SPI_MspInit+0x94>)
 800051c:	699a      	ldr	r2, [r3, #24]
 800051e:	4b1b      	ldr	r3, [pc, #108]	; (800058c <HAL_SPI_MspInit+0x94>)
 8000520:	2180      	movs	r1, #128	; 0x80
 8000522:	0149      	lsls	r1, r1, #5
 8000524:	430a      	orrs	r2, r1
 8000526:	619a      	str	r2, [r3, #24]
 8000528:	4b18      	ldr	r3, [pc, #96]	; (800058c <HAL_SPI_MspInit+0x94>)
 800052a:	699a      	ldr	r2, [r3, #24]
 800052c:	2380      	movs	r3, #128	; 0x80
 800052e:	015b      	lsls	r3, r3, #5
 8000530:	4013      	ands	r3, r2
 8000532:	613b      	str	r3, [r7, #16]
 8000534:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000536:	4b15      	ldr	r3, [pc, #84]	; (800058c <HAL_SPI_MspInit+0x94>)
 8000538:	695a      	ldr	r2, [r3, #20]
 800053a:	4b14      	ldr	r3, [pc, #80]	; (800058c <HAL_SPI_MspInit+0x94>)
 800053c:	2180      	movs	r1, #128	; 0x80
 800053e:	0289      	lsls	r1, r1, #10
 8000540:	430a      	orrs	r2, r1
 8000542:	615a      	str	r2, [r3, #20]
 8000544:	4b11      	ldr	r3, [pc, #68]	; (800058c <HAL_SPI_MspInit+0x94>)
 8000546:	695a      	ldr	r2, [r3, #20]
 8000548:	2380      	movs	r3, #128	; 0x80
 800054a:	029b      	lsls	r3, r3, #10
 800054c:	4013      	ands	r3, r2
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000552:	0021      	movs	r1, r4
 8000554:	187b      	adds	r3, r7, r1
 8000556:	2260      	movs	r2, #96	; 0x60
 8000558:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800055a:	187b      	adds	r3, r7, r1
 800055c:	2202      	movs	r2, #2
 800055e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000560:	187b      	adds	r3, r7, r1
 8000562:	2200      	movs	r2, #0
 8000564:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000566:	187b      	adds	r3, r7, r1
 8000568:	2203      	movs	r2, #3
 800056a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800056c:	187b      	adds	r3, r7, r1
 800056e:	2200      	movs	r2, #0
 8000570:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000572:	187a      	adds	r2, r7, r1
 8000574:	2390      	movs	r3, #144	; 0x90
 8000576:	05db      	lsls	r3, r3, #23
 8000578:	0011      	movs	r1, r2
 800057a:	0018      	movs	r0, r3
 800057c:	f000 fa0e 	bl	800099c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000580:	46c0      	nop			; (mov r8, r8)
 8000582:	46bd      	mov	sp, r7
 8000584:	b00b      	add	sp, #44	; 0x2c
 8000586:	bd90      	pop	{r4, r7, pc}
 8000588:	40013000 	.word	0x40013000
 800058c:	40021000 	.word	0x40021000

08000590 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000590:	b590      	push	{r4, r7, lr}
 8000592:	b08b      	sub	sp, #44	; 0x2c
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000598:	2414      	movs	r4, #20
 800059a:	193b      	adds	r3, r7, r4
 800059c:	0018      	movs	r0, r3
 800059e:	2314      	movs	r3, #20
 80005a0:	001a      	movs	r2, r3
 80005a2:	2100      	movs	r1, #0
 80005a4:	f002 fa34 	bl	8002a10 <memset>
  if(huart->Instance==USART2)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a1c      	ldr	r2, [pc, #112]	; (8000620 <HAL_UART_MspInit+0x90>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d132      	bne.n	8000618 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005b2:	4b1c      	ldr	r3, [pc, #112]	; (8000624 <HAL_UART_MspInit+0x94>)
 80005b4:	69da      	ldr	r2, [r3, #28]
 80005b6:	4b1b      	ldr	r3, [pc, #108]	; (8000624 <HAL_UART_MspInit+0x94>)
 80005b8:	2180      	movs	r1, #128	; 0x80
 80005ba:	0289      	lsls	r1, r1, #10
 80005bc:	430a      	orrs	r2, r1
 80005be:	61da      	str	r2, [r3, #28]
 80005c0:	4b18      	ldr	r3, [pc, #96]	; (8000624 <HAL_UART_MspInit+0x94>)
 80005c2:	69da      	ldr	r2, [r3, #28]
 80005c4:	2380      	movs	r3, #128	; 0x80
 80005c6:	029b      	lsls	r3, r3, #10
 80005c8:	4013      	ands	r3, r2
 80005ca:	613b      	str	r3, [r7, #16]
 80005cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ce:	4b15      	ldr	r3, [pc, #84]	; (8000624 <HAL_UART_MspInit+0x94>)
 80005d0:	695a      	ldr	r2, [r3, #20]
 80005d2:	4b14      	ldr	r3, [pc, #80]	; (8000624 <HAL_UART_MspInit+0x94>)
 80005d4:	2180      	movs	r1, #128	; 0x80
 80005d6:	0289      	lsls	r1, r1, #10
 80005d8:	430a      	orrs	r2, r1
 80005da:	615a      	str	r2, [r3, #20]
 80005dc:	4b11      	ldr	r3, [pc, #68]	; (8000624 <HAL_UART_MspInit+0x94>)
 80005de:	695a      	ldr	r2, [r3, #20]
 80005e0:	2380      	movs	r3, #128	; 0x80
 80005e2:	029b      	lsls	r3, r3, #10
 80005e4:	4013      	ands	r3, r2
 80005e6:	60fb      	str	r3, [r7, #12]
 80005e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80005ea:	0021      	movs	r1, r4
 80005ec:	187b      	adds	r3, r7, r1
 80005ee:	220c      	movs	r2, #12
 80005f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005f2:	187b      	adds	r3, r7, r1
 80005f4:	2202      	movs	r2, #2
 80005f6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	2200      	movs	r2, #0
 80005fc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005fe:	187b      	adds	r3, r7, r1
 8000600:	2203      	movs	r2, #3
 8000602:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000604:	187b      	adds	r3, r7, r1
 8000606:	2201      	movs	r2, #1
 8000608:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800060a:	187a      	adds	r2, r7, r1
 800060c:	2390      	movs	r3, #144	; 0x90
 800060e:	05db      	lsls	r3, r3, #23
 8000610:	0011      	movs	r1, r2
 8000612:	0018      	movs	r0, r3
 8000614:	f000 f9c2 	bl	800099c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000618:	46c0      	nop			; (mov r8, r8)
 800061a:	46bd      	mov	sp, r7
 800061c:	b00b      	add	sp, #44	; 0x2c
 800061e:	bd90      	pop	{r4, r7, pc}
 8000620:	40004400 	.word	0x40004400
 8000624:	40021000 	.word	0x40021000

08000628 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800062c:	e7fe      	b.n	800062c <NMI_Handler+0x4>

0800062e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800062e:	b580      	push	{r7, lr}
 8000630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000632:	e7fe      	b.n	8000632 <HardFault_Handler+0x4>

08000634 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000638:	46c0      	nop			; (mov r8, r8)
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}

0800063e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800063e:	b580      	push	{r7, lr}
 8000640:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000642:	46c0      	nop			; (mov r8, r8)
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}

08000648 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800064c:	f000 f8b2 	bl	80007b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000650:	46c0      	nop			; (mov r8, r8)
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
	...

08000658 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b086      	sub	sp, #24
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000660:	4a14      	ldr	r2, [pc, #80]	; (80006b4 <_sbrk+0x5c>)
 8000662:	4b15      	ldr	r3, [pc, #84]	; (80006b8 <_sbrk+0x60>)
 8000664:	1ad3      	subs	r3, r2, r3
 8000666:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000668:	697b      	ldr	r3, [r7, #20]
 800066a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800066c:	4b13      	ldr	r3, [pc, #76]	; (80006bc <_sbrk+0x64>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d102      	bne.n	800067a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000674:	4b11      	ldr	r3, [pc, #68]	; (80006bc <_sbrk+0x64>)
 8000676:	4a12      	ldr	r2, [pc, #72]	; (80006c0 <_sbrk+0x68>)
 8000678:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800067a:	4b10      	ldr	r3, [pc, #64]	; (80006bc <_sbrk+0x64>)
 800067c:	681a      	ldr	r2, [r3, #0]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	18d3      	adds	r3, r2, r3
 8000682:	693a      	ldr	r2, [r7, #16]
 8000684:	429a      	cmp	r2, r3
 8000686:	d207      	bcs.n	8000698 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000688:	f002 f998 	bl	80029bc <__errno>
 800068c:	0003      	movs	r3, r0
 800068e:	220c      	movs	r2, #12
 8000690:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000692:	2301      	movs	r3, #1
 8000694:	425b      	negs	r3, r3
 8000696:	e009      	b.n	80006ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000698:	4b08      	ldr	r3, [pc, #32]	; (80006bc <_sbrk+0x64>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800069e:	4b07      	ldr	r3, [pc, #28]	; (80006bc <_sbrk+0x64>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	18d2      	adds	r2, r2, r3
 80006a6:	4b05      	ldr	r3, [pc, #20]	; (80006bc <_sbrk+0x64>)
 80006a8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80006aa:	68fb      	ldr	r3, [r7, #12]
}
 80006ac:	0018      	movs	r0, r3
 80006ae:	46bd      	mov	sp, r7
 80006b0:	b006      	add	sp, #24
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20002000 	.word	0x20002000
 80006b8:	00000400 	.word	0x00000400
 80006bc:	20000178 	.word	0x20000178
 80006c0:	20000190 	.word	0x20000190

080006c4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80006c8:	46c0      	nop			; (mov r8, r8)
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
	...

080006d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006d0:	480d      	ldr	r0, [pc, #52]	; (8000708 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006d2:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 80006d4:	f7ff fff6 	bl	80006c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006d8:	480c      	ldr	r0, [pc, #48]	; (800070c <LoopForever+0x6>)
  ldr r1, =_edata
 80006da:	490d      	ldr	r1, [pc, #52]	; (8000710 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006dc:	4a0d      	ldr	r2, [pc, #52]	; (8000714 <LoopForever+0xe>)
  movs r3, #0
 80006de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006e0:	e002      	b.n	80006e8 <LoopCopyDataInit>

080006e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006e6:	3304      	adds	r3, #4

080006e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006ec:	d3f9      	bcc.n	80006e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ee:	4a0a      	ldr	r2, [pc, #40]	; (8000718 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006f0:	4c0a      	ldr	r4, [pc, #40]	; (800071c <LoopForever+0x16>)
  movs r3, #0
 80006f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006f4:	e001      	b.n	80006fa <LoopFillZerobss>

080006f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006f8:	3204      	adds	r2, #4

080006fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006fc:	d3fb      	bcc.n	80006f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006fe:	f002 f963 	bl	80029c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000702:	f7ff fd9f 	bl	8000244 <main>

08000706 <LoopForever>:

LoopForever:
    b LoopForever
 8000706:	e7fe      	b.n	8000706 <LoopForever>
  ldr   r0, =_estack
 8000708:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800070c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000710:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000714:	08003398 	.word	0x08003398
  ldr r2, =_sbss
 8000718:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800071c:	20000190 	.word	0x20000190

08000720 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000720:	e7fe      	b.n	8000720 <ADC1_COMP_IRQHandler>
	...

08000724 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000728:	4b07      	ldr	r3, [pc, #28]	; (8000748 <HAL_Init+0x24>)
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <HAL_Init+0x24>)
 800072e:	2110      	movs	r1, #16
 8000730:	430a      	orrs	r2, r1
 8000732:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000734:	2003      	movs	r0, #3
 8000736:	f000 f809 	bl	800074c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800073a:	f7ff feb9 	bl	80004b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800073e:	2300      	movs	r3, #0
}
 8000740:	0018      	movs	r0, r3
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	40022000 	.word	0x40022000

0800074c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800074c:	b590      	push	{r4, r7, lr}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000754:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <HAL_InitTick+0x5c>)
 8000756:	681c      	ldr	r4, [r3, #0]
 8000758:	4b14      	ldr	r3, [pc, #80]	; (80007ac <HAL_InitTick+0x60>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	0019      	movs	r1, r3
 800075e:	23fa      	movs	r3, #250	; 0xfa
 8000760:	0098      	lsls	r0, r3, #2
 8000762:	f7ff fce3 	bl	800012c <__udivsi3>
 8000766:	0003      	movs	r3, r0
 8000768:	0019      	movs	r1, r3
 800076a:	0020      	movs	r0, r4
 800076c:	f7ff fcde 	bl	800012c <__udivsi3>
 8000770:	0003      	movs	r3, r0
 8000772:	0018      	movs	r0, r3
 8000774:	f000 f905 	bl	8000982 <HAL_SYSTICK_Config>
 8000778:	1e03      	subs	r3, r0, #0
 800077a:	d001      	beq.n	8000780 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800077c:	2301      	movs	r3, #1
 800077e:	e00f      	b.n	80007a0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2b03      	cmp	r3, #3
 8000784:	d80b      	bhi.n	800079e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000786:	6879      	ldr	r1, [r7, #4]
 8000788:	2301      	movs	r3, #1
 800078a:	425b      	negs	r3, r3
 800078c:	2200      	movs	r2, #0
 800078e:	0018      	movs	r0, r3
 8000790:	f000 f8e2 	bl	8000958 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <HAL_InitTick+0x64>)
 8000796:	687a      	ldr	r2, [r7, #4]
 8000798:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800079a:	2300      	movs	r3, #0
 800079c:	e000      	b.n	80007a0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800079e:	2301      	movs	r3, #1
}
 80007a0:	0018      	movs	r0, r3
 80007a2:	46bd      	mov	sp, r7
 80007a4:	b003      	add	sp, #12
 80007a6:	bd90      	pop	{r4, r7, pc}
 80007a8:	20000000 	.word	0x20000000
 80007ac:	20000008 	.word	0x20000008
 80007b0:	20000004 	.word	0x20000004

080007b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007b8:	4b05      	ldr	r3, [pc, #20]	; (80007d0 <HAL_IncTick+0x1c>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	001a      	movs	r2, r3
 80007be:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <HAL_IncTick+0x20>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	18d2      	adds	r2, r2, r3
 80007c4:	4b03      	ldr	r3, [pc, #12]	; (80007d4 <HAL_IncTick+0x20>)
 80007c6:	601a      	str	r2, [r3, #0]
}
 80007c8:	46c0      	nop			; (mov r8, r8)
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	46c0      	nop			; (mov r8, r8)
 80007d0:	20000008 	.word	0x20000008
 80007d4:	2000017c 	.word	0x2000017c

080007d8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  return uwTick;
 80007dc:	4b02      	ldr	r3, [pc, #8]	; (80007e8 <HAL_GetTick+0x10>)
 80007de:	681b      	ldr	r3, [r3, #0]
}
 80007e0:	0018      	movs	r0, r3
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	2000017c 	.word	0x2000017c

080007ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007f4:	f7ff fff0 	bl	80007d8 <HAL_GetTick>
 80007f8:	0003      	movs	r3, r0
 80007fa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	3301      	adds	r3, #1
 8000804:	d005      	beq.n	8000812 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000806:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <HAL_Delay+0x44>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	001a      	movs	r2, r3
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	189b      	adds	r3, r3, r2
 8000810:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	f7ff ffe0 	bl	80007d8 <HAL_GetTick>
 8000818:	0002      	movs	r2, r0
 800081a:	68bb      	ldr	r3, [r7, #8]
 800081c:	1ad3      	subs	r3, r2, r3
 800081e:	68fa      	ldr	r2, [r7, #12]
 8000820:	429a      	cmp	r2, r3
 8000822:	d8f7      	bhi.n	8000814 <HAL_Delay+0x28>
  {
  }
}
 8000824:	46c0      	nop			; (mov r8, r8)
 8000826:	46c0      	nop			; (mov r8, r8)
 8000828:	46bd      	mov	sp, r7
 800082a:	b004      	add	sp, #16
 800082c:	bd80      	pop	{r7, pc}
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	20000008 	.word	0x20000008

08000834 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000834:	b590      	push	{r4, r7, lr}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	0002      	movs	r2, r0
 800083c:	6039      	str	r1, [r7, #0]
 800083e:	1dfb      	adds	r3, r7, #7
 8000840:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000842:	1dfb      	adds	r3, r7, #7
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	2b7f      	cmp	r3, #127	; 0x7f
 8000848:	d828      	bhi.n	800089c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800084a:	4a2f      	ldr	r2, [pc, #188]	; (8000908 <__NVIC_SetPriority+0xd4>)
 800084c:	1dfb      	adds	r3, r7, #7
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	b25b      	sxtb	r3, r3
 8000852:	089b      	lsrs	r3, r3, #2
 8000854:	33c0      	adds	r3, #192	; 0xc0
 8000856:	009b      	lsls	r3, r3, #2
 8000858:	589b      	ldr	r3, [r3, r2]
 800085a:	1dfa      	adds	r2, r7, #7
 800085c:	7812      	ldrb	r2, [r2, #0]
 800085e:	0011      	movs	r1, r2
 8000860:	2203      	movs	r2, #3
 8000862:	400a      	ands	r2, r1
 8000864:	00d2      	lsls	r2, r2, #3
 8000866:	21ff      	movs	r1, #255	; 0xff
 8000868:	4091      	lsls	r1, r2
 800086a:	000a      	movs	r2, r1
 800086c:	43d2      	mvns	r2, r2
 800086e:	401a      	ands	r2, r3
 8000870:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	019b      	lsls	r3, r3, #6
 8000876:	22ff      	movs	r2, #255	; 0xff
 8000878:	401a      	ands	r2, r3
 800087a:	1dfb      	adds	r3, r7, #7
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	0018      	movs	r0, r3
 8000880:	2303      	movs	r3, #3
 8000882:	4003      	ands	r3, r0
 8000884:	00db      	lsls	r3, r3, #3
 8000886:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000888:	481f      	ldr	r0, [pc, #124]	; (8000908 <__NVIC_SetPriority+0xd4>)
 800088a:	1dfb      	adds	r3, r7, #7
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	b25b      	sxtb	r3, r3
 8000890:	089b      	lsrs	r3, r3, #2
 8000892:	430a      	orrs	r2, r1
 8000894:	33c0      	adds	r3, #192	; 0xc0
 8000896:	009b      	lsls	r3, r3, #2
 8000898:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800089a:	e031      	b.n	8000900 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800089c:	4a1b      	ldr	r2, [pc, #108]	; (800090c <__NVIC_SetPriority+0xd8>)
 800089e:	1dfb      	adds	r3, r7, #7
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	0019      	movs	r1, r3
 80008a4:	230f      	movs	r3, #15
 80008a6:	400b      	ands	r3, r1
 80008a8:	3b08      	subs	r3, #8
 80008aa:	089b      	lsrs	r3, r3, #2
 80008ac:	3306      	adds	r3, #6
 80008ae:	009b      	lsls	r3, r3, #2
 80008b0:	18d3      	adds	r3, r2, r3
 80008b2:	3304      	adds	r3, #4
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	1dfa      	adds	r2, r7, #7
 80008b8:	7812      	ldrb	r2, [r2, #0]
 80008ba:	0011      	movs	r1, r2
 80008bc:	2203      	movs	r2, #3
 80008be:	400a      	ands	r2, r1
 80008c0:	00d2      	lsls	r2, r2, #3
 80008c2:	21ff      	movs	r1, #255	; 0xff
 80008c4:	4091      	lsls	r1, r2
 80008c6:	000a      	movs	r2, r1
 80008c8:	43d2      	mvns	r2, r2
 80008ca:	401a      	ands	r2, r3
 80008cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	019b      	lsls	r3, r3, #6
 80008d2:	22ff      	movs	r2, #255	; 0xff
 80008d4:	401a      	ands	r2, r3
 80008d6:	1dfb      	adds	r3, r7, #7
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	0018      	movs	r0, r3
 80008dc:	2303      	movs	r3, #3
 80008de:	4003      	ands	r3, r0
 80008e0:	00db      	lsls	r3, r3, #3
 80008e2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008e4:	4809      	ldr	r0, [pc, #36]	; (800090c <__NVIC_SetPriority+0xd8>)
 80008e6:	1dfb      	adds	r3, r7, #7
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	001c      	movs	r4, r3
 80008ec:	230f      	movs	r3, #15
 80008ee:	4023      	ands	r3, r4
 80008f0:	3b08      	subs	r3, #8
 80008f2:	089b      	lsrs	r3, r3, #2
 80008f4:	430a      	orrs	r2, r1
 80008f6:	3306      	adds	r3, #6
 80008f8:	009b      	lsls	r3, r3, #2
 80008fa:	18c3      	adds	r3, r0, r3
 80008fc:	3304      	adds	r3, #4
 80008fe:	601a      	str	r2, [r3, #0]
}
 8000900:	46c0      	nop			; (mov r8, r8)
 8000902:	46bd      	mov	sp, r7
 8000904:	b003      	add	sp, #12
 8000906:	bd90      	pop	{r4, r7, pc}
 8000908:	e000e100 	.word	0xe000e100
 800090c:	e000ed00 	.word	0xe000ed00

08000910 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	1e5a      	subs	r2, r3, #1
 800091c:	2380      	movs	r3, #128	; 0x80
 800091e:	045b      	lsls	r3, r3, #17
 8000920:	429a      	cmp	r2, r3
 8000922:	d301      	bcc.n	8000928 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000924:	2301      	movs	r3, #1
 8000926:	e010      	b.n	800094a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000928:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <SysTick_Config+0x44>)
 800092a:	687a      	ldr	r2, [r7, #4]
 800092c:	3a01      	subs	r2, #1
 800092e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000930:	2301      	movs	r3, #1
 8000932:	425b      	negs	r3, r3
 8000934:	2103      	movs	r1, #3
 8000936:	0018      	movs	r0, r3
 8000938:	f7ff ff7c 	bl	8000834 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800093c:	4b05      	ldr	r3, [pc, #20]	; (8000954 <SysTick_Config+0x44>)
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000942:	4b04      	ldr	r3, [pc, #16]	; (8000954 <SysTick_Config+0x44>)
 8000944:	2207      	movs	r2, #7
 8000946:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000948:	2300      	movs	r3, #0
}
 800094a:	0018      	movs	r0, r3
 800094c:	46bd      	mov	sp, r7
 800094e:	b002      	add	sp, #8
 8000950:	bd80      	pop	{r7, pc}
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	e000e010 	.word	0xe000e010

08000958 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	60b9      	str	r1, [r7, #8]
 8000960:	607a      	str	r2, [r7, #4]
 8000962:	210f      	movs	r1, #15
 8000964:	187b      	adds	r3, r7, r1
 8000966:	1c02      	adds	r2, r0, #0
 8000968:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800096a:	68ba      	ldr	r2, [r7, #8]
 800096c:	187b      	adds	r3, r7, r1
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	b25b      	sxtb	r3, r3
 8000972:	0011      	movs	r1, r2
 8000974:	0018      	movs	r0, r3
 8000976:	f7ff ff5d 	bl	8000834 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	46bd      	mov	sp, r7
 800097e:	b004      	add	sp, #16
 8000980:	bd80      	pop	{r7, pc}

08000982 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	b082      	sub	sp, #8
 8000986:	af00      	add	r7, sp, #0
 8000988:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	0018      	movs	r0, r3
 800098e:	f7ff ffbf 	bl	8000910 <SysTick_Config>
 8000992:	0003      	movs	r3, r0
}
 8000994:	0018      	movs	r0, r3
 8000996:	46bd      	mov	sp, r7
 8000998:	b002      	add	sp, #8
 800099a:	bd80      	pop	{r7, pc}

0800099c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b086      	sub	sp, #24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009a6:	2300      	movs	r3, #0
 80009a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009aa:	e14f      	b.n	8000c4c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2101      	movs	r1, #1
 80009b2:	697a      	ldr	r2, [r7, #20]
 80009b4:	4091      	lsls	r1, r2
 80009b6:	000a      	movs	r2, r1
 80009b8:	4013      	ands	r3, r2
 80009ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d100      	bne.n	80009c4 <HAL_GPIO_Init+0x28>
 80009c2:	e140      	b.n	8000c46 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	2203      	movs	r2, #3
 80009ca:	4013      	ands	r3, r2
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d005      	beq.n	80009dc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	2203      	movs	r2, #3
 80009d6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80009d8:	2b02      	cmp	r3, #2
 80009da:	d130      	bne.n	8000a3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	689b      	ldr	r3, [r3, #8]
 80009e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	2203      	movs	r2, #3
 80009e8:	409a      	lsls	r2, r3
 80009ea:	0013      	movs	r3, r2
 80009ec:	43da      	mvns	r2, r3
 80009ee:	693b      	ldr	r3, [r7, #16]
 80009f0:	4013      	ands	r3, r2
 80009f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	68da      	ldr	r2, [r3, #12]
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	409a      	lsls	r2, r3
 80009fe:	0013      	movs	r3, r2
 8000a00:	693a      	ldr	r2, [r7, #16]
 8000a02:	4313      	orrs	r3, r2
 8000a04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	693a      	ldr	r2, [r7, #16]
 8000a0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a12:	2201      	movs	r2, #1
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	409a      	lsls	r2, r3
 8000a18:	0013      	movs	r3, r2
 8000a1a:	43da      	mvns	r2, r3
 8000a1c:	693b      	ldr	r3, [r7, #16]
 8000a1e:	4013      	ands	r3, r2
 8000a20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	091b      	lsrs	r3, r3, #4
 8000a28:	2201      	movs	r2, #1
 8000a2a:	401a      	ands	r2, r3
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	409a      	lsls	r2, r3
 8000a30:	0013      	movs	r3, r2
 8000a32:	693a      	ldr	r2, [r7, #16]
 8000a34:	4313      	orrs	r3, r2
 8000a36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	2203      	movs	r2, #3
 8000a44:	4013      	ands	r3, r2
 8000a46:	2b03      	cmp	r3, #3
 8000a48:	d017      	beq.n	8000a7a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	68db      	ldr	r3, [r3, #12]
 8000a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	2203      	movs	r2, #3
 8000a56:	409a      	lsls	r2, r3
 8000a58:	0013      	movs	r3, r2
 8000a5a:	43da      	mvns	r2, r3
 8000a5c:	693b      	ldr	r3, [r7, #16]
 8000a5e:	4013      	ands	r3, r2
 8000a60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	689a      	ldr	r2, [r3, #8]
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	409a      	lsls	r2, r3
 8000a6c:	0013      	movs	r3, r2
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	4313      	orrs	r3, r2
 8000a72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	2203      	movs	r2, #3
 8000a80:	4013      	ands	r3, r2
 8000a82:	2b02      	cmp	r3, #2
 8000a84:	d123      	bne.n	8000ace <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	08da      	lsrs	r2, r3, #3
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	3208      	adds	r2, #8
 8000a8e:	0092      	lsls	r2, r2, #2
 8000a90:	58d3      	ldr	r3, [r2, r3]
 8000a92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	2207      	movs	r2, #7
 8000a98:	4013      	ands	r3, r2
 8000a9a:	009b      	lsls	r3, r3, #2
 8000a9c:	220f      	movs	r2, #15
 8000a9e:	409a      	lsls	r2, r3
 8000aa0:	0013      	movs	r3, r2
 8000aa2:	43da      	mvns	r2, r3
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	691a      	ldr	r2, [r3, #16]
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	2107      	movs	r1, #7
 8000ab2:	400b      	ands	r3, r1
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	409a      	lsls	r2, r3
 8000ab8:	0013      	movs	r3, r2
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	08da      	lsrs	r2, r3, #3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	3208      	adds	r2, #8
 8000ac8:	0092      	lsls	r2, r2, #2
 8000aca:	6939      	ldr	r1, [r7, #16]
 8000acc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	2203      	movs	r2, #3
 8000ada:	409a      	lsls	r2, r3
 8000adc:	0013      	movs	r3, r2
 8000ade:	43da      	mvns	r2, r3
 8000ae0:	693b      	ldr	r3, [r7, #16]
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	2203      	movs	r2, #3
 8000aec:	401a      	ands	r2, r3
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	409a      	lsls	r2, r3
 8000af4:	0013      	movs	r3, r2
 8000af6:	693a      	ldr	r2, [r7, #16]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	685a      	ldr	r2, [r3, #4]
 8000b06:	23c0      	movs	r3, #192	; 0xc0
 8000b08:	029b      	lsls	r3, r3, #10
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	d100      	bne.n	8000b10 <HAL_GPIO_Init+0x174>
 8000b0e:	e09a      	b.n	8000c46 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b10:	4b54      	ldr	r3, [pc, #336]	; (8000c64 <HAL_GPIO_Init+0x2c8>)
 8000b12:	699a      	ldr	r2, [r3, #24]
 8000b14:	4b53      	ldr	r3, [pc, #332]	; (8000c64 <HAL_GPIO_Init+0x2c8>)
 8000b16:	2101      	movs	r1, #1
 8000b18:	430a      	orrs	r2, r1
 8000b1a:	619a      	str	r2, [r3, #24]
 8000b1c:	4b51      	ldr	r3, [pc, #324]	; (8000c64 <HAL_GPIO_Init+0x2c8>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	2201      	movs	r2, #1
 8000b22:	4013      	ands	r3, r2
 8000b24:	60bb      	str	r3, [r7, #8]
 8000b26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b28:	4a4f      	ldr	r2, [pc, #316]	; (8000c68 <HAL_GPIO_Init+0x2cc>)
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	089b      	lsrs	r3, r3, #2
 8000b2e:	3302      	adds	r3, #2
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	589b      	ldr	r3, [r3, r2]
 8000b34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	2203      	movs	r2, #3
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	220f      	movs	r2, #15
 8000b40:	409a      	lsls	r2, r3
 8000b42:	0013      	movs	r3, r2
 8000b44:	43da      	mvns	r2, r3
 8000b46:	693b      	ldr	r3, [r7, #16]
 8000b48:	4013      	ands	r3, r2
 8000b4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b4c:	687a      	ldr	r2, [r7, #4]
 8000b4e:	2390      	movs	r3, #144	; 0x90
 8000b50:	05db      	lsls	r3, r3, #23
 8000b52:	429a      	cmp	r2, r3
 8000b54:	d013      	beq.n	8000b7e <HAL_GPIO_Init+0x1e2>
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4a44      	ldr	r2, [pc, #272]	; (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d00d      	beq.n	8000b7a <HAL_GPIO_Init+0x1de>
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4a43      	ldr	r2, [pc, #268]	; (8000c70 <HAL_GPIO_Init+0x2d4>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d007      	beq.n	8000b76 <HAL_GPIO_Init+0x1da>
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4a42      	ldr	r2, [pc, #264]	; (8000c74 <HAL_GPIO_Init+0x2d8>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d101      	bne.n	8000b72 <HAL_GPIO_Init+0x1d6>
 8000b6e:	2303      	movs	r3, #3
 8000b70:	e006      	b.n	8000b80 <HAL_GPIO_Init+0x1e4>
 8000b72:	2305      	movs	r3, #5
 8000b74:	e004      	b.n	8000b80 <HAL_GPIO_Init+0x1e4>
 8000b76:	2302      	movs	r3, #2
 8000b78:	e002      	b.n	8000b80 <HAL_GPIO_Init+0x1e4>
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e000      	b.n	8000b80 <HAL_GPIO_Init+0x1e4>
 8000b7e:	2300      	movs	r3, #0
 8000b80:	697a      	ldr	r2, [r7, #20]
 8000b82:	2103      	movs	r1, #3
 8000b84:	400a      	ands	r2, r1
 8000b86:	0092      	lsls	r2, r2, #2
 8000b88:	4093      	lsls	r3, r2
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b90:	4935      	ldr	r1, [pc, #212]	; (8000c68 <HAL_GPIO_Init+0x2cc>)
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	089b      	lsrs	r3, r3, #2
 8000b96:	3302      	adds	r3, #2
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b9e:	4b36      	ldr	r3, [pc, #216]	; (8000c78 <HAL_GPIO_Init+0x2dc>)
 8000ba0:	689b      	ldr	r3, [r3, #8]
 8000ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	43da      	mvns	r2, r3
 8000ba8:	693b      	ldr	r3, [r7, #16]
 8000baa:	4013      	ands	r3, r2
 8000bac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685a      	ldr	r2, [r3, #4]
 8000bb2:	2380      	movs	r3, #128	; 0x80
 8000bb4:	035b      	lsls	r3, r3, #13
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	d003      	beq.n	8000bc2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000bc2:	4b2d      	ldr	r3, [pc, #180]	; (8000c78 <HAL_GPIO_Init+0x2dc>)
 8000bc4:	693a      	ldr	r2, [r7, #16]
 8000bc6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000bc8:	4b2b      	ldr	r3, [pc, #172]	; (8000c78 <HAL_GPIO_Init+0x2dc>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	43da      	mvns	r2, r3
 8000bd2:	693b      	ldr	r3, [r7, #16]
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	685a      	ldr	r2, [r3, #4]
 8000bdc:	2380      	movs	r3, #128	; 0x80
 8000bde:	039b      	lsls	r3, r3, #14
 8000be0:	4013      	ands	r3, r2
 8000be2:	d003      	beq.n	8000bec <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000be4:	693a      	ldr	r2, [r7, #16]
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	4313      	orrs	r3, r2
 8000bea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000bec:	4b22      	ldr	r3, [pc, #136]	; (8000c78 <HAL_GPIO_Init+0x2dc>)
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000bf2:	4b21      	ldr	r3, [pc, #132]	; (8000c78 <HAL_GPIO_Init+0x2dc>)
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	43da      	mvns	r2, r3
 8000bfc:	693b      	ldr	r3, [r7, #16]
 8000bfe:	4013      	ands	r3, r2
 8000c00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685a      	ldr	r2, [r3, #4]
 8000c06:	2380      	movs	r3, #128	; 0x80
 8000c08:	029b      	lsls	r3, r3, #10
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	d003      	beq.n	8000c16 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	4313      	orrs	r3, r2
 8000c14:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c16:	4b18      	ldr	r3, [pc, #96]	; (8000c78 <HAL_GPIO_Init+0x2dc>)
 8000c18:	693a      	ldr	r2, [r7, #16]
 8000c1a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000c1c:	4b16      	ldr	r3, [pc, #88]	; (8000c78 <HAL_GPIO_Init+0x2dc>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	43da      	mvns	r2, r3
 8000c26:	693b      	ldr	r3, [r7, #16]
 8000c28:	4013      	ands	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685a      	ldr	r2, [r3, #4]
 8000c30:	2380      	movs	r3, #128	; 0x80
 8000c32:	025b      	lsls	r3, r3, #9
 8000c34:	4013      	ands	r3, r2
 8000c36:	d003      	beq.n	8000c40 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000c38:	693a      	ldr	r2, [r7, #16]
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c40:	4b0d      	ldr	r3, [pc, #52]	; (8000c78 <HAL_GPIO_Init+0x2dc>)
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	40da      	lsrs	r2, r3
 8000c54:	1e13      	subs	r3, r2, #0
 8000c56:	d000      	beq.n	8000c5a <HAL_GPIO_Init+0x2be>
 8000c58:	e6a8      	b.n	80009ac <HAL_GPIO_Init+0x10>
  } 
}
 8000c5a:	46c0      	nop			; (mov r8, r8)
 8000c5c:	46c0      	nop			; (mov r8, r8)
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	b006      	add	sp, #24
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40021000 	.word	0x40021000
 8000c68:	40010000 	.word	0x40010000
 8000c6c:	48000400 	.word	0x48000400
 8000c70:	48000800 	.word	0x48000800
 8000c74:	48000c00 	.word	0x48000c00
 8000c78:	40010400 	.word	0x40010400

08000c7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	0008      	movs	r0, r1
 8000c86:	0011      	movs	r1, r2
 8000c88:	1cbb      	adds	r3, r7, #2
 8000c8a:	1c02      	adds	r2, r0, #0
 8000c8c:	801a      	strh	r2, [r3, #0]
 8000c8e:	1c7b      	adds	r3, r7, #1
 8000c90:	1c0a      	adds	r2, r1, #0
 8000c92:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c94:	1c7b      	adds	r3, r7, #1
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d004      	beq.n	8000ca6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c9c:	1cbb      	adds	r3, r7, #2
 8000c9e:	881a      	ldrh	r2, [r3, #0]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ca4:	e003      	b.n	8000cae <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ca6:	1cbb      	adds	r3, r7, #2
 8000ca8:	881a      	ldrh	r2, [r3, #0]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	b002      	add	sp, #8
 8000cb4:	bd80      	pop	{r7, pc}
	...

08000cb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b088      	sub	sp, #32
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d101      	bne.n	8000cca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e301      	b.n	80012ce <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	2201      	movs	r2, #1
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	d100      	bne.n	8000cd6 <HAL_RCC_OscConfig+0x1e>
 8000cd4:	e08d      	b.n	8000df2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000cd6:	4bc3      	ldr	r3, [pc, #780]	; (8000fe4 <HAL_RCC_OscConfig+0x32c>)
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	220c      	movs	r2, #12
 8000cdc:	4013      	ands	r3, r2
 8000cde:	2b04      	cmp	r3, #4
 8000ce0:	d00e      	beq.n	8000d00 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ce2:	4bc0      	ldr	r3, [pc, #768]	; (8000fe4 <HAL_RCC_OscConfig+0x32c>)
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	220c      	movs	r2, #12
 8000ce8:	4013      	ands	r3, r2
 8000cea:	2b08      	cmp	r3, #8
 8000cec:	d116      	bne.n	8000d1c <HAL_RCC_OscConfig+0x64>
 8000cee:	4bbd      	ldr	r3, [pc, #756]	; (8000fe4 <HAL_RCC_OscConfig+0x32c>)
 8000cf0:	685a      	ldr	r2, [r3, #4]
 8000cf2:	2380      	movs	r3, #128	; 0x80
 8000cf4:	025b      	lsls	r3, r3, #9
 8000cf6:	401a      	ands	r2, r3
 8000cf8:	2380      	movs	r3, #128	; 0x80
 8000cfa:	025b      	lsls	r3, r3, #9
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d10d      	bne.n	8000d1c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d00:	4bb8      	ldr	r3, [pc, #736]	; (8000fe4 <HAL_RCC_OscConfig+0x32c>)
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	2380      	movs	r3, #128	; 0x80
 8000d06:	029b      	lsls	r3, r3, #10
 8000d08:	4013      	ands	r3, r2
 8000d0a:	d100      	bne.n	8000d0e <HAL_RCC_OscConfig+0x56>
 8000d0c:	e070      	b.n	8000df0 <HAL_RCC_OscConfig+0x138>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d000      	beq.n	8000d18 <HAL_RCC_OscConfig+0x60>
 8000d16:	e06b      	b.n	8000df0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	e2d8      	b.n	80012ce <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d107      	bne.n	8000d34 <HAL_RCC_OscConfig+0x7c>
 8000d24:	4baf      	ldr	r3, [pc, #700]	; (8000fe4 <HAL_RCC_OscConfig+0x32c>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	4bae      	ldr	r3, [pc, #696]	; (8000fe4 <HAL_RCC_OscConfig+0x32c>)
 8000d2a:	2180      	movs	r1, #128	; 0x80
 8000d2c:	0249      	lsls	r1, r1, #9
 8000d2e:	430a      	orrs	r2, r1
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	e02f      	b.n	8000d94 <HAL_RCC_OscConfig+0xdc>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d10c      	bne.n	8000d56 <HAL_RCC_OscConfig+0x9e>
 8000d3c:	4ba9      	ldr	r3, [pc, #676]	; (8000fe4 <HAL_RCC_OscConfig+0x32c>)
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	4ba8      	ldr	r3, [pc, #672]	; (8000fe4 <HAL_RCC_OscConfig+0x32c>)
 8000d42:	49a9      	ldr	r1, [pc, #676]	; (8000fe8 <HAL_RCC_OscConfig+0x330>)
 8000d44:	400a      	ands	r2, r1
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	4ba6      	ldr	r3, [pc, #664]	; (8000fe4 <HAL_RCC_OscConfig+0x32c>)
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	4ba5      	ldr	r3, [pc, #660]	; (8000fe4 <HAL_RCC_OscConfig+0x32c>)
 8000d4e:	49a7      	ldr	r1, [pc, #668]	; (8000fec <HAL_RCC_OscConfig+0x334>)
 8000d50:	400a      	ands	r2, r1
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	e01e      	b.n	8000d94 <HAL_RCC_OscConfig+0xdc>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	2b05      	cmp	r3, #5
 8000d5c:	d10e      	bne.n	8000d7c <HAL_RCC_OscConfig+0xc4>
 8000d5e:	4ba1      	ldr	r3, [pc, #644]	; (8000fe4 <HAL_RCC_OscConfig+0x32c>)
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	4ba0      	ldr	r3, [pc, #640]	; (8000fe4 <HAL_RCC_OscConfig+0x32c>)
 8000d64:	2180      	movs	r1, #128	; 0x80
 8000d66:	02c9      	lsls	r1, r1, #11
 8000d68:	430a      	orrs	r2, r1
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	4b9d      	ldr	r3, [pc, #628]	; (8000fe4 <HAL_RCC_OscConfig+0x32c>)
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	4b9c      	ldr	r3, [pc, #624]	; (8000fe4 <HAL_RCC_OscConfig+0x32c>)
 8000d72:	2180      	movs	r1, #128	; 0x80
 8000d74:	0249      	lsls	r1, r1, #9
 8000d76:	430a      	orrs	r2, r1
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	e00b      	b.n	8000d94 <HAL_RCC_OscConfig+0xdc>
 8000d7c:	4b99      	ldr	r3, [pc, #612]	; (8000fe4 <HAL_RCC_OscConfig+0x32c>)
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	4b98      	ldr	r3, [pc, #608]	; (8000fe4 <HAL_RCC_OscConfig+0x32c>)
 8000d82:	4999      	ldr	r1, [pc, #612]	; (8000fe8 <HAL_RCC_OscConfig+0x330>)
 8000d84:	400a      	ands	r2, r1
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	4b96      	ldr	r3, [pc, #600]	; (8000fe4 <HAL_RCC_OscConfig+0x32c>)
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	4b95      	ldr	r3, [pc, #596]	; (8000fe4 <HAL_RCC_OscConfig+0x32c>)
 8000d8e:	4997      	ldr	r1, [pc, #604]	; (8000fec <HAL_RCC_OscConfig+0x334>)
 8000d90:	400a      	ands	r2, r1
 8000d92:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d014      	beq.n	8000dc6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d9c:	f7ff fd1c 	bl	80007d8 <HAL_GetTick>
 8000da0:	0003      	movs	r3, r0
 8000da2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000da4:	e008      	b.n	8000db8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000da6:	f7ff fd17 	bl	80007d8 <HAL_GetTick>
 8000daa:	0002      	movs	r2, r0
 8000dac:	69bb      	ldr	r3, [r7, #24]
 8000dae:	1ad3      	subs	r3, r2, r3
 8000db0:	2b64      	cmp	r3, #100	; 0x64
 8000db2:	d901      	bls.n	8000db8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000db4:	2303      	movs	r3, #3
 8000db6:	e28a      	b.n	80012ce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000db8:	4b8a      	ldr	r3, [pc, #552]	; (8000fe4 <HAL_RCC_OscConfig+0x32c>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	2380      	movs	r3, #128	; 0x80
 8000dbe:	029b      	lsls	r3, r3, #10
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	d0f0      	beq.n	8000da6 <HAL_RCC_OscConfig+0xee>
 8000dc4:	e015      	b.n	8000df2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dc6:	f7ff fd07 	bl	80007d8 <HAL_GetTick>
 8000dca:	0003      	movs	r3, r0
 8000dcc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dce:	e008      	b.n	8000de2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dd0:	f7ff fd02 	bl	80007d8 <HAL_GetTick>
 8000dd4:	0002      	movs	r2, r0
 8000dd6:	69bb      	ldr	r3, [r7, #24]
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	2b64      	cmp	r3, #100	; 0x64
 8000ddc:	d901      	bls.n	8000de2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000dde:	2303      	movs	r3, #3
 8000de0:	e275      	b.n	80012ce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000de2:	4b80      	ldr	r3, [pc, #512]	; (8000fe4 <HAL_RCC_OscConfig+0x32c>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	2380      	movs	r3, #128	; 0x80
 8000de8:	029b      	lsls	r3, r3, #10
 8000dea:	4013      	ands	r3, r2
 8000dec:	d1f0      	bne.n	8000dd0 <HAL_RCC_OscConfig+0x118>
 8000dee:	e000      	b.n	8000df2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000df0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	2202      	movs	r2, #2
 8000df8:	4013      	ands	r3, r2
 8000dfa:	d100      	bne.n	8000dfe <HAL_RCC_OscConfig+0x146>
 8000dfc:	e069      	b.n	8000ed2 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000dfe:	4b79      	ldr	r3, [pc, #484]	; (8000fe4 <HAL_RCC_OscConfig+0x32c>)
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	220c      	movs	r2, #12
 8000e04:	4013      	ands	r3, r2
 8000e06:	d00b      	beq.n	8000e20 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e08:	4b76      	ldr	r3, [pc, #472]	; (8000fe4 <HAL_RCC_OscConfig+0x32c>)
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	220c      	movs	r2, #12
 8000e0e:	4013      	ands	r3, r2
 8000e10:	2b08      	cmp	r3, #8
 8000e12:	d11c      	bne.n	8000e4e <HAL_RCC_OscConfig+0x196>
 8000e14:	4b73      	ldr	r3, [pc, #460]	; (8000fe4 <HAL_RCC_OscConfig+0x32c>)
 8000e16:	685a      	ldr	r2, [r3, #4]
 8000e18:	2380      	movs	r3, #128	; 0x80
 8000e1a:	025b      	lsls	r3, r3, #9
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	d116      	bne.n	8000e4e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e20:	4b70      	ldr	r3, [pc, #448]	; (8000fe4 <HAL_RCC_OscConfig+0x32c>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2202      	movs	r2, #2
 8000e26:	4013      	ands	r3, r2
 8000e28:	d005      	beq.n	8000e36 <HAL_RCC_OscConfig+0x17e>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	68db      	ldr	r3, [r3, #12]
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d001      	beq.n	8000e36 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	e24b      	b.n	80012ce <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e36:	4b6b      	ldr	r3, [pc, #428]	; (8000fe4 <HAL_RCC_OscConfig+0x32c>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	22f8      	movs	r2, #248	; 0xf8
 8000e3c:	4393      	bics	r3, r2
 8000e3e:	0019      	movs	r1, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	691b      	ldr	r3, [r3, #16]
 8000e44:	00da      	lsls	r2, r3, #3
 8000e46:	4b67      	ldr	r3, [pc, #412]	; (8000fe4 <HAL_RCC_OscConfig+0x32c>)
 8000e48:	430a      	orrs	r2, r1
 8000e4a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e4c:	e041      	b.n	8000ed2 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	68db      	ldr	r3, [r3, #12]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d024      	beq.n	8000ea0 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e56:	4b63      	ldr	r3, [pc, #396]	; (8000fe4 <HAL_RCC_OscConfig+0x32c>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	4b62      	ldr	r3, [pc, #392]	; (8000fe4 <HAL_RCC_OscConfig+0x32c>)
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	430a      	orrs	r2, r1
 8000e60:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e62:	f7ff fcb9 	bl	80007d8 <HAL_GetTick>
 8000e66:	0003      	movs	r3, r0
 8000e68:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e6a:	e008      	b.n	8000e7e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e6c:	f7ff fcb4 	bl	80007d8 <HAL_GetTick>
 8000e70:	0002      	movs	r2, r0
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	d901      	bls.n	8000e7e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	e227      	b.n	80012ce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e7e:	4b59      	ldr	r3, [pc, #356]	; (8000fe4 <HAL_RCC_OscConfig+0x32c>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	2202      	movs	r2, #2
 8000e84:	4013      	ands	r3, r2
 8000e86:	d0f1      	beq.n	8000e6c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e88:	4b56      	ldr	r3, [pc, #344]	; (8000fe4 <HAL_RCC_OscConfig+0x32c>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	22f8      	movs	r2, #248	; 0xf8
 8000e8e:	4393      	bics	r3, r2
 8000e90:	0019      	movs	r1, r3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	691b      	ldr	r3, [r3, #16]
 8000e96:	00da      	lsls	r2, r3, #3
 8000e98:	4b52      	ldr	r3, [pc, #328]	; (8000fe4 <HAL_RCC_OscConfig+0x32c>)
 8000e9a:	430a      	orrs	r2, r1
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	e018      	b.n	8000ed2 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ea0:	4b50      	ldr	r3, [pc, #320]	; (8000fe4 <HAL_RCC_OscConfig+0x32c>)
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	4b4f      	ldr	r3, [pc, #316]	; (8000fe4 <HAL_RCC_OscConfig+0x32c>)
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	438a      	bics	r2, r1
 8000eaa:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eac:	f7ff fc94 	bl	80007d8 <HAL_GetTick>
 8000eb0:	0003      	movs	r3, r0
 8000eb2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eb4:	e008      	b.n	8000ec8 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000eb6:	f7ff fc8f 	bl	80007d8 <HAL_GetTick>
 8000eba:	0002      	movs	r2, r0
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	1ad3      	subs	r3, r2, r3
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	d901      	bls.n	8000ec8 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	e202      	b.n	80012ce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ec8:	4b46      	ldr	r3, [pc, #280]	; (8000fe4 <HAL_RCC_OscConfig+0x32c>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2202      	movs	r2, #2
 8000ece:	4013      	ands	r3, r2
 8000ed0:	d1f1      	bne.n	8000eb6 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	2208      	movs	r2, #8
 8000ed8:	4013      	ands	r3, r2
 8000eda:	d036      	beq.n	8000f4a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	69db      	ldr	r3, [r3, #28]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d019      	beq.n	8000f18 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ee4:	4b3f      	ldr	r3, [pc, #252]	; (8000fe4 <HAL_RCC_OscConfig+0x32c>)
 8000ee6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ee8:	4b3e      	ldr	r3, [pc, #248]	; (8000fe4 <HAL_RCC_OscConfig+0x32c>)
 8000eea:	2101      	movs	r1, #1
 8000eec:	430a      	orrs	r2, r1
 8000eee:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ef0:	f7ff fc72 	bl	80007d8 <HAL_GetTick>
 8000ef4:	0003      	movs	r3, r0
 8000ef6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ef8:	e008      	b.n	8000f0c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000efa:	f7ff fc6d 	bl	80007d8 <HAL_GetTick>
 8000efe:	0002      	movs	r2, r0
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	1ad3      	subs	r3, r2, r3
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	d901      	bls.n	8000f0c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	e1e0      	b.n	80012ce <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f0c:	4b35      	ldr	r3, [pc, #212]	; (8000fe4 <HAL_RCC_OscConfig+0x32c>)
 8000f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f10:	2202      	movs	r2, #2
 8000f12:	4013      	ands	r3, r2
 8000f14:	d0f1      	beq.n	8000efa <HAL_RCC_OscConfig+0x242>
 8000f16:	e018      	b.n	8000f4a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f18:	4b32      	ldr	r3, [pc, #200]	; (8000fe4 <HAL_RCC_OscConfig+0x32c>)
 8000f1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f1c:	4b31      	ldr	r3, [pc, #196]	; (8000fe4 <HAL_RCC_OscConfig+0x32c>)
 8000f1e:	2101      	movs	r1, #1
 8000f20:	438a      	bics	r2, r1
 8000f22:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f24:	f7ff fc58 	bl	80007d8 <HAL_GetTick>
 8000f28:	0003      	movs	r3, r0
 8000f2a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f2c:	e008      	b.n	8000f40 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f2e:	f7ff fc53 	bl	80007d8 <HAL_GetTick>
 8000f32:	0002      	movs	r2, r0
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	1ad3      	subs	r3, r2, r3
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d901      	bls.n	8000f40 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	e1c6      	b.n	80012ce <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f40:	4b28      	ldr	r3, [pc, #160]	; (8000fe4 <HAL_RCC_OscConfig+0x32c>)
 8000f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f44:	2202      	movs	r2, #2
 8000f46:	4013      	ands	r3, r2
 8000f48:	d1f1      	bne.n	8000f2e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	2204      	movs	r2, #4
 8000f50:	4013      	ands	r3, r2
 8000f52:	d100      	bne.n	8000f56 <HAL_RCC_OscConfig+0x29e>
 8000f54:	e0b4      	b.n	80010c0 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f56:	201f      	movs	r0, #31
 8000f58:	183b      	adds	r3, r7, r0
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f5e:	4b21      	ldr	r3, [pc, #132]	; (8000fe4 <HAL_RCC_OscConfig+0x32c>)
 8000f60:	69da      	ldr	r2, [r3, #28]
 8000f62:	2380      	movs	r3, #128	; 0x80
 8000f64:	055b      	lsls	r3, r3, #21
 8000f66:	4013      	ands	r3, r2
 8000f68:	d110      	bne.n	8000f8c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f6a:	4b1e      	ldr	r3, [pc, #120]	; (8000fe4 <HAL_RCC_OscConfig+0x32c>)
 8000f6c:	69da      	ldr	r2, [r3, #28]
 8000f6e:	4b1d      	ldr	r3, [pc, #116]	; (8000fe4 <HAL_RCC_OscConfig+0x32c>)
 8000f70:	2180      	movs	r1, #128	; 0x80
 8000f72:	0549      	lsls	r1, r1, #21
 8000f74:	430a      	orrs	r2, r1
 8000f76:	61da      	str	r2, [r3, #28]
 8000f78:	4b1a      	ldr	r3, [pc, #104]	; (8000fe4 <HAL_RCC_OscConfig+0x32c>)
 8000f7a:	69da      	ldr	r2, [r3, #28]
 8000f7c:	2380      	movs	r3, #128	; 0x80
 8000f7e:	055b      	lsls	r3, r3, #21
 8000f80:	4013      	ands	r3, r2
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000f86:	183b      	adds	r3, r7, r0
 8000f88:	2201      	movs	r2, #1
 8000f8a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f8c:	4b18      	ldr	r3, [pc, #96]	; (8000ff0 <HAL_RCC_OscConfig+0x338>)
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	2380      	movs	r3, #128	; 0x80
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	4013      	ands	r3, r2
 8000f96:	d11a      	bne.n	8000fce <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f98:	4b15      	ldr	r3, [pc, #84]	; (8000ff0 <HAL_RCC_OscConfig+0x338>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	4b14      	ldr	r3, [pc, #80]	; (8000ff0 <HAL_RCC_OscConfig+0x338>)
 8000f9e:	2180      	movs	r1, #128	; 0x80
 8000fa0:	0049      	lsls	r1, r1, #1
 8000fa2:	430a      	orrs	r2, r1
 8000fa4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fa6:	f7ff fc17 	bl	80007d8 <HAL_GetTick>
 8000faa:	0003      	movs	r3, r0
 8000fac:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fae:	e008      	b.n	8000fc2 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fb0:	f7ff fc12 	bl	80007d8 <HAL_GetTick>
 8000fb4:	0002      	movs	r2, r0
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	2b64      	cmp	r3, #100	; 0x64
 8000fbc:	d901      	bls.n	8000fc2 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	e185      	b.n	80012ce <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fc2:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <HAL_RCC_OscConfig+0x338>)
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	2380      	movs	r3, #128	; 0x80
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	4013      	ands	r3, r2
 8000fcc:	d0f0      	beq.n	8000fb0 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d10e      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x33c>
 8000fd6:	4b03      	ldr	r3, [pc, #12]	; (8000fe4 <HAL_RCC_OscConfig+0x32c>)
 8000fd8:	6a1a      	ldr	r2, [r3, #32]
 8000fda:	4b02      	ldr	r3, [pc, #8]	; (8000fe4 <HAL_RCC_OscConfig+0x32c>)
 8000fdc:	2101      	movs	r1, #1
 8000fde:	430a      	orrs	r2, r1
 8000fe0:	621a      	str	r2, [r3, #32]
 8000fe2:	e035      	b.n	8001050 <HAL_RCC_OscConfig+0x398>
 8000fe4:	40021000 	.word	0x40021000
 8000fe8:	fffeffff 	.word	0xfffeffff
 8000fec:	fffbffff 	.word	0xfffbffff
 8000ff0:	40007000 	.word	0x40007000
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d10c      	bne.n	8001016 <HAL_RCC_OscConfig+0x35e>
 8000ffc:	4bb6      	ldr	r3, [pc, #728]	; (80012d8 <HAL_RCC_OscConfig+0x620>)
 8000ffe:	6a1a      	ldr	r2, [r3, #32]
 8001000:	4bb5      	ldr	r3, [pc, #724]	; (80012d8 <HAL_RCC_OscConfig+0x620>)
 8001002:	2101      	movs	r1, #1
 8001004:	438a      	bics	r2, r1
 8001006:	621a      	str	r2, [r3, #32]
 8001008:	4bb3      	ldr	r3, [pc, #716]	; (80012d8 <HAL_RCC_OscConfig+0x620>)
 800100a:	6a1a      	ldr	r2, [r3, #32]
 800100c:	4bb2      	ldr	r3, [pc, #712]	; (80012d8 <HAL_RCC_OscConfig+0x620>)
 800100e:	2104      	movs	r1, #4
 8001010:	438a      	bics	r2, r1
 8001012:	621a      	str	r2, [r3, #32]
 8001014:	e01c      	b.n	8001050 <HAL_RCC_OscConfig+0x398>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	2b05      	cmp	r3, #5
 800101c:	d10c      	bne.n	8001038 <HAL_RCC_OscConfig+0x380>
 800101e:	4bae      	ldr	r3, [pc, #696]	; (80012d8 <HAL_RCC_OscConfig+0x620>)
 8001020:	6a1a      	ldr	r2, [r3, #32]
 8001022:	4bad      	ldr	r3, [pc, #692]	; (80012d8 <HAL_RCC_OscConfig+0x620>)
 8001024:	2104      	movs	r1, #4
 8001026:	430a      	orrs	r2, r1
 8001028:	621a      	str	r2, [r3, #32]
 800102a:	4bab      	ldr	r3, [pc, #684]	; (80012d8 <HAL_RCC_OscConfig+0x620>)
 800102c:	6a1a      	ldr	r2, [r3, #32]
 800102e:	4baa      	ldr	r3, [pc, #680]	; (80012d8 <HAL_RCC_OscConfig+0x620>)
 8001030:	2101      	movs	r1, #1
 8001032:	430a      	orrs	r2, r1
 8001034:	621a      	str	r2, [r3, #32]
 8001036:	e00b      	b.n	8001050 <HAL_RCC_OscConfig+0x398>
 8001038:	4ba7      	ldr	r3, [pc, #668]	; (80012d8 <HAL_RCC_OscConfig+0x620>)
 800103a:	6a1a      	ldr	r2, [r3, #32]
 800103c:	4ba6      	ldr	r3, [pc, #664]	; (80012d8 <HAL_RCC_OscConfig+0x620>)
 800103e:	2101      	movs	r1, #1
 8001040:	438a      	bics	r2, r1
 8001042:	621a      	str	r2, [r3, #32]
 8001044:	4ba4      	ldr	r3, [pc, #656]	; (80012d8 <HAL_RCC_OscConfig+0x620>)
 8001046:	6a1a      	ldr	r2, [r3, #32]
 8001048:	4ba3      	ldr	r3, [pc, #652]	; (80012d8 <HAL_RCC_OscConfig+0x620>)
 800104a:	2104      	movs	r1, #4
 800104c:	438a      	bics	r2, r1
 800104e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d014      	beq.n	8001082 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001058:	f7ff fbbe 	bl	80007d8 <HAL_GetTick>
 800105c:	0003      	movs	r3, r0
 800105e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001060:	e009      	b.n	8001076 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001062:	f7ff fbb9 	bl	80007d8 <HAL_GetTick>
 8001066:	0002      	movs	r2, r0
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	4a9b      	ldr	r2, [pc, #620]	; (80012dc <HAL_RCC_OscConfig+0x624>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d901      	bls.n	8001076 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001072:	2303      	movs	r3, #3
 8001074:	e12b      	b.n	80012ce <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001076:	4b98      	ldr	r3, [pc, #608]	; (80012d8 <HAL_RCC_OscConfig+0x620>)
 8001078:	6a1b      	ldr	r3, [r3, #32]
 800107a:	2202      	movs	r2, #2
 800107c:	4013      	ands	r3, r2
 800107e:	d0f0      	beq.n	8001062 <HAL_RCC_OscConfig+0x3aa>
 8001080:	e013      	b.n	80010aa <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001082:	f7ff fba9 	bl	80007d8 <HAL_GetTick>
 8001086:	0003      	movs	r3, r0
 8001088:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800108a:	e009      	b.n	80010a0 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800108c:	f7ff fba4 	bl	80007d8 <HAL_GetTick>
 8001090:	0002      	movs	r2, r0
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	4a91      	ldr	r2, [pc, #580]	; (80012dc <HAL_RCC_OscConfig+0x624>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d901      	bls.n	80010a0 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 800109c:	2303      	movs	r3, #3
 800109e:	e116      	b.n	80012ce <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010a0:	4b8d      	ldr	r3, [pc, #564]	; (80012d8 <HAL_RCC_OscConfig+0x620>)
 80010a2:	6a1b      	ldr	r3, [r3, #32]
 80010a4:	2202      	movs	r2, #2
 80010a6:	4013      	ands	r3, r2
 80010a8:	d1f0      	bne.n	800108c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80010aa:	231f      	movs	r3, #31
 80010ac:	18fb      	adds	r3, r7, r3
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d105      	bne.n	80010c0 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010b4:	4b88      	ldr	r3, [pc, #544]	; (80012d8 <HAL_RCC_OscConfig+0x620>)
 80010b6:	69da      	ldr	r2, [r3, #28]
 80010b8:	4b87      	ldr	r3, [pc, #540]	; (80012d8 <HAL_RCC_OscConfig+0x620>)
 80010ba:	4989      	ldr	r1, [pc, #548]	; (80012e0 <HAL_RCC_OscConfig+0x628>)
 80010bc:	400a      	ands	r2, r1
 80010be:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2210      	movs	r2, #16
 80010c6:	4013      	ands	r3, r2
 80010c8:	d063      	beq.n	8001192 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	695b      	ldr	r3, [r3, #20]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d12a      	bne.n	8001128 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80010d2:	4b81      	ldr	r3, [pc, #516]	; (80012d8 <HAL_RCC_OscConfig+0x620>)
 80010d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010d6:	4b80      	ldr	r3, [pc, #512]	; (80012d8 <HAL_RCC_OscConfig+0x620>)
 80010d8:	2104      	movs	r1, #4
 80010da:	430a      	orrs	r2, r1
 80010dc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80010de:	4b7e      	ldr	r3, [pc, #504]	; (80012d8 <HAL_RCC_OscConfig+0x620>)
 80010e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010e2:	4b7d      	ldr	r3, [pc, #500]	; (80012d8 <HAL_RCC_OscConfig+0x620>)
 80010e4:	2101      	movs	r1, #1
 80010e6:	430a      	orrs	r2, r1
 80010e8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ea:	f7ff fb75 	bl	80007d8 <HAL_GetTick>
 80010ee:	0003      	movs	r3, r0
 80010f0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80010f2:	e008      	b.n	8001106 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80010f4:	f7ff fb70 	bl	80007d8 <HAL_GetTick>
 80010f8:	0002      	movs	r2, r0
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d901      	bls.n	8001106 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001102:	2303      	movs	r3, #3
 8001104:	e0e3      	b.n	80012ce <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001106:	4b74      	ldr	r3, [pc, #464]	; (80012d8 <HAL_RCC_OscConfig+0x620>)
 8001108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800110a:	2202      	movs	r2, #2
 800110c:	4013      	ands	r3, r2
 800110e:	d0f1      	beq.n	80010f4 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001110:	4b71      	ldr	r3, [pc, #452]	; (80012d8 <HAL_RCC_OscConfig+0x620>)
 8001112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001114:	22f8      	movs	r2, #248	; 0xf8
 8001116:	4393      	bics	r3, r2
 8001118:	0019      	movs	r1, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	699b      	ldr	r3, [r3, #24]
 800111e:	00da      	lsls	r2, r3, #3
 8001120:	4b6d      	ldr	r3, [pc, #436]	; (80012d8 <HAL_RCC_OscConfig+0x620>)
 8001122:	430a      	orrs	r2, r1
 8001124:	635a      	str	r2, [r3, #52]	; 0x34
 8001126:	e034      	b.n	8001192 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	695b      	ldr	r3, [r3, #20]
 800112c:	3305      	adds	r3, #5
 800112e:	d111      	bne.n	8001154 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001130:	4b69      	ldr	r3, [pc, #420]	; (80012d8 <HAL_RCC_OscConfig+0x620>)
 8001132:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001134:	4b68      	ldr	r3, [pc, #416]	; (80012d8 <HAL_RCC_OscConfig+0x620>)
 8001136:	2104      	movs	r1, #4
 8001138:	438a      	bics	r2, r1
 800113a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800113c:	4b66      	ldr	r3, [pc, #408]	; (80012d8 <HAL_RCC_OscConfig+0x620>)
 800113e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001140:	22f8      	movs	r2, #248	; 0xf8
 8001142:	4393      	bics	r3, r2
 8001144:	0019      	movs	r1, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	699b      	ldr	r3, [r3, #24]
 800114a:	00da      	lsls	r2, r3, #3
 800114c:	4b62      	ldr	r3, [pc, #392]	; (80012d8 <HAL_RCC_OscConfig+0x620>)
 800114e:	430a      	orrs	r2, r1
 8001150:	635a      	str	r2, [r3, #52]	; 0x34
 8001152:	e01e      	b.n	8001192 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001154:	4b60      	ldr	r3, [pc, #384]	; (80012d8 <HAL_RCC_OscConfig+0x620>)
 8001156:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001158:	4b5f      	ldr	r3, [pc, #380]	; (80012d8 <HAL_RCC_OscConfig+0x620>)
 800115a:	2104      	movs	r1, #4
 800115c:	430a      	orrs	r2, r1
 800115e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001160:	4b5d      	ldr	r3, [pc, #372]	; (80012d8 <HAL_RCC_OscConfig+0x620>)
 8001162:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001164:	4b5c      	ldr	r3, [pc, #368]	; (80012d8 <HAL_RCC_OscConfig+0x620>)
 8001166:	2101      	movs	r1, #1
 8001168:	438a      	bics	r2, r1
 800116a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800116c:	f7ff fb34 	bl	80007d8 <HAL_GetTick>
 8001170:	0003      	movs	r3, r0
 8001172:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001174:	e008      	b.n	8001188 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001176:	f7ff fb2f 	bl	80007d8 <HAL_GetTick>
 800117a:	0002      	movs	r2, r0
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	2b02      	cmp	r3, #2
 8001182:	d901      	bls.n	8001188 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001184:	2303      	movs	r3, #3
 8001186:	e0a2      	b.n	80012ce <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001188:	4b53      	ldr	r3, [pc, #332]	; (80012d8 <HAL_RCC_OscConfig+0x620>)
 800118a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800118c:	2202      	movs	r2, #2
 800118e:	4013      	ands	r3, r2
 8001190:	d1f1      	bne.n	8001176 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6a1b      	ldr	r3, [r3, #32]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d100      	bne.n	800119c <HAL_RCC_OscConfig+0x4e4>
 800119a:	e097      	b.n	80012cc <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800119c:	4b4e      	ldr	r3, [pc, #312]	; (80012d8 <HAL_RCC_OscConfig+0x620>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	220c      	movs	r2, #12
 80011a2:	4013      	ands	r3, r2
 80011a4:	2b08      	cmp	r3, #8
 80011a6:	d100      	bne.n	80011aa <HAL_RCC_OscConfig+0x4f2>
 80011a8:	e06b      	b.n	8001282 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6a1b      	ldr	r3, [r3, #32]
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d14c      	bne.n	800124c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011b2:	4b49      	ldr	r3, [pc, #292]	; (80012d8 <HAL_RCC_OscConfig+0x620>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	4b48      	ldr	r3, [pc, #288]	; (80012d8 <HAL_RCC_OscConfig+0x620>)
 80011b8:	494a      	ldr	r1, [pc, #296]	; (80012e4 <HAL_RCC_OscConfig+0x62c>)
 80011ba:	400a      	ands	r2, r1
 80011bc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011be:	f7ff fb0b 	bl	80007d8 <HAL_GetTick>
 80011c2:	0003      	movs	r3, r0
 80011c4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011c6:	e008      	b.n	80011da <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011c8:	f7ff fb06 	bl	80007d8 <HAL_GetTick>
 80011cc:	0002      	movs	r2, r0
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d901      	bls.n	80011da <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e079      	b.n	80012ce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011da:	4b3f      	ldr	r3, [pc, #252]	; (80012d8 <HAL_RCC_OscConfig+0x620>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	2380      	movs	r3, #128	; 0x80
 80011e0:	049b      	lsls	r3, r3, #18
 80011e2:	4013      	ands	r3, r2
 80011e4:	d1f0      	bne.n	80011c8 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011e6:	4b3c      	ldr	r3, [pc, #240]	; (80012d8 <HAL_RCC_OscConfig+0x620>)
 80011e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ea:	220f      	movs	r2, #15
 80011ec:	4393      	bics	r3, r2
 80011ee:	0019      	movs	r1, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011f4:	4b38      	ldr	r3, [pc, #224]	; (80012d8 <HAL_RCC_OscConfig+0x620>)
 80011f6:	430a      	orrs	r2, r1
 80011f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80011fa:	4b37      	ldr	r3, [pc, #220]	; (80012d8 <HAL_RCC_OscConfig+0x620>)
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	4a3a      	ldr	r2, [pc, #232]	; (80012e8 <HAL_RCC_OscConfig+0x630>)
 8001200:	4013      	ands	r3, r2
 8001202:	0019      	movs	r1, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120c:	431a      	orrs	r2, r3
 800120e:	4b32      	ldr	r3, [pc, #200]	; (80012d8 <HAL_RCC_OscConfig+0x620>)
 8001210:	430a      	orrs	r2, r1
 8001212:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001214:	4b30      	ldr	r3, [pc, #192]	; (80012d8 <HAL_RCC_OscConfig+0x620>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	4b2f      	ldr	r3, [pc, #188]	; (80012d8 <HAL_RCC_OscConfig+0x620>)
 800121a:	2180      	movs	r1, #128	; 0x80
 800121c:	0449      	lsls	r1, r1, #17
 800121e:	430a      	orrs	r2, r1
 8001220:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001222:	f7ff fad9 	bl	80007d8 <HAL_GetTick>
 8001226:	0003      	movs	r3, r0
 8001228:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800122a:	e008      	b.n	800123e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800122c:	f7ff fad4 	bl	80007d8 <HAL_GetTick>
 8001230:	0002      	movs	r2, r0
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	2b02      	cmp	r3, #2
 8001238:	d901      	bls.n	800123e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e047      	b.n	80012ce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800123e:	4b26      	ldr	r3, [pc, #152]	; (80012d8 <HAL_RCC_OscConfig+0x620>)
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	2380      	movs	r3, #128	; 0x80
 8001244:	049b      	lsls	r3, r3, #18
 8001246:	4013      	ands	r3, r2
 8001248:	d0f0      	beq.n	800122c <HAL_RCC_OscConfig+0x574>
 800124a:	e03f      	b.n	80012cc <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800124c:	4b22      	ldr	r3, [pc, #136]	; (80012d8 <HAL_RCC_OscConfig+0x620>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	4b21      	ldr	r3, [pc, #132]	; (80012d8 <HAL_RCC_OscConfig+0x620>)
 8001252:	4924      	ldr	r1, [pc, #144]	; (80012e4 <HAL_RCC_OscConfig+0x62c>)
 8001254:	400a      	ands	r2, r1
 8001256:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001258:	f7ff fabe 	bl	80007d8 <HAL_GetTick>
 800125c:	0003      	movs	r3, r0
 800125e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001260:	e008      	b.n	8001274 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001262:	f7ff fab9 	bl	80007d8 <HAL_GetTick>
 8001266:	0002      	movs	r2, r0
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	2b02      	cmp	r3, #2
 800126e:	d901      	bls.n	8001274 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001270:	2303      	movs	r3, #3
 8001272:	e02c      	b.n	80012ce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001274:	4b18      	ldr	r3, [pc, #96]	; (80012d8 <HAL_RCC_OscConfig+0x620>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	2380      	movs	r3, #128	; 0x80
 800127a:	049b      	lsls	r3, r3, #18
 800127c:	4013      	ands	r3, r2
 800127e:	d1f0      	bne.n	8001262 <HAL_RCC_OscConfig+0x5aa>
 8001280:	e024      	b.n	80012cc <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6a1b      	ldr	r3, [r3, #32]
 8001286:	2b01      	cmp	r3, #1
 8001288:	d101      	bne.n	800128e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e01f      	b.n	80012ce <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800128e:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <HAL_RCC_OscConfig+0x620>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001294:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <HAL_RCC_OscConfig+0x620>)
 8001296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001298:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800129a:	697a      	ldr	r2, [r7, #20]
 800129c:	2380      	movs	r3, #128	; 0x80
 800129e:	025b      	lsls	r3, r3, #9
 80012a0:	401a      	ands	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d10e      	bne.n	80012c8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	220f      	movs	r2, #15
 80012ae:	401a      	ands	r2, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d107      	bne.n	80012c8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80012b8:	697a      	ldr	r2, [r7, #20]
 80012ba:	23f0      	movs	r3, #240	; 0xf0
 80012bc:	039b      	lsls	r3, r3, #14
 80012be:	401a      	ands	r2, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d001      	beq.n	80012cc <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	e000      	b.n	80012ce <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	0018      	movs	r0, r3
 80012d0:	46bd      	mov	sp, r7
 80012d2:	b008      	add	sp, #32
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	46c0      	nop			; (mov r8, r8)
 80012d8:	40021000 	.word	0x40021000
 80012dc:	00001388 	.word	0x00001388
 80012e0:	efffffff 	.word	0xefffffff
 80012e4:	feffffff 	.word	0xfeffffff
 80012e8:	ffc2ffff 	.word	0xffc2ffff

080012ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d101      	bne.n	8001300 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e0b3      	b.n	8001468 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001300:	4b5b      	ldr	r3, [pc, #364]	; (8001470 <HAL_RCC_ClockConfig+0x184>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2201      	movs	r2, #1
 8001306:	4013      	ands	r3, r2
 8001308:	683a      	ldr	r2, [r7, #0]
 800130a:	429a      	cmp	r2, r3
 800130c:	d911      	bls.n	8001332 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800130e:	4b58      	ldr	r3, [pc, #352]	; (8001470 <HAL_RCC_ClockConfig+0x184>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2201      	movs	r2, #1
 8001314:	4393      	bics	r3, r2
 8001316:	0019      	movs	r1, r3
 8001318:	4b55      	ldr	r3, [pc, #340]	; (8001470 <HAL_RCC_ClockConfig+0x184>)
 800131a:	683a      	ldr	r2, [r7, #0]
 800131c:	430a      	orrs	r2, r1
 800131e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001320:	4b53      	ldr	r3, [pc, #332]	; (8001470 <HAL_RCC_ClockConfig+0x184>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2201      	movs	r2, #1
 8001326:	4013      	ands	r3, r2
 8001328:	683a      	ldr	r2, [r7, #0]
 800132a:	429a      	cmp	r2, r3
 800132c:	d001      	beq.n	8001332 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e09a      	b.n	8001468 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2202      	movs	r2, #2
 8001338:	4013      	ands	r3, r2
 800133a:	d015      	beq.n	8001368 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2204      	movs	r2, #4
 8001342:	4013      	ands	r3, r2
 8001344:	d006      	beq.n	8001354 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001346:	4b4b      	ldr	r3, [pc, #300]	; (8001474 <HAL_RCC_ClockConfig+0x188>)
 8001348:	685a      	ldr	r2, [r3, #4]
 800134a:	4b4a      	ldr	r3, [pc, #296]	; (8001474 <HAL_RCC_ClockConfig+0x188>)
 800134c:	21e0      	movs	r1, #224	; 0xe0
 800134e:	00c9      	lsls	r1, r1, #3
 8001350:	430a      	orrs	r2, r1
 8001352:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001354:	4b47      	ldr	r3, [pc, #284]	; (8001474 <HAL_RCC_ClockConfig+0x188>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	22f0      	movs	r2, #240	; 0xf0
 800135a:	4393      	bics	r3, r2
 800135c:	0019      	movs	r1, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	689a      	ldr	r2, [r3, #8]
 8001362:	4b44      	ldr	r3, [pc, #272]	; (8001474 <HAL_RCC_ClockConfig+0x188>)
 8001364:	430a      	orrs	r2, r1
 8001366:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2201      	movs	r2, #1
 800136e:	4013      	ands	r3, r2
 8001370:	d040      	beq.n	80013f4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d107      	bne.n	800138a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800137a:	4b3e      	ldr	r3, [pc, #248]	; (8001474 <HAL_RCC_ClockConfig+0x188>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	2380      	movs	r3, #128	; 0x80
 8001380:	029b      	lsls	r3, r3, #10
 8001382:	4013      	ands	r3, r2
 8001384:	d114      	bne.n	80013b0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e06e      	b.n	8001468 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	2b02      	cmp	r3, #2
 8001390:	d107      	bne.n	80013a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001392:	4b38      	ldr	r3, [pc, #224]	; (8001474 <HAL_RCC_ClockConfig+0x188>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	2380      	movs	r3, #128	; 0x80
 8001398:	049b      	lsls	r3, r3, #18
 800139a:	4013      	ands	r3, r2
 800139c:	d108      	bne.n	80013b0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e062      	b.n	8001468 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013a2:	4b34      	ldr	r3, [pc, #208]	; (8001474 <HAL_RCC_ClockConfig+0x188>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2202      	movs	r2, #2
 80013a8:	4013      	ands	r3, r2
 80013aa:	d101      	bne.n	80013b0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e05b      	b.n	8001468 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013b0:	4b30      	ldr	r3, [pc, #192]	; (8001474 <HAL_RCC_ClockConfig+0x188>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	2203      	movs	r2, #3
 80013b6:	4393      	bics	r3, r2
 80013b8:	0019      	movs	r1, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685a      	ldr	r2, [r3, #4]
 80013be:	4b2d      	ldr	r3, [pc, #180]	; (8001474 <HAL_RCC_ClockConfig+0x188>)
 80013c0:	430a      	orrs	r2, r1
 80013c2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013c4:	f7ff fa08 	bl	80007d8 <HAL_GetTick>
 80013c8:	0003      	movs	r3, r0
 80013ca:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013cc:	e009      	b.n	80013e2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013ce:	f7ff fa03 	bl	80007d8 <HAL_GetTick>
 80013d2:	0002      	movs	r2, r0
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	4a27      	ldr	r2, [pc, #156]	; (8001478 <HAL_RCC_ClockConfig+0x18c>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e042      	b.n	8001468 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013e2:	4b24      	ldr	r3, [pc, #144]	; (8001474 <HAL_RCC_ClockConfig+0x188>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	220c      	movs	r2, #12
 80013e8:	401a      	ands	r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d1ec      	bne.n	80013ce <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80013f4:	4b1e      	ldr	r3, [pc, #120]	; (8001470 <HAL_RCC_ClockConfig+0x184>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2201      	movs	r2, #1
 80013fa:	4013      	ands	r3, r2
 80013fc:	683a      	ldr	r2, [r7, #0]
 80013fe:	429a      	cmp	r2, r3
 8001400:	d211      	bcs.n	8001426 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001402:	4b1b      	ldr	r3, [pc, #108]	; (8001470 <HAL_RCC_ClockConfig+0x184>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2201      	movs	r2, #1
 8001408:	4393      	bics	r3, r2
 800140a:	0019      	movs	r1, r3
 800140c:	4b18      	ldr	r3, [pc, #96]	; (8001470 <HAL_RCC_ClockConfig+0x184>)
 800140e:	683a      	ldr	r2, [r7, #0]
 8001410:	430a      	orrs	r2, r1
 8001412:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001414:	4b16      	ldr	r3, [pc, #88]	; (8001470 <HAL_RCC_ClockConfig+0x184>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2201      	movs	r2, #1
 800141a:	4013      	ands	r3, r2
 800141c:	683a      	ldr	r2, [r7, #0]
 800141e:	429a      	cmp	r2, r3
 8001420:	d001      	beq.n	8001426 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e020      	b.n	8001468 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2204      	movs	r2, #4
 800142c:	4013      	ands	r3, r2
 800142e:	d009      	beq.n	8001444 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001430:	4b10      	ldr	r3, [pc, #64]	; (8001474 <HAL_RCC_ClockConfig+0x188>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	4a11      	ldr	r2, [pc, #68]	; (800147c <HAL_RCC_ClockConfig+0x190>)
 8001436:	4013      	ands	r3, r2
 8001438:	0019      	movs	r1, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	68da      	ldr	r2, [r3, #12]
 800143e:	4b0d      	ldr	r3, [pc, #52]	; (8001474 <HAL_RCC_ClockConfig+0x188>)
 8001440:	430a      	orrs	r2, r1
 8001442:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001444:	f000 f820 	bl	8001488 <HAL_RCC_GetSysClockFreq>
 8001448:	0001      	movs	r1, r0
 800144a:	4b0a      	ldr	r3, [pc, #40]	; (8001474 <HAL_RCC_ClockConfig+0x188>)
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	091b      	lsrs	r3, r3, #4
 8001450:	220f      	movs	r2, #15
 8001452:	4013      	ands	r3, r2
 8001454:	4a0a      	ldr	r2, [pc, #40]	; (8001480 <HAL_RCC_ClockConfig+0x194>)
 8001456:	5cd3      	ldrb	r3, [r2, r3]
 8001458:	000a      	movs	r2, r1
 800145a:	40da      	lsrs	r2, r3
 800145c:	4b09      	ldr	r3, [pc, #36]	; (8001484 <HAL_RCC_ClockConfig+0x198>)
 800145e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001460:	2003      	movs	r0, #3
 8001462:	f7ff f973 	bl	800074c <HAL_InitTick>
  
  return HAL_OK;
 8001466:	2300      	movs	r3, #0
}
 8001468:	0018      	movs	r0, r3
 800146a:	46bd      	mov	sp, r7
 800146c:	b004      	add	sp, #16
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40022000 	.word	0x40022000
 8001474:	40021000 	.word	0x40021000
 8001478:	00001388 	.word	0x00001388
 800147c:	fffff8ff 	.word	0xfffff8ff
 8001480:	08003324 	.word	0x08003324
 8001484:	20000000 	.word	0x20000000

08001488 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	2300      	movs	r3, #0
 8001494:	60bb      	str	r3, [r7, #8]
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
 800149a:	2300      	movs	r3, #0
 800149c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800149e:	2300      	movs	r3, #0
 80014a0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80014a2:	4b20      	ldr	r3, [pc, #128]	; (8001524 <HAL_RCC_GetSysClockFreq+0x9c>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	220c      	movs	r2, #12
 80014ac:	4013      	ands	r3, r2
 80014ae:	2b04      	cmp	r3, #4
 80014b0:	d002      	beq.n	80014b8 <HAL_RCC_GetSysClockFreq+0x30>
 80014b2:	2b08      	cmp	r3, #8
 80014b4:	d003      	beq.n	80014be <HAL_RCC_GetSysClockFreq+0x36>
 80014b6:	e02c      	b.n	8001512 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80014b8:	4b1b      	ldr	r3, [pc, #108]	; (8001528 <HAL_RCC_GetSysClockFreq+0xa0>)
 80014ba:	613b      	str	r3, [r7, #16]
      break;
 80014bc:	e02c      	b.n	8001518 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	0c9b      	lsrs	r3, r3, #18
 80014c2:	220f      	movs	r2, #15
 80014c4:	4013      	ands	r3, r2
 80014c6:	4a19      	ldr	r2, [pc, #100]	; (800152c <HAL_RCC_GetSysClockFreq+0xa4>)
 80014c8:	5cd3      	ldrb	r3, [r2, r3]
 80014ca:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80014cc:	4b15      	ldr	r3, [pc, #84]	; (8001524 <HAL_RCC_GetSysClockFreq+0x9c>)
 80014ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d0:	220f      	movs	r2, #15
 80014d2:	4013      	ands	r3, r2
 80014d4:	4a16      	ldr	r2, [pc, #88]	; (8001530 <HAL_RCC_GetSysClockFreq+0xa8>)
 80014d6:	5cd3      	ldrb	r3, [r2, r3]
 80014d8:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80014da:	68fa      	ldr	r2, [r7, #12]
 80014dc:	2380      	movs	r3, #128	; 0x80
 80014de:	025b      	lsls	r3, r3, #9
 80014e0:	4013      	ands	r3, r2
 80014e2:	d009      	beq.n	80014f8 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80014e4:	68b9      	ldr	r1, [r7, #8]
 80014e6:	4810      	ldr	r0, [pc, #64]	; (8001528 <HAL_RCC_GetSysClockFreq+0xa0>)
 80014e8:	f7fe fe20 	bl	800012c <__udivsi3>
 80014ec:	0003      	movs	r3, r0
 80014ee:	001a      	movs	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	4353      	muls	r3, r2
 80014f4:	617b      	str	r3, [r7, #20]
 80014f6:	e009      	b.n	800150c <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80014f8:	6879      	ldr	r1, [r7, #4]
 80014fa:	000a      	movs	r2, r1
 80014fc:	0152      	lsls	r2, r2, #5
 80014fe:	1a52      	subs	r2, r2, r1
 8001500:	0193      	lsls	r3, r2, #6
 8001502:	1a9b      	subs	r3, r3, r2
 8001504:	00db      	lsls	r3, r3, #3
 8001506:	185b      	adds	r3, r3, r1
 8001508:	021b      	lsls	r3, r3, #8
 800150a:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	613b      	str	r3, [r7, #16]
      break;
 8001510:	e002      	b.n	8001518 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001512:	4b05      	ldr	r3, [pc, #20]	; (8001528 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001514:	613b      	str	r3, [r7, #16]
      break;
 8001516:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001518:	693b      	ldr	r3, [r7, #16]
}
 800151a:	0018      	movs	r0, r3
 800151c:	46bd      	mov	sp, r7
 800151e:	b006      	add	sp, #24
 8001520:	bd80      	pop	{r7, pc}
 8001522:	46c0      	nop			; (mov r8, r8)
 8001524:	40021000 	.word	0x40021000
 8001528:	007a1200 	.word	0x007a1200
 800152c:	0800333c 	.word	0x0800333c
 8001530:	0800334c 	.word	0x0800334c

08001534 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001538:	4b02      	ldr	r3, [pc, #8]	; (8001544 <HAL_RCC_GetHCLKFreq+0x10>)
 800153a:	681b      	ldr	r3, [r3, #0]
}
 800153c:	0018      	movs	r0, r3
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	46c0      	nop			; (mov r8, r8)
 8001544:	20000000 	.word	0x20000000

08001548 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800154c:	f7ff fff2 	bl	8001534 <HAL_RCC_GetHCLKFreq>
 8001550:	0001      	movs	r1, r0
 8001552:	4b06      	ldr	r3, [pc, #24]	; (800156c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	0a1b      	lsrs	r3, r3, #8
 8001558:	2207      	movs	r2, #7
 800155a:	4013      	ands	r3, r2
 800155c:	4a04      	ldr	r2, [pc, #16]	; (8001570 <HAL_RCC_GetPCLK1Freq+0x28>)
 800155e:	5cd3      	ldrb	r3, [r2, r3]
 8001560:	40d9      	lsrs	r1, r3
 8001562:	000b      	movs	r3, r1
}    
 8001564:	0018      	movs	r0, r3
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	46c0      	nop			; (mov r8, r8)
 800156c:	40021000 	.word	0x40021000
 8001570:	08003334 	.word	0x08003334

08001574 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d101      	bne.n	8001586 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e0a8      	b.n	80016d8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158a:	2b00      	cmp	r3, #0
 800158c:	d109      	bne.n	80015a2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685a      	ldr	r2, [r3, #4]
 8001592:	2382      	movs	r3, #130	; 0x82
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	429a      	cmp	r2, r3
 8001598:	d009      	beq.n	80015ae <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2200      	movs	r2, #0
 800159e:	61da      	str	r2, [r3, #28]
 80015a0:	e005      	b.n	80015ae <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2200      	movs	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2200      	movs	r2, #0
 80015ac:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2200      	movs	r2, #0
 80015b2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	225d      	movs	r2, #93	; 0x5d
 80015b8:	5c9b      	ldrb	r3, [r3, r2]
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d107      	bne.n	80015d0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	225c      	movs	r2, #92	; 0x5c
 80015c4:	2100      	movs	r1, #0
 80015c6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	0018      	movs	r0, r3
 80015cc:	f7fe ff94 	bl	80004f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	225d      	movs	r2, #93	; 0x5d
 80015d4:	2102      	movs	r1, #2
 80015d6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2140      	movs	r1, #64	; 0x40
 80015e4:	438a      	bics	r2, r1
 80015e6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	68da      	ldr	r2, [r3, #12]
 80015ec:	23e0      	movs	r3, #224	; 0xe0
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d902      	bls.n	80015fa <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80015f4:	2300      	movs	r3, #0
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	e002      	b.n	8001600 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80015fa:	2380      	movs	r3, #128	; 0x80
 80015fc:	015b      	lsls	r3, r3, #5
 80015fe:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	68da      	ldr	r2, [r3, #12]
 8001604:	23f0      	movs	r3, #240	; 0xf0
 8001606:	011b      	lsls	r3, r3, #4
 8001608:	429a      	cmp	r2, r3
 800160a:	d008      	beq.n	800161e <HAL_SPI_Init+0xaa>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	68da      	ldr	r2, [r3, #12]
 8001610:	23e0      	movs	r3, #224	; 0xe0
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	429a      	cmp	r2, r3
 8001616:	d002      	beq.n	800161e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685a      	ldr	r2, [r3, #4]
 8001622:	2382      	movs	r3, #130	; 0x82
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	401a      	ands	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6899      	ldr	r1, [r3, #8]
 800162c:	2384      	movs	r3, #132	; 0x84
 800162e:	021b      	lsls	r3, r3, #8
 8001630:	400b      	ands	r3, r1
 8001632:	431a      	orrs	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	691b      	ldr	r3, [r3, #16]
 8001638:	2102      	movs	r1, #2
 800163a:	400b      	ands	r3, r1
 800163c:	431a      	orrs	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	2101      	movs	r1, #1
 8001644:	400b      	ands	r3, r1
 8001646:	431a      	orrs	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6999      	ldr	r1, [r3, #24]
 800164c:	2380      	movs	r3, #128	; 0x80
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	400b      	ands	r3, r1
 8001652:	431a      	orrs	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	69db      	ldr	r3, [r3, #28]
 8001658:	2138      	movs	r1, #56	; 0x38
 800165a:	400b      	ands	r3, r1
 800165c:	431a      	orrs	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a1b      	ldr	r3, [r3, #32]
 8001662:	2180      	movs	r1, #128	; 0x80
 8001664:	400b      	ands	r3, r1
 8001666:	431a      	orrs	r2, r3
 8001668:	0011      	movs	r1, r2
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800166e:	2380      	movs	r3, #128	; 0x80
 8001670:	019b      	lsls	r3, r3, #6
 8001672:	401a      	ands	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	430a      	orrs	r2, r1
 800167a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	0c1b      	lsrs	r3, r3, #16
 8001682:	2204      	movs	r2, #4
 8001684:	401a      	ands	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168a:	2110      	movs	r1, #16
 800168c:	400b      	ands	r3, r1
 800168e:	431a      	orrs	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001694:	2108      	movs	r1, #8
 8001696:	400b      	ands	r3, r1
 8001698:	431a      	orrs	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	68d9      	ldr	r1, [r3, #12]
 800169e:	23f0      	movs	r3, #240	; 0xf0
 80016a0:	011b      	lsls	r3, r3, #4
 80016a2:	400b      	ands	r3, r1
 80016a4:	431a      	orrs	r2, r3
 80016a6:	0011      	movs	r1, r2
 80016a8:	68fa      	ldr	r2, [r7, #12]
 80016aa:	2380      	movs	r3, #128	; 0x80
 80016ac:	015b      	lsls	r3, r3, #5
 80016ae:	401a      	ands	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	430a      	orrs	r2, r1
 80016b6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	69da      	ldr	r2, [r3, #28]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4907      	ldr	r1, [pc, #28]	; (80016e0 <HAL_SPI_Init+0x16c>)
 80016c4:	400a      	ands	r2, r1
 80016c6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2200      	movs	r2, #0
 80016cc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	225d      	movs	r2, #93	; 0x5d
 80016d2:	2101      	movs	r1, #1
 80016d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80016d6:	2300      	movs	r3, #0
}
 80016d8:	0018      	movs	r0, r3
 80016da:	46bd      	mov	sp, r7
 80016dc:	b004      	add	sp, #16
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	fffff7ff 	.word	0xfffff7ff

080016e4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016e4:	b590      	push	{r4, r7, lr}
 80016e6:	b089      	sub	sp, #36	; 0x24
 80016e8:	af02      	add	r7, sp, #8
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	603b      	str	r3, [r7, #0]
 80016f0:	1dbb      	adds	r3, r7, #6
 80016f2:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80016f4:	2117      	movs	r1, #23
 80016f6:	187b      	adds	r3, r7, r1
 80016f8:	2200      	movs	r2, #0
 80016fa:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	225d      	movs	r2, #93	; 0x5d
 8001700:	5c9b      	ldrb	r3, [r3, r2]
 8001702:	b2db      	uxtb	r3, r3
 8001704:	2b01      	cmp	r3, #1
 8001706:	d003      	beq.n	8001710 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8001708:	187b      	adds	r3, r7, r1
 800170a:	2202      	movs	r2, #2
 800170c:	701a      	strb	r2, [r3, #0]
    goto error;
 800170e:	e12b      	b.n	8001968 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	685a      	ldr	r2, [r3, #4]
 8001714:	2382      	movs	r3, #130	; 0x82
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	429a      	cmp	r2, r3
 800171a:	d113      	bne.n	8001744 <HAL_SPI_Receive+0x60>
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d10f      	bne.n	8001744 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	225d      	movs	r2, #93	; 0x5d
 8001728:	2104      	movs	r1, #4
 800172a:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800172c:	1dbb      	adds	r3, r7, #6
 800172e:	881c      	ldrh	r4, [r3, #0]
 8001730:	68ba      	ldr	r2, [r7, #8]
 8001732:	68b9      	ldr	r1, [r7, #8]
 8001734:	68f8      	ldr	r0, [r7, #12]
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	9300      	str	r3, [sp, #0]
 800173a:	0023      	movs	r3, r4
 800173c:	f000 f924 	bl	8001988 <HAL_SPI_TransmitReceive>
 8001740:	0003      	movs	r3, r0
 8001742:	e118      	b.n	8001976 <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	225c      	movs	r2, #92	; 0x5c
 8001748:	5c9b      	ldrb	r3, [r3, r2]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d101      	bne.n	8001752 <HAL_SPI_Receive+0x6e>
 800174e:	2302      	movs	r3, #2
 8001750:	e111      	b.n	8001976 <HAL_SPI_Receive+0x292>
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	225c      	movs	r2, #92	; 0x5c
 8001756:	2101      	movs	r1, #1
 8001758:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800175a:	f7ff f83d 	bl	80007d8 <HAL_GetTick>
 800175e:	0003      	movs	r3, r0
 8001760:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d003      	beq.n	8001770 <HAL_SPI_Receive+0x8c>
 8001768:	1dbb      	adds	r3, r7, #6
 800176a:	881b      	ldrh	r3, [r3, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d104      	bne.n	800177a <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8001770:	2317      	movs	r3, #23
 8001772:	18fb      	adds	r3, r7, r3
 8001774:	2201      	movs	r2, #1
 8001776:	701a      	strb	r2, [r3, #0]
    goto error;
 8001778:	e0f6      	b.n	8001968 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	225d      	movs	r2, #93	; 0x5d
 800177e:	2104      	movs	r1, #4
 8001780:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2200      	movs	r2, #0
 8001786:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	68ba      	ldr	r2, [r7, #8]
 800178c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	1dba      	adds	r2, r7, #6
 8001792:	2144      	movs	r1, #68	; 0x44
 8001794:	8812      	ldrh	r2, [r2, #0]
 8001796:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	1dba      	adds	r2, r7, #6
 800179c:	2146      	movs	r1, #70	; 0x46
 800179e:	8812      	ldrh	r2, [r2, #0]
 80017a0:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2200      	movs	r2, #0
 80017a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2200      	movs	r2, #0
 80017ac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2200      	movs	r2, #0
 80017b2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2200      	movs	r2, #0
 80017b8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2200      	movs	r2, #0
 80017be:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	68da      	ldr	r2, [r3, #12]
 80017c4:	23e0      	movs	r3, #224	; 0xe0
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d908      	bls.n	80017de <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	685a      	ldr	r2, [r3, #4]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	496a      	ldr	r1, [pc, #424]	; (8001980 <HAL_SPI_Receive+0x29c>)
 80017d8:	400a      	ands	r2, r1
 80017da:	605a      	str	r2, [r3, #4]
 80017dc:	e008      	b.n	80017f0 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	685a      	ldr	r2, [r3, #4]
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2180      	movs	r1, #128	; 0x80
 80017ea:	0149      	lsls	r1, r1, #5
 80017ec:	430a      	orrs	r2, r1
 80017ee:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	689a      	ldr	r2, [r3, #8]
 80017f4:	2380      	movs	r3, #128	; 0x80
 80017f6:	021b      	lsls	r3, r3, #8
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d10f      	bne.n	800181c <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2140      	movs	r1, #64	; 0x40
 8001808:	438a      	bics	r2, r1
 800180a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	495b      	ldr	r1, [pc, #364]	; (8001984 <HAL_SPI_Receive+0x2a0>)
 8001818:	400a      	ands	r2, r1
 800181a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2240      	movs	r2, #64	; 0x40
 8001824:	4013      	ands	r3, r2
 8001826:	2b40      	cmp	r3, #64	; 0x40
 8001828:	d007      	beq.n	800183a <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2140      	movs	r1, #64	; 0x40
 8001836:	430a      	orrs	r2, r1
 8001838:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	68da      	ldr	r2, [r3, #12]
 800183e:	23e0      	movs	r3, #224	; 0xe0
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	429a      	cmp	r2, r3
 8001844:	d900      	bls.n	8001848 <HAL_SPI_Receive+0x164>
 8001846:	e071      	b.n	800192c <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001848:	e035      	b.n	80018b6 <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	2201      	movs	r2, #1
 8001852:	4013      	ands	r3, r2
 8001854:	2b01      	cmp	r3, #1
 8001856:	d117      	bne.n	8001888 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	330c      	adds	r3, #12
 800185e:	001a      	movs	r2, r3
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001864:	7812      	ldrb	r2, [r2, #0]
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	1c5a      	adds	r2, r3, #1
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2246      	movs	r2, #70	; 0x46
 8001878:	5a9b      	ldrh	r3, [r3, r2]
 800187a:	b29b      	uxth	r3, r3
 800187c:	3b01      	subs	r3, #1
 800187e:	b299      	uxth	r1, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2246      	movs	r2, #70	; 0x46
 8001884:	5299      	strh	r1, [r3, r2]
 8001886:	e016      	b.n	80018b6 <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001888:	f7fe ffa6 	bl	80007d8 <HAL_GetTick>
 800188c:	0002      	movs	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	683a      	ldr	r2, [r7, #0]
 8001894:	429a      	cmp	r2, r3
 8001896:	d802      	bhi.n	800189e <HAL_SPI_Receive+0x1ba>
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	3301      	adds	r3, #1
 800189c:	d102      	bne.n	80018a4 <HAL_SPI_Receive+0x1c0>
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d108      	bne.n	80018b6 <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 80018a4:	2317      	movs	r3, #23
 80018a6:	18fb      	adds	r3, r7, r3
 80018a8:	2203      	movs	r2, #3
 80018aa:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	225d      	movs	r2, #93	; 0x5d
 80018b0:	2101      	movs	r1, #1
 80018b2:	5499      	strb	r1, [r3, r2]
          goto error;
 80018b4:	e058      	b.n	8001968 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2246      	movs	r2, #70	; 0x46
 80018ba:	5a9b      	ldrh	r3, [r3, r2]
 80018bc:	b29b      	uxth	r3, r3
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d1c3      	bne.n	800184a <HAL_SPI_Receive+0x166>
 80018c2:	e039      	b.n	8001938 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	2201      	movs	r2, #1
 80018cc:	4013      	ands	r3, r2
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d115      	bne.n	80018fe <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	68da      	ldr	r2, [r3, #12]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018dc:	b292      	uxth	r2, r2
 80018de:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e4:	1c9a      	adds	r2, r3, #2
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2246      	movs	r2, #70	; 0x46
 80018ee:	5a9b      	ldrh	r3, [r3, r2]
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	3b01      	subs	r3, #1
 80018f4:	b299      	uxth	r1, r3
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2246      	movs	r2, #70	; 0x46
 80018fa:	5299      	strh	r1, [r3, r2]
 80018fc:	e016      	b.n	800192c <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80018fe:	f7fe ff6b 	bl	80007d8 <HAL_GetTick>
 8001902:	0002      	movs	r2, r0
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	683a      	ldr	r2, [r7, #0]
 800190a:	429a      	cmp	r2, r3
 800190c:	d802      	bhi.n	8001914 <HAL_SPI_Receive+0x230>
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	3301      	adds	r3, #1
 8001912:	d102      	bne.n	800191a <HAL_SPI_Receive+0x236>
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d108      	bne.n	800192c <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 800191a:	2317      	movs	r3, #23
 800191c:	18fb      	adds	r3, r7, r3
 800191e:	2203      	movs	r2, #3
 8001920:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	225d      	movs	r2, #93	; 0x5d
 8001926:	2101      	movs	r1, #1
 8001928:	5499      	strb	r1, [r3, r2]
          goto error;
 800192a:	e01d      	b.n	8001968 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2246      	movs	r2, #70	; 0x46
 8001930:	5a9b      	ldrh	r3, [r3, r2]
 8001932:	b29b      	uxth	r3, r3
 8001934:	2b00      	cmp	r3, #0
 8001936:	d1c5      	bne.n	80018c4 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001938:	693a      	ldr	r2, [r7, #16]
 800193a:	6839      	ldr	r1, [r7, #0]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	0018      	movs	r0, r3
 8001940:	f000 fb34 	bl	8001fac <SPI_EndRxTransaction>
 8001944:	1e03      	subs	r3, r0, #0
 8001946:	d002      	beq.n	800194e <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2220      	movs	r2, #32
 800194c:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001952:	2b00      	cmp	r3, #0
 8001954:	d004      	beq.n	8001960 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 8001956:	2317      	movs	r3, #23
 8001958:	18fb      	adds	r3, r7, r3
 800195a:	2201      	movs	r2, #1
 800195c:	701a      	strb	r2, [r3, #0]
 800195e:	e003      	b.n	8001968 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	225d      	movs	r2, #93	; 0x5d
 8001964:	2101      	movs	r1, #1
 8001966:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	225c      	movs	r2, #92	; 0x5c
 800196c:	2100      	movs	r1, #0
 800196e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001970:	2317      	movs	r3, #23
 8001972:	18fb      	adds	r3, r7, r3
 8001974:	781b      	ldrb	r3, [r3, #0]
}
 8001976:	0018      	movs	r0, r3
 8001978:	46bd      	mov	sp, r7
 800197a:	b007      	add	sp, #28
 800197c:	bd90      	pop	{r4, r7, pc}
 800197e:	46c0      	nop			; (mov r8, r8)
 8001980:	ffffefff 	.word	0xffffefff
 8001984:	ffffbfff 	.word	0xffffbfff

08001988 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b08a      	sub	sp, #40	; 0x28
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
 8001994:	001a      	movs	r2, r3
 8001996:	1cbb      	adds	r3, r7, #2
 8001998:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800199a:	2301      	movs	r3, #1
 800199c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800199e:	2323      	movs	r3, #35	; 0x23
 80019a0:	18fb      	adds	r3, r7, r3
 80019a2:	2200      	movs	r2, #0
 80019a4:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	225c      	movs	r2, #92	; 0x5c
 80019aa:	5c9b      	ldrb	r3, [r3, r2]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d101      	bne.n	80019b4 <HAL_SPI_TransmitReceive+0x2c>
 80019b0:	2302      	movs	r3, #2
 80019b2:	e1c4      	b.n	8001d3e <HAL_SPI_TransmitReceive+0x3b6>
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	225c      	movs	r2, #92	; 0x5c
 80019b8:	2101      	movs	r1, #1
 80019ba:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80019bc:	f7fe ff0c 	bl	80007d8 <HAL_GetTick>
 80019c0:	0003      	movs	r3, r0
 80019c2:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80019c4:	201b      	movs	r0, #27
 80019c6:	183b      	adds	r3, r7, r0
 80019c8:	68fa      	ldr	r2, [r7, #12]
 80019ca:	215d      	movs	r1, #93	; 0x5d
 80019cc:	5c52      	ldrb	r2, [r2, r1]
 80019ce:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80019d6:	2312      	movs	r3, #18
 80019d8:	18fb      	adds	r3, r7, r3
 80019da:	1cba      	adds	r2, r7, #2
 80019dc:	8812      	ldrh	r2, [r2, #0]
 80019de:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80019e0:	183b      	adds	r3, r7, r0
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d011      	beq.n	8001a0c <HAL_SPI_TransmitReceive+0x84>
 80019e8:	697a      	ldr	r2, [r7, #20]
 80019ea:	2382      	movs	r3, #130	; 0x82
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d107      	bne.n	8001a02 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d103      	bne.n	8001a02 <HAL_SPI_TransmitReceive+0x7a>
 80019fa:	183b      	adds	r3, r7, r0
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	2b04      	cmp	r3, #4
 8001a00:	d004      	beq.n	8001a0c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8001a02:	2323      	movs	r3, #35	; 0x23
 8001a04:	18fb      	adds	r3, r7, r3
 8001a06:	2202      	movs	r2, #2
 8001a08:	701a      	strb	r2, [r3, #0]
    goto error;
 8001a0a:	e191      	b.n	8001d30 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d006      	beq.n	8001a20 <HAL_SPI_TransmitReceive+0x98>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d003      	beq.n	8001a20 <HAL_SPI_TransmitReceive+0x98>
 8001a18:	1cbb      	adds	r3, r7, #2
 8001a1a:	881b      	ldrh	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d104      	bne.n	8001a2a <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8001a20:	2323      	movs	r3, #35	; 0x23
 8001a22:	18fb      	adds	r3, r7, r3
 8001a24:	2201      	movs	r2, #1
 8001a26:	701a      	strb	r2, [r3, #0]
    goto error;
 8001a28:	e182      	b.n	8001d30 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	225d      	movs	r2, #93	; 0x5d
 8001a2e:	5c9b      	ldrb	r3, [r3, r2]
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b04      	cmp	r3, #4
 8001a34:	d003      	beq.n	8001a3e <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	225d      	movs	r2, #93	; 0x5d
 8001a3a:	2105      	movs	r1, #5
 8001a3c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2200      	movs	r2, #0
 8001a42:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	1cba      	adds	r2, r7, #2
 8001a4e:	2146      	movs	r1, #70	; 0x46
 8001a50:	8812      	ldrh	r2, [r2, #0]
 8001a52:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	1cba      	adds	r2, r7, #2
 8001a58:	2144      	movs	r1, #68	; 0x44
 8001a5a:	8812      	ldrh	r2, [r2, #0]
 8001a5c:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	68ba      	ldr	r2, [r7, #8]
 8001a62:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	1cba      	adds	r2, r7, #2
 8001a68:	8812      	ldrh	r2, [r2, #0]
 8001a6a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	1cba      	adds	r2, r7, #2
 8001a70:	8812      	ldrh	r2, [r2, #0]
 8001a72:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2200      	movs	r2, #0
 8001a78:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	68da      	ldr	r2, [r3, #12]
 8001a84:	23e0      	movs	r3, #224	; 0xe0
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d908      	bls.n	8001a9e <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	685a      	ldr	r2, [r3, #4]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	49ac      	ldr	r1, [pc, #688]	; (8001d48 <HAL_SPI_TransmitReceive+0x3c0>)
 8001a98:	400a      	ands	r2, r1
 8001a9a:	605a      	str	r2, [r3, #4]
 8001a9c:	e008      	b.n	8001ab0 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	685a      	ldr	r2, [r3, #4]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2180      	movs	r1, #128	; 0x80
 8001aaa:	0149      	lsls	r1, r1, #5
 8001aac:	430a      	orrs	r2, r1
 8001aae:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2240      	movs	r2, #64	; 0x40
 8001ab8:	4013      	ands	r3, r2
 8001aba:	2b40      	cmp	r3, #64	; 0x40
 8001abc:	d007      	beq.n	8001ace <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2140      	movs	r1, #64	; 0x40
 8001aca:	430a      	orrs	r2, r1
 8001acc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	68da      	ldr	r2, [r3, #12]
 8001ad2:	23e0      	movs	r3, #224	; 0xe0
 8001ad4:	00db      	lsls	r3, r3, #3
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d800      	bhi.n	8001adc <HAL_SPI_TransmitReceive+0x154>
 8001ada:	e083      	b.n	8001be4 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d005      	beq.n	8001af0 <HAL_SPI_TransmitReceive+0x168>
 8001ae4:	2312      	movs	r3, #18
 8001ae6:	18fb      	adds	r3, r7, r3
 8001ae8:	881b      	ldrh	r3, [r3, #0]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d000      	beq.n	8001af0 <HAL_SPI_TransmitReceive+0x168>
 8001aee:	e06d      	b.n	8001bcc <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001af4:	881a      	ldrh	r2, [r3, #0]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b00:	1c9a      	adds	r2, r3, #2
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001b14:	e05a      	b.n	8001bcc <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	2202      	movs	r2, #2
 8001b1e:	4013      	ands	r3, r2
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d11b      	bne.n	8001b5c <HAL_SPI_TransmitReceive+0x1d4>
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d016      	beq.n	8001b5c <HAL_SPI_TransmitReceive+0x1d4>
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d113      	bne.n	8001b5c <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b38:	881a      	ldrh	r2, [r3, #0]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b44:	1c9a      	adds	r2, r3, #2
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	3b01      	subs	r3, #1
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	2201      	movs	r2, #1
 8001b64:	4013      	ands	r3, r2
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d11c      	bne.n	8001ba4 <HAL_SPI_TransmitReceive+0x21c>
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2246      	movs	r2, #70	; 0x46
 8001b6e:	5a9b      	ldrh	r3, [r3, r2]
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d016      	beq.n	8001ba4 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	68da      	ldr	r2, [r3, #12]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b80:	b292      	uxth	r2, r2
 8001b82:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b88:	1c9a      	adds	r2, r3, #2
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2246      	movs	r2, #70	; 0x46
 8001b92:	5a9b      	ldrh	r3, [r3, r2]
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	3b01      	subs	r3, #1
 8001b98:	b299      	uxth	r1, r3
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2246      	movs	r2, #70	; 0x46
 8001b9e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001ba4:	f7fe fe18 	bl	80007d8 <HAL_GetTick>
 8001ba8:	0002      	movs	r2, r0
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d80b      	bhi.n	8001bcc <HAL_SPI_TransmitReceive+0x244>
 8001bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	d008      	beq.n	8001bcc <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8001bba:	2323      	movs	r3, #35	; 0x23
 8001bbc:	18fb      	adds	r3, r7, r3
 8001bbe:	2203      	movs	r2, #3
 8001bc0:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	225d      	movs	r2, #93	; 0x5d
 8001bc6:	2101      	movs	r1, #1
 8001bc8:	5499      	strb	r1, [r3, r2]
        goto error;
 8001bca:	e0b1      	b.n	8001d30 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d19f      	bne.n	8001b16 <HAL_SPI_TransmitReceive+0x18e>
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2246      	movs	r2, #70	; 0x46
 8001bda:	5a9b      	ldrh	r3, [r3, r2]
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d199      	bne.n	8001b16 <HAL_SPI_TransmitReceive+0x18e>
 8001be2:	e089      	b.n	8001cf8 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d005      	beq.n	8001bf8 <HAL_SPI_TransmitReceive+0x270>
 8001bec:	2312      	movs	r3, #18
 8001bee:	18fb      	adds	r3, r7, r3
 8001bf0:	881b      	ldrh	r3, [r3, #0]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d000      	beq.n	8001bf8 <HAL_SPI_TransmitReceive+0x270>
 8001bf6:	e074      	b.n	8001ce2 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	330c      	adds	r3, #12
 8001c02:	7812      	ldrb	r2, [r2, #0]
 8001c04:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c0a:	1c5a      	adds	r2, r3, #1
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	3b01      	subs	r3, #1
 8001c18:	b29a      	uxth	r2, r3
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001c1e:	e060      	b.n	8001ce2 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	2202      	movs	r2, #2
 8001c28:	4013      	ands	r3, r2
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d11c      	bne.n	8001c68 <HAL_SPI_TransmitReceive+0x2e0>
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d017      	beq.n	8001c68 <HAL_SPI_TransmitReceive+0x2e0>
 8001c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d114      	bne.n	8001c68 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	330c      	adds	r3, #12
 8001c48:	7812      	ldrb	r2, [r2, #0]
 8001c4a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c50:	1c5a      	adds	r2, r3, #1
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	3b01      	subs	r3, #1
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001c64:	2300      	movs	r3, #0
 8001c66:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	4013      	ands	r3, r2
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d11e      	bne.n	8001cb4 <HAL_SPI_TransmitReceive+0x32c>
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2246      	movs	r2, #70	; 0x46
 8001c7a:	5a9b      	ldrh	r3, [r3, r2]
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d018      	beq.n	8001cb4 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	330c      	adds	r3, #12
 8001c88:	001a      	movs	r2, r3
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	7812      	ldrb	r2, [r2, #0]
 8001c90:	b2d2      	uxtb	r2, r2
 8001c92:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c98:	1c5a      	adds	r2, r3, #1
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2246      	movs	r2, #70	; 0x46
 8001ca2:	5a9b      	ldrh	r3, [r3, r2]
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	b299      	uxth	r1, r3
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2246      	movs	r2, #70	; 0x46
 8001cae:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001cb4:	f7fe fd90 	bl	80007d8 <HAL_GetTick>
 8001cb8:	0002      	movs	r2, r0
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d802      	bhi.n	8001cca <HAL_SPI_TransmitReceive+0x342>
 8001cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	d102      	bne.n	8001cd0 <HAL_SPI_TransmitReceive+0x348>
 8001cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d108      	bne.n	8001ce2 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8001cd0:	2323      	movs	r3, #35	; 0x23
 8001cd2:	18fb      	adds	r3, r7, r3
 8001cd4:	2203      	movs	r2, #3
 8001cd6:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	225d      	movs	r2, #93	; 0x5d
 8001cdc:	2101      	movs	r1, #1
 8001cde:	5499      	strb	r1, [r3, r2]
        goto error;
 8001ce0:	e026      	b.n	8001d30 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d199      	bne.n	8001c20 <HAL_SPI_TransmitReceive+0x298>
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2246      	movs	r2, #70	; 0x46
 8001cf0:	5a9b      	ldrh	r3, [r3, r2]
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d193      	bne.n	8001c20 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001cf8:	69fa      	ldr	r2, [r7, #28]
 8001cfa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	0018      	movs	r0, r3
 8001d00:	f000 f9b2 	bl	8002068 <SPI_EndRxTxTransaction>
 8001d04:	1e03      	subs	r3, r0, #0
 8001d06:	d006      	beq.n	8001d16 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8001d08:	2323      	movs	r3, #35	; 0x23
 8001d0a:	18fb      	adds	r3, r7, r3
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2220      	movs	r2, #32
 8001d14:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d004      	beq.n	8001d28 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8001d1e:	2323      	movs	r3, #35	; 0x23
 8001d20:	18fb      	adds	r3, r7, r3
 8001d22:	2201      	movs	r2, #1
 8001d24:	701a      	strb	r2, [r3, #0]
 8001d26:	e003      	b.n	8001d30 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	225d      	movs	r2, #93	; 0x5d
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	225c      	movs	r2, #92	; 0x5c
 8001d34:	2100      	movs	r1, #0
 8001d36:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001d38:	2323      	movs	r3, #35	; 0x23
 8001d3a:	18fb      	adds	r3, r7, r3
 8001d3c:	781b      	ldrb	r3, [r3, #0]
}
 8001d3e:	0018      	movs	r0, r3
 8001d40:	46bd      	mov	sp, r7
 8001d42:	b00a      	add	sp, #40	; 0x28
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	46c0      	nop			; (mov r8, r8)
 8001d48:	ffffefff 	.word	0xffffefff

08001d4c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b088      	sub	sp, #32
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	603b      	str	r3, [r7, #0]
 8001d58:	1dfb      	adds	r3, r7, #7
 8001d5a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001d5c:	f7fe fd3c 	bl	80007d8 <HAL_GetTick>
 8001d60:	0002      	movs	r2, r0
 8001d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d64:	1a9b      	subs	r3, r3, r2
 8001d66:	683a      	ldr	r2, [r7, #0]
 8001d68:	18d3      	adds	r3, r2, r3
 8001d6a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001d6c:	f7fe fd34 	bl	80007d8 <HAL_GetTick>
 8001d70:	0003      	movs	r3, r0
 8001d72:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001d74:	4b3a      	ldr	r3, [pc, #232]	; (8001e60 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	015b      	lsls	r3, r3, #5
 8001d7a:	0d1b      	lsrs	r3, r3, #20
 8001d7c:	69fa      	ldr	r2, [r7, #28]
 8001d7e:	4353      	muls	r3, r2
 8001d80:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001d82:	e058      	b.n	8001e36 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	3301      	adds	r3, #1
 8001d88:	d055      	beq.n	8001e36 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001d8a:	f7fe fd25 	bl	80007d8 <HAL_GetTick>
 8001d8e:	0002      	movs	r2, r0
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	69fa      	ldr	r2, [r7, #28]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d902      	bls.n	8001da0 <SPI_WaitFlagStateUntilTimeout+0x54>
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d142      	bne.n	8001e26 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	685a      	ldr	r2, [r3, #4]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	21e0      	movs	r1, #224	; 0xe0
 8001dac:	438a      	bics	r2, r1
 8001dae:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	685a      	ldr	r2, [r3, #4]
 8001db4:	2382      	movs	r3, #130	; 0x82
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d113      	bne.n	8001de4 <SPI_WaitFlagStateUntilTimeout+0x98>
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	689a      	ldr	r2, [r3, #8]
 8001dc0:	2380      	movs	r3, #128	; 0x80
 8001dc2:	021b      	lsls	r3, r3, #8
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d005      	beq.n	8001dd4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	2380      	movs	r3, #128	; 0x80
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d107      	bne.n	8001de4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2140      	movs	r1, #64	; 0x40
 8001de0:	438a      	bics	r2, r1
 8001de2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001de8:	2380      	movs	r3, #128	; 0x80
 8001dea:	019b      	lsls	r3, r3, #6
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d110      	bne.n	8001e12 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	491a      	ldr	r1, [pc, #104]	; (8001e64 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8001dfc:	400a      	ands	r2, r1
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2180      	movs	r1, #128	; 0x80
 8001e0c:	0189      	lsls	r1, r1, #6
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	225d      	movs	r2, #93	; 0x5d
 8001e16:	2101      	movs	r1, #1
 8001e18:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	225c      	movs	r2, #92	; 0x5c
 8001e1e:	2100      	movs	r1, #0
 8001e20:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e017      	b.n	8001e56 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d101      	bne.n	8001e30 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	3b01      	subs	r3, #1
 8001e34:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	68ba      	ldr	r2, [r7, #8]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	68ba      	ldr	r2, [r7, #8]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	425a      	negs	r2, r3
 8001e46:	4153      	adcs	r3, r2
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	001a      	movs	r2, r3
 8001e4c:	1dfb      	adds	r3, r7, #7
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d197      	bne.n	8001d84 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	0018      	movs	r0, r3
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	b008      	add	sp, #32
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	46c0      	nop			; (mov r8, r8)
 8001e60:	20000000 	.word	0x20000000
 8001e64:	ffffdfff 	.word	0xffffdfff

08001e68 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b08a      	sub	sp, #40	; 0x28
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
 8001e74:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8001e76:	2317      	movs	r3, #23
 8001e78:	18fb      	adds	r3, r7, r3
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8001e7e:	f7fe fcab 	bl	80007d8 <HAL_GetTick>
 8001e82:	0002      	movs	r2, r0
 8001e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e86:	1a9b      	subs	r3, r3, r2
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	18d3      	adds	r3, r2, r3
 8001e8c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8001e8e:	f7fe fca3 	bl	80007d8 <HAL_GetTick>
 8001e92:	0003      	movs	r3, r0
 8001e94:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	330c      	adds	r3, #12
 8001e9c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8001e9e:	4b41      	ldr	r3, [pc, #260]	; (8001fa4 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	0013      	movs	r3, r2
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	189b      	adds	r3, r3, r2
 8001ea8:	00da      	lsls	r2, r3, #3
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	0d1b      	lsrs	r3, r3, #20
 8001eae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eb0:	4353      	muls	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8001eb4:	e068      	b.n	8001f88 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001eb6:	68ba      	ldr	r2, [r7, #8]
 8001eb8:	23c0      	movs	r3, #192	; 0xc0
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d10a      	bne.n	8001ed6 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d107      	bne.n	8001ed6 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	b2da      	uxtb	r2, r3
 8001ecc:	2117      	movs	r1, #23
 8001ece:	187b      	adds	r3, r7, r1
 8001ed0:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8001ed2:	187b      	adds	r3, r7, r1
 8001ed4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	d055      	beq.n	8001f88 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001edc:	f7fe fc7c 	bl	80007d8 <HAL_GetTick>
 8001ee0:	0002      	movs	r2, r0
 8001ee2:	6a3b      	ldr	r3, [r7, #32]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d902      	bls.n	8001ef2 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8001eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d142      	bne.n	8001f78 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	685a      	ldr	r2, [r3, #4]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	21e0      	movs	r1, #224	; 0xe0
 8001efe:	438a      	bics	r2, r1
 8001f00:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	685a      	ldr	r2, [r3, #4]
 8001f06:	2382      	movs	r3, #130	; 0x82
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d113      	bne.n	8001f36 <SPI_WaitFifoStateUntilTimeout+0xce>
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	689a      	ldr	r2, [r3, #8]
 8001f12:	2380      	movs	r3, #128	; 0x80
 8001f14:	021b      	lsls	r3, r3, #8
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d005      	beq.n	8001f26 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	689a      	ldr	r2, [r3, #8]
 8001f1e:	2380      	movs	r3, #128	; 0x80
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d107      	bne.n	8001f36 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2140      	movs	r1, #64	; 0x40
 8001f32:	438a      	bics	r2, r1
 8001f34:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f3a:	2380      	movs	r3, #128	; 0x80
 8001f3c:	019b      	lsls	r3, r3, #6
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d110      	bne.n	8001f64 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4916      	ldr	r1, [pc, #88]	; (8001fa8 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8001f4e:	400a      	ands	r2, r1
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2180      	movs	r1, #128	; 0x80
 8001f5e:	0189      	lsls	r1, r1, #6
 8001f60:	430a      	orrs	r2, r1
 8001f62:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	225d      	movs	r2, #93	; 0x5d
 8001f68:	2101      	movs	r1, #1
 8001f6a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	225c      	movs	r2, #92	; 0x5c
 8001f70:	2100      	movs	r1, #0
 8001f72:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e010      	b.n	8001f9a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	3b01      	subs	r3, #1
 8001f86:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	68ba      	ldr	r2, [r7, #8]
 8001f90:	4013      	ands	r3, r2
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d18e      	bne.n	8001eb6 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	0018      	movs	r0, r3
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	b00a      	add	sp, #40	; 0x28
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	46c0      	nop			; (mov r8, r8)
 8001fa4:	20000000 	.word	0x20000000
 8001fa8:	ffffdfff 	.word	0xffffdfff

08001fac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af02      	add	r7, sp, #8
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	685a      	ldr	r2, [r3, #4]
 8001fbc:	2382      	movs	r3, #130	; 0x82
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d113      	bne.n	8001fec <SPI_EndRxTransaction+0x40>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	2380      	movs	r3, #128	; 0x80
 8001fca:	021b      	lsls	r3, r3, #8
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d005      	beq.n	8001fdc <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	689a      	ldr	r2, [r3, #8]
 8001fd4:	2380      	movs	r3, #128	; 0x80
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d107      	bne.n	8001fec <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2140      	movs	r1, #64	; 0x40
 8001fe8:	438a      	bics	r2, r1
 8001fea:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001fec:	68ba      	ldr	r2, [r7, #8]
 8001fee:	68f8      	ldr	r0, [r7, #12]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	9300      	str	r3, [sp, #0]
 8001ff4:	0013      	movs	r3, r2
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	2180      	movs	r1, #128	; 0x80
 8001ffa:	f7ff fea7 	bl	8001d4c <SPI_WaitFlagStateUntilTimeout>
 8001ffe:	1e03      	subs	r3, r0, #0
 8002000:	d007      	beq.n	8002012 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002006:	2220      	movs	r2, #32
 8002008:	431a      	orrs	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e026      	b.n	8002060 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	685a      	ldr	r2, [r3, #4]
 8002016:	2382      	movs	r3, #130	; 0x82
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	429a      	cmp	r2, r3
 800201c:	d11f      	bne.n	800205e <SPI_EndRxTransaction+0xb2>
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	689a      	ldr	r2, [r3, #8]
 8002022:	2380      	movs	r3, #128	; 0x80
 8002024:	021b      	lsls	r3, r3, #8
 8002026:	429a      	cmp	r2, r3
 8002028:	d005      	beq.n	8002036 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	689a      	ldr	r2, [r3, #8]
 800202e:	2380      	movs	r3, #128	; 0x80
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	429a      	cmp	r2, r3
 8002034:	d113      	bne.n	800205e <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002036:	68ba      	ldr	r2, [r7, #8]
 8002038:	23c0      	movs	r3, #192	; 0xc0
 800203a:	00d9      	lsls	r1, r3, #3
 800203c:	68f8      	ldr	r0, [r7, #12]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	9300      	str	r3, [sp, #0]
 8002042:	0013      	movs	r3, r2
 8002044:	2200      	movs	r2, #0
 8002046:	f7ff ff0f 	bl	8001e68 <SPI_WaitFifoStateUntilTimeout>
 800204a:	1e03      	subs	r3, r0, #0
 800204c:	d007      	beq.n	800205e <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002052:	2220      	movs	r2, #32
 8002054:	431a      	orrs	r2, r3
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e000      	b.n	8002060 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800205e:	2300      	movs	r3, #0
}
 8002060:	0018      	movs	r0, r3
 8002062:	46bd      	mov	sp, r7
 8002064:	b004      	add	sp, #16
 8002066:	bd80      	pop	{r7, pc}

08002068 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af02      	add	r7, sp, #8
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002074:	68ba      	ldr	r2, [r7, #8]
 8002076:	23c0      	movs	r3, #192	; 0xc0
 8002078:	0159      	lsls	r1, r3, #5
 800207a:	68f8      	ldr	r0, [r7, #12]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	9300      	str	r3, [sp, #0]
 8002080:	0013      	movs	r3, r2
 8002082:	2200      	movs	r2, #0
 8002084:	f7ff fef0 	bl	8001e68 <SPI_WaitFifoStateUntilTimeout>
 8002088:	1e03      	subs	r3, r0, #0
 800208a:	d007      	beq.n	800209c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002090:	2220      	movs	r2, #32
 8002092:	431a      	orrs	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e027      	b.n	80020ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800209c:	68ba      	ldr	r2, [r7, #8]
 800209e:	68f8      	ldr	r0, [r7, #12]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	9300      	str	r3, [sp, #0]
 80020a4:	0013      	movs	r3, r2
 80020a6:	2200      	movs	r2, #0
 80020a8:	2180      	movs	r1, #128	; 0x80
 80020aa:	f7ff fe4f 	bl	8001d4c <SPI_WaitFlagStateUntilTimeout>
 80020ae:	1e03      	subs	r3, r0, #0
 80020b0:	d007      	beq.n	80020c2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020b6:	2220      	movs	r2, #32
 80020b8:	431a      	orrs	r2, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e014      	b.n	80020ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80020c2:	68ba      	ldr	r2, [r7, #8]
 80020c4:	23c0      	movs	r3, #192	; 0xc0
 80020c6:	00d9      	lsls	r1, r3, #3
 80020c8:	68f8      	ldr	r0, [r7, #12]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	9300      	str	r3, [sp, #0]
 80020ce:	0013      	movs	r3, r2
 80020d0:	2200      	movs	r2, #0
 80020d2:	f7ff fec9 	bl	8001e68 <SPI_WaitFifoStateUntilTimeout>
 80020d6:	1e03      	subs	r3, r0, #0
 80020d8:	d007      	beq.n	80020ea <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020de:	2220      	movs	r2, #32
 80020e0:	431a      	orrs	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e000      	b.n	80020ec <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	0018      	movs	r0, r3
 80020ee:	46bd      	mov	sp, r7
 80020f0:	b004      	add	sp, #16
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e044      	b.n	8002190 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800210a:	2b00      	cmp	r3, #0
 800210c:	d107      	bne.n	800211e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2278      	movs	r2, #120	; 0x78
 8002112:	2100      	movs	r1, #0
 8002114:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	0018      	movs	r0, r3
 800211a:	f7fe fa39 	bl	8000590 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2224      	movs	r2, #36	; 0x24
 8002122:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2101      	movs	r1, #1
 8002130:	438a      	bics	r2, r1
 8002132:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002138:	2b00      	cmp	r3, #0
 800213a:	d003      	beq.n	8002144 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	0018      	movs	r0, r3
 8002140:	f000 fa0c 	bl	800255c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	0018      	movs	r0, r3
 8002148:	f000 f8c8 	bl	80022dc <UART_SetConfig>
 800214c:	0003      	movs	r3, r0
 800214e:	2b01      	cmp	r3, #1
 8002150:	d101      	bne.n	8002156 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e01c      	b.n	8002190 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	685a      	ldr	r2, [r3, #4]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	490d      	ldr	r1, [pc, #52]	; (8002198 <HAL_UART_Init+0xa4>)
 8002162:	400a      	ands	r2, r1
 8002164:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	212a      	movs	r1, #42	; 0x2a
 8002172:	438a      	bics	r2, r1
 8002174:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2101      	movs	r1, #1
 8002182:	430a      	orrs	r2, r1
 8002184:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	0018      	movs	r0, r3
 800218a:	f000 fa9b 	bl	80026c4 <UART_CheckIdleState>
 800218e:	0003      	movs	r3, r0
}
 8002190:	0018      	movs	r0, r3
 8002192:	46bd      	mov	sp, r7
 8002194:	b002      	add	sp, #8
 8002196:	bd80      	pop	{r7, pc}
 8002198:	ffffb7ff 	.word	0xffffb7ff

0800219c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b08a      	sub	sp, #40	; 0x28
 80021a0:	af02      	add	r7, sp, #8
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	603b      	str	r3, [r7, #0]
 80021a8:	1dbb      	adds	r3, r7, #6
 80021aa:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021b0:	2b20      	cmp	r3, #32
 80021b2:	d000      	beq.n	80021b6 <HAL_UART_Transmit+0x1a>
 80021b4:	e08d      	b.n	80022d2 <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d003      	beq.n	80021c4 <HAL_UART_Transmit+0x28>
 80021bc:	1dbb      	adds	r3, r7, #6
 80021be:	881b      	ldrh	r3, [r3, #0]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d101      	bne.n	80021c8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e085      	b.n	80022d4 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	2380      	movs	r3, #128	; 0x80
 80021ce:	015b      	lsls	r3, r3, #5
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d109      	bne.n	80021e8 <HAL_UART_Transmit+0x4c>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	691b      	ldr	r3, [r3, #16]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d105      	bne.n	80021e8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	2201      	movs	r2, #1
 80021e0:	4013      	ands	r3, r2
 80021e2:	d001      	beq.n	80021e8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e075      	b.n	80022d4 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2284      	movs	r2, #132	; 0x84
 80021ec:	2100      	movs	r1, #0
 80021ee:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2221      	movs	r2, #33	; 0x21
 80021f4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021f6:	f7fe faef 	bl	80007d8 <HAL_GetTick>
 80021fa:	0003      	movs	r3, r0
 80021fc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	1dba      	adds	r2, r7, #6
 8002202:	2150      	movs	r1, #80	; 0x50
 8002204:	8812      	ldrh	r2, [r2, #0]
 8002206:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	1dba      	adds	r2, r7, #6
 800220c:	2152      	movs	r1, #82	; 0x52
 800220e:	8812      	ldrh	r2, [r2, #0]
 8002210:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	689a      	ldr	r2, [r3, #8]
 8002216:	2380      	movs	r3, #128	; 0x80
 8002218:	015b      	lsls	r3, r3, #5
 800221a:	429a      	cmp	r2, r3
 800221c:	d108      	bne.n	8002230 <HAL_UART_Transmit+0x94>
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d104      	bne.n	8002230 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8002226:	2300      	movs	r3, #0
 8002228:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	61bb      	str	r3, [r7, #24]
 800222e:	e003      	b.n	8002238 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002234:	2300      	movs	r3, #0
 8002236:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002238:	e030      	b.n	800229c <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800223a:	697a      	ldr	r2, [r7, #20]
 800223c:	68f8      	ldr	r0, [r7, #12]
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	9300      	str	r3, [sp, #0]
 8002242:	0013      	movs	r3, r2
 8002244:	2200      	movs	r2, #0
 8002246:	2180      	movs	r1, #128	; 0x80
 8002248:	f000 fae4 	bl	8002814 <UART_WaitOnFlagUntilTimeout>
 800224c:	1e03      	subs	r3, r0, #0
 800224e:	d004      	beq.n	800225a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2220      	movs	r2, #32
 8002254:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e03c      	b.n	80022d4 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d10b      	bne.n	8002278 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	881a      	ldrh	r2, [r3, #0]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	05d2      	lsls	r2, r2, #23
 800226a:	0dd2      	lsrs	r2, r2, #23
 800226c:	b292      	uxth	r2, r2
 800226e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	3302      	adds	r3, #2
 8002274:	61bb      	str	r3, [r7, #24]
 8002276:	e008      	b.n	800228a <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	781a      	ldrb	r2, [r3, #0]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	b292      	uxth	r2, r2
 8002282:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	3301      	adds	r3, #1
 8002288:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2252      	movs	r2, #82	; 0x52
 800228e:	5a9b      	ldrh	r3, [r3, r2]
 8002290:	b29b      	uxth	r3, r3
 8002292:	3b01      	subs	r3, #1
 8002294:	b299      	uxth	r1, r3
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2252      	movs	r2, #82	; 0x52
 800229a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2252      	movs	r2, #82	; 0x52
 80022a0:	5a9b      	ldrh	r3, [r3, r2]
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d1c8      	bne.n	800223a <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022a8:	697a      	ldr	r2, [r7, #20]
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	9300      	str	r3, [sp, #0]
 80022b0:	0013      	movs	r3, r2
 80022b2:	2200      	movs	r2, #0
 80022b4:	2140      	movs	r1, #64	; 0x40
 80022b6:	f000 faad 	bl	8002814 <UART_WaitOnFlagUntilTimeout>
 80022ba:	1e03      	subs	r3, r0, #0
 80022bc:	d004      	beq.n	80022c8 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2220      	movs	r2, #32
 80022c2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e005      	b.n	80022d4 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2220      	movs	r2, #32
 80022cc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80022ce:	2300      	movs	r3, #0
 80022d0:	e000      	b.n	80022d4 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 80022d2:	2302      	movs	r3, #2
  }
}
 80022d4:	0018      	movs	r0, r3
 80022d6:	46bd      	mov	sp, r7
 80022d8:	b008      	add	sp, #32
 80022da:	bd80      	pop	{r7, pc}

080022dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b088      	sub	sp, #32
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80022e4:	231e      	movs	r3, #30
 80022e6:	18fb      	adds	r3, r7, r3
 80022e8:	2200      	movs	r2, #0
 80022ea:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	431a      	orrs	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	431a      	orrs	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	69db      	ldr	r3, [r3, #28]
 8002300:	4313      	orrs	r3, r2
 8002302:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a8d      	ldr	r2, [pc, #564]	; (8002540 <UART_SetConfig+0x264>)
 800230c:	4013      	ands	r3, r2
 800230e:	0019      	movs	r1, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	697a      	ldr	r2, [r7, #20]
 8002316:	430a      	orrs	r2, r1
 8002318:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	4a88      	ldr	r2, [pc, #544]	; (8002544 <UART_SetConfig+0x268>)
 8002322:	4013      	ands	r3, r2
 8002324:	0019      	movs	r1, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	68da      	ldr	r2, [r3, #12]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	430a      	orrs	r2, r1
 8002330:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a1b      	ldr	r3, [r3, #32]
 800233c:	697a      	ldr	r2, [r7, #20]
 800233e:	4313      	orrs	r3, r2
 8002340:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	4a7f      	ldr	r2, [pc, #508]	; (8002548 <UART_SetConfig+0x26c>)
 800234a:	4013      	ands	r3, r2
 800234c:	0019      	movs	r1, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	697a      	ldr	r2, [r7, #20]
 8002354:	430a      	orrs	r2, r1
 8002356:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a7b      	ldr	r2, [pc, #492]	; (800254c <UART_SetConfig+0x270>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d127      	bne.n	80023b2 <UART_SetConfig+0xd6>
 8002362:	4b7b      	ldr	r3, [pc, #492]	; (8002550 <UART_SetConfig+0x274>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	2203      	movs	r2, #3
 8002368:	4013      	ands	r3, r2
 800236a:	2b03      	cmp	r3, #3
 800236c:	d00d      	beq.n	800238a <UART_SetConfig+0xae>
 800236e:	d81b      	bhi.n	80023a8 <UART_SetConfig+0xcc>
 8002370:	2b02      	cmp	r3, #2
 8002372:	d014      	beq.n	800239e <UART_SetConfig+0xc2>
 8002374:	d818      	bhi.n	80023a8 <UART_SetConfig+0xcc>
 8002376:	2b00      	cmp	r3, #0
 8002378:	d002      	beq.n	8002380 <UART_SetConfig+0xa4>
 800237a:	2b01      	cmp	r3, #1
 800237c:	d00a      	beq.n	8002394 <UART_SetConfig+0xb8>
 800237e:	e013      	b.n	80023a8 <UART_SetConfig+0xcc>
 8002380:	231f      	movs	r3, #31
 8002382:	18fb      	adds	r3, r7, r3
 8002384:	2200      	movs	r2, #0
 8002386:	701a      	strb	r2, [r3, #0]
 8002388:	e021      	b.n	80023ce <UART_SetConfig+0xf2>
 800238a:	231f      	movs	r3, #31
 800238c:	18fb      	adds	r3, r7, r3
 800238e:	2202      	movs	r2, #2
 8002390:	701a      	strb	r2, [r3, #0]
 8002392:	e01c      	b.n	80023ce <UART_SetConfig+0xf2>
 8002394:	231f      	movs	r3, #31
 8002396:	18fb      	adds	r3, r7, r3
 8002398:	2204      	movs	r2, #4
 800239a:	701a      	strb	r2, [r3, #0]
 800239c:	e017      	b.n	80023ce <UART_SetConfig+0xf2>
 800239e:	231f      	movs	r3, #31
 80023a0:	18fb      	adds	r3, r7, r3
 80023a2:	2208      	movs	r2, #8
 80023a4:	701a      	strb	r2, [r3, #0]
 80023a6:	e012      	b.n	80023ce <UART_SetConfig+0xf2>
 80023a8:	231f      	movs	r3, #31
 80023aa:	18fb      	adds	r3, r7, r3
 80023ac:	2210      	movs	r2, #16
 80023ae:	701a      	strb	r2, [r3, #0]
 80023b0:	e00d      	b.n	80023ce <UART_SetConfig+0xf2>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a67      	ldr	r2, [pc, #412]	; (8002554 <UART_SetConfig+0x278>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d104      	bne.n	80023c6 <UART_SetConfig+0xea>
 80023bc:	231f      	movs	r3, #31
 80023be:	18fb      	adds	r3, r7, r3
 80023c0:	2200      	movs	r2, #0
 80023c2:	701a      	strb	r2, [r3, #0]
 80023c4:	e003      	b.n	80023ce <UART_SetConfig+0xf2>
 80023c6:	231f      	movs	r3, #31
 80023c8:	18fb      	adds	r3, r7, r3
 80023ca:	2210      	movs	r2, #16
 80023cc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	69da      	ldr	r2, [r3, #28]
 80023d2:	2380      	movs	r3, #128	; 0x80
 80023d4:	021b      	lsls	r3, r3, #8
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d15c      	bne.n	8002494 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 80023da:	231f      	movs	r3, #31
 80023dc:	18fb      	adds	r3, r7, r3
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	2b08      	cmp	r3, #8
 80023e2:	d015      	beq.n	8002410 <UART_SetConfig+0x134>
 80023e4:	dc18      	bgt.n	8002418 <UART_SetConfig+0x13c>
 80023e6:	2b04      	cmp	r3, #4
 80023e8:	d00d      	beq.n	8002406 <UART_SetConfig+0x12a>
 80023ea:	dc15      	bgt.n	8002418 <UART_SetConfig+0x13c>
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d002      	beq.n	80023f6 <UART_SetConfig+0x11a>
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d005      	beq.n	8002400 <UART_SetConfig+0x124>
 80023f4:	e010      	b.n	8002418 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80023f6:	f7ff f8a7 	bl	8001548 <HAL_RCC_GetPCLK1Freq>
 80023fa:	0003      	movs	r3, r0
 80023fc:	61bb      	str	r3, [r7, #24]
        break;
 80023fe:	e012      	b.n	8002426 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002400:	4b55      	ldr	r3, [pc, #340]	; (8002558 <UART_SetConfig+0x27c>)
 8002402:	61bb      	str	r3, [r7, #24]
        break;
 8002404:	e00f      	b.n	8002426 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002406:	f7ff f83f 	bl	8001488 <HAL_RCC_GetSysClockFreq>
 800240a:	0003      	movs	r3, r0
 800240c:	61bb      	str	r3, [r7, #24]
        break;
 800240e:	e00a      	b.n	8002426 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002410:	2380      	movs	r3, #128	; 0x80
 8002412:	021b      	lsls	r3, r3, #8
 8002414:	61bb      	str	r3, [r7, #24]
        break;
 8002416:	e006      	b.n	8002426 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002418:	2300      	movs	r3, #0
 800241a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800241c:	231e      	movs	r3, #30
 800241e:	18fb      	adds	r3, r7, r3
 8002420:	2201      	movs	r2, #1
 8002422:	701a      	strb	r2, [r3, #0]
        break;
 8002424:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d100      	bne.n	800242e <UART_SetConfig+0x152>
 800242c:	e07a      	b.n	8002524 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	005a      	lsls	r2, r3, #1
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	085b      	lsrs	r3, r3, #1
 8002438:	18d2      	adds	r2, r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	0019      	movs	r1, r3
 8002440:	0010      	movs	r0, r2
 8002442:	f7fd fe73 	bl	800012c <__udivsi3>
 8002446:	0003      	movs	r3, r0
 8002448:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	2b0f      	cmp	r3, #15
 800244e:	d91c      	bls.n	800248a <UART_SetConfig+0x1ae>
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	2380      	movs	r3, #128	; 0x80
 8002454:	025b      	lsls	r3, r3, #9
 8002456:	429a      	cmp	r2, r3
 8002458:	d217      	bcs.n	800248a <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	b29a      	uxth	r2, r3
 800245e:	200e      	movs	r0, #14
 8002460:	183b      	adds	r3, r7, r0
 8002462:	210f      	movs	r1, #15
 8002464:	438a      	bics	r2, r1
 8002466:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	085b      	lsrs	r3, r3, #1
 800246c:	b29b      	uxth	r3, r3
 800246e:	2207      	movs	r2, #7
 8002470:	4013      	ands	r3, r2
 8002472:	b299      	uxth	r1, r3
 8002474:	183b      	adds	r3, r7, r0
 8002476:	183a      	adds	r2, r7, r0
 8002478:	8812      	ldrh	r2, [r2, #0]
 800247a:	430a      	orrs	r2, r1
 800247c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	183a      	adds	r2, r7, r0
 8002484:	8812      	ldrh	r2, [r2, #0]
 8002486:	60da      	str	r2, [r3, #12]
 8002488:	e04c      	b.n	8002524 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 800248a:	231e      	movs	r3, #30
 800248c:	18fb      	adds	r3, r7, r3
 800248e:	2201      	movs	r2, #1
 8002490:	701a      	strb	r2, [r3, #0]
 8002492:	e047      	b.n	8002524 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002494:	231f      	movs	r3, #31
 8002496:	18fb      	adds	r3, r7, r3
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	2b08      	cmp	r3, #8
 800249c:	d015      	beq.n	80024ca <UART_SetConfig+0x1ee>
 800249e:	dc18      	bgt.n	80024d2 <UART_SetConfig+0x1f6>
 80024a0:	2b04      	cmp	r3, #4
 80024a2:	d00d      	beq.n	80024c0 <UART_SetConfig+0x1e4>
 80024a4:	dc15      	bgt.n	80024d2 <UART_SetConfig+0x1f6>
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d002      	beq.n	80024b0 <UART_SetConfig+0x1d4>
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d005      	beq.n	80024ba <UART_SetConfig+0x1de>
 80024ae:	e010      	b.n	80024d2 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80024b0:	f7ff f84a 	bl	8001548 <HAL_RCC_GetPCLK1Freq>
 80024b4:	0003      	movs	r3, r0
 80024b6:	61bb      	str	r3, [r7, #24]
        break;
 80024b8:	e012      	b.n	80024e0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80024ba:	4b27      	ldr	r3, [pc, #156]	; (8002558 <UART_SetConfig+0x27c>)
 80024bc:	61bb      	str	r3, [r7, #24]
        break;
 80024be:	e00f      	b.n	80024e0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80024c0:	f7fe ffe2 	bl	8001488 <HAL_RCC_GetSysClockFreq>
 80024c4:	0003      	movs	r3, r0
 80024c6:	61bb      	str	r3, [r7, #24]
        break;
 80024c8:	e00a      	b.n	80024e0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80024ca:	2380      	movs	r3, #128	; 0x80
 80024cc:	021b      	lsls	r3, r3, #8
 80024ce:	61bb      	str	r3, [r7, #24]
        break;
 80024d0:	e006      	b.n	80024e0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80024d2:	2300      	movs	r3, #0
 80024d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80024d6:	231e      	movs	r3, #30
 80024d8:	18fb      	adds	r3, r7, r3
 80024da:	2201      	movs	r2, #1
 80024dc:	701a      	strb	r2, [r3, #0]
        break;
 80024de:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d01e      	beq.n	8002524 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	085a      	lsrs	r2, r3, #1
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	18d2      	adds	r2, r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	0019      	movs	r1, r3
 80024f6:	0010      	movs	r0, r2
 80024f8:	f7fd fe18 	bl	800012c <__udivsi3>
 80024fc:	0003      	movs	r3, r0
 80024fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	2b0f      	cmp	r3, #15
 8002504:	d90a      	bls.n	800251c <UART_SetConfig+0x240>
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	2380      	movs	r3, #128	; 0x80
 800250a:	025b      	lsls	r3, r3, #9
 800250c:	429a      	cmp	r2, r3
 800250e:	d205      	bcs.n	800251c <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	b29a      	uxth	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	60da      	str	r2, [r3, #12]
 800251a:	e003      	b.n	8002524 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 800251c:	231e      	movs	r3, #30
 800251e:	18fb      	adds	r3, r7, r3
 8002520:	2201      	movs	r2, #1
 8002522:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002530:	231e      	movs	r3, #30
 8002532:	18fb      	adds	r3, r7, r3
 8002534:	781b      	ldrb	r3, [r3, #0]
}
 8002536:	0018      	movs	r0, r3
 8002538:	46bd      	mov	sp, r7
 800253a:	b008      	add	sp, #32
 800253c:	bd80      	pop	{r7, pc}
 800253e:	46c0      	nop			; (mov r8, r8)
 8002540:	ffff69f3 	.word	0xffff69f3
 8002544:	ffffcfff 	.word	0xffffcfff
 8002548:	fffff4ff 	.word	0xfffff4ff
 800254c:	40013800 	.word	0x40013800
 8002550:	40021000 	.word	0x40021000
 8002554:	40004400 	.word	0x40004400
 8002558:	007a1200 	.word	0x007a1200

0800255c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002568:	2208      	movs	r2, #8
 800256a:	4013      	ands	r3, r2
 800256c:	d00b      	beq.n	8002586 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	4a4a      	ldr	r2, [pc, #296]	; (80026a0 <UART_AdvFeatureConfig+0x144>)
 8002576:	4013      	ands	r3, r2
 8002578:	0019      	movs	r1, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	430a      	orrs	r2, r1
 8002584:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258a:	2201      	movs	r2, #1
 800258c:	4013      	ands	r3, r2
 800258e:	d00b      	beq.n	80025a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	4a43      	ldr	r2, [pc, #268]	; (80026a4 <UART_AdvFeatureConfig+0x148>)
 8002598:	4013      	ands	r3, r2
 800259a:	0019      	movs	r1, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	430a      	orrs	r2, r1
 80025a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ac:	2202      	movs	r2, #2
 80025ae:	4013      	ands	r3, r2
 80025b0:	d00b      	beq.n	80025ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	4a3b      	ldr	r2, [pc, #236]	; (80026a8 <UART_AdvFeatureConfig+0x14c>)
 80025ba:	4013      	ands	r3, r2
 80025bc:	0019      	movs	r1, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	430a      	orrs	r2, r1
 80025c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ce:	2204      	movs	r2, #4
 80025d0:	4013      	ands	r3, r2
 80025d2:	d00b      	beq.n	80025ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	4a34      	ldr	r2, [pc, #208]	; (80026ac <UART_AdvFeatureConfig+0x150>)
 80025dc:	4013      	ands	r3, r2
 80025de:	0019      	movs	r1, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	430a      	orrs	r2, r1
 80025ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f0:	2210      	movs	r2, #16
 80025f2:	4013      	ands	r3, r2
 80025f4:	d00b      	beq.n	800260e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	4a2c      	ldr	r2, [pc, #176]	; (80026b0 <UART_AdvFeatureConfig+0x154>)
 80025fe:	4013      	ands	r3, r2
 8002600:	0019      	movs	r1, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	430a      	orrs	r2, r1
 800260c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002612:	2220      	movs	r2, #32
 8002614:	4013      	ands	r3, r2
 8002616:	d00b      	beq.n	8002630 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	4a25      	ldr	r2, [pc, #148]	; (80026b4 <UART_AdvFeatureConfig+0x158>)
 8002620:	4013      	ands	r3, r2
 8002622:	0019      	movs	r1, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	430a      	orrs	r2, r1
 800262e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002634:	2240      	movs	r2, #64	; 0x40
 8002636:	4013      	ands	r3, r2
 8002638:	d01d      	beq.n	8002676 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	4a1d      	ldr	r2, [pc, #116]	; (80026b8 <UART_AdvFeatureConfig+0x15c>)
 8002642:	4013      	ands	r3, r2
 8002644:	0019      	movs	r1, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	430a      	orrs	r2, r1
 8002650:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002656:	2380      	movs	r3, #128	; 0x80
 8002658:	035b      	lsls	r3, r3, #13
 800265a:	429a      	cmp	r2, r3
 800265c:	d10b      	bne.n	8002676 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	4a15      	ldr	r2, [pc, #84]	; (80026bc <UART_AdvFeatureConfig+0x160>)
 8002666:	4013      	ands	r3, r2
 8002668:	0019      	movs	r1, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	430a      	orrs	r2, r1
 8002674:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267a:	2280      	movs	r2, #128	; 0x80
 800267c:	4013      	ands	r3, r2
 800267e:	d00b      	beq.n	8002698 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	4a0e      	ldr	r2, [pc, #56]	; (80026c0 <UART_AdvFeatureConfig+0x164>)
 8002688:	4013      	ands	r3, r2
 800268a:	0019      	movs	r1, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	430a      	orrs	r2, r1
 8002696:	605a      	str	r2, [r3, #4]
  }
}
 8002698:	46c0      	nop			; (mov r8, r8)
 800269a:	46bd      	mov	sp, r7
 800269c:	b002      	add	sp, #8
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	ffff7fff 	.word	0xffff7fff
 80026a4:	fffdffff 	.word	0xfffdffff
 80026a8:	fffeffff 	.word	0xfffeffff
 80026ac:	fffbffff 	.word	0xfffbffff
 80026b0:	ffffefff 	.word	0xffffefff
 80026b4:	ffffdfff 	.word	0xffffdfff
 80026b8:	ffefffff 	.word	0xffefffff
 80026bc:	ff9fffff 	.word	0xff9fffff
 80026c0:	fff7ffff 	.word	0xfff7ffff

080026c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b092      	sub	sp, #72	; 0x48
 80026c8:	af02      	add	r7, sp, #8
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2284      	movs	r2, #132	; 0x84
 80026d0:	2100      	movs	r1, #0
 80026d2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80026d4:	f7fe f880 	bl	80007d8 <HAL_GetTick>
 80026d8:	0003      	movs	r3, r0
 80026da:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2208      	movs	r2, #8
 80026e4:	4013      	ands	r3, r2
 80026e6:	2b08      	cmp	r3, #8
 80026e8:	d12c      	bne.n	8002744 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80026ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026ec:	2280      	movs	r2, #128	; 0x80
 80026ee:	0391      	lsls	r1, r2, #14
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	4a46      	ldr	r2, [pc, #280]	; (800280c <UART_CheckIdleState+0x148>)
 80026f4:	9200      	str	r2, [sp, #0]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f000 f88c 	bl	8002814 <UART_WaitOnFlagUntilTimeout>
 80026fc:	1e03      	subs	r3, r0, #0
 80026fe:	d021      	beq.n	8002744 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002700:	f3ef 8310 	mrs	r3, PRIMASK
 8002704:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002708:	63bb      	str	r3, [r7, #56]	; 0x38
 800270a:	2301      	movs	r3, #1
 800270c:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800270e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002710:	f383 8810 	msr	PRIMASK, r3
}
 8002714:	46c0      	nop			; (mov r8, r8)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2180      	movs	r1, #128	; 0x80
 8002722:	438a      	bics	r2, r1
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002728:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800272a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800272c:	f383 8810 	msr	PRIMASK, r3
}
 8002730:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2220      	movs	r2, #32
 8002736:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2278      	movs	r2, #120	; 0x78
 800273c:	2100      	movs	r1, #0
 800273e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e05f      	b.n	8002804 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2204      	movs	r2, #4
 800274c:	4013      	ands	r3, r2
 800274e:	2b04      	cmp	r3, #4
 8002750:	d146      	bne.n	80027e0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002754:	2280      	movs	r2, #128	; 0x80
 8002756:	03d1      	lsls	r1, r2, #15
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	4a2c      	ldr	r2, [pc, #176]	; (800280c <UART_CheckIdleState+0x148>)
 800275c:	9200      	str	r2, [sp, #0]
 800275e:	2200      	movs	r2, #0
 8002760:	f000 f858 	bl	8002814 <UART_WaitOnFlagUntilTimeout>
 8002764:	1e03      	subs	r3, r0, #0
 8002766:	d03b      	beq.n	80027e0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002768:	f3ef 8310 	mrs	r3, PRIMASK
 800276c:	60fb      	str	r3, [r7, #12]
  return(result);
 800276e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002770:	637b      	str	r3, [r7, #52]	; 0x34
 8002772:	2301      	movs	r3, #1
 8002774:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	f383 8810 	msr	PRIMASK, r3
}
 800277c:	46c0      	nop			; (mov r8, r8)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4921      	ldr	r1, [pc, #132]	; (8002810 <UART_CheckIdleState+0x14c>)
 800278a:	400a      	ands	r2, r1
 800278c:	601a      	str	r2, [r3, #0]
 800278e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002790:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	f383 8810 	msr	PRIMASK, r3
}
 8002798:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800279a:	f3ef 8310 	mrs	r3, PRIMASK
 800279e:	61bb      	str	r3, [r7, #24]
  return(result);
 80027a0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027a2:	633b      	str	r3, [r7, #48]	; 0x30
 80027a4:	2301      	movs	r3, #1
 80027a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	f383 8810 	msr	PRIMASK, r3
}
 80027ae:	46c0      	nop			; (mov r8, r8)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	689a      	ldr	r2, [r3, #8]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2101      	movs	r1, #1
 80027bc:	438a      	bics	r2, r1
 80027be:	609a      	str	r2, [r3, #8]
 80027c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027c4:	6a3b      	ldr	r3, [r7, #32]
 80027c6:	f383 8810 	msr	PRIMASK, r3
}
 80027ca:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2280      	movs	r2, #128	; 0x80
 80027d0:	2120      	movs	r1, #32
 80027d2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2278      	movs	r2, #120	; 0x78
 80027d8:	2100      	movs	r1, #0
 80027da:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e011      	b.n	8002804 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2220      	movs	r2, #32
 80027e4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2280      	movs	r2, #128	; 0x80
 80027ea:	2120      	movs	r1, #32
 80027ec:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2278      	movs	r2, #120	; 0x78
 80027fe:	2100      	movs	r1, #0
 8002800:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	0018      	movs	r0, r3
 8002806:	46bd      	mov	sp, r7
 8002808:	b010      	add	sp, #64	; 0x40
 800280a:	bd80      	pop	{r7, pc}
 800280c:	01ffffff 	.word	0x01ffffff
 8002810:	fffffedf 	.word	0xfffffedf

08002814 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	603b      	str	r3, [r7, #0]
 8002820:	1dfb      	adds	r3, r7, #7
 8002822:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002824:	e051      	b.n	80028ca <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	3301      	adds	r3, #1
 800282a:	d04e      	beq.n	80028ca <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800282c:	f7fd ffd4 	bl	80007d8 <HAL_GetTick>
 8002830:	0002      	movs	r2, r0
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	429a      	cmp	r2, r3
 800283a:	d302      	bcc.n	8002842 <UART_WaitOnFlagUntilTimeout+0x2e>
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e051      	b.n	80028ea <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2204      	movs	r2, #4
 800284e:	4013      	ands	r3, r2
 8002850:	d03b      	beq.n	80028ca <UART_WaitOnFlagUntilTimeout+0xb6>
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	2b80      	cmp	r3, #128	; 0x80
 8002856:	d038      	beq.n	80028ca <UART_WaitOnFlagUntilTimeout+0xb6>
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	2b40      	cmp	r3, #64	; 0x40
 800285c:	d035      	beq.n	80028ca <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	69db      	ldr	r3, [r3, #28]
 8002864:	2208      	movs	r2, #8
 8002866:	4013      	ands	r3, r2
 8002868:	2b08      	cmp	r3, #8
 800286a:	d111      	bne.n	8002890 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2208      	movs	r2, #8
 8002872:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	0018      	movs	r0, r3
 8002878:	f000 f83c 	bl	80028f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2284      	movs	r2, #132	; 0x84
 8002880:	2108      	movs	r1, #8
 8002882:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2278      	movs	r2, #120	; 0x78
 8002888:	2100      	movs	r1, #0
 800288a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e02c      	b.n	80028ea <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	69da      	ldr	r2, [r3, #28]
 8002896:	2380      	movs	r3, #128	; 0x80
 8002898:	011b      	lsls	r3, r3, #4
 800289a:	401a      	ands	r2, r3
 800289c:	2380      	movs	r3, #128	; 0x80
 800289e:	011b      	lsls	r3, r3, #4
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d112      	bne.n	80028ca <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2280      	movs	r2, #128	; 0x80
 80028aa:	0112      	lsls	r2, r2, #4
 80028ac:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	0018      	movs	r0, r3
 80028b2:	f000 f81f 	bl	80028f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2284      	movs	r2, #132	; 0x84
 80028ba:	2120      	movs	r1, #32
 80028bc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2278      	movs	r2, #120	; 0x78
 80028c2:	2100      	movs	r1, #0
 80028c4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e00f      	b.n	80028ea <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	69db      	ldr	r3, [r3, #28]
 80028d0:	68ba      	ldr	r2, [r7, #8]
 80028d2:	4013      	ands	r3, r2
 80028d4:	68ba      	ldr	r2, [r7, #8]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	425a      	negs	r2, r3
 80028da:	4153      	adcs	r3, r2
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	001a      	movs	r2, r3
 80028e0:	1dfb      	adds	r3, r7, #7
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d09e      	beq.n	8002826 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	0018      	movs	r0, r3
 80028ec:	46bd      	mov	sp, r7
 80028ee:	b004      	add	sp, #16
 80028f0:	bd80      	pop	{r7, pc}
	...

080028f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b08e      	sub	sp, #56	; 0x38
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028fc:	f3ef 8310 	mrs	r3, PRIMASK
 8002900:	617b      	str	r3, [r7, #20]
  return(result);
 8002902:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002904:	637b      	str	r3, [r7, #52]	; 0x34
 8002906:	2301      	movs	r3, #1
 8002908:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	f383 8810 	msr	PRIMASK, r3
}
 8002910:	46c0      	nop			; (mov r8, r8)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4926      	ldr	r1, [pc, #152]	; (80029b8 <UART_EndRxTransfer+0xc4>)
 800291e:	400a      	ands	r2, r1
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002924:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	f383 8810 	msr	PRIMASK, r3
}
 800292c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800292e:	f3ef 8310 	mrs	r3, PRIMASK
 8002932:	623b      	str	r3, [r7, #32]
  return(result);
 8002934:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002936:	633b      	str	r3, [r7, #48]	; 0x30
 8002938:	2301      	movs	r3, #1
 800293a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800293c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293e:	f383 8810 	msr	PRIMASK, r3
}
 8002942:	46c0      	nop			; (mov r8, r8)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	689a      	ldr	r2, [r3, #8]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2101      	movs	r1, #1
 8002950:	438a      	bics	r2, r1
 8002952:	609a      	str	r2, [r3, #8]
 8002954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002956:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800295a:	f383 8810 	msr	PRIMASK, r3
}
 800295e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002964:	2b01      	cmp	r3, #1
 8002966:	d118      	bne.n	800299a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002968:	f3ef 8310 	mrs	r3, PRIMASK
 800296c:	60bb      	str	r3, [r7, #8]
  return(result);
 800296e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002970:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002972:	2301      	movs	r3, #1
 8002974:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f383 8810 	msr	PRIMASK, r3
}
 800297c:	46c0      	nop			; (mov r8, r8)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2110      	movs	r1, #16
 800298a:	438a      	bics	r2, r1
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002990:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	f383 8810 	msr	PRIMASK, r3
}
 8002998:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2280      	movs	r2, #128	; 0x80
 800299e:	2120      	movs	r1, #32
 80029a0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	669a      	str	r2, [r3, #104]	; 0x68
}
 80029ae:	46c0      	nop			; (mov r8, r8)
 80029b0:	46bd      	mov	sp, r7
 80029b2:	b00e      	add	sp, #56	; 0x38
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	46c0      	nop			; (mov r8, r8)
 80029b8:	fffffedf 	.word	0xfffffedf

080029bc <__errno>:
 80029bc:	4b01      	ldr	r3, [pc, #4]	; (80029c4 <__errno+0x8>)
 80029be:	6818      	ldr	r0, [r3, #0]
 80029c0:	4770      	bx	lr
 80029c2:	46c0      	nop			; (mov r8, r8)
 80029c4:	2000000c 	.word	0x2000000c

080029c8 <__libc_init_array>:
 80029c8:	b570      	push	{r4, r5, r6, lr}
 80029ca:	2600      	movs	r6, #0
 80029cc:	4d0c      	ldr	r5, [pc, #48]	; (8002a00 <__libc_init_array+0x38>)
 80029ce:	4c0d      	ldr	r4, [pc, #52]	; (8002a04 <__libc_init_array+0x3c>)
 80029d0:	1b64      	subs	r4, r4, r5
 80029d2:	10a4      	asrs	r4, r4, #2
 80029d4:	42a6      	cmp	r6, r4
 80029d6:	d109      	bne.n	80029ec <__libc_init_array+0x24>
 80029d8:	2600      	movs	r6, #0
 80029da:	f000 fc8b 	bl	80032f4 <_init>
 80029de:	4d0a      	ldr	r5, [pc, #40]	; (8002a08 <__libc_init_array+0x40>)
 80029e0:	4c0a      	ldr	r4, [pc, #40]	; (8002a0c <__libc_init_array+0x44>)
 80029e2:	1b64      	subs	r4, r4, r5
 80029e4:	10a4      	asrs	r4, r4, #2
 80029e6:	42a6      	cmp	r6, r4
 80029e8:	d105      	bne.n	80029f6 <__libc_init_array+0x2e>
 80029ea:	bd70      	pop	{r4, r5, r6, pc}
 80029ec:	00b3      	lsls	r3, r6, #2
 80029ee:	58eb      	ldr	r3, [r5, r3]
 80029f0:	4798      	blx	r3
 80029f2:	3601      	adds	r6, #1
 80029f4:	e7ee      	b.n	80029d4 <__libc_init_array+0xc>
 80029f6:	00b3      	lsls	r3, r6, #2
 80029f8:	58eb      	ldr	r3, [r5, r3]
 80029fa:	4798      	blx	r3
 80029fc:	3601      	adds	r6, #1
 80029fe:	e7f2      	b.n	80029e6 <__libc_init_array+0x1e>
 8002a00:	08003390 	.word	0x08003390
 8002a04:	08003390 	.word	0x08003390
 8002a08:	08003390 	.word	0x08003390
 8002a0c:	08003394 	.word	0x08003394

08002a10 <memset>:
 8002a10:	0003      	movs	r3, r0
 8002a12:	1882      	adds	r2, r0, r2
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d100      	bne.n	8002a1a <memset+0xa>
 8002a18:	4770      	bx	lr
 8002a1a:	7019      	strb	r1, [r3, #0]
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	e7f9      	b.n	8002a14 <memset+0x4>

08002a20 <siprintf>:
 8002a20:	b40e      	push	{r1, r2, r3}
 8002a22:	b500      	push	{lr}
 8002a24:	490b      	ldr	r1, [pc, #44]	; (8002a54 <siprintf+0x34>)
 8002a26:	b09c      	sub	sp, #112	; 0x70
 8002a28:	ab1d      	add	r3, sp, #116	; 0x74
 8002a2a:	9002      	str	r0, [sp, #8]
 8002a2c:	9006      	str	r0, [sp, #24]
 8002a2e:	9107      	str	r1, [sp, #28]
 8002a30:	9104      	str	r1, [sp, #16]
 8002a32:	4809      	ldr	r0, [pc, #36]	; (8002a58 <siprintf+0x38>)
 8002a34:	4909      	ldr	r1, [pc, #36]	; (8002a5c <siprintf+0x3c>)
 8002a36:	cb04      	ldmia	r3!, {r2}
 8002a38:	9105      	str	r1, [sp, #20]
 8002a3a:	6800      	ldr	r0, [r0, #0]
 8002a3c:	a902      	add	r1, sp, #8
 8002a3e:	9301      	str	r3, [sp, #4]
 8002a40:	f000 f870 	bl	8002b24 <_svfiprintf_r>
 8002a44:	2300      	movs	r3, #0
 8002a46:	9a02      	ldr	r2, [sp, #8]
 8002a48:	7013      	strb	r3, [r2, #0]
 8002a4a:	b01c      	add	sp, #112	; 0x70
 8002a4c:	bc08      	pop	{r3}
 8002a4e:	b003      	add	sp, #12
 8002a50:	4718      	bx	r3
 8002a52:	46c0      	nop			; (mov r8, r8)
 8002a54:	7fffffff 	.word	0x7fffffff
 8002a58:	2000000c 	.word	0x2000000c
 8002a5c:	ffff0208 	.word	0xffff0208

08002a60 <__ssputs_r>:
 8002a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a62:	688e      	ldr	r6, [r1, #8]
 8002a64:	b085      	sub	sp, #20
 8002a66:	0007      	movs	r7, r0
 8002a68:	000c      	movs	r4, r1
 8002a6a:	9203      	str	r2, [sp, #12]
 8002a6c:	9301      	str	r3, [sp, #4]
 8002a6e:	429e      	cmp	r6, r3
 8002a70:	d83c      	bhi.n	8002aec <__ssputs_r+0x8c>
 8002a72:	2390      	movs	r3, #144	; 0x90
 8002a74:	898a      	ldrh	r2, [r1, #12]
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	421a      	tst	r2, r3
 8002a7a:	d034      	beq.n	8002ae6 <__ssputs_r+0x86>
 8002a7c:	6909      	ldr	r1, [r1, #16]
 8002a7e:	6823      	ldr	r3, [r4, #0]
 8002a80:	6960      	ldr	r0, [r4, #20]
 8002a82:	1a5b      	subs	r3, r3, r1
 8002a84:	9302      	str	r3, [sp, #8]
 8002a86:	2303      	movs	r3, #3
 8002a88:	4343      	muls	r3, r0
 8002a8a:	0fdd      	lsrs	r5, r3, #31
 8002a8c:	18ed      	adds	r5, r5, r3
 8002a8e:	9b01      	ldr	r3, [sp, #4]
 8002a90:	9802      	ldr	r0, [sp, #8]
 8002a92:	3301      	adds	r3, #1
 8002a94:	181b      	adds	r3, r3, r0
 8002a96:	106d      	asrs	r5, r5, #1
 8002a98:	42ab      	cmp	r3, r5
 8002a9a:	d900      	bls.n	8002a9e <__ssputs_r+0x3e>
 8002a9c:	001d      	movs	r5, r3
 8002a9e:	0553      	lsls	r3, r2, #21
 8002aa0:	d532      	bpl.n	8002b08 <__ssputs_r+0xa8>
 8002aa2:	0029      	movs	r1, r5
 8002aa4:	0038      	movs	r0, r7
 8002aa6:	f000 fb53 	bl	8003150 <_malloc_r>
 8002aaa:	1e06      	subs	r6, r0, #0
 8002aac:	d109      	bne.n	8002ac2 <__ssputs_r+0x62>
 8002aae:	230c      	movs	r3, #12
 8002ab0:	603b      	str	r3, [r7, #0]
 8002ab2:	2340      	movs	r3, #64	; 0x40
 8002ab4:	2001      	movs	r0, #1
 8002ab6:	89a2      	ldrh	r2, [r4, #12]
 8002ab8:	4240      	negs	r0, r0
 8002aba:	4313      	orrs	r3, r2
 8002abc:	81a3      	strh	r3, [r4, #12]
 8002abe:	b005      	add	sp, #20
 8002ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ac2:	9a02      	ldr	r2, [sp, #8]
 8002ac4:	6921      	ldr	r1, [r4, #16]
 8002ac6:	f000 faba 	bl	800303e <memcpy>
 8002aca:	89a3      	ldrh	r3, [r4, #12]
 8002acc:	4a14      	ldr	r2, [pc, #80]	; (8002b20 <__ssputs_r+0xc0>)
 8002ace:	401a      	ands	r2, r3
 8002ad0:	2380      	movs	r3, #128	; 0x80
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	81a3      	strh	r3, [r4, #12]
 8002ad6:	9b02      	ldr	r3, [sp, #8]
 8002ad8:	6126      	str	r6, [r4, #16]
 8002ada:	18f6      	adds	r6, r6, r3
 8002adc:	6026      	str	r6, [r4, #0]
 8002ade:	6165      	str	r5, [r4, #20]
 8002ae0:	9e01      	ldr	r6, [sp, #4]
 8002ae2:	1aed      	subs	r5, r5, r3
 8002ae4:	60a5      	str	r5, [r4, #8]
 8002ae6:	9b01      	ldr	r3, [sp, #4]
 8002ae8:	429e      	cmp	r6, r3
 8002aea:	d900      	bls.n	8002aee <__ssputs_r+0x8e>
 8002aec:	9e01      	ldr	r6, [sp, #4]
 8002aee:	0032      	movs	r2, r6
 8002af0:	9903      	ldr	r1, [sp, #12]
 8002af2:	6820      	ldr	r0, [r4, #0]
 8002af4:	f000 faac 	bl	8003050 <memmove>
 8002af8:	68a3      	ldr	r3, [r4, #8]
 8002afa:	2000      	movs	r0, #0
 8002afc:	1b9b      	subs	r3, r3, r6
 8002afe:	60a3      	str	r3, [r4, #8]
 8002b00:	6823      	ldr	r3, [r4, #0]
 8002b02:	199e      	adds	r6, r3, r6
 8002b04:	6026      	str	r6, [r4, #0]
 8002b06:	e7da      	b.n	8002abe <__ssputs_r+0x5e>
 8002b08:	002a      	movs	r2, r5
 8002b0a:	0038      	movs	r0, r7
 8002b0c:	f000 fb96 	bl	800323c <_realloc_r>
 8002b10:	1e06      	subs	r6, r0, #0
 8002b12:	d1e0      	bne.n	8002ad6 <__ssputs_r+0x76>
 8002b14:	0038      	movs	r0, r7
 8002b16:	6921      	ldr	r1, [r4, #16]
 8002b18:	f000 faae 	bl	8003078 <_free_r>
 8002b1c:	e7c7      	b.n	8002aae <__ssputs_r+0x4e>
 8002b1e:	46c0      	nop			; (mov r8, r8)
 8002b20:	fffffb7f 	.word	0xfffffb7f

08002b24 <_svfiprintf_r>:
 8002b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b26:	b0a1      	sub	sp, #132	; 0x84
 8002b28:	9003      	str	r0, [sp, #12]
 8002b2a:	001d      	movs	r5, r3
 8002b2c:	898b      	ldrh	r3, [r1, #12]
 8002b2e:	000f      	movs	r7, r1
 8002b30:	0016      	movs	r6, r2
 8002b32:	061b      	lsls	r3, r3, #24
 8002b34:	d511      	bpl.n	8002b5a <_svfiprintf_r+0x36>
 8002b36:	690b      	ldr	r3, [r1, #16]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10e      	bne.n	8002b5a <_svfiprintf_r+0x36>
 8002b3c:	2140      	movs	r1, #64	; 0x40
 8002b3e:	f000 fb07 	bl	8003150 <_malloc_r>
 8002b42:	6038      	str	r0, [r7, #0]
 8002b44:	6138      	str	r0, [r7, #16]
 8002b46:	2800      	cmp	r0, #0
 8002b48:	d105      	bne.n	8002b56 <_svfiprintf_r+0x32>
 8002b4a:	230c      	movs	r3, #12
 8002b4c:	9a03      	ldr	r2, [sp, #12]
 8002b4e:	3801      	subs	r0, #1
 8002b50:	6013      	str	r3, [r2, #0]
 8002b52:	b021      	add	sp, #132	; 0x84
 8002b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b56:	2340      	movs	r3, #64	; 0x40
 8002b58:	617b      	str	r3, [r7, #20]
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	ac08      	add	r4, sp, #32
 8002b5e:	6163      	str	r3, [r4, #20]
 8002b60:	3320      	adds	r3, #32
 8002b62:	7663      	strb	r3, [r4, #25]
 8002b64:	3310      	adds	r3, #16
 8002b66:	76a3      	strb	r3, [r4, #26]
 8002b68:	9507      	str	r5, [sp, #28]
 8002b6a:	0035      	movs	r5, r6
 8002b6c:	782b      	ldrb	r3, [r5, #0]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <_svfiprintf_r+0x52>
 8002b72:	2b25      	cmp	r3, #37	; 0x25
 8002b74:	d147      	bne.n	8002c06 <_svfiprintf_r+0xe2>
 8002b76:	1bab      	subs	r3, r5, r6
 8002b78:	9305      	str	r3, [sp, #20]
 8002b7a:	42b5      	cmp	r5, r6
 8002b7c:	d00c      	beq.n	8002b98 <_svfiprintf_r+0x74>
 8002b7e:	0032      	movs	r2, r6
 8002b80:	0039      	movs	r1, r7
 8002b82:	9803      	ldr	r0, [sp, #12]
 8002b84:	f7ff ff6c 	bl	8002a60 <__ssputs_r>
 8002b88:	1c43      	adds	r3, r0, #1
 8002b8a:	d100      	bne.n	8002b8e <_svfiprintf_r+0x6a>
 8002b8c:	e0ae      	b.n	8002cec <_svfiprintf_r+0x1c8>
 8002b8e:	6962      	ldr	r2, [r4, #20]
 8002b90:	9b05      	ldr	r3, [sp, #20]
 8002b92:	4694      	mov	ip, r2
 8002b94:	4463      	add	r3, ip
 8002b96:	6163      	str	r3, [r4, #20]
 8002b98:	782b      	ldrb	r3, [r5, #0]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d100      	bne.n	8002ba0 <_svfiprintf_r+0x7c>
 8002b9e:	e0a5      	b.n	8002cec <_svfiprintf_r+0x1c8>
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	4252      	negs	r2, r2
 8002ba6:	6062      	str	r2, [r4, #4]
 8002ba8:	a904      	add	r1, sp, #16
 8002baa:	3254      	adds	r2, #84	; 0x54
 8002bac:	1852      	adds	r2, r2, r1
 8002bae:	1c6e      	adds	r6, r5, #1
 8002bb0:	6023      	str	r3, [r4, #0]
 8002bb2:	60e3      	str	r3, [r4, #12]
 8002bb4:	60a3      	str	r3, [r4, #8]
 8002bb6:	7013      	strb	r3, [r2, #0]
 8002bb8:	65a3      	str	r3, [r4, #88]	; 0x58
 8002bba:	2205      	movs	r2, #5
 8002bbc:	7831      	ldrb	r1, [r6, #0]
 8002bbe:	4854      	ldr	r0, [pc, #336]	; (8002d10 <_svfiprintf_r+0x1ec>)
 8002bc0:	f000 fa32 	bl	8003028 <memchr>
 8002bc4:	1c75      	adds	r5, r6, #1
 8002bc6:	2800      	cmp	r0, #0
 8002bc8:	d11f      	bne.n	8002c0a <_svfiprintf_r+0xe6>
 8002bca:	6822      	ldr	r2, [r4, #0]
 8002bcc:	06d3      	lsls	r3, r2, #27
 8002bce:	d504      	bpl.n	8002bda <_svfiprintf_r+0xb6>
 8002bd0:	2353      	movs	r3, #83	; 0x53
 8002bd2:	a904      	add	r1, sp, #16
 8002bd4:	185b      	adds	r3, r3, r1
 8002bd6:	2120      	movs	r1, #32
 8002bd8:	7019      	strb	r1, [r3, #0]
 8002bda:	0713      	lsls	r3, r2, #28
 8002bdc:	d504      	bpl.n	8002be8 <_svfiprintf_r+0xc4>
 8002bde:	2353      	movs	r3, #83	; 0x53
 8002be0:	a904      	add	r1, sp, #16
 8002be2:	185b      	adds	r3, r3, r1
 8002be4:	212b      	movs	r1, #43	; 0x2b
 8002be6:	7019      	strb	r1, [r3, #0]
 8002be8:	7833      	ldrb	r3, [r6, #0]
 8002bea:	2b2a      	cmp	r3, #42	; 0x2a
 8002bec:	d016      	beq.n	8002c1c <_svfiprintf_r+0xf8>
 8002bee:	0035      	movs	r5, r6
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	200a      	movs	r0, #10
 8002bf4:	68e3      	ldr	r3, [r4, #12]
 8002bf6:	782a      	ldrb	r2, [r5, #0]
 8002bf8:	1c6e      	adds	r6, r5, #1
 8002bfa:	3a30      	subs	r2, #48	; 0x30
 8002bfc:	2a09      	cmp	r2, #9
 8002bfe:	d94e      	bls.n	8002c9e <_svfiprintf_r+0x17a>
 8002c00:	2900      	cmp	r1, #0
 8002c02:	d111      	bne.n	8002c28 <_svfiprintf_r+0x104>
 8002c04:	e017      	b.n	8002c36 <_svfiprintf_r+0x112>
 8002c06:	3501      	adds	r5, #1
 8002c08:	e7b0      	b.n	8002b6c <_svfiprintf_r+0x48>
 8002c0a:	4b41      	ldr	r3, [pc, #260]	; (8002d10 <_svfiprintf_r+0x1ec>)
 8002c0c:	6822      	ldr	r2, [r4, #0]
 8002c0e:	1ac0      	subs	r0, r0, r3
 8002c10:	2301      	movs	r3, #1
 8002c12:	4083      	lsls	r3, r0
 8002c14:	4313      	orrs	r3, r2
 8002c16:	002e      	movs	r6, r5
 8002c18:	6023      	str	r3, [r4, #0]
 8002c1a:	e7ce      	b.n	8002bba <_svfiprintf_r+0x96>
 8002c1c:	9b07      	ldr	r3, [sp, #28]
 8002c1e:	1d19      	adds	r1, r3, #4
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	9107      	str	r1, [sp, #28]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	db01      	blt.n	8002c2c <_svfiprintf_r+0x108>
 8002c28:	930b      	str	r3, [sp, #44]	; 0x2c
 8002c2a:	e004      	b.n	8002c36 <_svfiprintf_r+0x112>
 8002c2c:	425b      	negs	r3, r3
 8002c2e:	60e3      	str	r3, [r4, #12]
 8002c30:	2302      	movs	r3, #2
 8002c32:	4313      	orrs	r3, r2
 8002c34:	6023      	str	r3, [r4, #0]
 8002c36:	782b      	ldrb	r3, [r5, #0]
 8002c38:	2b2e      	cmp	r3, #46	; 0x2e
 8002c3a:	d10a      	bne.n	8002c52 <_svfiprintf_r+0x12e>
 8002c3c:	786b      	ldrb	r3, [r5, #1]
 8002c3e:	2b2a      	cmp	r3, #42	; 0x2a
 8002c40:	d135      	bne.n	8002cae <_svfiprintf_r+0x18a>
 8002c42:	9b07      	ldr	r3, [sp, #28]
 8002c44:	3502      	adds	r5, #2
 8002c46:	1d1a      	adds	r2, r3, #4
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	9207      	str	r2, [sp, #28]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	db2b      	blt.n	8002ca8 <_svfiprintf_r+0x184>
 8002c50:	9309      	str	r3, [sp, #36]	; 0x24
 8002c52:	4e30      	ldr	r6, [pc, #192]	; (8002d14 <_svfiprintf_r+0x1f0>)
 8002c54:	2203      	movs	r2, #3
 8002c56:	0030      	movs	r0, r6
 8002c58:	7829      	ldrb	r1, [r5, #0]
 8002c5a:	f000 f9e5 	bl	8003028 <memchr>
 8002c5e:	2800      	cmp	r0, #0
 8002c60:	d006      	beq.n	8002c70 <_svfiprintf_r+0x14c>
 8002c62:	2340      	movs	r3, #64	; 0x40
 8002c64:	1b80      	subs	r0, r0, r6
 8002c66:	4083      	lsls	r3, r0
 8002c68:	6822      	ldr	r2, [r4, #0]
 8002c6a:	3501      	adds	r5, #1
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	6023      	str	r3, [r4, #0]
 8002c70:	7829      	ldrb	r1, [r5, #0]
 8002c72:	2206      	movs	r2, #6
 8002c74:	4828      	ldr	r0, [pc, #160]	; (8002d18 <_svfiprintf_r+0x1f4>)
 8002c76:	1c6e      	adds	r6, r5, #1
 8002c78:	7621      	strb	r1, [r4, #24]
 8002c7a:	f000 f9d5 	bl	8003028 <memchr>
 8002c7e:	2800      	cmp	r0, #0
 8002c80:	d03c      	beq.n	8002cfc <_svfiprintf_r+0x1d8>
 8002c82:	4b26      	ldr	r3, [pc, #152]	; (8002d1c <_svfiprintf_r+0x1f8>)
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d125      	bne.n	8002cd4 <_svfiprintf_r+0x1b0>
 8002c88:	2207      	movs	r2, #7
 8002c8a:	9b07      	ldr	r3, [sp, #28]
 8002c8c:	3307      	adds	r3, #7
 8002c8e:	4393      	bics	r3, r2
 8002c90:	3308      	adds	r3, #8
 8002c92:	9307      	str	r3, [sp, #28]
 8002c94:	6963      	ldr	r3, [r4, #20]
 8002c96:	9a04      	ldr	r2, [sp, #16]
 8002c98:	189b      	adds	r3, r3, r2
 8002c9a:	6163      	str	r3, [r4, #20]
 8002c9c:	e765      	b.n	8002b6a <_svfiprintf_r+0x46>
 8002c9e:	4343      	muls	r3, r0
 8002ca0:	0035      	movs	r5, r6
 8002ca2:	2101      	movs	r1, #1
 8002ca4:	189b      	adds	r3, r3, r2
 8002ca6:	e7a6      	b.n	8002bf6 <_svfiprintf_r+0xd2>
 8002ca8:	2301      	movs	r3, #1
 8002caa:	425b      	negs	r3, r3
 8002cac:	e7d0      	b.n	8002c50 <_svfiprintf_r+0x12c>
 8002cae:	2300      	movs	r3, #0
 8002cb0:	200a      	movs	r0, #10
 8002cb2:	001a      	movs	r2, r3
 8002cb4:	3501      	adds	r5, #1
 8002cb6:	6063      	str	r3, [r4, #4]
 8002cb8:	7829      	ldrb	r1, [r5, #0]
 8002cba:	1c6e      	adds	r6, r5, #1
 8002cbc:	3930      	subs	r1, #48	; 0x30
 8002cbe:	2909      	cmp	r1, #9
 8002cc0:	d903      	bls.n	8002cca <_svfiprintf_r+0x1a6>
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d0c5      	beq.n	8002c52 <_svfiprintf_r+0x12e>
 8002cc6:	9209      	str	r2, [sp, #36]	; 0x24
 8002cc8:	e7c3      	b.n	8002c52 <_svfiprintf_r+0x12e>
 8002cca:	4342      	muls	r2, r0
 8002ccc:	0035      	movs	r5, r6
 8002cce:	2301      	movs	r3, #1
 8002cd0:	1852      	adds	r2, r2, r1
 8002cd2:	e7f1      	b.n	8002cb8 <_svfiprintf_r+0x194>
 8002cd4:	ab07      	add	r3, sp, #28
 8002cd6:	9300      	str	r3, [sp, #0]
 8002cd8:	003a      	movs	r2, r7
 8002cda:	0021      	movs	r1, r4
 8002cdc:	4b10      	ldr	r3, [pc, #64]	; (8002d20 <_svfiprintf_r+0x1fc>)
 8002cde:	9803      	ldr	r0, [sp, #12]
 8002ce0:	e000      	b.n	8002ce4 <_svfiprintf_r+0x1c0>
 8002ce2:	bf00      	nop
 8002ce4:	9004      	str	r0, [sp, #16]
 8002ce6:	9b04      	ldr	r3, [sp, #16]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	d1d3      	bne.n	8002c94 <_svfiprintf_r+0x170>
 8002cec:	89bb      	ldrh	r3, [r7, #12]
 8002cee:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002cf0:	065b      	lsls	r3, r3, #25
 8002cf2:	d400      	bmi.n	8002cf6 <_svfiprintf_r+0x1d2>
 8002cf4:	e72d      	b.n	8002b52 <_svfiprintf_r+0x2e>
 8002cf6:	2001      	movs	r0, #1
 8002cf8:	4240      	negs	r0, r0
 8002cfa:	e72a      	b.n	8002b52 <_svfiprintf_r+0x2e>
 8002cfc:	ab07      	add	r3, sp, #28
 8002cfe:	9300      	str	r3, [sp, #0]
 8002d00:	003a      	movs	r2, r7
 8002d02:	0021      	movs	r1, r4
 8002d04:	4b06      	ldr	r3, [pc, #24]	; (8002d20 <_svfiprintf_r+0x1fc>)
 8002d06:	9803      	ldr	r0, [sp, #12]
 8002d08:	f000 f87c 	bl	8002e04 <_printf_i>
 8002d0c:	e7ea      	b.n	8002ce4 <_svfiprintf_r+0x1c0>
 8002d0e:	46c0      	nop			; (mov r8, r8)
 8002d10:	0800335c 	.word	0x0800335c
 8002d14:	08003362 	.word	0x08003362
 8002d18:	08003366 	.word	0x08003366
 8002d1c:	00000000 	.word	0x00000000
 8002d20:	08002a61 	.word	0x08002a61

08002d24 <_printf_common>:
 8002d24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d26:	0015      	movs	r5, r2
 8002d28:	9301      	str	r3, [sp, #4]
 8002d2a:	688a      	ldr	r2, [r1, #8]
 8002d2c:	690b      	ldr	r3, [r1, #16]
 8002d2e:	000c      	movs	r4, r1
 8002d30:	9000      	str	r0, [sp, #0]
 8002d32:	4293      	cmp	r3, r2
 8002d34:	da00      	bge.n	8002d38 <_printf_common+0x14>
 8002d36:	0013      	movs	r3, r2
 8002d38:	0022      	movs	r2, r4
 8002d3a:	602b      	str	r3, [r5, #0]
 8002d3c:	3243      	adds	r2, #67	; 0x43
 8002d3e:	7812      	ldrb	r2, [r2, #0]
 8002d40:	2a00      	cmp	r2, #0
 8002d42:	d001      	beq.n	8002d48 <_printf_common+0x24>
 8002d44:	3301      	adds	r3, #1
 8002d46:	602b      	str	r3, [r5, #0]
 8002d48:	6823      	ldr	r3, [r4, #0]
 8002d4a:	069b      	lsls	r3, r3, #26
 8002d4c:	d502      	bpl.n	8002d54 <_printf_common+0x30>
 8002d4e:	682b      	ldr	r3, [r5, #0]
 8002d50:	3302      	adds	r3, #2
 8002d52:	602b      	str	r3, [r5, #0]
 8002d54:	6822      	ldr	r2, [r4, #0]
 8002d56:	2306      	movs	r3, #6
 8002d58:	0017      	movs	r7, r2
 8002d5a:	401f      	ands	r7, r3
 8002d5c:	421a      	tst	r2, r3
 8002d5e:	d027      	beq.n	8002db0 <_printf_common+0x8c>
 8002d60:	0023      	movs	r3, r4
 8002d62:	3343      	adds	r3, #67	; 0x43
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	1e5a      	subs	r2, r3, #1
 8002d68:	4193      	sbcs	r3, r2
 8002d6a:	6822      	ldr	r2, [r4, #0]
 8002d6c:	0692      	lsls	r2, r2, #26
 8002d6e:	d430      	bmi.n	8002dd2 <_printf_common+0xae>
 8002d70:	0022      	movs	r2, r4
 8002d72:	9901      	ldr	r1, [sp, #4]
 8002d74:	9800      	ldr	r0, [sp, #0]
 8002d76:	9e08      	ldr	r6, [sp, #32]
 8002d78:	3243      	adds	r2, #67	; 0x43
 8002d7a:	47b0      	blx	r6
 8002d7c:	1c43      	adds	r3, r0, #1
 8002d7e:	d025      	beq.n	8002dcc <_printf_common+0xa8>
 8002d80:	2306      	movs	r3, #6
 8002d82:	6820      	ldr	r0, [r4, #0]
 8002d84:	682a      	ldr	r2, [r5, #0]
 8002d86:	68e1      	ldr	r1, [r4, #12]
 8002d88:	2500      	movs	r5, #0
 8002d8a:	4003      	ands	r3, r0
 8002d8c:	2b04      	cmp	r3, #4
 8002d8e:	d103      	bne.n	8002d98 <_printf_common+0x74>
 8002d90:	1a8d      	subs	r5, r1, r2
 8002d92:	43eb      	mvns	r3, r5
 8002d94:	17db      	asrs	r3, r3, #31
 8002d96:	401d      	ands	r5, r3
 8002d98:	68a3      	ldr	r3, [r4, #8]
 8002d9a:	6922      	ldr	r2, [r4, #16]
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	dd01      	ble.n	8002da4 <_printf_common+0x80>
 8002da0:	1a9b      	subs	r3, r3, r2
 8002da2:	18ed      	adds	r5, r5, r3
 8002da4:	2700      	movs	r7, #0
 8002da6:	42bd      	cmp	r5, r7
 8002da8:	d120      	bne.n	8002dec <_printf_common+0xc8>
 8002daa:	2000      	movs	r0, #0
 8002dac:	e010      	b.n	8002dd0 <_printf_common+0xac>
 8002dae:	3701      	adds	r7, #1
 8002db0:	68e3      	ldr	r3, [r4, #12]
 8002db2:	682a      	ldr	r2, [r5, #0]
 8002db4:	1a9b      	subs	r3, r3, r2
 8002db6:	42bb      	cmp	r3, r7
 8002db8:	ddd2      	ble.n	8002d60 <_printf_common+0x3c>
 8002dba:	0022      	movs	r2, r4
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	9901      	ldr	r1, [sp, #4]
 8002dc0:	9800      	ldr	r0, [sp, #0]
 8002dc2:	9e08      	ldr	r6, [sp, #32]
 8002dc4:	3219      	adds	r2, #25
 8002dc6:	47b0      	blx	r6
 8002dc8:	1c43      	adds	r3, r0, #1
 8002dca:	d1f0      	bne.n	8002dae <_printf_common+0x8a>
 8002dcc:	2001      	movs	r0, #1
 8002dce:	4240      	negs	r0, r0
 8002dd0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002dd2:	2030      	movs	r0, #48	; 0x30
 8002dd4:	18e1      	adds	r1, r4, r3
 8002dd6:	3143      	adds	r1, #67	; 0x43
 8002dd8:	7008      	strb	r0, [r1, #0]
 8002dda:	0021      	movs	r1, r4
 8002ddc:	1c5a      	adds	r2, r3, #1
 8002dde:	3145      	adds	r1, #69	; 0x45
 8002de0:	7809      	ldrb	r1, [r1, #0]
 8002de2:	18a2      	adds	r2, r4, r2
 8002de4:	3243      	adds	r2, #67	; 0x43
 8002de6:	3302      	adds	r3, #2
 8002de8:	7011      	strb	r1, [r2, #0]
 8002dea:	e7c1      	b.n	8002d70 <_printf_common+0x4c>
 8002dec:	0022      	movs	r2, r4
 8002dee:	2301      	movs	r3, #1
 8002df0:	9901      	ldr	r1, [sp, #4]
 8002df2:	9800      	ldr	r0, [sp, #0]
 8002df4:	9e08      	ldr	r6, [sp, #32]
 8002df6:	321a      	adds	r2, #26
 8002df8:	47b0      	blx	r6
 8002dfa:	1c43      	adds	r3, r0, #1
 8002dfc:	d0e6      	beq.n	8002dcc <_printf_common+0xa8>
 8002dfe:	3701      	adds	r7, #1
 8002e00:	e7d1      	b.n	8002da6 <_printf_common+0x82>
	...

08002e04 <_printf_i>:
 8002e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e06:	b08b      	sub	sp, #44	; 0x2c
 8002e08:	9206      	str	r2, [sp, #24]
 8002e0a:	000a      	movs	r2, r1
 8002e0c:	3243      	adds	r2, #67	; 0x43
 8002e0e:	9307      	str	r3, [sp, #28]
 8002e10:	9005      	str	r0, [sp, #20]
 8002e12:	9204      	str	r2, [sp, #16]
 8002e14:	7e0a      	ldrb	r2, [r1, #24]
 8002e16:	000c      	movs	r4, r1
 8002e18:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002e1a:	2a78      	cmp	r2, #120	; 0x78
 8002e1c:	d807      	bhi.n	8002e2e <_printf_i+0x2a>
 8002e1e:	2a62      	cmp	r2, #98	; 0x62
 8002e20:	d809      	bhi.n	8002e36 <_printf_i+0x32>
 8002e22:	2a00      	cmp	r2, #0
 8002e24:	d100      	bne.n	8002e28 <_printf_i+0x24>
 8002e26:	e0c1      	b.n	8002fac <_printf_i+0x1a8>
 8002e28:	2a58      	cmp	r2, #88	; 0x58
 8002e2a:	d100      	bne.n	8002e2e <_printf_i+0x2a>
 8002e2c:	e08c      	b.n	8002f48 <_printf_i+0x144>
 8002e2e:	0026      	movs	r6, r4
 8002e30:	3642      	adds	r6, #66	; 0x42
 8002e32:	7032      	strb	r2, [r6, #0]
 8002e34:	e022      	b.n	8002e7c <_printf_i+0x78>
 8002e36:	0010      	movs	r0, r2
 8002e38:	3863      	subs	r0, #99	; 0x63
 8002e3a:	2815      	cmp	r0, #21
 8002e3c:	d8f7      	bhi.n	8002e2e <_printf_i+0x2a>
 8002e3e:	f7fd f96b 	bl	8000118 <__gnu_thumb1_case_shi>
 8002e42:	0016      	.short	0x0016
 8002e44:	fff6001f 	.word	0xfff6001f
 8002e48:	fff6fff6 	.word	0xfff6fff6
 8002e4c:	001ffff6 	.word	0x001ffff6
 8002e50:	fff6fff6 	.word	0xfff6fff6
 8002e54:	fff6fff6 	.word	0xfff6fff6
 8002e58:	003600a8 	.word	0x003600a8
 8002e5c:	fff6009a 	.word	0xfff6009a
 8002e60:	00b9fff6 	.word	0x00b9fff6
 8002e64:	0036fff6 	.word	0x0036fff6
 8002e68:	fff6fff6 	.word	0xfff6fff6
 8002e6c:	009e      	.short	0x009e
 8002e6e:	0026      	movs	r6, r4
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	3642      	adds	r6, #66	; 0x42
 8002e74:	1d11      	adds	r1, r2, #4
 8002e76:	6019      	str	r1, [r3, #0]
 8002e78:	6813      	ldr	r3, [r2, #0]
 8002e7a:	7033      	strb	r3, [r6, #0]
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e0a7      	b.n	8002fd0 <_printf_i+0x1cc>
 8002e80:	6808      	ldr	r0, [r1, #0]
 8002e82:	6819      	ldr	r1, [r3, #0]
 8002e84:	1d0a      	adds	r2, r1, #4
 8002e86:	0605      	lsls	r5, r0, #24
 8002e88:	d50b      	bpl.n	8002ea2 <_printf_i+0x9e>
 8002e8a:	680d      	ldr	r5, [r1, #0]
 8002e8c:	601a      	str	r2, [r3, #0]
 8002e8e:	2d00      	cmp	r5, #0
 8002e90:	da03      	bge.n	8002e9a <_printf_i+0x96>
 8002e92:	232d      	movs	r3, #45	; 0x2d
 8002e94:	9a04      	ldr	r2, [sp, #16]
 8002e96:	426d      	negs	r5, r5
 8002e98:	7013      	strb	r3, [r2, #0]
 8002e9a:	4b61      	ldr	r3, [pc, #388]	; (8003020 <_printf_i+0x21c>)
 8002e9c:	270a      	movs	r7, #10
 8002e9e:	9303      	str	r3, [sp, #12]
 8002ea0:	e01b      	b.n	8002eda <_printf_i+0xd6>
 8002ea2:	680d      	ldr	r5, [r1, #0]
 8002ea4:	601a      	str	r2, [r3, #0]
 8002ea6:	0641      	lsls	r1, r0, #25
 8002ea8:	d5f1      	bpl.n	8002e8e <_printf_i+0x8a>
 8002eaa:	b22d      	sxth	r5, r5
 8002eac:	e7ef      	b.n	8002e8e <_printf_i+0x8a>
 8002eae:	680d      	ldr	r5, [r1, #0]
 8002eb0:	6819      	ldr	r1, [r3, #0]
 8002eb2:	1d08      	adds	r0, r1, #4
 8002eb4:	6018      	str	r0, [r3, #0]
 8002eb6:	062e      	lsls	r6, r5, #24
 8002eb8:	d501      	bpl.n	8002ebe <_printf_i+0xba>
 8002eba:	680d      	ldr	r5, [r1, #0]
 8002ebc:	e003      	b.n	8002ec6 <_printf_i+0xc2>
 8002ebe:	066d      	lsls	r5, r5, #25
 8002ec0:	d5fb      	bpl.n	8002eba <_printf_i+0xb6>
 8002ec2:	680d      	ldr	r5, [r1, #0]
 8002ec4:	b2ad      	uxth	r5, r5
 8002ec6:	4b56      	ldr	r3, [pc, #344]	; (8003020 <_printf_i+0x21c>)
 8002ec8:	2708      	movs	r7, #8
 8002eca:	9303      	str	r3, [sp, #12]
 8002ecc:	2a6f      	cmp	r2, #111	; 0x6f
 8002ece:	d000      	beq.n	8002ed2 <_printf_i+0xce>
 8002ed0:	3702      	adds	r7, #2
 8002ed2:	0023      	movs	r3, r4
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	3343      	adds	r3, #67	; 0x43
 8002ed8:	701a      	strb	r2, [r3, #0]
 8002eda:	6863      	ldr	r3, [r4, #4]
 8002edc:	60a3      	str	r3, [r4, #8]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	db03      	blt.n	8002eea <_printf_i+0xe6>
 8002ee2:	2204      	movs	r2, #4
 8002ee4:	6821      	ldr	r1, [r4, #0]
 8002ee6:	4391      	bics	r1, r2
 8002ee8:	6021      	str	r1, [r4, #0]
 8002eea:	2d00      	cmp	r5, #0
 8002eec:	d102      	bne.n	8002ef4 <_printf_i+0xf0>
 8002eee:	9e04      	ldr	r6, [sp, #16]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00c      	beq.n	8002f0e <_printf_i+0x10a>
 8002ef4:	9e04      	ldr	r6, [sp, #16]
 8002ef6:	0028      	movs	r0, r5
 8002ef8:	0039      	movs	r1, r7
 8002efa:	f7fd f99d 	bl	8000238 <__aeabi_uidivmod>
 8002efe:	9b03      	ldr	r3, [sp, #12]
 8002f00:	3e01      	subs	r6, #1
 8002f02:	5c5b      	ldrb	r3, [r3, r1]
 8002f04:	7033      	strb	r3, [r6, #0]
 8002f06:	002b      	movs	r3, r5
 8002f08:	0005      	movs	r5, r0
 8002f0a:	429f      	cmp	r7, r3
 8002f0c:	d9f3      	bls.n	8002ef6 <_printf_i+0xf2>
 8002f0e:	2f08      	cmp	r7, #8
 8002f10:	d109      	bne.n	8002f26 <_printf_i+0x122>
 8002f12:	6823      	ldr	r3, [r4, #0]
 8002f14:	07db      	lsls	r3, r3, #31
 8002f16:	d506      	bpl.n	8002f26 <_printf_i+0x122>
 8002f18:	6863      	ldr	r3, [r4, #4]
 8002f1a:	6922      	ldr	r2, [r4, #16]
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	dc02      	bgt.n	8002f26 <_printf_i+0x122>
 8002f20:	2330      	movs	r3, #48	; 0x30
 8002f22:	3e01      	subs	r6, #1
 8002f24:	7033      	strb	r3, [r6, #0]
 8002f26:	9b04      	ldr	r3, [sp, #16]
 8002f28:	1b9b      	subs	r3, r3, r6
 8002f2a:	6123      	str	r3, [r4, #16]
 8002f2c:	9b07      	ldr	r3, [sp, #28]
 8002f2e:	0021      	movs	r1, r4
 8002f30:	9300      	str	r3, [sp, #0]
 8002f32:	9805      	ldr	r0, [sp, #20]
 8002f34:	9b06      	ldr	r3, [sp, #24]
 8002f36:	aa09      	add	r2, sp, #36	; 0x24
 8002f38:	f7ff fef4 	bl	8002d24 <_printf_common>
 8002f3c:	1c43      	adds	r3, r0, #1
 8002f3e:	d14c      	bne.n	8002fda <_printf_i+0x1d6>
 8002f40:	2001      	movs	r0, #1
 8002f42:	4240      	negs	r0, r0
 8002f44:	b00b      	add	sp, #44	; 0x2c
 8002f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f48:	3145      	adds	r1, #69	; 0x45
 8002f4a:	700a      	strb	r2, [r1, #0]
 8002f4c:	4a34      	ldr	r2, [pc, #208]	; (8003020 <_printf_i+0x21c>)
 8002f4e:	9203      	str	r2, [sp, #12]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	6821      	ldr	r1, [r4, #0]
 8002f54:	ca20      	ldmia	r2!, {r5}
 8002f56:	601a      	str	r2, [r3, #0]
 8002f58:	0608      	lsls	r0, r1, #24
 8002f5a:	d516      	bpl.n	8002f8a <_printf_i+0x186>
 8002f5c:	07cb      	lsls	r3, r1, #31
 8002f5e:	d502      	bpl.n	8002f66 <_printf_i+0x162>
 8002f60:	2320      	movs	r3, #32
 8002f62:	4319      	orrs	r1, r3
 8002f64:	6021      	str	r1, [r4, #0]
 8002f66:	2710      	movs	r7, #16
 8002f68:	2d00      	cmp	r5, #0
 8002f6a:	d1b2      	bne.n	8002ed2 <_printf_i+0xce>
 8002f6c:	2320      	movs	r3, #32
 8002f6e:	6822      	ldr	r2, [r4, #0]
 8002f70:	439a      	bics	r2, r3
 8002f72:	6022      	str	r2, [r4, #0]
 8002f74:	e7ad      	b.n	8002ed2 <_printf_i+0xce>
 8002f76:	2220      	movs	r2, #32
 8002f78:	6809      	ldr	r1, [r1, #0]
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	6022      	str	r2, [r4, #0]
 8002f7e:	0022      	movs	r2, r4
 8002f80:	2178      	movs	r1, #120	; 0x78
 8002f82:	3245      	adds	r2, #69	; 0x45
 8002f84:	7011      	strb	r1, [r2, #0]
 8002f86:	4a27      	ldr	r2, [pc, #156]	; (8003024 <_printf_i+0x220>)
 8002f88:	e7e1      	b.n	8002f4e <_printf_i+0x14a>
 8002f8a:	0648      	lsls	r0, r1, #25
 8002f8c:	d5e6      	bpl.n	8002f5c <_printf_i+0x158>
 8002f8e:	b2ad      	uxth	r5, r5
 8002f90:	e7e4      	b.n	8002f5c <_printf_i+0x158>
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	680d      	ldr	r5, [r1, #0]
 8002f96:	1d10      	adds	r0, r2, #4
 8002f98:	6949      	ldr	r1, [r1, #20]
 8002f9a:	6018      	str	r0, [r3, #0]
 8002f9c:	6813      	ldr	r3, [r2, #0]
 8002f9e:	062e      	lsls	r6, r5, #24
 8002fa0:	d501      	bpl.n	8002fa6 <_printf_i+0x1a2>
 8002fa2:	6019      	str	r1, [r3, #0]
 8002fa4:	e002      	b.n	8002fac <_printf_i+0x1a8>
 8002fa6:	066d      	lsls	r5, r5, #25
 8002fa8:	d5fb      	bpl.n	8002fa2 <_printf_i+0x19e>
 8002faa:	8019      	strh	r1, [r3, #0]
 8002fac:	2300      	movs	r3, #0
 8002fae:	9e04      	ldr	r6, [sp, #16]
 8002fb0:	6123      	str	r3, [r4, #16]
 8002fb2:	e7bb      	b.n	8002f2c <_printf_i+0x128>
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	1d11      	adds	r1, r2, #4
 8002fb8:	6019      	str	r1, [r3, #0]
 8002fba:	6816      	ldr	r6, [r2, #0]
 8002fbc:	2100      	movs	r1, #0
 8002fbe:	0030      	movs	r0, r6
 8002fc0:	6862      	ldr	r2, [r4, #4]
 8002fc2:	f000 f831 	bl	8003028 <memchr>
 8002fc6:	2800      	cmp	r0, #0
 8002fc8:	d001      	beq.n	8002fce <_printf_i+0x1ca>
 8002fca:	1b80      	subs	r0, r0, r6
 8002fcc:	6060      	str	r0, [r4, #4]
 8002fce:	6863      	ldr	r3, [r4, #4]
 8002fd0:	6123      	str	r3, [r4, #16]
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	9a04      	ldr	r2, [sp, #16]
 8002fd6:	7013      	strb	r3, [r2, #0]
 8002fd8:	e7a8      	b.n	8002f2c <_printf_i+0x128>
 8002fda:	6923      	ldr	r3, [r4, #16]
 8002fdc:	0032      	movs	r2, r6
 8002fde:	9906      	ldr	r1, [sp, #24]
 8002fe0:	9805      	ldr	r0, [sp, #20]
 8002fe2:	9d07      	ldr	r5, [sp, #28]
 8002fe4:	47a8      	blx	r5
 8002fe6:	1c43      	adds	r3, r0, #1
 8002fe8:	d0aa      	beq.n	8002f40 <_printf_i+0x13c>
 8002fea:	6823      	ldr	r3, [r4, #0]
 8002fec:	079b      	lsls	r3, r3, #30
 8002fee:	d415      	bmi.n	800301c <_printf_i+0x218>
 8002ff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ff2:	68e0      	ldr	r0, [r4, #12]
 8002ff4:	4298      	cmp	r0, r3
 8002ff6:	daa5      	bge.n	8002f44 <_printf_i+0x140>
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	e7a3      	b.n	8002f44 <_printf_i+0x140>
 8002ffc:	0022      	movs	r2, r4
 8002ffe:	2301      	movs	r3, #1
 8003000:	9906      	ldr	r1, [sp, #24]
 8003002:	9805      	ldr	r0, [sp, #20]
 8003004:	9e07      	ldr	r6, [sp, #28]
 8003006:	3219      	adds	r2, #25
 8003008:	47b0      	blx	r6
 800300a:	1c43      	adds	r3, r0, #1
 800300c:	d098      	beq.n	8002f40 <_printf_i+0x13c>
 800300e:	3501      	adds	r5, #1
 8003010:	68e3      	ldr	r3, [r4, #12]
 8003012:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003014:	1a9b      	subs	r3, r3, r2
 8003016:	42ab      	cmp	r3, r5
 8003018:	dcf0      	bgt.n	8002ffc <_printf_i+0x1f8>
 800301a:	e7e9      	b.n	8002ff0 <_printf_i+0x1ec>
 800301c:	2500      	movs	r5, #0
 800301e:	e7f7      	b.n	8003010 <_printf_i+0x20c>
 8003020:	0800336d 	.word	0x0800336d
 8003024:	0800337e 	.word	0x0800337e

08003028 <memchr>:
 8003028:	b2c9      	uxtb	r1, r1
 800302a:	1882      	adds	r2, r0, r2
 800302c:	4290      	cmp	r0, r2
 800302e:	d101      	bne.n	8003034 <memchr+0xc>
 8003030:	2000      	movs	r0, #0
 8003032:	4770      	bx	lr
 8003034:	7803      	ldrb	r3, [r0, #0]
 8003036:	428b      	cmp	r3, r1
 8003038:	d0fb      	beq.n	8003032 <memchr+0xa>
 800303a:	3001      	adds	r0, #1
 800303c:	e7f6      	b.n	800302c <memchr+0x4>

0800303e <memcpy>:
 800303e:	2300      	movs	r3, #0
 8003040:	b510      	push	{r4, lr}
 8003042:	429a      	cmp	r2, r3
 8003044:	d100      	bne.n	8003048 <memcpy+0xa>
 8003046:	bd10      	pop	{r4, pc}
 8003048:	5ccc      	ldrb	r4, [r1, r3]
 800304a:	54c4      	strb	r4, [r0, r3]
 800304c:	3301      	adds	r3, #1
 800304e:	e7f8      	b.n	8003042 <memcpy+0x4>

08003050 <memmove>:
 8003050:	b510      	push	{r4, lr}
 8003052:	4288      	cmp	r0, r1
 8003054:	d902      	bls.n	800305c <memmove+0xc>
 8003056:	188b      	adds	r3, r1, r2
 8003058:	4298      	cmp	r0, r3
 800305a:	d303      	bcc.n	8003064 <memmove+0x14>
 800305c:	2300      	movs	r3, #0
 800305e:	e007      	b.n	8003070 <memmove+0x20>
 8003060:	5c8b      	ldrb	r3, [r1, r2]
 8003062:	5483      	strb	r3, [r0, r2]
 8003064:	3a01      	subs	r2, #1
 8003066:	d2fb      	bcs.n	8003060 <memmove+0x10>
 8003068:	bd10      	pop	{r4, pc}
 800306a:	5ccc      	ldrb	r4, [r1, r3]
 800306c:	54c4      	strb	r4, [r0, r3]
 800306e:	3301      	adds	r3, #1
 8003070:	429a      	cmp	r2, r3
 8003072:	d1fa      	bne.n	800306a <memmove+0x1a>
 8003074:	e7f8      	b.n	8003068 <memmove+0x18>
	...

08003078 <_free_r>:
 8003078:	b570      	push	{r4, r5, r6, lr}
 800307a:	0005      	movs	r5, r0
 800307c:	2900      	cmp	r1, #0
 800307e:	d010      	beq.n	80030a2 <_free_r+0x2a>
 8003080:	1f0c      	subs	r4, r1, #4
 8003082:	6823      	ldr	r3, [r4, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	da00      	bge.n	800308a <_free_r+0x12>
 8003088:	18e4      	adds	r4, r4, r3
 800308a:	0028      	movs	r0, r5
 800308c:	f000 f918 	bl	80032c0 <__malloc_lock>
 8003090:	4a1d      	ldr	r2, [pc, #116]	; (8003108 <_free_r+0x90>)
 8003092:	6813      	ldr	r3, [r2, #0]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d105      	bne.n	80030a4 <_free_r+0x2c>
 8003098:	6063      	str	r3, [r4, #4]
 800309a:	6014      	str	r4, [r2, #0]
 800309c:	0028      	movs	r0, r5
 800309e:	f000 f917 	bl	80032d0 <__malloc_unlock>
 80030a2:	bd70      	pop	{r4, r5, r6, pc}
 80030a4:	42a3      	cmp	r3, r4
 80030a6:	d908      	bls.n	80030ba <_free_r+0x42>
 80030a8:	6821      	ldr	r1, [r4, #0]
 80030aa:	1860      	adds	r0, r4, r1
 80030ac:	4283      	cmp	r3, r0
 80030ae:	d1f3      	bne.n	8003098 <_free_r+0x20>
 80030b0:	6818      	ldr	r0, [r3, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	1841      	adds	r1, r0, r1
 80030b6:	6021      	str	r1, [r4, #0]
 80030b8:	e7ee      	b.n	8003098 <_free_r+0x20>
 80030ba:	001a      	movs	r2, r3
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <_free_r+0x4e>
 80030c2:	42a3      	cmp	r3, r4
 80030c4:	d9f9      	bls.n	80030ba <_free_r+0x42>
 80030c6:	6811      	ldr	r1, [r2, #0]
 80030c8:	1850      	adds	r0, r2, r1
 80030ca:	42a0      	cmp	r0, r4
 80030cc:	d10b      	bne.n	80030e6 <_free_r+0x6e>
 80030ce:	6820      	ldr	r0, [r4, #0]
 80030d0:	1809      	adds	r1, r1, r0
 80030d2:	1850      	adds	r0, r2, r1
 80030d4:	6011      	str	r1, [r2, #0]
 80030d6:	4283      	cmp	r3, r0
 80030d8:	d1e0      	bne.n	800309c <_free_r+0x24>
 80030da:	6818      	ldr	r0, [r3, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	1841      	adds	r1, r0, r1
 80030e0:	6011      	str	r1, [r2, #0]
 80030e2:	6053      	str	r3, [r2, #4]
 80030e4:	e7da      	b.n	800309c <_free_r+0x24>
 80030e6:	42a0      	cmp	r0, r4
 80030e8:	d902      	bls.n	80030f0 <_free_r+0x78>
 80030ea:	230c      	movs	r3, #12
 80030ec:	602b      	str	r3, [r5, #0]
 80030ee:	e7d5      	b.n	800309c <_free_r+0x24>
 80030f0:	6821      	ldr	r1, [r4, #0]
 80030f2:	1860      	adds	r0, r4, r1
 80030f4:	4283      	cmp	r3, r0
 80030f6:	d103      	bne.n	8003100 <_free_r+0x88>
 80030f8:	6818      	ldr	r0, [r3, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	1841      	adds	r1, r0, r1
 80030fe:	6021      	str	r1, [r4, #0]
 8003100:	6063      	str	r3, [r4, #4]
 8003102:	6054      	str	r4, [r2, #4]
 8003104:	e7ca      	b.n	800309c <_free_r+0x24>
 8003106:	46c0      	nop			; (mov r8, r8)
 8003108:	20000180 	.word	0x20000180

0800310c <sbrk_aligned>:
 800310c:	b570      	push	{r4, r5, r6, lr}
 800310e:	4e0f      	ldr	r6, [pc, #60]	; (800314c <sbrk_aligned+0x40>)
 8003110:	000d      	movs	r5, r1
 8003112:	6831      	ldr	r1, [r6, #0]
 8003114:	0004      	movs	r4, r0
 8003116:	2900      	cmp	r1, #0
 8003118:	d102      	bne.n	8003120 <sbrk_aligned+0x14>
 800311a:	f000 f8bf 	bl	800329c <_sbrk_r>
 800311e:	6030      	str	r0, [r6, #0]
 8003120:	0029      	movs	r1, r5
 8003122:	0020      	movs	r0, r4
 8003124:	f000 f8ba 	bl	800329c <_sbrk_r>
 8003128:	1c43      	adds	r3, r0, #1
 800312a:	d00a      	beq.n	8003142 <sbrk_aligned+0x36>
 800312c:	2303      	movs	r3, #3
 800312e:	1cc5      	adds	r5, r0, #3
 8003130:	439d      	bics	r5, r3
 8003132:	42a8      	cmp	r0, r5
 8003134:	d007      	beq.n	8003146 <sbrk_aligned+0x3a>
 8003136:	1a29      	subs	r1, r5, r0
 8003138:	0020      	movs	r0, r4
 800313a:	f000 f8af 	bl	800329c <_sbrk_r>
 800313e:	1c43      	adds	r3, r0, #1
 8003140:	d101      	bne.n	8003146 <sbrk_aligned+0x3a>
 8003142:	2501      	movs	r5, #1
 8003144:	426d      	negs	r5, r5
 8003146:	0028      	movs	r0, r5
 8003148:	bd70      	pop	{r4, r5, r6, pc}
 800314a:	46c0      	nop			; (mov r8, r8)
 800314c:	20000184 	.word	0x20000184

08003150 <_malloc_r>:
 8003150:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003152:	2203      	movs	r2, #3
 8003154:	1ccb      	adds	r3, r1, #3
 8003156:	4393      	bics	r3, r2
 8003158:	3308      	adds	r3, #8
 800315a:	0006      	movs	r6, r0
 800315c:	001f      	movs	r7, r3
 800315e:	2b0c      	cmp	r3, #12
 8003160:	d232      	bcs.n	80031c8 <_malloc_r+0x78>
 8003162:	270c      	movs	r7, #12
 8003164:	42b9      	cmp	r1, r7
 8003166:	d831      	bhi.n	80031cc <_malloc_r+0x7c>
 8003168:	0030      	movs	r0, r6
 800316a:	f000 f8a9 	bl	80032c0 <__malloc_lock>
 800316e:	4d32      	ldr	r5, [pc, #200]	; (8003238 <_malloc_r+0xe8>)
 8003170:	682b      	ldr	r3, [r5, #0]
 8003172:	001c      	movs	r4, r3
 8003174:	2c00      	cmp	r4, #0
 8003176:	d12e      	bne.n	80031d6 <_malloc_r+0x86>
 8003178:	0039      	movs	r1, r7
 800317a:	0030      	movs	r0, r6
 800317c:	f7ff ffc6 	bl	800310c <sbrk_aligned>
 8003180:	0004      	movs	r4, r0
 8003182:	1c43      	adds	r3, r0, #1
 8003184:	d11e      	bne.n	80031c4 <_malloc_r+0x74>
 8003186:	682c      	ldr	r4, [r5, #0]
 8003188:	0025      	movs	r5, r4
 800318a:	2d00      	cmp	r5, #0
 800318c:	d14a      	bne.n	8003224 <_malloc_r+0xd4>
 800318e:	6823      	ldr	r3, [r4, #0]
 8003190:	0029      	movs	r1, r5
 8003192:	18e3      	adds	r3, r4, r3
 8003194:	0030      	movs	r0, r6
 8003196:	9301      	str	r3, [sp, #4]
 8003198:	f000 f880 	bl	800329c <_sbrk_r>
 800319c:	9b01      	ldr	r3, [sp, #4]
 800319e:	4283      	cmp	r3, r0
 80031a0:	d143      	bne.n	800322a <_malloc_r+0xda>
 80031a2:	6823      	ldr	r3, [r4, #0]
 80031a4:	3703      	adds	r7, #3
 80031a6:	1aff      	subs	r7, r7, r3
 80031a8:	2303      	movs	r3, #3
 80031aa:	439f      	bics	r7, r3
 80031ac:	3708      	adds	r7, #8
 80031ae:	2f0c      	cmp	r7, #12
 80031b0:	d200      	bcs.n	80031b4 <_malloc_r+0x64>
 80031b2:	270c      	movs	r7, #12
 80031b4:	0039      	movs	r1, r7
 80031b6:	0030      	movs	r0, r6
 80031b8:	f7ff ffa8 	bl	800310c <sbrk_aligned>
 80031bc:	1c43      	adds	r3, r0, #1
 80031be:	d034      	beq.n	800322a <_malloc_r+0xda>
 80031c0:	6823      	ldr	r3, [r4, #0]
 80031c2:	19df      	adds	r7, r3, r7
 80031c4:	6027      	str	r7, [r4, #0]
 80031c6:	e013      	b.n	80031f0 <_malloc_r+0xa0>
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	dacb      	bge.n	8003164 <_malloc_r+0x14>
 80031cc:	230c      	movs	r3, #12
 80031ce:	2500      	movs	r5, #0
 80031d0:	6033      	str	r3, [r6, #0]
 80031d2:	0028      	movs	r0, r5
 80031d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80031d6:	6822      	ldr	r2, [r4, #0]
 80031d8:	1bd1      	subs	r1, r2, r7
 80031da:	d420      	bmi.n	800321e <_malloc_r+0xce>
 80031dc:	290b      	cmp	r1, #11
 80031de:	d917      	bls.n	8003210 <_malloc_r+0xc0>
 80031e0:	19e2      	adds	r2, r4, r7
 80031e2:	6027      	str	r7, [r4, #0]
 80031e4:	42a3      	cmp	r3, r4
 80031e6:	d111      	bne.n	800320c <_malloc_r+0xbc>
 80031e8:	602a      	str	r2, [r5, #0]
 80031ea:	6863      	ldr	r3, [r4, #4]
 80031ec:	6011      	str	r1, [r2, #0]
 80031ee:	6053      	str	r3, [r2, #4]
 80031f0:	0030      	movs	r0, r6
 80031f2:	0025      	movs	r5, r4
 80031f4:	f000 f86c 	bl	80032d0 <__malloc_unlock>
 80031f8:	2207      	movs	r2, #7
 80031fa:	350b      	adds	r5, #11
 80031fc:	1d23      	adds	r3, r4, #4
 80031fe:	4395      	bics	r5, r2
 8003200:	1aea      	subs	r2, r5, r3
 8003202:	429d      	cmp	r5, r3
 8003204:	d0e5      	beq.n	80031d2 <_malloc_r+0x82>
 8003206:	1b5b      	subs	r3, r3, r5
 8003208:	50a3      	str	r3, [r4, r2]
 800320a:	e7e2      	b.n	80031d2 <_malloc_r+0x82>
 800320c:	605a      	str	r2, [r3, #4]
 800320e:	e7ec      	b.n	80031ea <_malloc_r+0x9a>
 8003210:	6862      	ldr	r2, [r4, #4]
 8003212:	42a3      	cmp	r3, r4
 8003214:	d101      	bne.n	800321a <_malloc_r+0xca>
 8003216:	602a      	str	r2, [r5, #0]
 8003218:	e7ea      	b.n	80031f0 <_malloc_r+0xa0>
 800321a:	605a      	str	r2, [r3, #4]
 800321c:	e7e8      	b.n	80031f0 <_malloc_r+0xa0>
 800321e:	0023      	movs	r3, r4
 8003220:	6864      	ldr	r4, [r4, #4]
 8003222:	e7a7      	b.n	8003174 <_malloc_r+0x24>
 8003224:	002c      	movs	r4, r5
 8003226:	686d      	ldr	r5, [r5, #4]
 8003228:	e7af      	b.n	800318a <_malloc_r+0x3a>
 800322a:	230c      	movs	r3, #12
 800322c:	0030      	movs	r0, r6
 800322e:	6033      	str	r3, [r6, #0]
 8003230:	f000 f84e 	bl	80032d0 <__malloc_unlock>
 8003234:	e7cd      	b.n	80031d2 <_malloc_r+0x82>
 8003236:	46c0      	nop			; (mov r8, r8)
 8003238:	20000180 	.word	0x20000180

0800323c <_realloc_r>:
 800323c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800323e:	0007      	movs	r7, r0
 8003240:	000e      	movs	r6, r1
 8003242:	0014      	movs	r4, r2
 8003244:	2900      	cmp	r1, #0
 8003246:	d105      	bne.n	8003254 <_realloc_r+0x18>
 8003248:	0011      	movs	r1, r2
 800324a:	f7ff ff81 	bl	8003150 <_malloc_r>
 800324e:	0005      	movs	r5, r0
 8003250:	0028      	movs	r0, r5
 8003252:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003254:	2a00      	cmp	r2, #0
 8003256:	d103      	bne.n	8003260 <_realloc_r+0x24>
 8003258:	f7ff ff0e 	bl	8003078 <_free_r>
 800325c:	0025      	movs	r5, r4
 800325e:	e7f7      	b.n	8003250 <_realloc_r+0x14>
 8003260:	f000 f83e 	bl	80032e0 <_malloc_usable_size_r>
 8003264:	9001      	str	r0, [sp, #4]
 8003266:	4284      	cmp	r4, r0
 8003268:	d803      	bhi.n	8003272 <_realloc_r+0x36>
 800326a:	0035      	movs	r5, r6
 800326c:	0843      	lsrs	r3, r0, #1
 800326e:	42a3      	cmp	r3, r4
 8003270:	d3ee      	bcc.n	8003250 <_realloc_r+0x14>
 8003272:	0021      	movs	r1, r4
 8003274:	0038      	movs	r0, r7
 8003276:	f7ff ff6b 	bl	8003150 <_malloc_r>
 800327a:	1e05      	subs	r5, r0, #0
 800327c:	d0e8      	beq.n	8003250 <_realloc_r+0x14>
 800327e:	9b01      	ldr	r3, [sp, #4]
 8003280:	0022      	movs	r2, r4
 8003282:	429c      	cmp	r4, r3
 8003284:	d900      	bls.n	8003288 <_realloc_r+0x4c>
 8003286:	001a      	movs	r2, r3
 8003288:	0031      	movs	r1, r6
 800328a:	0028      	movs	r0, r5
 800328c:	f7ff fed7 	bl	800303e <memcpy>
 8003290:	0031      	movs	r1, r6
 8003292:	0038      	movs	r0, r7
 8003294:	f7ff fef0 	bl	8003078 <_free_r>
 8003298:	e7da      	b.n	8003250 <_realloc_r+0x14>
	...

0800329c <_sbrk_r>:
 800329c:	2300      	movs	r3, #0
 800329e:	b570      	push	{r4, r5, r6, lr}
 80032a0:	4d06      	ldr	r5, [pc, #24]	; (80032bc <_sbrk_r+0x20>)
 80032a2:	0004      	movs	r4, r0
 80032a4:	0008      	movs	r0, r1
 80032a6:	602b      	str	r3, [r5, #0]
 80032a8:	f7fd f9d6 	bl	8000658 <_sbrk>
 80032ac:	1c43      	adds	r3, r0, #1
 80032ae:	d103      	bne.n	80032b8 <_sbrk_r+0x1c>
 80032b0:	682b      	ldr	r3, [r5, #0]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d000      	beq.n	80032b8 <_sbrk_r+0x1c>
 80032b6:	6023      	str	r3, [r4, #0]
 80032b8:	bd70      	pop	{r4, r5, r6, pc}
 80032ba:	46c0      	nop			; (mov r8, r8)
 80032bc:	20000188 	.word	0x20000188

080032c0 <__malloc_lock>:
 80032c0:	b510      	push	{r4, lr}
 80032c2:	4802      	ldr	r0, [pc, #8]	; (80032cc <__malloc_lock+0xc>)
 80032c4:	f000 f814 	bl	80032f0 <__retarget_lock_acquire_recursive>
 80032c8:	bd10      	pop	{r4, pc}
 80032ca:	46c0      	nop			; (mov r8, r8)
 80032cc:	2000018c 	.word	0x2000018c

080032d0 <__malloc_unlock>:
 80032d0:	b510      	push	{r4, lr}
 80032d2:	4802      	ldr	r0, [pc, #8]	; (80032dc <__malloc_unlock+0xc>)
 80032d4:	f000 f80d 	bl	80032f2 <__retarget_lock_release_recursive>
 80032d8:	bd10      	pop	{r4, pc}
 80032da:	46c0      	nop			; (mov r8, r8)
 80032dc:	2000018c 	.word	0x2000018c

080032e0 <_malloc_usable_size_r>:
 80032e0:	1f0b      	subs	r3, r1, #4
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	1f18      	subs	r0, r3, #4
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	da01      	bge.n	80032ee <_malloc_usable_size_r+0xe>
 80032ea:	580b      	ldr	r3, [r1, r0]
 80032ec:	18c0      	adds	r0, r0, r3
 80032ee:	4770      	bx	lr

080032f0 <__retarget_lock_acquire_recursive>:
 80032f0:	4770      	bx	lr

080032f2 <__retarget_lock_release_recursive>:
 80032f2:	4770      	bx	lr

080032f4 <_init>:
 80032f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032f6:	46c0      	nop			; (mov r8, r8)
 80032f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032fa:	bc08      	pop	{r3}
 80032fc:	469e      	mov	lr, r3
 80032fe:	4770      	bx	lr

08003300 <_fini>:
 8003300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003302:	46c0      	nop			; (mov r8, r8)
 8003304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003306:	bc08      	pop	{r3}
 8003308:	469e      	mov	lr, r3
 800330a:	4770      	bx	lr
