
I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004818  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  080048d8  080048d8  000148d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a44  08004a44  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004a44  08004a44  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a44  08004a44  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a44  08004a44  00014a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a48  08004a48  00014a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004a4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  20000070  08004abc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  08004abc  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aa89  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017d3  00000000  00000000  0002ab21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008e0  00000000  00000000  0002c2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000838  00000000  00000000  0002cbd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011e09  00000000  00000000  0002d410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c737  00000000  00000000  0003f219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006a097  00000000  00000000  0004b950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b59e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000248c  00000000  00000000  000b5a38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080048c0 	.word	0x080048c0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080048c0 	.word	0x080048c0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_f2uiz>:
 8000244:	219e      	movs	r1, #158	; 0x9e
 8000246:	b510      	push	{r4, lr}
 8000248:	05c9      	lsls	r1, r1, #23
 800024a:	1c04      	adds	r4, r0, #0
 800024c:	f000 fe5a 	bl	8000f04 <__aeabi_fcmpge>
 8000250:	2800      	cmp	r0, #0
 8000252:	d103      	bne.n	800025c <__aeabi_f2uiz+0x18>
 8000254:	1c20      	adds	r0, r4, #0
 8000256:	f000 fae1 	bl	800081c <__aeabi_f2iz>
 800025a:	bd10      	pop	{r4, pc}
 800025c:	219e      	movs	r1, #158	; 0x9e
 800025e:	1c20      	adds	r0, r4, #0
 8000260:	05c9      	lsls	r1, r1, #23
 8000262:	f000 f92d 	bl	80004c0 <__aeabi_fsub>
 8000266:	f000 fad9 	bl	800081c <__aeabi_f2iz>
 800026a:	2380      	movs	r3, #128	; 0x80
 800026c:	061b      	lsls	r3, r3, #24
 800026e:	469c      	mov	ip, r3
 8000270:	4460      	add	r0, ip
 8000272:	e7f2      	b.n	800025a <__aeabi_f2uiz+0x16>

08000274 <__aeabi_fmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	464f      	mov	r7, r9
 8000278:	4646      	mov	r6, r8
 800027a:	46d6      	mov	lr, sl
 800027c:	0244      	lsls	r4, r0, #9
 800027e:	0045      	lsls	r5, r0, #1
 8000280:	b5c0      	push	{r6, r7, lr}
 8000282:	0a64      	lsrs	r4, r4, #9
 8000284:	1c0f      	adds	r7, r1, #0
 8000286:	0e2d      	lsrs	r5, r5, #24
 8000288:	0fc6      	lsrs	r6, r0, #31
 800028a:	2d00      	cmp	r5, #0
 800028c:	d100      	bne.n	8000290 <__aeabi_fmul+0x1c>
 800028e:	e08d      	b.n	80003ac <__aeabi_fmul+0x138>
 8000290:	2dff      	cmp	r5, #255	; 0xff
 8000292:	d100      	bne.n	8000296 <__aeabi_fmul+0x22>
 8000294:	e092      	b.n	80003bc <__aeabi_fmul+0x148>
 8000296:	2300      	movs	r3, #0
 8000298:	2080      	movs	r0, #128	; 0x80
 800029a:	4699      	mov	r9, r3
 800029c:	469a      	mov	sl, r3
 800029e:	00e4      	lsls	r4, r4, #3
 80002a0:	04c0      	lsls	r0, r0, #19
 80002a2:	4304      	orrs	r4, r0
 80002a4:	3d7f      	subs	r5, #127	; 0x7f
 80002a6:	0278      	lsls	r0, r7, #9
 80002a8:	0a43      	lsrs	r3, r0, #9
 80002aa:	4698      	mov	r8, r3
 80002ac:	007b      	lsls	r3, r7, #1
 80002ae:	0e1b      	lsrs	r3, r3, #24
 80002b0:	0fff      	lsrs	r7, r7, #31
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d100      	bne.n	80002b8 <__aeabi_fmul+0x44>
 80002b6:	e070      	b.n	800039a <__aeabi_fmul+0x126>
 80002b8:	2bff      	cmp	r3, #255	; 0xff
 80002ba:	d100      	bne.n	80002be <__aeabi_fmul+0x4a>
 80002bc:	e086      	b.n	80003cc <__aeabi_fmul+0x158>
 80002be:	4642      	mov	r2, r8
 80002c0:	00d0      	lsls	r0, r2, #3
 80002c2:	2280      	movs	r2, #128	; 0x80
 80002c4:	3b7f      	subs	r3, #127	; 0x7f
 80002c6:	18ed      	adds	r5, r5, r3
 80002c8:	2300      	movs	r3, #0
 80002ca:	04d2      	lsls	r2, r2, #19
 80002cc:	4302      	orrs	r2, r0
 80002ce:	4690      	mov	r8, r2
 80002d0:	469c      	mov	ip, r3
 80002d2:	0031      	movs	r1, r6
 80002d4:	464b      	mov	r3, r9
 80002d6:	4079      	eors	r1, r7
 80002d8:	1c68      	adds	r0, r5, #1
 80002da:	2b0f      	cmp	r3, #15
 80002dc:	d81c      	bhi.n	8000318 <__aeabi_fmul+0xa4>
 80002de:	4a76      	ldr	r2, [pc, #472]	; (80004b8 <__aeabi_fmul+0x244>)
 80002e0:	009b      	lsls	r3, r3, #2
 80002e2:	58d3      	ldr	r3, [r2, r3]
 80002e4:	469f      	mov	pc, r3
 80002e6:	0039      	movs	r1, r7
 80002e8:	4644      	mov	r4, r8
 80002ea:	46e2      	mov	sl, ip
 80002ec:	4653      	mov	r3, sl
 80002ee:	2b02      	cmp	r3, #2
 80002f0:	d00f      	beq.n	8000312 <__aeabi_fmul+0x9e>
 80002f2:	2b03      	cmp	r3, #3
 80002f4:	d100      	bne.n	80002f8 <__aeabi_fmul+0x84>
 80002f6:	e0d7      	b.n	80004a8 <__aeabi_fmul+0x234>
 80002f8:	2b01      	cmp	r3, #1
 80002fa:	d137      	bne.n	800036c <__aeabi_fmul+0xf8>
 80002fc:	2000      	movs	r0, #0
 80002fe:	2400      	movs	r4, #0
 8000300:	05c0      	lsls	r0, r0, #23
 8000302:	4320      	orrs	r0, r4
 8000304:	07c9      	lsls	r1, r1, #31
 8000306:	4308      	orrs	r0, r1
 8000308:	bce0      	pop	{r5, r6, r7}
 800030a:	46ba      	mov	sl, r7
 800030c:	46b1      	mov	r9, r6
 800030e:	46a8      	mov	r8, r5
 8000310:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000312:	20ff      	movs	r0, #255	; 0xff
 8000314:	2400      	movs	r4, #0
 8000316:	e7f3      	b.n	8000300 <__aeabi_fmul+0x8c>
 8000318:	0c26      	lsrs	r6, r4, #16
 800031a:	0424      	lsls	r4, r4, #16
 800031c:	0c22      	lsrs	r2, r4, #16
 800031e:	4644      	mov	r4, r8
 8000320:	0424      	lsls	r4, r4, #16
 8000322:	0c24      	lsrs	r4, r4, #16
 8000324:	4643      	mov	r3, r8
 8000326:	0027      	movs	r7, r4
 8000328:	0c1b      	lsrs	r3, r3, #16
 800032a:	4357      	muls	r7, r2
 800032c:	4374      	muls	r4, r6
 800032e:	435a      	muls	r2, r3
 8000330:	435e      	muls	r6, r3
 8000332:	1912      	adds	r2, r2, r4
 8000334:	0c3b      	lsrs	r3, r7, #16
 8000336:	189b      	adds	r3, r3, r2
 8000338:	429c      	cmp	r4, r3
 800033a:	d903      	bls.n	8000344 <__aeabi_fmul+0xd0>
 800033c:	2280      	movs	r2, #128	; 0x80
 800033e:	0252      	lsls	r2, r2, #9
 8000340:	4694      	mov	ip, r2
 8000342:	4466      	add	r6, ip
 8000344:	043f      	lsls	r7, r7, #16
 8000346:	041a      	lsls	r2, r3, #16
 8000348:	0c3f      	lsrs	r7, r7, #16
 800034a:	19d2      	adds	r2, r2, r7
 800034c:	0194      	lsls	r4, r2, #6
 800034e:	1e67      	subs	r7, r4, #1
 8000350:	41bc      	sbcs	r4, r7
 8000352:	0c1b      	lsrs	r3, r3, #16
 8000354:	0e92      	lsrs	r2, r2, #26
 8000356:	199b      	adds	r3, r3, r6
 8000358:	4314      	orrs	r4, r2
 800035a:	019b      	lsls	r3, r3, #6
 800035c:	431c      	orrs	r4, r3
 800035e:	011b      	lsls	r3, r3, #4
 8000360:	d400      	bmi.n	8000364 <__aeabi_fmul+0xf0>
 8000362:	e09b      	b.n	800049c <__aeabi_fmul+0x228>
 8000364:	2301      	movs	r3, #1
 8000366:	0862      	lsrs	r2, r4, #1
 8000368:	401c      	ands	r4, r3
 800036a:	4314      	orrs	r4, r2
 800036c:	0002      	movs	r2, r0
 800036e:	327f      	adds	r2, #127	; 0x7f
 8000370:	2a00      	cmp	r2, #0
 8000372:	dd64      	ble.n	800043e <__aeabi_fmul+0x1ca>
 8000374:	0763      	lsls	r3, r4, #29
 8000376:	d004      	beq.n	8000382 <__aeabi_fmul+0x10e>
 8000378:	230f      	movs	r3, #15
 800037a:	4023      	ands	r3, r4
 800037c:	2b04      	cmp	r3, #4
 800037e:	d000      	beq.n	8000382 <__aeabi_fmul+0x10e>
 8000380:	3404      	adds	r4, #4
 8000382:	0123      	lsls	r3, r4, #4
 8000384:	d503      	bpl.n	800038e <__aeabi_fmul+0x11a>
 8000386:	0002      	movs	r2, r0
 8000388:	4b4c      	ldr	r3, [pc, #304]	; (80004bc <__aeabi_fmul+0x248>)
 800038a:	3280      	adds	r2, #128	; 0x80
 800038c:	401c      	ands	r4, r3
 800038e:	2afe      	cmp	r2, #254	; 0xfe
 8000390:	dcbf      	bgt.n	8000312 <__aeabi_fmul+0x9e>
 8000392:	01a4      	lsls	r4, r4, #6
 8000394:	0a64      	lsrs	r4, r4, #9
 8000396:	b2d0      	uxtb	r0, r2
 8000398:	e7b2      	b.n	8000300 <__aeabi_fmul+0x8c>
 800039a:	4643      	mov	r3, r8
 800039c:	2b00      	cmp	r3, #0
 800039e:	d13d      	bne.n	800041c <__aeabi_fmul+0x1a8>
 80003a0:	464a      	mov	r2, r9
 80003a2:	3301      	adds	r3, #1
 80003a4:	431a      	orrs	r2, r3
 80003a6:	4691      	mov	r9, r2
 80003a8:	469c      	mov	ip, r3
 80003aa:	e792      	b.n	80002d2 <__aeabi_fmul+0x5e>
 80003ac:	2c00      	cmp	r4, #0
 80003ae:	d129      	bne.n	8000404 <__aeabi_fmul+0x190>
 80003b0:	2304      	movs	r3, #4
 80003b2:	4699      	mov	r9, r3
 80003b4:	3b03      	subs	r3, #3
 80003b6:	2500      	movs	r5, #0
 80003b8:	469a      	mov	sl, r3
 80003ba:	e774      	b.n	80002a6 <__aeabi_fmul+0x32>
 80003bc:	2c00      	cmp	r4, #0
 80003be:	d11b      	bne.n	80003f8 <__aeabi_fmul+0x184>
 80003c0:	2308      	movs	r3, #8
 80003c2:	4699      	mov	r9, r3
 80003c4:	3b06      	subs	r3, #6
 80003c6:	25ff      	movs	r5, #255	; 0xff
 80003c8:	469a      	mov	sl, r3
 80003ca:	e76c      	b.n	80002a6 <__aeabi_fmul+0x32>
 80003cc:	4643      	mov	r3, r8
 80003ce:	35ff      	adds	r5, #255	; 0xff
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d10b      	bne.n	80003ec <__aeabi_fmul+0x178>
 80003d4:	2302      	movs	r3, #2
 80003d6:	464a      	mov	r2, r9
 80003d8:	431a      	orrs	r2, r3
 80003da:	4691      	mov	r9, r2
 80003dc:	469c      	mov	ip, r3
 80003de:	e778      	b.n	80002d2 <__aeabi_fmul+0x5e>
 80003e0:	4653      	mov	r3, sl
 80003e2:	0031      	movs	r1, r6
 80003e4:	2b02      	cmp	r3, #2
 80003e6:	d000      	beq.n	80003ea <__aeabi_fmul+0x176>
 80003e8:	e783      	b.n	80002f2 <__aeabi_fmul+0x7e>
 80003ea:	e792      	b.n	8000312 <__aeabi_fmul+0x9e>
 80003ec:	2303      	movs	r3, #3
 80003ee:	464a      	mov	r2, r9
 80003f0:	431a      	orrs	r2, r3
 80003f2:	4691      	mov	r9, r2
 80003f4:	469c      	mov	ip, r3
 80003f6:	e76c      	b.n	80002d2 <__aeabi_fmul+0x5e>
 80003f8:	230c      	movs	r3, #12
 80003fa:	4699      	mov	r9, r3
 80003fc:	3b09      	subs	r3, #9
 80003fe:	25ff      	movs	r5, #255	; 0xff
 8000400:	469a      	mov	sl, r3
 8000402:	e750      	b.n	80002a6 <__aeabi_fmul+0x32>
 8000404:	0020      	movs	r0, r4
 8000406:	f000 fd87 	bl	8000f18 <__clzsi2>
 800040a:	2576      	movs	r5, #118	; 0x76
 800040c:	1f43      	subs	r3, r0, #5
 800040e:	409c      	lsls	r4, r3
 8000410:	2300      	movs	r3, #0
 8000412:	426d      	negs	r5, r5
 8000414:	4699      	mov	r9, r3
 8000416:	469a      	mov	sl, r3
 8000418:	1a2d      	subs	r5, r5, r0
 800041a:	e744      	b.n	80002a6 <__aeabi_fmul+0x32>
 800041c:	4640      	mov	r0, r8
 800041e:	f000 fd7b 	bl	8000f18 <__clzsi2>
 8000422:	4642      	mov	r2, r8
 8000424:	1f43      	subs	r3, r0, #5
 8000426:	409a      	lsls	r2, r3
 8000428:	2300      	movs	r3, #0
 800042a:	1a2d      	subs	r5, r5, r0
 800042c:	4690      	mov	r8, r2
 800042e:	469c      	mov	ip, r3
 8000430:	3d76      	subs	r5, #118	; 0x76
 8000432:	e74e      	b.n	80002d2 <__aeabi_fmul+0x5e>
 8000434:	2480      	movs	r4, #128	; 0x80
 8000436:	2100      	movs	r1, #0
 8000438:	20ff      	movs	r0, #255	; 0xff
 800043a:	03e4      	lsls	r4, r4, #15
 800043c:	e760      	b.n	8000300 <__aeabi_fmul+0x8c>
 800043e:	2301      	movs	r3, #1
 8000440:	1a9b      	subs	r3, r3, r2
 8000442:	2b1b      	cmp	r3, #27
 8000444:	dd00      	ble.n	8000448 <__aeabi_fmul+0x1d4>
 8000446:	e759      	b.n	80002fc <__aeabi_fmul+0x88>
 8000448:	0022      	movs	r2, r4
 800044a:	309e      	adds	r0, #158	; 0x9e
 800044c:	40da      	lsrs	r2, r3
 800044e:	4084      	lsls	r4, r0
 8000450:	0013      	movs	r3, r2
 8000452:	1e62      	subs	r2, r4, #1
 8000454:	4194      	sbcs	r4, r2
 8000456:	431c      	orrs	r4, r3
 8000458:	0763      	lsls	r3, r4, #29
 800045a:	d004      	beq.n	8000466 <__aeabi_fmul+0x1f2>
 800045c:	230f      	movs	r3, #15
 800045e:	4023      	ands	r3, r4
 8000460:	2b04      	cmp	r3, #4
 8000462:	d000      	beq.n	8000466 <__aeabi_fmul+0x1f2>
 8000464:	3404      	adds	r4, #4
 8000466:	0163      	lsls	r3, r4, #5
 8000468:	d51a      	bpl.n	80004a0 <__aeabi_fmul+0x22c>
 800046a:	2001      	movs	r0, #1
 800046c:	2400      	movs	r4, #0
 800046e:	e747      	b.n	8000300 <__aeabi_fmul+0x8c>
 8000470:	2080      	movs	r0, #128	; 0x80
 8000472:	03c0      	lsls	r0, r0, #15
 8000474:	4204      	tst	r4, r0
 8000476:	d009      	beq.n	800048c <__aeabi_fmul+0x218>
 8000478:	4643      	mov	r3, r8
 800047a:	4203      	tst	r3, r0
 800047c:	d106      	bne.n	800048c <__aeabi_fmul+0x218>
 800047e:	4644      	mov	r4, r8
 8000480:	4304      	orrs	r4, r0
 8000482:	0264      	lsls	r4, r4, #9
 8000484:	0039      	movs	r1, r7
 8000486:	20ff      	movs	r0, #255	; 0xff
 8000488:	0a64      	lsrs	r4, r4, #9
 800048a:	e739      	b.n	8000300 <__aeabi_fmul+0x8c>
 800048c:	2080      	movs	r0, #128	; 0x80
 800048e:	03c0      	lsls	r0, r0, #15
 8000490:	4304      	orrs	r4, r0
 8000492:	0264      	lsls	r4, r4, #9
 8000494:	0031      	movs	r1, r6
 8000496:	20ff      	movs	r0, #255	; 0xff
 8000498:	0a64      	lsrs	r4, r4, #9
 800049a:	e731      	b.n	8000300 <__aeabi_fmul+0x8c>
 800049c:	0028      	movs	r0, r5
 800049e:	e765      	b.n	800036c <__aeabi_fmul+0xf8>
 80004a0:	01a4      	lsls	r4, r4, #6
 80004a2:	2000      	movs	r0, #0
 80004a4:	0a64      	lsrs	r4, r4, #9
 80004a6:	e72b      	b.n	8000300 <__aeabi_fmul+0x8c>
 80004a8:	2080      	movs	r0, #128	; 0x80
 80004aa:	03c0      	lsls	r0, r0, #15
 80004ac:	4304      	orrs	r4, r0
 80004ae:	0264      	lsls	r4, r4, #9
 80004b0:	20ff      	movs	r0, #255	; 0xff
 80004b2:	0a64      	lsrs	r4, r4, #9
 80004b4:	e724      	b.n	8000300 <__aeabi_fmul+0x8c>
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	08004958 	.word	0x08004958
 80004bc:	f7ffffff 	.word	0xf7ffffff

080004c0 <__aeabi_fsub>:
 80004c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004c2:	46ce      	mov	lr, r9
 80004c4:	4647      	mov	r7, r8
 80004c6:	0243      	lsls	r3, r0, #9
 80004c8:	0a5b      	lsrs	r3, r3, #9
 80004ca:	024e      	lsls	r6, r1, #9
 80004cc:	00da      	lsls	r2, r3, #3
 80004ce:	4694      	mov	ip, r2
 80004d0:	0a72      	lsrs	r2, r6, #9
 80004d2:	4691      	mov	r9, r2
 80004d4:	0045      	lsls	r5, r0, #1
 80004d6:	004a      	lsls	r2, r1, #1
 80004d8:	b580      	push	{r7, lr}
 80004da:	0e2d      	lsrs	r5, r5, #24
 80004dc:	001f      	movs	r7, r3
 80004de:	0fc4      	lsrs	r4, r0, #31
 80004e0:	0e12      	lsrs	r2, r2, #24
 80004e2:	0fc9      	lsrs	r1, r1, #31
 80004e4:	09b6      	lsrs	r6, r6, #6
 80004e6:	2aff      	cmp	r2, #255	; 0xff
 80004e8:	d05b      	beq.n	80005a2 <__aeabi_fsub+0xe2>
 80004ea:	2001      	movs	r0, #1
 80004ec:	4041      	eors	r1, r0
 80004ee:	428c      	cmp	r4, r1
 80004f0:	d039      	beq.n	8000566 <__aeabi_fsub+0xa6>
 80004f2:	1aa8      	subs	r0, r5, r2
 80004f4:	2800      	cmp	r0, #0
 80004f6:	dd5a      	ble.n	80005ae <__aeabi_fsub+0xee>
 80004f8:	2a00      	cmp	r2, #0
 80004fa:	d06a      	beq.n	80005d2 <__aeabi_fsub+0x112>
 80004fc:	2dff      	cmp	r5, #255	; 0xff
 80004fe:	d100      	bne.n	8000502 <__aeabi_fsub+0x42>
 8000500:	e0d9      	b.n	80006b6 <__aeabi_fsub+0x1f6>
 8000502:	2280      	movs	r2, #128	; 0x80
 8000504:	04d2      	lsls	r2, r2, #19
 8000506:	4316      	orrs	r6, r2
 8000508:	281b      	cmp	r0, #27
 800050a:	dc00      	bgt.n	800050e <__aeabi_fsub+0x4e>
 800050c:	e0e9      	b.n	80006e2 <__aeabi_fsub+0x222>
 800050e:	2001      	movs	r0, #1
 8000510:	4663      	mov	r3, ip
 8000512:	1a18      	subs	r0, r3, r0
 8000514:	0143      	lsls	r3, r0, #5
 8000516:	d400      	bmi.n	800051a <__aeabi_fsub+0x5a>
 8000518:	e0b4      	b.n	8000684 <__aeabi_fsub+0x1c4>
 800051a:	0180      	lsls	r0, r0, #6
 800051c:	0987      	lsrs	r7, r0, #6
 800051e:	0038      	movs	r0, r7
 8000520:	f000 fcfa 	bl	8000f18 <__clzsi2>
 8000524:	3805      	subs	r0, #5
 8000526:	4087      	lsls	r7, r0
 8000528:	4285      	cmp	r5, r0
 800052a:	dc00      	bgt.n	800052e <__aeabi_fsub+0x6e>
 800052c:	e0cc      	b.n	80006c8 <__aeabi_fsub+0x208>
 800052e:	1a2d      	subs	r5, r5, r0
 8000530:	48b5      	ldr	r0, [pc, #724]	; (8000808 <__aeabi_fsub+0x348>)
 8000532:	4038      	ands	r0, r7
 8000534:	0743      	lsls	r3, r0, #29
 8000536:	d004      	beq.n	8000542 <__aeabi_fsub+0x82>
 8000538:	230f      	movs	r3, #15
 800053a:	4003      	ands	r3, r0
 800053c:	2b04      	cmp	r3, #4
 800053e:	d000      	beq.n	8000542 <__aeabi_fsub+0x82>
 8000540:	3004      	adds	r0, #4
 8000542:	0143      	lsls	r3, r0, #5
 8000544:	d400      	bmi.n	8000548 <__aeabi_fsub+0x88>
 8000546:	e0a0      	b.n	800068a <__aeabi_fsub+0x1ca>
 8000548:	1c6a      	adds	r2, r5, #1
 800054a:	2dfe      	cmp	r5, #254	; 0xfe
 800054c:	d100      	bne.n	8000550 <__aeabi_fsub+0x90>
 800054e:	e08d      	b.n	800066c <__aeabi_fsub+0x1ac>
 8000550:	0180      	lsls	r0, r0, #6
 8000552:	0a47      	lsrs	r7, r0, #9
 8000554:	b2d2      	uxtb	r2, r2
 8000556:	05d0      	lsls	r0, r2, #23
 8000558:	4338      	orrs	r0, r7
 800055a:	07e4      	lsls	r4, r4, #31
 800055c:	4320      	orrs	r0, r4
 800055e:	bcc0      	pop	{r6, r7}
 8000560:	46b9      	mov	r9, r7
 8000562:	46b0      	mov	r8, r6
 8000564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000566:	1aa8      	subs	r0, r5, r2
 8000568:	4680      	mov	r8, r0
 800056a:	2800      	cmp	r0, #0
 800056c:	dd45      	ble.n	80005fa <__aeabi_fsub+0x13a>
 800056e:	2a00      	cmp	r2, #0
 8000570:	d070      	beq.n	8000654 <__aeabi_fsub+0x194>
 8000572:	2dff      	cmp	r5, #255	; 0xff
 8000574:	d100      	bne.n	8000578 <__aeabi_fsub+0xb8>
 8000576:	e09e      	b.n	80006b6 <__aeabi_fsub+0x1f6>
 8000578:	2380      	movs	r3, #128	; 0x80
 800057a:	04db      	lsls	r3, r3, #19
 800057c:	431e      	orrs	r6, r3
 800057e:	4643      	mov	r3, r8
 8000580:	2b1b      	cmp	r3, #27
 8000582:	dc00      	bgt.n	8000586 <__aeabi_fsub+0xc6>
 8000584:	e0d2      	b.n	800072c <__aeabi_fsub+0x26c>
 8000586:	2001      	movs	r0, #1
 8000588:	4460      	add	r0, ip
 800058a:	0143      	lsls	r3, r0, #5
 800058c:	d57a      	bpl.n	8000684 <__aeabi_fsub+0x1c4>
 800058e:	3501      	adds	r5, #1
 8000590:	2dff      	cmp	r5, #255	; 0xff
 8000592:	d06b      	beq.n	800066c <__aeabi_fsub+0x1ac>
 8000594:	2301      	movs	r3, #1
 8000596:	4a9d      	ldr	r2, [pc, #628]	; (800080c <__aeabi_fsub+0x34c>)
 8000598:	4003      	ands	r3, r0
 800059a:	0840      	lsrs	r0, r0, #1
 800059c:	4010      	ands	r0, r2
 800059e:	4318      	orrs	r0, r3
 80005a0:	e7c8      	b.n	8000534 <__aeabi_fsub+0x74>
 80005a2:	2e00      	cmp	r6, #0
 80005a4:	d020      	beq.n	80005e8 <__aeabi_fsub+0x128>
 80005a6:	428c      	cmp	r4, r1
 80005a8:	d023      	beq.n	80005f2 <__aeabi_fsub+0x132>
 80005aa:	0028      	movs	r0, r5
 80005ac:	38ff      	subs	r0, #255	; 0xff
 80005ae:	2800      	cmp	r0, #0
 80005b0:	d039      	beq.n	8000626 <__aeabi_fsub+0x166>
 80005b2:	1b57      	subs	r7, r2, r5
 80005b4:	2d00      	cmp	r5, #0
 80005b6:	d000      	beq.n	80005ba <__aeabi_fsub+0xfa>
 80005b8:	e09d      	b.n	80006f6 <__aeabi_fsub+0x236>
 80005ba:	4663      	mov	r3, ip
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d100      	bne.n	80005c2 <__aeabi_fsub+0x102>
 80005c0:	e0db      	b.n	800077a <__aeabi_fsub+0x2ba>
 80005c2:	1e7b      	subs	r3, r7, #1
 80005c4:	2f01      	cmp	r7, #1
 80005c6:	d100      	bne.n	80005ca <__aeabi_fsub+0x10a>
 80005c8:	e10d      	b.n	80007e6 <__aeabi_fsub+0x326>
 80005ca:	2fff      	cmp	r7, #255	; 0xff
 80005cc:	d071      	beq.n	80006b2 <__aeabi_fsub+0x1f2>
 80005ce:	001f      	movs	r7, r3
 80005d0:	e098      	b.n	8000704 <__aeabi_fsub+0x244>
 80005d2:	2e00      	cmp	r6, #0
 80005d4:	d100      	bne.n	80005d8 <__aeabi_fsub+0x118>
 80005d6:	e0a7      	b.n	8000728 <__aeabi_fsub+0x268>
 80005d8:	1e42      	subs	r2, r0, #1
 80005da:	2801      	cmp	r0, #1
 80005dc:	d100      	bne.n	80005e0 <__aeabi_fsub+0x120>
 80005de:	e0e6      	b.n	80007ae <__aeabi_fsub+0x2ee>
 80005e0:	28ff      	cmp	r0, #255	; 0xff
 80005e2:	d068      	beq.n	80006b6 <__aeabi_fsub+0x1f6>
 80005e4:	0010      	movs	r0, r2
 80005e6:	e78f      	b.n	8000508 <__aeabi_fsub+0x48>
 80005e8:	2001      	movs	r0, #1
 80005ea:	4041      	eors	r1, r0
 80005ec:	42a1      	cmp	r1, r4
 80005ee:	d000      	beq.n	80005f2 <__aeabi_fsub+0x132>
 80005f0:	e77f      	b.n	80004f2 <__aeabi_fsub+0x32>
 80005f2:	20ff      	movs	r0, #255	; 0xff
 80005f4:	4240      	negs	r0, r0
 80005f6:	4680      	mov	r8, r0
 80005f8:	44a8      	add	r8, r5
 80005fa:	4640      	mov	r0, r8
 80005fc:	2800      	cmp	r0, #0
 80005fe:	d038      	beq.n	8000672 <__aeabi_fsub+0x1b2>
 8000600:	1b51      	subs	r1, r2, r5
 8000602:	2d00      	cmp	r5, #0
 8000604:	d100      	bne.n	8000608 <__aeabi_fsub+0x148>
 8000606:	e0ae      	b.n	8000766 <__aeabi_fsub+0x2a6>
 8000608:	2aff      	cmp	r2, #255	; 0xff
 800060a:	d100      	bne.n	800060e <__aeabi_fsub+0x14e>
 800060c:	e0df      	b.n	80007ce <__aeabi_fsub+0x30e>
 800060e:	2380      	movs	r3, #128	; 0x80
 8000610:	4660      	mov	r0, ip
 8000612:	04db      	lsls	r3, r3, #19
 8000614:	4318      	orrs	r0, r3
 8000616:	4684      	mov	ip, r0
 8000618:	291b      	cmp	r1, #27
 800061a:	dc00      	bgt.n	800061e <__aeabi_fsub+0x15e>
 800061c:	e0d9      	b.n	80007d2 <__aeabi_fsub+0x312>
 800061e:	2001      	movs	r0, #1
 8000620:	0015      	movs	r5, r2
 8000622:	1980      	adds	r0, r0, r6
 8000624:	e7b1      	b.n	800058a <__aeabi_fsub+0xca>
 8000626:	20fe      	movs	r0, #254	; 0xfe
 8000628:	1c6a      	adds	r2, r5, #1
 800062a:	4210      	tst	r0, r2
 800062c:	d171      	bne.n	8000712 <__aeabi_fsub+0x252>
 800062e:	2d00      	cmp	r5, #0
 8000630:	d000      	beq.n	8000634 <__aeabi_fsub+0x174>
 8000632:	e0a6      	b.n	8000782 <__aeabi_fsub+0x2c2>
 8000634:	4663      	mov	r3, ip
 8000636:	2b00      	cmp	r3, #0
 8000638:	d100      	bne.n	800063c <__aeabi_fsub+0x17c>
 800063a:	e0d9      	b.n	80007f0 <__aeabi_fsub+0x330>
 800063c:	2200      	movs	r2, #0
 800063e:	2e00      	cmp	r6, #0
 8000640:	d100      	bne.n	8000644 <__aeabi_fsub+0x184>
 8000642:	e788      	b.n	8000556 <__aeabi_fsub+0x96>
 8000644:	1b98      	subs	r0, r3, r6
 8000646:	0143      	lsls	r3, r0, #5
 8000648:	d400      	bmi.n	800064c <__aeabi_fsub+0x18c>
 800064a:	e0e1      	b.n	8000810 <__aeabi_fsub+0x350>
 800064c:	4663      	mov	r3, ip
 800064e:	000c      	movs	r4, r1
 8000650:	1af0      	subs	r0, r6, r3
 8000652:	e76f      	b.n	8000534 <__aeabi_fsub+0x74>
 8000654:	2e00      	cmp	r6, #0
 8000656:	d100      	bne.n	800065a <__aeabi_fsub+0x19a>
 8000658:	e0b7      	b.n	80007ca <__aeabi_fsub+0x30a>
 800065a:	0002      	movs	r2, r0
 800065c:	3a01      	subs	r2, #1
 800065e:	2801      	cmp	r0, #1
 8000660:	d100      	bne.n	8000664 <__aeabi_fsub+0x1a4>
 8000662:	e09c      	b.n	800079e <__aeabi_fsub+0x2de>
 8000664:	28ff      	cmp	r0, #255	; 0xff
 8000666:	d026      	beq.n	80006b6 <__aeabi_fsub+0x1f6>
 8000668:	4690      	mov	r8, r2
 800066a:	e788      	b.n	800057e <__aeabi_fsub+0xbe>
 800066c:	22ff      	movs	r2, #255	; 0xff
 800066e:	2700      	movs	r7, #0
 8000670:	e771      	b.n	8000556 <__aeabi_fsub+0x96>
 8000672:	20fe      	movs	r0, #254	; 0xfe
 8000674:	1c6a      	adds	r2, r5, #1
 8000676:	4210      	tst	r0, r2
 8000678:	d064      	beq.n	8000744 <__aeabi_fsub+0x284>
 800067a:	2aff      	cmp	r2, #255	; 0xff
 800067c:	d0f6      	beq.n	800066c <__aeabi_fsub+0x1ac>
 800067e:	0015      	movs	r5, r2
 8000680:	4466      	add	r6, ip
 8000682:	0870      	lsrs	r0, r6, #1
 8000684:	0743      	lsls	r3, r0, #29
 8000686:	d000      	beq.n	800068a <__aeabi_fsub+0x1ca>
 8000688:	e756      	b.n	8000538 <__aeabi_fsub+0x78>
 800068a:	08c3      	lsrs	r3, r0, #3
 800068c:	2dff      	cmp	r5, #255	; 0xff
 800068e:	d012      	beq.n	80006b6 <__aeabi_fsub+0x1f6>
 8000690:	025b      	lsls	r3, r3, #9
 8000692:	0a5f      	lsrs	r7, r3, #9
 8000694:	b2ea      	uxtb	r2, r5
 8000696:	e75e      	b.n	8000556 <__aeabi_fsub+0x96>
 8000698:	4662      	mov	r2, ip
 800069a:	2a00      	cmp	r2, #0
 800069c:	d100      	bne.n	80006a0 <__aeabi_fsub+0x1e0>
 800069e:	e096      	b.n	80007ce <__aeabi_fsub+0x30e>
 80006a0:	2e00      	cmp	r6, #0
 80006a2:	d008      	beq.n	80006b6 <__aeabi_fsub+0x1f6>
 80006a4:	2280      	movs	r2, #128	; 0x80
 80006a6:	03d2      	lsls	r2, r2, #15
 80006a8:	4213      	tst	r3, r2
 80006aa:	d004      	beq.n	80006b6 <__aeabi_fsub+0x1f6>
 80006ac:	4648      	mov	r0, r9
 80006ae:	4210      	tst	r0, r2
 80006b0:	d101      	bne.n	80006b6 <__aeabi_fsub+0x1f6>
 80006b2:	000c      	movs	r4, r1
 80006b4:	464b      	mov	r3, r9
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d0d8      	beq.n	800066c <__aeabi_fsub+0x1ac>
 80006ba:	2780      	movs	r7, #128	; 0x80
 80006bc:	03ff      	lsls	r7, r7, #15
 80006be:	431f      	orrs	r7, r3
 80006c0:	027f      	lsls	r7, r7, #9
 80006c2:	22ff      	movs	r2, #255	; 0xff
 80006c4:	0a7f      	lsrs	r7, r7, #9
 80006c6:	e746      	b.n	8000556 <__aeabi_fsub+0x96>
 80006c8:	2320      	movs	r3, #32
 80006ca:	003a      	movs	r2, r7
 80006cc:	1b45      	subs	r5, r0, r5
 80006ce:	0038      	movs	r0, r7
 80006d0:	3501      	adds	r5, #1
 80006d2:	40ea      	lsrs	r2, r5
 80006d4:	1b5d      	subs	r5, r3, r5
 80006d6:	40a8      	lsls	r0, r5
 80006d8:	1e43      	subs	r3, r0, #1
 80006da:	4198      	sbcs	r0, r3
 80006dc:	2500      	movs	r5, #0
 80006de:	4310      	orrs	r0, r2
 80006e0:	e728      	b.n	8000534 <__aeabi_fsub+0x74>
 80006e2:	2320      	movs	r3, #32
 80006e4:	1a1b      	subs	r3, r3, r0
 80006e6:	0032      	movs	r2, r6
 80006e8:	409e      	lsls	r6, r3
 80006ea:	40c2      	lsrs	r2, r0
 80006ec:	0030      	movs	r0, r6
 80006ee:	1e43      	subs	r3, r0, #1
 80006f0:	4198      	sbcs	r0, r3
 80006f2:	4310      	orrs	r0, r2
 80006f4:	e70c      	b.n	8000510 <__aeabi_fsub+0x50>
 80006f6:	2aff      	cmp	r2, #255	; 0xff
 80006f8:	d0db      	beq.n	80006b2 <__aeabi_fsub+0x1f2>
 80006fa:	2380      	movs	r3, #128	; 0x80
 80006fc:	4660      	mov	r0, ip
 80006fe:	04db      	lsls	r3, r3, #19
 8000700:	4318      	orrs	r0, r3
 8000702:	4684      	mov	ip, r0
 8000704:	2f1b      	cmp	r7, #27
 8000706:	dd56      	ble.n	80007b6 <__aeabi_fsub+0x2f6>
 8000708:	2001      	movs	r0, #1
 800070a:	000c      	movs	r4, r1
 800070c:	0015      	movs	r5, r2
 800070e:	1a30      	subs	r0, r6, r0
 8000710:	e700      	b.n	8000514 <__aeabi_fsub+0x54>
 8000712:	4663      	mov	r3, ip
 8000714:	1b9f      	subs	r7, r3, r6
 8000716:	017b      	lsls	r3, r7, #5
 8000718:	d43d      	bmi.n	8000796 <__aeabi_fsub+0x2d6>
 800071a:	2f00      	cmp	r7, #0
 800071c:	d000      	beq.n	8000720 <__aeabi_fsub+0x260>
 800071e:	e6fe      	b.n	800051e <__aeabi_fsub+0x5e>
 8000720:	2400      	movs	r4, #0
 8000722:	2200      	movs	r2, #0
 8000724:	2700      	movs	r7, #0
 8000726:	e716      	b.n	8000556 <__aeabi_fsub+0x96>
 8000728:	0005      	movs	r5, r0
 800072a:	e7af      	b.n	800068c <__aeabi_fsub+0x1cc>
 800072c:	0032      	movs	r2, r6
 800072e:	4643      	mov	r3, r8
 8000730:	4641      	mov	r1, r8
 8000732:	40da      	lsrs	r2, r3
 8000734:	2320      	movs	r3, #32
 8000736:	1a5b      	subs	r3, r3, r1
 8000738:	409e      	lsls	r6, r3
 800073a:	0030      	movs	r0, r6
 800073c:	1e43      	subs	r3, r0, #1
 800073e:	4198      	sbcs	r0, r3
 8000740:	4310      	orrs	r0, r2
 8000742:	e721      	b.n	8000588 <__aeabi_fsub+0xc8>
 8000744:	2d00      	cmp	r5, #0
 8000746:	d1a7      	bne.n	8000698 <__aeabi_fsub+0x1d8>
 8000748:	4663      	mov	r3, ip
 800074a:	2b00      	cmp	r3, #0
 800074c:	d059      	beq.n	8000802 <__aeabi_fsub+0x342>
 800074e:	2200      	movs	r2, #0
 8000750:	2e00      	cmp	r6, #0
 8000752:	d100      	bne.n	8000756 <__aeabi_fsub+0x296>
 8000754:	e6ff      	b.n	8000556 <__aeabi_fsub+0x96>
 8000756:	0030      	movs	r0, r6
 8000758:	4460      	add	r0, ip
 800075a:	0143      	lsls	r3, r0, #5
 800075c:	d592      	bpl.n	8000684 <__aeabi_fsub+0x1c4>
 800075e:	4b2a      	ldr	r3, [pc, #168]	; (8000808 <__aeabi_fsub+0x348>)
 8000760:	3501      	adds	r5, #1
 8000762:	4018      	ands	r0, r3
 8000764:	e78e      	b.n	8000684 <__aeabi_fsub+0x1c4>
 8000766:	4663      	mov	r3, ip
 8000768:	2b00      	cmp	r3, #0
 800076a:	d047      	beq.n	80007fc <__aeabi_fsub+0x33c>
 800076c:	1e4b      	subs	r3, r1, #1
 800076e:	2901      	cmp	r1, #1
 8000770:	d015      	beq.n	800079e <__aeabi_fsub+0x2de>
 8000772:	29ff      	cmp	r1, #255	; 0xff
 8000774:	d02b      	beq.n	80007ce <__aeabi_fsub+0x30e>
 8000776:	0019      	movs	r1, r3
 8000778:	e74e      	b.n	8000618 <__aeabi_fsub+0x158>
 800077a:	000c      	movs	r4, r1
 800077c:	464b      	mov	r3, r9
 800077e:	003d      	movs	r5, r7
 8000780:	e784      	b.n	800068c <__aeabi_fsub+0x1cc>
 8000782:	4662      	mov	r2, ip
 8000784:	2a00      	cmp	r2, #0
 8000786:	d18b      	bne.n	80006a0 <__aeabi_fsub+0x1e0>
 8000788:	2e00      	cmp	r6, #0
 800078a:	d192      	bne.n	80006b2 <__aeabi_fsub+0x1f2>
 800078c:	2780      	movs	r7, #128	; 0x80
 800078e:	2400      	movs	r4, #0
 8000790:	22ff      	movs	r2, #255	; 0xff
 8000792:	03ff      	lsls	r7, r7, #15
 8000794:	e6df      	b.n	8000556 <__aeabi_fsub+0x96>
 8000796:	4663      	mov	r3, ip
 8000798:	000c      	movs	r4, r1
 800079a:	1af7      	subs	r7, r6, r3
 800079c:	e6bf      	b.n	800051e <__aeabi_fsub+0x5e>
 800079e:	0030      	movs	r0, r6
 80007a0:	4460      	add	r0, ip
 80007a2:	2501      	movs	r5, #1
 80007a4:	0143      	lsls	r3, r0, #5
 80007a6:	d400      	bmi.n	80007aa <__aeabi_fsub+0x2ea>
 80007a8:	e76c      	b.n	8000684 <__aeabi_fsub+0x1c4>
 80007aa:	2502      	movs	r5, #2
 80007ac:	e6f2      	b.n	8000594 <__aeabi_fsub+0xd4>
 80007ae:	4663      	mov	r3, ip
 80007b0:	2501      	movs	r5, #1
 80007b2:	1b98      	subs	r0, r3, r6
 80007b4:	e6ae      	b.n	8000514 <__aeabi_fsub+0x54>
 80007b6:	2320      	movs	r3, #32
 80007b8:	4664      	mov	r4, ip
 80007ba:	4660      	mov	r0, ip
 80007bc:	40fc      	lsrs	r4, r7
 80007be:	1bdf      	subs	r7, r3, r7
 80007c0:	40b8      	lsls	r0, r7
 80007c2:	1e43      	subs	r3, r0, #1
 80007c4:	4198      	sbcs	r0, r3
 80007c6:	4320      	orrs	r0, r4
 80007c8:	e79f      	b.n	800070a <__aeabi_fsub+0x24a>
 80007ca:	0005      	movs	r5, r0
 80007cc:	e75e      	b.n	800068c <__aeabi_fsub+0x1cc>
 80007ce:	464b      	mov	r3, r9
 80007d0:	e771      	b.n	80006b6 <__aeabi_fsub+0x1f6>
 80007d2:	2320      	movs	r3, #32
 80007d4:	4665      	mov	r5, ip
 80007d6:	4660      	mov	r0, ip
 80007d8:	40cd      	lsrs	r5, r1
 80007da:	1a59      	subs	r1, r3, r1
 80007dc:	4088      	lsls	r0, r1
 80007de:	1e43      	subs	r3, r0, #1
 80007e0:	4198      	sbcs	r0, r3
 80007e2:	4328      	orrs	r0, r5
 80007e4:	e71c      	b.n	8000620 <__aeabi_fsub+0x160>
 80007e6:	4663      	mov	r3, ip
 80007e8:	000c      	movs	r4, r1
 80007ea:	2501      	movs	r5, #1
 80007ec:	1af0      	subs	r0, r6, r3
 80007ee:	e691      	b.n	8000514 <__aeabi_fsub+0x54>
 80007f0:	2e00      	cmp	r6, #0
 80007f2:	d095      	beq.n	8000720 <__aeabi_fsub+0x260>
 80007f4:	000c      	movs	r4, r1
 80007f6:	464f      	mov	r7, r9
 80007f8:	2200      	movs	r2, #0
 80007fa:	e6ac      	b.n	8000556 <__aeabi_fsub+0x96>
 80007fc:	464b      	mov	r3, r9
 80007fe:	000d      	movs	r5, r1
 8000800:	e744      	b.n	800068c <__aeabi_fsub+0x1cc>
 8000802:	464f      	mov	r7, r9
 8000804:	2200      	movs	r2, #0
 8000806:	e6a6      	b.n	8000556 <__aeabi_fsub+0x96>
 8000808:	fbffffff 	.word	0xfbffffff
 800080c:	7dffffff 	.word	0x7dffffff
 8000810:	2800      	cmp	r0, #0
 8000812:	d000      	beq.n	8000816 <__aeabi_fsub+0x356>
 8000814:	e736      	b.n	8000684 <__aeabi_fsub+0x1c4>
 8000816:	2400      	movs	r4, #0
 8000818:	2700      	movs	r7, #0
 800081a:	e69c      	b.n	8000556 <__aeabi_fsub+0x96>

0800081c <__aeabi_f2iz>:
 800081c:	0241      	lsls	r1, r0, #9
 800081e:	0042      	lsls	r2, r0, #1
 8000820:	0fc3      	lsrs	r3, r0, #31
 8000822:	0a49      	lsrs	r1, r1, #9
 8000824:	2000      	movs	r0, #0
 8000826:	0e12      	lsrs	r2, r2, #24
 8000828:	2a7e      	cmp	r2, #126	; 0x7e
 800082a:	dd03      	ble.n	8000834 <__aeabi_f2iz+0x18>
 800082c:	2a9d      	cmp	r2, #157	; 0x9d
 800082e:	dd02      	ble.n	8000836 <__aeabi_f2iz+0x1a>
 8000830:	4a09      	ldr	r2, [pc, #36]	; (8000858 <__aeabi_f2iz+0x3c>)
 8000832:	1898      	adds	r0, r3, r2
 8000834:	4770      	bx	lr
 8000836:	2080      	movs	r0, #128	; 0x80
 8000838:	0400      	lsls	r0, r0, #16
 800083a:	4301      	orrs	r1, r0
 800083c:	2a95      	cmp	r2, #149	; 0x95
 800083e:	dc07      	bgt.n	8000850 <__aeabi_f2iz+0x34>
 8000840:	2096      	movs	r0, #150	; 0x96
 8000842:	1a82      	subs	r2, r0, r2
 8000844:	40d1      	lsrs	r1, r2
 8000846:	4248      	negs	r0, r1
 8000848:	2b00      	cmp	r3, #0
 800084a:	d1f3      	bne.n	8000834 <__aeabi_f2iz+0x18>
 800084c:	0008      	movs	r0, r1
 800084e:	e7f1      	b.n	8000834 <__aeabi_f2iz+0x18>
 8000850:	3a96      	subs	r2, #150	; 0x96
 8000852:	4091      	lsls	r1, r2
 8000854:	e7f7      	b.n	8000846 <__aeabi_f2iz+0x2a>
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	7fffffff 	.word	0x7fffffff

0800085c <__aeabi_dmul>:
 800085c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800085e:	4657      	mov	r7, sl
 8000860:	464e      	mov	r6, r9
 8000862:	4645      	mov	r5, r8
 8000864:	46de      	mov	lr, fp
 8000866:	b5e0      	push	{r5, r6, r7, lr}
 8000868:	4698      	mov	r8, r3
 800086a:	030c      	lsls	r4, r1, #12
 800086c:	004b      	lsls	r3, r1, #1
 800086e:	0006      	movs	r6, r0
 8000870:	4692      	mov	sl, r2
 8000872:	b087      	sub	sp, #28
 8000874:	0b24      	lsrs	r4, r4, #12
 8000876:	0d5b      	lsrs	r3, r3, #21
 8000878:	0fcf      	lsrs	r7, r1, #31
 800087a:	2b00      	cmp	r3, #0
 800087c:	d100      	bne.n	8000880 <__aeabi_dmul+0x24>
 800087e:	e15c      	b.n	8000b3a <__aeabi_dmul+0x2de>
 8000880:	4ad9      	ldr	r2, [pc, #868]	; (8000be8 <__aeabi_dmul+0x38c>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d100      	bne.n	8000888 <__aeabi_dmul+0x2c>
 8000886:	e175      	b.n	8000b74 <__aeabi_dmul+0x318>
 8000888:	0f42      	lsrs	r2, r0, #29
 800088a:	00e4      	lsls	r4, r4, #3
 800088c:	4314      	orrs	r4, r2
 800088e:	2280      	movs	r2, #128	; 0x80
 8000890:	0412      	lsls	r2, r2, #16
 8000892:	4314      	orrs	r4, r2
 8000894:	4ad5      	ldr	r2, [pc, #852]	; (8000bec <__aeabi_dmul+0x390>)
 8000896:	00c5      	lsls	r5, r0, #3
 8000898:	4694      	mov	ip, r2
 800089a:	4463      	add	r3, ip
 800089c:	9300      	str	r3, [sp, #0]
 800089e:	2300      	movs	r3, #0
 80008a0:	4699      	mov	r9, r3
 80008a2:	469b      	mov	fp, r3
 80008a4:	4643      	mov	r3, r8
 80008a6:	4642      	mov	r2, r8
 80008a8:	031e      	lsls	r6, r3, #12
 80008aa:	0fd2      	lsrs	r2, r2, #31
 80008ac:	005b      	lsls	r3, r3, #1
 80008ae:	4650      	mov	r0, sl
 80008b0:	4690      	mov	r8, r2
 80008b2:	0b36      	lsrs	r6, r6, #12
 80008b4:	0d5b      	lsrs	r3, r3, #21
 80008b6:	d100      	bne.n	80008ba <__aeabi_dmul+0x5e>
 80008b8:	e120      	b.n	8000afc <__aeabi_dmul+0x2a0>
 80008ba:	4acb      	ldr	r2, [pc, #812]	; (8000be8 <__aeabi_dmul+0x38c>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d100      	bne.n	80008c2 <__aeabi_dmul+0x66>
 80008c0:	e162      	b.n	8000b88 <__aeabi_dmul+0x32c>
 80008c2:	49ca      	ldr	r1, [pc, #808]	; (8000bec <__aeabi_dmul+0x390>)
 80008c4:	0f42      	lsrs	r2, r0, #29
 80008c6:	468c      	mov	ip, r1
 80008c8:	9900      	ldr	r1, [sp, #0]
 80008ca:	4463      	add	r3, ip
 80008cc:	00f6      	lsls	r6, r6, #3
 80008ce:	468c      	mov	ip, r1
 80008d0:	4316      	orrs	r6, r2
 80008d2:	2280      	movs	r2, #128	; 0x80
 80008d4:	449c      	add	ip, r3
 80008d6:	0412      	lsls	r2, r2, #16
 80008d8:	4663      	mov	r3, ip
 80008da:	4316      	orrs	r6, r2
 80008dc:	00c2      	lsls	r2, r0, #3
 80008de:	2000      	movs	r0, #0
 80008e0:	9300      	str	r3, [sp, #0]
 80008e2:	9900      	ldr	r1, [sp, #0]
 80008e4:	4643      	mov	r3, r8
 80008e6:	3101      	adds	r1, #1
 80008e8:	468c      	mov	ip, r1
 80008ea:	4649      	mov	r1, r9
 80008ec:	407b      	eors	r3, r7
 80008ee:	9301      	str	r3, [sp, #4]
 80008f0:	290f      	cmp	r1, #15
 80008f2:	d826      	bhi.n	8000942 <__aeabi_dmul+0xe6>
 80008f4:	4bbe      	ldr	r3, [pc, #760]	; (8000bf0 <__aeabi_dmul+0x394>)
 80008f6:	0089      	lsls	r1, r1, #2
 80008f8:	5859      	ldr	r1, [r3, r1]
 80008fa:	468f      	mov	pc, r1
 80008fc:	4643      	mov	r3, r8
 80008fe:	9301      	str	r3, [sp, #4]
 8000900:	0034      	movs	r4, r6
 8000902:	0015      	movs	r5, r2
 8000904:	4683      	mov	fp, r0
 8000906:	465b      	mov	r3, fp
 8000908:	2b02      	cmp	r3, #2
 800090a:	d016      	beq.n	800093a <__aeabi_dmul+0xde>
 800090c:	2b03      	cmp	r3, #3
 800090e:	d100      	bne.n	8000912 <__aeabi_dmul+0xb6>
 8000910:	e203      	b.n	8000d1a <__aeabi_dmul+0x4be>
 8000912:	2b01      	cmp	r3, #1
 8000914:	d000      	beq.n	8000918 <__aeabi_dmul+0xbc>
 8000916:	e0cd      	b.n	8000ab4 <__aeabi_dmul+0x258>
 8000918:	2200      	movs	r2, #0
 800091a:	2400      	movs	r4, #0
 800091c:	2500      	movs	r5, #0
 800091e:	9b01      	ldr	r3, [sp, #4]
 8000920:	0512      	lsls	r2, r2, #20
 8000922:	4322      	orrs	r2, r4
 8000924:	07db      	lsls	r3, r3, #31
 8000926:	431a      	orrs	r2, r3
 8000928:	0028      	movs	r0, r5
 800092a:	0011      	movs	r1, r2
 800092c:	b007      	add	sp, #28
 800092e:	bcf0      	pop	{r4, r5, r6, r7}
 8000930:	46bb      	mov	fp, r7
 8000932:	46b2      	mov	sl, r6
 8000934:	46a9      	mov	r9, r5
 8000936:	46a0      	mov	r8, r4
 8000938:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800093a:	2400      	movs	r4, #0
 800093c:	2500      	movs	r5, #0
 800093e:	4aaa      	ldr	r2, [pc, #680]	; (8000be8 <__aeabi_dmul+0x38c>)
 8000940:	e7ed      	b.n	800091e <__aeabi_dmul+0xc2>
 8000942:	0c28      	lsrs	r0, r5, #16
 8000944:	042d      	lsls	r5, r5, #16
 8000946:	0c2d      	lsrs	r5, r5, #16
 8000948:	002b      	movs	r3, r5
 800094a:	0c11      	lsrs	r1, r2, #16
 800094c:	0412      	lsls	r2, r2, #16
 800094e:	0c12      	lsrs	r2, r2, #16
 8000950:	4353      	muls	r3, r2
 8000952:	4698      	mov	r8, r3
 8000954:	0013      	movs	r3, r2
 8000956:	002f      	movs	r7, r5
 8000958:	4343      	muls	r3, r0
 800095a:	4699      	mov	r9, r3
 800095c:	434f      	muls	r7, r1
 800095e:	444f      	add	r7, r9
 8000960:	46bb      	mov	fp, r7
 8000962:	4647      	mov	r7, r8
 8000964:	000b      	movs	r3, r1
 8000966:	0c3f      	lsrs	r7, r7, #16
 8000968:	46ba      	mov	sl, r7
 800096a:	4343      	muls	r3, r0
 800096c:	44da      	add	sl, fp
 800096e:	9302      	str	r3, [sp, #8]
 8000970:	45d1      	cmp	r9, sl
 8000972:	d904      	bls.n	800097e <__aeabi_dmul+0x122>
 8000974:	2780      	movs	r7, #128	; 0x80
 8000976:	027f      	lsls	r7, r7, #9
 8000978:	46b9      	mov	r9, r7
 800097a:	444b      	add	r3, r9
 800097c:	9302      	str	r3, [sp, #8]
 800097e:	4653      	mov	r3, sl
 8000980:	0c1b      	lsrs	r3, r3, #16
 8000982:	469b      	mov	fp, r3
 8000984:	4653      	mov	r3, sl
 8000986:	041f      	lsls	r7, r3, #16
 8000988:	4643      	mov	r3, r8
 800098a:	041b      	lsls	r3, r3, #16
 800098c:	0c1b      	lsrs	r3, r3, #16
 800098e:	4698      	mov	r8, r3
 8000990:	003b      	movs	r3, r7
 8000992:	4443      	add	r3, r8
 8000994:	9304      	str	r3, [sp, #16]
 8000996:	0c33      	lsrs	r3, r6, #16
 8000998:	0436      	lsls	r6, r6, #16
 800099a:	0c36      	lsrs	r6, r6, #16
 800099c:	4698      	mov	r8, r3
 800099e:	0033      	movs	r3, r6
 80009a0:	4343      	muls	r3, r0
 80009a2:	4699      	mov	r9, r3
 80009a4:	4643      	mov	r3, r8
 80009a6:	4343      	muls	r3, r0
 80009a8:	002f      	movs	r7, r5
 80009aa:	469a      	mov	sl, r3
 80009ac:	4643      	mov	r3, r8
 80009ae:	4377      	muls	r7, r6
 80009b0:	435d      	muls	r5, r3
 80009b2:	0c38      	lsrs	r0, r7, #16
 80009b4:	444d      	add	r5, r9
 80009b6:	1945      	adds	r5, r0, r5
 80009b8:	45a9      	cmp	r9, r5
 80009ba:	d903      	bls.n	80009c4 <__aeabi_dmul+0x168>
 80009bc:	2380      	movs	r3, #128	; 0x80
 80009be:	025b      	lsls	r3, r3, #9
 80009c0:	4699      	mov	r9, r3
 80009c2:	44ca      	add	sl, r9
 80009c4:	043f      	lsls	r7, r7, #16
 80009c6:	0c28      	lsrs	r0, r5, #16
 80009c8:	0c3f      	lsrs	r7, r7, #16
 80009ca:	042d      	lsls	r5, r5, #16
 80009cc:	19ed      	adds	r5, r5, r7
 80009ce:	0c27      	lsrs	r7, r4, #16
 80009d0:	0424      	lsls	r4, r4, #16
 80009d2:	0c24      	lsrs	r4, r4, #16
 80009d4:	0003      	movs	r3, r0
 80009d6:	0020      	movs	r0, r4
 80009d8:	4350      	muls	r0, r2
 80009da:	437a      	muls	r2, r7
 80009dc:	4691      	mov	r9, r2
 80009de:	003a      	movs	r2, r7
 80009e0:	4453      	add	r3, sl
 80009e2:	9305      	str	r3, [sp, #20]
 80009e4:	0c03      	lsrs	r3, r0, #16
 80009e6:	469a      	mov	sl, r3
 80009e8:	434a      	muls	r2, r1
 80009ea:	4361      	muls	r1, r4
 80009ec:	4449      	add	r1, r9
 80009ee:	4451      	add	r1, sl
 80009f0:	44ab      	add	fp, r5
 80009f2:	4589      	cmp	r9, r1
 80009f4:	d903      	bls.n	80009fe <__aeabi_dmul+0x1a2>
 80009f6:	2380      	movs	r3, #128	; 0x80
 80009f8:	025b      	lsls	r3, r3, #9
 80009fa:	4699      	mov	r9, r3
 80009fc:	444a      	add	r2, r9
 80009fe:	0400      	lsls	r0, r0, #16
 8000a00:	0c0b      	lsrs	r3, r1, #16
 8000a02:	0c00      	lsrs	r0, r0, #16
 8000a04:	0409      	lsls	r1, r1, #16
 8000a06:	1809      	adds	r1, r1, r0
 8000a08:	0020      	movs	r0, r4
 8000a0a:	4699      	mov	r9, r3
 8000a0c:	4643      	mov	r3, r8
 8000a0e:	4370      	muls	r0, r6
 8000a10:	435c      	muls	r4, r3
 8000a12:	437e      	muls	r6, r7
 8000a14:	435f      	muls	r7, r3
 8000a16:	0c03      	lsrs	r3, r0, #16
 8000a18:	4698      	mov	r8, r3
 8000a1a:	19a4      	adds	r4, r4, r6
 8000a1c:	4444      	add	r4, r8
 8000a1e:	444a      	add	r2, r9
 8000a20:	9703      	str	r7, [sp, #12]
 8000a22:	42a6      	cmp	r6, r4
 8000a24:	d904      	bls.n	8000a30 <__aeabi_dmul+0x1d4>
 8000a26:	2380      	movs	r3, #128	; 0x80
 8000a28:	025b      	lsls	r3, r3, #9
 8000a2a:	4698      	mov	r8, r3
 8000a2c:	4447      	add	r7, r8
 8000a2e:	9703      	str	r7, [sp, #12]
 8000a30:	0423      	lsls	r3, r4, #16
 8000a32:	9e02      	ldr	r6, [sp, #8]
 8000a34:	469a      	mov	sl, r3
 8000a36:	9b05      	ldr	r3, [sp, #20]
 8000a38:	445e      	add	r6, fp
 8000a3a:	4698      	mov	r8, r3
 8000a3c:	42ae      	cmp	r6, r5
 8000a3e:	41ad      	sbcs	r5, r5
 8000a40:	1876      	adds	r6, r6, r1
 8000a42:	428e      	cmp	r6, r1
 8000a44:	4189      	sbcs	r1, r1
 8000a46:	0400      	lsls	r0, r0, #16
 8000a48:	0c00      	lsrs	r0, r0, #16
 8000a4a:	4450      	add	r0, sl
 8000a4c:	4440      	add	r0, r8
 8000a4e:	426d      	negs	r5, r5
 8000a50:	1947      	adds	r7, r0, r5
 8000a52:	46b8      	mov	r8, r7
 8000a54:	4693      	mov	fp, r2
 8000a56:	4249      	negs	r1, r1
 8000a58:	4689      	mov	r9, r1
 8000a5a:	44c3      	add	fp, r8
 8000a5c:	44d9      	add	r9, fp
 8000a5e:	4298      	cmp	r0, r3
 8000a60:	4180      	sbcs	r0, r0
 8000a62:	45a8      	cmp	r8, r5
 8000a64:	41ad      	sbcs	r5, r5
 8000a66:	4593      	cmp	fp, r2
 8000a68:	4192      	sbcs	r2, r2
 8000a6a:	4589      	cmp	r9, r1
 8000a6c:	4189      	sbcs	r1, r1
 8000a6e:	426d      	negs	r5, r5
 8000a70:	4240      	negs	r0, r0
 8000a72:	4328      	orrs	r0, r5
 8000a74:	0c24      	lsrs	r4, r4, #16
 8000a76:	4252      	negs	r2, r2
 8000a78:	4249      	negs	r1, r1
 8000a7a:	430a      	orrs	r2, r1
 8000a7c:	9b03      	ldr	r3, [sp, #12]
 8000a7e:	1900      	adds	r0, r0, r4
 8000a80:	1880      	adds	r0, r0, r2
 8000a82:	18c7      	adds	r7, r0, r3
 8000a84:	464b      	mov	r3, r9
 8000a86:	0ddc      	lsrs	r4, r3, #23
 8000a88:	9b04      	ldr	r3, [sp, #16]
 8000a8a:	0275      	lsls	r5, r6, #9
 8000a8c:	431d      	orrs	r5, r3
 8000a8e:	1e6a      	subs	r2, r5, #1
 8000a90:	4195      	sbcs	r5, r2
 8000a92:	464b      	mov	r3, r9
 8000a94:	0df6      	lsrs	r6, r6, #23
 8000a96:	027f      	lsls	r7, r7, #9
 8000a98:	4335      	orrs	r5, r6
 8000a9a:	025a      	lsls	r2, r3, #9
 8000a9c:	433c      	orrs	r4, r7
 8000a9e:	4315      	orrs	r5, r2
 8000aa0:	01fb      	lsls	r3, r7, #7
 8000aa2:	d400      	bmi.n	8000aa6 <__aeabi_dmul+0x24a>
 8000aa4:	e11c      	b.n	8000ce0 <__aeabi_dmul+0x484>
 8000aa6:	2101      	movs	r1, #1
 8000aa8:	086a      	lsrs	r2, r5, #1
 8000aaa:	400d      	ands	r5, r1
 8000aac:	4315      	orrs	r5, r2
 8000aae:	07e2      	lsls	r2, r4, #31
 8000ab0:	4315      	orrs	r5, r2
 8000ab2:	0864      	lsrs	r4, r4, #1
 8000ab4:	494f      	ldr	r1, [pc, #316]	; (8000bf4 <__aeabi_dmul+0x398>)
 8000ab6:	4461      	add	r1, ip
 8000ab8:	2900      	cmp	r1, #0
 8000aba:	dc00      	bgt.n	8000abe <__aeabi_dmul+0x262>
 8000abc:	e0b0      	b.n	8000c20 <__aeabi_dmul+0x3c4>
 8000abe:	076b      	lsls	r3, r5, #29
 8000ac0:	d009      	beq.n	8000ad6 <__aeabi_dmul+0x27a>
 8000ac2:	220f      	movs	r2, #15
 8000ac4:	402a      	ands	r2, r5
 8000ac6:	2a04      	cmp	r2, #4
 8000ac8:	d005      	beq.n	8000ad6 <__aeabi_dmul+0x27a>
 8000aca:	1d2a      	adds	r2, r5, #4
 8000acc:	42aa      	cmp	r2, r5
 8000ace:	41ad      	sbcs	r5, r5
 8000ad0:	426d      	negs	r5, r5
 8000ad2:	1964      	adds	r4, r4, r5
 8000ad4:	0015      	movs	r5, r2
 8000ad6:	01e3      	lsls	r3, r4, #7
 8000ad8:	d504      	bpl.n	8000ae4 <__aeabi_dmul+0x288>
 8000ada:	2180      	movs	r1, #128	; 0x80
 8000adc:	4a46      	ldr	r2, [pc, #280]	; (8000bf8 <__aeabi_dmul+0x39c>)
 8000ade:	00c9      	lsls	r1, r1, #3
 8000ae0:	4014      	ands	r4, r2
 8000ae2:	4461      	add	r1, ip
 8000ae4:	4a45      	ldr	r2, [pc, #276]	; (8000bfc <__aeabi_dmul+0x3a0>)
 8000ae6:	4291      	cmp	r1, r2
 8000ae8:	dd00      	ble.n	8000aec <__aeabi_dmul+0x290>
 8000aea:	e726      	b.n	800093a <__aeabi_dmul+0xde>
 8000aec:	0762      	lsls	r2, r4, #29
 8000aee:	08ed      	lsrs	r5, r5, #3
 8000af0:	0264      	lsls	r4, r4, #9
 8000af2:	0549      	lsls	r1, r1, #21
 8000af4:	4315      	orrs	r5, r2
 8000af6:	0b24      	lsrs	r4, r4, #12
 8000af8:	0d4a      	lsrs	r2, r1, #21
 8000afa:	e710      	b.n	800091e <__aeabi_dmul+0xc2>
 8000afc:	4652      	mov	r2, sl
 8000afe:	4332      	orrs	r2, r6
 8000b00:	d100      	bne.n	8000b04 <__aeabi_dmul+0x2a8>
 8000b02:	e07f      	b.n	8000c04 <__aeabi_dmul+0x3a8>
 8000b04:	2e00      	cmp	r6, #0
 8000b06:	d100      	bne.n	8000b0a <__aeabi_dmul+0x2ae>
 8000b08:	e0dc      	b.n	8000cc4 <__aeabi_dmul+0x468>
 8000b0a:	0030      	movs	r0, r6
 8000b0c:	f000 fa04 	bl	8000f18 <__clzsi2>
 8000b10:	0002      	movs	r2, r0
 8000b12:	3a0b      	subs	r2, #11
 8000b14:	231d      	movs	r3, #29
 8000b16:	0001      	movs	r1, r0
 8000b18:	1a9b      	subs	r3, r3, r2
 8000b1a:	4652      	mov	r2, sl
 8000b1c:	3908      	subs	r1, #8
 8000b1e:	40da      	lsrs	r2, r3
 8000b20:	408e      	lsls	r6, r1
 8000b22:	4316      	orrs	r6, r2
 8000b24:	4652      	mov	r2, sl
 8000b26:	408a      	lsls	r2, r1
 8000b28:	9b00      	ldr	r3, [sp, #0]
 8000b2a:	4935      	ldr	r1, [pc, #212]	; (8000c00 <__aeabi_dmul+0x3a4>)
 8000b2c:	1a18      	subs	r0, r3, r0
 8000b2e:	0003      	movs	r3, r0
 8000b30:	468c      	mov	ip, r1
 8000b32:	4463      	add	r3, ip
 8000b34:	2000      	movs	r0, #0
 8000b36:	9300      	str	r3, [sp, #0]
 8000b38:	e6d3      	b.n	80008e2 <__aeabi_dmul+0x86>
 8000b3a:	0025      	movs	r5, r4
 8000b3c:	4305      	orrs	r5, r0
 8000b3e:	d04a      	beq.n	8000bd6 <__aeabi_dmul+0x37a>
 8000b40:	2c00      	cmp	r4, #0
 8000b42:	d100      	bne.n	8000b46 <__aeabi_dmul+0x2ea>
 8000b44:	e0b0      	b.n	8000ca8 <__aeabi_dmul+0x44c>
 8000b46:	0020      	movs	r0, r4
 8000b48:	f000 f9e6 	bl	8000f18 <__clzsi2>
 8000b4c:	0001      	movs	r1, r0
 8000b4e:	0002      	movs	r2, r0
 8000b50:	390b      	subs	r1, #11
 8000b52:	231d      	movs	r3, #29
 8000b54:	0010      	movs	r0, r2
 8000b56:	1a5b      	subs	r3, r3, r1
 8000b58:	0031      	movs	r1, r6
 8000b5a:	0035      	movs	r5, r6
 8000b5c:	3808      	subs	r0, #8
 8000b5e:	4084      	lsls	r4, r0
 8000b60:	40d9      	lsrs	r1, r3
 8000b62:	4085      	lsls	r5, r0
 8000b64:	430c      	orrs	r4, r1
 8000b66:	4826      	ldr	r0, [pc, #152]	; (8000c00 <__aeabi_dmul+0x3a4>)
 8000b68:	1a83      	subs	r3, r0, r2
 8000b6a:	9300      	str	r3, [sp, #0]
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	4699      	mov	r9, r3
 8000b70:	469b      	mov	fp, r3
 8000b72:	e697      	b.n	80008a4 <__aeabi_dmul+0x48>
 8000b74:	0005      	movs	r5, r0
 8000b76:	4325      	orrs	r5, r4
 8000b78:	d126      	bne.n	8000bc8 <__aeabi_dmul+0x36c>
 8000b7a:	2208      	movs	r2, #8
 8000b7c:	9300      	str	r3, [sp, #0]
 8000b7e:	2302      	movs	r3, #2
 8000b80:	2400      	movs	r4, #0
 8000b82:	4691      	mov	r9, r2
 8000b84:	469b      	mov	fp, r3
 8000b86:	e68d      	b.n	80008a4 <__aeabi_dmul+0x48>
 8000b88:	4652      	mov	r2, sl
 8000b8a:	9b00      	ldr	r3, [sp, #0]
 8000b8c:	4332      	orrs	r2, r6
 8000b8e:	d110      	bne.n	8000bb2 <__aeabi_dmul+0x356>
 8000b90:	4915      	ldr	r1, [pc, #84]	; (8000be8 <__aeabi_dmul+0x38c>)
 8000b92:	2600      	movs	r6, #0
 8000b94:	468c      	mov	ip, r1
 8000b96:	4463      	add	r3, ip
 8000b98:	4649      	mov	r1, r9
 8000b9a:	9300      	str	r3, [sp, #0]
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	4319      	orrs	r1, r3
 8000ba0:	4689      	mov	r9, r1
 8000ba2:	2002      	movs	r0, #2
 8000ba4:	e69d      	b.n	80008e2 <__aeabi_dmul+0x86>
 8000ba6:	465b      	mov	r3, fp
 8000ba8:	9701      	str	r7, [sp, #4]
 8000baa:	2b02      	cmp	r3, #2
 8000bac:	d000      	beq.n	8000bb0 <__aeabi_dmul+0x354>
 8000bae:	e6ad      	b.n	800090c <__aeabi_dmul+0xb0>
 8000bb0:	e6c3      	b.n	800093a <__aeabi_dmul+0xde>
 8000bb2:	4a0d      	ldr	r2, [pc, #52]	; (8000be8 <__aeabi_dmul+0x38c>)
 8000bb4:	2003      	movs	r0, #3
 8000bb6:	4694      	mov	ip, r2
 8000bb8:	4463      	add	r3, ip
 8000bba:	464a      	mov	r2, r9
 8000bbc:	9300      	str	r3, [sp, #0]
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	431a      	orrs	r2, r3
 8000bc2:	4691      	mov	r9, r2
 8000bc4:	4652      	mov	r2, sl
 8000bc6:	e68c      	b.n	80008e2 <__aeabi_dmul+0x86>
 8000bc8:	220c      	movs	r2, #12
 8000bca:	9300      	str	r3, [sp, #0]
 8000bcc:	2303      	movs	r3, #3
 8000bce:	0005      	movs	r5, r0
 8000bd0:	4691      	mov	r9, r2
 8000bd2:	469b      	mov	fp, r3
 8000bd4:	e666      	b.n	80008a4 <__aeabi_dmul+0x48>
 8000bd6:	2304      	movs	r3, #4
 8000bd8:	4699      	mov	r9, r3
 8000bda:	2300      	movs	r3, #0
 8000bdc:	9300      	str	r3, [sp, #0]
 8000bde:	3301      	adds	r3, #1
 8000be0:	2400      	movs	r4, #0
 8000be2:	469b      	mov	fp, r3
 8000be4:	e65e      	b.n	80008a4 <__aeabi_dmul+0x48>
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	000007ff 	.word	0x000007ff
 8000bec:	fffffc01 	.word	0xfffffc01
 8000bf0:	08004998 	.word	0x08004998
 8000bf4:	000003ff 	.word	0x000003ff
 8000bf8:	feffffff 	.word	0xfeffffff
 8000bfc:	000007fe 	.word	0x000007fe
 8000c00:	fffffc0d 	.word	0xfffffc0d
 8000c04:	4649      	mov	r1, r9
 8000c06:	2301      	movs	r3, #1
 8000c08:	4319      	orrs	r1, r3
 8000c0a:	4689      	mov	r9, r1
 8000c0c:	2600      	movs	r6, #0
 8000c0e:	2001      	movs	r0, #1
 8000c10:	e667      	b.n	80008e2 <__aeabi_dmul+0x86>
 8000c12:	2300      	movs	r3, #0
 8000c14:	2480      	movs	r4, #128	; 0x80
 8000c16:	2500      	movs	r5, #0
 8000c18:	4a43      	ldr	r2, [pc, #268]	; (8000d28 <__aeabi_dmul+0x4cc>)
 8000c1a:	9301      	str	r3, [sp, #4]
 8000c1c:	0324      	lsls	r4, r4, #12
 8000c1e:	e67e      	b.n	800091e <__aeabi_dmul+0xc2>
 8000c20:	2001      	movs	r0, #1
 8000c22:	1a40      	subs	r0, r0, r1
 8000c24:	2838      	cmp	r0, #56	; 0x38
 8000c26:	dd00      	ble.n	8000c2a <__aeabi_dmul+0x3ce>
 8000c28:	e676      	b.n	8000918 <__aeabi_dmul+0xbc>
 8000c2a:	281f      	cmp	r0, #31
 8000c2c:	dd5b      	ble.n	8000ce6 <__aeabi_dmul+0x48a>
 8000c2e:	221f      	movs	r2, #31
 8000c30:	0023      	movs	r3, r4
 8000c32:	4252      	negs	r2, r2
 8000c34:	1a51      	subs	r1, r2, r1
 8000c36:	40cb      	lsrs	r3, r1
 8000c38:	0019      	movs	r1, r3
 8000c3a:	2820      	cmp	r0, #32
 8000c3c:	d003      	beq.n	8000c46 <__aeabi_dmul+0x3ea>
 8000c3e:	4a3b      	ldr	r2, [pc, #236]	; (8000d2c <__aeabi_dmul+0x4d0>)
 8000c40:	4462      	add	r2, ip
 8000c42:	4094      	lsls	r4, r2
 8000c44:	4325      	orrs	r5, r4
 8000c46:	1e6a      	subs	r2, r5, #1
 8000c48:	4195      	sbcs	r5, r2
 8000c4a:	002a      	movs	r2, r5
 8000c4c:	430a      	orrs	r2, r1
 8000c4e:	2107      	movs	r1, #7
 8000c50:	000d      	movs	r5, r1
 8000c52:	2400      	movs	r4, #0
 8000c54:	4015      	ands	r5, r2
 8000c56:	4211      	tst	r1, r2
 8000c58:	d05b      	beq.n	8000d12 <__aeabi_dmul+0x4b6>
 8000c5a:	210f      	movs	r1, #15
 8000c5c:	2400      	movs	r4, #0
 8000c5e:	4011      	ands	r1, r2
 8000c60:	2904      	cmp	r1, #4
 8000c62:	d053      	beq.n	8000d0c <__aeabi_dmul+0x4b0>
 8000c64:	1d11      	adds	r1, r2, #4
 8000c66:	4291      	cmp	r1, r2
 8000c68:	4192      	sbcs	r2, r2
 8000c6a:	4252      	negs	r2, r2
 8000c6c:	18a4      	adds	r4, r4, r2
 8000c6e:	000a      	movs	r2, r1
 8000c70:	0223      	lsls	r3, r4, #8
 8000c72:	d54b      	bpl.n	8000d0c <__aeabi_dmul+0x4b0>
 8000c74:	2201      	movs	r2, #1
 8000c76:	2400      	movs	r4, #0
 8000c78:	2500      	movs	r5, #0
 8000c7a:	e650      	b.n	800091e <__aeabi_dmul+0xc2>
 8000c7c:	2380      	movs	r3, #128	; 0x80
 8000c7e:	031b      	lsls	r3, r3, #12
 8000c80:	421c      	tst	r4, r3
 8000c82:	d009      	beq.n	8000c98 <__aeabi_dmul+0x43c>
 8000c84:	421e      	tst	r6, r3
 8000c86:	d107      	bne.n	8000c98 <__aeabi_dmul+0x43c>
 8000c88:	4333      	orrs	r3, r6
 8000c8a:	031c      	lsls	r4, r3, #12
 8000c8c:	4643      	mov	r3, r8
 8000c8e:	0015      	movs	r5, r2
 8000c90:	0b24      	lsrs	r4, r4, #12
 8000c92:	4a25      	ldr	r2, [pc, #148]	; (8000d28 <__aeabi_dmul+0x4cc>)
 8000c94:	9301      	str	r3, [sp, #4]
 8000c96:	e642      	b.n	800091e <__aeabi_dmul+0xc2>
 8000c98:	2280      	movs	r2, #128	; 0x80
 8000c9a:	0312      	lsls	r2, r2, #12
 8000c9c:	4314      	orrs	r4, r2
 8000c9e:	0324      	lsls	r4, r4, #12
 8000ca0:	4a21      	ldr	r2, [pc, #132]	; (8000d28 <__aeabi_dmul+0x4cc>)
 8000ca2:	0b24      	lsrs	r4, r4, #12
 8000ca4:	9701      	str	r7, [sp, #4]
 8000ca6:	e63a      	b.n	800091e <__aeabi_dmul+0xc2>
 8000ca8:	f000 f936 	bl	8000f18 <__clzsi2>
 8000cac:	0001      	movs	r1, r0
 8000cae:	0002      	movs	r2, r0
 8000cb0:	3115      	adds	r1, #21
 8000cb2:	3220      	adds	r2, #32
 8000cb4:	291c      	cmp	r1, #28
 8000cb6:	dc00      	bgt.n	8000cba <__aeabi_dmul+0x45e>
 8000cb8:	e74b      	b.n	8000b52 <__aeabi_dmul+0x2f6>
 8000cba:	0034      	movs	r4, r6
 8000cbc:	3808      	subs	r0, #8
 8000cbe:	2500      	movs	r5, #0
 8000cc0:	4084      	lsls	r4, r0
 8000cc2:	e750      	b.n	8000b66 <__aeabi_dmul+0x30a>
 8000cc4:	f000 f928 	bl	8000f18 <__clzsi2>
 8000cc8:	0003      	movs	r3, r0
 8000cca:	001a      	movs	r2, r3
 8000ccc:	3215      	adds	r2, #21
 8000cce:	3020      	adds	r0, #32
 8000cd0:	2a1c      	cmp	r2, #28
 8000cd2:	dc00      	bgt.n	8000cd6 <__aeabi_dmul+0x47a>
 8000cd4:	e71e      	b.n	8000b14 <__aeabi_dmul+0x2b8>
 8000cd6:	4656      	mov	r6, sl
 8000cd8:	3b08      	subs	r3, #8
 8000cda:	2200      	movs	r2, #0
 8000cdc:	409e      	lsls	r6, r3
 8000cde:	e723      	b.n	8000b28 <__aeabi_dmul+0x2cc>
 8000ce0:	9b00      	ldr	r3, [sp, #0]
 8000ce2:	469c      	mov	ip, r3
 8000ce4:	e6e6      	b.n	8000ab4 <__aeabi_dmul+0x258>
 8000ce6:	4912      	ldr	r1, [pc, #72]	; (8000d30 <__aeabi_dmul+0x4d4>)
 8000ce8:	0022      	movs	r2, r4
 8000cea:	4461      	add	r1, ip
 8000cec:	002e      	movs	r6, r5
 8000cee:	408d      	lsls	r5, r1
 8000cf0:	408a      	lsls	r2, r1
 8000cf2:	40c6      	lsrs	r6, r0
 8000cf4:	1e69      	subs	r1, r5, #1
 8000cf6:	418d      	sbcs	r5, r1
 8000cf8:	4332      	orrs	r2, r6
 8000cfa:	432a      	orrs	r2, r5
 8000cfc:	40c4      	lsrs	r4, r0
 8000cfe:	0753      	lsls	r3, r2, #29
 8000d00:	d0b6      	beq.n	8000c70 <__aeabi_dmul+0x414>
 8000d02:	210f      	movs	r1, #15
 8000d04:	4011      	ands	r1, r2
 8000d06:	2904      	cmp	r1, #4
 8000d08:	d1ac      	bne.n	8000c64 <__aeabi_dmul+0x408>
 8000d0a:	e7b1      	b.n	8000c70 <__aeabi_dmul+0x414>
 8000d0c:	0765      	lsls	r5, r4, #29
 8000d0e:	0264      	lsls	r4, r4, #9
 8000d10:	0b24      	lsrs	r4, r4, #12
 8000d12:	08d2      	lsrs	r2, r2, #3
 8000d14:	4315      	orrs	r5, r2
 8000d16:	2200      	movs	r2, #0
 8000d18:	e601      	b.n	800091e <__aeabi_dmul+0xc2>
 8000d1a:	2280      	movs	r2, #128	; 0x80
 8000d1c:	0312      	lsls	r2, r2, #12
 8000d1e:	4314      	orrs	r4, r2
 8000d20:	0324      	lsls	r4, r4, #12
 8000d22:	4a01      	ldr	r2, [pc, #4]	; (8000d28 <__aeabi_dmul+0x4cc>)
 8000d24:	0b24      	lsrs	r4, r4, #12
 8000d26:	e5fa      	b.n	800091e <__aeabi_dmul+0xc2>
 8000d28:	000007ff 	.word	0x000007ff
 8000d2c:	0000043e 	.word	0x0000043e
 8000d30:	0000041e 	.word	0x0000041e

08000d34 <__aeabi_i2d>:
 8000d34:	b570      	push	{r4, r5, r6, lr}
 8000d36:	2800      	cmp	r0, #0
 8000d38:	d016      	beq.n	8000d68 <__aeabi_i2d+0x34>
 8000d3a:	17c3      	asrs	r3, r0, #31
 8000d3c:	18c5      	adds	r5, r0, r3
 8000d3e:	405d      	eors	r5, r3
 8000d40:	0fc4      	lsrs	r4, r0, #31
 8000d42:	0028      	movs	r0, r5
 8000d44:	f000 f8e8 	bl	8000f18 <__clzsi2>
 8000d48:	4a11      	ldr	r2, [pc, #68]	; (8000d90 <__aeabi_i2d+0x5c>)
 8000d4a:	1a12      	subs	r2, r2, r0
 8000d4c:	280a      	cmp	r0, #10
 8000d4e:	dc16      	bgt.n	8000d7e <__aeabi_i2d+0x4a>
 8000d50:	0003      	movs	r3, r0
 8000d52:	002e      	movs	r6, r5
 8000d54:	3315      	adds	r3, #21
 8000d56:	409e      	lsls	r6, r3
 8000d58:	230b      	movs	r3, #11
 8000d5a:	1a18      	subs	r0, r3, r0
 8000d5c:	40c5      	lsrs	r5, r0
 8000d5e:	0552      	lsls	r2, r2, #21
 8000d60:	032d      	lsls	r5, r5, #12
 8000d62:	0b2d      	lsrs	r5, r5, #12
 8000d64:	0d53      	lsrs	r3, r2, #21
 8000d66:	e003      	b.n	8000d70 <__aeabi_i2d+0x3c>
 8000d68:	2400      	movs	r4, #0
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	2500      	movs	r5, #0
 8000d6e:	2600      	movs	r6, #0
 8000d70:	051b      	lsls	r3, r3, #20
 8000d72:	432b      	orrs	r3, r5
 8000d74:	07e4      	lsls	r4, r4, #31
 8000d76:	4323      	orrs	r3, r4
 8000d78:	0030      	movs	r0, r6
 8000d7a:	0019      	movs	r1, r3
 8000d7c:	bd70      	pop	{r4, r5, r6, pc}
 8000d7e:	380b      	subs	r0, #11
 8000d80:	4085      	lsls	r5, r0
 8000d82:	0552      	lsls	r2, r2, #21
 8000d84:	032d      	lsls	r5, r5, #12
 8000d86:	2600      	movs	r6, #0
 8000d88:	0b2d      	lsrs	r5, r5, #12
 8000d8a:	0d53      	lsrs	r3, r2, #21
 8000d8c:	e7f0      	b.n	8000d70 <__aeabi_i2d+0x3c>
 8000d8e:	46c0      	nop			; (mov r8, r8)
 8000d90:	0000041e 	.word	0x0000041e

08000d94 <__aeabi_d2f>:
 8000d94:	0002      	movs	r2, r0
 8000d96:	004b      	lsls	r3, r1, #1
 8000d98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d9a:	0d5b      	lsrs	r3, r3, #21
 8000d9c:	030c      	lsls	r4, r1, #12
 8000d9e:	4e3d      	ldr	r6, [pc, #244]	; (8000e94 <__aeabi_d2f+0x100>)
 8000da0:	0a64      	lsrs	r4, r4, #9
 8000da2:	0f40      	lsrs	r0, r0, #29
 8000da4:	1c5f      	adds	r7, r3, #1
 8000da6:	0fc9      	lsrs	r1, r1, #31
 8000da8:	4304      	orrs	r4, r0
 8000daa:	00d5      	lsls	r5, r2, #3
 8000dac:	4237      	tst	r7, r6
 8000dae:	d00a      	beq.n	8000dc6 <__aeabi_d2f+0x32>
 8000db0:	4839      	ldr	r0, [pc, #228]	; (8000e98 <__aeabi_d2f+0x104>)
 8000db2:	181e      	adds	r6, r3, r0
 8000db4:	2efe      	cmp	r6, #254	; 0xfe
 8000db6:	dd16      	ble.n	8000de6 <__aeabi_d2f+0x52>
 8000db8:	20ff      	movs	r0, #255	; 0xff
 8000dba:	2400      	movs	r4, #0
 8000dbc:	05c0      	lsls	r0, r0, #23
 8000dbe:	4320      	orrs	r0, r4
 8000dc0:	07c9      	lsls	r1, r1, #31
 8000dc2:	4308      	orrs	r0, r1
 8000dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d106      	bne.n	8000dd8 <__aeabi_d2f+0x44>
 8000dca:	432c      	orrs	r4, r5
 8000dcc:	d026      	beq.n	8000e1c <__aeabi_d2f+0x88>
 8000dce:	2205      	movs	r2, #5
 8000dd0:	0192      	lsls	r2, r2, #6
 8000dd2:	0a54      	lsrs	r4, r2, #9
 8000dd4:	b2d8      	uxtb	r0, r3
 8000dd6:	e7f1      	b.n	8000dbc <__aeabi_d2f+0x28>
 8000dd8:	4325      	orrs	r5, r4
 8000dda:	d0ed      	beq.n	8000db8 <__aeabi_d2f+0x24>
 8000ddc:	2080      	movs	r0, #128	; 0x80
 8000dde:	03c0      	lsls	r0, r0, #15
 8000de0:	4304      	orrs	r4, r0
 8000de2:	20ff      	movs	r0, #255	; 0xff
 8000de4:	e7ea      	b.n	8000dbc <__aeabi_d2f+0x28>
 8000de6:	2e00      	cmp	r6, #0
 8000de8:	dd1b      	ble.n	8000e22 <__aeabi_d2f+0x8e>
 8000dea:	0192      	lsls	r2, r2, #6
 8000dec:	1e53      	subs	r3, r2, #1
 8000dee:	419a      	sbcs	r2, r3
 8000df0:	00e4      	lsls	r4, r4, #3
 8000df2:	0f6d      	lsrs	r5, r5, #29
 8000df4:	4322      	orrs	r2, r4
 8000df6:	432a      	orrs	r2, r5
 8000df8:	0753      	lsls	r3, r2, #29
 8000dfa:	d048      	beq.n	8000e8e <__aeabi_d2f+0xfa>
 8000dfc:	230f      	movs	r3, #15
 8000dfe:	4013      	ands	r3, r2
 8000e00:	2b04      	cmp	r3, #4
 8000e02:	d000      	beq.n	8000e06 <__aeabi_d2f+0x72>
 8000e04:	3204      	adds	r2, #4
 8000e06:	2380      	movs	r3, #128	; 0x80
 8000e08:	04db      	lsls	r3, r3, #19
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	d03f      	beq.n	8000e8e <__aeabi_d2f+0xfa>
 8000e0e:	1c70      	adds	r0, r6, #1
 8000e10:	2efe      	cmp	r6, #254	; 0xfe
 8000e12:	d0d1      	beq.n	8000db8 <__aeabi_d2f+0x24>
 8000e14:	0192      	lsls	r2, r2, #6
 8000e16:	0a54      	lsrs	r4, r2, #9
 8000e18:	b2c0      	uxtb	r0, r0
 8000e1a:	e7cf      	b.n	8000dbc <__aeabi_d2f+0x28>
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	2400      	movs	r4, #0
 8000e20:	e7cc      	b.n	8000dbc <__aeabi_d2f+0x28>
 8000e22:	0032      	movs	r2, r6
 8000e24:	3217      	adds	r2, #23
 8000e26:	db22      	blt.n	8000e6e <__aeabi_d2f+0xda>
 8000e28:	2080      	movs	r0, #128	; 0x80
 8000e2a:	0400      	lsls	r0, r0, #16
 8000e2c:	4320      	orrs	r0, r4
 8000e2e:	241e      	movs	r4, #30
 8000e30:	1ba4      	subs	r4, r4, r6
 8000e32:	2c1f      	cmp	r4, #31
 8000e34:	dd1d      	ble.n	8000e72 <__aeabi_d2f+0xde>
 8000e36:	2202      	movs	r2, #2
 8000e38:	4252      	negs	r2, r2
 8000e3a:	1b96      	subs	r6, r2, r6
 8000e3c:	0002      	movs	r2, r0
 8000e3e:	40f2      	lsrs	r2, r6
 8000e40:	0016      	movs	r6, r2
 8000e42:	2c20      	cmp	r4, #32
 8000e44:	d004      	beq.n	8000e50 <__aeabi_d2f+0xbc>
 8000e46:	4a15      	ldr	r2, [pc, #84]	; (8000e9c <__aeabi_d2f+0x108>)
 8000e48:	4694      	mov	ip, r2
 8000e4a:	4463      	add	r3, ip
 8000e4c:	4098      	lsls	r0, r3
 8000e4e:	4305      	orrs	r5, r0
 8000e50:	002a      	movs	r2, r5
 8000e52:	1e53      	subs	r3, r2, #1
 8000e54:	419a      	sbcs	r2, r3
 8000e56:	4332      	orrs	r2, r6
 8000e58:	2600      	movs	r6, #0
 8000e5a:	0753      	lsls	r3, r2, #29
 8000e5c:	d1ce      	bne.n	8000dfc <__aeabi_d2f+0x68>
 8000e5e:	2480      	movs	r4, #128	; 0x80
 8000e60:	0013      	movs	r3, r2
 8000e62:	04e4      	lsls	r4, r4, #19
 8000e64:	2001      	movs	r0, #1
 8000e66:	4023      	ands	r3, r4
 8000e68:	4222      	tst	r2, r4
 8000e6a:	d1d3      	bne.n	8000e14 <__aeabi_d2f+0x80>
 8000e6c:	e7b0      	b.n	8000dd0 <__aeabi_d2f+0x3c>
 8000e6e:	2300      	movs	r3, #0
 8000e70:	e7ad      	b.n	8000dce <__aeabi_d2f+0x3a>
 8000e72:	4a0b      	ldr	r2, [pc, #44]	; (8000ea0 <__aeabi_d2f+0x10c>)
 8000e74:	4694      	mov	ip, r2
 8000e76:	002a      	movs	r2, r5
 8000e78:	40e2      	lsrs	r2, r4
 8000e7a:	0014      	movs	r4, r2
 8000e7c:	002a      	movs	r2, r5
 8000e7e:	4463      	add	r3, ip
 8000e80:	409a      	lsls	r2, r3
 8000e82:	4098      	lsls	r0, r3
 8000e84:	1e55      	subs	r5, r2, #1
 8000e86:	41aa      	sbcs	r2, r5
 8000e88:	4302      	orrs	r2, r0
 8000e8a:	4322      	orrs	r2, r4
 8000e8c:	e7e4      	b.n	8000e58 <__aeabi_d2f+0xc4>
 8000e8e:	0033      	movs	r3, r6
 8000e90:	e79e      	b.n	8000dd0 <__aeabi_d2f+0x3c>
 8000e92:	46c0      	nop			; (mov r8, r8)
 8000e94:	000007fe 	.word	0x000007fe
 8000e98:	fffffc80 	.word	0xfffffc80
 8000e9c:	fffffca2 	.word	0xfffffca2
 8000ea0:	fffffc82 	.word	0xfffffc82

08000ea4 <__aeabi_cfrcmple>:
 8000ea4:	4684      	mov	ip, r0
 8000ea6:	0008      	movs	r0, r1
 8000ea8:	4661      	mov	r1, ip
 8000eaa:	e7ff      	b.n	8000eac <__aeabi_cfcmpeq>

08000eac <__aeabi_cfcmpeq>:
 8000eac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000eae:	f000 f8bd 	bl	800102c <__lesf2>
 8000eb2:	2800      	cmp	r0, #0
 8000eb4:	d401      	bmi.n	8000eba <__aeabi_cfcmpeq+0xe>
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	42c8      	cmn	r0, r1
 8000eba:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000ebc <__aeabi_fcmpeq>:
 8000ebc:	b510      	push	{r4, lr}
 8000ebe:	f000 f849 	bl	8000f54 <__eqsf2>
 8000ec2:	4240      	negs	r0, r0
 8000ec4:	3001      	adds	r0, #1
 8000ec6:	bd10      	pop	{r4, pc}

08000ec8 <__aeabi_fcmplt>:
 8000ec8:	b510      	push	{r4, lr}
 8000eca:	f000 f8af 	bl	800102c <__lesf2>
 8000ece:	2800      	cmp	r0, #0
 8000ed0:	db01      	blt.n	8000ed6 <__aeabi_fcmplt+0xe>
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	bd10      	pop	{r4, pc}
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	bd10      	pop	{r4, pc}
 8000eda:	46c0      	nop			; (mov r8, r8)

08000edc <__aeabi_fcmple>:
 8000edc:	b510      	push	{r4, lr}
 8000ede:	f000 f8a5 	bl	800102c <__lesf2>
 8000ee2:	2800      	cmp	r0, #0
 8000ee4:	dd01      	ble.n	8000eea <__aeabi_fcmple+0xe>
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	bd10      	pop	{r4, pc}
 8000eea:	2001      	movs	r0, #1
 8000eec:	bd10      	pop	{r4, pc}
 8000eee:	46c0      	nop			; (mov r8, r8)

08000ef0 <__aeabi_fcmpgt>:
 8000ef0:	b510      	push	{r4, lr}
 8000ef2:	f000 f855 	bl	8000fa0 <__gesf2>
 8000ef6:	2800      	cmp	r0, #0
 8000ef8:	dc01      	bgt.n	8000efe <__aeabi_fcmpgt+0xe>
 8000efa:	2000      	movs	r0, #0
 8000efc:	bd10      	pop	{r4, pc}
 8000efe:	2001      	movs	r0, #1
 8000f00:	bd10      	pop	{r4, pc}
 8000f02:	46c0      	nop			; (mov r8, r8)

08000f04 <__aeabi_fcmpge>:
 8000f04:	b510      	push	{r4, lr}
 8000f06:	f000 f84b 	bl	8000fa0 <__gesf2>
 8000f0a:	2800      	cmp	r0, #0
 8000f0c:	da01      	bge.n	8000f12 <__aeabi_fcmpge+0xe>
 8000f0e:	2000      	movs	r0, #0
 8000f10:	bd10      	pop	{r4, pc}
 8000f12:	2001      	movs	r0, #1
 8000f14:	bd10      	pop	{r4, pc}
 8000f16:	46c0      	nop			; (mov r8, r8)

08000f18 <__clzsi2>:
 8000f18:	211c      	movs	r1, #28
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	041b      	lsls	r3, r3, #16
 8000f1e:	4298      	cmp	r0, r3
 8000f20:	d301      	bcc.n	8000f26 <__clzsi2+0xe>
 8000f22:	0c00      	lsrs	r0, r0, #16
 8000f24:	3910      	subs	r1, #16
 8000f26:	0a1b      	lsrs	r3, r3, #8
 8000f28:	4298      	cmp	r0, r3
 8000f2a:	d301      	bcc.n	8000f30 <__clzsi2+0x18>
 8000f2c:	0a00      	lsrs	r0, r0, #8
 8000f2e:	3908      	subs	r1, #8
 8000f30:	091b      	lsrs	r3, r3, #4
 8000f32:	4298      	cmp	r0, r3
 8000f34:	d301      	bcc.n	8000f3a <__clzsi2+0x22>
 8000f36:	0900      	lsrs	r0, r0, #4
 8000f38:	3904      	subs	r1, #4
 8000f3a:	a202      	add	r2, pc, #8	; (adr r2, 8000f44 <__clzsi2+0x2c>)
 8000f3c:	5c10      	ldrb	r0, [r2, r0]
 8000f3e:	1840      	adds	r0, r0, r1
 8000f40:	4770      	bx	lr
 8000f42:	46c0      	nop			; (mov r8, r8)
 8000f44:	02020304 	.word	0x02020304
 8000f48:	01010101 	.word	0x01010101
	...

08000f54 <__eqsf2>:
 8000f54:	b570      	push	{r4, r5, r6, lr}
 8000f56:	0042      	lsls	r2, r0, #1
 8000f58:	0245      	lsls	r5, r0, #9
 8000f5a:	024e      	lsls	r6, r1, #9
 8000f5c:	004c      	lsls	r4, r1, #1
 8000f5e:	0fc3      	lsrs	r3, r0, #31
 8000f60:	0a6d      	lsrs	r5, r5, #9
 8000f62:	2001      	movs	r0, #1
 8000f64:	0e12      	lsrs	r2, r2, #24
 8000f66:	0a76      	lsrs	r6, r6, #9
 8000f68:	0e24      	lsrs	r4, r4, #24
 8000f6a:	0fc9      	lsrs	r1, r1, #31
 8000f6c:	2aff      	cmp	r2, #255	; 0xff
 8000f6e:	d006      	beq.n	8000f7e <__eqsf2+0x2a>
 8000f70:	2cff      	cmp	r4, #255	; 0xff
 8000f72:	d003      	beq.n	8000f7c <__eqsf2+0x28>
 8000f74:	42a2      	cmp	r2, r4
 8000f76:	d101      	bne.n	8000f7c <__eqsf2+0x28>
 8000f78:	42b5      	cmp	r5, r6
 8000f7a:	d006      	beq.n	8000f8a <__eqsf2+0x36>
 8000f7c:	bd70      	pop	{r4, r5, r6, pc}
 8000f7e:	2d00      	cmp	r5, #0
 8000f80:	d1fc      	bne.n	8000f7c <__eqsf2+0x28>
 8000f82:	2cff      	cmp	r4, #255	; 0xff
 8000f84:	d1fa      	bne.n	8000f7c <__eqsf2+0x28>
 8000f86:	2e00      	cmp	r6, #0
 8000f88:	d1f8      	bne.n	8000f7c <__eqsf2+0x28>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d006      	beq.n	8000f9c <__eqsf2+0x48>
 8000f8e:	2001      	movs	r0, #1
 8000f90:	2a00      	cmp	r2, #0
 8000f92:	d1f3      	bne.n	8000f7c <__eqsf2+0x28>
 8000f94:	0028      	movs	r0, r5
 8000f96:	1e43      	subs	r3, r0, #1
 8000f98:	4198      	sbcs	r0, r3
 8000f9a:	e7ef      	b.n	8000f7c <__eqsf2+0x28>
 8000f9c:	2000      	movs	r0, #0
 8000f9e:	e7ed      	b.n	8000f7c <__eqsf2+0x28>

08000fa0 <__gesf2>:
 8000fa0:	b570      	push	{r4, r5, r6, lr}
 8000fa2:	0042      	lsls	r2, r0, #1
 8000fa4:	0245      	lsls	r5, r0, #9
 8000fa6:	024e      	lsls	r6, r1, #9
 8000fa8:	004c      	lsls	r4, r1, #1
 8000faa:	0fc3      	lsrs	r3, r0, #31
 8000fac:	0a6d      	lsrs	r5, r5, #9
 8000fae:	0e12      	lsrs	r2, r2, #24
 8000fb0:	0a76      	lsrs	r6, r6, #9
 8000fb2:	0e24      	lsrs	r4, r4, #24
 8000fb4:	0fc8      	lsrs	r0, r1, #31
 8000fb6:	2aff      	cmp	r2, #255	; 0xff
 8000fb8:	d01b      	beq.n	8000ff2 <__gesf2+0x52>
 8000fba:	2cff      	cmp	r4, #255	; 0xff
 8000fbc:	d00e      	beq.n	8000fdc <__gesf2+0x3c>
 8000fbe:	2a00      	cmp	r2, #0
 8000fc0:	d11b      	bne.n	8000ffa <__gesf2+0x5a>
 8000fc2:	2c00      	cmp	r4, #0
 8000fc4:	d101      	bne.n	8000fca <__gesf2+0x2a>
 8000fc6:	2e00      	cmp	r6, #0
 8000fc8:	d01c      	beq.n	8001004 <__gesf2+0x64>
 8000fca:	2d00      	cmp	r5, #0
 8000fcc:	d00c      	beq.n	8000fe8 <__gesf2+0x48>
 8000fce:	4283      	cmp	r3, r0
 8000fd0:	d01c      	beq.n	800100c <__gesf2+0x6c>
 8000fd2:	2102      	movs	r1, #2
 8000fd4:	1e58      	subs	r0, r3, #1
 8000fd6:	4008      	ands	r0, r1
 8000fd8:	3801      	subs	r0, #1
 8000fda:	bd70      	pop	{r4, r5, r6, pc}
 8000fdc:	2e00      	cmp	r6, #0
 8000fde:	d122      	bne.n	8001026 <__gesf2+0x86>
 8000fe0:	2a00      	cmp	r2, #0
 8000fe2:	d1f4      	bne.n	8000fce <__gesf2+0x2e>
 8000fe4:	2d00      	cmp	r5, #0
 8000fe6:	d1f2      	bne.n	8000fce <__gesf2+0x2e>
 8000fe8:	2800      	cmp	r0, #0
 8000fea:	d1f6      	bne.n	8000fda <__gesf2+0x3a>
 8000fec:	2001      	movs	r0, #1
 8000fee:	4240      	negs	r0, r0
 8000ff0:	e7f3      	b.n	8000fda <__gesf2+0x3a>
 8000ff2:	2d00      	cmp	r5, #0
 8000ff4:	d117      	bne.n	8001026 <__gesf2+0x86>
 8000ff6:	2cff      	cmp	r4, #255	; 0xff
 8000ff8:	d0f0      	beq.n	8000fdc <__gesf2+0x3c>
 8000ffa:	2c00      	cmp	r4, #0
 8000ffc:	d1e7      	bne.n	8000fce <__gesf2+0x2e>
 8000ffe:	2e00      	cmp	r6, #0
 8001000:	d1e5      	bne.n	8000fce <__gesf2+0x2e>
 8001002:	e7e6      	b.n	8000fd2 <__gesf2+0x32>
 8001004:	2000      	movs	r0, #0
 8001006:	2d00      	cmp	r5, #0
 8001008:	d0e7      	beq.n	8000fda <__gesf2+0x3a>
 800100a:	e7e2      	b.n	8000fd2 <__gesf2+0x32>
 800100c:	42a2      	cmp	r2, r4
 800100e:	dc05      	bgt.n	800101c <__gesf2+0x7c>
 8001010:	dbea      	blt.n	8000fe8 <__gesf2+0x48>
 8001012:	42b5      	cmp	r5, r6
 8001014:	d802      	bhi.n	800101c <__gesf2+0x7c>
 8001016:	d3e7      	bcc.n	8000fe8 <__gesf2+0x48>
 8001018:	2000      	movs	r0, #0
 800101a:	e7de      	b.n	8000fda <__gesf2+0x3a>
 800101c:	4243      	negs	r3, r0
 800101e:	4158      	adcs	r0, r3
 8001020:	0040      	lsls	r0, r0, #1
 8001022:	3801      	subs	r0, #1
 8001024:	e7d9      	b.n	8000fda <__gesf2+0x3a>
 8001026:	2002      	movs	r0, #2
 8001028:	4240      	negs	r0, r0
 800102a:	e7d6      	b.n	8000fda <__gesf2+0x3a>

0800102c <__lesf2>:
 800102c:	b570      	push	{r4, r5, r6, lr}
 800102e:	0042      	lsls	r2, r0, #1
 8001030:	0245      	lsls	r5, r0, #9
 8001032:	024e      	lsls	r6, r1, #9
 8001034:	004c      	lsls	r4, r1, #1
 8001036:	0fc3      	lsrs	r3, r0, #31
 8001038:	0a6d      	lsrs	r5, r5, #9
 800103a:	0e12      	lsrs	r2, r2, #24
 800103c:	0a76      	lsrs	r6, r6, #9
 800103e:	0e24      	lsrs	r4, r4, #24
 8001040:	0fc8      	lsrs	r0, r1, #31
 8001042:	2aff      	cmp	r2, #255	; 0xff
 8001044:	d00b      	beq.n	800105e <__lesf2+0x32>
 8001046:	2cff      	cmp	r4, #255	; 0xff
 8001048:	d00d      	beq.n	8001066 <__lesf2+0x3a>
 800104a:	2a00      	cmp	r2, #0
 800104c:	d11f      	bne.n	800108e <__lesf2+0x62>
 800104e:	2c00      	cmp	r4, #0
 8001050:	d116      	bne.n	8001080 <__lesf2+0x54>
 8001052:	2e00      	cmp	r6, #0
 8001054:	d114      	bne.n	8001080 <__lesf2+0x54>
 8001056:	2000      	movs	r0, #0
 8001058:	2d00      	cmp	r5, #0
 800105a:	d010      	beq.n	800107e <__lesf2+0x52>
 800105c:	e009      	b.n	8001072 <__lesf2+0x46>
 800105e:	2d00      	cmp	r5, #0
 8001060:	d10c      	bne.n	800107c <__lesf2+0x50>
 8001062:	2cff      	cmp	r4, #255	; 0xff
 8001064:	d113      	bne.n	800108e <__lesf2+0x62>
 8001066:	2e00      	cmp	r6, #0
 8001068:	d108      	bne.n	800107c <__lesf2+0x50>
 800106a:	2a00      	cmp	r2, #0
 800106c:	d008      	beq.n	8001080 <__lesf2+0x54>
 800106e:	4283      	cmp	r3, r0
 8001070:	d012      	beq.n	8001098 <__lesf2+0x6c>
 8001072:	2102      	movs	r1, #2
 8001074:	1e58      	subs	r0, r3, #1
 8001076:	4008      	ands	r0, r1
 8001078:	3801      	subs	r0, #1
 800107a:	e000      	b.n	800107e <__lesf2+0x52>
 800107c:	2002      	movs	r0, #2
 800107e:	bd70      	pop	{r4, r5, r6, pc}
 8001080:	2d00      	cmp	r5, #0
 8001082:	d1f4      	bne.n	800106e <__lesf2+0x42>
 8001084:	2800      	cmp	r0, #0
 8001086:	d1fa      	bne.n	800107e <__lesf2+0x52>
 8001088:	2001      	movs	r0, #1
 800108a:	4240      	negs	r0, r0
 800108c:	e7f7      	b.n	800107e <__lesf2+0x52>
 800108e:	2c00      	cmp	r4, #0
 8001090:	d1ed      	bne.n	800106e <__lesf2+0x42>
 8001092:	2e00      	cmp	r6, #0
 8001094:	d1eb      	bne.n	800106e <__lesf2+0x42>
 8001096:	e7ec      	b.n	8001072 <__lesf2+0x46>
 8001098:	42a2      	cmp	r2, r4
 800109a:	dc05      	bgt.n	80010a8 <__lesf2+0x7c>
 800109c:	dbf2      	blt.n	8001084 <__lesf2+0x58>
 800109e:	42b5      	cmp	r5, r6
 80010a0:	d802      	bhi.n	80010a8 <__lesf2+0x7c>
 80010a2:	d3ef      	bcc.n	8001084 <__lesf2+0x58>
 80010a4:	2000      	movs	r0, #0
 80010a6:	e7ea      	b.n	800107e <__lesf2+0x52>
 80010a8:	4243      	negs	r3, r0
 80010aa:	4158      	adcs	r0, r3
 80010ac:	0040      	lsls	r0, r0, #1
 80010ae:	3801      	subs	r0, #1
 80010b0:	e7e5      	b.n	800107e <__lesf2+0x52>
 80010b2:	46c0      	nop			; (mov r8, r8)

080010b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010b6:	b0b5      	sub	sp, #212	; 0xd4
 80010b8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ba:	f000 fccd 	bl	8001a58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010be:	f000 fa97 	bl	80015f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010c2:	f000 fb5f 	bl	8001784 <MX_GPIO_Init>
  MX_I2C1_Init();
 80010c6:	f000 faed 	bl	80016a4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80010ca:	f000 fb2b 	bl	8001724 <MX_USART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* SENSOR 1 CODE */
	  buf1[0] = REG_TEMP;
 80010ce:	2200      	movs	r2, #0
 80010d0:	2590      	movs	r5, #144	; 0x90
 80010d2:	197b      	adds	r3, r7, r5
 80010d4:	701a      	strb	r2, [r3, #0]
	  ret = HAL_I2C_Master_Transmit(&hi2c1, ADT_ADDR1, buf1, 1, HAL_MAX_DELAY);
 80010d6:	2390      	movs	r3, #144	; 0x90
 80010d8:	b299      	uxth	r1, r3
 80010da:	26c5      	movs	r6, #197	; 0xc5
 80010dc:	19bc      	adds	r4, r7, r6
 80010de:	197a      	adds	r2, r7, r5
 80010e0:	48e0      	ldr	r0, [pc, #896]	; (8001464 <main+0x3b0>)
 80010e2:	2301      	movs	r3, #1
 80010e4:	425b      	negs	r3, r3
 80010e6:	9300      	str	r3, [sp, #0]
 80010e8:	2301      	movs	r3, #1
 80010ea:	f001 f807 	bl	80020fc <HAL_I2C_Master_Transmit>
 80010ee:	0003      	movs	r3, r0
 80010f0:	7023      	strb	r3, [r4, #0]
	  if (ret != HAL_OK) {
 80010f2:	19bb      	adds	r3, r7, r6
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d008      	beq.n	800110c <main+0x58>
		  strcpy((char*)buf1, "Error Tx\r\n");
 80010fa:	197b      	adds	r3, r7, r5
 80010fc:	4ada      	ldr	r2, [pc, #872]	; (8001468 <main+0x3b4>)
 80010fe:	ca03      	ldmia	r2!, {r0, r1}
 8001100:	c303      	stmia	r3!, {r0, r1}
 8001102:	8811      	ldrh	r1, [r2, #0]
 8001104:	8019      	strh	r1, [r3, #0]
 8001106:	7892      	ldrb	r2, [r2, #2]
 8001108:	709a      	strb	r2, [r3, #2]
 800110a:	e06f      	b.n	80011ec <main+0x138>
	  } else {
		  ret = HAL_I2C_Master_Receive(&hi2c1, ADT_ADDR1, buf1, 2, HAL_MAX_DELAY);
 800110c:	2390      	movs	r3, #144	; 0x90
 800110e:	b299      	uxth	r1, r3
 8001110:	25c5      	movs	r5, #197	; 0xc5
 8001112:	197c      	adds	r4, r7, r5
 8001114:	2690      	movs	r6, #144	; 0x90
 8001116:	19ba      	adds	r2, r7, r6
 8001118:	48d2      	ldr	r0, [pc, #840]	; (8001464 <main+0x3b0>)
 800111a:	2301      	movs	r3, #1
 800111c:	425b      	negs	r3, r3
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	2302      	movs	r3, #2
 8001122:	f001 f915 	bl	8002350 <HAL_I2C_Master_Receive>
 8001126:	0003      	movs	r3, r0
 8001128:	7023      	strb	r3, [r4, #0]
		  if (ret != HAL_OK) {
 800112a:	197b      	adds	r3, r7, r5
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d008      	beq.n	8001144 <main+0x90>
		  		  strcpy((char*)buf1, "Error Rx\r\n");
 8001132:	19bb      	adds	r3, r7, r6
 8001134:	4acd      	ldr	r2, [pc, #820]	; (800146c <main+0x3b8>)
 8001136:	ca03      	ldmia	r2!, {r0, r1}
 8001138:	c303      	stmia	r3!, {r0, r1}
 800113a:	8811      	ldrh	r1, [r2, #0]
 800113c:	8019      	strh	r1, [r3, #0]
 800113e:	7892      	ldrb	r2, [r2, #2]
 8001140:	709a      	strb	r2, [r3, #2]
 8001142:	e053      	b.n	80011ec <main+0x138>
		  } else {
			  val = ((int16_t)buf1[0] << 4 | buf1[1] >> 4);
 8001144:	2290      	movs	r2, #144	; 0x90
 8001146:	18bb      	adds	r3, r7, r2
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	011b      	lsls	r3, r3, #4
 800114c:	b219      	sxth	r1, r3
 800114e:	18bb      	adds	r3, r7, r2
 8001150:	785b      	ldrb	r3, [r3, #1]
 8001152:	091b      	lsrs	r3, r3, #4
 8001154:	b2db      	uxtb	r3, r3
 8001156:	b21a      	sxth	r2, r3
 8001158:	20c6      	movs	r0, #198	; 0xc6
 800115a:	183b      	adds	r3, r7, r0
 800115c:	430a      	orrs	r2, r1
 800115e:	801a      	strh	r2, [r3, #0]

			  if (val > 0x7FF) {
 8001160:	0001      	movs	r1, r0
 8001162:	187b      	adds	r3, r7, r1
 8001164:	2200      	movs	r2, #0
 8001166:	5e9a      	ldrsh	r2, [r3, r2]
 8001168:	2380      	movs	r3, #128	; 0x80
 800116a:	011b      	lsls	r3, r3, #4
 800116c:	429a      	cmp	r2, r3
 800116e:	db05      	blt.n	800117c <main+0xc8>
				  val |= 0xF000;
 8001170:	187b      	adds	r3, r7, r1
 8001172:	187a      	adds	r2, r7, r1
 8001174:	8812      	ldrh	r2, [r2, #0]
 8001176:	49be      	ldr	r1, [pc, #760]	; (8001470 <main+0x3bc>)
 8001178:	430a      	orrs	r2, r1
 800117a:	801a      	strh	r2, [r3, #0]
			  }

			  temp_c = val * 0.0625;
 800117c:	23c6      	movs	r3, #198	; 0xc6
 800117e:	18fb      	adds	r3, r7, r3
 8001180:	2200      	movs	r2, #0
 8001182:	5e9b      	ldrsh	r3, [r3, r2]
 8001184:	0018      	movs	r0, r3
 8001186:	f7ff fdd5 	bl	8000d34 <__aeabi_i2d>
 800118a:	2200      	movs	r2, #0
 800118c:	4bb9      	ldr	r3, [pc, #740]	; (8001474 <main+0x3c0>)
 800118e:	f7ff fb65 	bl	800085c <__aeabi_dmul>
 8001192:	0002      	movs	r2, r0
 8001194:	000b      	movs	r3, r1
 8001196:	0010      	movs	r0, r2
 8001198:	0019      	movs	r1, r3
 800119a:	f7ff fdfb 	bl	8000d94 <__aeabi_d2f>
 800119e:	1c03      	adds	r3, r0, #0
 80011a0:	25c0      	movs	r5, #192	; 0xc0
 80011a2:	197a      	adds	r2, r7, r5
 80011a4:	6013      	str	r3, [r2, #0]

			  temp_c *= 100;
 80011a6:	49b4      	ldr	r1, [pc, #720]	; (8001478 <main+0x3c4>)
 80011a8:	197b      	adds	r3, r7, r5
 80011aa:	6818      	ldr	r0, [r3, #0]
 80011ac:	f7ff f862 	bl	8000274 <__aeabi_fmul>
 80011b0:	1c03      	adds	r3, r0, #0
 80011b2:	197a      	adds	r2, r7, r5
 80011b4:	6013      	str	r3, [r2, #0]
			  sprintf((char*)buf1, "ADT7410 Readings\r\n | 1: %u.%02uC |\r\n",
					  ((unsigned int)temp_c / 100),
 80011b6:	197b      	adds	r3, r7, r5
 80011b8:	6818      	ldr	r0, [r3, #0]
 80011ba:	f7ff f843 	bl	8000244 <__aeabi_f2uiz>
 80011be:	0003      	movs	r3, r0
			  sprintf((char*)buf1, "ADT7410 Readings\r\n | 1: %u.%02uC |\r\n",
 80011c0:	2164      	movs	r1, #100	; 0x64
 80011c2:	0018      	movs	r0, r3
 80011c4:	f7fe ffb2 	bl	800012c <__udivsi3>
 80011c8:	0003      	movs	r3, r0
 80011ca:	001c      	movs	r4, r3
					  ((unsigned int)temp_c %100));
 80011cc:	197b      	adds	r3, r7, r5
 80011ce:	6818      	ldr	r0, [r3, #0]
 80011d0:	f7ff f838 	bl	8000244 <__aeabi_f2uiz>
 80011d4:	0003      	movs	r3, r0
			  sprintf((char*)buf1, "ADT7410 Readings\r\n | 1: %u.%02uC |\r\n",
 80011d6:	2164      	movs	r1, #100	; 0x64
 80011d8:	0018      	movs	r0, r3
 80011da:	f7ff f82d 	bl	8000238 <__aeabi_uidivmod>
 80011de:	000b      	movs	r3, r1
 80011e0:	49a6      	ldr	r1, [pc, #664]	; (800147c <main+0x3c8>)
 80011e2:	2290      	movs	r2, #144	; 0x90
 80011e4:	18b8      	adds	r0, r7, r2
 80011e6:	0022      	movs	r2, r4
 80011e8:	f002 ff00 	bl	8003fec <siprintf>
		  }
	  }

	  /* SENSOR 2 CODE */
	  buf2[0] = REG_TEMP;
 80011ec:	2200      	movs	r2, #0
 80011ee:	2560      	movs	r5, #96	; 0x60
 80011f0:	197b      	adds	r3, r7, r5
 80011f2:	701a      	strb	r2, [r3, #0]
	  ret = HAL_I2C_Master_Transmit(&hi2c1, ADT_ADDR2, buf2, 1, HAL_MAX_DELAY);
 80011f4:	2392      	movs	r3, #146	; 0x92
 80011f6:	b299      	uxth	r1, r3
 80011f8:	26c5      	movs	r6, #197	; 0xc5
 80011fa:	19bc      	adds	r4, r7, r6
 80011fc:	197a      	adds	r2, r7, r5
 80011fe:	4899      	ldr	r0, [pc, #612]	; (8001464 <main+0x3b0>)
 8001200:	2301      	movs	r3, #1
 8001202:	425b      	negs	r3, r3
 8001204:	9300      	str	r3, [sp, #0]
 8001206:	2301      	movs	r3, #1
 8001208:	f000 ff78 	bl	80020fc <HAL_I2C_Master_Transmit>
 800120c:	0003      	movs	r3, r0
 800120e:	7023      	strb	r3, [r4, #0]
	  if (ret != HAL_OK) {
 8001210:	19bb      	adds	r3, r7, r6
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d008      	beq.n	800122a <main+0x176>
		  strcpy((char*)buf2, "Error Tx\r\n");
 8001218:	197b      	adds	r3, r7, r5
 800121a:	4a93      	ldr	r2, [pc, #588]	; (8001468 <main+0x3b4>)
 800121c:	ca03      	ldmia	r2!, {r0, r1}
 800121e:	c303      	stmia	r3!, {r0, r1}
 8001220:	8811      	ldrh	r1, [r2, #0]
 8001222:	8019      	strh	r1, [r3, #0]
 8001224:	7892      	ldrb	r2, [r2, #2]
 8001226:	709a      	strb	r2, [r3, #2]
 8001228:	e06f      	b.n	800130a <main+0x256>
	  } else {
		  ret = HAL_I2C_Master_Receive(&hi2c1, ADT_ADDR2, buf2, 2, HAL_MAX_DELAY);
 800122a:	2392      	movs	r3, #146	; 0x92
 800122c:	b299      	uxth	r1, r3
 800122e:	25c5      	movs	r5, #197	; 0xc5
 8001230:	197c      	adds	r4, r7, r5
 8001232:	2660      	movs	r6, #96	; 0x60
 8001234:	19ba      	adds	r2, r7, r6
 8001236:	488b      	ldr	r0, [pc, #556]	; (8001464 <main+0x3b0>)
 8001238:	2301      	movs	r3, #1
 800123a:	425b      	negs	r3, r3
 800123c:	9300      	str	r3, [sp, #0]
 800123e:	2302      	movs	r3, #2
 8001240:	f001 f886 	bl	8002350 <HAL_I2C_Master_Receive>
 8001244:	0003      	movs	r3, r0
 8001246:	7023      	strb	r3, [r4, #0]
		  if (ret != HAL_OK) {
 8001248:	197b      	adds	r3, r7, r5
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d008      	beq.n	8001262 <main+0x1ae>
				  strcpy((char*)buf2, "Error Rx\r\n");
 8001250:	19bb      	adds	r3, r7, r6
 8001252:	4a86      	ldr	r2, [pc, #536]	; (800146c <main+0x3b8>)
 8001254:	ca03      	ldmia	r2!, {r0, r1}
 8001256:	c303      	stmia	r3!, {r0, r1}
 8001258:	8811      	ldrh	r1, [r2, #0]
 800125a:	8019      	strh	r1, [r3, #0]
 800125c:	7892      	ldrb	r2, [r2, #2]
 800125e:	709a      	strb	r2, [r3, #2]
 8001260:	e053      	b.n	800130a <main+0x256>
		  } else {
			  val = ((int16_t)buf2[0] << 4 | buf2[1] >> 4);
 8001262:	2260      	movs	r2, #96	; 0x60
 8001264:	18bb      	adds	r3, r7, r2
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	011b      	lsls	r3, r3, #4
 800126a:	b219      	sxth	r1, r3
 800126c:	18bb      	adds	r3, r7, r2
 800126e:	785b      	ldrb	r3, [r3, #1]
 8001270:	091b      	lsrs	r3, r3, #4
 8001272:	b2db      	uxtb	r3, r3
 8001274:	b21a      	sxth	r2, r3
 8001276:	20c6      	movs	r0, #198	; 0xc6
 8001278:	183b      	adds	r3, r7, r0
 800127a:	430a      	orrs	r2, r1
 800127c:	801a      	strh	r2, [r3, #0]

			  if (val > 0x7FF) {
 800127e:	0001      	movs	r1, r0
 8001280:	187b      	adds	r3, r7, r1
 8001282:	2200      	movs	r2, #0
 8001284:	5e9a      	ldrsh	r2, [r3, r2]
 8001286:	2380      	movs	r3, #128	; 0x80
 8001288:	011b      	lsls	r3, r3, #4
 800128a:	429a      	cmp	r2, r3
 800128c:	db05      	blt.n	800129a <main+0x1e6>
				  val |= 0xF000;
 800128e:	187b      	adds	r3, r7, r1
 8001290:	187a      	adds	r2, r7, r1
 8001292:	8812      	ldrh	r2, [r2, #0]
 8001294:	4976      	ldr	r1, [pc, #472]	; (8001470 <main+0x3bc>)
 8001296:	430a      	orrs	r2, r1
 8001298:	801a      	strh	r2, [r3, #0]
			  }

			  temp_c = val * 0.0625;
 800129a:	23c6      	movs	r3, #198	; 0xc6
 800129c:	18fb      	adds	r3, r7, r3
 800129e:	2200      	movs	r2, #0
 80012a0:	5e9b      	ldrsh	r3, [r3, r2]
 80012a2:	0018      	movs	r0, r3
 80012a4:	f7ff fd46 	bl	8000d34 <__aeabi_i2d>
 80012a8:	2200      	movs	r2, #0
 80012aa:	4b72      	ldr	r3, [pc, #456]	; (8001474 <main+0x3c0>)
 80012ac:	f7ff fad6 	bl	800085c <__aeabi_dmul>
 80012b0:	0002      	movs	r2, r0
 80012b2:	000b      	movs	r3, r1
 80012b4:	0010      	movs	r0, r2
 80012b6:	0019      	movs	r1, r3
 80012b8:	f7ff fd6c 	bl	8000d94 <__aeabi_d2f>
 80012bc:	1c03      	adds	r3, r0, #0
 80012be:	25c0      	movs	r5, #192	; 0xc0
 80012c0:	197a      	adds	r2, r7, r5
 80012c2:	6013      	str	r3, [r2, #0]

			  temp_c *= 100;
 80012c4:	496c      	ldr	r1, [pc, #432]	; (8001478 <main+0x3c4>)
 80012c6:	197b      	adds	r3, r7, r5
 80012c8:	6818      	ldr	r0, [r3, #0]
 80012ca:	f7fe ffd3 	bl	8000274 <__aeabi_fmul>
 80012ce:	1c03      	adds	r3, r0, #0
 80012d0:	197a      	adds	r2, r7, r5
 80012d2:	6013      	str	r3, [r2, #0]
			  sprintf((char*)buf2, " | 2: %u.%02uC |\r\n",
					  ((unsigned int)temp_c / 100),
 80012d4:	197b      	adds	r3, r7, r5
 80012d6:	6818      	ldr	r0, [r3, #0]
 80012d8:	f7fe ffb4 	bl	8000244 <__aeabi_f2uiz>
 80012dc:	0003      	movs	r3, r0
			  sprintf((char*)buf2, " | 2: %u.%02uC |\r\n",
 80012de:	2164      	movs	r1, #100	; 0x64
 80012e0:	0018      	movs	r0, r3
 80012e2:	f7fe ff23 	bl	800012c <__udivsi3>
 80012e6:	0003      	movs	r3, r0
 80012e8:	001c      	movs	r4, r3
					  ((unsigned int)temp_c %100));
 80012ea:	197b      	adds	r3, r7, r5
 80012ec:	6818      	ldr	r0, [r3, #0]
 80012ee:	f7fe ffa9 	bl	8000244 <__aeabi_f2uiz>
 80012f2:	0003      	movs	r3, r0
			  sprintf((char*)buf2, " | 2: %u.%02uC |\r\n",
 80012f4:	2164      	movs	r1, #100	; 0x64
 80012f6:	0018      	movs	r0, r3
 80012f8:	f7fe ff9e 	bl	8000238 <__aeabi_uidivmod>
 80012fc:	000b      	movs	r3, r1
 80012fe:	4960      	ldr	r1, [pc, #384]	; (8001480 <main+0x3cc>)
 8001300:	2260      	movs	r2, #96	; 0x60
 8001302:	18b8      	adds	r0, r7, r2
 8001304:	0022      	movs	r2, r4
 8001306:	f002 fe71 	bl	8003fec <siprintf>
		  }
	  }

	  /* SENSOR 3 CODE */
	  buf3[0] = REG_TEMP;
 800130a:	2200      	movs	r2, #0
 800130c:	2530      	movs	r5, #48	; 0x30
 800130e:	197b      	adds	r3, r7, r5
 8001310:	701a      	strb	r2, [r3, #0]
	  ret = HAL_I2C_Master_Transmit(&hi2c1, ADT_ADDR3, buf3, 1, HAL_MAX_DELAY);
 8001312:	2394      	movs	r3, #148	; 0x94
 8001314:	b299      	uxth	r1, r3
 8001316:	26c5      	movs	r6, #197	; 0xc5
 8001318:	19bc      	adds	r4, r7, r6
 800131a:	197a      	adds	r2, r7, r5
 800131c:	4851      	ldr	r0, [pc, #324]	; (8001464 <main+0x3b0>)
 800131e:	2301      	movs	r3, #1
 8001320:	425b      	negs	r3, r3
 8001322:	9300      	str	r3, [sp, #0]
 8001324:	2301      	movs	r3, #1
 8001326:	f000 fee9 	bl	80020fc <HAL_I2C_Master_Transmit>
 800132a:	0003      	movs	r3, r0
 800132c:	7023      	strb	r3, [r4, #0]
	  if (ret != HAL_OK) {
 800132e:	19bb      	adds	r3, r7, r6
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d008      	beq.n	8001348 <main+0x294>
		  strcpy((char*)buf3, "Error Tx\r\n");
 8001336:	197b      	adds	r3, r7, r5
 8001338:	4a4b      	ldr	r2, [pc, #300]	; (8001468 <main+0x3b4>)
 800133a:	ca03      	ldmia	r2!, {r0, r1}
 800133c:	c303      	stmia	r3!, {r0, r1}
 800133e:	8811      	ldrh	r1, [r2, #0]
 8001340:	8019      	strh	r1, [r3, #0]
 8001342:	7892      	ldrb	r2, [r2, #2]
 8001344:	709a      	strb	r2, [r3, #2]
 8001346:	e06f      	b.n	8001428 <main+0x374>
	  } else {
		  ret = HAL_I2C_Master_Receive(&hi2c1, ADT_ADDR3, buf3, 2, HAL_MAX_DELAY);
 8001348:	2394      	movs	r3, #148	; 0x94
 800134a:	b299      	uxth	r1, r3
 800134c:	25c5      	movs	r5, #197	; 0xc5
 800134e:	197c      	adds	r4, r7, r5
 8001350:	2630      	movs	r6, #48	; 0x30
 8001352:	19ba      	adds	r2, r7, r6
 8001354:	4843      	ldr	r0, [pc, #268]	; (8001464 <main+0x3b0>)
 8001356:	2301      	movs	r3, #1
 8001358:	425b      	negs	r3, r3
 800135a:	9300      	str	r3, [sp, #0]
 800135c:	2302      	movs	r3, #2
 800135e:	f000 fff7 	bl	8002350 <HAL_I2C_Master_Receive>
 8001362:	0003      	movs	r3, r0
 8001364:	7023      	strb	r3, [r4, #0]
		  if (ret != HAL_OK) {
 8001366:	197b      	adds	r3, r7, r5
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d008      	beq.n	8001380 <main+0x2cc>
				  strcpy((char*)buf3, "Error Rx\r\n");
 800136e:	19bb      	adds	r3, r7, r6
 8001370:	4a3e      	ldr	r2, [pc, #248]	; (800146c <main+0x3b8>)
 8001372:	ca03      	ldmia	r2!, {r0, r1}
 8001374:	c303      	stmia	r3!, {r0, r1}
 8001376:	8811      	ldrh	r1, [r2, #0]
 8001378:	8019      	strh	r1, [r3, #0]
 800137a:	7892      	ldrb	r2, [r2, #2]
 800137c:	709a      	strb	r2, [r3, #2]
 800137e:	e053      	b.n	8001428 <main+0x374>
		  } else {
			  val = ((int16_t)buf3[0] << 4 | buf3[1] >> 4);
 8001380:	2230      	movs	r2, #48	; 0x30
 8001382:	18bb      	adds	r3, r7, r2
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	011b      	lsls	r3, r3, #4
 8001388:	b219      	sxth	r1, r3
 800138a:	18bb      	adds	r3, r7, r2
 800138c:	785b      	ldrb	r3, [r3, #1]
 800138e:	091b      	lsrs	r3, r3, #4
 8001390:	b2db      	uxtb	r3, r3
 8001392:	b21a      	sxth	r2, r3
 8001394:	20c6      	movs	r0, #198	; 0xc6
 8001396:	183b      	adds	r3, r7, r0
 8001398:	430a      	orrs	r2, r1
 800139a:	801a      	strh	r2, [r3, #0]

			  if (val > 0x7FF) {
 800139c:	0001      	movs	r1, r0
 800139e:	187b      	adds	r3, r7, r1
 80013a0:	2200      	movs	r2, #0
 80013a2:	5e9a      	ldrsh	r2, [r3, r2]
 80013a4:	2380      	movs	r3, #128	; 0x80
 80013a6:	011b      	lsls	r3, r3, #4
 80013a8:	429a      	cmp	r2, r3
 80013aa:	db05      	blt.n	80013b8 <main+0x304>
				  val |= 0xF000;
 80013ac:	187b      	adds	r3, r7, r1
 80013ae:	187a      	adds	r2, r7, r1
 80013b0:	8812      	ldrh	r2, [r2, #0]
 80013b2:	492f      	ldr	r1, [pc, #188]	; (8001470 <main+0x3bc>)
 80013b4:	430a      	orrs	r2, r1
 80013b6:	801a      	strh	r2, [r3, #0]
			  }

			  temp_c = val * 0.0625;
 80013b8:	23c6      	movs	r3, #198	; 0xc6
 80013ba:	18fb      	adds	r3, r7, r3
 80013bc:	2200      	movs	r2, #0
 80013be:	5e9b      	ldrsh	r3, [r3, r2]
 80013c0:	0018      	movs	r0, r3
 80013c2:	f7ff fcb7 	bl	8000d34 <__aeabi_i2d>
 80013c6:	2200      	movs	r2, #0
 80013c8:	4b2a      	ldr	r3, [pc, #168]	; (8001474 <main+0x3c0>)
 80013ca:	f7ff fa47 	bl	800085c <__aeabi_dmul>
 80013ce:	0002      	movs	r2, r0
 80013d0:	000b      	movs	r3, r1
 80013d2:	0010      	movs	r0, r2
 80013d4:	0019      	movs	r1, r3
 80013d6:	f7ff fcdd 	bl	8000d94 <__aeabi_d2f>
 80013da:	1c03      	adds	r3, r0, #0
 80013dc:	25c0      	movs	r5, #192	; 0xc0
 80013de:	197a      	adds	r2, r7, r5
 80013e0:	6013      	str	r3, [r2, #0]

			  temp_c *= 100;
 80013e2:	4925      	ldr	r1, [pc, #148]	; (8001478 <main+0x3c4>)
 80013e4:	197b      	adds	r3, r7, r5
 80013e6:	6818      	ldr	r0, [r3, #0]
 80013e8:	f7fe ff44 	bl	8000274 <__aeabi_fmul>
 80013ec:	1c03      	adds	r3, r0, #0
 80013ee:	197a      	adds	r2, r7, r5
 80013f0:	6013      	str	r3, [r2, #0]
			  sprintf((char*)buf3, " | 3: %u.%02uC |\r\n",
					  ((unsigned int)temp_c / 100),
 80013f2:	197b      	adds	r3, r7, r5
 80013f4:	6818      	ldr	r0, [r3, #0]
 80013f6:	f7fe ff25 	bl	8000244 <__aeabi_f2uiz>
 80013fa:	0003      	movs	r3, r0
			  sprintf((char*)buf3, " | 3: %u.%02uC |\r\n",
 80013fc:	2164      	movs	r1, #100	; 0x64
 80013fe:	0018      	movs	r0, r3
 8001400:	f7fe fe94 	bl	800012c <__udivsi3>
 8001404:	0003      	movs	r3, r0
 8001406:	001c      	movs	r4, r3
					  ((unsigned int)temp_c %100));
 8001408:	197b      	adds	r3, r7, r5
 800140a:	6818      	ldr	r0, [r3, #0]
 800140c:	f7fe ff1a 	bl	8000244 <__aeabi_f2uiz>
 8001410:	0003      	movs	r3, r0
			  sprintf((char*)buf3, " | 3: %u.%02uC |\r\n",
 8001412:	2164      	movs	r1, #100	; 0x64
 8001414:	0018      	movs	r0, r3
 8001416:	f7fe ff0f 	bl	8000238 <__aeabi_uidivmod>
 800141a:	000b      	movs	r3, r1
 800141c:	4919      	ldr	r1, [pc, #100]	; (8001484 <main+0x3d0>)
 800141e:	2230      	movs	r2, #48	; 0x30
 8001420:	18b8      	adds	r0, r7, r2
 8001422:	0022      	movs	r2, r4
 8001424:	f002 fde2 	bl	8003fec <siprintf>
		  }
	  }

	  /* SENSOR 4 CODE */
	  buf4[0] = REG_TEMP;
 8001428:	2200      	movs	r2, #0
 800142a:	003b      	movs	r3, r7
 800142c:	701a      	strb	r2, [r3, #0]
	  ret = HAL_I2C_Master_Transmit(&hi2c1, ADT_ADDR4, buf4, 1, HAL_MAX_DELAY);
 800142e:	2396      	movs	r3, #150	; 0x96
 8001430:	b299      	uxth	r1, r3
 8001432:	25c5      	movs	r5, #197	; 0xc5
 8001434:	197c      	adds	r4, r7, r5
 8001436:	003a      	movs	r2, r7
 8001438:	480a      	ldr	r0, [pc, #40]	; (8001464 <main+0x3b0>)
 800143a:	2301      	movs	r3, #1
 800143c:	425b      	negs	r3, r3
 800143e:	9300      	str	r3, [sp, #0]
 8001440:	2301      	movs	r3, #1
 8001442:	f000 fe5b 	bl	80020fc <HAL_I2C_Master_Transmit>
 8001446:	0003      	movs	r3, r0
 8001448:	7023      	strb	r3, [r4, #0]
	  if (ret != HAL_OK) {
 800144a:	197b      	adds	r3, r7, r5
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d01a      	beq.n	8001488 <main+0x3d4>
		  strcpy((char*)buf4, "Error Tx\r\n");
 8001452:	003b      	movs	r3, r7
 8001454:	4a04      	ldr	r2, [pc, #16]	; (8001468 <main+0x3b4>)
 8001456:	ca03      	ldmia	r2!, {r0, r1}
 8001458:	c303      	stmia	r3!, {r0, r1}
 800145a:	8811      	ldrh	r1, [r2, #0]
 800145c:	8019      	strh	r1, [r3, #0]
 800145e:	7892      	ldrb	r2, [r2, #2]
 8001460:	709a      	strb	r2, [r3, #2]
 8001462:	e07e      	b.n	8001562 <main+0x4ae>
 8001464:	2000008c 	.word	0x2000008c
 8001468:	080048d8 	.word	0x080048d8
 800146c:	080048e4 	.word	0x080048e4
 8001470:	fffff000 	.word	0xfffff000
 8001474:	3fb00000 	.word	0x3fb00000
 8001478:	42c80000 	.word	0x42c80000
 800147c:	080048f0 	.word	0x080048f0
 8001480:	08004918 	.word	0x08004918
 8001484:	0800492c 	.word	0x0800492c
	  } else {
		  ret = HAL_I2C_Master_Receive(&hi2c1, ADT_ADDR4, buf4, 2, HAL_MAX_DELAY);
 8001488:	2396      	movs	r3, #150	; 0x96
 800148a:	b299      	uxth	r1, r3
 800148c:	25c5      	movs	r5, #197	; 0xc5
 800148e:	197c      	adds	r4, r7, r5
 8001490:	003a      	movs	r2, r7
 8001492:	4850      	ldr	r0, [pc, #320]	; (80015d4 <main+0x520>)
 8001494:	2301      	movs	r3, #1
 8001496:	425b      	negs	r3, r3
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	2302      	movs	r3, #2
 800149c:	f000 ff58 	bl	8002350 <HAL_I2C_Master_Receive>
 80014a0:	0003      	movs	r3, r0
 80014a2:	7023      	strb	r3, [r4, #0]
		  if (ret != HAL_OK) {
 80014a4:	197b      	adds	r3, r7, r5
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d008      	beq.n	80014be <main+0x40a>
				  strcpy((char*)buf4, "Error Rx\r\n");
 80014ac:	003b      	movs	r3, r7
 80014ae:	4a4a      	ldr	r2, [pc, #296]	; (80015d8 <main+0x524>)
 80014b0:	ca03      	ldmia	r2!, {r0, r1}
 80014b2:	c303      	stmia	r3!, {r0, r1}
 80014b4:	8811      	ldrh	r1, [r2, #0]
 80014b6:	8019      	strh	r1, [r3, #0]
 80014b8:	7892      	ldrb	r2, [r2, #2]
 80014ba:	709a      	strb	r2, [r3, #2]
 80014bc:	e051      	b.n	8001562 <main+0x4ae>
		  } else {
			  val = ((int16_t)buf4[0] << 4 | buf4[1] >> 4);
 80014be:	003b      	movs	r3, r7
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	011b      	lsls	r3, r3, #4
 80014c4:	b219      	sxth	r1, r3
 80014c6:	003b      	movs	r3, r7
 80014c8:	785b      	ldrb	r3, [r3, #1]
 80014ca:	091b      	lsrs	r3, r3, #4
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	b21a      	sxth	r2, r3
 80014d0:	20c6      	movs	r0, #198	; 0xc6
 80014d2:	183b      	adds	r3, r7, r0
 80014d4:	430a      	orrs	r2, r1
 80014d6:	801a      	strh	r2, [r3, #0]

			  if (val > 0x7FF) {
 80014d8:	0001      	movs	r1, r0
 80014da:	187b      	adds	r3, r7, r1
 80014dc:	2200      	movs	r2, #0
 80014de:	5e9a      	ldrsh	r2, [r3, r2]
 80014e0:	2380      	movs	r3, #128	; 0x80
 80014e2:	011b      	lsls	r3, r3, #4
 80014e4:	429a      	cmp	r2, r3
 80014e6:	db05      	blt.n	80014f4 <main+0x440>
				  val |= 0xF000;
 80014e8:	187b      	adds	r3, r7, r1
 80014ea:	187a      	adds	r2, r7, r1
 80014ec:	8812      	ldrh	r2, [r2, #0]
 80014ee:	493b      	ldr	r1, [pc, #236]	; (80015dc <main+0x528>)
 80014f0:	430a      	orrs	r2, r1
 80014f2:	801a      	strh	r2, [r3, #0]
			  }

			  temp_c = val * 0.0625;
 80014f4:	23c6      	movs	r3, #198	; 0xc6
 80014f6:	18fb      	adds	r3, r7, r3
 80014f8:	2200      	movs	r2, #0
 80014fa:	5e9b      	ldrsh	r3, [r3, r2]
 80014fc:	0018      	movs	r0, r3
 80014fe:	f7ff fc19 	bl	8000d34 <__aeabi_i2d>
 8001502:	2200      	movs	r2, #0
 8001504:	4b36      	ldr	r3, [pc, #216]	; (80015e0 <main+0x52c>)
 8001506:	f7ff f9a9 	bl	800085c <__aeabi_dmul>
 800150a:	0002      	movs	r2, r0
 800150c:	000b      	movs	r3, r1
 800150e:	0010      	movs	r0, r2
 8001510:	0019      	movs	r1, r3
 8001512:	f7ff fc3f 	bl	8000d94 <__aeabi_d2f>
 8001516:	1c03      	adds	r3, r0, #0
 8001518:	25c0      	movs	r5, #192	; 0xc0
 800151a:	197a      	adds	r2, r7, r5
 800151c:	6013      	str	r3, [r2, #0]

			  temp_c *= 100;
 800151e:	4931      	ldr	r1, [pc, #196]	; (80015e4 <main+0x530>)
 8001520:	197b      	adds	r3, r7, r5
 8001522:	6818      	ldr	r0, [r3, #0]
 8001524:	f7fe fea6 	bl	8000274 <__aeabi_fmul>
 8001528:	1c03      	adds	r3, r0, #0
 800152a:	197a      	adds	r2, r7, r5
 800152c:	6013      	str	r3, [r2, #0]
			  sprintf((char*)buf4, " | 4: %u.%02uC |\r\n\r\n",
					  ((unsigned int)temp_c / 100),
 800152e:	197b      	adds	r3, r7, r5
 8001530:	6818      	ldr	r0, [r3, #0]
 8001532:	f7fe fe87 	bl	8000244 <__aeabi_f2uiz>
 8001536:	0003      	movs	r3, r0
			  sprintf((char*)buf4, " | 4: %u.%02uC |\r\n\r\n",
 8001538:	2164      	movs	r1, #100	; 0x64
 800153a:	0018      	movs	r0, r3
 800153c:	f7fe fdf6 	bl	800012c <__udivsi3>
 8001540:	0003      	movs	r3, r0
 8001542:	001c      	movs	r4, r3
					  ((unsigned int)temp_c %100));
 8001544:	197b      	adds	r3, r7, r5
 8001546:	6818      	ldr	r0, [r3, #0]
 8001548:	f7fe fe7c 	bl	8000244 <__aeabi_f2uiz>
 800154c:	0003      	movs	r3, r0
			  sprintf((char*)buf4, " | 4: %u.%02uC |\r\n\r\n",
 800154e:	2164      	movs	r1, #100	; 0x64
 8001550:	0018      	movs	r0, r3
 8001552:	f7fe fe71 	bl	8000238 <__aeabi_uidivmod>
 8001556:	000b      	movs	r3, r1
 8001558:	4923      	ldr	r1, [pc, #140]	; (80015e8 <main+0x534>)
 800155a:	0038      	movs	r0, r7
 800155c:	0022      	movs	r2, r4
 800155e:	f002 fd45 	bl	8003fec <siprintf>
	  }

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Transmit(&huart1, buf1, strlen((char*)buf1), HAL_MAX_DELAY);
 8001562:	2490      	movs	r4, #144	; 0x90
 8001564:	193b      	adds	r3, r7, r4
 8001566:	0018      	movs	r0, r3
 8001568:	f7fe fdce 	bl	8000108 <strlen>
 800156c:	0003      	movs	r3, r0
 800156e:	b29a      	uxth	r2, r3
 8001570:	2301      	movs	r3, #1
 8001572:	425b      	negs	r3, r3
 8001574:	1939      	adds	r1, r7, r4
 8001576:	481d      	ldr	r0, [pc, #116]	; (80015ec <main+0x538>)
 8001578:	f002 f8f6 	bl	8003768 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, buf2, strlen((char*)buf2), HAL_MAX_DELAY);
 800157c:	2460      	movs	r4, #96	; 0x60
 800157e:	193b      	adds	r3, r7, r4
 8001580:	0018      	movs	r0, r3
 8001582:	f7fe fdc1 	bl	8000108 <strlen>
 8001586:	0003      	movs	r3, r0
 8001588:	b29a      	uxth	r2, r3
 800158a:	2301      	movs	r3, #1
 800158c:	425b      	negs	r3, r3
 800158e:	1939      	adds	r1, r7, r4
 8001590:	4816      	ldr	r0, [pc, #88]	; (80015ec <main+0x538>)
 8001592:	f002 f8e9 	bl	8003768 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, buf3, strlen((char*)buf3), HAL_MAX_DELAY);
 8001596:	2430      	movs	r4, #48	; 0x30
 8001598:	193b      	adds	r3, r7, r4
 800159a:	0018      	movs	r0, r3
 800159c:	f7fe fdb4 	bl	8000108 <strlen>
 80015a0:	0003      	movs	r3, r0
 80015a2:	b29a      	uxth	r2, r3
 80015a4:	2301      	movs	r3, #1
 80015a6:	425b      	negs	r3, r3
 80015a8:	1939      	adds	r1, r7, r4
 80015aa:	4810      	ldr	r0, [pc, #64]	; (80015ec <main+0x538>)
 80015ac:	f002 f8dc 	bl	8003768 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, buf4, strlen((char*)buf4), HAL_MAX_DELAY);
 80015b0:	003b      	movs	r3, r7
 80015b2:	0018      	movs	r0, r3
 80015b4:	f7fe fda8 	bl	8000108 <strlen>
 80015b8:	0003      	movs	r3, r0
 80015ba:	b29a      	uxth	r2, r3
 80015bc:	2301      	movs	r3, #1
 80015be:	425b      	negs	r3, r3
 80015c0:	0039      	movs	r1, r7
 80015c2:	480a      	ldr	r0, [pc, #40]	; (80015ec <main+0x538>)
 80015c4:	f002 f8d0 	bl	8003768 <HAL_UART_Transmit>
	  HAL_Delay(500);
 80015c8:	23fa      	movs	r3, #250	; 0xfa
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	0018      	movs	r0, r3
 80015ce:	f000 faa7 	bl	8001b20 <HAL_Delay>
	  buf1[0] = REG_TEMP;
 80015d2:	e57c      	b.n	80010ce <main+0x1a>
 80015d4:	2000008c 	.word	0x2000008c
 80015d8:	080048e4 	.word	0x080048e4
 80015dc:	fffff000 	.word	0xfffff000
 80015e0:	3fb00000 	.word	0x3fb00000
 80015e4:	42c80000 	.word	0x42c80000
 80015e8:	08004940 	.word	0x08004940
 80015ec:	200000e0 	.word	0x200000e0

080015f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015f0:	b590      	push	{r4, r7, lr}
 80015f2:	b097      	sub	sp, #92	; 0x5c
 80015f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015f6:	2428      	movs	r4, #40	; 0x28
 80015f8:	193b      	adds	r3, r7, r4
 80015fa:	0018      	movs	r0, r3
 80015fc:	2330      	movs	r3, #48	; 0x30
 80015fe:	001a      	movs	r2, r3
 8001600:	2100      	movs	r1, #0
 8001602:	f002 fceb 	bl	8003fdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001606:	2318      	movs	r3, #24
 8001608:	18fb      	adds	r3, r7, r3
 800160a:	0018      	movs	r0, r3
 800160c:	2310      	movs	r3, #16
 800160e:	001a      	movs	r2, r3
 8001610:	2100      	movs	r1, #0
 8001612:	f002 fce3 	bl	8003fdc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001616:	1d3b      	adds	r3, r7, #4
 8001618:	0018      	movs	r0, r3
 800161a:	2314      	movs	r3, #20
 800161c:	001a      	movs	r2, r3
 800161e:	2100      	movs	r1, #0
 8001620:	f002 fcdc 	bl	8003fdc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001624:	0021      	movs	r1, r4
 8001626:	187b      	adds	r3, r7, r1
 8001628:	2202      	movs	r2, #2
 800162a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800162c:	187b      	adds	r3, r7, r1
 800162e:	2201      	movs	r2, #1
 8001630:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001632:	187b      	adds	r3, r7, r1
 8001634:	2210      	movs	r2, #16
 8001636:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001638:	187b      	adds	r3, r7, r1
 800163a:	2200      	movs	r2, #0
 800163c:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800163e:	187b      	adds	r3, r7, r1
 8001640:	0018      	movs	r0, r3
 8001642:	f001 fb01 	bl	8002c48 <HAL_RCC_OscConfig>
 8001646:	1e03      	subs	r3, r0, #0
 8001648:	d001      	beq.n	800164e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800164a:	f000 f8c1 	bl	80017d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800164e:	2118      	movs	r1, #24
 8001650:	187b      	adds	r3, r7, r1
 8001652:	2207      	movs	r2, #7
 8001654:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001656:	187b      	adds	r3, r7, r1
 8001658:	2200      	movs	r2, #0
 800165a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800165c:	187b      	adds	r3, r7, r1
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001662:	187b      	adds	r3, r7, r1
 8001664:	2200      	movs	r2, #0
 8001666:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001668:	187b      	adds	r3, r7, r1
 800166a:	2100      	movs	r1, #0
 800166c:	0018      	movs	r0, r3
 800166e:	f001 fe05 	bl	800327c <HAL_RCC_ClockConfig>
 8001672:	1e03      	subs	r3, r0, #0
 8001674:	d001      	beq.n	800167a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001676:	f000 f8ab 	bl	80017d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 800167a:	1d3b      	adds	r3, r7, #4
 800167c:	2221      	movs	r2, #33	; 0x21
 800167e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001680:	1d3b      	adds	r3, r7, #4
 8001682:	2200      	movs	r2, #0
 8001684:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001686:	1d3b      	adds	r3, r7, #4
 8001688:	2200      	movs	r2, #0
 800168a:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800168c:	1d3b      	adds	r3, r7, #4
 800168e:	0018      	movs	r0, r3
 8001690:	f001 ff38 	bl	8003504 <HAL_RCCEx_PeriphCLKConfig>
 8001694:	1e03      	subs	r3, r0, #0
 8001696:	d001      	beq.n	800169c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001698:	f000 f89a 	bl	80017d0 <Error_Handler>
  }
}
 800169c:	46c0      	nop			; (mov r8, r8)
 800169e:	46bd      	mov	sp, r7
 80016a0:	b017      	add	sp, #92	; 0x5c
 80016a2:	bd90      	pop	{r4, r7, pc}

080016a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016a8:	4b1b      	ldr	r3, [pc, #108]	; (8001718 <MX_I2C1_Init+0x74>)
 80016aa:	4a1c      	ldr	r2, [pc, #112]	; (800171c <MX_I2C1_Init+0x78>)
 80016ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80016ae:	4b1a      	ldr	r3, [pc, #104]	; (8001718 <MX_I2C1_Init+0x74>)
 80016b0:	4a1b      	ldr	r2, [pc, #108]	; (8001720 <MX_I2C1_Init+0x7c>)
 80016b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80016b4:	4b18      	ldr	r3, [pc, #96]	; (8001718 <MX_I2C1_Init+0x74>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016ba:	4b17      	ldr	r3, [pc, #92]	; (8001718 <MX_I2C1_Init+0x74>)
 80016bc:	2201      	movs	r2, #1
 80016be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016c0:	4b15      	ldr	r3, [pc, #84]	; (8001718 <MX_I2C1_Init+0x74>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80016c6:	4b14      	ldr	r3, [pc, #80]	; (8001718 <MX_I2C1_Init+0x74>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016cc:	4b12      	ldr	r3, [pc, #72]	; (8001718 <MX_I2C1_Init+0x74>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016d2:	4b11      	ldr	r3, [pc, #68]	; (8001718 <MX_I2C1_Init+0x74>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016d8:	4b0f      	ldr	r3, [pc, #60]	; (8001718 <MX_I2C1_Init+0x74>)
 80016da:	2200      	movs	r2, #0
 80016dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016de:	4b0e      	ldr	r3, [pc, #56]	; (8001718 <MX_I2C1_Init+0x74>)
 80016e0:	0018      	movs	r0, r3
 80016e2:	f000 fc65 	bl	8001fb0 <HAL_I2C_Init>
 80016e6:	1e03      	subs	r3, r0, #0
 80016e8:	d001      	beq.n	80016ee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80016ea:	f000 f871 	bl	80017d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016ee:	4b0a      	ldr	r3, [pc, #40]	; (8001718 <MX_I2C1_Init+0x74>)
 80016f0:	2100      	movs	r1, #0
 80016f2:	0018      	movs	r0, r3
 80016f4:	f001 fa10 	bl	8002b18 <HAL_I2CEx_ConfigAnalogFilter>
 80016f8:	1e03      	subs	r3, r0, #0
 80016fa:	d001      	beq.n	8001700 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80016fc:	f000 f868 	bl	80017d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001700:	4b05      	ldr	r3, [pc, #20]	; (8001718 <MX_I2C1_Init+0x74>)
 8001702:	2100      	movs	r1, #0
 8001704:	0018      	movs	r0, r3
 8001706:	f001 fa53 	bl	8002bb0 <HAL_I2CEx_ConfigDigitalFilter>
 800170a:	1e03      	subs	r3, r0, #0
 800170c:	d001      	beq.n	8001712 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800170e:	f000 f85f 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001712:	46c0      	nop			; (mov r8, r8)
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	2000008c 	.word	0x2000008c
 800171c:	40005400 	.word	0x40005400
 8001720:	2000090e 	.word	0x2000090e

08001724 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001728:	4b14      	ldr	r3, [pc, #80]	; (800177c <MX_USART1_UART_Init+0x58>)
 800172a:	4a15      	ldr	r2, [pc, #84]	; (8001780 <MX_USART1_UART_Init+0x5c>)
 800172c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800172e:	4b13      	ldr	r3, [pc, #76]	; (800177c <MX_USART1_UART_Init+0x58>)
 8001730:	22e1      	movs	r2, #225	; 0xe1
 8001732:	0252      	lsls	r2, r2, #9
 8001734:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001736:	4b11      	ldr	r3, [pc, #68]	; (800177c <MX_USART1_UART_Init+0x58>)
 8001738:	2200      	movs	r2, #0
 800173a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800173c:	4b0f      	ldr	r3, [pc, #60]	; (800177c <MX_USART1_UART_Init+0x58>)
 800173e:	2200      	movs	r2, #0
 8001740:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001742:	4b0e      	ldr	r3, [pc, #56]	; (800177c <MX_USART1_UART_Init+0x58>)
 8001744:	2200      	movs	r2, #0
 8001746:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001748:	4b0c      	ldr	r3, [pc, #48]	; (800177c <MX_USART1_UART_Init+0x58>)
 800174a:	220c      	movs	r2, #12
 800174c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800174e:	4b0b      	ldr	r3, [pc, #44]	; (800177c <MX_USART1_UART_Init+0x58>)
 8001750:	2200      	movs	r2, #0
 8001752:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001754:	4b09      	ldr	r3, [pc, #36]	; (800177c <MX_USART1_UART_Init+0x58>)
 8001756:	2200      	movs	r2, #0
 8001758:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800175a:	4b08      	ldr	r3, [pc, #32]	; (800177c <MX_USART1_UART_Init+0x58>)
 800175c:	2200      	movs	r2, #0
 800175e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <MX_USART1_UART_Init+0x58>)
 8001762:	2200      	movs	r2, #0
 8001764:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001766:	4b05      	ldr	r3, [pc, #20]	; (800177c <MX_USART1_UART_Init+0x58>)
 8001768:	0018      	movs	r0, r3
 800176a:	f001 ffa9 	bl	80036c0 <HAL_UART_Init>
 800176e:	1e03      	subs	r3, r0, #0
 8001770:	d001      	beq.n	8001776 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001772:	f000 f82d 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001776:	46c0      	nop			; (mov r8, r8)
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	200000e0 	.word	0x200000e0
 8001780:	40013800 	.word	0x40013800

08001784 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800178a:	4b10      	ldr	r3, [pc, #64]	; (80017cc <MX_GPIO_Init+0x48>)
 800178c:	695a      	ldr	r2, [r3, #20]
 800178e:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <MX_GPIO_Init+0x48>)
 8001790:	2180      	movs	r1, #128	; 0x80
 8001792:	0289      	lsls	r1, r1, #10
 8001794:	430a      	orrs	r2, r1
 8001796:	615a      	str	r2, [r3, #20]
 8001798:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <MX_GPIO_Init+0x48>)
 800179a:	695a      	ldr	r2, [r3, #20]
 800179c:	2380      	movs	r3, #128	; 0x80
 800179e:	029b      	lsls	r3, r3, #10
 80017a0:	4013      	ands	r3, r2
 80017a2:	607b      	str	r3, [r7, #4]
 80017a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a6:	4b09      	ldr	r3, [pc, #36]	; (80017cc <MX_GPIO_Init+0x48>)
 80017a8:	695a      	ldr	r2, [r3, #20]
 80017aa:	4b08      	ldr	r3, [pc, #32]	; (80017cc <MX_GPIO_Init+0x48>)
 80017ac:	2180      	movs	r1, #128	; 0x80
 80017ae:	02c9      	lsls	r1, r1, #11
 80017b0:	430a      	orrs	r2, r1
 80017b2:	615a      	str	r2, [r3, #20]
 80017b4:	4b05      	ldr	r3, [pc, #20]	; (80017cc <MX_GPIO_Init+0x48>)
 80017b6:	695a      	ldr	r2, [r3, #20]
 80017b8:	2380      	movs	r3, #128	; 0x80
 80017ba:	02db      	lsls	r3, r3, #11
 80017bc:	4013      	ands	r3, r2
 80017be:	603b      	str	r3, [r7, #0]
 80017c0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017c2:	46c0      	nop			; (mov r8, r8)
 80017c4:	46bd      	mov	sp, r7
 80017c6:	b002      	add	sp, #8
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	46c0      	nop			; (mov r8, r8)
 80017cc:	40021000 	.word	0x40021000

080017d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017d4:	b672      	cpsid	i
}
 80017d6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017d8:	e7fe      	b.n	80017d8 <Error_Handler+0x8>
	...

080017dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e2:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <HAL_MspInit+0x44>)
 80017e4:	699a      	ldr	r2, [r3, #24]
 80017e6:	4b0e      	ldr	r3, [pc, #56]	; (8001820 <HAL_MspInit+0x44>)
 80017e8:	2101      	movs	r1, #1
 80017ea:	430a      	orrs	r2, r1
 80017ec:	619a      	str	r2, [r3, #24]
 80017ee:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <HAL_MspInit+0x44>)
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	2201      	movs	r2, #1
 80017f4:	4013      	ands	r3, r2
 80017f6:	607b      	str	r3, [r7, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017fa:	4b09      	ldr	r3, [pc, #36]	; (8001820 <HAL_MspInit+0x44>)
 80017fc:	69da      	ldr	r2, [r3, #28]
 80017fe:	4b08      	ldr	r3, [pc, #32]	; (8001820 <HAL_MspInit+0x44>)
 8001800:	2180      	movs	r1, #128	; 0x80
 8001802:	0549      	lsls	r1, r1, #21
 8001804:	430a      	orrs	r2, r1
 8001806:	61da      	str	r2, [r3, #28]
 8001808:	4b05      	ldr	r3, [pc, #20]	; (8001820 <HAL_MspInit+0x44>)
 800180a:	69da      	ldr	r2, [r3, #28]
 800180c:	2380      	movs	r3, #128	; 0x80
 800180e:	055b      	lsls	r3, r3, #21
 8001810:	4013      	ands	r3, r2
 8001812:	603b      	str	r3, [r7, #0]
 8001814:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001816:	46c0      	nop			; (mov r8, r8)
 8001818:	46bd      	mov	sp, r7
 800181a:	b002      	add	sp, #8
 800181c:	bd80      	pop	{r7, pc}
 800181e:	46c0      	nop			; (mov r8, r8)
 8001820:	40021000 	.word	0x40021000

08001824 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001824:	b590      	push	{r4, r7, lr}
 8001826:	b08b      	sub	sp, #44	; 0x2c
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182c:	2414      	movs	r4, #20
 800182e:	193b      	adds	r3, r7, r4
 8001830:	0018      	movs	r0, r3
 8001832:	2314      	movs	r3, #20
 8001834:	001a      	movs	r2, r3
 8001836:	2100      	movs	r1, #0
 8001838:	f002 fbd0 	bl	8003fdc <memset>
  if(hi2c->Instance==I2C1)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a1c      	ldr	r2, [pc, #112]	; (80018b4 <HAL_I2C_MspInit+0x90>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d131      	bne.n	80018aa <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001846:	4b1c      	ldr	r3, [pc, #112]	; (80018b8 <HAL_I2C_MspInit+0x94>)
 8001848:	695a      	ldr	r2, [r3, #20]
 800184a:	4b1b      	ldr	r3, [pc, #108]	; (80018b8 <HAL_I2C_MspInit+0x94>)
 800184c:	2180      	movs	r1, #128	; 0x80
 800184e:	02c9      	lsls	r1, r1, #11
 8001850:	430a      	orrs	r2, r1
 8001852:	615a      	str	r2, [r3, #20]
 8001854:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <HAL_I2C_MspInit+0x94>)
 8001856:	695a      	ldr	r2, [r3, #20]
 8001858:	2380      	movs	r3, #128	; 0x80
 800185a:	02db      	lsls	r3, r3, #11
 800185c:	4013      	ands	r3, r2
 800185e:	613b      	str	r3, [r7, #16]
 8001860:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001862:	0021      	movs	r1, r4
 8001864:	187b      	adds	r3, r7, r1
 8001866:	22c0      	movs	r2, #192	; 0xc0
 8001868:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800186a:	187b      	adds	r3, r7, r1
 800186c:	2212      	movs	r2, #18
 800186e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	187b      	adds	r3, r7, r1
 8001872:	2200      	movs	r2, #0
 8001874:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001876:	187b      	adds	r3, r7, r1
 8001878:	2203      	movs	r2, #3
 800187a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800187c:	187b      	adds	r3, r7, r1
 800187e:	2201      	movs	r2, #1
 8001880:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001882:	187b      	adds	r3, r7, r1
 8001884:	4a0d      	ldr	r2, [pc, #52]	; (80018bc <HAL_I2C_MspInit+0x98>)
 8001886:	0019      	movs	r1, r3
 8001888:	0010      	movs	r0, r2
 800188a:	f000 fa21 	bl	8001cd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800188e:	4b0a      	ldr	r3, [pc, #40]	; (80018b8 <HAL_I2C_MspInit+0x94>)
 8001890:	69da      	ldr	r2, [r3, #28]
 8001892:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <HAL_I2C_MspInit+0x94>)
 8001894:	2180      	movs	r1, #128	; 0x80
 8001896:	0389      	lsls	r1, r1, #14
 8001898:	430a      	orrs	r2, r1
 800189a:	61da      	str	r2, [r3, #28]
 800189c:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <HAL_I2C_MspInit+0x94>)
 800189e:	69da      	ldr	r2, [r3, #28]
 80018a0:	2380      	movs	r3, #128	; 0x80
 80018a2:	039b      	lsls	r3, r3, #14
 80018a4:	4013      	ands	r3, r2
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80018aa:	46c0      	nop			; (mov r8, r8)
 80018ac:	46bd      	mov	sp, r7
 80018ae:	b00b      	add	sp, #44	; 0x2c
 80018b0:	bd90      	pop	{r4, r7, pc}
 80018b2:	46c0      	nop			; (mov r8, r8)
 80018b4:	40005400 	.word	0x40005400
 80018b8:	40021000 	.word	0x40021000
 80018bc:	48000400 	.word	0x48000400

080018c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018c0:	b590      	push	{r4, r7, lr}
 80018c2:	b08b      	sub	sp, #44	; 0x2c
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c8:	2414      	movs	r4, #20
 80018ca:	193b      	adds	r3, r7, r4
 80018cc:	0018      	movs	r0, r3
 80018ce:	2314      	movs	r3, #20
 80018d0:	001a      	movs	r2, r3
 80018d2:	2100      	movs	r1, #0
 80018d4:	f002 fb82 	bl	8003fdc <memset>
  if(huart->Instance==USART1)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a1d      	ldr	r2, [pc, #116]	; (8001954 <HAL_UART_MspInit+0x94>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d133      	bne.n	800194a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018e2:	4b1d      	ldr	r3, [pc, #116]	; (8001958 <HAL_UART_MspInit+0x98>)
 80018e4:	699a      	ldr	r2, [r3, #24]
 80018e6:	4b1c      	ldr	r3, [pc, #112]	; (8001958 <HAL_UART_MspInit+0x98>)
 80018e8:	2180      	movs	r1, #128	; 0x80
 80018ea:	01c9      	lsls	r1, r1, #7
 80018ec:	430a      	orrs	r2, r1
 80018ee:	619a      	str	r2, [r3, #24]
 80018f0:	4b19      	ldr	r3, [pc, #100]	; (8001958 <HAL_UART_MspInit+0x98>)
 80018f2:	699a      	ldr	r2, [r3, #24]
 80018f4:	2380      	movs	r3, #128	; 0x80
 80018f6:	01db      	lsls	r3, r3, #7
 80018f8:	4013      	ands	r3, r2
 80018fa:	613b      	str	r3, [r7, #16]
 80018fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fe:	4b16      	ldr	r3, [pc, #88]	; (8001958 <HAL_UART_MspInit+0x98>)
 8001900:	695a      	ldr	r2, [r3, #20]
 8001902:	4b15      	ldr	r3, [pc, #84]	; (8001958 <HAL_UART_MspInit+0x98>)
 8001904:	2180      	movs	r1, #128	; 0x80
 8001906:	0289      	lsls	r1, r1, #10
 8001908:	430a      	orrs	r2, r1
 800190a:	615a      	str	r2, [r3, #20]
 800190c:	4b12      	ldr	r3, [pc, #72]	; (8001958 <HAL_UART_MspInit+0x98>)
 800190e:	695a      	ldr	r2, [r3, #20]
 8001910:	2380      	movs	r3, #128	; 0x80
 8001912:	029b      	lsls	r3, r3, #10
 8001914:	4013      	ands	r3, r2
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800191a:	193b      	adds	r3, r7, r4
 800191c:	22c0      	movs	r2, #192	; 0xc0
 800191e:	00d2      	lsls	r2, r2, #3
 8001920:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001922:	0021      	movs	r1, r4
 8001924:	187b      	adds	r3, r7, r1
 8001926:	2202      	movs	r2, #2
 8001928:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192a:	187b      	adds	r3, r7, r1
 800192c:	2200      	movs	r2, #0
 800192e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001930:	187b      	adds	r3, r7, r1
 8001932:	2203      	movs	r2, #3
 8001934:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001936:	187b      	adds	r3, r7, r1
 8001938:	2201      	movs	r2, #1
 800193a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800193c:	187a      	adds	r2, r7, r1
 800193e:	2390      	movs	r3, #144	; 0x90
 8001940:	05db      	lsls	r3, r3, #23
 8001942:	0011      	movs	r1, r2
 8001944:	0018      	movs	r0, r3
 8001946:	f000 f9c3 	bl	8001cd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800194a:	46c0      	nop			; (mov r8, r8)
 800194c:	46bd      	mov	sp, r7
 800194e:	b00b      	add	sp, #44	; 0x2c
 8001950:	bd90      	pop	{r4, r7, pc}
 8001952:	46c0      	nop			; (mov r8, r8)
 8001954:	40013800 	.word	0x40013800
 8001958:	40021000 	.word	0x40021000

0800195c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001960:	e7fe      	b.n	8001960 <NMI_Handler+0x4>

08001962 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001966:	e7fe      	b.n	8001966 <HardFault_Handler+0x4>

08001968 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800196c:	46c0      	nop			; (mov r8, r8)
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001976:	46c0      	nop			; (mov r8, r8)
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001980:	f000 f8b2 	bl	8001ae8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001984:	46c0      	nop			; (mov r8, r8)
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
	...

0800198c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001994:	4a14      	ldr	r2, [pc, #80]	; (80019e8 <_sbrk+0x5c>)
 8001996:	4b15      	ldr	r3, [pc, #84]	; (80019ec <_sbrk+0x60>)
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019a0:	4b13      	ldr	r3, [pc, #76]	; (80019f0 <_sbrk+0x64>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d102      	bne.n	80019ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019a8:	4b11      	ldr	r3, [pc, #68]	; (80019f0 <_sbrk+0x64>)
 80019aa:	4a12      	ldr	r2, [pc, #72]	; (80019f4 <_sbrk+0x68>)
 80019ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ae:	4b10      	ldr	r3, [pc, #64]	; (80019f0 <_sbrk+0x64>)
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	18d3      	adds	r3, r2, r3
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d207      	bcs.n	80019cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019bc:	f002 fae4 	bl	8003f88 <__errno>
 80019c0:	0003      	movs	r3, r0
 80019c2:	220c      	movs	r2, #12
 80019c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019c6:	2301      	movs	r3, #1
 80019c8:	425b      	negs	r3, r3
 80019ca:	e009      	b.n	80019e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019cc:	4b08      	ldr	r3, [pc, #32]	; (80019f0 <_sbrk+0x64>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019d2:	4b07      	ldr	r3, [pc, #28]	; (80019f0 <_sbrk+0x64>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	18d2      	adds	r2, r2, r3
 80019da:	4b05      	ldr	r3, [pc, #20]	; (80019f0 <_sbrk+0x64>)
 80019dc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80019de:	68fb      	ldr	r3, [r7, #12]
}
 80019e0:	0018      	movs	r0, r3
 80019e2:	46bd      	mov	sp, r7
 80019e4:	b006      	add	sp, #24
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20002000 	.word	0x20002000
 80019ec:	00000400 	.word	0x00000400
 80019f0:	20000168 	.word	0x20000168
 80019f4:	20000180 	.word	0x20000180

080019f8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80019fc:	46c0      	nop			; (mov r8, r8)
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
	...

08001a04 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a04:	480d      	ldr	r0, [pc, #52]	; (8001a3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a06:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 8001a08:	f7ff fff6 	bl	80019f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a0c:	480c      	ldr	r0, [pc, #48]	; (8001a40 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a0e:	490d      	ldr	r1, [pc, #52]	; (8001a44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a10:	4a0d      	ldr	r2, [pc, #52]	; (8001a48 <LoopForever+0xe>)
  movs r3, #0
 8001a12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a14:	e002      	b.n	8001a1c <LoopCopyDataInit>

08001a16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a1a:	3304      	adds	r3, #4

08001a1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a20:	d3f9      	bcc.n	8001a16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a22:	4a0a      	ldr	r2, [pc, #40]	; (8001a4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a24:	4c0a      	ldr	r4, [pc, #40]	; (8001a50 <LoopForever+0x16>)
  movs r3, #0
 8001a26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a28:	e001      	b.n	8001a2e <LoopFillZerobss>

08001a2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a2c:	3204      	adds	r2, #4

08001a2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a30:	d3fb      	bcc.n	8001a2a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001a32:	f002 faaf 	bl	8003f94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a36:	f7ff fb3d 	bl	80010b4 <main>

08001a3a <LoopForever>:

LoopForever:
    b LoopForever
 8001a3a:	e7fe      	b.n	8001a3a <LoopForever>
  ldr   r0, =_estack
 8001a3c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001a40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a44:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001a48:	08004a4c 	.word	0x08004a4c
  ldr r2, =_sbss
 8001a4c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001a50:	20000180 	.word	0x20000180

08001a54 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a54:	e7fe      	b.n	8001a54 <ADC1_COMP_IRQHandler>
	...

08001a58 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a5c:	4b07      	ldr	r3, [pc, #28]	; (8001a7c <HAL_Init+0x24>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <HAL_Init+0x24>)
 8001a62:	2110      	movs	r1, #16
 8001a64:	430a      	orrs	r2, r1
 8001a66:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001a68:	2003      	movs	r0, #3
 8001a6a:	f000 f809 	bl	8001a80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a6e:	f7ff feb5 	bl	80017dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	0018      	movs	r0, r3
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	46c0      	nop			; (mov r8, r8)
 8001a7c:	40022000 	.word	0x40022000

08001a80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a80:	b590      	push	{r4, r7, lr}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a88:	4b14      	ldr	r3, [pc, #80]	; (8001adc <HAL_InitTick+0x5c>)
 8001a8a:	681c      	ldr	r4, [r3, #0]
 8001a8c:	4b14      	ldr	r3, [pc, #80]	; (8001ae0 <HAL_InitTick+0x60>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	0019      	movs	r1, r3
 8001a92:	23fa      	movs	r3, #250	; 0xfa
 8001a94:	0098      	lsls	r0, r3, #2
 8001a96:	f7fe fb49 	bl	800012c <__udivsi3>
 8001a9a:	0003      	movs	r3, r0
 8001a9c:	0019      	movs	r1, r3
 8001a9e:	0020      	movs	r0, r4
 8001aa0:	f7fe fb44 	bl	800012c <__udivsi3>
 8001aa4:	0003      	movs	r3, r0
 8001aa6:	0018      	movs	r0, r3
 8001aa8:	f000 f905 	bl	8001cb6 <HAL_SYSTICK_Config>
 8001aac:	1e03      	subs	r3, r0, #0
 8001aae:	d001      	beq.n	8001ab4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e00f      	b.n	8001ad4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2b03      	cmp	r3, #3
 8001ab8:	d80b      	bhi.n	8001ad2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aba:	6879      	ldr	r1, [r7, #4]
 8001abc:	2301      	movs	r3, #1
 8001abe:	425b      	negs	r3, r3
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	0018      	movs	r0, r3
 8001ac4:	f000 f8e2 	bl	8001c8c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ac8:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <HAL_InitTick+0x64>)
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	e000      	b.n	8001ad4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
}
 8001ad4:	0018      	movs	r0, r3
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	b003      	add	sp, #12
 8001ada:	bd90      	pop	{r4, r7, pc}
 8001adc:	20000000 	.word	0x20000000
 8001ae0:	20000008 	.word	0x20000008
 8001ae4:	20000004 	.word	0x20000004

08001ae8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aec:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <HAL_IncTick+0x1c>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	001a      	movs	r2, r3
 8001af2:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <HAL_IncTick+0x20>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	18d2      	adds	r2, r2, r3
 8001af8:	4b03      	ldr	r3, [pc, #12]	; (8001b08 <HAL_IncTick+0x20>)
 8001afa:	601a      	str	r2, [r3, #0]
}
 8001afc:	46c0      	nop			; (mov r8, r8)
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	46c0      	nop			; (mov r8, r8)
 8001b04:	20000008 	.word	0x20000008
 8001b08:	2000016c 	.word	0x2000016c

08001b0c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b10:	4b02      	ldr	r3, [pc, #8]	; (8001b1c <HAL_GetTick+0x10>)
 8001b12:	681b      	ldr	r3, [r3, #0]
}
 8001b14:	0018      	movs	r0, r3
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	46c0      	nop			; (mov r8, r8)
 8001b1c:	2000016c 	.word	0x2000016c

08001b20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b28:	f7ff fff0 	bl	8001b0c <HAL_GetTick>
 8001b2c:	0003      	movs	r3, r0
 8001b2e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	3301      	adds	r3, #1
 8001b38:	d005      	beq.n	8001b46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b3a:	4b0a      	ldr	r3, [pc, #40]	; (8001b64 <HAL_Delay+0x44>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	001a      	movs	r2, r3
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	189b      	adds	r3, r3, r2
 8001b44:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001b46:	46c0      	nop			; (mov r8, r8)
 8001b48:	f7ff ffe0 	bl	8001b0c <HAL_GetTick>
 8001b4c:	0002      	movs	r2, r0
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	68fa      	ldr	r2, [r7, #12]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d8f7      	bhi.n	8001b48 <HAL_Delay+0x28>
  {
  }
}
 8001b58:	46c0      	nop			; (mov r8, r8)
 8001b5a:	46c0      	nop			; (mov r8, r8)
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	b004      	add	sp, #16
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	46c0      	nop			; (mov r8, r8)
 8001b64:	20000008 	.word	0x20000008

08001b68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b68:	b590      	push	{r4, r7, lr}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	0002      	movs	r2, r0
 8001b70:	6039      	str	r1, [r7, #0]
 8001b72:	1dfb      	adds	r3, r7, #7
 8001b74:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b76:	1dfb      	adds	r3, r7, #7
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b7f      	cmp	r3, #127	; 0x7f
 8001b7c:	d828      	bhi.n	8001bd0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b7e:	4a2f      	ldr	r2, [pc, #188]	; (8001c3c <__NVIC_SetPriority+0xd4>)
 8001b80:	1dfb      	adds	r3, r7, #7
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	b25b      	sxtb	r3, r3
 8001b86:	089b      	lsrs	r3, r3, #2
 8001b88:	33c0      	adds	r3, #192	; 0xc0
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	589b      	ldr	r3, [r3, r2]
 8001b8e:	1dfa      	adds	r2, r7, #7
 8001b90:	7812      	ldrb	r2, [r2, #0]
 8001b92:	0011      	movs	r1, r2
 8001b94:	2203      	movs	r2, #3
 8001b96:	400a      	ands	r2, r1
 8001b98:	00d2      	lsls	r2, r2, #3
 8001b9a:	21ff      	movs	r1, #255	; 0xff
 8001b9c:	4091      	lsls	r1, r2
 8001b9e:	000a      	movs	r2, r1
 8001ba0:	43d2      	mvns	r2, r2
 8001ba2:	401a      	ands	r2, r3
 8001ba4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	019b      	lsls	r3, r3, #6
 8001baa:	22ff      	movs	r2, #255	; 0xff
 8001bac:	401a      	ands	r2, r3
 8001bae:	1dfb      	adds	r3, r7, #7
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	0018      	movs	r0, r3
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	4003      	ands	r3, r0
 8001bb8:	00db      	lsls	r3, r3, #3
 8001bba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bbc:	481f      	ldr	r0, [pc, #124]	; (8001c3c <__NVIC_SetPriority+0xd4>)
 8001bbe:	1dfb      	adds	r3, r7, #7
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	b25b      	sxtb	r3, r3
 8001bc4:	089b      	lsrs	r3, r3, #2
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	33c0      	adds	r3, #192	; 0xc0
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001bce:	e031      	b.n	8001c34 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bd0:	4a1b      	ldr	r2, [pc, #108]	; (8001c40 <__NVIC_SetPriority+0xd8>)
 8001bd2:	1dfb      	adds	r3, r7, #7
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	0019      	movs	r1, r3
 8001bd8:	230f      	movs	r3, #15
 8001bda:	400b      	ands	r3, r1
 8001bdc:	3b08      	subs	r3, #8
 8001bde:	089b      	lsrs	r3, r3, #2
 8001be0:	3306      	adds	r3, #6
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	18d3      	adds	r3, r2, r3
 8001be6:	3304      	adds	r3, #4
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	1dfa      	adds	r2, r7, #7
 8001bec:	7812      	ldrb	r2, [r2, #0]
 8001bee:	0011      	movs	r1, r2
 8001bf0:	2203      	movs	r2, #3
 8001bf2:	400a      	ands	r2, r1
 8001bf4:	00d2      	lsls	r2, r2, #3
 8001bf6:	21ff      	movs	r1, #255	; 0xff
 8001bf8:	4091      	lsls	r1, r2
 8001bfa:	000a      	movs	r2, r1
 8001bfc:	43d2      	mvns	r2, r2
 8001bfe:	401a      	ands	r2, r3
 8001c00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	019b      	lsls	r3, r3, #6
 8001c06:	22ff      	movs	r2, #255	; 0xff
 8001c08:	401a      	ands	r2, r3
 8001c0a:	1dfb      	adds	r3, r7, #7
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	0018      	movs	r0, r3
 8001c10:	2303      	movs	r3, #3
 8001c12:	4003      	ands	r3, r0
 8001c14:	00db      	lsls	r3, r3, #3
 8001c16:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c18:	4809      	ldr	r0, [pc, #36]	; (8001c40 <__NVIC_SetPriority+0xd8>)
 8001c1a:	1dfb      	adds	r3, r7, #7
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	001c      	movs	r4, r3
 8001c20:	230f      	movs	r3, #15
 8001c22:	4023      	ands	r3, r4
 8001c24:	3b08      	subs	r3, #8
 8001c26:	089b      	lsrs	r3, r3, #2
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	3306      	adds	r3, #6
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	18c3      	adds	r3, r0, r3
 8001c30:	3304      	adds	r3, #4
 8001c32:	601a      	str	r2, [r3, #0]
}
 8001c34:	46c0      	nop			; (mov r8, r8)
 8001c36:	46bd      	mov	sp, r7
 8001c38:	b003      	add	sp, #12
 8001c3a:	bd90      	pop	{r4, r7, pc}
 8001c3c:	e000e100 	.word	0xe000e100
 8001c40:	e000ed00 	.word	0xe000ed00

08001c44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	1e5a      	subs	r2, r3, #1
 8001c50:	2380      	movs	r3, #128	; 0x80
 8001c52:	045b      	lsls	r3, r3, #17
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d301      	bcc.n	8001c5c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e010      	b.n	8001c7e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c5c:	4b0a      	ldr	r3, [pc, #40]	; (8001c88 <SysTick_Config+0x44>)
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	3a01      	subs	r2, #1
 8001c62:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c64:	2301      	movs	r3, #1
 8001c66:	425b      	negs	r3, r3
 8001c68:	2103      	movs	r1, #3
 8001c6a:	0018      	movs	r0, r3
 8001c6c:	f7ff ff7c 	bl	8001b68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c70:	4b05      	ldr	r3, [pc, #20]	; (8001c88 <SysTick_Config+0x44>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c76:	4b04      	ldr	r3, [pc, #16]	; (8001c88 <SysTick_Config+0x44>)
 8001c78:	2207      	movs	r2, #7
 8001c7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	0018      	movs	r0, r3
 8001c80:	46bd      	mov	sp, r7
 8001c82:	b002      	add	sp, #8
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	46c0      	nop			; (mov r8, r8)
 8001c88:	e000e010 	.word	0xe000e010

08001c8c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60b9      	str	r1, [r7, #8]
 8001c94:	607a      	str	r2, [r7, #4]
 8001c96:	210f      	movs	r1, #15
 8001c98:	187b      	adds	r3, r7, r1
 8001c9a:	1c02      	adds	r2, r0, #0
 8001c9c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001c9e:	68ba      	ldr	r2, [r7, #8]
 8001ca0:	187b      	adds	r3, r7, r1
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	b25b      	sxtb	r3, r3
 8001ca6:	0011      	movs	r1, r2
 8001ca8:	0018      	movs	r0, r3
 8001caa:	f7ff ff5d 	bl	8001b68 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001cae:	46c0      	nop			; (mov r8, r8)
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	b004      	add	sp, #16
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b082      	sub	sp, #8
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	0018      	movs	r0, r3
 8001cc2:	f7ff ffbf 	bl	8001c44 <SysTick_Config>
 8001cc6:	0003      	movs	r3, r0
}
 8001cc8:	0018      	movs	r0, r3
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	b002      	add	sp, #8
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cde:	e14f      	b.n	8001f80 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2101      	movs	r1, #1
 8001ce6:	697a      	ldr	r2, [r7, #20]
 8001ce8:	4091      	lsls	r1, r2
 8001cea:	000a      	movs	r2, r1
 8001cec:	4013      	ands	r3, r2
 8001cee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d100      	bne.n	8001cf8 <HAL_GPIO_Init+0x28>
 8001cf6:	e140      	b.n	8001f7a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	2203      	movs	r2, #3
 8001cfe:	4013      	ands	r3, r2
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d005      	beq.n	8001d10 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	2203      	movs	r2, #3
 8001d0a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d130      	bne.n	8001d72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	2203      	movs	r2, #3
 8001d1c:	409a      	lsls	r2, r3
 8001d1e:	0013      	movs	r3, r2
 8001d20:	43da      	mvns	r2, r3
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	4013      	ands	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	68da      	ldr	r2, [r3, #12]
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	409a      	lsls	r2, r3
 8001d32:	0013      	movs	r3, r2
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d46:	2201      	movs	r2, #1
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	409a      	lsls	r2, r3
 8001d4c:	0013      	movs	r3, r2
 8001d4e:	43da      	mvns	r2, r3
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	4013      	ands	r3, r2
 8001d54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	091b      	lsrs	r3, r3, #4
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	401a      	ands	r2, r3
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	409a      	lsls	r2, r3
 8001d64:	0013      	movs	r3, r2
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	2203      	movs	r2, #3
 8001d78:	4013      	ands	r3, r2
 8001d7a:	2b03      	cmp	r3, #3
 8001d7c:	d017      	beq.n	8001dae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	2203      	movs	r2, #3
 8001d8a:	409a      	lsls	r2, r3
 8001d8c:	0013      	movs	r3, r2
 8001d8e:	43da      	mvns	r2, r3
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	4013      	ands	r3, r2
 8001d94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	689a      	ldr	r2, [r3, #8]
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	409a      	lsls	r2, r3
 8001da0:	0013      	movs	r3, r2
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2203      	movs	r2, #3
 8001db4:	4013      	ands	r3, r2
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d123      	bne.n	8001e02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	08da      	lsrs	r2, r3, #3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	3208      	adds	r2, #8
 8001dc2:	0092      	lsls	r2, r2, #2
 8001dc4:	58d3      	ldr	r3, [r2, r3]
 8001dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	2207      	movs	r2, #7
 8001dcc:	4013      	ands	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	220f      	movs	r2, #15
 8001dd2:	409a      	lsls	r2, r3
 8001dd4:	0013      	movs	r3, r2
 8001dd6:	43da      	mvns	r2, r3
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	691a      	ldr	r2, [r3, #16]
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	2107      	movs	r1, #7
 8001de6:	400b      	ands	r3, r1
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	409a      	lsls	r2, r3
 8001dec:	0013      	movs	r3, r2
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	08da      	lsrs	r2, r3, #3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	3208      	adds	r2, #8
 8001dfc:	0092      	lsls	r2, r2, #2
 8001dfe:	6939      	ldr	r1, [r7, #16]
 8001e00:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	2203      	movs	r2, #3
 8001e0e:	409a      	lsls	r2, r3
 8001e10:	0013      	movs	r3, r2
 8001e12:	43da      	mvns	r2, r3
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	4013      	ands	r3, r2
 8001e18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2203      	movs	r2, #3
 8001e20:	401a      	ands	r2, r3
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	409a      	lsls	r2, r3
 8001e28:	0013      	movs	r3, r2
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685a      	ldr	r2, [r3, #4]
 8001e3a:	23c0      	movs	r3, #192	; 0xc0
 8001e3c:	029b      	lsls	r3, r3, #10
 8001e3e:	4013      	ands	r3, r2
 8001e40:	d100      	bne.n	8001e44 <HAL_GPIO_Init+0x174>
 8001e42:	e09a      	b.n	8001f7a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e44:	4b54      	ldr	r3, [pc, #336]	; (8001f98 <HAL_GPIO_Init+0x2c8>)
 8001e46:	699a      	ldr	r2, [r3, #24]
 8001e48:	4b53      	ldr	r3, [pc, #332]	; (8001f98 <HAL_GPIO_Init+0x2c8>)
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	619a      	str	r2, [r3, #24]
 8001e50:	4b51      	ldr	r3, [pc, #324]	; (8001f98 <HAL_GPIO_Init+0x2c8>)
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	2201      	movs	r2, #1
 8001e56:	4013      	ands	r3, r2
 8001e58:	60bb      	str	r3, [r7, #8]
 8001e5a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e5c:	4a4f      	ldr	r2, [pc, #316]	; (8001f9c <HAL_GPIO_Init+0x2cc>)
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	089b      	lsrs	r3, r3, #2
 8001e62:	3302      	adds	r3, #2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	589b      	ldr	r3, [r3, r2]
 8001e68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	2203      	movs	r2, #3
 8001e6e:	4013      	ands	r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	220f      	movs	r2, #15
 8001e74:	409a      	lsls	r2, r3
 8001e76:	0013      	movs	r3, r2
 8001e78:	43da      	mvns	r2, r3
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	2390      	movs	r3, #144	; 0x90
 8001e84:	05db      	lsls	r3, r3, #23
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d013      	beq.n	8001eb2 <HAL_GPIO_Init+0x1e2>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a44      	ldr	r2, [pc, #272]	; (8001fa0 <HAL_GPIO_Init+0x2d0>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d00d      	beq.n	8001eae <HAL_GPIO_Init+0x1de>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a43      	ldr	r2, [pc, #268]	; (8001fa4 <HAL_GPIO_Init+0x2d4>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d007      	beq.n	8001eaa <HAL_GPIO_Init+0x1da>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a42      	ldr	r2, [pc, #264]	; (8001fa8 <HAL_GPIO_Init+0x2d8>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d101      	bne.n	8001ea6 <HAL_GPIO_Init+0x1d6>
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e006      	b.n	8001eb4 <HAL_GPIO_Init+0x1e4>
 8001ea6:	2305      	movs	r3, #5
 8001ea8:	e004      	b.n	8001eb4 <HAL_GPIO_Init+0x1e4>
 8001eaa:	2302      	movs	r3, #2
 8001eac:	e002      	b.n	8001eb4 <HAL_GPIO_Init+0x1e4>
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e000      	b.n	8001eb4 <HAL_GPIO_Init+0x1e4>
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	2103      	movs	r1, #3
 8001eb8:	400a      	ands	r2, r1
 8001eba:	0092      	lsls	r2, r2, #2
 8001ebc:	4093      	lsls	r3, r2
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ec4:	4935      	ldr	r1, [pc, #212]	; (8001f9c <HAL_GPIO_Init+0x2cc>)
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	089b      	lsrs	r3, r3, #2
 8001eca:	3302      	adds	r3, #2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ed2:	4b36      	ldr	r3, [pc, #216]	; (8001fac <HAL_GPIO_Init+0x2dc>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	43da      	mvns	r2, r3
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685a      	ldr	r2, [r3, #4]
 8001ee6:	2380      	movs	r3, #128	; 0x80
 8001ee8:	035b      	lsls	r3, r3, #13
 8001eea:	4013      	ands	r3, r2
 8001eec:	d003      	beq.n	8001ef6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ef6:	4b2d      	ldr	r3, [pc, #180]	; (8001fac <HAL_GPIO_Init+0x2dc>)
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001efc:	4b2b      	ldr	r3, [pc, #172]	; (8001fac <HAL_GPIO_Init+0x2dc>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	43da      	mvns	r2, r3
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685a      	ldr	r2, [r3, #4]
 8001f10:	2380      	movs	r3, #128	; 0x80
 8001f12:	039b      	lsls	r3, r3, #14
 8001f14:	4013      	ands	r3, r2
 8001f16:	d003      	beq.n	8001f20 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001f20:	4b22      	ldr	r3, [pc, #136]	; (8001fac <HAL_GPIO_Init+0x2dc>)
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001f26:	4b21      	ldr	r3, [pc, #132]	; (8001fac <HAL_GPIO_Init+0x2dc>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	43da      	mvns	r2, r3
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	4013      	ands	r3, r2
 8001f34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685a      	ldr	r2, [r3, #4]
 8001f3a:	2380      	movs	r3, #128	; 0x80
 8001f3c:	029b      	lsls	r3, r3, #10
 8001f3e:	4013      	ands	r3, r2
 8001f40:	d003      	beq.n	8001f4a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001f4a:	4b18      	ldr	r3, [pc, #96]	; (8001fac <HAL_GPIO_Init+0x2dc>)
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001f50:	4b16      	ldr	r3, [pc, #88]	; (8001fac <HAL_GPIO_Init+0x2dc>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	43da      	mvns	r2, r3
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685a      	ldr	r2, [r3, #4]
 8001f64:	2380      	movs	r3, #128	; 0x80
 8001f66:	025b      	lsls	r3, r3, #9
 8001f68:	4013      	ands	r3, r2
 8001f6a:	d003      	beq.n	8001f74 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001f74:	4b0d      	ldr	r3, [pc, #52]	; (8001fac <HAL_GPIO_Init+0x2dc>)
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	40da      	lsrs	r2, r3
 8001f88:	1e13      	subs	r3, r2, #0
 8001f8a:	d000      	beq.n	8001f8e <HAL_GPIO_Init+0x2be>
 8001f8c:	e6a8      	b.n	8001ce0 <HAL_GPIO_Init+0x10>
  } 
}
 8001f8e:	46c0      	nop			; (mov r8, r8)
 8001f90:	46c0      	nop			; (mov r8, r8)
 8001f92:	46bd      	mov	sp, r7
 8001f94:	b006      	add	sp, #24
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	40010000 	.word	0x40010000
 8001fa0:	48000400 	.word	0x48000400
 8001fa4:	48000800 	.word	0x48000800
 8001fa8:	48000c00 	.word	0x48000c00
 8001fac:	40010400 	.word	0x40010400

08001fb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e08f      	b.n	80020e2 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2241      	movs	r2, #65	; 0x41
 8001fc6:	5c9b      	ldrb	r3, [r3, r2]
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d107      	bne.n	8001fde <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2240      	movs	r2, #64	; 0x40
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	0018      	movs	r0, r3
 8001fda:	f7ff fc23 	bl	8001824 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2241      	movs	r2, #65	; 0x41
 8001fe2:	2124      	movs	r1, #36	; 0x24
 8001fe4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	438a      	bics	r2, r1
 8001ff4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685a      	ldr	r2, [r3, #4]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	493b      	ldr	r1, [pc, #236]	; (80020ec <HAL_I2C_Init+0x13c>)
 8002000:	400a      	ands	r2, r1
 8002002:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	689a      	ldr	r2, [r3, #8]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4938      	ldr	r1, [pc, #224]	; (80020f0 <HAL_I2C_Init+0x140>)
 8002010:	400a      	ands	r2, r1
 8002012:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d108      	bne.n	800202e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2180      	movs	r1, #128	; 0x80
 8002026:	0209      	lsls	r1, r1, #8
 8002028:	430a      	orrs	r2, r1
 800202a:	609a      	str	r2, [r3, #8]
 800202c:	e007      	b.n	800203e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	689a      	ldr	r2, [r3, #8]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2184      	movs	r1, #132	; 0x84
 8002038:	0209      	lsls	r1, r1, #8
 800203a:	430a      	orrs	r2, r1
 800203c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	2b02      	cmp	r3, #2
 8002044:	d109      	bne.n	800205a <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	685a      	ldr	r2, [r3, #4]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2180      	movs	r1, #128	; 0x80
 8002052:	0109      	lsls	r1, r1, #4
 8002054:	430a      	orrs	r2, r1
 8002056:	605a      	str	r2, [r3, #4]
 8002058:	e007      	b.n	800206a <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	685a      	ldr	r2, [r3, #4]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4923      	ldr	r1, [pc, #140]	; (80020f4 <HAL_I2C_Init+0x144>)
 8002066:	400a      	ands	r2, r1
 8002068:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	685a      	ldr	r2, [r3, #4]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4920      	ldr	r1, [pc, #128]	; (80020f8 <HAL_I2C_Init+0x148>)
 8002076:	430a      	orrs	r2, r1
 8002078:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68da      	ldr	r2, [r3, #12]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	491a      	ldr	r1, [pc, #104]	; (80020f0 <HAL_I2C_Init+0x140>)
 8002086:	400a      	ands	r2, r1
 8002088:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	691a      	ldr	r2, [r3, #16]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	431a      	orrs	r2, r3
 8002094:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	430a      	orrs	r2, r1
 80020a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	69d9      	ldr	r1, [r3, #28]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a1a      	ldr	r2, [r3, #32]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	430a      	orrs	r2, r1
 80020b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2101      	movs	r1, #1
 80020c0:	430a      	orrs	r2, r1
 80020c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2241      	movs	r2, #65	; 0x41
 80020ce:	2120      	movs	r1, #32
 80020d0:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2242      	movs	r2, #66	; 0x42
 80020dc:	2100      	movs	r1, #0
 80020de:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	0018      	movs	r0, r3
 80020e4:	46bd      	mov	sp, r7
 80020e6:	b002      	add	sp, #8
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	46c0      	nop			; (mov r8, r8)
 80020ec:	f0ffffff 	.word	0xf0ffffff
 80020f0:	ffff7fff 	.word	0xffff7fff
 80020f4:	fffff7ff 	.word	0xfffff7ff
 80020f8:	02008000 	.word	0x02008000

080020fc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80020fc:	b590      	push	{r4, r7, lr}
 80020fe:	b089      	sub	sp, #36	; 0x24
 8002100:	af02      	add	r7, sp, #8
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	0008      	movs	r0, r1
 8002106:	607a      	str	r2, [r7, #4]
 8002108:	0019      	movs	r1, r3
 800210a:	230a      	movs	r3, #10
 800210c:	18fb      	adds	r3, r7, r3
 800210e:	1c02      	adds	r2, r0, #0
 8002110:	801a      	strh	r2, [r3, #0]
 8002112:	2308      	movs	r3, #8
 8002114:	18fb      	adds	r3, r7, r3
 8002116:	1c0a      	adds	r2, r1, #0
 8002118:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2241      	movs	r2, #65	; 0x41
 800211e:	5c9b      	ldrb	r3, [r3, r2]
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b20      	cmp	r3, #32
 8002124:	d000      	beq.n	8002128 <HAL_I2C_Master_Transmit+0x2c>
 8002126:	e10a      	b.n	800233e <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2240      	movs	r2, #64	; 0x40
 800212c:	5c9b      	ldrb	r3, [r3, r2]
 800212e:	2b01      	cmp	r3, #1
 8002130:	d101      	bne.n	8002136 <HAL_I2C_Master_Transmit+0x3a>
 8002132:	2302      	movs	r3, #2
 8002134:	e104      	b.n	8002340 <HAL_I2C_Master_Transmit+0x244>
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2240      	movs	r2, #64	; 0x40
 800213a:	2101      	movs	r1, #1
 800213c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800213e:	f7ff fce5 	bl	8001b0c <HAL_GetTick>
 8002142:	0003      	movs	r3, r0
 8002144:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002146:	2380      	movs	r3, #128	; 0x80
 8002148:	0219      	lsls	r1, r3, #8
 800214a:	68f8      	ldr	r0, [r7, #12]
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	2319      	movs	r3, #25
 8002152:	2201      	movs	r2, #1
 8002154:	f000 fa26 	bl	80025a4 <I2C_WaitOnFlagUntilTimeout>
 8002158:	1e03      	subs	r3, r0, #0
 800215a:	d001      	beq.n	8002160 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e0ef      	b.n	8002340 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2241      	movs	r2, #65	; 0x41
 8002164:	2121      	movs	r1, #33	; 0x21
 8002166:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2242      	movs	r2, #66	; 0x42
 800216c:	2110      	movs	r1, #16
 800216e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2200      	movs	r2, #0
 8002174:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2208      	movs	r2, #8
 8002180:	18ba      	adds	r2, r7, r2
 8002182:	8812      	ldrh	r2, [r2, #0]
 8002184:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2200      	movs	r2, #0
 800218a:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002190:	b29b      	uxth	r3, r3
 8002192:	2bff      	cmp	r3, #255	; 0xff
 8002194:	d906      	bls.n	80021a4 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	22ff      	movs	r2, #255	; 0xff
 800219a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800219c:	2380      	movs	r3, #128	; 0x80
 800219e:	045b      	lsls	r3, r3, #17
 80021a0:	617b      	str	r3, [r7, #20]
 80021a2:	e007      	b.n	80021b4 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80021ae:	2380      	movs	r3, #128	; 0x80
 80021b0:	049b      	lsls	r3, r3, #18
 80021b2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d027      	beq.n	800220c <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c0:	781a      	ldrb	r2, [r3, #0]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021cc:	1c5a      	adds	r2, r3, #1
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	3b01      	subs	r3, #1
 80021da:	b29a      	uxth	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e4:	3b01      	subs	r3, #1
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	3301      	adds	r3, #1
 80021f4:	b2da      	uxtb	r2, r3
 80021f6:	697c      	ldr	r4, [r7, #20]
 80021f8:	230a      	movs	r3, #10
 80021fa:	18fb      	adds	r3, r7, r3
 80021fc:	8819      	ldrh	r1, [r3, #0]
 80021fe:	68f8      	ldr	r0, [r7, #12]
 8002200:	4b51      	ldr	r3, [pc, #324]	; (8002348 <HAL_I2C_Master_Transmit+0x24c>)
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	0023      	movs	r3, r4
 8002206:	f000 fc4d 	bl	8002aa4 <I2C_TransferConfig>
 800220a:	e06f      	b.n	80022ec <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002210:	b2da      	uxtb	r2, r3
 8002212:	697c      	ldr	r4, [r7, #20]
 8002214:	230a      	movs	r3, #10
 8002216:	18fb      	adds	r3, r7, r3
 8002218:	8819      	ldrh	r1, [r3, #0]
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	4b4a      	ldr	r3, [pc, #296]	; (8002348 <HAL_I2C_Master_Transmit+0x24c>)
 800221e:	9300      	str	r3, [sp, #0]
 8002220:	0023      	movs	r3, r4
 8002222:	f000 fc3f 	bl	8002aa4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002226:	e061      	b.n	80022ec <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002228:	693a      	ldr	r2, [r7, #16]
 800222a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	0018      	movs	r0, r3
 8002230:	f000 fa10 	bl	8002654 <I2C_WaitOnTXISFlagUntilTimeout>
 8002234:	1e03      	subs	r3, r0, #0
 8002236:	d001      	beq.n	800223c <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e081      	b.n	8002340 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002240:	781a      	ldrb	r2, [r3, #0]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224c:	1c5a      	adds	r2, r3, #1
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002256:	b29b      	uxth	r3, r3
 8002258:	3b01      	subs	r3, #1
 800225a:	b29a      	uxth	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002264:	3b01      	subs	r3, #1
 8002266:	b29a      	uxth	r2, r3
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002270:	b29b      	uxth	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d03a      	beq.n	80022ec <HAL_I2C_Master_Transmit+0x1f0>
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800227a:	2b00      	cmp	r3, #0
 800227c:	d136      	bne.n	80022ec <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800227e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002280:	68f8      	ldr	r0, [r7, #12]
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	9300      	str	r3, [sp, #0]
 8002286:	0013      	movs	r3, r2
 8002288:	2200      	movs	r2, #0
 800228a:	2180      	movs	r1, #128	; 0x80
 800228c:	f000 f98a 	bl	80025a4 <I2C_WaitOnFlagUntilTimeout>
 8002290:	1e03      	subs	r3, r0, #0
 8002292:	d001      	beq.n	8002298 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e053      	b.n	8002340 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800229c:	b29b      	uxth	r3, r3
 800229e:	2bff      	cmp	r3, #255	; 0xff
 80022a0:	d911      	bls.n	80022c6 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	22ff      	movs	r2, #255	; 0xff
 80022a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ac:	b2da      	uxtb	r2, r3
 80022ae:	2380      	movs	r3, #128	; 0x80
 80022b0:	045c      	lsls	r4, r3, #17
 80022b2:	230a      	movs	r3, #10
 80022b4:	18fb      	adds	r3, r7, r3
 80022b6:	8819      	ldrh	r1, [r3, #0]
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	2300      	movs	r3, #0
 80022bc:	9300      	str	r3, [sp, #0]
 80022be:	0023      	movs	r3, r4
 80022c0:	f000 fbf0 	bl	8002aa4 <I2C_TransferConfig>
 80022c4:	e012      	b.n	80022ec <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ca:	b29a      	uxth	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d4:	b2da      	uxtb	r2, r3
 80022d6:	2380      	movs	r3, #128	; 0x80
 80022d8:	049c      	lsls	r4, r3, #18
 80022da:	230a      	movs	r3, #10
 80022dc:	18fb      	adds	r3, r7, r3
 80022de:	8819      	ldrh	r1, [r3, #0]
 80022e0:	68f8      	ldr	r0, [r7, #12]
 80022e2:	2300      	movs	r3, #0
 80022e4:	9300      	str	r3, [sp, #0]
 80022e6:	0023      	movs	r3, r4
 80022e8:	f000 fbdc 	bl	8002aa4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d198      	bne.n	8002228 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	0018      	movs	r0, r3
 80022fe:	f000 f9ef 	bl	80026e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002302:	1e03      	subs	r3, r0, #0
 8002304:	d001      	beq.n	800230a <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e01a      	b.n	8002340 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2220      	movs	r2, #32
 8002310:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	490b      	ldr	r1, [pc, #44]	; (800234c <HAL_I2C_Master_Transmit+0x250>)
 800231e:	400a      	ands	r2, r1
 8002320:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2241      	movs	r2, #65	; 0x41
 8002326:	2120      	movs	r1, #32
 8002328:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2242      	movs	r2, #66	; 0x42
 800232e:	2100      	movs	r1, #0
 8002330:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2240      	movs	r2, #64	; 0x40
 8002336:	2100      	movs	r1, #0
 8002338:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800233a:	2300      	movs	r3, #0
 800233c:	e000      	b.n	8002340 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 800233e:	2302      	movs	r3, #2
  }
}
 8002340:	0018      	movs	r0, r3
 8002342:	46bd      	mov	sp, r7
 8002344:	b007      	add	sp, #28
 8002346:	bd90      	pop	{r4, r7, pc}
 8002348:	80002000 	.word	0x80002000
 800234c:	fe00e800 	.word	0xfe00e800

08002350 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002350:	b590      	push	{r4, r7, lr}
 8002352:	b089      	sub	sp, #36	; 0x24
 8002354:	af02      	add	r7, sp, #8
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	0008      	movs	r0, r1
 800235a:	607a      	str	r2, [r7, #4]
 800235c:	0019      	movs	r1, r3
 800235e:	230a      	movs	r3, #10
 8002360:	18fb      	adds	r3, r7, r3
 8002362:	1c02      	adds	r2, r0, #0
 8002364:	801a      	strh	r2, [r3, #0]
 8002366:	2308      	movs	r3, #8
 8002368:	18fb      	adds	r3, r7, r3
 800236a:	1c0a      	adds	r2, r1, #0
 800236c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2241      	movs	r2, #65	; 0x41
 8002372:	5c9b      	ldrb	r3, [r3, r2]
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b20      	cmp	r3, #32
 8002378:	d000      	beq.n	800237c <HAL_I2C_Master_Receive+0x2c>
 800237a:	e0e8      	b.n	800254e <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2240      	movs	r2, #64	; 0x40
 8002380:	5c9b      	ldrb	r3, [r3, r2]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d101      	bne.n	800238a <HAL_I2C_Master_Receive+0x3a>
 8002386:	2302      	movs	r3, #2
 8002388:	e0e2      	b.n	8002550 <HAL_I2C_Master_Receive+0x200>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2240      	movs	r2, #64	; 0x40
 800238e:	2101      	movs	r1, #1
 8002390:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002392:	f7ff fbbb 	bl	8001b0c <HAL_GetTick>
 8002396:	0003      	movs	r3, r0
 8002398:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800239a:	2380      	movs	r3, #128	; 0x80
 800239c:	0219      	lsls	r1, r3, #8
 800239e:	68f8      	ldr	r0, [r7, #12]
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	2319      	movs	r3, #25
 80023a6:	2201      	movs	r2, #1
 80023a8:	f000 f8fc 	bl	80025a4 <I2C_WaitOnFlagUntilTimeout>
 80023ac:	1e03      	subs	r3, r0, #0
 80023ae:	d001      	beq.n	80023b4 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e0cd      	b.n	8002550 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2241      	movs	r2, #65	; 0x41
 80023b8:	2122      	movs	r1, #34	; 0x22
 80023ba:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2242      	movs	r2, #66	; 0x42
 80023c0:	2110      	movs	r1, #16
 80023c2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2200      	movs	r2, #0
 80023c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2208      	movs	r2, #8
 80023d4:	18ba      	adds	r2, r7, r2
 80023d6:	8812      	ldrh	r2, [r2, #0]
 80023d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2200      	movs	r2, #0
 80023de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	2bff      	cmp	r3, #255	; 0xff
 80023e8:	d911      	bls.n	800240e <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = 1U;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2201      	movs	r2, #1
 80023ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f4:	b2da      	uxtb	r2, r3
 80023f6:	2380      	movs	r3, #128	; 0x80
 80023f8:	045c      	lsls	r4, r3, #17
 80023fa:	230a      	movs	r3, #10
 80023fc:	18fb      	adds	r3, r7, r3
 80023fe:	8819      	ldrh	r1, [r3, #0]
 8002400:	68f8      	ldr	r0, [r7, #12]
 8002402:	4b55      	ldr	r3, [pc, #340]	; (8002558 <HAL_I2C_Master_Receive+0x208>)
 8002404:	9300      	str	r3, [sp, #0]
 8002406:	0023      	movs	r3, r4
 8002408:	f000 fb4c 	bl	8002aa4 <I2C_TransferConfig>
 800240c:	e076      	b.n	80024fc <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002412:	b29a      	uxth	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800241c:	b2da      	uxtb	r2, r3
 800241e:	2380      	movs	r3, #128	; 0x80
 8002420:	049c      	lsls	r4, r3, #18
 8002422:	230a      	movs	r3, #10
 8002424:	18fb      	adds	r3, r7, r3
 8002426:	8819      	ldrh	r1, [r3, #0]
 8002428:	68f8      	ldr	r0, [r7, #12]
 800242a:	4b4b      	ldr	r3, [pc, #300]	; (8002558 <HAL_I2C_Master_Receive+0x208>)
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	0023      	movs	r3, r4
 8002430:	f000 fb38 	bl	8002aa4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002434:	e062      	b.n	80024fc <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	0018      	movs	r0, r3
 800243e:	f000 f993 	bl	8002768 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002442:	1e03      	subs	r3, r0, #0
 8002444:	d001      	beq.n	800244a <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e082      	b.n	8002550 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002454:	b2d2      	uxtb	r2, r2
 8002456:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245c:	1c5a      	adds	r2, r3, #1
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002466:	3b01      	subs	r3, #1
 8002468:	b29a      	uxth	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002472:	b29b      	uxth	r3, r3
 8002474:	3b01      	subs	r3, #1
 8002476:	b29a      	uxth	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002480:	b29b      	uxth	r3, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d03a      	beq.n	80024fc <HAL_I2C_Master_Receive+0x1ac>
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800248a:	2b00      	cmp	r3, #0
 800248c:	d136      	bne.n	80024fc <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800248e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002490:	68f8      	ldr	r0, [r7, #12]
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	9300      	str	r3, [sp, #0]
 8002496:	0013      	movs	r3, r2
 8002498:	2200      	movs	r2, #0
 800249a:	2180      	movs	r1, #128	; 0x80
 800249c:	f000 f882 	bl	80025a4 <I2C_WaitOnFlagUntilTimeout>
 80024a0:	1e03      	subs	r3, r0, #0
 80024a2:	d001      	beq.n	80024a8 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e053      	b.n	8002550 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	2bff      	cmp	r3, #255	; 0xff
 80024b0:	d911      	bls.n	80024d6 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	22ff      	movs	r2, #255	; 0xff
 80024b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024bc:	b2da      	uxtb	r2, r3
 80024be:	2380      	movs	r3, #128	; 0x80
 80024c0:	045c      	lsls	r4, r3, #17
 80024c2:	230a      	movs	r3, #10
 80024c4:	18fb      	adds	r3, r7, r3
 80024c6:	8819      	ldrh	r1, [r3, #0]
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	2300      	movs	r3, #0
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	0023      	movs	r3, r4
 80024d0:	f000 fae8 	bl	8002aa4 <I2C_TransferConfig>
 80024d4:	e012      	b.n	80024fc <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024da:	b29a      	uxth	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	2380      	movs	r3, #128	; 0x80
 80024e8:	049c      	lsls	r4, r3, #18
 80024ea:	230a      	movs	r3, #10
 80024ec:	18fb      	adds	r3, r7, r3
 80024ee:	8819      	ldrh	r1, [r3, #0]
 80024f0:	68f8      	ldr	r0, [r7, #12]
 80024f2:	2300      	movs	r3, #0
 80024f4:	9300      	str	r3, [sp, #0]
 80024f6:	0023      	movs	r3, r4
 80024f8:	f000 fad4 	bl	8002aa4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002500:	b29b      	uxth	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d197      	bne.n	8002436 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	0018      	movs	r0, r3
 800250e:	f000 f8e7 	bl	80026e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002512:	1e03      	subs	r3, r0, #0
 8002514:	d001      	beq.n	800251a <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e01a      	b.n	8002550 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2220      	movs	r2, #32
 8002520:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	685a      	ldr	r2, [r3, #4]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	490b      	ldr	r1, [pc, #44]	; (800255c <HAL_I2C_Master_Receive+0x20c>)
 800252e:	400a      	ands	r2, r1
 8002530:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2241      	movs	r2, #65	; 0x41
 8002536:	2120      	movs	r1, #32
 8002538:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2242      	movs	r2, #66	; 0x42
 800253e:	2100      	movs	r1, #0
 8002540:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2240      	movs	r2, #64	; 0x40
 8002546:	2100      	movs	r1, #0
 8002548:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800254a:	2300      	movs	r3, #0
 800254c:	e000      	b.n	8002550 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800254e:	2302      	movs	r3, #2
  }
}
 8002550:	0018      	movs	r0, r3
 8002552:	46bd      	mov	sp, r7
 8002554:	b007      	add	sp, #28
 8002556:	bd90      	pop	{r4, r7, pc}
 8002558:	80002400 	.word	0x80002400
 800255c:	fe00e800 	.word	0xfe00e800

08002560 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	2202      	movs	r2, #2
 8002570:	4013      	ands	r3, r2
 8002572:	2b02      	cmp	r3, #2
 8002574:	d103      	bne.n	800257e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2200      	movs	r2, #0
 800257c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	2201      	movs	r2, #1
 8002586:	4013      	ands	r3, r2
 8002588:	2b01      	cmp	r3, #1
 800258a:	d007      	beq.n	800259c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	699a      	ldr	r2, [r3, #24]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2101      	movs	r1, #1
 8002598:	430a      	orrs	r2, r1
 800259a:	619a      	str	r2, [r3, #24]
  }
}
 800259c:	46c0      	nop			; (mov r8, r8)
 800259e:	46bd      	mov	sp, r7
 80025a0:	b002      	add	sp, #8
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	603b      	str	r3, [r7, #0]
 80025b0:	1dfb      	adds	r3, r7, #7
 80025b2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025b4:	e03a      	b.n	800262c <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	6839      	ldr	r1, [r7, #0]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	0018      	movs	r0, r3
 80025be:	f000 f971 	bl	80028a4 <I2C_IsErrorOccurred>
 80025c2:	1e03      	subs	r3, r0, #0
 80025c4:	d001      	beq.n	80025ca <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e040      	b.n	800264c <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	3301      	adds	r3, #1
 80025ce:	d02d      	beq.n	800262c <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025d0:	f7ff fa9c 	bl	8001b0c <HAL_GetTick>
 80025d4:	0002      	movs	r2, r0
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d302      	bcc.n	80025e6 <I2C_WaitOnFlagUntilTimeout+0x42>
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d122      	bne.n	800262c <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	68ba      	ldr	r2, [r7, #8]
 80025ee:	4013      	ands	r3, r2
 80025f0:	68ba      	ldr	r2, [r7, #8]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	425a      	negs	r2, r3
 80025f6:	4153      	adcs	r3, r2
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	001a      	movs	r2, r3
 80025fc:	1dfb      	adds	r3, r7, #7
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	429a      	cmp	r2, r3
 8002602:	d113      	bne.n	800262c <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002608:	2220      	movs	r2, #32
 800260a:	431a      	orrs	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2241      	movs	r2, #65	; 0x41
 8002614:	2120      	movs	r1, #32
 8002616:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2242      	movs	r2, #66	; 0x42
 800261c:	2100      	movs	r1, #0
 800261e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2240      	movs	r2, #64	; 0x40
 8002624:	2100      	movs	r1, #0
 8002626:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e00f      	b.n	800264c <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	68ba      	ldr	r2, [r7, #8]
 8002634:	4013      	ands	r3, r2
 8002636:	68ba      	ldr	r2, [r7, #8]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	425a      	negs	r2, r3
 800263c:	4153      	adcs	r3, r2
 800263e:	b2db      	uxtb	r3, r3
 8002640:	001a      	movs	r2, r3
 8002642:	1dfb      	adds	r3, r7, #7
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	429a      	cmp	r2, r3
 8002648:	d0b5      	beq.n	80025b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800264a:	2300      	movs	r3, #0
}
 800264c:	0018      	movs	r0, r3
 800264e:	46bd      	mov	sp, r7
 8002650:	b004      	add	sp, #16
 8002652:	bd80      	pop	{r7, pc}

08002654 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002660:	e032      	b.n	80026c8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	68b9      	ldr	r1, [r7, #8]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	0018      	movs	r0, r3
 800266a:	f000 f91b 	bl	80028a4 <I2C_IsErrorOccurred>
 800266e:	1e03      	subs	r3, r0, #0
 8002670:	d001      	beq.n	8002676 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e030      	b.n	80026d8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	3301      	adds	r3, #1
 800267a:	d025      	beq.n	80026c8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800267c:	f7ff fa46 	bl	8001b0c <HAL_GetTick>
 8002680:	0002      	movs	r2, r0
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	68ba      	ldr	r2, [r7, #8]
 8002688:	429a      	cmp	r2, r3
 800268a:	d302      	bcc.n	8002692 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d11a      	bne.n	80026c8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	2202      	movs	r2, #2
 800269a:	4013      	ands	r3, r2
 800269c:	2b02      	cmp	r3, #2
 800269e:	d013      	beq.n	80026c8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a4:	2220      	movs	r2, #32
 80026a6:	431a      	orrs	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2241      	movs	r2, #65	; 0x41
 80026b0:	2120      	movs	r1, #32
 80026b2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2242      	movs	r2, #66	; 0x42
 80026b8:	2100      	movs	r1, #0
 80026ba:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2240      	movs	r2, #64	; 0x40
 80026c0:	2100      	movs	r1, #0
 80026c2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e007      	b.n	80026d8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	2202      	movs	r2, #2
 80026d0:	4013      	ands	r3, r2
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d1c5      	bne.n	8002662 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	0018      	movs	r0, r3
 80026da:	46bd      	mov	sp, r7
 80026dc:	b004      	add	sp, #16
 80026de:	bd80      	pop	{r7, pc}

080026e0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026ec:	e02f      	b.n	800274e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	68b9      	ldr	r1, [r7, #8]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	0018      	movs	r0, r3
 80026f6:	f000 f8d5 	bl	80028a4 <I2C_IsErrorOccurred>
 80026fa:	1e03      	subs	r3, r0, #0
 80026fc:	d001      	beq.n	8002702 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e02d      	b.n	800275e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002702:	f7ff fa03 	bl	8001b0c <HAL_GetTick>
 8002706:	0002      	movs	r2, r0
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	68ba      	ldr	r2, [r7, #8]
 800270e:	429a      	cmp	r2, r3
 8002710:	d302      	bcc.n	8002718 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d11a      	bne.n	800274e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	2220      	movs	r2, #32
 8002720:	4013      	ands	r3, r2
 8002722:	2b20      	cmp	r3, #32
 8002724:	d013      	beq.n	800274e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272a:	2220      	movs	r2, #32
 800272c:	431a      	orrs	r2, r3
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2241      	movs	r2, #65	; 0x41
 8002736:	2120      	movs	r1, #32
 8002738:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2242      	movs	r2, #66	; 0x42
 800273e:	2100      	movs	r1, #0
 8002740:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2240      	movs	r2, #64	; 0x40
 8002746:	2100      	movs	r1, #0
 8002748:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e007      	b.n	800275e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	2220      	movs	r2, #32
 8002756:	4013      	ands	r3, r2
 8002758:	2b20      	cmp	r3, #32
 800275a:	d1c8      	bne.n	80026ee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	0018      	movs	r0, r3
 8002760:	46bd      	mov	sp, r7
 8002762:	b004      	add	sp, #16
 8002764:	bd80      	pop	{r7, pc}
	...

08002768 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b086      	sub	sp, #24
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002774:	2317      	movs	r3, #23
 8002776:	18fb      	adds	r3, r7, r3
 8002778:	2200      	movs	r2, #0
 800277a:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800277c:	e07b      	b.n	8002876 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	68b9      	ldr	r1, [r7, #8]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	0018      	movs	r0, r3
 8002786:	f000 f88d 	bl	80028a4 <I2C_IsErrorOccurred>
 800278a:	1e03      	subs	r3, r0, #0
 800278c:	d003      	beq.n	8002796 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 800278e:	2317      	movs	r3, #23
 8002790:	18fb      	adds	r3, r7, r3
 8002792:	2201      	movs	r2, #1
 8002794:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	2220      	movs	r2, #32
 800279e:	4013      	ands	r3, r2
 80027a0:	2b20      	cmp	r3, #32
 80027a2:	d140      	bne.n	8002826 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 80027a4:	2117      	movs	r1, #23
 80027a6:	187b      	adds	r3, r7, r1
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d13b      	bne.n	8002826 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	2204      	movs	r2, #4
 80027b6:	4013      	ands	r3, r2
 80027b8:	2b04      	cmp	r3, #4
 80027ba:	d106      	bne.n	80027ca <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d002      	beq.n	80027ca <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80027c4:	187b      	adds	r3, r7, r1
 80027c6:	2200      	movs	r2, #0
 80027c8:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	2210      	movs	r2, #16
 80027d2:	4013      	ands	r3, r2
 80027d4:	2b10      	cmp	r3, #16
 80027d6:	d123      	bne.n	8002820 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2210      	movs	r2, #16
 80027de:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2204      	movs	r2, #4
 80027e4:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2220      	movs	r2, #32
 80027ec:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4929      	ldr	r1, [pc, #164]	; (80028a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 80027fa:	400a      	ands	r2, r1
 80027fc:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2241      	movs	r2, #65	; 0x41
 8002802:	2120      	movs	r1, #32
 8002804:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2242      	movs	r2, #66	; 0x42
 800280a:	2100      	movs	r1, #0
 800280c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2240      	movs	r2, #64	; 0x40
 8002812:	2100      	movs	r1, #0
 8002814:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8002816:	2317      	movs	r3, #23
 8002818:	18fb      	adds	r3, r7, r3
 800281a:	2201      	movs	r2, #1
 800281c:	701a      	strb	r2, [r3, #0]
 800281e:	e002      	b.n	8002826 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8002826:	f7ff f971 	bl	8001b0c <HAL_GetTick>
 800282a:	0002      	movs	r2, r0
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	68ba      	ldr	r2, [r7, #8]
 8002832:	429a      	cmp	r2, r3
 8002834:	d302      	bcc.n	800283c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d11c      	bne.n	8002876 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 800283c:	2017      	movs	r0, #23
 800283e:	183b      	adds	r3, r7, r0
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d117      	bne.n	8002876 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	2204      	movs	r2, #4
 800284e:	4013      	ands	r3, r2
 8002850:	2b04      	cmp	r3, #4
 8002852:	d010      	beq.n	8002876 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002858:	2220      	movs	r2, #32
 800285a:	431a      	orrs	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2241      	movs	r2, #65	; 0x41
 8002864:	2120      	movs	r1, #32
 8002866:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2240      	movs	r2, #64	; 0x40
 800286c:	2100      	movs	r1, #0
 800286e:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8002870:	183b      	adds	r3, r7, r0
 8002872:	2201      	movs	r2, #1
 8002874:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	2204      	movs	r2, #4
 800287e:	4013      	ands	r3, r2
 8002880:	2b04      	cmp	r3, #4
 8002882:	d005      	beq.n	8002890 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8002884:	2317      	movs	r3, #23
 8002886:	18fb      	adds	r3, r7, r3
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d100      	bne.n	8002890 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 800288e:	e776      	b.n	800277e <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8002890:	2317      	movs	r3, #23
 8002892:	18fb      	adds	r3, r7, r3
 8002894:	781b      	ldrb	r3, [r3, #0]
}
 8002896:	0018      	movs	r0, r3
 8002898:	46bd      	mov	sp, r7
 800289a:	b006      	add	sp, #24
 800289c:	bd80      	pop	{r7, pc}
 800289e:	46c0      	nop			; (mov r8, r8)
 80028a0:	fe00e800 	.word	0xfe00e800

080028a4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028a4:	b590      	push	{r4, r7, lr}
 80028a6:	b08b      	sub	sp, #44	; 0x2c
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028b0:	2327      	movs	r3, #39	; 0x27
 80028b2:	18fb      	adds	r3, r7, r3
 80028b4:	2200      	movs	r2, #0
 80028b6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80028c0:	2300      	movs	r3, #0
 80028c2:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	2210      	movs	r2, #16
 80028cc:	4013      	ands	r3, r2
 80028ce:	d100      	bne.n	80028d2 <I2C_IsErrorOccurred+0x2e>
 80028d0:	e082      	b.n	80029d8 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2210      	movs	r2, #16
 80028d8:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80028da:	e060      	b.n	800299e <I2C_IsErrorOccurred+0xfa>
 80028dc:	2427      	movs	r4, #39	; 0x27
 80028de:	193b      	adds	r3, r7, r4
 80028e0:	193a      	adds	r2, r7, r4
 80028e2:	7812      	ldrb	r2, [r2, #0]
 80028e4:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	3301      	adds	r3, #1
 80028ea:	d058      	beq.n	800299e <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80028ec:	f7ff f90e 	bl	8001b0c <HAL_GetTick>
 80028f0:	0002      	movs	r2, r0
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	68ba      	ldr	r2, [r7, #8]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d306      	bcc.n	800290a <I2C_IsErrorOccurred+0x66>
 80028fc:	193b      	adds	r3, r7, r4
 80028fe:	193a      	adds	r2, r7, r4
 8002900:	7812      	ldrb	r2, [r2, #0]
 8002902:	701a      	strb	r2, [r3, #0]
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d149      	bne.n	800299e <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	2380      	movs	r3, #128	; 0x80
 8002912:	01db      	lsls	r3, r3, #7
 8002914:	4013      	ands	r3, r2
 8002916:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002918:	2013      	movs	r0, #19
 800291a:	183b      	adds	r3, r7, r0
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	2142      	movs	r1, #66	; 0x42
 8002920:	5c52      	ldrb	r2, [r2, r1]
 8002922:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	699a      	ldr	r2, [r3, #24]
 800292a:	2380      	movs	r3, #128	; 0x80
 800292c:	021b      	lsls	r3, r3, #8
 800292e:	401a      	ands	r2, r3
 8002930:	2380      	movs	r3, #128	; 0x80
 8002932:	021b      	lsls	r3, r3, #8
 8002934:	429a      	cmp	r2, r3
 8002936:	d126      	bne.n	8002986 <I2C_IsErrorOccurred+0xe2>
 8002938:	697a      	ldr	r2, [r7, #20]
 800293a:	2380      	movs	r3, #128	; 0x80
 800293c:	01db      	lsls	r3, r3, #7
 800293e:	429a      	cmp	r2, r3
 8002940:	d021      	beq.n	8002986 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8002942:	183b      	adds	r3, r7, r0
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	2b20      	cmp	r3, #32
 8002948:	d01d      	beq.n	8002986 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2180      	movs	r1, #128	; 0x80
 8002956:	01c9      	lsls	r1, r1, #7
 8002958:	430a      	orrs	r2, r1
 800295a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800295c:	f7ff f8d6 	bl	8001b0c <HAL_GetTick>
 8002960:	0003      	movs	r3, r0
 8002962:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002964:	e00f      	b.n	8002986 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002966:	f7ff f8d1 	bl	8001b0c <HAL_GetTick>
 800296a:	0002      	movs	r2, r0
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	2b19      	cmp	r3, #25
 8002972:	d908      	bls.n	8002986 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002974:	6a3b      	ldr	r3, [r7, #32]
 8002976:	2220      	movs	r2, #32
 8002978:	4313      	orrs	r3, r2
 800297a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800297c:	2327      	movs	r3, #39	; 0x27
 800297e:	18fb      	adds	r3, r7, r3
 8002980:	2201      	movs	r2, #1
 8002982:	701a      	strb	r2, [r3, #0]

              break;
 8002984:	e00b      	b.n	800299e <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	2220      	movs	r2, #32
 800298e:	4013      	ands	r3, r2
 8002990:	2127      	movs	r1, #39	; 0x27
 8002992:	187a      	adds	r2, r7, r1
 8002994:	1879      	adds	r1, r7, r1
 8002996:	7809      	ldrb	r1, [r1, #0]
 8002998:	7011      	strb	r1, [r2, #0]
 800299a:	2b20      	cmp	r3, #32
 800299c:	d1e3      	bne.n	8002966 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	2220      	movs	r2, #32
 80029a6:	4013      	ands	r3, r2
 80029a8:	2b20      	cmp	r3, #32
 80029aa:	d004      	beq.n	80029b6 <I2C_IsErrorOccurred+0x112>
 80029ac:	2327      	movs	r3, #39	; 0x27
 80029ae:	18fb      	adds	r3, r7, r3
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d092      	beq.n	80028dc <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80029b6:	2327      	movs	r3, #39	; 0x27
 80029b8:	18fb      	adds	r3, r7, r3
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d103      	bne.n	80029c8 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2220      	movs	r2, #32
 80029c6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80029c8:	6a3b      	ldr	r3, [r7, #32]
 80029ca:	2204      	movs	r2, #4
 80029cc:	4313      	orrs	r3, r2
 80029ce:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80029d0:	2327      	movs	r3, #39	; 0x27
 80029d2:	18fb      	adds	r3, r7, r3
 80029d4:	2201      	movs	r2, #1
 80029d6:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	2380      	movs	r3, #128	; 0x80
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	4013      	ands	r3, r2
 80029e8:	d00c      	beq.n	8002a04 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80029ea:	6a3b      	ldr	r3, [r7, #32]
 80029ec:	2201      	movs	r2, #1
 80029ee:	4313      	orrs	r3, r2
 80029f0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2280      	movs	r2, #128	; 0x80
 80029f8:	0052      	lsls	r2, r2, #1
 80029fa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029fc:	2327      	movs	r3, #39	; 0x27
 80029fe:	18fb      	adds	r3, r7, r3
 8002a00:	2201      	movs	r2, #1
 8002a02:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	2380      	movs	r3, #128	; 0x80
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	d00c      	beq.n	8002a28 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002a0e:	6a3b      	ldr	r3, [r7, #32]
 8002a10:	2208      	movs	r2, #8
 8002a12:	4313      	orrs	r3, r2
 8002a14:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2280      	movs	r2, #128	; 0x80
 8002a1c:	00d2      	lsls	r2, r2, #3
 8002a1e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a20:	2327      	movs	r3, #39	; 0x27
 8002a22:	18fb      	adds	r3, r7, r3
 8002a24:	2201      	movs	r2, #1
 8002a26:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	2380      	movs	r3, #128	; 0x80
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	4013      	ands	r3, r2
 8002a30:	d00c      	beq.n	8002a4c <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002a32:	6a3b      	ldr	r3, [r7, #32]
 8002a34:	2202      	movs	r2, #2
 8002a36:	4313      	orrs	r3, r2
 8002a38:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2280      	movs	r2, #128	; 0x80
 8002a40:	0092      	lsls	r2, r2, #2
 8002a42:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a44:	2327      	movs	r3, #39	; 0x27
 8002a46:	18fb      	adds	r3, r7, r3
 8002a48:	2201      	movs	r2, #1
 8002a4a:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002a4c:	2327      	movs	r3, #39	; 0x27
 8002a4e:	18fb      	adds	r3, r7, r3
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d01d      	beq.n	8002a92 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	0018      	movs	r0, r3
 8002a5a:	f7ff fd81 	bl	8002560 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	685a      	ldr	r2, [r3, #4]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	490d      	ldr	r1, [pc, #52]	; (8002aa0 <I2C_IsErrorOccurred+0x1fc>)
 8002a6a:	400a      	ands	r2, r1
 8002a6c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a72:	6a3b      	ldr	r3, [r7, #32]
 8002a74:	431a      	orrs	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2241      	movs	r2, #65	; 0x41
 8002a7e:	2120      	movs	r1, #32
 8002a80:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2242      	movs	r2, #66	; 0x42
 8002a86:	2100      	movs	r1, #0
 8002a88:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2240      	movs	r2, #64	; 0x40
 8002a8e:	2100      	movs	r1, #0
 8002a90:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002a92:	2327      	movs	r3, #39	; 0x27
 8002a94:	18fb      	adds	r3, r7, r3
 8002a96:	781b      	ldrb	r3, [r3, #0]
}
 8002a98:	0018      	movs	r0, r3
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	b00b      	add	sp, #44	; 0x2c
 8002a9e:	bd90      	pop	{r4, r7, pc}
 8002aa0:	fe00e800 	.word	0xfe00e800

08002aa4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002aa4:	b590      	push	{r4, r7, lr}
 8002aa6:	b087      	sub	sp, #28
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	0008      	movs	r0, r1
 8002aae:	0011      	movs	r1, r2
 8002ab0:	607b      	str	r3, [r7, #4]
 8002ab2:	240a      	movs	r4, #10
 8002ab4:	193b      	adds	r3, r7, r4
 8002ab6:	1c02      	adds	r2, r0, #0
 8002ab8:	801a      	strh	r2, [r3, #0]
 8002aba:	2009      	movs	r0, #9
 8002abc:	183b      	adds	r3, r7, r0
 8002abe:	1c0a      	adds	r2, r1, #0
 8002ac0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ac2:	193b      	adds	r3, r7, r4
 8002ac4:	881b      	ldrh	r3, [r3, #0]
 8002ac6:	059b      	lsls	r3, r3, #22
 8002ac8:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002aca:	183b      	adds	r3, r7, r0
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	0419      	lsls	r1, r3, #16
 8002ad0:	23ff      	movs	r3, #255	; 0xff
 8002ad2:	041b      	lsls	r3, r3, #16
 8002ad4:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ad6:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	085b      	lsrs	r3, r3, #1
 8002ae4:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002aee:	0d51      	lsrs	r1, r2, #21
 8002af0:	2280      	movs	r2, #128	; 0x80
 8002af2:	00d2      	lsls	r2, r2, #3
 8002af4:	400a      	ands	r2, r1
 8002af6:	4907      	ldr	r1, [pc, #28]	; (8002b14 <I2C_TransferConfig+0x70>)
 8002af8:	430a      	orrs	r2, r1
 8002afa:	43d2      	mvns	r2, r2
 8002afc:	401a      	ands	r2, r3
 8002afe:	0011      	movs	r1, r2
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	697a      	ldr	r2, [r7, #20]
 8002b06:	430a      	orrs	r2, r1
 8002b08:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002b0a:	46c0      	nop			; (mov r8, r8)
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	b007      	add	sp, #28
 8002b10:	bd90      	pop	{r4, r7, pc}
 8002b12:	46c0      	nop			; (mov r8, r8)
 8002b14:	03ff63ff 	.word	0x03ff63ff

08002b18 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2241      	movs	r2, #65	; 0x41
 8002b26:	5c9b      	ldrb	r3, [r3, r2]
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b20      	cmp	r3, #32
 8002b2c:	d138      	bne.n	8002ba0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2240      	movs	r2, #64	; 0x40
 8002b32:	5c9b      	ldrb	r3, [r3, r2]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d101      	bne.n	8002b3c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b38:	2302      	movs	r3, #2
 8002b3a:	e032      	b.n	8002ba2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2240      	movs	r2, #64	; 0x40
 8002b40:	2101      	movs	r1, #1
 8002b42:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2241      	movs	r2, #65	; 0x41
 8002b48:	2124      	movs	r1, #36	; 0x24
 8002b4a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2101      	movs	r1, #1
 8002b58:	438a      	bics	r2, r1
 8002b5a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4911      	ldr	r1, [pc, #68]	; (8002bac <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002b68:	400a      	ands	r2, r1
 8002b6a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6819      	ldr	r1, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	683a      	ldr	r2, [r7, #0]
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2101      	movs	r1, #1
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2241      	movs	r2, #65	; 0x41
 8002b90:	2120      	movs	r1, #32
 8002b92:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2240      	movs	r2, #64	; 0x40
 8002b98:	2100      	movs	r1, #0
 8002b9a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	e000      	b.n	8002ba2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ba0:	2302      	movs	r3, #2
  }
}
 8002ba2:	0018      	movs	r0, r3
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	b002      	add	sp, #8
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	46c0      	nop			; (mov r8, r8)
 8002bac:	ffffefff 	.word	0xffffefff

08002bb0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2241      	movs	r2, #65	; 0x41
 8002bbe:	5c9b      	ldrb	r3, [r3, r2]
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b20      	cmp	r3, #32
 8002bc4:	d139      	bne.n	8002c3a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2240      	movs	r2, #64	; 0x40
 8002bca:	5c9b      	ldrb	r3, [r3, r2]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d101      	bne.n	8002bd4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	e033      	b.n	8002c3c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2240      	movs	r2, #64	; 0x40
 8002bd8:	2101      	movs	r1, #1
 8002bda:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2241      	movs	r2, #65	; 0x41
 8002be0:	2124      	movs	r1, #36	; 0x24
 8002be2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2101      	movs	r1, #1
 8002bf0:	438a      	bics	r2, r1
 8002bf2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	4a11      	ldr	r2, [pc, #68]	; (8002c44 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002c00:	4013      	ands	r3, r2
 8002c02:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	021b      	lsls	r3, r3, #8
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2101      	movs	r1, #1
 8002c22:	430a      	orrs	r2, r1
 8002c24:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2241      	movs	r2, #65	; 0x41
 8002c2a:	2120      	movs	r1, #32
 8002c2c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2240      	movs	r2, #64	; 0x40
 8002c32:	2100      	movs	r1, #0
 8002c34:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002c36:	2300      	movs	r3, #0
 8002c38:	e000      	b.n	8002c3c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c3a:	2302      	movs	r3, #2
  }
}
 8002c3c:	0018      	movs	r0, r3
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	b004      	add	sp, #16
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	fffff0ff 	.word	0xfffff0ff

08002c48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b088      	sub	sp, #32
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e301      	b.n	800325e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	4013      	ands	r3, r2
 8002c62:	d100      	bne.n	8002c66 <HAL_RCC_OscConfig+0x1e>
 8002c64:	e08d      	b.n	8002d82 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002c66:	4bc3      	ldr	r3, [pc, #780]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	220c      	movs	r2, #12
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	d00e      	beq.n	8002c90 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c72:	4bc0      	ldr	r3, [pc, #768]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	220c      	movs	r2, #12
 8002c78:	4013      	ands	r3, r2
 8002c7a:	2b08      	cmp	r3, #8
 8002c7c:	d116      	bne.n	8002cac <HAL_RCC_OscConfig+0x64>
 8002c7e:	4bbd      	ldr	r3, [pc, #756]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002c80:	685a      	ldr	r2, [r3, #4]
 8002c82:	2380      	movs	r3, #128	; 0x80
 8002c84:	025b      	lsls	r3, r3, #9
 8002c86:	401a      	ands	r2, r3
 8002c88:	2380      	movs	r3, #128	; 0x80
 8002c8a:	025b      	lsls	r3, r3, #9
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d10d      	bne.n	8002cac <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c90:	4bb8      	ldr	r3, [pc, #736]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	2380      	movs	r3, #128	; 0x80
 8002c96:	029b      	lsls	r3, r3, #10
 8002c98:	4013      	ands	r3, r2
 8002c9a:	d100      	bne.n	8002c9e <HAL_RCC_OscConfig+0x56>
 8002c9c:	e070      	b.n	8002d80 <HAL_RCC_OscConfig+0x138>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d000      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x60>
 8002ca6:	e06b      	b.n	8002d80 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e2d8      	b.n	800325e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d107      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x7c>
 8002cb4:	4baf      	ldr	r3, [pc, #700]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	4bae      	ldr	r3, [pc, #696]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002cba:	2180      	movs	r1, #128	; 0x80
 8002cbc:	0249      	lsls	r1, r1, #9
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	601a      	str	r2, [r3, #0]
 8002cc2:	e02f      	b.n	8002d24 <HAL_RCC_OscConfig+0xdc>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10c      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x9e>
 8002ccc:	4ba9      	ldr	r3, [pc, #676]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	4ba8      	ldr	r3, [pc, #672]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002cd2:	49a9      	ldr	r1, [pc, #676]	; (8002f78 <HAL_RCC_OscConfig+0x330>)
 8002cd4:	400a      	ands	r2, r1
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	4ba6      	ldr	r3, [pc, #664]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	4ba5      	ldr	r3, [pc, #660]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002cde:	49a7      	ldr	r1, [pc, #668]	; (8002f7c <HAL_RCC_OscConfig+0x334>)
 8002ce0:	400a      	ands	r2, r1
 8002ce2:	601a      	str	r2, [r3, #0]
 8002ce4:	e01e      	b.n	8002d24 <HAL_RCC_OscConfig+0xdc>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	2b05      	cmp	r3, #5
 8002cec:	d10e      	bne.n	8002d0c <HAL_RCC_OscConfig+0xc4>
 8002cee:	4ba1      	ldr	r3, [pc, #644]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	4ba0      	ldr	r3, [pc, #640]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002cf4:	2180      	movs	r1, #128	; 0x80
 8002cf6:	02c9      	lsls	r1, r1, #11
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	601a      	str	r2, [r3, #0]
 8002cfc:	4b9d      	ldr	r3, [pc, #628]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	4b9c      	ldr	r3, [pc, #624]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002d02:	2180      	movs	r1, #128	; 0x80
 8002d04:	0249      	lsls	r1, r1, #9
 8002d06:	430a      	orrs	r2, r1
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	e00b      	b.n	8002d24 <HAL_RCC_OscConfig+0xdc>
 8002d0c:	4b99      	ldr	r3, [pc, #612]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	4b98      	ldr	r3, [pc, #608]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002d12:	4999      	ldr	r1, [pc, #612]	; (8002f78 <HAL_RCC_OscConfig+0x330>)
 8002d14:	400a      	ands	r2, r1
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	4b96      	ldr	r3, [pc, #600]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	4b95      	ldr	r3, [pc, #596]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002d1e:	4997      	ldr	r1, [pc, #604]	; (8002f7c <HAL_RCC_OscConfig+0x334>)
 8002d20:	400a      	ands	r2, r1
 8002d22:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d014      	beq.n	8002d56 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2c:	f7fe feee 	bl	8001b0c <HAL_GetTick>
 8002d30:	0003      	movs	r3, r0
 8002d32:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d34:	e008      	b.n	8002d48 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d36:	f7fe fee9 	bl	8001b0c <HAL_GetTick>
 8002d3a:	0002      	movs	r2, r0
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	2b64      	cmp	r3, #100	; 0x64
 8002d42:	d901      	bls.n	8002d48 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e28a      	b.n	800325e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d48:	4b8a      	ldr	r3, [pc, #552]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	2380      	movs	r3, #128	; 0x80
 8002d4e:	029b      	lsls	r3, r3, #10
 8002d50:	4013      	ands	r3, r2
 8002d52:	d0f0      	beq.n	8002d36 <HAL_RCC_OscConfig+0xee>
 8002d54:	e015      	b.n	8002d82 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d56:	f7fe fed9 	bl	8001b0c <HAL_GetTick>
 8002d5a:	0003      	movs	r3, r0
 8002d5c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d60:	f7fe fed4 	bl	8001b0c <HAL_GetTick>
 8002d64:	0002      	movs	r2, r0
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b64      	cmp	r3, #100	; 0x64
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e275      	b.n	800325e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d72:	4b80      	ldr	r3, [pc, #512]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	2380      	movs	r3, #128	; 0x80
 8002d78:	029b      	lsls	r3, r3, #10
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	d1f0      	bne.n	8002d60 <HAL_RCC_OscConfig+0x118>
 8002d7e:	e000      	b.n	8002d82 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d80:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2202      	movs	r2, #2
 8002d88:	4013      	ands	r3, r2
 8002d8a:	d100      	bne.n	8002d8e <HAL_RCC_OscConfig+0x146>
 8002d8c:	e069      	b.n	8002e62 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002d8e:	4b79      	ldr	r3, [pc, #484]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	220c      	movs	r2, #12
 8002d94:	4013      	ands	r3, r2
 8002d96:	d00b      	beq.n	8002db0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002d98:	4b76      	ldr	r3, [pc, #472]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	220c      	movs	r2, #12
 8002d9e:	4013      	ands	r3, r2
 8002da0:	2b08      	cmp	r3, #8
 8002da2:	d11c      	bne.n	8002dde <HAL_RCC_OscConfig+0x196>
 8002da4:	4b73      	ldr	r3, [pc, #460]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	2380      	movs	r3, #128	; 0x80
 8002daa:	025b      	lsls	r3, r3, #9
 8002dac:	4013      	ands	r3, r2
 8002dae:	d116      	bne.n	8002dde <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002db0:	4b70      	ldr	r3, [pc, #448]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2202      	movs	r2, #2
 8002db6:	4013      	ands	r3, r2
 8002db8:	d005      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x17e>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d001      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e24b      	b.n	800325e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dc6:	4b6b      	ldr	r3, [pc, #428]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	22f8      	movs	r2, #248	; 0xf8
 8002dcc:	4393      	bics	r3, r2
 8002dce:	0019      	movs	r1, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	00da      	lsls	r2, r3, #3
 8002dd6:	4b67      	ldr	r3, [pc, #412]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ddc:	e041      	b.n	8002e62 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d024      	beq.n	8002e30 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002de6:	4b63      	ldr	r3, [pc, #396]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	4b62      	ldr	r3, [pc, #392]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002dec:	2101      	movs	r1, #1
 8002dee:	430a      	orrs	r2, r1
 8002df0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df2:	f7fe fe8b 	bl	8001b0c <HAL_GetTick>
 8002df6:	0003      	movs	r3, r0
 8002df8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dfa:	e008      	b.n	8002e0e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dfc:	f7fe fe86 	bl	8001b0c <HAL_GetTick>
 8002e00:	0002      	movs	r2, r0
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e227      	b.n	800325e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e0e:	4b59      	ldr	r3, [pc, #356]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2202      	movs	r2, #2
 8002e14:	4013      	ands	r3, r2
 8002e16:	d0f1      	beq.n	8002dfc <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e18:	4b56      	ldr	r3, [pc, #344]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	22f8      	movs	r2, #248	; 0xf8
 8002e1e:	4393      	bics	r3, r2
 8002e20:	0019      	movs	r1, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	00da      	lsls	r2, r3, #3
 8002e28:	4b52      	ldr	r3, [pc, #328]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	e018      	b.n	8002e62 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e30:	4b50      	ldr	r3, [pc, #320]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	4b4f      	ldr	r3, [pc, #316]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002e36:	2101      	movs	r1, #1
 8002e38:	438a      	bics	r2, r1
 8002e3a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3c:	f7fe fe66 	bl	8001b0c <HAL_GetTick>
 8002e40:	0003      	movs	r3, r0
 8002e42:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e44:	e008      	b.n	8002e58 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e46:	f7fe fe61 	bl	8001b0c <HAL_GetTick>
 8002e4a:	0002      	movs	r2, r0
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d901      	bls.n	8002e58 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e202      	b.n	800325e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e58:	4b46      	ldr	r3, [pc, #280]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2202      	movs	r2, #2
 8002e5e:	4013      	ands	r3, r2
 8002e60:	d1f1      	bne.n	8002e46 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2208      	movs	r2, #8
 8002e68:	4013      	ands	r3, r2
 8002e6a:	d036      	beq.n	8002eda <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	69db      	ldr	r3, [r3, #28]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d019      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e74:	4b3f      	ldr	r3, [pc, #252]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002e76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e78:	4b3e      	ldr	r3, [pc, #248]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002e7a:	2101      	movs	r1, #1
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e80:	f7fe fe44 	bl	8001b0c <HAL_GetTick>
 8002e84:	0003      	movs	r3, r0
 8002e86:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e88:	e008      	b.n	8002e9c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e8a:	f7fe fe3f 	bl	8001b0c <HAL_GetTick>
 8002e8e:	0002      	movs	r2, r0
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d901      	bls.n	8002e9c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e1e0      	b.n	800325e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e9c:	4b35      	ldr	r3, [pc, #212]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea0:	2202      	movs	r2, #2
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	d0f1      	beq.n	8002e8a <HAL_RCC_OscConfig+0x242>
 8002ea6:	e018      	b.n	8002eda <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ea8:	4b32      	ldr	r3, [pc, #200]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002eaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002eac:	4b31      	ldr	r3, [pc, #196]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002eae:	2101      	movs	r1, #1
 8002eb0:	438a      	bics	r2, r1
 8002eb2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eb4:	f7fe fe2a 	bl	8001b0c <HAL_GetTick>
 8002eb8:	0003      	movs	r3, r0
 8002eba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ebc:	e008      	b.n	8002ed0 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ebe:	f7fe fe25 	bl	8001b0c <HAL_GetTick>
 8002ec2:	0002      	movs	r2, r0
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e1c6      	b.n	800325e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ed0:	4b28      	ldr	r3, [pc, #160]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed4:	2202      	movs	r2, #2
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	d1f1      	bne.n	8002ebe <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2204      	movs	r2, #4
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	d100      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x29e>
 8002ee4:	e0b4      	b.n	8003050 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ee6:	201f      	movs	r0, #31
 8002ee8:	183b      	adds	r3, r7, r0
 8002eea:	2200      	movs	r2, #0
 8002eec:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eee:	4b21      	ldr	r3, [pc, #132]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002ef0:	69da      	ldr	r2, [r3, #28]
 8002ef2:	2380      	movs	r3, #128	; 0x80
 8002ef4:	055b      	lsls	r3, r3, #21
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	d110      	bne.n	8002f1c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002efa:	4b1e      	ldr	r3, [pc, #120]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002efc:	69da      	ldr	r2, [r3, #28]
 8002efe:	4b1d      	ldr	r3, [pc, #116]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002f00:	2180      	movs	r1, #128	; 0x80
 8002f02:	0549      	lsls	r1, r1, #21
 8002f04:	430a      	orrs	r2, r1
 8002f06:	61da      	str	r2, [r3, #28]
 8002f08:	4b1a      	ldr	r3, [pc, #104]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002f0a:	69da      	ldr	r2, [r3, #28]
 8002f0c:	2380      	movs	r3, #128	; 0x80
 8002f0e:	055b      	lsls	r3, r3, #21
 8002f10:	4013      	ands	r3, r2
 8002f12:	60fb      	str	r3, [r7, #12]
 8002f14:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002f16:	183b      	adds	r3, r7, r0
 8002f18:	2201      	movs	r2, #1
 8002f1a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f1c:	4b18      	ldr	r3, [pc, #96]	; (8002f80 <HAL_RCC_OscConfig+0x338>)
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	2380      	movs	r3, #128	; 0x80
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	4013      	ands	r3, r2
 8002f26:	d11a      	bne.n	8002f5e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f28:	4b15      	ldr	r3, [pc, #84]	; (8002f80 <HAL_RCC_OscConfig+0x338>)
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	4b14      	ldr	r3, [pc, #80]	; (8002f80 <HAL_RCC_OscConfig+0x338>)
 8002f2e:	2180      	movs	r1, #128	; 0x80
 8002f30:	0049      	lsls	r1, r1, #1
 8002f32:	430a      	orrs	r2, r1
 8002f34:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f36:	f7fe fde9 	bl	8001b0c <HAL_GetTick>
 8002f3a:	0003      	movs	r3, r0
 8002f3c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f3e:	e008      	b.n	8002f52 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f40:	f7fe fde4 	bl	8001b0c <HAL_GetTick>
 8002f44:	0002      	movs	r2, r0
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b64      	cmp	r3, #100	; 0x64
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e185      	b.n	800325e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f52:	4b0b      	ldr	r3, [pc, #44]	; (8002f80 <HAL_RCC_OscConfig+0x338>)
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	2380      	movs	r3, #128	; 0x80
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	d0f0      	beq.n	8002f40 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d10e      	bne.n	8002f84 <HAL_RCC_OscConfig+0x33c>
 8002f66:	4b03      	ldr	r3, [pc, #12]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002f68:	6a1a      	ldr	r2, [r3, #32]
 8002f6a:	4b02      	ldr	r3, [pc, #8]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002f6c:	2101      	movs	r1, #1
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	621a      	str	r2, [r3, #32]
 8002f72:	e035      	b.n	8002fe0 <HAL_RCC_OscConfig+0x398>
 8002f74:	40021000 	.word	0x40021000
 8002f78:	fffeffff 	.word	0xfffeffff
 8002f7c:	fffbffff 	.word	0xfffbffff
 8002f80:	40007000 	.word	0x40007000
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d10c      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x35e>
 8002f8c:	4bb6      	ldr	r3, [pc, #728]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 8002f8e:	6a1a      	ldr	r2, [r3, #32]
 8002f90:	4bb5      	ldr	r3, [pc, #724]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 8002f92:	2101      	movs	r1, #1
 8002f94:	438a      	bics	r2, r1
 8002f96:	621a      	str	r2, [r3, #32]
 8002f98:	4bb3      	ldr	r3, [pc, #716]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 8002f9a:	6a1a      	ldr	r2, [r3, #32]
 8002f9c:	4bb2      	ldr	r3, [pc, #712]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 8002f9e:	2104      	movs	r1, #4
 8002fa0:	438a      	bics	r2, r1
 8002fa2:	621a      	str	r2, [r3, #32]
 8002fa4:	e01c      	b.n	8002fe0 <HAL_RCC_OscConfig+0x398>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	2b05      	cmp	r3, #5
 8002fac:	d10c      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x380>
 8002fae:	4bae      	ldr	r3, [pc, #696]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 8002fb0:	6a1a      	ldr	r2, [r3, #32]
 8002fb2:	4bad      	ldr	r3, [pc, #692]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 8002fb4:	2104      	movs	r1, #4
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	621a      	str	r2, [r3, #32]
 8002fba:	4bab      	ldr	r3, [pc, #684]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 8002fbc:	6a1a      	ldr	r2, [r3, #32]
 8002fbe:	4baa      	ldr	r3, [pc, #680]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 8002fc0:	2101      	movs	r1, #1
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	621a      	str	r2, [r3, #32]
 8002fc6:	e00b      	b.n	8002fe0 <HAL_RCC_OscConfig+0x398>
 8002fc8:	4ba7      	ldr	r3, [pc, #668]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 8002fca:	6a1a      	ldr	r2, [r3, #32]
 8002fcc:	4ba6      	ldr	r3, [pc, #664]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 8002fce:	2101      	movs	r1, #1
 8002fd0:	438a      	bics	r2, r1
 8002fd2:	621a      	str	r2, [r3, #32]
 8002fd4:	4ba4      	ldr	r3, [pc, #656]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 8002fd6:	6a1a      	ldr	r2, [r3, #32]
 8002fd8:	4ba3      	ldr	r3, [pc, #652]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 8002fda:	2104      	movs	r1, #4
 8002fdc:	438a      	bics	r2, r1
 8002fde:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d014      	beq.n	8003012 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fe8:	f7fe fd90 	bl	8001b0c <HAL_GetTick>
 8002fec:	0003      	movs	r3, r0
 8002fee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ff0:	e009      	b.n	8003006 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ff2:	f7fe fd8b 	bl	8001b0c <HAL_GetTick>
 8002ff6:	0002      	movs	r2, r0
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	4a9b      	ldr	r2, [pc, #620]	; (800326c <HAL_RCC_OscConfig+0x624>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e12b      	b.n	800325e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003006:	4b98      	ldr	r3, [pc, #608]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	2202      	movs	r2, #2
 800300c:	4013      	ands	r3, r2
 800300e:	d0f0      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x3aa>
 8003010:	e013      	b.n	800303a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003012:	f7fe fd7b 	bl	8001b0c <HAL_GetTick>
 8003016:	0003      	movs	r3, r0
 8003018:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800301a:	e009      	b.n	8003030 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800301c:	f7fe fd76 	bl	8001b0c <HAL_GetTick>
 8003020:	0002      	movs	r2, r0
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	4a91      	ldr	r2, [pc, #580]	; (800326c <HAL_RCC_OscConfig+0x624>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d901      	bls.n	8003030 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e116      	b.n	800325e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003030:	4b8d      	ldr	r3, [pc, #564]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 8003032:	6a1b      	ldr	r3, [r3, #32]
 8003034:	2202      	movs	r2, #2
 8003036:	4013      	ands	r3, r2
 8003038:	d1f0      	bne.n	800301c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800303a:	231f      	movs	r3, #31
 800303c:	18fb      	adds	r3, r7, r3
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d105      	bne.n	8003050 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003044:	4b88      	ldr	r3, [pc, #544]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 8003046:	69da      	ldr	r2, [r3, #28]
 8003048:	4b87      	ldr	r3, [pc, #540]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 800304a:	4989      	ldr	r1, [pc, #548]	; (8003270 <HAL_RCC_OscConfig+0x628>)
 800304c:	400a      	ands	r2, r1
 800304e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2210      	movs	r2, #16
 8003056:	4013      	ands	r3, r2
 8003058:	d063      	beq.n	8003122 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d12a      	bne.n	80030b8 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003062:	4b81      	ldr	r3, [pc, #516]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 8003064:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003066:	4b80      	ldr	r3, [pc, #512]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 8003068:	2104      	movs	r1, #4
 800306a:	430a      	orrs	r2, r1
 800306c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800306e:	4b7e      	ldr	r3, [pc, #504]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 8003070:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003072:	4b7d      	ldr	r3, [pc, #500]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 8003074:	2101      	movs	r1, #1
 8003076:	430a      	orrs	r2, r1
 8003078:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800307a:	f7fe fd47 	bl	8001b0c <HAL_GetTick>
 800307e:	0003      	movs	r3, r0
 8003080:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003082:	e008      	b.n	8003096 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003084:	f7fe fd42 	bl	8001b0c <HAL_GetTick>
 8003088:	0002      	movs	r2, r0
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e0e3      	b.n	800325e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003096:	4b74      	ldr	r3, [pc, #464]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 8003098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800309a:	2202      	movs	r2, #2
 800309c:	4013      	ands	r3, r2
 800309e:	d0f1      	beq.n	8003084 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80030a0:	4b71      	ldr	r3, [pc, #452]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 80030a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030a4:	22f8      	movs	r2, #248	; 0xf8
 80030a6:	4393      	bics	r3, r2
 80030a8:	0019      	movs	r1, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	00da      	lsls	r2, r3, #3
 80030b0:	4b6d      	ldr	r3, [pc, #436]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 80030b2:	430a      	orrs	r2, r1
 80030b4:	635a      	str	r2, [r3, #52]	; 0x34
 80030b6:	e034      	b.n	8003122 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	695b      	ldr	r3, [r3, #20]
 80030bc:	3305      	adds	r3, #5
 80030be:	d111      	bne.n	80030e4 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80030c0:	4b69      	ldr	r3, [pc, #420]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 80030c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030c4:	4b68      	ldr	r3, [pc, #416]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 80030c6:	2104      	movs	r1, #4
 80030c8:	438a      	bics	r2, r1
 80030ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80030cc:	4b66      	ldr	r3, [pc, #408]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 80030ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030d0:	22f8      	movs	r2, #248	; 0xf8
 80030d2:	4393      	bics	r3, r2
 80030d4:	0019      	movs	r1, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	00da      	lsls	r2, r3, #3
 80030dc:	4b62      	ldr	r3, [pc, #392]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 80030de:	430a      	orrs	r2, r1
 80030e0:	635a      	str	r2, [r3, #52]	; 0x34
 80030e2:	e01e      	b.n	8003122 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80030e4:	4b60      	ldr	r3, [pc, #384]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 80030e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030e8:	4b5f      	ldr	r3, [pc, #380]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 80030ea:	2104      	movs	r1, #4
 80030ec:	430a      	orrs	r2, r1
 80030ee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80030f0:	4b5d      	ldr	r3, [pc, #372]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 80030f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030f4:	4b5c      	ldr	r3, [pc, #368]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 80030f6:	2101      	movs	r1, #1
 80030f8:	438a      	bics	r2, r1
 80030fa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030fc:	f7fe fd06 	bl	8001b0c <HAL_GetTick>
 8003100:	0003      	movs	r3, r0
 8003102:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003104:	e008      	b.n	8003118 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003106:	f7fe fd01 	bl	8001b0c <HAL_GetTick>
 800310a:	0002      	movs	r2, r0
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d901      	bls.n	8003118 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e0a2      	b.n	800325e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003118:	4b53      	ldr	r3, [pc, #332]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 800311a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800311c:	2202      	movs	r2, #2
 800311e:	4013      	ands	r3, r2
 8003120:	d1f1      	bne.n	8003106 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a1b      	ldr	r3, [r3, #32]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d100      	bne.n	800312c <HAL_RCC_OscConfig+0x4e4>
 800312a:	e097      	b.n	800325c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800312c:	4b4e      	ldr	r3, [pc, #312]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	220c      	movs	r2, #12
 8003132:	4013      	ands	r3, r2
 8003134:	2b08      	cmp	r3, #8
 8003136:	d100      	bne.n	800313a <HAL_RCC_OscConfig+0x4f2>
 8003138:	e06b      	b.n	8003212 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a1b      	ldr	r3, [r3, #32]
 800313e:	2b02      	cmp	r3, #2
 8003140:	d14c      	bne.n	80031dc <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003142:	4b49      	ldr	r3, [pc, #292]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	4b48      	ldr	r3, [pc, #288]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 8003148:	494a      	ldr	r1, [pc, #296]	; (8003274 <HAL_RCC_OscConfig+0x62c>)
 800314a:	400a      	ands	r2, r1
 800314c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800314e:	f7fe fcdd 	bl	8001b0c <HAL_GetTick>
 8003152:	0003      	movs	r3, r0
 8003154:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003156:	e008      	b.n	800316a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003158:	f7fe fcd8 	bl	8001b0c <HAL_GetTick>
 800315c:	0002      	movs	r2, r0
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b02      	cmp	r3, #2
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e079      	b.n	800325e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800316a:	4b3f      	ldr	r3, [pc, #252]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	2380      	movs	r3, #128	; 0x80
 8003170:	049b      	lsls	r3, r3, #18
 8003172:	4013      	ands	r3, r2
 8003174:	d1f0      	bne.n	8003158 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003176:	4b3c      	ldr	r3, [pc, #240]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 8003178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800317a:	220f      	movs	r2, #15
 800317c:	4393      	bics	r3, r2
 800317e:	0019      	movs	r1, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003184:	4b38      	ldr	r3, [pc, #224]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 8003186:	430a      	orrs	r2, r1
 8003188:	62da      	str	r2, [r3, #44]	; 0x2c
 800318a:	4b37      	ldr	r3, [pc, #220]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	4a3a      	ldr	r2, [pc, #232]	; (8003278 <HAL_RCC_OscConfig+0x630>)
 8003190:	4013      	ands	r3, r2
 8003192:	0019      	movs	r1, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319c:	431a      	orrs	r2, r3
 800319e:	4b32      	ldr	r3, [pc, #200]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 80031a0:	430a      	orrs	r2, r1
 80031a2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031a4:	4b30      	ldr	r3, [pc, #192]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	4b2f      	ldr	r3, [pc, #188]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 80031aa:	2180      	movs	r1, #128	; 0x80
 80031ac:	0449      	lsls	r1, r1, #17
 80031ae:	430a      	orrs	r2, r1
 80031b0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b2:	f7fe fcab 	bl	8001b0c <HAL_GetTick>
 80031b6:	0003      	movs	r3, r0
 80031b8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031ba:	e008      	b.n	80031ce <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031bc:	f7fe fca6 	bl	8001b0c <HAL_GetTick>
 80031c0:	0002      	movs	r2, r0
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e047      	b.n	800325e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031ce:	4b26      	ldr	r3, [pc, #152]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	2380      	movs	r3, #128	; 0x80
 80031d4:	049b      	lsls	r3, r3, #18
 80031d6:	4013      	ands	r3, r2
 80031d8:	d0f0      	beq.n	80031bc <HAL_RCC_OscConfig+0x574>
 80031da:	e03f      	b.n	800325c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031dc:	4b22      	ldr	r3, [pc, #136]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	4b21      	ldr	r3, [pc, #132]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 80031e2:	4924      	ldr	r1, [pc, #144]	; (8003274 <HAL_RCC_OscConfig+0x62c>)
 80031e4:	400a      	ands	r2, r1
 80031e6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e8:	f7fe fc90 	bl	8001b0c <HAL_GetTick>
 80031ec:	0003      	movs	r3, r0
 80031ee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031f0:	e008      	b.n	8003204 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031f2:	f7fe fc8b 	bl	8001b0c <HAL_GetTick>
 80031f6:	0002      	movs	r2, r0
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d901      	bls.n	8003204 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e02c      	b.n	800325e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003204:	4b18      	ldr	r3, [pc, #96]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	2380      	movs	r3, #128	; 0x80
 800320a:	049b      	lsls	r3, r3, #18
 800320c:	4013      	ands	r3, r2
 800320e:	d1f0      	bne.n	80031f2 <HAL_RCC_OscConfig+0x5aa>
 8003210:	e024      	b.n	800325c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d101      	bne.n	800321e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e01f      	b.n	800325e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800321e:	4b12      	ldr	r3, [pc, #72]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003224:	4b10      	ldr	r3, [pc, #64]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 8003226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003228:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	2380      	movs	r3, #128	; 0x80
 800322e:	025b      	lsls	r3, r3, #9
 8003230:	401a      	ands	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003236:	429a      	cmp	r2, r3
 8003238:	d10e      	bne.n	8003258 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	220f      	movs	r2, #15
 800323e:	401a      	ands	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003244:	429a      	cmp	r2, r3
 8003246:	d107      	bne.n	8003258 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003248:	697a      	ldr	r2, [r7, #20]
 800324a:	23f0      	movs	r3, #240	; 0xf0
 800324c:	039b      	lsls	r3, r3, #14
 800324e:	401a      	ands	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003254:	429a      	cmp	r2, r3
 8003256:	d001      	beq.n	800325c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e000      	b.n	800325e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	0018      	movs	r0, r3
 8003260:	46bd      	mov	sp, r7
 8003262:	b008      	add	sp, #32
 8003264:	bd80      	pop	{r7, pc}
 8003266:	46c0      	nop			; (mov r8, r8)
 8003268:	40021000 	.word	0x40021000
 800326c:	00001388 	.word	0x00001388
 8003270:	efffffff 	.word	0xefffffff
 8003274:	feffffff 	.word	0xfeffffff
 8003278:	ffc2ffff 	.word	0xffc2ffff

0800327c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d101      	bne.n	8003290 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e0b3      	b.n	80033f8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003290:	4b5b      	ldr	r3, [pc, #364]	; (8003400 <HAL_RCC_ClockConfig+0x184>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2201      	movs	r2, #1
 8003296:	4013      	ands	r3, r2
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	429a      	cmp	r2, r3
 800329c:	d911      	bls.n	80032c2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800329e:	4b58      	ldr	r3, [pc, #352]	; (8003400 <HAL_RCC_ClockConfig+0x184>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2201      	movs	r2, #1
 80032a4:	4393      	bics	r3, r2
 80032a6:	0019      	movs	r1, r3
 80032a8:	4b55      	ldr	r3, [pc, #340]	; (8003400 <HAL_RCC_ClockConfig+0x184>)
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	430a      	orrs	r2, r1
 80032ae:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032b0:	4b53      	ldr	r3, [pc, #332]	; (8003400 <HAL_RCC_ClockConfig+0x184>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2201      	movs	r2, #1
 80032b6:	4013      	ands	r3, r2
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d001      	beq.n	80032c2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e09a      	b.n	80033f8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2202      	movs	r2, #2
 80032c8:	4013      	ands	r3, r2
 80032ca:	d015      	beq.n	80032f8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2204      	movs	r2, #4
 80032d2:	4013      	ands	r3, r2
 80032d4:	d006      	beq.n	80032e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80032d6:	4b4b      	ldr	r3, [pc, #300]	; (8003404 <HAL_RCC_ClockConfig+0x188>)
 80032d8:	685a      	ldr	r2, [r3, #4]
 80032da:	4b4a      	ldr	r3, [pc, #296]	; (8003404 <HAL_RCC_ClockConfig+0x188>)
 80032dc:	21e0      	movs	r1, #224	; 0xe0
 80032de:	00c9      	lsls	r1, r1, #3
 80032e0:	430a      	orrs	r2, r1
 80032e2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032e4:	4b47      	ldr	r3, [pc, #284]	; (8003404 <HAL_RCC_ClockConfig+0x188>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	22f0      	movs	r2, #240	; 0xf0
 80032ea:	4393      	bics	r3, r2
 80032ec:	0019      	movs	r1, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	689a      	ldr	r2, [r3, #8]
 80032f2:	4b44      	ldr	r3, [pc, #272]	; (8003404 <HAL_RCC_ClockConfig+0x188>)
 80032f4:	430a      	orrs	r2, r1
 80032f6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2201      	movs	r2, #1
 80032fe:	4013      	ands	r3, r2
 8003300:	d040      	beq.n	8003384 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d107      	bne.n	800331a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800330a:	4b3e      	ldr	r3, [pc, #248]	; (8003404 <HAL_RCC_ClockConfig+0x188>)
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	2380      	movs	r3, #128	; 0x80
 8003310:	029b      	lsls	r3, r3, #10
 8003312:	4013      	ands	r3, r2
 8003314:	d114      	bne.n	8003340 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e06e      	b.n	80033f8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	2b02      	cmp	r3, #2
 8003320:	d107      	bne.n	8003332 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003322:	4b38      	ldr	r3, [pc, #224]	; (8003404 <HAL_RCC_ClockConfig+0x188>)
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	2380      	movs	r3, #128	; 0x80
 8003328:	049b      	lsls	r3, r3, #18
 800332a:	4013      	ands	r3, r2
 800332c:	d108      	bne.n	8003340 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e062      	b.n	80033f8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003332:	4b34      	ldr	r3, [pc, #208]	; (8003404 <HAL_RCC_ClockConfig+0x188>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2202      	movs	r2, #2
 8003338:	4013      	ands	r3, r2
 800333a:	d101      	bne.n	8003340 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e05b      	b.n	80033f8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003340:	4b30      	ldr	r3, [pc, #192]	; (8003404 <HAL_RCC_ClockConfig+0x188>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	2203      	movs	r2, #3
 8003346:	4393      	bics	r3, r2
 8003348:	0019      	movs	r1, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685a      	ldr	r2, [r3, #4]
 800334e:	4b2d      	ldr	r3, [pc, #180]	; (8003404 <HAL_RCC_ClockConfig+0x188>)
 8003350:	430a      	orrs	r2, r1
 8003352:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003354:	f7fe fbda 	bl	8001b0c <HAL_GetTick>
 8003358:	0003      	movs	r3, r0
 800335a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800335c:	e009      	b.n	8003372 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800335e:	f7fe fbd5 	bl	8001b0c <HAL_GetTick>
 8003362:	0002      	movs	r2, r0
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	4a27      	ldr	r2, [pc, #156]	; (8003408 <HAL_RCC_ClockConfig+0x18c>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d901      	bls.n	8003372 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e042      	b.n	80033f8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003372:	4b24      	ldr	r3, [pc, #144]	; (8003404 <HAL_RCC_ClockConfig+0x188>)
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	220c      	movs	r2, #12
 8003378:	401a      	ands	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	429a      	cmp	r2, r3
 8003382:	d1ec      	bne.n	800335e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003384:	4b1e      	ldr	r3, [pc, #120]	; (8003400 <HAL_RCC_ClockConfig+0x184>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2201      	movs	r2, #1
 800338a:	4013      	ands	r3, r2
 800338c:	683a      	ldr	r2, [r7, #0]
 800338e:	429a      	cmp	r2, r3
 8003390:	d211      	bcs.n	80033b6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003392:	4b1b      	ldr	r3, [pc, #108]	; (8003400 <HAL_RCC_ClockConfig+0x184>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2201      	movs	r2, #1
 8003398:	4393      	bics	r3, r2
 800339a:	0019      	movs	r1, r3
 800339c:	4b18      	ldr	r3, [pc, #96]	; (8003400 <HAL_RCC_ClockConfig+0x184>)
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	430a      	orrs	r2, r1
 80033a2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033a4:	4b16      	ldr	r3, [pc, #88]	; (8003400 <HAL_RCC_ClockConfig+0x184>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2201      	movs	r2, #1
 80033aa:	4013      	ands	r3, r2
 80033ac:	683a      	ldr	r2, [r7, #0]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d001      	beq.n	80033b6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e020      	b.n	80033f8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2204      	movs	r2, #4
 80033bc:	4013      	ands	r3, r2
 80033be:	d009      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80033c0:	4b10      	ldr	r3, [pc, #64]	; (8003404 <HAL_RCC_ClockConfig+0x188>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	4a11      	ldr	r2, [pc, #68]	; (800340c <HAL_RCC_ClockConfig+0x190>)
 80033c6:	4013      	ands	r3, r2
 80033c8:	0019      	movs	r1, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	68da      	ldr	r2, [r3, #12]
 80033ce:	4b0d      	ldr	r3, [pc, #52]	; (8003404 <HAL_RCC_ClockConfig+0x188>)
 80033d0:	430a      	orrs	r2, r1
 80033d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80033d4:	f000 f820 	bl	8003418 <HAL_RCC_GetSysClockFreq>
 80033d8:	0001      	movs	r1, r0
 80033da:	4b0a      	ldr	r3, [pc, #40]	; (8003404 <HAL_RCC_ClockConfig+0x188>)
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	091b      	lsrs	r3, r3, #4
 80033e0:	220f      	movs	r2, #15
 80033e2:	4013      	ands	r3, r2
 80033e4:	4a0a      	ldr	r2, [pc, #40]	; (8003410 <HAL_RCC_ClockConfig+0x194>)
 80033e6:	5cd3      	ldrb	r3, [r2, r3]
 80033e8:	000a      	movs	r2, r1
 80033ea:	40da      	lsrs	r2, r3
 80033ec:	4b09      	ldr	r3, [pc, #36]	; (8003414 <HAL_RCC_ClockConfig+0x198>)
 80033ee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80033f0:	2003      	movs	r0, #3
 80033f2:	f7fe fb45 	bl	8001a80 <HAL_InitTick>
  
  return HAL_OK;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	0018      	movs	r0, r3
 80033fa:	46bd      	mov	sp, r7
 80033fc:	b004      	add	sp, #16
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	40022000 	.word	0x40022000
 8003404:	40021000 	.word	0x40021000
 8003408:	00001388 	.word	0x00001388
 800340c:	fffff8ff 	.word	0xfffff8ff
 8003410:	080049d8 	.word	0x080049d8
 8003414:	20000000 	.word	0x20000000

08003418 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b086      	sub	sp, #24
 800341c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800341e:	2300      	movs	r3, #0
 8003420:	60fb      	str	r3, [r7, #12]
 8003422:	2300      	movs	r3, #0
 8003424:	60bb      	str	r3, [r7, #8]
 8003426:	2300      	movs	r3, #0
 8003428:	617b      	str	r3, [r7, #20]
 800342a:	2300      	movs	r3, #0
 800342c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800342e:	2300      	movs	r3, #0
 8003430:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003432:	4b20      	ldr	r3, [pc, #128]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	220c      	movs	r2, #12
 800343c:	4013      	ands	r3, r2
 800343e:	2b04      	cmp	r3, #4
 8003440:	d002      	beq.n	8003448 <HAL_RCC_GetSysClockFreq+0x30>
 8003442:	2b08      	cmp	r3, #8
 8003444:	d003      	beq.n	800344e <HAL_RCC_GetSysClockFreq+0x36>
 8003446:	e02c      	b.n	80034a2 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003448:	4b1b      	ldr	r3, [pc, #108]	; (80034b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 800344a:	613b      	str	r3, [r7, #16]
      break;
 800344c:	e02c      	b.n	80034a8 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	0c9b      	lsrs	r3, r3, #18
 8003452:	220f      	movs	r2, #15
 8003454:	4013      	ands	r3, r2
 8003456:	4a19      	ldr	r2, [pc, #100]	; (80034bc <HAL_RCC_GetSysClockFreq+0xa4>)
 8003458:	5cd3      	ldrb	r3, [r2, r3]
 800345a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800345c:	4b15      	ldr	r3, [pc, #84]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 800345e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003460:	220f      	movs	r2, #15
 8003462:	4013      	ands	r3, r2
 8003464:	4a16      	ldr	r2, [pc, #88]	; (80034c0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003466:	5cd3      	ldrb	r3, [r2, r3]
 8003468:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	2380      	movs	r3, #128	; 0x80
 800346e:	025b      	lsls	r3, r3, #9
 8003470:	4013      	ands	r3, r2
 8003472:	d009      	beq.n	8003488 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003474:	68b9      	ldr	r1, [r7, #8]
 8003476:	4810      	ldr	r0, [pc, #64]	; (80034b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003478:	f7fc fe58 	bl	800012c <__udivsi3>
 800347c:	0003      	movs	r3, r0
 800347e:	001a      	movs	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4353      	muls	r3, r2
 8003484:	617b      	str	r3, [r7, #20]
 8003486:	e009      	b.n	800349c <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003488:	6879      	ldr	r1, [r7, #4]
 800348a:	000a      	movs	r2, r1
 800348c:	0152      	lsls	r2, r2, #5
 800348e:	1a52      	subs	r2, r2, r1
 8003490:	0193      	lsls	r3, r2, #6
 8003492:	1a9b      	subs	r3, r3, r2
 8003494:	00db      	lsls	r3, r3, #3
 8003496:	185b      	adds	r3, r3, r1
 8003498:	021b      	lsls	r3, r3, #8
 800349a:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	613b      	str	r3, [r7, #16]
      break;
 80034a0:	e002      	b.n	80034a8 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80034a2:	4b05      	ldr	r3, [pc, #20]	; (80034b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80034a4:	613b      	str	r3, [r7, #16]
      break;
 80034a6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80034a8:	693b      	ldr	r3, [r7, #16]
}
 80034aa:	0018      	movs	r0, r3
 80034ac:	46bd      	mov	sp, r7
 80034ae:	b006      	add	sp, #24
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	46c0      	nop			; (mov r8, r8)
 80034b4:	40021000 	.word	0x40021000
 80034b8:	007a1200 	.word	0x007a1200
 80034bc:	080049f0 	.word	0x080049f0
 80034c0:	08004a00 	.word	0x08004a00

080034c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034c8:	4b02      	ldr	r3, [pc, #8]	; (80034d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80034ca:	681b      	ldr	r3, [r3, #0]
}
 80034cc:	0018      	movs	r0, r3
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	46c0      	nop			; (mov r8, r8)
 80034d4:	20000000 	.word	0x20000000

080034d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80034dc:	f7ff fff2 	bl	80034c4 <HAL_RCC_GetHCLKFreq>
 80034e0:	0001      	movs	r1, r0
 80034e2:	4b06      	ldr	r3, [pc, #24]	; (80034fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	0a1b      	lsrs	r3, r3, #8
 80034e8:	2207      	movs	r2, #7
 80034ea:	4013      	ands	r3, r2
 80034ec:	4a04      	ldr	r2, [pc, #16]	; (8003500 <HAL_RCC_GetPCLK1Freq+0x28>)
 80034ee:	5cd3      	ldrb	r3, [r2, r3]
 80034f0:	40d9      	lsrs	r1, r3
 80034f2:	000b      	movs	r3, r1
}    
 80034f4:	0018      	movs	r0, r3
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	46c0      	nop			; (mov r8, r8)
 80034fc:	40021000 	.word	0x40021000
 8003500:	080049e8 	.word	0x080049e8

08003504 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800350c:	2300      	movs	r3, #0
 800350e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003510:	2300      	movs	r3, #0
 8003512:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	2380      	movs	r3, #128	; 0x80
 800351a:	025b      	lsls	r3, r3, #9
 800351c:	4013      	ands	r3, r2
 800351e:	d100      	bne.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003520:	e08e      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003522:	2017      	movs	r0, #23
 8003524:	183b      	adds	r3, r7, r0
 8003526:	2200      	movs	r2, #0
 8003528:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800352a:	4b5f      	ldr	r3, [pc, #380]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800352c:	69da      	ldr	r2, [r3, #28]
 800352e:	2380      	movs	r3, #128	; 0x80
 8003530:	055b      	lsls	r3, r3, #21
 8003532:	4013      	ands	r3, r2
 8003534:	d110      	bne.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003536:	4b5c      	ldr	r3, [pc, #368]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003538:	69da      	ldr	r2, [r3, #28]
 800353a:	4b5b      	ldr	r3, [pc, #364]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800353c:	2180      	movs	r1, #128	; 0x80
 800353e:	0549      	lsls	r1, r1, #21
 8003540:	430a      	orrs	r2, r1
 8003542:	61da      	str	r2, [r3, #28]
 8003544:	4b58      	ldr	r3, [pc, #352]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003546:	69da      	ldr	r2, [r3, #28]
 8003548:	2380      	movs	r3, #128	; 0x80
 800354a:	055b      	lsls	r3, r3, #21
 800354c:	4013      	ands	r3, r2
 800354e:	60bb      	str	r3, [r7, #8]
 8003550:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003552:	183b      	adds	r3, r7, r0
 8003554:	2201      	movs	r2, #1
 8003556:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003558:	4b54      	ldr	r3, [pc, #336]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	2380      	movs	r3, #128	; 0x80
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	4013      	ands	r3, r2
 8003562:	d11a      	bne.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003564:	4b51      	ldr	r3, [pc, #324]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	4b50      	ldr	r3, [pc, #320]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800356a:	2180      	movs	r1, #128	; 0x80
 800356c:	0049      	lsls	r1, r1, #1
 800356e:	430a      	orrs	r2, r1
 8003570:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003572:	f7fe facb 	bl	8001b0c <HAL_GetTick>
 8003576:	0003      	movs	r3, r0
 8003578:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800357a:	e008      	b.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800357c:	f7fe fac6 	bl	8001b0c <HAL_GetTick>
 8003580:	0002      	movs	r2, r0
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b64      	cmp	r3, #100	; 0x64
 8003588:	d901      	bls.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e087      	b.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800358e:	4b47      	ldr	r3, [pc, #284]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	2380      	movs	r3, #128	; 0x80
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	4013      	ands	r3, r2
 8003598:	d0f0      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800359a:	4b43      	ldr	r3, [pc, #268]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800359c:	6a1a      	ldr	r2, [r3, #32]
 800359e:	23c0      	movs	r3, #192	; 0xc0
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	4013      	ands	r3, r2
 80035a4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d034      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685a      	ldr	r2, [r3, #4]
 80035b0:	23c0      	movs	r3, #192	; 0xc0
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	4013      	ands	r3, r2
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d02c      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035bc:	4b3a      	ldr	r3, [pc, #232]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80035be:	6a1b      	ldr	r3, [r3, #32]
 80035c0:	4a3b      	ldr	r2, [pc, #236]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035c2:	4013      	ands	r3, r2
 80035c4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035c6:	4b38      	ldr	r3, [pc, #224]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80035c8:	6a1a      	ldr	r2, [r3, #32]
 80035ca:	4b37      	ldr	r3, [pc, #220]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80035cc:	2180      	movs	r1, #128	; 0x80
 80035ce:	0249      	lsls	r1, r1, #9
 80035d0:	430a      	orrs	r2, r1
 80035d2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035d4:	4b34      	ldr	r3, [pc, #208]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80035d6:	6a1a      	ldr	r2, [r3, #32]
 80035d8:	4b33      	ldr	r3, [pc, #204]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80035da:	4936      	ldr	r1, [pc, #216]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80035dc:	400a      	ands	r2, r1
 80035de:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80035e0:	4b31      	ldr	r3, [pc, #196]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2201      	movs	r2, #1
 80035ea:	4013      	ands	r3, r2
 80035ec:	d013      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ee:	f7fe fa8d 	bl	8001b0c <HAL_GetTick>
 80035f2:	0003      	movs	r3, r0
 80035f4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035f6:	e009      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035f8:	f7fe fa88 	bl	8001b0c <HAL_GetTick>
 80035fc:	0002      	movs	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	4a2d      	ldr	r2, [pc, #180]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d901      	bls.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e048      	b.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800360c:	4b26      	ldr	r3, [pc, #152]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800360e:	6a1b      	ldr	r3, [r3, #32]
 8003610:	2202      	movs	r2, #2
 8003612:	4013      	ands	r3, r2
 8003614:	d0f0      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003616:	4b24      	ldr	r3, [pc, #144]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	4a25      	ldr	r2, [pc, #148]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800361c:	4013      	ands	r3, r2
 800361e:	0019      	movs	r1, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685a      	ldr	r2, [r3, #4]
 8003624:	4b20      	ldr	r3, [pc, #128]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003626:	430a      	orrs	r2, r1
 8003628:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800362a:	2317      	movs	r3, #23
 800362c:	18fb      	adds	r3, r7, r3
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d105      	bne.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003634:	4b1c      	ldr	r3, [pc, #112]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003636:	69da      	ldr	r2, [r3, #28]
 8003638:	4b1b      	ldr	r3, [pc, #108]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800363a:	4920      	ldr	r1, [pc, #128]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800363c:	400a      	ands	r2, r1
 800363e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2201      	movs	r2, #1
 8003646:	4013      	ands	r3, r2
 8003648:	d009      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800364a:	4b17      	ldr	r3, [pc, #92]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800364c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364e:	2203      	movs	r2, #3
 8003650:	4393      	bics	r3, r2
 8003652:	0019      	movs	r1, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689a      	ldr	r2, [r3, #8]
 8003658:	4b13      	ldr	r3, [pc, #76]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800365a:	430a      	orrs	r2, r1
 800365c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2220      	movs	r2, #32
 8003664:	4013      	ands	r3, r2
 8003666:	d009      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003668:	4b0f      	ldr	r3, [pc, #60]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800366a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366c:	2210      	movs	r2, #16
 800366e:	4393      	bics	r3, r2
 8003670:	0019      	movs	r1, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	68da      	ldr	r2, [r3, #12]
 8003676:	4b0c      	ldr	r3, [pc, #48]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003678:	430a      	orrs	r2, r1
 800367a:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	2380      	movs	r3, #128	; 0x80
 8003682:	00db      	lsls	r3, r3, #3
 8003684:	4013      	ands	r3, r2
 8003686:	d009      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003688:	4b07      	ldr	r3, [pc, #28]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800368a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368c:	2240      	movs	r2, #64	; 0x40
 800368e:	4393      	bics	r3, r2
 8003690:	0019      	movs	r1, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	691a      	ldr	r2, [r3, #16]
 8003696:	4b04      	ldr	r3, [pc, #16]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003698:	430a      	orrs	r2, r1
 800369a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	0018      	movs	r0, r3
 80036a0:	46bd      	mov	sp, r7
 80036a2:	b006      	add	sp, #24
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	46c0      	nop			; (mov r8, r8)
 80036a8:	40021000 	.word	0x40021000
 80036ac:	40007000 	.word	0x40007000
 80036b0:	fffffcff 	.word	0xfffffcff
 80036b4:	fffeffff 	.word	0xfffeffff
 80036b8:	00001388 	.word	0x00001388
 80036bc:	efffffff 	.word	0xefffffff

080036c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e044      	b.n	800375c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d107      	bne.n	80036ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2278      	movs	r2, #120	; 0x78
 80036de:	2100      	movs	r1, #0
 80036e0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	0018      	movs	r0, r3
 80036e6:	f7fe f8eb 	bl	80018c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2224      	movs	r2, #36	; 0x24
 80036ee:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2101      	movs	r1, #1
 80036fc:	438a      	bics	r2, r1
 80036fe:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003704:	2b00      	cmp	r3, #0
 8003706:	d003      	beq.n	8003710 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	0018      	movs	r0, r3
 800370c:	f000 fa0c 	bl	8003b28 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	0018      	movs	r0, r3
 8003714:	f000 f8c8 	bl	80038a8 <UART_SetConfig>
 8003718:	0003      	movs	r3, r0
 800371a:	2b01      	cmp	r3, #1
 800371c:	d101      	bne.n	8003722 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e01c      	b.n	800375c <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	685a      	ldr	r2, [r3, #4]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	490d      	ldr	r1, [pc, #52]	; (8003764 <HAL_UART_Init+0xa4>)
 800372e:	400a      	ands	r2, r1
 8003730:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	689a      	ldr	r2, [r3, #8]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	212a      	movs	r1, #42	; 0x2a
 800373e:	438a      	bics	r2, r1
 8003740:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2101      	movs	r1, #1
 800374e:	430a      	orrs	r2, r1
 8003750:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	0018      	movs	r0, r3
 8003756:	f000 fa9b 	bl	8003c90 <UART_CheckIdleState>
 800375a:	0003      	movs	r3, r0
}
 800375c:	0018      	movs	r0, r3
 800375e:	46bd      	mov	sp, r7
 8003760:	b002      	add	sp, #8
 8003762:	bd80      	pop	{r7, pc}
 8003764:	ffffb7ff 	.word	0xffffb7ff

08003768 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b08a      	sub	sp, #40	; 0x28
 800376c:	af02      	add	r7, sp, #8
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	603b      	str	r3, [r7, #0]
 8003774:	1dbb      	adds	r3, r7, #6
 8003776:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800377c:	2b20      	cmp	r3, #32
 800377e:	d000      	beq.n	8003782 <HAL_UART_Transmit+0x1a>
 8003780:	e08d      	b.n	800389e <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d003      	beq.n	8003790 <HAL_UART_Transmit+0x28>
 8003788:	1dbb      	adds	r3, r7, #6
 800378a:	881b      	ldrh	r3, [r3, #0]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d101      	bne.n	8003794 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e085      	b.n	80038a0 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	689a      	ldr	r2, [r3, #8]
 8003798:	2380      	movs	r3, #128	; 0x80
 800379a:	015b      	lsls	r3, r3, #5
 800379c:	429a      	cmp	r2, r3
 800379e:	d109      	bne.n	80037b4 <HAL_UART_Transmit+0x4c>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d105      	bne.n	80037b4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	2201      	movs	r2, #1
 80037ac:	4013      	ands	r3, r2
 80037ae:	d001      	beq.n	80037b4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e075      	b.n	80038a0 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2284      	movs	r2, #132	; 0x84
 80037b8:	2100      	movs	r1, #0
 80037ba:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2221      	movs	r2, #33	; 0x21
 80037c0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037c2:	f7fe f9a3 	bl	8001b0c <HAL_GetTick>
 80037c6:	0003      	movs	r3, r0
 80037c8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	1dba      	adds	r2, r7, #6
 80037ce:	2150      	movs	r1, #80	; 0x50
 80037d0:	8812      	ldrh	r2, [r2, #0]
 80037d2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	1dba      	adds	r2, r7, #6
 80037d8:	2152      	movs	r1, #82	; 0x52
 80037da:	8812      	ldrh	r2, [r2, #0]
 80037dc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	689a      	ldr	r2, [r3, #8]
 80037e2:	2380      	movs	r3, #128	; 0x80
 80037e4:	015b      	lsls	r3, r3, #5
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d108      	bne.n	80037fc <HAL_UART_Transmit+0x94>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d104      	bne.n	80037fc <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80037f2:	2300      	movs	r3, #0
 80037f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	61bb      	str	r3, [r7, #24]
 80037fa:	e003      	b.n	8003804 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003800:	2300      	movs	r3, #0
 8003802:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003804:	e030      	b.n	8003868 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	68f8      	ldr	r0, [r7, #12]
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	0013      	movs	r3, r2
 8003810:	2200      	movs	r2, #0
 8003812:	2180      	movs	r1, #128	; 0x80
 8003814:	f000 fae4 	bl	8003de0 <UART_WaitOnFlagUntilTimeout>
 8003818:	1e03      	subs	r3, r0, #0
 800381a:	d004      	beq.n	8003826 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2220      	movs	r2, #32
 8003820:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e03c      	b.n	80038a0 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d10b      	bne.n	8003844 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	881a      	ldrh	r2, [r3, #0]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	05d2      	lsls	r2, r2, #23
 8003836:	0dd2      	lsrs	r2, r2, #23
 8003838:	b292      	uxth	r2, r2
 800383a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	3302      	adds	r3, #2
 8003840:	61bb      	str	r3, [r7, #24]
 8003842:	e008      	b.n	8003856 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	781a      	ldrb	r2, [r3, #0]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	b292      	uxth	r2, r2
 800384e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	3301      	adds	r3, #1
 8003854:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2252      	movs	r2, #82	; 0x52
 800385a:	5a9b      	ldrh	r3, [r3, r2]
 800385c:	b29b      	uxth	r3, r3
 800385e:	3b01      	subs	r3, #1
 8003860:	b299      	uxth	r1, r3
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2252      	movs	r2, #82	; 0x52
 8003866:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2252      	movs	r2, #82	; 0x52
 800386c:	5a9b      	ldrh	r3, [r3, r2]
 800386e:	b29b      	uxth	r3, r3
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1c8      	bne.n	8003806 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003874:	697a      	ldr	r2, [r7, #20]
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	0013      	movs	r3, r2
 800387e:	2200      	movs	r2, #0
 8003880:	2140      	movs	r1, #64	; 0x40
 8003882:	f000 faad 	bl	8003de0 <UART_WaitOnFlagUntilTimeout>
 8003886:	1e03      	subs	r3, r0, #0
 8003888:	d004      	beq.n	8003894 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2220      	movs	r2, #32
 800388e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e005      	b.n	80038a0 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2220      	movs	r2, #32
 8003898:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800389a:	2300      	movs	r3, #0
 800389c:	e000      	b.n	80038a0 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 800389e:	2302      	movs	r3, #2
  }
}
 80038a0:	0018      	movs	r0, r3
 80038a2:	46bd      	mov	sp, r7
 80038a4:	b008      	add	sp, #32
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b088      	sub	sp, #32
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038b0:	231e      	movs	r3, #30
 80038b2:	18fb      	adds	r3, r7, r3
 80038b4:	2200      	movs	r2, #0
 80038b6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689a      	ldr	r2, [r3, #8]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	431a      	orrs	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	431a      	orrs	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	69db      	ldr	r3, [r3, #28]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a8d      	ldr	r2, [pc, #564]	; (8003b0c <UART_SetConfig+0x264>)
 80038d8:	4013      	ands	r3, r2
 80038da:	0019      	movs	r1, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	4a88      	ldr	r2, [pc, #544]	; (8003b10 <UART_SetConfig+0x268>)
 80038ee:	4013      	ands	r3, r2
 80038f0:	0019      	movs	r1, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	68da      	ldr	r2, [r3, #12]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	430a      	orrs	r2, r1
 80038fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a1b      	ldr	r3, [r3, #32]
 8003908:	697a      	ldr	r2, [r7, #20]
 800390a:	4313      	orrs	r3, r2
 800390c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	4a7f      	ldr	r2, [pc, #508]	; (8003b14 <UART_SetConfig+0x26c>)
 8003916:	4013      	ands	r3, r2
 8003918:	0019      	movs	r1, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	430a      	orrs	r2, r1
 8003922:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a7b      	ldr	r2, [pc, #492]	; (8003b18 <UART_SetConfig+0x270>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d127      	bne.n	800397e <UART_SetConfig+0xd6>
 800392e:	4b7b      	ldr	r3, [pc, #492]	; (8003b1c <UART_SetConfig+0x274>)
 8003930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003932:	2203      	movs	r2, #3
 8003934:	4013      	ands	r3, r2
 8003936:	2b03      	cmp	r3, #3
 8003938:	d00d      	beq.n	8003956 <UART_SetConfig+0xae>
 800393a:	d81b      	bhi.n	8003974 <UART_SetConfig+0xcc>
 800393c:	2b02      	cmp	r3, #2
 800393e:	d014      	beq.n	800396a <UART_SetConfig+0xc2>
 8003940:	d818      	bhi.n	8003974 <UART_SetConfig+0xcc>
 8003942:	2b00      	cmp	r3, #0
 8003944:	d002      	beq.n	800394c <UART_SetConfig+0xa4>
 8003946:	2b01      	cmp	r3, #1
 8003948:	d00a      	beq.n	8003960 <UART_SetConfig+0xb8>
 800394a:	e013      	b.n	8003974 <UART_SetConfig+0xcc>
 800394c:	231f      	movs	r3, #31
 800394e:	18fb      	adds	r3, r7, r3
 8003950:	2200      	movs	r2, #0
 8003952:	701a      	strb	r2, [r3, #0]
 8003954:	e021      	b.n	800399a <UART_SetConfig+0xf2>
 8003956:	231f      	movs	r3, #31
 8003958:	18fb      	adds	r3, r7, r3
 800395a:	2202      	movs	r2, #2
 800395c:	701a      	strb	r2, [r3, #0]
 800395e:	e01c      	b.n	800399a <UART_SetConfig+0xf2>
 8003960:	231f      	movs	r3, #31
 8003962:	18fb      	adds	r3, r7, r3
 8003964:	2204      	movs	r2, #4
 8003966:	701a      	strb	r2, [r3, #0]
 8003968:	e017      	b.n	800399a <UART_SetConfig+0xf2>
 800396a:	231f      	movs	r3, #31
 800396c:	18fb      	adds	r3, r7, r3
 800396e:	2208      	movs	r2, #8
 8003970:	701a      	strb	r2, [r3, #0]
 8003972:	e012      	b.n	800399a <UART_SetConfig+0xf2>
 8003974:	231f      	movs	r3, #31
 8003976:	18fb      	adds	r3, r7, r3
 8003978:	2210      	movs	r2, #16
 800397a:	701a      	strb	r2, [r3, #0]
 800397c:	e00d      	b.n	800399a <UART_SetConfig+0xf2>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a67      	ldr	r2, [pc, #412]	; (8003b20 <UART_SetConfig+0x278>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d104      	bne.n	8003992 <UART_SetConfig+0xea>
 8003988:	231f      	movs	r3, #31
 800398a:	18fb      	adds	r3, r7, r3
 800398c:	2200      	movs	r2, #0
 800398e:	701a      	strb	r2, [r3, #0]
 8003990:	e003      	b.n	800399a <UART_SetConfig+0xf2>
 8003992:	231f      	movs	r3, #31
 8003994:	18fb      	adds	r3, r7, r3
 8003996:	2210      	movs	r2, #16
 8003998:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	69da      	ldr	r2, [r3, #28]
 800399e:	2380      	movs	r3, #128	; 0x80
 80039a0:	021b      	lsls	r3, r3, #8
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d15c      	bne.n	8003a60 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 80039a6:	231f      	movs	r3, #31
 80039a8:	18fb      	adds	r3, r7, r3
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	2b08      	cmp	r3, #8
 80039ae:	d015      	beq.n	80039dc <UART_SetConfig+0x134>
 80039b0:	dc18      	bgt.n	80039e4 <UART_SetConfig+0x13c>
 80039b2:	2b04      	cmp	r3, #4
 80039b4:	d00d      	beq.n	80039d2 <UART_SetConfig+0x12a>
 80039b6:	dc15      	bgt.n	80039e4 <UART_SetConfig+0x13c>
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d002      	beq.n	80039c2 <UART_SetConfig+0x11a>
 80039bc:	2b02      	cmp	r3, #2
 80039be:	d005      	beq.n	80039cc <UART_SetConfig+0x124>
 80039c0:	e010      	b.n	80039e4 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039c2:	f7ff fd89 	bl	80034d8 <HAL_RCC_GetPCLK1Freq>
 80039c6:	0003      	movs	r3, r0
 80039c8:	61bb      	str	r3, [r7, #24]
        break;
 80039ca:	e012      	b.n	80039f2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039cc:	4b55      	ldr	r3, [pc, #340]	; (8003b24 <UART_SetConfig+0x27c>)
 80039ce:	61bb      	str	r3, [r7, #24]
        break;
 80039d0:	e00f      	b.n	80039f2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039d2:	f7ff fd21 	bl	8003418 <HAL_RCC_GetSysClockFreq>
 80039d6:	0003      	movs	r3, r0
 80039d8:	61bb      	str	r3, [r7, #24]
        break;
 80039da:	e00a      	b.n	80039f2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039dc:	2380      	movs	r3, #128	; 0x80
 80039de:	021b      	lsls	r3, r3, #8
 80039e0:	61bb      	str	r3, [r7, #24]
        break;
 80039e2:	e006      	b.n	80039f2 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80039e4:	2300      	movs	r3, #0
 80039e6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80039e8:	231e      	movs	r3, #30
 80039ea:	18fb      	adds	r3, r7, r3
 80039ec:	2201      	movs	r2, #1
 80039ee:	701a      	strb	r2, [r3, #0]
        break;
 80039f0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d100      	bne.n	80039fa <UART_SetConfig+0x152>
 80039f8:	e07a      	b.n	8003af0 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	005a      	lsls	r2, r3, #1
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	085b      	lsrs	r3, r3, #1
 8003a04:	18d2      	adds	r2, r2, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	0019      	movs	r1, r3
 8003a0c:	0010      	movs	r0, r2
 8003a0e:	f7fc fb8d 	bl	800012c <__udivsi3>
 8003a12:	0003      	movs	r3, r0
 8003a14:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	2b0f      	cmp	r3, #15
 8003a1a:	d91c      	bls.n	8003a56 <UART_SetConfig+0x1ae>
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	2380      	movs	r3, #128	; 0x80
 8003a20:	025b      	lsls	r3, r3, #9
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d217      	bcs.n	8003a56 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	200e      	movs	r0, #14
 8003a2c:	183b      	adds	r3, r7, r0
 8003a2e:	210f      	movs	r1, #15
 8003a30:	438a      	bics	r2, r1
 8003a32:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	085b      	lsrs	r3, r3, #1
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	2207      	movs	r2, #7
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	b299      	uxth	r1, r3
 8003a40:	183b      	adds	r3, r7, r0
 8003a42:	183a      	adds	r2, r7, r0
 8003a44:	8812      	ldrh	r2, [r2, #0]
 8003a46:	430a      	orrs	r2, r1
 8003a48:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	183a      	adds	r2, r7, r0
 8003a50:	8812      	ldrh	r2, [r2, #0]
 8003a52:	60da      	str	r2, [r3, #12]
 8003a54:	e04c      	b.n	8003af0 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003a56:	231e      	movs	r3, #30
 8003a58:	18fb      	adds	r3, r7, r3
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	701a      	strb	r2, [r3, #0]
 8003a5e:	e047      	b.n	8003af0 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a60:	231f      	movs	r3, #31
 8003a62:	18fb      	adds	r3, r7, r3
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	2b08      	cmp	r3, #8
 8003a68:	d015      	beq.n	8003a96 <UART_SetConfig+0x1ee>
 8003a6a:	dc18      	bgt.n	8003a9e <UART_SetConfig+0x1f6>
 8003a6c:	2b04      	cmp	r3, #4
 8003a6e:	d00d      	beq.n	8003a8c <UART_SetConfig+0x1e4>
 8003a70:	dc15      	bgt.n	8003a9e <UART_SetConfig+0x1f6>
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d002      	beq.n	8003a7c <UART_SetConfig+0x1d4>
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d005      	beq.n	8003a86 <UART_SetConfig+0x1de>
 8003a7a:	e010      	b.n	8003a9e <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a7c:	f7ff fd2c 	bl	80034d8 <HAL_RCC_GetPCLK1Freq>
 8003a80:	0003      	movs	r3, r0
 8003a82:	61bb      	str	r3, [r7, #24]
        break;
 8003a84:	e012      	b.n	8003aac <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a86:	4b27      	ldr	r3, [pc, #156]	; (8003b24 <UART_SetConfig+0x27c>)
 8003a88:	61bb      	str	r3, [r7, #24]
        break;
 8003a8a:	e00f      	b.n	8003aac <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a8c:	f7ff fcc4 	bl	8003418 <HAL_RCC_GetSysClockFreq>
 8003a90:	0003      	movs	r3, r0
 8003a92:	61bb      	str	r3, [r7, #24]
        break;
 8003a94:	e00a      	b.n	8003aac <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a96:	2380      	movs	r3, #128	; 0x80
 8003a98:	021b      	lsls	r3, r3, #8
 8003a9a:	61bb      	str	r3, [r7, #24]
        break;
 8003a9c:	e006      	b.n	8003aac <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003aa2:	231e      	movs	r3, #30
 8003aa4:	18fb      	adds	r3, r7, r3
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	701a      	strb	r2, [r3, #0]
        break;
 8003aaa:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d01e      	beq.n	8003af0 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	085a      	lsrs	r2, r3, #1
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	18d2      	adds	r2, r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	0019      	movs	r1, r3
 8003ac2:	0010      	movs	r0, r2
 8003ac4:	f7fc fb32 	bl	800012c <__udivsi3>
 8003ac8:	0003      	movs	r3, r0
 8003aca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	2b0f      	cmp	r3, #15
 8003ad0:	d90a      	bls.n	8003ae8 <UART_SetConfig+0x240>
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	2380      	movs	r3, #128	; 0x80
 8003ad6:	025b      	lsls	r3, r3, #9
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d205      	bcs.n	8003ae8 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	b29a      	uxth	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	60da      	str	r2, [r3, #12]
 8003ae6:	e003      	b.n	8003af0 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003ae8:	231e      	movs	r3, #30
 8003aea:	18fb      	adds	r3, r7, r3
 8003aec:	2201      	movs	r2, #1
 8003aee:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003afc:	231e      	movs	r3, #30
 8003afe:	18fb      	adds	r3, r7, r3
 8003b00:	781b      	ldrb	r3, [r3, #0]
}
 8003b02:	0018      	movs	r0, r3
 8003b04:	46bd      	mov	sp, r7
 8003b06:	b008      	add	sp, #32
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	46c0      	nop			; (mov r8, r8)
 8003b0c:	ffff69f3 	.word	0xffff69f3
 8003b10:	ffffcfff 	.word	0xffffcfff
 8003b14:	fffff4ff 	.word	0xfffff4ff
 8003b18:	40013800 	.word	0x40013800
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	40004400 	.word	0x40004400
 8003b24:	007a1200 	.word	0x007a1200

08003b28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b34:	2208      	movs	r2, #8
 8003b36:	4013      	ands	r3, r2
 8003b38:	d00b      	beq.n	8003b52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	4a4a      	ldr	r2, [pc, #296]	; (8003c6c <UART_AdvFeatureConfig+0x144>)
 8003b42:	4013      	ands	r3, r2
 8003b44:	0019      	movs	r1, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b56:	2201      	movs	r2, #1
 8003b58:	4013      	ands	r3, r2
 8003b5a:	d00b      	beq.n	8003b74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	4a43      	ldr	r2, [pc, #268]	; (8003c70 <UART_AdvFeatureConfig+0x148>)
 8003b64:	4013      	ands	r3, r2
 8003b66:	0019      	movs	r1, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	430a      	orrs	r2, r1
 8003b72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b78:	2202      	movs	r2, #2
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	d00b      	beq.n	8003b96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	4a3b      	ldr	r2, [pc, #236]	; (8003c74 <UART_AdvFeatureConfig+0x14c>)
 8003b86:	4013      	ands	r3, r2
 8003b88:	0019      	movs	r1, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	430a      	orrs	r2, r1
 8003b94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9a:	2204      	movs	r2, #4
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	d00b      	beq.n	8003bb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	4a34      	ldr	r2, [pc, #208]	; (8003c78 <UART_AdvFeatureConfig+0x150>)
 8003ba8:	4013      	ands	r3, r2
 8003baa:	0019      	movs	r1, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbc:	2210      	movs	r2, #16
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	d00b      	beq.n	8003bda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	4a2c      	ldr	r2, [pc, #176]	; (8003c7c <UART_AdvFeatureConfig+0x154>)
 8003bca:	4013      	ands	r3, r2
 8003bcc:	0019      	movs	r1, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bde:	2220      	movs	r2, #32
 8003be0:	4013      	ands	r3, r2
 8003be2:	d00b      	beq.n	8003bfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	4a25      	ldr	r2, [pc, #148]	; (8003c80 <UART_AdvFeatureConfig+0x158>)
 8003bec:	4013      	ands	r3, r2
 8003bee:	0019      	movs	r1, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c00:	2240      	movs	r2, #64	; 0x40
 8003c02:	4013      	ands	r3, r2
 8003c04:	d01d      	beq.n	8003c42 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	4a1d      	ldr	r2, [pc, #116]	; (8003c84 <UART_AdvFeatureConfig+0x15c>)
 8003c0e:	4013      	ands	r3, r2
 8003c10:	0019      	movs	r1, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c22:	2380      	movs	r3, #128	; 0x80
 8003c24:	035b      	lsls	r3, r3, #13
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d10b      	bne.n	8003c42 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	4a15      	ldr	r2, [pc, #84]	; (8003c88 <UART_AdvFeatureConfig+0x160>)
 8003c32:	4013      	ands	r3, r2
 8003c34:	0019      	movs	r1, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c46:	2280      	movs	r2, #128	; 0x80
 8003c48:	4013      	ands	r3, r2
 8003c4a:	d00b      	beq.n	8003c64 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	4a0e      	ldr	r2, [pc, #56]	; (8003c8c <UART_AdvFeatureConfig+0x164>)
 8003c54:	4013      	ands	r3, r2
 8003c56:	0019      	movs	r1, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	430a      	orrs	r2, r1
 8003c62:	605a      	str	r2, [r3, #4]
  }
}
 8003c64:	46c0      	nop			; (mov r8, r8)
 8003c66:	46bd      	mov	sp, r7
 8003c68:	b002      	add	sp, #8
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	ffff7fff 	.word	0xffff7fff
 8003c70:	fffdffff 	.word	0xfffdffff
 8003c74:	fffeffff 	.word	0xfffeffff
 8003c78:	fffbffff 	.word	0xfffbffff
 8003c7c:	ffffefff 	.word	0xffffefff
 8003c80:	ffffdfff 	.word	0xffffdfff
 8003c84:	ffefffff 	.word	0xffefffff
 8003c88:	ff9fffff 	.word	0xff9fffff
 8003c8c:	fff7ffff 	.word	0xfff7ffff

08003c90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b092      	sub	sp, #72	; 0x48
 8003c94:	af02      	add	r7, sp, #8
 8003c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2284      	movs	r2, #132	; 0x84
 8003c9c:	2100      	movs	r1, #0
 8003c9e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ca0:	f7fd ff34 	bl	8001b0c <HAL_GetTick>
 8003ca4:	0003      	movs	r3, r0
 8003ca6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2208      	movs	r2, #8
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	2b08      	cmp	r3, #8
 8003cb4:	d12c      	bne.n	8003d10 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cb8:	2280      	movs	r2, #128	; 0x80
 8003cba:	0391      	lsls	r1, r2, #14
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	4a46      	ldr	r2, [pc, #280]	; (8003dd8 <UART_CheckIdleState+0x148>)
 8003cc0:	9200      	str	r2, [sp, #0]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f000 f88c 	bl	8003de0 <UART_WaitOnFlagUntilTimeout>
 8003cc8:	1e03      	subs	r3, r0, #0
 8003cca:	d021      	beq.n	8003d10 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ccc:	f3ef 8310 	mrs	r3, PRIMASK
 8003cd0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003cd4:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cdc:	f383 8810 	msr	PRIMASK, r3
}
 8003ce0:	46c0      	nop			; (mov r8, r8)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2180      	movs	r1, #128	; 0x80
 8003cee:	438a      	bics	r2, r1
 8003cf0:	601a      	str	r2, [r3, #0]
 8003cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf8:	f383 8810 	msr	PRIMASK, r3
}
 8003cfc:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2220      	movs	r2, #32
 8003d02:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2278      	movs	r2, #120	; 0x78
 8003d08:	2100      	movs	r1, #0
 8003d0a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e05f      	b.n	8003dd0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2204      	movs	r2, #4
 8003d18:	4013      	ands	r3, r2
 8003d1a:	2b04      	cmp	r3, #4
 8003d1c:	d146      	bne.n	8003dac <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d20:	2280      	movs	r2, #128	; 0x80
 8003d22:	03d1      	lsls	r1, r2, #15
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	4a2c      	ldr	r2, [pc, #176]	; (8003dd8 <UART_CheckIdleState+0x148>)
 8003d28:	9200      	str	r2, [sp, #0]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f000 f858 	bl	8003de0 <UART_WaitOnFlagUntilTimeout>
 8003d30:	1e03      	subs	r3, r0, #0
 8003d32:	d03b      	beq.n	8003dac <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d34:	f3ef 8310 	mrs	r3, PRIMASK
 8003d38:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d3c:	637b      	str	r3, [r7, #52]	; 0x34
 8003d3e:	2301      	movs	r3, #1
 8003d40:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	f383 8810 	msr	PRIMASK, r3
}
 8003d48:	46c0      	nop			; (mov r8, r8)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4921      	ldr	r1, [pc, #132]	; (8003ddc <UART_CheckIdleState+0x14c>)
 8003d56:	400a      	ands	r2, r1
 8003d58:	601a      	str	r2, [r3, #0]
 8003d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d5c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	f383 8810 	msr	PRIMASK, r3
}
 8003d64:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d66:	f3ef 8310 	mrs	r3, PRIMASK
 8003d6a:	61bb      	str	r3, [r7, #24]
  return(result);
 8003d6c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d6e:	633b      	str	r3, [r7, #48]	; 0x30
 8003d70:	2301      	movs	r3, #1
 8003d72:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	f383 8810 	msr	PRIMASK, r3
}
 8003d7a:	46c0      	nop			; (mov r8, r8)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	689a      	ldr	r2, [r3, #8]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2101      	movs	r1, #1
 8003d88:	438a      	bics	r2, r1
 8003d8a:	609a      	str	r2, [r3, #8]
 8003d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d8e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d90:	6a3b      	ldr	r3, [r7, #32]
 8003d92:	f383 8810 	msr	PRIMASK, r3
}
 8003d96:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2280      	movs	r2, #128	; 0x80
 8003d9c:	2120      	movs	r1, #32
 8003d9e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2278      	movs	r2, #120	; 0x78
 8003da4:	2100      	movs	r1, #0
 8003da6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e011      	b.n	8003dd0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2220      	movs	r2, #32
 8003db0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2280      	movs	r2, #128	; 0x80
 8003db6:	2120      	movs	r1, #32
 8003db8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2278      	movs	r2, #120	; 0x78
 8003dca:	2100      	movs	r1, #0
 8003dcc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	0018      	movs	r0, r3
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	b010      	add	sp, #64	; 0x40
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	01ffffff 	.word	0x01ffffff
 8003ddc:	fffffedf 	.word	0xfffffedf

08003de0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	603b      	str	r3, [r7, #0]
 8003dec:	1dfb      	adds	r3, r7, #7
 8003dee:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003df0:	e051      	b.n	8003e96 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	3301      	adds	r3, #1
 8003df6:	d04e      	beq.n	8003e96 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003df8:	f7fd fe88 	bl	8001b0c <HAL_GetTick>
 8003dfc:	0002      	movs	r2, r0
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	69ba      	ldr	r2, [r7, #24]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d302      	bcc.n	8003e0e <UART_WaitOnFlagUntilTimeout+0x2e>
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e051      	b.n	8003eb6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2204      	movs	r2, #4
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	d03b      	beq.n	8003e96 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	2b80      	cmp	r3, #128	; 0x80
 8003e22:	d038      	beq.n	8003e96 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	2b40      	cmp	r3, #64	; 0x40
 8003e28:	d035      	beq.n	8003e96 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	69db      	ldr	r3, [r3, #28]
 8003e30:	2208      	movs	r2, #8
 8003e32:	4013      	ands	r3, r2
 8003e34:	2b08      	cmp	r3, #8
 8003e36:	d111      	bne.n	8003e5c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2208      	movs	r2, #8
 8003e3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	0018      	movs	r0, r3
 8003e44:	f000 f83c 	bl	8003ec0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2284      	movs	r2, #132	; 0x84
 8003e4c:	2108      	movs	r1, #8
 8003e4e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2278      	movs	r2, #120	; 0x78
 8003e54:	2100      	movs	r1, #0
 8003e56:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e02c      	b.n	8003eb6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	69da      	ldr	r2, [r3, #28]
 8003e62:	2380      	movs	r3, #128	; 0x80
 8003e64:	011b      	lsls	r3, r3, #4
 8003e66:	401a      	ands	r2, r3
 8003e68:	2380      	movs	r3, #128	; 0x80
 8003e6a:	011b      	lsls	r3, r3, #4
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d112      	bne.n	8003e96 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2280      	movs	r2, #128	; 0x80
 8003e76:	0112      	lsls	r2, r2, #4
 8003e78:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	0018      	movs	r0, r3
 8003e7e:	f000 f81f 	bl	8003ec0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2284      	movs	r2, #132	; 0x84
 8003e86:	2120      	movs	r1, #32
 8003e88:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2278      	movs	r2, #120	; 0x78
 8003e8e:	2100      	movs	r1, #0
 8003e90:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e00f      	b.n	8003eb6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	69db      	ldr	r3, [r3, #28]
 8003e9c:	68ba      	ldr	r2, [r7, #8]
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	68ba      	ldr	r2, [r7, #8]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	425a      	negs	r2, r3
 8003ea6:	4153      	adcs	r3, r2
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	001a      	movs	r2, r3
 8003eac:	1dfb      	adds	r3, r7, #7
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d09e      	beq.n	8003df2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	0018      	movs	r0, r3
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	b004      	add	sp, #16
 8003ebc:	bd80      	pop	{r7, pc}
	...

08003ec0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b08e      	sub	sp, #56	; 0x38
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ec8:	f3ef 8310 	mrs	r3, PRIMASK
 8003ecc:	617b      	str	r3, [r7, #20]
  return(result);
 8003ece:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ed0:	637b      	str	r3, [r7, #52]	; 0x34
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	f383 8810 	msr	PRIMASK, r3
}
 8003edc:	46c0      	nop			; (mov r8, r8)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4926      	ldr	r1, [pc, #152]	; (8003f84 <UART_EndRxTransfer+0xc4>)
 8003eea:	400a      	ands	r2, r1
 8003eec:	601a      	str	r2, [r3, #0]
 8003eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ef0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	f383 8810 	msr	PRIMASK, r3
}
 8003ef8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003efa:	f3ef 8310 	mrs	r3, PRIMASK
 8003efe:	623b      	str	r3, [r7, #32]
  return(result);
 8003f00:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f02:	633b      	str	r3, [r7, #48]	; 0x30
 8003f04:	2301      	movs	r3, #1
 8003f06:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0a:	f383 8810 	msr	PRIMASK, r3
}
 8003f0e:	46c0      	nop			; (mov r8, r8)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	689a      	ldr	r2, [r3, #8]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2101      	movs	r1, #1
 8003f1c:	438a      	bics	r2, r1
 8003f1e:	609a      	str	r2, [r3, #8]
 8003f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f22:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f26:	f383 8810 	msr	PRIMASK, r3
}
 8003f2a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d118      	bne.n	8003f66 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f34:	f3ef 8310 	mrs	r3, PRIMASK
 8003f38:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f3a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f3e:	2301      	movs	r3, #1
 8003f40:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f383 8810 	msr	PRIMASK, r3
}
 8003f48:	46c0      	nop			; (mov r8, r8)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2110      	movs	r1, #16
 8003f56:	438a      	bics	r2, r1
 8003f58:	601a      	str	r2, [r3, #0]
 8003f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f5c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	f383 8810 	msr	PRIMASK, r3
}
 8003f64:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2280      	movs	r2, #128	; 0x80
 8003f6a:	2120      	movs	r1, #32
 8003f6c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003f7a:	46c0      	nop			; (mov r8, r8)
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	b00e      	add	sp, #56	; 0x38
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	46c0      	nop			; (mov r8, r8)
 8003f84:	fffffedf 	.word	0xfffffedf

08003f88 <__errno>:
 8003f88:	4b01      	ldr	r3, [pc, #4]	; (8003f90 <__errno+0x8>)
 8003f8a:	6818      	ldr	r0, [r3, #0]
 8003f8c:	4770      	bx	lr
 8003f8e:	46c0      	nop			; (mov r8, r8)
 8003f90:	2000000c 	.word	0x2000000c

08003f94 <__libc_init_array>:
 8003f94:	b570      	push	{r4, r5, r6, lr}
 8003f96:	2600      	movs	r6, #0
 8003f98:	4d0c      	ldr	r5, [pc, #48]	; (8003fcc <__libc_init_array+0x38>)
 8003f9a:	4c0d      	ldr	r4, [pc, #52]	; (8003fd0 <__libc_init_array+0x3c>)
 8003f9c:	1b64      	subs	r4, r4, r5
 8003f9e:	10a4      	asrs	r4, r4, #2
 8003fa0:	42a6      	cmp	r6, r4
 8003fa2:	d109      	bne.n	8003fb8 <__libc_init_array+0x24>
 8003fa4:	2600      	movs	r6, #0
 8003fa6:	f000 fc8b 	bl	80048c0 <_init>
 8003faa:	4d0a      	ldr	r5, [pc, #40]	; (8003fd4 <__libc_init_array+0x40>)
 8003fac:	4c0a      	ldr	r4, [pc, #40]	; (8003fd8 <__libc_init_array+0x44>)
 8003fae:	1b64      	subs	r4, r4, r5
 8003fb0:	10a4      	asrs	r4, r4, #2
 8003fb2:	42a6      	cmp	r6, r4
 8003fb4:	d105      	bne.n	8003fc2 <__libc_init_array+0x2e>
 8003fb6:	bd70      	pop	{r4, r5, r6, pc}
 8003fb8:	00b3      	lsls	r3, r6, #2
 8003fba:	58eb      	ldr	r3, [r5, r3]
 8003fbc:	4798      	blx	r3
 8003fbe:	3601      	adds	r6, #1
 8003fc0:	e7ee      	b.n	8003fa0 <__libc_init_array+0xc>
 8003fc2:	00b3      	lsls	r3, r6, #2
 8003fc4:	58eb      	ldr	r3, [r5, r3]
 8003fc6:	4798      	blx	r3
 8003fc8:	3601      	adds	r6, #1
 8003fca:	e7f2      	b.n	8003fb2 <__libc_init_array+0x1e>
 8003fcc:	08004a44 	.word	0x08004a44
 8003fd0:	08004a44 	.word	0x08004a44
 8003fd4:	08004a44 	.word	0x08004a44
 8003fd8:	08004a48 	.word	0x08004a48

08003fdc <memset>:
 8003fdc:	0003      	movs	r3, r0
 8003fde:	1882      	adds	r2, r0, r2
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d100      	bne.n	8003fe6 <memset+0xa>
 8003fe4:	4770      	bx	lr
 8003fe6:	7019      	strb	r1, [r3, #0]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	e7f9      	b.n	8003fe0 <memset+0x4>

08003fec <siprintf>:
 8003fec:	b40e      	push	{r1, r2, r3}
 8003fee:	b500      	push	{lr}
 8003ff0:	490b      	ldr	r1, [pc, #44]	; (8004020 <siprintf+0x34>)
 8003ff2:	b09c      	sub	sp, #112	; 0x70
 8003ff4:	ab1d      	add	r3, sp, #116	; 0x74
 8003ff6:	9002      	str	r0, [sp, #8]
 8003ff8:	9006      	str	r0, [sp, #24]
 8003ffa:	9107      	str	r1, [sp, #28]
 8003ffc:	9104      	str	r1, [sp, #16]
 8003ffe:	4809      	ldr	r0, [pc, #36]	; (8004024 <siprintf+0x38>)
 8004000:	4909      	ldr	r1, [pc, #36]	; (8004028 <siprintf+0x3c>)
 8004002:	cb04      	ldmia	r3!, {r2}
 8004004:	9105      	str	r1, [sp, #20]
 8004006:	6800      	ldr	r0, [r0, #0]
 8004008:	a902      	add	r1, sp, #8
 800400a:	9301      	str	r3, [sp, #4]
 800400c:	f000 f870 	bl	80040f0 <_svfiprintf_r>
 8004010:	2300      	movs	r3, #0
 8004012:	9a02      	ldr	r2, [sp, #8]
 8004014:	7013      	strb	r3, [r2, #0]
 8004016:	b01c      	add	sp, #112	; 0x70
 8004018:	bc08      	pop	{r3}
 800401a:	b003      	add	sp, #12
 800401c:	4718      	bx	r3
 800401e:	46c0      	nop			; (mov r8, r8)
 8004020:	7fffffff 	.word	0x7fffffff
 8004024:	2000000c 	.word	0x2000000c
 8004028:	ffff0208 	.word	0xffff0208

0800402c <__ssputs_r>:
 800402c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800402e:	688e      	ldr	r6, [r1, #8]
 8004030:	b085      	sub	sp, #20
 8004032:	0007      	movs	r7, r0
 8004034:	000c      	movs	r4, r1
 8004036:	9203      	str	r2, [sp, #12]
 8004038:	9301      	str	r3, [sp, #4]
 800403a:	429e      	cmp	r6, r3
 800403c:	d83c      	bhi.n	80040b8 <__ssputs_r+0x8c>
 800403e:	2390      	movs	r3, #144	; 0x90
 8004040:	898a      	ldrh	r2, [r1, #12]
 8004042:	00db      	lsls	r3, r3, #3
 8004044:	421a      	tst	r2, r3
 8004046:	d034      	beq.n	80040b2 <__ssputs_r+0x86>
 8004048:	6909      	ldr	r1, [r1, #16]
 800404a:	6823      	ldr	r3, [r4, #0]
 800404c:	6960      	ldr	r0, [r4, #20]
 800404e:	1a5b      	subs	r3, r3, r1
 8004050:	9302      	str	r3, [sp, #8]
 8004052:	2303      	movs	r3, #3
 8004054:	4343      	muls	r3, r0
 8004056:	0fdd      	lsrs	r5, r3, #31
 8004058:	18ed      	adds	r5, r5, r3
 800405a:	9b01      	ldr	r3, [sp, #4]
 800405c:	9802      	ldr	r0, [sp, #8]
 800405e:	3301      	adds	r3, #1
 8004060:	181b      	adds	r3, r3, r0
 8004062:	106d      	asrs	r5, r5, #1
 8004064:	42ab      	cmp	r3, r5
 8004066:	d900      	bls.n	800406a <__ssputs_r+0x3e>
 8004068:	001d      	movs	r5, r3
 800406a:	0553      	lsls	r3, r2, #21
 800406c:	d532      	bpl.n	80040d4 <__ssputs_r+0xa8>
 800406e:	0029      	movs	r1, r5
 8004070:	0038      	movs	r0, r7
 8004072:	f000 fb53 	bl	800471c <_malloc_r>
 8004076:	1e06      	subs	r6, r0, #0
 8004078:	d109      	bne.n	800408e <__ssputs_r+0x62>
 800407a:	230c      	movs	r3, #12
 800407c:	603b      	str	r3, [r7, #0]
 800407e:	2340      	movs	r3, #64	; 0x40
 8004080:	2001      	movs	r0, #1
 8004082:	89a2      	ldrh	r2, [r4, #12]
 8004084:	4240      	negs	r0, r0
 8004086:	4313      	orrs	r3, r2
 8004088:	81a3      	strh	r3, [r4, #12]
 800408a:	b005      	add	sp, #20
 800408c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800408e:	9a02      	ldr	r2, [sp, #8]
 8004090:	6921      	ldr	r1, [r4, #16]
 8004092:	f000 faba 	bl	800460a <memcpy>
 8004096:	89a3      	ldrh	r3, [r4, #12]
 8004098:	4a14      	ldr	r2, [pc, #80]	; (80040ec <__ssputs_r+0xc0>)
 800409a:	401a      	ands	r2, r3
 800409c:	2380      	movs	r3, #128	; 0x80
 800409e:	4313      	orrs	r3, r2
 80040a0:	81a3      	strh	r3, [r4, #12]
 80040a2:	9b02      	ldr	r3, [sp, #8]
 80040a4:	6126      	str	r6, [r4, #16]
 80040a6:	18f6      	adds	r6, r6, r3
 80040a8:	6026      	str	r6, [r4, #0]
 80040aa:	6165      	str	r5, [r4, #20]
 80040ac:	9e01      	ldr	r6, [sp, #4]
 80040ae:	1aed      	subs	r5, r5, r3
 80040b0:	60a5      	str	r5, [r4, #8]
 80040b2:	9b01      	ldr	r3, [sp, #4]
 80040b4:	429e      	cmp	r6, r3
 80040b6:	d900      	bls.n	80040ba <__ssputs_r+0x8e>
 80040b8:	9e01      	ldr	r6, [sp, #4]
 80040ba:	0032      	movs	r2, r6
 80040bc:	9903      	ldr	r1, [sp, #12]
 80040be:	6820      	ldr	r0, [r4, #0]
 80040c0:	f000 faac 	bl	800461c <memmove>
 80040c4:	68a3      	ldr	r3, [r4, #8]
 80040c6:	2000      	movs	r0, #0
 80040c8:	1b9b      	subs	r3, r3, r6
 80040ca:	60a3      	str	r3, [r4, #8]
 80040cc:	6823      	ldr	r3, [r4, #0]
 80040ce:	199e      	adds	r6, r3, r6
 80040d0:	6026      	str	r6, [r4, #0]
 80040d2:	e7da      	b.n	800408a <__ssputs_r+0x5e>
 80040d4:	002a      	movs	r2, r5
 80040d6:	0038      	movs	r0, r7
 80040d8:	f000 fb96 	bl	8004808 <_realloc_r>
 80040dc:	1e06      	subs	r6, r0, #0
 80040de:	d1e0      	bne.n	80040a2 <__ssputs_r+0x76>
 80040e0:	0038      	movs	r0, r7
 80040e2:	6921      	ldr	r1, [r4, #16]
 80040e4:	f000 faae 	bl	8004644 <_free_r>
 80040e8:	e7c7      	b.n	800407a <__ssputs_r+0x4e>
 80040ea:	46c0      	nop			; (mov r8, r8)
 80040ec:	fffffb7f 	.word	0xfffffb7f

080040f0 <_svfiprintf_r>:
 80040f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040f2:	b0a1      	sub	sp, #132	; 0x84
 80040f4:	9003      	str	r0, [sp, #12]
 80040f6:	001d      	movs	r5, r3
 80040f8:	898b      	ldrh	r3, [r1, #12]
 80040fa:	000f      	movs	r7, r1
 80040fc:	0016      	movs	r6, r2
 80040fe:	061b      	lsls	r3, r3, #24
 8004100:	d511      	bpl.n	8004126 <_svfiprintf_r+0x36>
 8004102:	690b      	ldr	r3, [r1, #16]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d10e      	bne.n	8004126 <_svfiprintf_r+0x36>
 8004108:	2140      	movs	r1, #64	; 0x40
 800410a:	f000 fb07 	bl	800471c <_malloc_r>
 800410e:	6038      	str	r0, [r7, #0]
 8004110:	6138      	str	r0, [r7, #16]
 8004112:	2800      	cmp	r0, #0
 8004114:	d105      	bne.n	8004122 <_svfiprintf_r+0x32>
 8004116:	230c      	movs	r3, #12
 8004118:	9a03      	ldr	r2, [sp, #12]
 800411a:	3801      	subs	r0, #1
 800411c:	6013      	str	r3, [r2, #0]
 800411e:	b021      	add	sp, #132	; 0x84
 8004120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004122:	2340      	movs	r3, #64	; 0x40
 8004124:	617b      	str	r3, [r7, #20]
 8004126:	2300      	movs	r3, #0
 8004128:	ac08      	add	r4, sp, #32
 800412a:	6163      	str	r3, [r4, #20]
 800412c:	3320      	adds	r3, #32
 800412e:	7663      	strb	r3, [r4, #25]
 8004130:	3310      	adds	r3, #16
 8004132:	76a3      	strb	r3, [r4, #26]
 8004134:	9507      	str	r5, [sp, #28]
 8004136:	0035      	movs	r5, r6
 8004138:	782b      	ldrb	r3, [r5, #0]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d001      	beq.n	8004142 <_svfiprintf_r+0x52>
 800413e:	2b25      	cmp	r3, #37	; 0x25
 8004140:	d147      	bne.n	80041d2 <_svfiprintf_r+0xe2>
 8004142:	1bab      	subs	r3, r5, r6
 8004144:	9305      	str	r3, [sp, #20]
 8004146:	42b5      	cmp	r5, r6
 8004148:	d00c      	beq.n	8004164 <_svfiprintf_r+0x74>
 800414a:	0032      	movs	r2, r6
 800414c:	0039      	movs	r1, r7
 800414e:	9803      	ldr	r0, [sp, #12]
 8004150:	f7ff ff6c 	bl	800402c <__ssputs_r>
 8004154:	1c43      	adds	r3, r0, #1
 8004156:	d100      	bne.n	800415a <_svfiprintf_r+0x6a>
 8004158:	e0ae      	b.n	80042b8 <_svfiprintf_r+0x1c8>
 800415a:	6962      	ldr	r2, [r4, #20]
 800415c:	9b05      	ldr	r3, [sp, #20]
 800415e:	4694      	mov	ip, r2
 8004160:	4463      	add	r3, ip
 8004162:	6163      	str	r3, [r4, #20]
 8004164:	782b      	ldrb	r3, [r5, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d100      	bne.n	800416c <_svfiprintf_r+0x7c>
 800416a:	e0a5      	b.n	80042b8 <_svfiprintf_r+0x1c8>
 800416c:	2201      	movs	r2, #1
 800416e:	2300      	movs	r3, #0
 8004170:	4252      	negs	r2, r2
 8004172:	6062      	str	r2, [r4, #4]
 8004174:	a904      	add	r1, sp, #16
 8004176:	3254      	adds	r2, #84	; 0x54
 8004178:	1852      	adds	r2, r2, r1
 800417a:	1c6e      	adds	r6, r5, #1
 800417c:	6023      	str	r3, [r4, #0]
 800417e:	60e3      	str	r3, [r4, #12]
 8004180:	60a3      	str	r3, [r4, #8]
 8004182:	7013      	strb	r3, [r2, #0]
 8004184:	65a3      	str	r3, [r4, #88]	; 0x58
 8004186:	2205      	movs	r2, #5
 8004188:	7831      	ldrb	r1, [r6, #0]
 800418a:	4854      	ldr	r0, [pc, #336]	; (80042dc <_svfiprintf_r+0x1ec>)
 800418c:	f000 fa32 	bl	80045f4 <memchr>
 8004190:	1c75      	adds	r5, r6, #1
 8004192:	2800      	cmp	r0, #0
 8004194:	d11f      	bne.n	80041d6 <_svfiprintf_r+0xe6>
 8004196:	6822      	ldr	r2, [r4, #0]
 8004198:	06d3      	lsls	r3, r2, #27
 800419a:	d504      	bpl.n	80041a6 <_svfiprintf_r+0xb6>
 800419c:	2353      	movs	r3, #83	; 0x53
 800419e:	a904      	add	r1, sp, #16
 80041a0:	185b      	adds	r3, r3, r1
 80041a2:	2120      	movs	r1, #32
 80041a4:	7019      	strb	r1, [r3, #0]
 80041a6:	0713      	lsls	r3, r2, #28
 80041a8:	d504      	bpl.n	80041b4 <_svfiprintf_r+0xc4>
 80041aa:	2353      	movs	r3, #83	; 0x53
 80041ac:	a904      	add	r1, sp, #16
 80041ae:	185b      	adds	r3, r3, r1
 80041b0:	212b      	movs	r1, #43	; 0x2b
 80041b2:	7019      	strb	r1, [r3, #0]
 80041b4:	7833      	ldrb	r3, [r6, #0]
 80041b6:	2b2a      	cmp	r3, #42	; 0x2a
 80041b8:	d016      	beq.n	80041e8 <_svfiprintf_r+0xf8>
 80041ba:	0035      	movs	r5, r6
 80041bc:	2100      	movs	r1, #0
 80041be:	200a      	movs	r0, #10
 80041c0:	68e3      	ldr	r3, [r4, #12]
 80041c2:	782a      	ldrb	r2, [r5, #0]
 80041c4:	1c6e      	adds	r6, r5, #1
 80041c6:	3a30      	subs	r2, #48	; 0x30
 80041c8:	2a09      	cmp	r2, #9
 80041ca:	d94e      	bls.n	800426a <_svfiprintf_r+0x17a>
 80041cc:	2900      	cmp	r1, #0
 80041ce:	d111      	bne.n	80041f4 <_svfiprintf_r+0x104>
 80041d0:	e017      	b.n	8004202 <_svfiprintf_r+0x112>
 80041d2:	3501      	adds	r5, #1
 80041d4:	e7b0      	b.n	8004138 <_svfiprintf_r+0x48>
 80041d6:	4b41      	ldr	r3, [pc, #260]	; (80042dc <_svfiprintf_r+0x1ec>)
 80041d8:	6822      	ldr	r2, [r4, #0]
 80041da:	1ac0      	subs	r0, r0, r3
 80041dc:	2301      	movs	r3, #1
 80041de:	4083      	lsls	r3, r0
 80041e0:	4313      	orrs	r3, r2
 80041e2:	002e      	movs	r6, r5
 80041e4:	6023      	str	r3, [r4, #0]
 80041e6:	e7ce      	b.n	8004186 <_svfiprintf_r+0x96>
 80041e8:	9b07      	ldr	r3, [sp, #28]
 80041ea:	1d19      	adds	r1, r3, #4
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	9107      	str	r1, [sp, #28]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	db01      	blt.n	80041f8 <_svfiprintf_r+0x108>
 80041f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80041f6:	e004      	b.n	8004202 <_svfiprintf_r+0x112>
 80041f8:	425b      	negs	r3, r3
 80041fa:	60e3      	str	r3, [r4, #12]
 80041fc:	2302      	movs	r3, #2
 80041fe:	4313      	orrs	r3, r2
 8004200:	6023      	str	r3, [r4, #0]
 8004202:	782b      	ldrb	r3, [r5, #0]
 8004204:	2b2e      	cmp	r3, #46	; 0x2e
 8004206:	d10a      	bne.n	800421e <_svfiprintf_r+0x12e>
 8004208:	786b      	ldrb	r3, [r5, #1]
 800420a:	2b2a      	cmp	r3, #42	; 0x2a
 800420c:	d135      	bne.n	800427a <_svfiprintf_r+0x18a>
 800420e:	9b07      	ldr	r3, [sp, #28]
 8004210:	3502      	adds	r5, #2
 8004212:	1d1a      	adds	r2, r3, #4
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	9207      	str	r2, [sp, #28]
 8004218:	2b00      	cmp	r3, #0
 800421a:	db2b      	blt.n	8004274 <_svfiprintf_r+0x184>
 800421c:	9309      	str	r3, [sp, #36]	; 0x24
 800421e:	4e30      	ldr	r6, [pc, #192]	; (80042e0 <_svfiprintf_r+0x1f0>)
 8004220:	2203      	movs	r2, #3
 8004222:	0030      	movs	r0, r6
 8004224:	7829      	ldrb	r1, [r5, #0]
 8004226:	f000 f9e5 	bl	80045f4 <memchr>
 800422a:	2800      	cmp	r0, #0
 800422c:	d006      	beq.n	800423c <_svfiprintf_r+0x14c>
 800422e:	2340      	movs	r3, #64	; 0x40
 8004230:	1b80      	subs	r0, r0, r6
 8004232:	4083      	lsls	r3, r0
 8004234:	6822      	ldr	r2, [r4, #0]
 8004236:	3501      	adds	r5, #1
 8004238:	4313      	orrs	r3, r2
 800423a:	6023      	str	r3, [r4, #0]
 800423c:	7829      	ldrb	r1, [r5, #0]
 800423e:	2206      	movs	r2, #6
 8004240:	4828      	ldr	r0, [pc, #160]	; (80042e4 <_svfiprintf_r+0x1f4>)
 8004242:	1c6e      	adds	r6, r5, #1
 8004244:	7621      	strb	r1, [r4, #24]
 8004246:	f000 f9d5 	bl	80045f4 <memchr>
 800424a:	2800      	cmp	r0, #0
 800424c:	d03c      	beq.n	80042c8 <_svfiprintf_r+0x1d8>
 800424e:	4b26      	ldr	r3, [pc, #152]	; (80042e8 <_svfiprintf_r+0x1f8>)
 8004250:	2b00      	cmp	r3, #0
 8004252:	d125      	bne.n	80042a0 <_svfiprintf_r+0x1b0>
 8004254:	2207      	movs	r2, #7
 8004256:	9b07      	ldr	r3, [sp, #28]
 8004258:	3307      	adds	r3, #7
 800425a:	4393      	bics	r3, r2
 800425c:	3308      	adds	r3, #8
 800425e:	9307      	str	r3, [sp, #28]
 8004260:	6963      	ldr	r3, [r4, #20]
 8004262:	9a04      	ldr	r2, [sp, #16]
 8004264:	189b      	adds	r3, r3, r2
 8004266:	6163      	str	r3, [r4, #20]
 8004268:	e765      	b.n	8004136 <_svfiprintf_r+0x46>
 800426a:	4343      	muls	r3, r0
 800426c:	0035      	movs	r5, r6
 800426e:	2101      	movs	r1, #1
 8004270:	189b      	adds	r3, r3, r2
 8004272:	e7a6      	b.n	80041c2 <_svfiprintf_r+0xd2>
 8004274:	2301      	movs	r3, #1
 8004276:	425b      	negs	r3, r3
 8004278:	e7d0      	b.n	800421c <_svfiprintf_r+0x12c>
 800427a:	2300      	movs	r3, #0
 800427c:	200a      	movs	r0, #10
 800427e:	001a      	movs	r2, r3
 8004280:	3501      	adds	r5, #1
 8004282:	6063      	str	r3, [r4, #4]
 8004284:	7829      	ldrb	r1, [r5, #0]
 8004286:	1c6e      	adds	r6, r5, #1
 8004288:	3930      	subs	r1, #48	; 0x30
 800428a:	2909      	cmp	r1, #9
 800428c:	d903      	bls.n	8004296 <_svfiprintf_r+0x1a6>
 800428e:	2b00      	cmp	r3, #0
 8004290:	d0c5      	beq.n	800421e <_svfiprintf_r+0x12e>
 8004292:	9209      	str	r2, [sp, #36]	; 0x24
 8004294:	e7c3      	b.n	800421e <_svfiprintf_r+0x12e>
 8004296:	4342      	muls	r2, r0
 8004298:	0035      	movs	r5, r6
 800429a:	2301      	movs	r3, #1
 800429c:	1852      	adds	r2, r2, r1
 800429e:	e7f1      	b.n	8004284 <_svfiprintf_r+0x194>
 80042a0:	ab07      	add	r3, sp, #28
 80042a2:	9300      	str	r3, [sp, #0]
 80042a4:	003a      	movs	r2, r7
 80042a6:	0021      	movs	r1, r4
 80042a8:	4b10      	ldr	r3, [pc, #64]	; (80042ec <_svfiprintf_r+0x1fc>)
 80042aa:	9803      	ldr	r0, [sp, #12]
 80042ac:	e000      	b.n	80042b0 <_svfiprintf_r+0x1c0>
 80042ae:	bf00      	nop
 80042b0:	9004      	str	r0, [sp, #16]
 80042b2:	9b04      	ldr	r3, [sp, #16]
 80042b4:	3301      	adds	r3, #1
 80042b6:	d1d3      	bne.n	8004260 <_svfiprintf_r+0x170>
 80042b8:	89bb      	ldrh	r3, [r7, #12]
 80042ba:	980d      	ldr	r0, [sp, #52]	; 0x34
 80042bc:	065b      	lsls	r3, r3, #25
 80042be:	d400      	bmi.n	80042c2 <_svfiprintf_r+0x1d2>
 80042c0:	e72d      	b.n	800411e <_svfiprintf_r+0x2e>
 80042c2:	2001      	movs	r0, #1
 80042c4:	4240      	negs	r0, r0
 80042c6:	e72a      	b.n	800411e <_svfiprintf_r+0x2e>
 80042c8:	ab07      	add	r3, sp, #28
 80042ca:	9300      	str	r3, [sp, #0]
 80042cc:	003a      	movs	r2, r7
 80042ce:	0021      	movs	r1, r4
 80042d0:	4b06      	ldr	r3, [pc, #24]	; (80042ec <_svfiprintf_r+0x1fc>)
 80042d2:	9803      	ldr	r0, [sp, #12]
 80042d4:	f000 f87c 	bl	80043d0 <_printf_i>
 80042d8:	e7ea      	b.n	80042b0 <_svfiprintf_r+0x1c0>
 80042da:	46c0      	nop			; (mov r8, r8)
 80042dc:	08004a10 	.word	0x08004a10
 80042e0:	08004a16 	.word	0x08004a16
 80042e4:	08004a1a 	.word	0x08004a1a
 80042e8:	00000000 	.word	0x00000000
 80042ec:	0800402d 	.word	0x0800402d

080042f0 <_printf_common>:
 80042f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042f2:	0015      	movs	r5, r2
 80042f4:	9301      	str	r3, [sp, #4]
 80042f6:	688a      	ldr	r2, [r1, #8]
 80042f8:	690b      	ldr	r3, [r1, #16]
 80042fa:	000c      	movs	r4, r1
 80042fc:	9000      	str	r0, [sp, #0]
 80042fe:	4293      	cmp	r3, r2
 8004300:	da00      	bge.n	8004304 <_printf_common+0x14>
 8004302:	0013      	movs	r3, r2
 8004304:	0022      	movs	r2, r4
 8004306:	602b      	str	r3, [r5, #0]
 8004308:	3243      	adds	r2, #67	; 0x43
 800430a:	7812      	ldrb	r2, [r2, #0]
 800430c:	2a00      	cmp	r2, #0
 800430e:	d001      	beq.n	8004314 <_printf_common+0x24>
 8004310:	3301      	adds	r3, #1
 8004312:	602b      	str	r3, [r5, #0]
 8004314:	6823      	ldr	r3, [r4, #0]
 8004316:	069b      	lsls	r3, r3, #26
 8004318:	d502      	bpl.n	8004320 <_printf_common+0x30>
 800431a:	682b      	ldr	r3, [r5, #0]
 800431c:	3302      	adds	r3, #2
 800431e:	602b      	str	r3, [r5, #0]
 8004320:	6822      	ldr	r2, [r4, #0]
 8004322:	2306      	movs	r3, #6
 8004324:	0017      	movs	r7, r2
 8004326:	401f      	ands	r7, r3
 8004328:	421a      	tst	r2, r3
 800432a:	d027      	beq.n	800437c <_printf_common+0x8c>
 800432c:	0023      	movs	r3, r4
 800432e:	3343      	adds	r3, #67	; 0x43
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	1e5a      	subs	r2, r3, #1
 8004334:	4193      	sbcs	r3, r2
 8004336:	6822      	ldr	r2, [r4, #0]
 8004338:	0692      	lsls	r2, r2, #26
 800433a:	d430      	bmi.n	800439e <_printf_common+0xae>
 800433c:	0022      	movs	r2, r4
 800433e:	9901      	ldr	r1, [sp, #4]
 8004340:	9800      	ldr	r0, [sp, #0]
 8004342:	9e08      	ldr	r6, [sp, #32]
 8004344:	3243      	adds	r2, #67	; 0x43
 8004346:	47b0      	blx	r6
 8004348:	1c43      	adds	r3, r0, #1
 800434a:	d025      	beq.n	8004398 <_printf_common+0xa8>
 800434c:	2306      	movs	r3, #6
 800434e:	6820      	ldr	r0, [r4, #0]
 8004350:	682a      	ldr	r2, [r5, #0]
 8004352:	68e1      	ldr	r1, [r4, #12]
 8004354:	2500      	movs	r5, #0
 8004356:	4003      	ands	r3, r0
 8004358:	2b04      	cmp	r3, #4
 800435a:	d103      	bne.n	8004364 <_printf_common+0x74>
 800435c:	1a8d      	subs	r5, r1, r2
 800435e:	43eb      	mvns	r3, r5
 8004360:	17db      	asrs	r3, r3, #31
 8004362:	401d      	ands	r5, r3
 8004364:	68a3      	ldr	r3, [r4, #8]
 8004366:	6922      	ldr	r2, [r4, #16]
 8004368:	4293      	cmp	r3, r2
 800436a:	dd01      	ble.n	8004370 <_printf_common+0x80>
 800436c:	1a9b      	subs	r3, r3, r2
 800436e:	18ed      	adds	r5, r5, r3
 8004370:	2700      	movs	r7, #0
 8004372:	42bd      	cmp	r5, r7
 8004374:	d120      	bne.n	80043b8 <_printf_common+0xc8>
 8004376:	2000      	movs	r0, #0
 8004378:	e010      	b.n	800439c <_printf_common+0xac>
 800437a:	3701      	adds	r7, #1
 800437c:	68e3      	ldr	r3, [r4, #12]
 800437e:	682a      	ldr	r2, [r5, #0]
 8004380:	1a9b      	subs	r3, r3, r2
 8004382:	42bb      	cmp	r3, r7
 8004384:	ddd2      	ble.n	800432c <_printf_common+0x3c>
 8004386:	0022      	movs	r2, r4
 8004388:	2301      	movs	r3, #1
 800438a:	9901      	ldr	r1, [sp, #4]
 800438c:	9800      	ldr	r0, [sp, #0]
 800438e:	9e08      	ldr	r6, [sp, #32]
 8004390:	3219      	adds	r2, #25
 8004392:	47b0      	blx	r6
 8004394:	1c43      	adds	r3, r0, #1
 8004396:	d1f0      	bne.n	800437a <_printf_common+0x8a>
 8004398:	2001      	movs	r0, #1
 800439a:	4240      	negs	r0, r0
 800439c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800439e:	2030      	movs	r0, #48	; 0x30
 80043a0:	18e1      	adds	r1, r4, r3
 80043a2:	3143      	adds	r1, #67	; 0x43
 80043a4:	7008      	strb	r0, [r1, #0]
 80043a6:	0021      	movs	r1, r4
 80043a8:	1c5a      	adds	r2, r3, #1
 80043aa:	3145      	adds	r1, #69	; 0x45
 80043ac:	7809      	ldrb	r1, [r1, #0]
 80043ae:	18a2      	adds	r2, r4, r2
 80043b0:	3243      	adds	r2, #67	; 0x43
 80043b2:	3302      	adds	r3, #2
 80043b4:	7011      	strb	r1, [r2, #0]
 80043b6:	e7c1      	b.n	800433c <_printf_common+0x4c>
 80043b8:	0022      	movs	r2, r4
 80043ba:	2301      	movs	r3, #1
 80043bc:	9901      	ldr	r1, [sp, #4]
 80043be:	9800      	ldr	r0, [sp, #0]
 80043c0:	9e08      	ldr	r6, [sp, #32]
 80043c2:	321a      	adds	r2, #26
 80043c4:	47b0      	blx	r6
 80043c6:	1c43      	adds	r3, r0, #1
 80043c8:	d0e6      	beq.n	8004398 <_printf_common+0xa8>
 80043ca:	3701      	adds	r7, #1
 80043cc:	e7d1      	b.n	8004372 <_printf_common+0x82>
	...

080043d0 <_printf_i>:
 80043d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043d2:	b08b      	sub	sp, #44	; 0x2c
 80043d4:	9206      	str	r2, [sp, #24]
 80043d6:	000a      	movs	r2, r1
 80043d8:	3243      	adds	r2, #67	; 0x43
 80043da:	9307      	str	r3, [sp, #28]
 80043dc:	9005      	str	r0, [sp, #20]
 80043de:	9204      	str	r2, [sp, #16]
 80043e0:	7e0a      	ldrb	r2, [r1, #24]
 80043e2:	000c      	movs	r4, r1
 80043e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80043e6:	2a78      	cmp	r2, #120	; 0x78
 80043e8:	d807      	bhi.n	80043fa <_printf_i+0x2a>
 80043ea:	2a62      	cmp	r2, #98	; 0x62
 80043ec:	d809      	bhi.n	8004402 <_printf_i+0x32>
 80043ee:	2a00      	cmp	r2, #0
 80043f0:	d100      	bne.n	80043f4 <_printf_i+0x24>
 80043f2:	e0c1      	b.n	8004578 <_printf_i+0x1a8>
 80043f4:	2a58      	cmp	r2, #88	; 0x58
 80043f6:	d100      	bne.n	80043fa <_printf_i+0x2a>
 80043f8:	e08c      	b.n	8004514 <_printf_i+0x144>
 80043fa:	0026      	movs	r6, r4
 80043fc:	3642      	adds	r6, #66	; 0x42
 80043fe:	7032      	strb	r2, [r6, #0]
 8004400:	e022      	b.n	8004448 <_printf_i+0x78>
 8004402:	0010      	movs	r0, r2
 8004404:	3863      	subs	r0, #99	; 0x63
 8004406:	2815      	cmp	r0, #21
 8004408:	d8f7      	bhi.n	80043fa <_printf_i+0x2a>
 800440a:	f7fb fe85 	bl	8000118 <__gnu_thumb1_case_shi>
 800440e:	0016      	.short	0x0016
 8004410:	fff6001f 	.word	0xfff6001f
 8004414:	fff6fff6 	.word	0xfff6fff6
 8004418:	001ffff6 	.word	0x001ffff6
 800441c:	fff6fff6 	.word	0xfff6fff6
 8004420:	fff6fff6 	.word	0xfff6fff6
 8004424:	003600a8 	.word	0x003600a8
 8004428:	fff6009a 	.word	0xfff6009a
 800442c:	00b9fff6 	.word	0x00b9fff6
 8004430:	0036fff6 	.word	0x0036fff6
 8004434:	fff6fff6 	.word	0xfff6fff6
 8004438:	009e      	.short	0x009e
 800443a:	0026      	movs	r6, r4
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	3642      	adds	r6, #66	; 0x42
 8004440:	1d11      	adds	r1, r2, #4
 8004442:	6019      	str	r1, [r3, #0]
 8004444:	6813      	ldr	r3, [r2, #0]
 8004446:	7033      	strb	r3, [r6, #0]
 8004448:	2301      	movs	r3, #1
 800444a:	e0a7      	b.n	800459c <_printf_i+0x1cc>
 800444c:	6808      	ldr	r0, [r1, #0]
 800444e:	6819      	ldr	r1, [r3, #0]
 8004450:	1d0a      	adds	r2, r1, #4
 8004452:	0605      	lsls	r5, r0, #24
 8004454:	d50b      	bpl.n	800446e <_printf_i+0x9e>
 8004456:	680d      	ldr	r5, [r1, #0]
 8004458:	601a      	str	r2, [r3, #0]
 800445a:	2d00      	cmp	r5, #0
 800445c:	da03      	bge.n	8004466 <_printf_i+0x96>
 800445e:	232d      	movs	r3, #45	; 0x2d
 8004460:	9a04      	ldr	r2, [sp, #16]
 8004462:	426d      	negs	r5, r5
 8004464:	7013      	strb	r3, [r2, #0]
 8004466:	4b61      	ldr	r3, [pc, #388]	; (80045ec <_printf_i+0x21c>)
 8004468:	270a      	movs	r7, #10
 800446a:	9303      	str	r3, [sp, #12]
 800446c:	e01b      	b.n	80044a6 <_printf_i+0xd6>
 800446e:	680d      	ldr	r5, [r1, #0]
 8004470:	601a      	str	r2, [r3, #0]
 8004472:	0641      	lsls	r1, r0, #25
 8004474:	d5f1      	bpl.n	800445a <_printf_i+0x8a>
 8004476:	b22d      	sxth	r5, r5
 8004478:	e7ef      	b.n	800445a <_printf_i+0x8a>
 800447a:	680d      	ldr	r5, [r1, #0]
 800447c:	6819      	ldr	r1, [r3, #0]
 800447e:	1d08      	adds	r0, r1, #4
 8004480:	6018      	str	r0, [r3, #0]
 8004482:	062e      	lsls	r6, r5, #24
 8004484:	d501      	bpl.n	800448a <_printf_i+0xba>
 8004486:	680d      	ldr	r5, [r1, #0]
 8004488:	e003      	b.n	8004492 <_printf_i+0xc2>
 800448a:	066d      	lsls	r5, r5, #25
 800448c:	d5fb      	bpl.n	8004486 <_printf_i+0xb6>
 800448e:	680d      	ldr	r5, [r1, #0]
 8004490:	b2ad      	uxth	r5, r5
 8004492:	4b56      	ldr	r3, [pc, #344]	; (80045ec <_printf_i+0x21c>)
 8004494:	2708      	movs	r7, #8
 8004496:	9303      	str	r3, [sp, #12]
 8004498:	2a6f      	cmp	r2, #111	; 0x6f
 800449a:	d000      	beq.n	800449e <_printf_i+0xce>
 800449c:	3702      	adds	r7, #2
 800449e:	0023      	movs	r3, r4
 80044a0:	2200      	movs	r2, #0
 80044a2:	3343      	adds	r3, #67	; 0x43
 80044a4:	701a      	strb	r2, [r3, #0]
 80044a6:	6863      	ldr	r3, [r4, #4]
 80044a8:	60a3      	str	r3, [r4, #8]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	db03      	blt.n	80044b6 <_printf_i+0xe6>
 80044ae:	2204      	movs	r2, #4
 80044b0:	6821      	ldr	r1, [r4, #0]
 80044b2:	4391      	bics	r1, r2
 80044b4:	6021      	str	r1, [r4, #0]
 80044b6:	2d00      	cmp	r5, #0
 80044b8:	d102      	bne.n	80044c0 <_printf_i+0xf0>
 80044ba:	9e04      	ldr	r6, [sp, #16]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d00c      	beq.n	80044da <_printf_i+0x10a>
 80044c0:	9e04      	ldr	r6, [sp, #16]
 80044c2:	0028      	movs	r0, r5
 80044c4:	0039      	movs	r1, r7
 80044c6:	f7fb feb7 	bl	8000238 <__aeabi_uidivmod>
 80044ca:	9b03      	ldr	r3, [sp, #12]
 80044cc:	3e01      	subs	r6, #1
 80044ce:	5c5b      	ldrb	r3, [r3, r1]
 80044d0:	7033      	strb	r3, [r6, #0]
 80044d2:	002b      	movs	r3, r5
 80044d4:	0005      	movs	r5, r0
 80044d6:	429f      	cmp	r7, r3
 80044d8:	d9f3      	bls.n	80044c2 <_printf_i+0xf2>
 80044da:	2f08      	cmp	r7, #8
 80044dc:	d109      	bne.n	80044f2 <_printf_i+0x122>
 80044de:	6823      	ldr	r3, [r4, #0]
 80044e0:	07db      	lsls	r3, r3, #31
 80044e2:	d506      	bpl.n	80044f2 <_printf_i+0x122>
 80044e4:	6863      	ldr	r3, [r4, #4]
 80044e6:	6922      	ldr	r2, [r4, #16]
 80044e8:	4293      	cmp	r3, r2
 80044ea:	dc02      	bgt.n	80044f2 <_printf_i+0x122>
 80044ec:	2330      	movs	r3, #48	; 0x30
 80044ee:	3e01      	subs	r6, #1
 80044f0:	7033      	strb	r3, [r6, #0]
 80044f2:	9b04      	ldr	r3, [sp, #16]
 80044f4:	1b9b      	subs	r3, r3, r6
 80044f6:	6123      	str	r3, [r4, #16]
 80044f8:	9b07      	ldr	r3, [sp, #28]
 80044fa:	0021      	movs	r1, r4
 80044fc:	9300      	str	r3, [sp, #0]
 80044fe:	9805      	ldr	r0, [sp, #20]
 8004500:	9b06      	ldr	r3, [sp, #24]
 8004502:	aa09      	add	r2, sp, #36	; 0x24
 8004504:	f7ff fef4 	bl	80042f0 <_printf_common>
 8004508:	1c43      	adds	r3, r0, #1
 800450a:	d14c      	bne.n	80045a6 <_printf_i+0x1d6>
 800450c:	2001      	movs	r0, #1
 800450e:	4240      	negs	r0, r0
 8004510:	b00b      	add	sp, #44	; 0x2c
 8004512:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004514:	3145      	adds	r1, #69	; 0x45
 8004516:	700a      	strb	r2, [r1, #0]
 8004518:	4a34      	ldr	r2, [pc, #208]	; (80045ec <_printf_i+0x21c>)
 800451a:	9203      	str	r2, [sp, #12]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	6821      	ldr	r1, [r4, #0]
 8004520:	ca20      	ldmia	r2!, {r5}
 8004522:	601a      	str	r2, [r3, #0]
 8004524:	0608      	lsls	r0, r1, #24
 8004526:	d516      	bpl.n	8004556 <_printf_i+0x186>
 8004528:	07cb      	lsls	r3, r1, #31
 800452a:	d502      	bpl.n	8004532 <_printf_i+0x162>
 800452c:	2320      	movs	r3, #32
 800452e:	4319      	orrs	r1, r3
 8004530:	6021      	str	r1, [r4, #0]
 8004532:	2710      	movs	r7, #16
 8004534:	2d00      	cmp	r5, #0
 8004536:	d1b2      	bne.n	800449e <_printf_i+0xce>
 8004538:	2320      	movs	r3, #32
 800453a:	6822      	ldr	r2, [r4, #0]
 800453c:	439a      	bics	r2, r3
 800453e:	6022      	str	r2, [r4, #0]
 8004540:	e7ad      	b.n	800449e <_printf_i+0xce>
 8004542:	2220      	movs	r2, #32
 8004544:	6809      	ldr	r1, [r1, #0]
 8004546:	430a      	orrs	r2, r1
 8004548:	6022      	str	r2, [r4, #0]
 800454a:	0022      	movs	r2, r4
 800454c:	2178      	movs	r1, #120	; 0x78
 800454e:	3245      	adds	r2, #69	; 0x45
 8004550:	7011      	strb	r1, [r2, #0]
 8004552:	4a27      	ldr	r2, [pc, #156]	; (80045f0 <_printf_i+0x220>)
 8004554:	e7e1      	b.n	800451a <_printf_i+0x14a>
 8004556:	0648      	lsls	r0, r1, #25
 8004558:	d5e6      	bpl.n	8004528 <_printf_i+0x158>
 800455a:	b2ad      	uxth	r5, r5
 800455c:	e7e4      	b.n	8004528 <_printf_i+0x158>
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	680d      	ldr	r5, [r1, #0]
 8004562:	1d10      	adds	r0, r2, #4
 8004564:	6949      	ldr	r1, [r1, #20]
 8004566:	6018      	str	r0, [r3, #0]
 8004568:	6813      	ldr	r3, [r2, #0]
 800456a:	062e      	lsls	r6, r5, #24
 800456c:	d501      	bpl.n	8004572 <_printf_i+0x1a2>
 800456e:	6019      	str	r1, [r3, #0]
 8004570:	e002      	b.n	8004578 <_printf_i+0x1a8>
 8004572:	066d      	lsls	r5, r5, #25
 8004574:	d5fb      	bpl.n	800456e <_printf_i+0x19e>
 8004576:	8019      	strh	r1, [r3, #0]
 8004578:	2300      	movs	r3, #0
 800457a:	9e04      	ldr	r6, [sp, #16]
 800457c:	6123      	str	r3, [r4, #16]
 800457e:	e7bb      	b.n	80044f8 <_printf_i+0x128>
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	1d11      	adds	r1, r2, #4
 8004584:	6019      	str	r1, [r3, #0]
 8004586:	6816      	ldr	r6, [r2, #0]
 8004588:	2100      	movs	r1, #0
 800458a:	0030      	movs	r0, r6
 800458c:	6862      	ldr	r2, [r4, #4]
 800458e:	f000 f831 	bl	80045f4 <memchr>
 8004592:	2800      	cmp	r0, #0
 8004594:	d001      	beq.n	800459a <_printf_i+0x1ca>
 8004596:	1b80      	subs	r0, r0, r6
 8004598:	6060      	str	r0, [r4, #4]
 800459a:	6863      	ldr	r3, [r4, #4]
 800459c:	6123      	str	r3, [r4, #16]
 800459e:	2300      	movs	r3, #0
 80045a0:	9a04      	ldr	r2, [sp, #16]
 80045a2:	7013      	strb	r3, [r2, #0]
 80045a4:	e7a8      	b.n	80044f8 <_printf_i+0x128>
 80045a6:	6923      	ldr	r3, [r4, #16]
 80045a8:	0032      	movs	r2, r6
 80045aa:	9906      	ldr	r1, [sp, #24]
 80045ac:	9805      	ldr	r0, [sp, #20]
 80045ae:	9d07      	ldr	r5, [sp, #28]
 80045b0:	47a8      	blx	r5
 80045b2:	1c43      	adds	r3, r0, #1
 80045b4:	d0aa      	beq.n	800450c <_printf_i+0x13c>
 80045b6:	6823      	ldr	r3, [r4, #0]
 80045b8:	079b      	lsls	r3, r3, #30
 80045ba:	d415      	bmi.n	80045e8 <_printf_i+0x218>
 80045bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045be:	68e0      	ldr	r0, [r4, #12]
 80045c0:	4298      	cmp	r0, r3
 80045c2:	daa5      	bge.n	8004510 <_printf_i+0x140>
 80045c4:	0018      	movs	r0, r3
 80045c6:	e7a3      	b.n	8004510 <_printf_i+0x140>
 80045c8:	0022      	movs	r2, r4
 80045ca:	2301      	movs	r3, #1
 80045cc:	9906      	ldr	r1, [sp, #24]
 80045ce:	9805      	ldr	r0, [sp, #20]
 80045d0:	9e07      	ldr	r6, [sp, #28]
 80045d2:	3219      	adds	r2, #25
 80045d4:	47b0      	blx	r6
 80045d6:	1c43      	adds	r3, r0, #1
 80045d8:	d098      	beq.n	800450c <_printf_i+0x13c>
 80045da:	3501      	adds	r5, #1
 80045dc:	68e3      	ldr	r3, [r4, #12]
 80045de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80045e0:	1a9b      	subs	r3, r3, r2
 80045e2:	42ab      	cmp	r3, r5
 80045e4:	dcf0      	bgt.n	80045c8 <_printf_i+0x1f8>
 80045e6:	e7e9      	b.n	80045bc <_printf_i+0x1ec>
 80045e8:	2500      	movs	r5, #0
 80045ea:	e7f7      	b.n	80045dc <_printf_i+0x20c>
 80045ec:	08004a21 	.word	0x08004a21
 80045f0:	08004a32 	.word	0x08004a32

080045f4 <memchr>:
 80045f4:	b2c9      	uxtb	r1, r1
 80045f6:	1882      	adds	r2, r0, r2
 80045f8:	4290      	cmp	r0, r2
 80045fa:	d101      	bne.n	8004600 <memchr+0xc>
 80045fc:	2000      	movs	r0, #0
 80045fe:	4770      	bx	lr
 8004600:	7803      	ldrb	r3, [r0, #0]
 8004602:	428b      	cmp	r3, r1
 8004604:	d0fb      	beq.n	80045fe <memchr+0xa>
 8004606:	3001      	adds	r0, #1
 8004608:	e7f6      	b.n	80045f8 <memchr+0x4>

0800460a <memcpy>:
 800460a:	2300      	movs	r3, #0
 800460c:	b510      	push	{r4, lr}
 800460e:	429a      	cmp	r2, r3
 8004610:	d100      	bne.n	8004614 <memcpy+0xa>
 8004612:	bd10      	pop	{r4, pc}
 8004614:	5ccc      	ldrb	r4, [r1, r3]
 8004616:	54c4      	strb	r4, [r0, r3]
 8004618:	3301      	adds	r3, #1
 800461a:	e7f8      	b.n	800460e <memcpy+0x4>

0800461c <memmove>:
 800461c:	b510      	push	{r4, lr}
 800461e:	4288      	cmp	r0, r1
 8004620:	d902      	bls.n	8004628 <memmove+0xc>
 8004622:	188b      	adds	r3, r1, r2
 8004624:	4298      	cmp	r0, r3
 8004626:	d303      	bcc.n	8004630 <memmove+0x14>
 8004628:	2300      	movs	r3, #0
 800462a:	e007      	b.n	800463c <memmove+0x20>
 800462c:	5c8b      	ldrb	r3, [r1, r2]
 800462e:	5483      	strb	r3, [r0, r2]
 8004630:	3a01      	subs	r2, #1
 8004632:	d2fb      	bcs.n	800462c <memmove+0x10>
 8004634:	bd10      	pop	{r4, pc}
 8004636:	5ccc      	ldrb	r4, [r1, r3]
 8004638:	54c4      	strb	r4, [r0, r3]
 800463a:	3301      	adds	r3, #1
 800463c:	429a      	cmp	r2, r3
 800463e:	d1fa      	bne.n	8004636 <memmove+0x1a>
 8004640:	e7f8      	b.n	8004634 <memmove+0x18>
	...

08004644 <_free_r>:
 8004644:	b570      	push	{r4, r5, r6, lr}
 8004646:	0005      	movs	r5, r0
 8004648:	2900      	cmp	r1, #0
 800464a:	d010      	beq.n	800466e <_free_r+0x2a>
 800464c:	1f0c      	subs	r4, r1, #4
 800464e:	6823      	ldr	r3, [r4, #0]
 8004650:	2b00      	cmp	r3, #0
 8004652:	da00      	bge.n	8004656 <_free_r+0x12>
 8004654:	18e4      	adds	r4, r4, r3
 8004656:	0028      	movs	r0, r5
 8004658:	f000 f918 	bl	800488c <__malloc_lock>
 800465c:	4a1d      	ldr	r2, [pc, #116]	; (80046d4 <_free_r+0x90>)
 800465e:	6813      	ldr	r3, [r2, #0]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d105      	bne.n	8004670 <_free_r+0x2c>
 8004664:	6063      	str	r3, [r4, #4]
 8004666:	6014      	str	r4, [r2, #0]
 8004668:	0028      	movs	r0, r5
 800466a:	f000 f917 	bl	800489c <__malloc_unlock>
 800466e:	bd70      	pop	{r4, r5, r6, pc}
 8004670:	42a3      	cmp	r3, r4
 8004672:	d908      	bls.n	8004686 <_free_r+0x42>
 8004674:	6821      	ldr	r1, [r4, #0]
 8004676:	1860      	adds	r0, r4, r1
 8004678:	4283      	cmp	r3, r0
 800467a:	d1f3      	bne.n	8004664 <_free_r+0x20>
 800467c:	6818      	ldr	r0, [r3, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	1841      	adds	r1, r0, r1
 8004682:	6021      	str	r1, [r4, #0]
 8004684:	e7ee      	b.n	8004664 <_free_r+0x20>
 8004686:	001a      	movs	r2, r3
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d001      	beq.n	8004692 <_free_r+0x4e>
 800468e:	42a3      	cmp	r3, r4
 8004690:	d9f9      	bls.n	8004686 <_free_r+0x42>
 8004692:	6811      	ldr	r1, [r2, #0]
 8004694:	1850      	adds	r0, r2, r1
 8004696:	42a0      	cmp	r0, r4
 8004698:	d10b      	bne.n	80046b2 <_free_r+0x6e>
 800469a:	6820      	ldr	r0, [r4, #0]
 800469c:	1809      	adds	r1, r1, r0
 800469e:	1850      	adds	r0, r2, r1
 80046a0:	6011      	str	r1, [r2, #0]
 80046a2:	4283      	cmp	r3, r0
 80046a4:	d1e0      	bne.n	8004668 <_free_r+0x24>
 80046a6:	6818      	ldr	r0, [r3, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	1841      	adds	r1, r0, r1
 80046ac:	6011      	str	r1, [r2, #0]
 80046ae:	6053      	str	r3, [r2, #4]
 80046b0:	e7da      	b.n	8004668 <_free_r+0x24>
 80046b2:	42a0      	cmp	r0, r4
 80046b4:	d902      	bls.n	80046bc <_free_r+0x78>
 80046b6:	230c      	movs	r3, #12
 80046b8:	602b      	str	r3, [r5, #0]
 80046ba:	e7d5      	b.n	8004668 <_free_r+0x24>
 80046bc:	6821      	ldr	r1, [r4, #0]
 80046be:	1860      	adds	r0, r4, r1
 80046c0:	4283      	cmp	r3, r0
 80046c2:	d103      	bne.n	80046cc <_free_r+0x88>
 80046c4:	6818      	ldr	r0, [r3, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	1841      	adds	r1, r0, r1
 80046ca:	6021      	str	r1, [r4, #0]
 80046cc:	6063      	str	r3, [r4, #4]
 80046ce:	6054      	str	r4, [r2, #4]
 80046d0:	e7ca      	b.n	8004668 <_free_r+0x24>
 80046d2:	46c0      	nop			; (mov r8, r8)
 80046d4:	20000170 	.word	0x20000170

080046d8 <sbrk_aligned>:
 80046d8:	b570      	push	{r4, r5, r6, lr}
 80046da:	4e0f      	ldr	r6, [pc, #60]	; (8004718 <sbrk_aligned+0x40>)
 80046dc:	000d      	movs	r5, r1
 80046de:	6831      	ldr	r1, [r6, #0]
 80046e0:	0004      	movs	r4, r0
 80046e2:	2900      	cmp	r1, #0
 80046e4:	d102      	bne.n	80046ec <sbrk_aligned+0x14>
 80046e6:	f000 f8bf 	bl	8004868 <_sbrk_r>
 80046ea:	6030      	str	r0, [r6, #0]
 80046ec:	0029      	movs	r1, r5
 80046ee:	0020      	movs	r0, r4
 80046f0:	f000 f8ba 	bl	8004868 <_sbrk_r>
 80046f4:	1c43      	adds	r3, r0, #1
 80046f6:	d00a      	beq.n	800470e <sbrk_aligned+0x36>
 80046f8:	2303      	movs	r3, #3
 80046fa:	1cc5      	adds	r5, r0, #3
 80046fc:	439d      	bics	r5, r3
 80046fe:	42a8      	cmp	r0, r5
 8004700:	d007      	beq.n	8004712 <sbrk_aligned+0x3a>
 8004702:	1a29      	subs	r1, r5, r0
 8004704:	0020      	movs	r0, r4
 8004706:	f000 f8af 	bl	8004868 <_sbrk_r>
 800470a:	1c43      	adds	r3, r0, #1
 800470c:	d101      	bne.n	8004712 <sbrk_aligned+0x3a>
 800470e:	2501      	movs	r5, #1
 8004710:	426d      	negs	r5, r5
 8004712:	0028      	movs	r0, r5
 8004714:	bd70      	pop	{r4, r5, r6, pc}
 8004716:	46c0      	nop			; (mov r8, r8)
 8004718:	20000174 	.word	0x20000174

0800471c <_malloc_r>:
 800471c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800471e:	2203      	movs	r2, #3
 8004720:	1ccb      	adds	r3, r1, #3
 8004722:	4393      	bics	r3, r2
 8004724:	3308      	adds	r3, #8
 8004726:	0006      	movs	r6, r0
 8004728:	001f      	movs	r7, r3
 800472a:	2b0c      	cmp	r3, #12
 800472c:	d232      	bcs.n	8004794 <_malloc_r+0x78>
 800472e:	270c      	movs	r7, #12
 8004730:	42b9      	cmp	r1, r7
 8004732:	d831      	bhi.n	8004798 <_malloc_r+0x7c>
 8004734:	0030      	movs	r0, r6
 8004736:	f000 f8a9 	bl	800488c <__malloc_lock>
 800473a:	4d32      	ldr	r5, [pc, #200]	; (8004804 <_malloc_r+0xe8>)
 800473c:	682b      	ldr	r3, [r5, #0]
 800473e:	001c      	movs	r4, r3
 8004740:	2c00      	cmp	r4, #0
 8004742:	d12e      	bne.n	80047a2 <_malloc_r+0x86>
 8004744:	0039      	movs	r1, r7
 8004746:	0030      	movs	r0, r6
 8004748:	f7ff ffc6 	bl	80046d8 <sbrk_aligned>
 800474c:	0004      	movs	r4, r0
 800474e:	1c43      	adds	r3, r0, #1
 8004750:	d11e      	bne.n	8004790 <_malloc_r+0x74>
 8004752:	682c      	ldr	r4, [r5, #0]
 8004754:	0025      	movs	r5, r4
 8004756:	2d00      	cmp	r5, #0
 8004758:	d14a      	bne.n	80047f0 <_malloc_r+0xd4>
 800475a:	6823      	ldr	r3, [r4, #0]
 800475c:	0029      	movs	r1, r5
 800475e:	18e3      	adds	r3, r4, r3
 8004760:	0030      	movs	r0, r6
 8004762:	9301      	str	r3, [sp, #4]
 8004764:	f000 f880 	bl	8004868 <_sbrk_r>
 8004768:	9b01      	ldr	r3, [sp, #4]
 800476a:	4283      	cmp	r3, r0
 800476c:	d143      	bne.n	80047f6 <_malloc_r+0xda>
 800476e:	6823      	ldr	r3, [r4, #0]
 8004770:	3703      	adds	r7, #3
 8004772:	1aff      	subs	r7, r7, r3
 8004774:	2303      	movs	r3, #3
 8004776:	439f      	bics	r7, r3
 8004778:	3708      	adds	r7, #8
 800477a:	2f0c      	cmp	r7, #12
 800477c:	d200      	bcs.n	8004780 <_malloc_r+0x64>
 800477e:	270c      	movs	r7, #12
 8004780:	0039      	movs	r1, r7
 8004782:	0030      	movs	r0, r6
 8004784:	f7ff ffa8 	bl	80046d8 <sbrk_aligned>
 8004788:	1c43      	adds	r3, r0, #1
 800478a:	d034      	beq.n	80047f6 <_malloc_r+0xda>
 800478c:	6823      	ldr	r3, [r4, #0]
 800478e:	19df      	adds	r7, r3, r7
 8004790:	6027      	str	r7, [r4, #0]
 8004792:	e013      	b.n	80047bc <_malloc_r+0xa0>
 8004794:	2b00      	cmp	r3, #0
 8004796:	dacb      	bge.n	8004730 <_malloc_r+0x14>
 8004798:	230c      	movs	r3, #12
 800479a:	2500      	movs	r5, #0
 800479c:	6033      	str	r3, [r6, #0]
 800479e:	0028      	movs	r0, r5
 80047a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80047a2:	6822      	ldr	r2, [r4, #0]
 80047a4:	1bd1      	subs	r1, r2, r7
 80047a6:	d420      	bmi.n	80047ea <_malloc_r+0xce>
 80047a8:	290b      	cmp	r1, #11
 80047aa:	d917      	bls.n	80047dc <_malloc_r+0xc0>
 80047ac:	19e2      	adds	r2, r4, r7
 80047ae:	6027      	str	r7, [r4, #0]
 80047b0:	42a3      	cmp	r3, r4
 80047b2:	d111      	bne.n	80047d8 <_malloc_r+0xbc>
 80047b4:	602a      	str	r2, [r5, #0]
 80047b6:	6863      	ldr	r3, [r4, #4]
 80047b8:	6011      	str	r1, [r2, #0]
 80047ba:	6053      	str	r3, [r2, #4]
 80047bc:	0030      	movs	r0, r6
 80047be:	0025      	movs	r5, r4
 80047c0:	f000 f86c 	bl	800489c <__malloc_unlock>
 80047c4:	2207      	movs	r2, #7
 80047c6:	350b      	adds	r5, #11
 80047c8:	1d23      	adds	r3, r4, #4
 80047ca:	4395      	bics	r5, r2
 80047cc:	1aea      	subs	r2, r5, r3
 80047ce:	429d      	cmp	r5, r3
 80047d0:	d0e5      	beq.n	800479e <_malloc_r+0x82>
 80047d2:	1b5b      	subs	r3, r3, r5
 80047d4:	50a3      	str	r3, [r4, r2]
 80047d6:	e7e2      	b.n	800479e <_malloc_r+0x82>
 80047d8:	605a      	str	r2, [r3, #4]
 80047da:	e7ec      	b.n	80047b6 <_malloc_r+0x9a>
 80047dc:	6862      	ldr	r2, [r4, #4]
 80047de:	42a3      	cmp	r3, r4
 80047e0:	d101      	bne.n	80047e6 <_malloc_r+0xca>
 80047e2:	602a      	str	r2, [r5, #0]
 80047e4:	e7ea      	b.n	80047bc <_malloc_r+0xa0>
 80047e6:	605a      	str	r2, [r3, #4]
 80047e8:	e7e8      	b.n	80047bc <_malloc_r+0xa0>
 80047ea:	0023      	movs	r3, r4
 80047ec:	6864      	ldr	r4, [r4, #4]
 80047ee:	e7a7      	b.n	8004740 <_malloc_r+0x24>
 80047f0:	002c      	movs	r4, r5
 80047f2:	686d      	ldr	r5, [r5, #4]
 80047f4:	e7af      	b.n	8004756 <_malloc_r+0x3a>
 80047f6:	230c      	movs	r3, #12
 80047f8:	0030      	movs	r0, r6
 80047fa:	6033      	str	r3, [r6, #0]
 80047fc:	f000 f84e 	bl	800489c <__malloc_unlock>
 8004800:	e7cd      	b.n	800479e <_malloc_r+0x82>
 8004802:	46c0      	nop			; (mov r8, r8)
 8004804:	20000170 	.word	0x20000170

08004808 <_realloc_r>:
 8004808:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800480a:	0007      	movs	r7, r0
 800480c:	000e      	movs	r6, r1
 800480e:	0014      	movs	r4, r2
 8004810:	2900      	cmp	r1, #0
 8004812:	d105      	bne.n	8004820 <_realloc_r+0x18>
 8004814:	0011      	movs	r1, r2
 8004816:	f7ff ff81 	bl	800471c <_malloc_r>
 800481a:	0005      	movs	r5, r0
 800481c:	0028      	movs	r0, r5
 800481e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004820:	2a00      	cmp	r2, #0
 8004822:	d103      	bne.n	800482c <_realloc_r+0x24>
 8004824:	f7ff ff0e 	bl	8004644 <_free_r>
 8004828:	0025      	movs	r5, r4
 800482a:	e7f7      	b.n	800481c <_realloc_r+0x14>
 800482c:	f000 f83e 	bl	80048ac <_malloc_usable_size_r>
 8004830:	9001      	str	r0, [sp, #4]
 8004832:	4284      	cmp	r4, r0
 8004834:	d803      	bhi.n	800483e <_realloc_r+0x36>
 8004836:	0035      	movs	r5, r6
 8004838:	0843      	lsrs	r3, r0, #1
 800483a:	42a3      	cmp	r3, r4
 800483c:	d3ee      	bcc.n	800481c <_realloc_r+0x14>
 800483e:	0021      	movs	r1, r4
 8004840:	0038      	movs	r0, r7
 8004842:	f7ff ff6b 	bl	800471c <_malloc_r>
 8004846:	1e05      	subs	r5, r0, #0
 8004848:	d0e8      	beq.n	800481c <_realloc_r+0x14>
 800484a:	9b01      	ldr	r3, [sp, #4]
 800484c:	0022      	movs	r2, r4
 800484e:	429c      	cmp	r4, r3
 8004850:	d900      	bls.n	8004854 <_realloc_r+0x4c>
 8004852:	001a      	movs	r2, r3
 8004854:	0031      	movs	r1, r6
 8004856:	0028      	movs	r0, r5
 8004858:	f7ff fed7 	bl	800460a <memcpy>
 800485c:	0031      	movs	r1, r6
 800485e:	0038      	movs	r0, r7
 8004860:	f7ff fef0 	bl	8004644 <_free_r>
 8004864:	e7da      	b.n	800481c <_realloc_r+0x14>
	...

08004868 <_sbrk_r>:
 8004868:	2300      	movs	r3, #0
 800486a:	b570      	push	{r4, r5, r6, lr}
 800486c:	4d06      	ldr	r5, [pc, #24]	; (8004888 <_sbrk_r+0x20>)
 800486e:	0004      	movs	r4, r0
 8004870:	0008      	movs	r0, r1
 8004872:	602b      	str	r3, [r5, #0]
 8004874:	f7fd f88a 	bl	800198c <_sbrk>
 8004878:	1c43      	adds	r3, r0, #1
 800487a:	d103      	bne.n	8004884 <_sbrk_r+0x1c>
 800487c:	682b      	ldr	r3, [r5, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d000      	beq.n	8004884 <_sbrk_r+0x1c>
 8004882:	6023      	str	r3, [r4, #0]
 8004884:	bd70      	pop	{r4, r5, r6, pc}
 8004886:	46c0      	nop			; (mov r8, r8)
 8004888:	20000178 	.word	0x20000178

0800488c <__malloc_lock>:
 800488c:	b510      	push	{r4, lr}
 800488e:	4802      	ldr	r0, [pc, #8]	; (8004898 <__malloc_lock+0xc>)
 8004890:	f000 f814 	bl	80048bc <__retarget_lock_acquire_recursive>
 8004894:	bd10      	pop	{r4, pc}
 8004896:	46c0      	nop			; (mov r8, r8)
 8004898:	2000017c 	.word	0x2000017c

0800489c <__malloc_unlock>:
 800489c:	b510      	push	{r4, lr}
 800489e:	4802      	ldr	r0, [pc, #8]	; (80048a8 <__malloc_unlock+0xc>)
 80048a0:	f000 f80d 	bl	80048be <__retarget_lock_release_recursive>
 80048a4:	bd10      	pop	{r4, pc}
 80048a6:	46c0      	nop			; (mov r8, r8)
 80048a8:	2000017c 	.word	0x2000017c

080048ac <_malloc_usable_size_r>:
 80048ac:	1f0b      	subs	r3, r1, #4
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	1f18      	subs	r0, r3, #4
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	da01      	bge.n	80048ba <_malloc_usable_size_r+0xe>
 80048b6:	580b      	ldr	r3, [r1, r0]
 80048b8:	18c0      	adds	r0, r0, r3
 80048ba:	4770      	bx	lr

080048bc <__retarget_lock_acquire_recursive>:
 80048bc:	4770      	bx	lr

080048be <__retarget_lock_release_recursive>:
 80048be:	4770      	bx	lr

080048c0 <_init>:
 80048c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048c2:	46c0      	nop			; (mov r8, r8)
 80048c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048c6:	bc08      	pop	{r3}
 80048c8:	469e      	mov	lr, r3
 80048ca:	4770      	bx	lr

080048cc <_fini>:
 80048cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ce:	46c0      	nop			; (mov r8, r8)
 80048d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048d2:	bc08      	pop	{r3}
 80048d4:	469e      	mov	lr, r3
 80048d6:	4770      	bx	lr
