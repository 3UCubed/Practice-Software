/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */

//Defines the addresses for the two ICs (make sure that IC1 data is 00 and IC2 is 01)
static const uint8_t ADDR1 = 0x48 << 1;
static const uint8_t ADDR2 = 0x4A << 1;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */


	uint8_t buf[12]; //Buffer definition
	HAL_StatusTypeDef ret; //Used to test if I2C is functioning correctly

	//Two sets of data: one for each temp. sensor
	int16_t raw1;
	int16_t raw2;
	float rawfloat1 = 0;
	float rawfloat2 = 0;
	float celsius1 = 0;
	float celsius2 = 0;

	char buffer[20];
	int rawbufferlength = 0;
	int tempbufferlength = 0;

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_I2C1_Init();
  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  buf[0] = 0x00; //Sets the first byte of the buffer as 0

	  //Initiates I2C transmission and tests if it the chip reads properly
	  ret = HAL_I2C_Master_Transmit(&hi2c1, ADDR1, buf, 1, 1000);

	  //If I2C fails, an error is output to the terminal and skips I2C loop
	  if ( ret != HAL_OK ) {
	     strcpy((char*)buf, "Transmit Error!\r\n");
	  //If I2C succeeds, data is received
	  } else {
		  ret = HAL_I2C_Master_Receive(&hi2c1, ADDR1, buf, 2, 1000);
		  //Tests I2C receive line, skips I2C loop if it fails and prints error
	      if ( ret != HAL_OK ) {
	    	  strcpy((char*)buf, "Receive Error!\r\n");
	      } else {
	    	  //Data is read into raw1 variable and shifted to read data properly
	    	  raw1 = (int16_t)buf[0] << 8;
	    	  //Shifts to undo the address shift defined in the address constants
	    	  raw1 = (raw1 | buf[1]) >> 3;

	    	  //Prevents integer overflow by setting raw1 to a constant value if over a certain value
	          if ( raw1 > 0x7FF ) {
	        	  raw1 |= 0xF000;
	    	  }
	      }
	  }


	  buf[0] = 0x00;

	  //Repeats all the same steps as above for Temp Sensor 2 (address 0x4A)
	  ret = HAL_I2C_Master_Transmit(&hi2c1, ADDR2, buf, 1, 1000);
	  if ( ret != HAL_OK ) {
	  	  strcpy((char*)buf, "Transmit Error!\r\n");
	  } else {
	  	  ret = HAL_I2C_Master_Receive(&hi2c1, ADDR2, buf, 2, 1000);
	  	  if ( ret != HAL_OK ) {
	  	  strcpy((char*)buf, "Receive Error!\r\n");
	  	  } else {
	  	      raw2 = (int16_t)buf[0] << 8;
	  	      raw2 = (raw2 | buf[1]) >> 3;
	  	      if ( raw2 > 0x7FF ) {
	  	          raw2 |= 0xF000;
	  	      }
	      }
	  }


	  //Transmits raw value for Temp. Sensor 1 and outputs through UART
	  rawbufferlength = sprintf(buffer, "  Raw Value 1: %d\r\n", raw1);
	  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, rawbufferlength, 100);

	  //Transmits raw value for Temp. Sensor 2 and outputs through UART
	  rawbufferlength = sprintf(buffer, "  Raw Value 2: %d\r\n\n", raw2);
	  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, rawbufferlength, 100);

	  //Converts the uint_8 value to a float value
	  rawfloat1 = raw1;
	  rawfloat2 = raw2;

	  //Converts raw value into the degrees in Celsius
	  celsius1 = rawfloat1 * 0.0625;
	  celsius2 = rawfloat2 * 0.0625;

	  //Transmits actual temp. value for IC1 and outputs through UART
	  tempbufferlength = sprintf(buffer, "Temperature 1: %f Degrees C\r\n", celsius1);
	  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, tempbufferlength, 100);

	  //Transmits actual temp. value for IC2 and outputs through UART
	  tempbufferlength = sprintf(buffer, "Temperature 2: %f Degrees C\r\n\n\n", celsius2);
	  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, tempbufferlength, 100);

	  //Sets a delay between I2C transmissions
	  HAL_Delay(80);

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.Timing = 0x2000090E;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 38400;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
