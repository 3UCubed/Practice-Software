
Tutorial5-SPI-ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000365c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  0800371c  0800371c  0001371c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037bc  080037bc  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080037bc  080037bc  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037bc  080037bc  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037bc  080037bc  000137bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037c0  080037c0  000137c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080037c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  2000005c  08003820  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002fc  08003820  000202fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d0df  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a99  00000000  00000000  0002d1a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cf0  00000000  00000000  0002ec40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a3f  00000000  00000000  0002f930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000127f8  00000000  00000000  0003036f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f49d  00000000  00000000  00042b67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00072a48  00000000  00000000  00052004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000033f8  00000000  00000000  000c4a4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000c7e44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003704 	.word	0x08003704

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08003704 	.word	0x08003704

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000244:	b5b0      	push	{r4, r5, r7, lr}
 8000246:	b092      	sub	sp, #72	; 0x48
 8000248:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800024a:	f000 fb3f 	bl	80008cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800024e:	f000 f867 	bl	8000320 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000252:	f000 f961 	bl	8000518 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000256:	f000 f8ad 	bl	80003b4 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800025a:	f000 f92d 	bl	80004b8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800025e:	f000 f8e9 	bl	8000434 <MX_TIM1_Init>
  {
	  /*
	   * On rising edge of CSV, SDO forced high impedience. Keep CSV high for maximum conversion time.
	   * When CSV is lowered, start collecting the 16 bits. After data has been collected, restart
	   * */
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); //Rising edge of CSV
 8000262:	2380      	movs	r3, #128	; 0x80
 8000264:	0059      	lsls	r1, r3, #1
 8000266:	2390      	movs	r3, #144	; 0x90
 8000268:	05db      	lsls	r3, r3, #23
 800026a:	2201      	movs	r2, #1
 800026c:	0018      	movs	r0, r3
 800026e:	f000 fdd9 	bl	8000e24 <HAL_GPIO_WritePin>
	  //HAL_Delay(1);//Wait for tconv(Maximum Conversion Time here)
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); //Conversion should be done, collect 16 bits
 8000272:	2380      	movs	r3, #128	; 0x80
 8000274:	0059      	lsls	r1, r3, #1
 8000276:	2390      	movs	r3, #144	; 0x90
 8000278:	05db      	lsls	r3, r3, #23
 800027a:	2200      	movs	r2, #0
 800027c:	0018      	movs	r0, r3
 800027e:	f000 fdd1 	bl	8000e24 <HAL_GPIO_WritePin>
	  status = HAL_SPI_Receive(&hspi1, spiBuffer, 2, 10000);
 8000282:	2547      	movs	r5, #71	; 0x47
 8000284:	197c      	adds	r4, r7, r5
 8000286:	4b20      	ldr	r3, [pc, #128]	; (8000308 <main+0xc4>)
 8000288:	2240      	movs	r2, #64	; 0x40
 800028a:	18b9      	adds	r1, r7, r2
 800028c:	481f      	ldr	r0, [pc, #124]	; (800030c <main+0xc8>)
 800028e:	2202      	movs	r2, #2
 8000290:	f001 fafc 	bl	800188c <HAL_SPI_Receive>
 8000294:	0003      	movs	r3, r0
 8000296:	7023      	strb	r3, [r4, #0]
	  if(status != HAL_OK)
 8000298:	197b      	adds	r3, r7, r5
 800029a:	781b      	ldrb	r3, [r3, #0]
 800029c:	2b00      	cmp	r3, #0
 800029e:	d012      	beq.n	80002c6 <main+0x82>
	  {
		  sprintf(uartBuffer, "Error SPI status %d\r\n", status);
 80002a0:	197b      	adds	r3, r7, r5
 80002a2:	781a      	ldrb	r2, [r3, #0]
 80002a4:	491a      	ldr	r1, [pc, #104]	; (8000310 <main+0xcc>)
 80002a6:	1d3b      	adds	r3, r7, #4
 80002a8:	0018      	movs	r0, r3
 80002aa:	f002 fd85 	bl	8002db8 <siprintf>
		  HAL_UART_Transmit(&huart2, (const uint8_t*)uartBuffer, strlen(uartBuffer), 100000);
 80002ae:	1d3b      	adds	r3, r7, #4
 80002b0:	0018      	movs	r0, r3
 80002b2:	f7ff ff29 	bl	8000108 <strlen>
 80002b6:	0003      	movs	r3, r0
 80002b8:	b29a      	uxth	r2, r3
 80002ba:	4b16      	ldr	r3, [pc, #88]	; (8000314 <main+0xd0>)
 80002bc:	1d39      	adds	r1, r7, #4
 80002be:	4816      	ldr	r0, [pc, #88]	; (8000318 <main+0xd4>)
 80002c0:	f002 f970 	bl	80025a4 <HAL_UART_Transmit>
 80002c4:	e019      	b.n	80002fa <main+0xb6>
	  }
	  else
	  {
		  uint16_t data = *spiBuffer;
 80002c6:	2140      	movs	r1, #64	; 0x40
 80002c8:	187b      	adds	r3, r7, r1
 80002ca:	781a      	ldrb	r2, [r3, #0]
 80002cc:	2344      	movs	r3, #68	; 0x44
 80002ce:	18fb      	adds	r3, r7, r3
 80002d0:	801a      	strh	r2, [r3, #0]
		  sprintf(uartBuffer, "Data in buffer is 0x%X\r\n", spiBuffer[1]);
 80002d2:	187b      	adds	r3, r7, r1
 80002d4:	785b      	ldrb	r3, [r3, #1]
 80002d6:	001a      	movs	r2, r3
 80002d8:	4910      	ldr	r1, [pc, #64]	; (800031c <main+0xd8>)
 80002da:	1d3b      	adds	r3, r7, #4
 80002dc:	0018      	movs	r0, r3
 80002de:	f002 fd6b 	bl	8002db8 <siprintf>
		  HAL_UART_Transmit(&huart2, uartBuffer, strlen((char*)uartBuffer), 1000);
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	0018      	movs	r0, r3
 80002e6:	f7ff ff0f 	bl	8000108 <strlen>
 80002ea:	0003      	movs	r3, r0
 80002ec:	b29a      	uxth	r2, r3
 80002ee:	23fa      	movs	r3, #250	; 0xfa
 80002f0:	009b      	lsls	r3, r3, #2
 80002f2:	1d39      	adds	r1, r7, #4
 80002f4:	4808      	ldr	r0, [pc, #32]	; (8000318 <main+0xd4>)
 80002f6:	f002 f955 	bl	80025a4 <HAL_UART_Transmit>
		  //HAL_UART_Transmit(&huart2, spiBuffer, strlen((char*)spiBuffer), 1000);
	  }

	  HAL_Delay(500);
 80002fa:	23fa      	movs	r3, #250	; 0xfa
 80002fc:	005b      	lsls	r3, r3, #1
 80002fe:	0018      	movs	r0, r3
 8000300:	f000 fb48 	bl	8000994 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); //Rising edge of CSV
 8000304:	e7ad      	b.n	8000262 <main+0x1e>
 8000306:	46c0      	nop			; (mov r8, r8)
 8000308:	00002710 	.word	0x00002710
 800030c:	20000078 	.word	0x20000078
 8000310:	0800371c 	.word	0x0800371c
 8000314:	000186a0 	.word	0x000186a0
 8000318:	20000124 	.word	0x20000124
 800031c:	08003734 	.word	0x08003734

08000320 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000320:	b590      	push	{r4, r7, lr}
 8000322:	b091      	sub	sp, #68	; 0x44
 8000324:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000326:	2410      	movs	r4, #16
 8000328:	193b      	adds	r3, r7, r4
 800032a:	0018      	movs	r0, r3
 800032c:	2330      	movs	r3, #48	; 0x30
 800032e:	001a      	movs	r2, r3
 8000330:	2100      	movs	r1, #0
 8000332:	f002 fd61 	bl	8002df8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000336:	003b      	movs	r3, r7
 8000338:	0018      	movs	r0, r3
 800033a:	2310      	movs	r3, #16
 800033c:	001a      	movs	r2, r3
 800033e:	2100      	movs	r1, #0
 8000340:	f002 fd5a 	bl	8002df8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000344:	0021      	movs	r1, r4
 8000346:	187b      	adds	r3, r7, r1
 8000348:	2202      	movs	r2, #2
 800034a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800034c:	187b      	adds	r3, r7, r1
 800034e:	2201      	movs	r2, #1
 8000350:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000352:	187b      	adds	r3, r7, r1
 8000354:	2210      	movs	r2, #16
 8000356:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000358:	187b      	adds	r3, r7, r1
 800035a:	2202      	movs	r2, #2
 800035c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800035e:	187b      	adds	r3, r7, r1
 8000360:	2200      	movs	r2, #0
 8000362:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000364:	187b      	adds	r3, r7, r1
 8000366:	22a0      	movs	r2, #160	; 0xa0
 8000368:	0392      	lsls	r2, r2, #14
 800036a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800036c:	187b      	adds	r3, r7, r1
 800036e:	2200      	movs	r2, #0
 8000370:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000372:	187b      	adds	r3, r7, r1
 8000374:	0018      	movs	r0, r3
 8000376:	f000 fd73 	bl	8000e60 <HAL_RCC_OscConfig>
 800037a:	1e03      	subs	r3, r0, #0
 800037c:	d001      	beq.n	8000382 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800037e:	f000 f945 	bl	800060c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000382:	003b      	movs	r3, r7
 8000384:	2207      	movs	r2, #7
 8000386:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000388:	003b      	movs	r3, r7
 800038a:	2202      	movs	r2, #2
 800038c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800038e:	003b      	movs	r3, r7
 8000390:	2200      	movs	r2, #0
 8000392:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000394:	003b      	movs	r3, r7
 8000396:	2200      	movs	r2, #0
 8000398:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800039a:	003b      	movs	r3, r7
 800039c:	2101      	movs	r1, #1
 800039e:	0018      	movs	r0, r3
 80003a0:	f001 f878 	bl	8001494 <HAL_RCC_ClockConfig>
 80003a4:	1e03      	subs	r3, r0, #0
 80003a6:	d001      	beq.n	80003ac <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80003a8:	f000 f930 	bl	800060c <Error_Handler>
  }
}
 80003ac:	46c0      	nop			; (mov r8, r8)
 80003ae:	46bd      	mov	sp, r7
 80003b0:	b011      	add	sp, #68	; 0x44
 80003b2:	bd90      	pop	{r4, r7, pc}

080003b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80003b8:	4b1c      	ldr	r3, [pc, #112]	; (800042c <MX_SPI1_Init+0x78>)
 80003ba:	4a1d      	ldr	r2, [pc, #116]	; (8000430 <MX_SPI1_Init+0x7c>)
 80003bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80003be:	4b1b      	ldr	r3, [pc, #108]	; (800042c <MX_SPI1_Init+0x78>)
 80003c0:	2282      	movs	r2, #130	; 0x82
 80003c2:	0052      	lsls	r2, r2, #1
 80003c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80003c6:	4b19      	ldr	r3, [pc, #100]	; (800042c <MX_SPI1_Init+0x78>)
 80003c8:	2280      	movs	r2, #128	; 0x80
 80003ca:	00d2      	lsls	r2, r2, #3
 80003cc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80003ce:	4b17      	ldr	r3, [pc, #92]	; (800042c <MX_SPI1_Init+0x78>)
 80003d0:	22f0      	movs	r2, #240	; 0xf0
 80003d2:	0112      	lsls	r2, r2, #4
 80003d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003d6:	4b15      	ldr	r3, [pc, #84]	; (800042c <MX_SPI1_Init+0x78>)
 80003d8:	2200      	movs	r2, #0
 80003da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003dc:	4b13      	ldr	r3, [pc, #76]	; (800042c <MX_SPI1_Init+0x78>)
 80003de:	2200      	movs	r2, #0
 80003e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003e2:	4b12      	ldr	r3, [pc, #72]	; (800042c <MX_SPI1_Init+0x78>)
 80003e4:	2280      	movs	r2, #128	; 0x80
 80003e6:	0092      	lsls	r2, r2, #2
 80003e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80003ea:	4b10      	ldr	r3, [pc, #64]	; (800042c <MX_SPI1_Init+0x78>)
 80003ec:	2208      	movs	r2, #8
 80003ee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003f0:	4b0e      	ldr	r3, [pc, #56]	; (800042c <MX_SPI1_Init+0x78>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003f6:	4b0d      	ldr	r3, [pc, #52]	; (800042c <MX_SPI1_Init+0x78>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003fc:	4b0b      	ldr	r3, [pc, #44]	; (800042c <MX_SPI1_Init+0x78>)
 80003fe:	2200      	movs	r2, #0
 8000400:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000402:	4b0a      	ldr	r3, [pc, #40]	; (800042c <MX_SPI1_Init+0x78>)
 8000404:	2207      	movs	r2, #7
 8000406:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000408:	4b08      	ldr	r3, [pc, #32]	; (800042c <MX_SPI1_Init+0x78>)
 800040a:	2200      	movs	r2, #0
 800040c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800040e:	4b07      	ldr	r3, [pc, #28]	; (800042c <MX_SPI1_Init+0x78>)
 8000410:	2208      	movs	r2, #8
 8000412:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000414:	4b05      	ldr	r3, [pc, #20]	; (800042c <MX_SPI1_Init+0x78>)
 8000416:	0018      	movs	r0, r3
 8000418:	f001 f980 	bl	800171c <HAL_SPI_Init>
 800041c:	1e03      	subs	r3, r0, #0
 800041e:	d001      	beq.n	8000424 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8000420:	f000 f8f4 	bl	800060c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000424:	46c0      	nop			; (mov r8, r8)
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	20000078 	.word	0x20000078
 8000430:	40013000 	.word	0x40013000

08000434 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800043a:	003b      	movs	r3, r7
 800043c:	0018      	movs	r0, r3
 800043e:	2308      	movs	r3, #8
 8000440:	001a      	movs	r2, r3
 8000442:	2100      	movs	r1, #0
 8000444:	f002 fcd8 	bl	8002df8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000448:	4b18      	ldr	r3, [pc, #96]	; (80004ac <MX_TIM1_Init+0x78>)
 800044a:	4a19      	ldr	r2, [pc, #100]	; (80004b0 <MX_TIM1_Init+0x7c>)
 800044c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800044e:	4b17      	ldr	r3, [pc, #92]	; (80004ac <MX_TIM1_Init+0x78>)
 8000450:	2200      	movs	r2, #0
 8000452:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000454:	4b15      	ldr	r3, [pc, #84]	; (80004ac <MX_TIM1_Init+0x78>)
 8000456:	2200      	movs	r2, #0
 8000458:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800045a:	4b14      	ldr	r3, [pc, #80]	; (80004ac <MX_TIM1_Init+0x78>)
 800045c:	4a15      	ldr	r2, [pc, #84]	; (80004b4 <MX_TIM1_Init+0x80>)
 800045e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000460:	4b12      	ldr	r3, [pc, #72]	; (80004ac <MX_TIM1_Init+0x78>)
 8000462:	2200      	movs	r2, #0
 8000464:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000466:	4b11      	ldr	r3, [pc, #68]	; (80004ac <MX_TIM1_Init+0x78>)
 8000468:	2200      	movs	r2, #0
 800046a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800046c:	4b0f      	ldr	r3, [pc, #60]	; (80004ac <MX_TIM1_Init+0x78>)
 800046e:	2200      	movs	r2, #0
 8000470:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8000472:	4b0e      	ldr	r3, [pc, #56]	; (80004ac <MX_TIM1_Init+0x78>)
 8000474:	2108      	movs	r1, #8
 8000476:	0018      	movs	r0, r3
 8000478:	f001 ff10 	bl	800229c <HAL_TIM_OnePulse_Init>
 800047c:	1e03      	subs	r3, r0, #0
 800047e:	d001      	beq.n	8000484 <MX_TIM1_Init+0x50>
  {
    Error_Handler();
 8000480:	f000 f8c4 	bl	800060c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000484:	003b      	movs	r3, r7
 8000486:	2200      	movs	r2, #0
 8000488:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800048a:	003b      	movs	r3, r7
 800048c:	2200      	movs	r2, #0
 800048e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000490:	003a      	movs	r2, r7
 8000492:	4b06      	ldr	r3, [pc, #24]	; (80004ac <MX_TIM1_Init+0x78>)
 8000494:	0011      	movs	r1, r2
 8000496:	0018      	movs	r0, r3
 8000498:	f001 ffd2 	bl	8002440 <HAL_TIMEx_MasterConfigSynchronization>
 800049c:	1e03      	subs	r3, r0, #0
 800049e:	d001      	beq.n	80004a4 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 80004a0:	f000 f8b4 	bl	800060c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80004a4:	46c0      	nop			; (mov r8, r8)
 80004a6:	46bd      	mov	sp, r7
 80004a8:	b002      	add	sp, #8
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	200000dc 	.word	0x200000dc
 80004b0:	40012c00 	.word	0x40012c00
 80004b4:	0000ffff 	.word	0x0000ffff

080004b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004bc:	4b14      	ldr	r3, [pc, #80]	; (8000510 <MX_USART2_UART_Init+0x58>)
 80004be:	4a15      	ldr	r2, [pc, #84]	; (8000514 <MX_USART2_UART_Init+0x5c>)
 80004c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80004c2:	4b13      	ldr	r3, [pc, #76]	; (8000510 <MX_USART2_UART_Init+0x58>)
 80004c4:	2296      	movs	r2, #150	; 0x96
 80004c6:	0192      	lsls	r2, r2, #6
 80004c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004ca:	4b11      	ldr	r3, [pc, #68]	; (8000510 <MX_USART2_UART_Init+0x58>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004d0:	4b0f      	ldr	r3, [pc, #60]	; (8000510 <MX_USART2_UART_Init+0x58>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004d6:	4b0e      	ldr	r3, [pc, #56]	; (8000510 <MX_USART2_UART_Init+0x58>)
 80004d8:	2200      	movs	r2, #0
 80004da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004dc:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <MX_USART2_UART_Init+0x58>)
 80004de:	220c      	movs	r2, #12
 80004e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004e2:	4b0b      	ldr	r3, [pc, #44]	; (8000510 <MX_USART2_UART_Init+0x58>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004e8:	4b09      	ldr	r3, [pc, #36]	; (8000510 <MX_USART2_UART_Init+0x58>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004ee:	4b08      	ldr	r3, [pc, #32]	; (8000510 <MX_USART2_UART_Init+0x58>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004f4:	4b06      	ldr	r3, [pc, #24]	; (8000510 <MX_USART2_UART_Init+0x58>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004fa:	4b05      	ldr	r3, [pc, #20]	; (8000510 <MX_USART2_UART_Init+0x58>)
 80004fc:	0018      	movs	r0, r3
 80004fe:	f001 fffd 	bl	80024fc <HAL_UART_Init>
 8000502:	1e03      	subs	r3, r0, #0
 8000504:	d001      	beq.n	800050a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000506:	f000 f881 	bl	800060c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800050a:	46c0      	nop			; (mov r8, r8)
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	20000124 	.word	0x20000124
 8000514:	40004400 	.word	0x40004400

08000518 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000518:	b590      	push	{r4, r7, lr}
 800051a:	b089      	sub	sp, #36	; 0x24
 800051c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051e:	240c      	movs	r4, #12
 8000520:	193b      	adds	r3, r7, r4
 8000522:	0018      	movs	r0, r3
 8000524:	2314      	movs	r3, #20
 8000526:	001a      	movs	r2, r3
 8000528:	2100      	movs	r1, #0
 800052a:	f002 fc65 	bl	8002df8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052e:	4b35      	ldr	r3, [pc, #212]	; (8000604 <MX_GPIO_Init+0xec>)
 8000530:	695a      	ldr	r2, [r3, #20]
 8000532:	4b34      	ldr	r3, [pc, #208]	; (8000604 <MX_GPIO_Init+0xec>)
 8000534:	2180      	movs	r1, #128	; 0x80
 8000536:	0289      	lsls	r1, r1, #10
 8000538:	430a      	orrs	r2, r1
 800053a:	615a      	str	r2, [r3, #20]
 800053c:	4b31      	ldr	r3, [pc, #196]	; (8000604 <MX_GPIO_Init+0xec>)
 800053e:	695a      	ldr	r2, [r3, #20]
 8000540:	2380      	movs	r3, #128	; 0x80
 8000542:	029b      	lsls	r3, r3, #10
 8000544:	4013      	ands	r3, r2
 8000546:	60bb      	str	r3, [r7, #8]
 8000548:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800054a:	4b2e      	ldr	r3, [pc, #184]	; (8000604 <MX_GPIO_Init+0xec>)
 800054c:	695a      	ldr	r2, [r3, #20]
 800054e:	4b2d      	ldr	r3, [pc, #180]	; (8000604 <MX_GPIO_Init+0xec>)
 8000550:	2180      	movs	r1, #128	; 0x80
 8000552:	0309      	lsls	r1, r1, #12
 8000554:	430a      	orrs	r2, r1
 8000556:	615a      	str	r2, [r3, #20]
 8000558:	4b2a      	ldr	r3, [pc, #168]	; (8000604 <MX_GPIO_Init+0xec>)
 800055a:	695a      	ldr	r2, [r3, #20]
 800055c:	2380      	movs	r3, #128	; 0x80
 800055e:	031b      	lsls	r3, r3, #12
 8000560:	4013      	ands	r3, r2
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000566:	23c0      	movs	r3, #192	; 0xc0
 8000568:	009b      	lsls	r3, r3, #2
 800056a:	4827      	ldr	r0, [pc, #156]	; (8000608 <MX_GPIO_Init+0xf0>)
 800056c:	2200      	movs	r2, #0
 800056e:	0019      	movs	r1, r3
 8000570:	f000 fc58 	bl	8000e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000574:	2380      	movs	r3, #128	; 0x80
 8000576:	0059      	lsls	r1, r3, #1
 8000578:	2390      	movs	r3, #144	; 0x90
 800057a:	05db      	lsls	r3, r3, #23
 800057c:	2200      	movs	r2, #0
 800057e:	0018      	movs	r0, r3
 8000580:	f000 fc50 	bl	8000e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000584:	193b      	adds	r3, r7, r4
 8000586:	2201      	movs	r2, #1
 8000588:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800058a:	193b      	adds	r3, r7, r4
 800058c:	2290      	movs	r2, #144	; 0x90
 800058e:	0352      	lsls	r2, r2, #13
 8000590:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000592:	193b      	adds	r3, r7, r4
 8000594:	2200      	movs	r2, #0
 8000596:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000598:	193a      	adds	r2, r7, r4
 800059a:	2390      	movs	r3, #144	; 0x90
 800059c:	05db      	lsls	r3, r3, #23
 800059e:	0011      	movs	r1, r2
 80005a0:	0018      	movs	r0, r3
 80005a2:	f000 facf 	bl	8000b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 80005a6:	0021      	movs	r1, r4
 80005a8:	187b      	adds	r3, r7, r1
 80005aa:	22c0      	movs	r2, #192	; 0xc0
 80005ac:	0092      	lsls	r2, r2, #2
 80005ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b0:	000c      	movs	r4, r1
 80005b2:	193b      	adds	r3, r7, r4
 80005b4:	2201      	movs	r2, #1
 80005b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b8:	193b      	adds	r3, r7, r4
 80005ba:	2200      	movs	r2, #0
 80005bc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005be:	193b      	adds	r3, r7, r4
 80005c0:	2200      	movs	r2, #0
 80005c2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005c4:	193b      	adds	r3, r7, r4
 80005c6:	4a10      	ldr	r2, [pc, #64]	; (8000608 <MX_GPIO_Init+0xf0>)
 80005c8:	0019      	movs	r1, r3
 80005ca:	0010      	movs	r0, r2
 80005cc:	f000 faba 	bl	8000b44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80005d0:	0021      	movs	r1, r4
 80005d2:	187b      	adds	r3, r7, r1
 80005d4:	2280      	movs	r2, #128	; 0x80
 80005d6:	0052      	lsls	r2, r2, #1
 80005d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005da:	187b      	adds	r3, r7, r1
 80005dc:	2201      	movs	r2, #1
 80005de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e0:	187b      	adds	r3, r7, r1
 80005e2:	2200      	movs	r2, #0
 80005e4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e6:	187b      	adds	r3, r7, r1
 80005e8:	2200      	movs	r2, #0
 80005ea:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ec:	187a      	adds	r2, r7, r1
 80005ee:	2390      	movs	r3, #144	; 0x90
 80005f0:	05db      	lsls	r3, r3, #23
 80005f2:	0011      	movs	r1, r2
 80005f4:	0018      	movs	r0, r3
 80005f6:	f000 faa5 	bl	8000b44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	46bd      	mov	sp, r7
 80005fe:	b009      	add	sp, #36	; 0x24
 8000600:	bd90      	pop	{r4, r7, pc}
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	40021000 	.word	0x40021000
 8000608:	48000800 	.word	0x48000800

0800060c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000610:	b672      	cpsid	i
}
 8000612:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000614:	e7fe      	b.n	8000614 <Error_Handler+0x8>
	...

08000618 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800061e:	4b0f      	ldr	r3, [pc, #60]	; (800065c <HAL_MspInit+0x44>)
 8000620:	699a      	ldr	r2, [r3, #24]
 8000622:	4b0e      	ldr	r3, [pc, #56]	; (800065c <HAL_MspInit+0x44>)
 8000624:	2101      	movs	r1, #1
 8000626:	430a      	orrs	r2, r1
 8000628:	619a      	str	r2, [r3, #24]
 800062a:	4b0c      	ldr	r3, [pc, #48]	; (800065c <HAL_MspInit+0x44>)
 800062c:	699b      	ldr	r3, [r3, #24]
 800062e:	2201      	movs	r2, #1
 8000630:	4013      	ands	r3, r2
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000636:	4b09      	ldr	r3, [pc, #36]	; (800065c <HAL_MspInit+0x44>)
 8000638:	69da      	ldr	r2, [r3, #28]
 800063a:	4b08      	ldr	r3, [pc, #32]	; (800065c <HAL_MspInit+0x44>)
 800063c:	2180      	movs	r1, #128	; 0x80
 800063e:	0549      	lsls	r1, r1, #21
 8000640:	430a      	orrs	r2, r1
 8000642:	61da      	str	r2, [r3, #28]
 8000644:	4b05      	ldr	r3, [pc, #20]	; (800065c <HAL_MspInit+0x44>)
 8000646:	69da      	ldr	r2, [r3, #28]
 8000648:	2380      	movs	r3, #128	; 0x80
 800064a:	055b      	lsls	r3, r3, #21
 800064c:	4013      	ands	r3, r2
 800064e:	603b      	str	r3, [r7, #0]
 8000650:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000652:	46c0      	nop			; (mov r8, r8)
 8000654:	46bd      	mov	sp, r7
 8000656:	b002      	add	sp, #8
 8000658:	bd80      	pop	{r7, pc}
 800065a:	46c0      	nop			; (mov r8, r8)
 800065c:	40021000 	.word	0x40021000

08000660 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000660:	b590      	push	{r4, r7, lr}
 8000662:	b08b      	sub	sp, #44	; 0x2c
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000668:	2414      	movs	r4, #20
 800066a:	193b      	adds	r3, r7, r4
 800066c:	0018      	movs	r0, r3
 800066e:	2314      	movs	r3, #20
 8000670:	001a      	movs	r2, r3
 8000672:	2100      	movs	r1, #0
 8000674:	f002 fbc0 	bl	8002df8 <memset>
  if(hspi->Instance==SPI1)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <HAL_SPI_MspInit+0x90>)
 800067e:	4293      	cmp	r3, r2
 8000680:	d132      	bne.n	80006e8 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000682:	4b1c      	ldr	r3, [pc, #112]	; (80006f4 <HAL_SPI_MspInit+0x94>)
 8000684:	699a      	ldr	r2, [r3, #24]
 8000686:	4b1b      	ldr	r3, [pc, #108]	; (80006f4 <HAL_SPI_MspInit+0x94>)
 8000688:	2180      	movs	r1, #128	; 0x80
 800068a:	0149      	lsls	r1, r1, #5
 800068c:	430a      	orrs	r2, r1
 800068e:	619a      	str	r2, [r3, #24]
 8000690:	4b18      	ldr	r3, [pc, #96]	; (80006f4 <HAL_SPI_MspInit+0x94>)
 8000692:	699a      	ldr	r2, [r3, #24]
 8000694:	2380      	movs	r3, #128	; 0x80
 8000696:	015b      	lsls	r3, r3, #5
 8000698:	4013      	ands	r3, r2
 800069a:	613b      	str	r3, [r7, #16]
 800069c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800069e:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <HAL_SPI_MspInit+0x94>)
 80006a0:	695a      	ldr	r2, [r3, #20]
 80006a2:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <HAL_SPI_MspInit+0x94>)
 80006a4:	2180      	movs	r1, #128	; 0x80
 80006a6:	0289      	lsls	r1, r1, #10
 80006a8:	430a      	orrs	r2, r1
 80006aa:	615a      	str	r2, [r3, #20]
 80006ac:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <HAL_SPI_MspInit+0x94>)
 80006ae:	695a      	ldr	r2, [r3, #20]
 80006b0:	2380      	movs	r3, #128	; 0x80
 80006b2:	029b      	lsls	r3, r3, #10
 80006b4:	4013      	ands	r3, r2
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80006ba:	0021      	movs	r1, r4
 80006bc:	187b      	adds	r3, r7, r1
 80006be:	2260      	movs	r2, #96	; 0x60
 80006c0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c2:	187b      	adds	r3, r7, r1
 80006c4:	2202      	movs	r2, #2
 80006c6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	187b      	adds	r3, r7, r1
 80006ca:	2200      	movs	r2, #0
 80006cc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006ce:	187b      	adds	r3, r7, r1
 80006d0:	2203      	movs	r2, #3
 80006d2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	2200      	movs	r2, #0
 80006d8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006da:	187a      	adds	r2, r7, r1
 80006dc:	2390      	movs	r3, #144	; 0x90
 80006de:	05db      	lsls	r3, r3, #23
 80006e0:	0011      	movs	r1, r2
 80006e2:	0018      	movs	r0, r3
 80006e4:	f000 fa2e 	bl	8000b44 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80006e8:	46c0      	nop			; (mov r8, r8)
 80006ea:	46bd      	mov	sp, r7
 80006ec:	b00b      	add	sp, #44	; 0x2c
 80006ee:	bd90      	pop	{r4, r7, pc}
 80006f0:	40013000 	.word	0x40013000
 80006f4:	40021000 	.word	0x40021000

080006f8 <HAL_TIM_OnePulse_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_onepulse: TIM_OnePulse handle pointer
* @retval None
*/
void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef* htim_onepulse)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  if(htim_onepulse->Instance==TIM1)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a0a      	ldr	r2, [pc, #40]	; (8000730 <HAL_TIM_OnePulse_MspInit+0x38>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d10d      	bne.n	8000726 <HAL_TIM_OnePulse_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800070a:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <HAL_TIM_OnePulse_MspInit+0x3c>)
 800070c:	699a      	ldr	r2, [r3, #24]
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <HAL_TIM_OnePulse_MspInit+0x3c>)
 8000710:	2180      	movs	r1, #128	; 0x80
 8000712:	0109      	lsls	r1, r1, #4
 8000714:	430a      	orrs	r2, r1
 8000716:	619a      	str	r2, [r3, #24]
 8000718:	4b06      	ldr	r3, [pc, #24]	; (8000734 <HAL_TIM_OnePulse_MspInit+0x3c>)
 800071a:	699a      	ldr	r2, [r3, #24]
 800071c:	2380      	movs	r3, #128	; 0x80
 800071e:	011b      	lsls	r3, r3, #4
 8000720:	4013      	ands	r3, r2
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	46bd      	mov	sp, r7
 800072a:	b004      	add	sp, #16
 800072c:	bd80      	pop	{r7, pc}
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	40012c00 	.word	0x40012c00
 8000734:	40021000 	.word	0x40021000

08000738 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000738:	b590      	push	{r4, r7, lr}
 800073a:	b08b      	sub	sp, #44	; 0x2c
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000740:	2414      	movs	r4, #20
 8000742:	193b      	adds	r3, r7, r4
 8000744:	0018      	movs	r0, r3
 8000746:	2314      	movs	r3, #20
 8000748:	001a      	movs	r2, r3
 800074a:	2100      	movs	r1, #0
 800074c:	f002 fb54 	bl	8002df8 <memset>
  if(huart->Instance==USART2)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a1c      	ldr	r2, [pc, #112]	; (80007c8 <HAL_UART_MspInit+0x90>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d132      	bne.n	80007c0 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800075a:	4b1c      	ldr	r3, [pc, #112]	; (80007cc <HAL_UART_MspInit+0x94>)
 800075c:	69da      	ldr	r2, [r3, #28]
 800075e:	4b1b      	ldr	r3, [pc, #108]	; (80007cc <HAL_UART_MspInit+0x94>)
 8000760:	2180      	movs	r1, #128	; 0x80
 8000762:	0289      	lsls	r1, r1, #10
 8000764:	430a      	orrs	r2, r1
 8000766:	61da      	str	r2, [r3, #28]
 8000768:	4b18      	ldr	r3, [pc, #96]	; (80007cc <HAL_UART_MspInit+0x94>)
 800076a:	69da      	ldr	r2, [r3, #28]
 800076c:	2380      	movs	r3, #128	; 0x80
 800076e:	029b      	lsls	r3, r3, #10
 8000770:	4013      	ands	r3, r2
 8000772:	613b      	str	r3, [r7, #16]
 8000774:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	4b15      	ldr	r3, [pc, #84]	; (80007cc <HAL_UART_MspInit+0x94>)
 8000778:	695a      	ldr	r2, [r3, #20]
 800077a:	4b14      	ldr	r3, [pc, #80]	; (80007cc <HAL_UART_MspInit+0x94>)
 800077c:	2180      	movs	r1, #128	; 0x80
 800077e:	0289      	lsls	r1, r1, #10
 8000780:	430a      	orrs	r2, r1
 8000782:	615a      	str	r2, [r3, #20]
 8000784:	4b11      	ldr	r3, [pc, #68]	; (80007cc <HAL_UART_MspInit+0x94>)
 8000786:	695a      	ldr	r2, [r3, #20]
 8000788:	2380      	movs	r3, #128	; 0x80
 800078a:	029b      	lsls	r3, r3, #10
 800078c:	4013      	ands	r3, r2
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000792:	0021      	movs	r1, r4
 8000794:	187b      	adds	r3, r7, r1
 8000796:	220c      	movs	r2, #12
 8000798:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079a:	187b      	adds	r3, r7, r1
 800079c:	2202      	movs	r2, #2
 800079e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	187b      	adds	r3, r7, r1
 80007a2:	2200      	movs	r2, #0
 80007a4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007a6:	187b      	adds	r3, r7, r1
 80007a8:	2203      	movs	r2, #3
 80007aa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80007ac:	187b      	adds	r3, r7, r1
 80007ae:	2201      	movs	r2, #1
 80007b0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b2:	187a      	adds	r2, r7, r1
 80007b4:	2390      	movs	r3, #144	; 0x90
 80007b6:	05db      	lsls	r3, r3, #23
 80007b8:	0011      	movs	r1, r2
 80007ba:	0018      	movs	r0, r3
 80007bc:	f000 f9c2 	bl	8000b44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007c0:	46c0      	nop			; (mov r8, r8)
 80007c2:	46bd      	mov	sp, r7
 80007c4:	b00b      	add	sp, #44	; 0x2c
 80007c6:	bd90      	pop	{r4, r7, pc}
 80007c8:	40004400 	.word	0x40004400
 80007cc:	40021000 	.word	0x40021000

080007d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <NMI_Handler+0x4>

080007d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007d6:	b580      	push	{r7, lr}
 80007d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007da:	e7fe      	b.n	80007da <HardFault_Handler+0x4>

080007dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007e0:	46c0      	nop			; (mov r8, r8)
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007f4:	f000 f8b2 	bl	800095c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007f8:	46c0      	nop			; (mov r8, r8)
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
	...

08000800 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b086      	sub	sp, #24
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000808:	4a14      	ldr	r2, [pc, #80]	; (800085c <_sbrk+0x5c>)
 800080a:	4b15      	ldr	r3, [pc, #84]	; (8000860 <_sbrk+0x60>)
 800080c:	1ad3      	subs	r3, r2, r3
 800080e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000810:	697b      	ldr	r3, [r7, #20]
 8000812:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000814:	4b13      	ldr	r3, [pc, #76]	; (8000864 <_sbrk+0x64>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d102      	bne.n	8000822 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800081c:	4b11      	ldr	r3, [pc, #68]	; (8000864 <_sbrk+0x64>)
 800081e:	4a12      	ldr	r2, [pc, #72]	; (8000868 <_sbrk+0x68>)
 8000820:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000822:	4b10      	ldr	r3, [pc, #64]	; (8000864 <_sbrk+0x64>)
 8000824:	681a      	ldr	r2, [r3, #0]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	18d3      	adds	r3, r2, r3
 800082a:	693a      	ldr	r2, [r7, #16]
 800082c:	429a      	cmp	r2, r3
 800082e:	d207      	bcs.n	8000840 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000830:	f002 faea 	bl	8002e08 <__errno>
 8000834:	0003      	movs	r3, r0
 8000836:	220c      	movs	r2, #12
 8000838:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800083a:	2301      	movs	r3, #1
 800083c:	425b      	negs	r3, r3
 800083e:	e009      	b.n	8000854 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000840:	4b08      	ldr	r3, [pc, #32]	; (8000864 <_sbrk+0x64>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000846:	4b07      	ldr	r3, [pc, #28]	; (8000864 <_sbrk+0x64>)
 8000848:	681a      	ldr	r2, [r3, #0]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	18d2      	adds	r2, r2, r3
 800084e:	4b05      	ldr	r3, [pc, #20]	; (8000864 <_sbrk+0x64>)
 8000850:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000852:	68fb      	ldr	r3, [r7, #12]
}
 8000854:	0018      	movs	r0, r3
 8000856:	46bd      	mov	sp, r7
 8000858:	b006      	add	sp, #24
 800085a:	bd80      	pop	{r7, pc}
 800085c:	20002000 	.word	0x20002000
 8000860:	00000400 	.word	0x00000400
 8000864:	200001ac 	.word	0x200001ac
 8000868:	20000300 	.word	0x20000300

0800086c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000870:	46c0      	nop			; (mov r8, r8)
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
	...

08000878 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000878:	480d      	ldr	r0, [pc, #52]	; (80008b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800087a:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 800087c:	f7ff fff6 	bl	800086c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000880:	480c      	ldr	r0, [pc, #48]	; (80008b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000882:	490d      	ldr	r1, [pc, #52]	; (80008b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000884:	4a0d      	ldr	r2, [pc, #52]	; (80008bc <LoopForever+0xe>)
  movs r3, #0
 8000886:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000888:	e002      	b.n	8000890 <LoopCopyDataInit>

0800088a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800088a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800088c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800088e:	3304      	adds	r3, #4

08000890 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000890:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000892:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000894:	d3f9      	bcc.n	800088a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000896:	4a0a      	ldr	r2, [pc, #40]	; (80008c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000898:	4c0a      	ldr	r4, [pc, #40]	; (80008c4 <LoopForever+0x16>)
  movs r3, #0
 800089a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800089c:	e001      	b.n	80008a2 <LoopFillZerobss>

0800089e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800089e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a0:	3204      	adds	r2, #4

080008a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a4:	d3fb      	bcc.n	800089e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008a6:	f002 fab5 	bl	8002e14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008aa:	f7ff fccb 	bl	8000244 <main>

080008ae <LoopForever>:

LoopForever:
    b LoopForever
 80008ae:	e7fe      	b.n	80008ae <LoopForever>
  ldr   r0, =_estack
 80008b0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80008b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008b8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80008bc:	080037c4 	.word	0x080037c4
  ldr r2, =_sbss
 80008c0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80008c4:	200002fc 	.word	0x200002fc

080008c8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008c8:	e7fe      	b.n	80008c8 <ADC1_COMP_IRQHandler>
	...

080008cc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008d0:	4b07      	ldr	r3, [pc, #28]	; (80008f0 <HAL_Init+0x24>)
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <HAL_Init+0x24>)
 80008d6:	2110      	movs	r1, #16
 80008d8:	430a      	orrs	r2, r1
 80008da:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80008dc:	2000      	movs	r0, #0
 80008de:	f000 f809 	bl	80008f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008e2:	f7ff fe99 	bl	8000618 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008e6:	2300      	movs	r3, #0
}
 80008e8:	0018      	movs	r0, r3
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	40022000 	.word	0x40022000

080008f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f4:	b590      	push	{r4, r7, lr}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008fc:	4b14      	ldr	r3, [pc, #80]	; (8000950 <HAL_InitTick+0x5c>)
 80008fe:	681c      	ldr	r4, [r3, #0]
 8000900:	4b14      	ldr	r3, [pc, #80]	; (8000954 <HAL_InitTick+0x60>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	0019      	movs	r1, r3
 8000906:	23fa      	movs	r3, #250	; 0xfa
 8000908:	0098      	lsls	r0, r3, #2
 800090a:	f7ff fc0f 	bl	800012c <__udivsi3>
 800090e:	0003      	movs	r3, r0
 8000910:	0019      	movs	r1, r3
 8000912:	0020      	movs	r0, r4
 8000914:	f7ff fc0a 	bl	800012c <__udivsi3>
 8000918:	0003      	movs	r3, r0
 800091a:	0018      	movs	r0, r3
 800091c:	f000 f905 	bl	8000b2a <HAL_SYSTICK_Config>
 8000920:	1e03      	subs	r3, r0, #0
 8000922:	d001      	beq.n	8000928 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000924:	2301      	movs	r3, #1
 8000926:	e00f      	b.n	8000948 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2b03      	cmp	r3, #3
 800092c:	d80b      	bhi.n	8000946 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800092e:	6879      	ldr	r1, [r7, #4]
 8000930:	2301      	movs	r3, #1
 8000932:	425b      	negs	r3, r3
 8000934:	2200      	movs	r2, #0
 8000936:	0018      	movs	r0, r3
 8000938:	f000 f8e2 	bl	8000b00 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <HAL_InitTick+0x64>)
 800093e:	687a      	ldr	r2, [r7, #4]
 8000940:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000942:	2300      	movs	r3, #0
 8000944:	e000      	b.n	8000948 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000946:	2301      	movs	r3, #1
}
 8000948:	0018      	movs	r0, r3
 800094a:	46bd      	mov	sp, r7
 800094c:	b003      	add	sp, #12
 800094e:	bd90      	pop	{r4, r7, pc}
 8000950:	20000000 	.word	0x20000000
 8000954:	20000008 	.word	0x20000008
 8000958:	20000004 	.word	0x20000004

0800095c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000960:	4b05      	ldr	r3, [pc, #20]	; (8000978 <HAL_IncTick+0x1c>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	001a      	movs	r2, r3
 8000966:	4b05      	ldr	r3, [pc, #20]	; (800097c <HAL_IncTick+0x20>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	18d2      	adds	r2, r2, r3
 800096c:	4b03      	ldr	r3, [pc, #12]	; (800097c <HAL_IncTick+0x20>)
 800096e:	601a      	str	r2, [r3, #0]
}
 8000970:	46c0      	nop			; (mov r8, r8)
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	20000008 	.word	0x20000008
 800097c:	200001b0 	.word	0x200001b0

08000980 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  return uwTick;
 8000984:	4b02      	ldr	r3, [pc, #8]	; (8000990 <HAL_GetTick+0x10>)
 8000986:	681b      	ldr	r3, [r3, #0]
}
 8000988:	0018      	movs	r0, r3
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	200001b0 	.word	0x200001b0

08000994 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800099c:	f7ff fff0 	bl	8000980 <HAL_GetTick>
 80009a0:	0003      	movs	r3, r0
 80009a2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	3301      	adds	r3, #1
 80009ac:	d005      	beq.n	80009ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009ae:	4b0a      	ldr	r3, [pc, #40]	; (80009d8 <HAL_Delay+0x44>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	001a      	movs	r2, r3
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	189b      	adds	r3, r3, r2
 80009b8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80009ba:	46c0      	nop			; (mov r8, r8)
 80009bc:	f7ff ffe0 	bl	8000980 <HAL_GetTick>
 80009c0:	0002      	movs	r2, r0
 80009c2:	68bb      	ldr	r3, [r7, #8]
 80009c4:	1ad3      	subs	r3, r2, r3
 80009c6:	68fa      	ldr	r2, [r7, #12]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	d8f7      	bhi.n	80009bc <HAL_Delay+0x28>
  {
  }
}
 80009cc:	46c0      	nop			; (mov r8, r8)
 80009ce:	46c0      	nop			; (mov r8, r8)
 80009d0:	46bd      	mov	sp, r7
 80009d2:	b004      	add	sp, #16
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	46c0      	nop			; (mov r8, r8)
 80009d8:	20000008 	.word	0x20000008

080009dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009dc:	b590      	push	{r4, r7, lr}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	0002      	movs	r2, r0
 80009e4:	6039      	str	r1, [r7, #0]
 80009e6:	1dfb      	adds	r3, r7, #7
 80009e8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009ea:	1dfb      	adds	r3, r7, #7
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	2b7f      	cmp	r3, #127	; 0x7f
 80009f0:	d828      	bhi.n	8000a44 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009f2:	4a2f      	ldr	r2, [pc, #188]	; (8000ab0 <__NVIC_SetPriority+0xd4>)
 80009f4:	1dfb      	adds	r3, r7, #7
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	b25b      	sxtb	r3, r3
 80009fa:	089b      	lsrs	r3, r3, #2
 80009fc:	33c0      	adds	r3, #192	; 0xc0
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	589b      	ldr	r3, [r3, r2]
 8000a02:	1dfa      	adds	r2, r7, #7
 8000a04:	7812      	ldrb	r2, [r2, #0]
 8000a06:	0011      	movs	r1, r2
 8000a08:	2203      	movs	r2, #3
 8000a0a:	400a      	ands	r2, r1
 8000a0c:	00d2      	lsls	r2, r2, #3
 8000a0e:	21ff      	movs	r1, #255	; 0xff
 8000a10:	4091      	lsls	r1, r2
 8000a12:	000a      	movs	r2, r1
 8000a14:	43d2      	mvns	r2, r2
 8000a16:	401a      	ands	r2, r3
 8000a18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	019b      	lsls	r3, r3, #6
 8000a1e:	22ff      	movs	r2, #255	; 0xff
 8000a20:	401a      	ands	r2, r3
 8000a22:	1dfb      	adds	r3, r7, #7
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	0018      	movs	r0, r3
 8000a28:	2303      	movs	r3, #3
 8000a2a:	4003      	ands	r3, r0
 8000a2c:	00db      	lsls	r3, r3, #3
 8000a2e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a30:	481f      	ldr	r0, [pc, #124]	; (8000ab0 <__NVIC_SetPriority+0xd4>)
 8000a32:	1dfb      	adds	r3, r7, #7
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	b25b      	sxtb	r3, r3
 8000a38:	089b      	lsrs	r3, r3, #2
 8000a3a:	430a      	orrs	r2, r1
 8000a3c:	33c0      	adds	r3, #192	; 0xc0
 8000a3e:	009b      	lsls	r3, r3, #2
 8000a40:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a42:	e031      	b.n	8000aa8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a44:	4a1b      	ldr	r2, [pc, #108]	; (8000ab4 <__NVIC_SetPriority+0xd8>)
 8000a46:	1dfb      	adds	r3, r7, #7
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	0019      	movs	r1, r3
 8000a4c:	230f      	movs	r3, #15
 8000a4e:	400b      	ands	r3, r1
 8000a50:	3b08      	subs	r3, #8
 8000a52:	089b      	lsrs	r3, r3, #2
 8000a54:	3306      	adds	r3, #6
 8000a56:	009b      	lsls	r3, r3, #2
 8000a58:	18d3      	adds	r3, r2, r3
 8000a5a:	3304      	adds	r3, #4
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	1dfa      	adds	r2, r7, #7
 8000a60:	7812      	ldrb	r2, [r2, #0]
 8000a62:	0011      	movs	r1, r2
 8000a64:	2203      	movs	r2, #3
 8000a66:	400a      	ands	r2, r1
 8000a68:	00d2      	lsls	r2, r2, #3
 8000a6a:	21ff      	movs	r1, #255	; 0xff
 8000a6c:	4091      	lsls	r1, r2
 8000a6e:	000a      	movs	r2, r1
 8000a70:	43d2      	mvns	r2, r2
 8000a72:	401a      	ands	r2, r3
 8000a74:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	019b      	lsls	r3, r3, #6
 8000a7a:	22ff      	movs	r2, #255	; 0xff
 8000a7c:	401a      	ands	r2, r3
 8000a7e:	1dfb      	adds	r3, r7, #7
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	0018      	movs	r0, r3
 8000a84:	2303      	movs	r3, #3
 8000a86:	4003      	ands	r3, r0
 8000a88:	00db      	lsls	r3, r3, #3
 8000a8a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a8c:	4809      	ldr	r0, [pc, #36]	; (8000ab4 <__NVIC_SetPriority+0xd8>)
 8000a8e:	1dfb      	adds	r3, r7, #7
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	001c      	movs	r4, r3
 8000a94:	230f      	movs	r3, #15
 8000a96:	4023      	ands	r3, r4
 8000a98:	3b08      	subs	r3, #8
 8000a9a:	089b      	lsrs	r3, r3, #2
 8000a9c:	430a      	orrs	r2, r1
 8000a9e:	3306      	adds	r3, #6
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	18c3      	adds	r3, r0, r3
 8000aa4:	3304      	adds	r3, #4
 8000aa6:	601a      	str	r2, [r3, #0]
}
 8000aa8:	46c0      	nop			; (mov r8, r8)
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	b003      	add	sp, #12
 8000aae:	bd90      	pop	{r4, r7, pc}
 8000ab0:	e000e100 	.word	0xe000e100
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	1e5a      	subs	r2, r3, #1
 8000ac4:	2380      	movs	r3, #128	; 0x80
 8000ac6:	045b      	lsls	r3, r3, #17
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d301      	bcc.n	8000ad0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000acc:	2301      	movs	r3, #1
 8000ace:	e010      	b.n	8000af2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ad0:	4b0a      	ldr	r3, [pc, #40]	; (8000afc <SysTick_Config+0x44>)
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	3a01      	subs	r2, #1
 8000ad6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ad8:	2301      	movs	r3, #1
 8000ada:	425b      	negs	r3, r3
 8000adc:	2103      	movs	r1, #3
 8000ade:	0018      	movs	r0, r3
 8000ae0:	f7ff ff7c 	bl	80009dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ae4:	4b05      	ldr	r3, [pc, #20]	; (8000afc <SysTick_Config+0x44>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aea:	4b04      	ldr	r3, [pc, #16]	; (8000afc <SysTick_Config+0x44>)
 8000aec:	2207      	movs	r2, #7
 8000aee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000af0:	2300      	movs	r3, #0
}
 8000af2:	0018      	movs	r0, r3
 8000af4:	46bd      	mov	sp, r7
 8000af6:	b002      	add	sp, #8
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	46c0      	nop			; (mov r8, r8)
 8000afc:	e000e010 	.word	0xe000e010

08000b00 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60b9      	str	r1, [r7, #8]
 8000b08:	607a      	str	r2, [r7, #4]
 8000b0a:	210f      	movs	r1, #15
 8000b0c:	187b      	adds	r3, r7, r1
 8000b0e:	1c02      	adds	r2, r0, #0
 8000b10:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b12:	68ba      	ldr	r2, [r7, #8]
 8000b14:	187b      	adds	r3, r7, r1
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	b25b      	sxtb	r3, r3
 8000b1a:	0011      	movs	r1, r2
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f7ff ff5d 	bl	80009dc <__NVIC_SetPriority>
}
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	46bd      	mov	sp, r7
 8000b26:	b004      	add	sp, #16
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b082      	sub	sp, #8
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	0018      	movs	r0, r3
 8000b36:	f7ff ffbf 	bl	8000ab8 <SysTick_Config>
 8000b3a:	0003      	movs	r3, r0
}
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	b002      	add	sp, #8
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b086      	sub	sp, #24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b52:	e14f      	b.n	8000df4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2101      	movs	r1, #1
 8000b5a:	697a      	ldr	r2, [r7, #20]
 8000b5c:	4091      	lsls	r1, r2
 8000b5e:	000a      	movs	r2, r1
 8000b60:	4013      	ands	r3, r2
 8000b62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d100      	bne.n	8000b6c <HAL_GPIO_Init+0x28>
 8000b6a:	e140      	b.n	8000dee <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	2203      	movs	r2, #3
 8000b72:	4013      	ands	r3, r2
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d005      	beq.n	8000b84 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	2203      	movs	r2, #3
 8000b7e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b80:	2b02      	cmp	r3, #2
 8000b82:	d130      	bne.n	8000be6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	689b      	ldr	r3, [r3, #8]
 8000b88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	005b      	lsls	r3, r3, #1
 8000b8e:	2203      	movs	r2, #3
 8000b90:	409a      	lsls	r2, r3
 8000b92:	0013      	movs	r3, r2
 8000b94:	43da      	mvns	r2, r3
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	4013      	ands	r3, r2
 8000b9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	68da      	ldr	r2, [r3, #12]
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	409a      	lsls	r2, r3
 8000ba6:	0013      	movs	r3, r2
 8000ba8:	693a      	ldr	r2, [r7, #16]
 8000baa:	4313      	orrs	r3, r2
 8000bac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	693a      	ldr	r2, [r7, #16]
 8000bb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bba:	2201      	movs	r2, #1
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	409a      	lsls	r2, r3
 8000bc0:	0013      	movs	r3, r2
 8000bc2:	43da      	mvns	r2, r3
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	091b      	lsrs	r3, r3, #4
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	401a      	ands	r2, r3
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	409a      	lsls	r2, r3
 8000bd8:	0013      	movs	r3, r2
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	2203      	movs	r2, #3
 8000bec:	4013      	ands	r3, r2
 8000bee:	2b03      	cmp	r3, #3
 8000bf0:	d017      	beq.n	8000c22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	68db      	ldr	r3, [r3, #12]
 8000bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	005b      	lsls	r3, r3, #1
 8000bfc:	2203      	movs	r2, #3
 8000bfe:	409a      	lsls	r2, r3
 8000c00:	0013      	movs	r3, r2
 8000c02:	43da      	mvns	r2, r3
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	4013      	ands	r3, r2
 8000c08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	689a      	ldr	r2, [r3, #8]
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	409a      	lsls	r2, r3
 8000c14:	0013      	movs	r3, r2
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	2203      	movs	r2, #3
 8000c28:	4013      	ands	r3, r2
 8000c2a:	2b02      	cmp	r3, #2
 8000c2c:	d123      	bne.n	8000c76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	08da      	lsrs	r2, r3, #3
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	3208      	adds	r2, #8
 8000c36:	0092      	lsls	r2, r2, #2
 8000c38:	58d3      	ldr	r3, [r2, r3]
 8000c3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	2207      	movs	r2, #7
 8000c40:	4013      	ands	r3, r2
 8000c42:	009b      	lsls	r3, r3, #2
 8000c44:	220f      	movs	r2, #15
 8000c46:	409a      	lsls	r2, r3
 8000c48:	0013      	movs	r3, r2
 8000c4a:	43da      	mvns	r2, r3
 8000c4c:	693b      	ldr	r3, [r7, #16]
 8000c4e:	4013      	ands	r3, r2
 8000c50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	691a      	ldr	r2, [r3, #16]
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	2107      	movs	r1, #7
 8000c5a:	400b      	ands	r3, r1
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	409a      	lsls	r2, r3
 8000c60:	0013      	movs	r3, r2
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	08da      	lsrs	r2, r3, #3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3208      	adds	r2, #8
 8000c70:	0092      	lsls	r2, r2, #2
 8000c72:	6939      	ldr	r1, [r7, #16]
 8000c74:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	2203      	movs	r2, #3
 8000c82:	409a      	lsls	r2, r3
 8000c84:	0013      	movs	r3, r2
 8000c86:	43da      	mvns	r2, r3
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	2203      	movs	r2, #3
 8000c94:	401a      	ands	r2, r3
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	409a      	lsls	r2, r3
 8000c9c:	0013      	movs	r3, r2
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	685a      	ldr	r2, [r3, #4]
 8000cae:	23c0      	movs	r3, #192	; 0xc0
 8000cb0:	029b      	lsls	r3, r3, #10
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	d100      	bne.n	8000cb8 <HAL_GPIO_Init+0x174>
 8000cb6:	e09a      	b.n	8000dee <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb8:	4b54      	ldr	r3, [pc, #336]	; (8000e0c <HAL_GPIO_Init+0x2c8>)
 8000cba:	699a      	ldr	r2, [r3, #24]
 8000cbc:	4b53      	ldr	r3, [pc, #332]	; (8000e0c <HAL_GPIO_Init+0x2c8>)
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	430a      	orrs	r2, r1
 8000cc2:	619a      	str	r2, [r3, #24]
 8000cc4:	4b51      	ldr	r3, [pc, #324]	; (8000e0c <HAL_GPIO_Init+0x2c8>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	2201      	movs	r2, #1
 8000cca:	4013      	ands	r3, r2
 8000ccc:	60bb      	str	r3, [r7, #8]
 8000cce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000cd0:	4a4f      	ldr	r2, [pc, #316]	; (8000e10 <HAL_GPIO_Init+0x2cc>)
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	089b      	lsrs	r3, r3, #2
 8000cd6:	3302      	adds	r3, #2
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	589b      	ldr	r3, [r3, r2]
 8000cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	2203      	movs	r2, #3
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	220f      	movs	r2, #15
 8000ce8:	409a      	lsls	r2, r3
 8000cea:	0013      	movs	r3, r2
 8000cec:	43da      	mvns	r2, r3
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	2390      	movs	r3, #144	; 0x90
 8000cf8:	05db      	lsls	r3, r3, #23
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	d013      	beq.n	8000d26 <HAL_GPIO_Init+0x1e2>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4a44      	ldr	r2, [pc, #272]	; (8000e14 <HAL_GPIO_Init+0x2d0>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d00d      	beq.n	8000d22 <HAL_GPIO_Init+0x1de>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4a43      	ldr	r2, [pc, #268]	; (8000e18 <HAL_GPIO_Init+0x2d4>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d007      	beq.n	8000d1e <HAL_GPIO_Init+0x1da>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4a42      	ldr	r2, [pc, #264]	; (8000e1c <HAL_GPIO_Init+0x2d8>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d101      	bne.n	8000d1a <HAL_GPIO_Init+0x1d6>
 8000d16:	2303      	movs	r3, #3
 8000d18:	e006      	b.n	8000d28 <HAL_GPIO_Init+0x1e4>
 8000d1a:	2305      	movs	r3, #5
 8000d1c:	e004      	b.n	8000d28 <HAL_GPIO_Init+0x1e4>
 8000d1e:	2302      	movs	r3, #2
 8000d20:	e002      	b.n	8000d28 <HAL_GPIO_Init+0x1e4>
 8000d22:	2301      	movs	r3, #1
 8000d24:	e000      	b.n	8000d28 <HAL_GPIO_Init+0x1e4>
 8000d26:	2300      	movs	r3, #0
 8000d28:	697a      	ldr	r2, [r7, #20]
 8000d2a:	2103      	movs	r1, #3
 8000d2c:	400a      	ands	r2, r1
 8000d2e:	0092      	lsls	r2, r2, #2
 8000d30:	4093      	lsls	r3, r2
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d38:	4935      	ldr	r1, [pc, #212]	; (8000e10 <HAL_GPIO_Init+0x2cc>)
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	089b      	lsrs	r3, r3, #2
 8000d3e:	3302      	adds	r3, #2
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d46:	4b36      	ldr	r3, [pc, #216]	; (8000e20 <HAL_GPIO_Init+0x2dc>)
 8000d48:	689b      	ldr	r3, [r3, #8]
 8000d4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	43da      	mvns	r2, r3
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	4013      	ands	r3, r2
 8000d54:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685a      	ldr	r2, [r3, #4]
 8000d5a:	2380      	movs	r3, #128	; 0x80
 8000d5c:	035b      	lsls	r3, r3, #13
 8000d5e:	4013      	ands	r3, r2
 8000d60:	d003      	beq.n	8000d6a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d6a:	4b2d      	ldr	r3, [pc, #180]	; (8000e20 <HAL_GPIO_Init+0x2dc>)
 8000d6c:	693a      	ldr	r2, [r7, #16]
 8000d6e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000d70:	4b2b      	ldr	r3, [pc, #172]	; (8000e20 <HAL_GPIO_Init+0x2dc>)
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	43da      	mvns	r2, r3
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685a      	ldr	r2, [r3, #4]
 8000d84:	2380      	movs	r3, #128	; 0x80
 8000d86:	039b      	lsls	r3, r3, #14
 8000d88:	4013      	ands	r3, r2
 8000d8a:	d003      	beq.n	8000d94 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000d8c:	693a      	ldr	r2, [r7, #16]
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d94:	4b22      	ldr	r3, [pc, #136]	; (8000e20 <HAL_GPIO_Init+0x2dc>)
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000d9a:	4b21      	ldr	r3, [pc, #132]	; (8000e20 <HAL_GPIO_Init+0x2dc>)
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	43da      	mvns	r2, r3
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	4013      	ands	r3, r2
 8000da8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685a      	ldr	r2, [r3, #4]
 8000dae:	2380      	movs	r3, #128	; 0x80
 8000db0:	029b      	lsls	r3, r3, #10
 8000db2:	4013      	ands	r3, r2
 8000db4:	d003      	beq.n	8000dbe <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000dbe:	4b18      	ldr	r3, [pc, #96]	; (8000e20 <HAL_GPIO_Init+0x2dc>)
 8000dc0:	693a      	ldr	r2, [r7, #16]
 8000dc2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000dc4:	4b16      	ldr	r3, [pc, #88]	; (8000e20 <HAL_GPIO_Init+0x2dc>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	43da      	mvns	r2, r3
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685a      	ldr	r2, [r3, #4]
 8000dd8:	2380      	movs	r3, #128	; 0x80
 8000dda:	025b      	lsls	r3, r3, #9
 8000ddc:	4013      	ands	r3, r2
 8000dde:	d003      	beq.n	8000de8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000de8:	4b0d      	ldr	r3, [pc, #52]	; (8000e20 <HAL_GPIO_Init+0x2dc>)
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	3301      	adds	r3, #1
 8000df2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	40da      	lsrs	r2, r3
 8000dfc:	1e13      	subs	r3, r2, #0
 8000dfe:	d000      	beq.n	8000e02 <HAL_GPIO_Init+0x2be>
 8000e00:	e6a8      	b.n	8000b54 <HAL_GPIO_Init+0x10>
  } 
}
 8000e02:	46c0      	nop			; (mov r8, r8)
 8000e04:	46c0      	nop			; (mov r8, r8)
 8000e06:	46bd      	mov	sp, r7
 8000e08:	b006      	add	sp, #24
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	40010000 	.word	0x40010000
 8000e14:	48000400 	.word	0x48000400
 8000e18:	48000800 	.word	0x48000800
 8000e1c:	48000c00 	.word	0x48000c00
 8000e20:	40010400 	.word	0x40010400

08000e24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	0008      	movs	r0, r1
 8000e2e:	0011      	movs	r1, r2
 8000e30:	1cbb      	adds	r3, r7, #2
 8000e32:	1c02      	adds	r2, r0, #0
 8000e34:	801a      	strh	r2, [r3, #0]
 8000e36:	1c7b      	adds	r3, r7, #1
 8000e38:	1c0a      	adds	r2, r1, #0
 8000e3a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e3c:	1c7b      	adds	r3, r7, #1
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d004      	beq.n	8000e4e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e44:	1cbb      	adds	r3, r7, #2
 8000e46:	881a      	ldrh	r2, [r3, #0]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e4c:	e003      	b.n	8000e56 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e4e:	1cbb      	adds	r3, r7, #2
 8000e50:	881a      	ldrh	r2, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e56:	46c0      	nop			; (mov r8, r8)
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	b002      	add	sp, #8
 8000e5c:	bd80      	pop	{r7, pc}
	...

08000e60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b088      	sub	sp, #32
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d101      	bne.n	8000e72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e301      	b.n	8001476 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2201      	movs	r2, #1
 8000e78:	4013      	ands	r3, r2
 8000e7a:	d100      	bne.n	8000e7e <HAL_RCC_OscConfig+0x1e>
 8000e7c:	e08d      	b.n	8000f9a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e7e:	4bc3      	ldr	r3, [pc, #780]	; (800118c <HAL_RCC_OscConfig+0x32c>)
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	220c      	movs	r2, #12
 8000e84:	4013      	ands	r3, r2
 8000e86:	2b04      	cmp	r3, #4
 8000e88:	d00e      	beq.n	8000ea8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e8a:	4bc0      	ldr	r3, [pc, #768]	; (800118c <HAL_RCC_OscConfig+0x32c>)
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	220c      	movs	r2, #12
 8000e90:	4013      	ands	r3, r2
 8000e92:	2b08      	cmp	r3, #8
 8000e94:	d116      	bne.n	8000ec4 <HAL_RCC_OscConfig+0x64>
 8000e96:	4bbd      	ldr	r3, [pc, #756]	; (800118c <HAL_RCC_OscConfig+0x32c>)
 8000e98:	685a      	ldr	r2, [r3, #4]
 8000e9a:	2380      	movs	r3, #128	; 0x80
 8000e9c:	025b      	lsls	r3, r3, #9
 8000e9e:	401a      	ands	r2, r3
 8000ea0:	2380      	movs	r3, #128	; 0x80
 8000ea2:	025b      	lsls	r3, r3, #9
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	d10d      	bne.n	8000ec4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ea8:	4bb8      	ldr	r3, [pc, #736]	; (800118c <HAL_RCC_OscConfig+0x32c>)
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	2380      	movs	r3, #128	; 0x80
 8000eae:	029b      	lsls	r3, r3, #10
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	d100      	bne.n	8000eb6 <HAL_RCC_OscConfig+0x56>
 8000eb4:	e070      	b.n	8000f98 <HAL_RCC_OscConfig+0x138>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d000      	beq.n	8000ec0 <HAL_RCC_OscConfig+0x60>
 8000ebe:	e06b      	b.n	8000f98 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	e2d8      	b.n	8001476 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d107      	bne.n	8000edc <HAL_RCC_OscConfig+0x7c>
 8000ecc:	4baf      	ldr	r3, [pc, #700]	; (800118c <HAL_RCC_OscConfig+0x32c>)
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	4bae      	ldr	r3, [pc, #696]	; (800118c <HAL_RCC_OscConfig+0x32c>)
 8000ed2:	2180      	movs	r1, #128	; 0x80
 8000ed4:	0249      	lsls	r1, r1, #9
 8000ed6:	430a      	orrs	r2, r1
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	e02f      	b.n	8000f3c <HAL_RCC_OscConfig+0xdc>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d10c      	bne.n	8000efe <HAL_RCC_OscConfig+0x9e>
 8000ee4:	4ba9      	ldr	r3, [pc, #676]	; (800118c <HAL_RCC_OscConfig+0x32c>)
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	4ba8      	ldr	r3, [pc, #672]	; (800118c <HAL_RCC_OscConfig+0x32c>)
 8000eea:	49a9      	ldr	r1, [pc, #676]	; (8001190 <HAL_RCC_OscConfig+0x330>)
 8000eec:	400a      	ands	r2, r1
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	4ba6      	ldr	r3, [pc, #664]	; (800118c <HAL_RCC_OscConfig+0x32c>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	4ba5      	ldr	r3, [pc, #660]	; (800118c <HAL_RCC_OscConfig+0x32c>)
 8000ef6:	49a7      	ldr	r1, [pc, #668]	; (8001194 <HAL_RCC_OscConfig+0x334>)
 8000ef8:	400a      	ands	r2, r1
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	e01e      	b.n	8000f3c <HAL_RCC_OscConfig+0xdc>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	2b05      	cmp	r3, #5
 8000f04:	d10e      	bne.n	8000f24 <HAL_RCC_OscConfig+0xc4>
 8000f06:	4ba1      	ldr	r3, [pc, #644]	; (800118c <HAL_RCC_OscConfig+0x32c>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	4ba0      	ldr	r3, [pc, #640]	; (800118c <HAL_RCC_OscConfig+0x32c>)
 8000f0c:	2180      	movs	r1, #128	; 0x80
 8000f0e:	02c9      	lsls	r1, r1, #11
 8000f10:	430a      	orrs	r2, r1
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	4b9d      	ldr	r3, [pc, #628]	; (800118c <HAL_RCC_OscConfig+0x32c>)
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	4b9c      	ldr	r3, [pc, #624]	; (800118c <HAL_RCC_OscConfig+0x32c>)
 8000f1a:	2180      	movs	r1, #128	; 0x80
 8000f1c:	0249      	lsls	r1, r1, #9
 8000f1e:	430a      	orrs	r2, r1
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	e00b      	b.n	8000f3c <HAL_RCC_OscConfig+0xdc>
 8000f24:	4b99      	ldr	r3, [pc, #612]	; (800118c <HAL_RCC_OscConfig+0x32c>)
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	4b98      	ldr	r3, [pc, #608]	; (800118c <HAL_RCC_OscConfig+0x32c>)
 8000f2a:	4999      	ldr	r1, [pc, #612]	; (8001190 <HAL_RCC_OscConfig+0x330>)
 8000f2c:	400a      	ands	r2, r1
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	4b96      	ldr	r3, [pc, #600]	; (800118c <HAL_RCC_OscConfig+0x32c>)
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	4b95      	ldr	r3, [pc, #596]	; (800118c <HAL_RCC_OscConfig+0x32c>)
 8000f36:	4997      	ldr	r1, [pc, #604]	; (8001194 <HAL_RCC_OscConfig+0x334>)
 8000f38:	400a      	ands	r2, r1
 8000f3a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d014      	beq.n	8000f6e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f44:	f7ff fd1c 	bl	8000980 <HAL_GetTick>
 8000f48:	0003      	movs	r3, r0
 8000f4a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f4c:	e008      	b.n	8000f60 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f4e:	f7ff fd17 	bl	8000980 <HAL_GetTick>
 8000f52:	0002      	movs	r2, r0
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	2b64      	cmp	r3, #100	; 0x64
 8000f5a:	d901      	bls.n	8000f60 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	e28a      	b.n	8001476 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f60:	4b8a      	ldr	r3, [pc, #552]	; (800118c <HAL_RCC_OscConfig+0x32c>)
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	2380      	movs	r3, #128	; 0x80
 8000f66:	029b      	lsls	r3, r3, #10
 8000f68:	4013      	ands	r3, r2
 8000f6a:	d0f0      	beq.n	8000f4e <HAL_RCC_OscConfig+0xee>
 8000f6c:	e015      	b.n	8000f9a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f6e:	f7ff fd07 	bl	8000980 <HAL_GetTick>
 8000f72:	0003      	movs	r3, r0
 8000f74:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f76:	e008      	b.n	8000f8a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f78:	f7ff fd02 	bl	8000980 <HAL_GetTick>
 8000f7c:	0002      	movs	r2, r0
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	2b64      	cmp	r3, #100	; 0x64
 8000f84:	d901      	bls.n	8000f8a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000f86:	2303      	movs	r3, #3
 8000f88:	e275      	b.n	8001476 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f8a:	4b80      	ldr	r3, [pc, #512]	; (800118c <HAL_RCC_OscConfig+0x32c>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	2380      	movs	r3, #128	; 0x80
 8000f90:	029b      	lsls	r3, r3, #10
 8000f92:	4013      	ands	r3, r2
 8000f94:	d1f0      	bne.n	8000f78 <HAL_RCC_OscConfig+0x118>
 8000f96:	e000      	b.n	8000f9a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f98:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	2202      	movs	r2, #2
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	d100      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x146>
 8000fa4:	e069      	b.n	800107a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000fa6:	4b79      	ldr	r3, [pc, #484]	; (800118c <HAL_RCC_OscConfig+0x32c>)
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	220c      	movs	r2, #12
 8000fac:	4013      	ands	r3, r2
 8000fae:	d00b      	beq.n	8000fc8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000fb0:	4b76      	ldr	r3, [pc, #472]	; (800118c <HAL_RCC_OscConfig+0x32c>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	220c      	movs	r2, #12
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	2b08      	cmp	r3, #8
 8000fba:	d11c      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x196>
 8000fbc:	4b73      	ldr	r3, [pc, #460]	; (800118c <HAL_RCC_OscConfig+0x32c>)
 8000fbe:	685a      	ldr	r2, [r3, #4]
 8000fc0:	2380      	movs	r3, #128	; 0x80
 8000fc2:	025b      	lsls	r3, r3, #9
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	d116      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fc8:	4b70      	ldr	r3, [pc, #448]	; (800118c <HAL_RCC_OscConfig+0x32c>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2202      	movs	r2, #2
 8000fce:	4013      	ands	r3, r2
 8000fd0:	d005      	beq.n	8000fde <HAL_RCC_OscConfig+0x17e>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d001      	beq.n	8000fde <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e24b      	b.n	8001476 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fde:	4b6b      	ldr	r3, [pc, #428]	; (800118c <HAL_RCC_OscConfig+0x32c>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	22f8      	movs	r2, #248	; 0xf8
 8000fe4:	4393      	bics	r3, r2
 8000fe6:	0019      	movs	r1, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	691b      	ldr	r3, [r3, #16]
 8000fec:	00da      	lsls	r2, r3, #3
 8000fee:	4b67      	ldr	r3, [pc, #412]	; (800118c <HAL_RCC_OscConfig+0x32c>)
 8000ff0:	430a      	orrs	r2, r1
 8000ff2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ff4:	e041      	b.n	800107a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	68db      	ldr	r3, [r3, #12]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d024      	beq.n	8001048 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ffe:	4b63      	ldr	r3, [pc, #396]	; (800118c <HAL_RCC_OscConfig+0x32c>)
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	4b62      	ldr	r3, [pc, #392]	; (800118c <HAL_RCC_OscConfig+0x32c>)
 8001004:	2101      	movs	r1, #1
 8001006:	430a      	orrs	r2, r1
 8001008:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800100a:	f7ff fcb9 	bl	8000980 <HAL_GetTick>
 800100e:	0003      	movs	r3, r0
 8001010:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001012:	e008      	b.n	8001026 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001014:	f7ff fcb4 	bl	8000980 <HAL_GetTick>
 8001018:	0002      	movs	r2, r0
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	2b02      	cmp	r3, #2
 8001020:	d901      	bls.n	8001026 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001022:	2303      	movs	r3, #3
 8001024:	e227      	b.n	8001476 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001026:	4b59      	ldr	r3, [pc, #356]	; (800118c <HAL_RCC_OscConfig+0x32c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2202      	movs	r2, #2
 800102c:	4013      	ands	r3, r2
 800102e:	d0f1      	beq.n	8001014 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001030:	4b56      	ldr	r3, [pc, #344]	; (800118c <HAL_RCC_OscConfig+0x32c>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	22f8      	movs	r2, #248	; 0xf8
 8001036:	4393      	bics	r3, r2
 8001038:	0019      	movs	r1, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	691b      	ldr	r3, [r3, #16]
 800103e:	00da      	lsls	r2, r3, #3
 8001040:	4b52      	ldr	r3, [pc, #328]	; (800118c <HAL_RCC_OscConfig+0x32c>)
 8001042:	430a      	orrs	r2, r1
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	e018      	b.n	800107a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001048:	4b50      	ldr	r3, [pc, #320]	; (800118c <HAL_RCC_OscConfig+0x32c>)
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	4b4f      	ldr	r3, [pc, #316]	; (800118c <HAL_RCC_OscConfig+0x32c>)
 800104e:	2101      	movs	r1, #1
 8001050:	438a      	bics	r2, r1
 8001052:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001054:	f7ff fc94 	bl	8000980 <HAL_GetTick>
 8001058:	0003      	movs	r3, r0
 800105a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800105c:	e008      	b.n	8001070 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800105e:	f7ff fc8f 	bl	8000980 <HAL_GetTick>
 8001062:	0002      	movs	r2, r0
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	2b02      	cmp	r3, #2
 800106a:	d901      	bls.n	8001070 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800106c:	2303      	movs	r3, #3
 800106e:	e202      	b.n	8001476 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001070:	4b46      	ldr	r3, [pc, #280]	; (800118c <HAL_RCC_OscConfig+0x32c>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2202      	movs	r2, #2
 8001076:	4013      	ands	r3, r2
 8001078:	d1f1      	bne.n	800105e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2208      	movs	r2, #8
 8001080:	4013      	ands	r3, r2
 8001082:	d036      	beq.n	80010f2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	69db      	ldr	r3, [r3, #28]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d019      	beq.n	80010c0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800108c:	4b3f      	ldr	r3, [pc, #252]	; (800118c <HAL_RCC_OscConfig+0x32c>)
 800108e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001090:	4b3e      	ldr	r3, [pc, #248]	; (800118c <HAL_RCC_OscConfig+0x32c>)
 8001092:	2101      	movs	r1, #1
 8001094:	430a      	orrs	r2, r1
 8001096:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001098:	f7ff fc72 	bl	8000980 <HAL_GetTick>
 800109c:	0003      	movs	r3, r0
 800109e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010a0:	e008      	b.n	80010b4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010a2:	f7ff fc6d 	bl	8000980 <HAL_GetTick>
 80010a6:	0002      	movs	r2, r0
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d901      	bls.n	80010b4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80010b0:	2303      	movs	r3, #3
 80010b2:	e1e0      	b.n	8001476 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010b4:	4b35      	ldr	r3, [pc, #212]	; (800118c <HAL_RCC_OscConfig+0x32c>)
 80010b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b8:	2202      	movs	r2, #2
 80010ba:	4013      	ands	r3, r2
 80010bc:	d0f1      	beq.n	80010a2 <HAL_RCC_OscConfig+0x242>
 80010be:	e018      	b.n	80010f2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010c0:	4b32      	ldr	r3, [pc, #200]	; (800118c <HAL_RCC_OscConfig+0x32c>)
 80010c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010c4:	4b31      	ldr	r3, [pc, #196]	; (800118c <HAL_RCC_OscConfig+0x32c>)
 80010c6:	2101      	movs	r1, #1
 80010c8:	438a      	bics	r2, r1
 80010ca:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010cc:	f7ff fc58 	bl	8000980 <HAL_GetTick>
 80010d0:	0003      	movs	r3, r0
 80010d2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010d4:	e008      	b.n	80010e8 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010d6:	f7ff fc53 	bl	8000980 <HAL_GetTick>
 80010da:	0002      	movs	r2, r0
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d901      	bls.n	80010e8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80010e4:	2303      	movs	r3, #3
 80010e6:	e1c6      	b.n	8001476 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010e8:	4b28      	ldr	r3, [pc, #160]	; (800118c <HAL_RCC_OscConfig+0x32c>)
 80010ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ec:	2202      	movs	r2, #2
 80010ee:	4013      	ands	r3, r2
 80010f0:	d1f1      	bne.n	80010d6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2204      	movs	r2, #4
 80010f8:	4013      	ands	r3, r2
 80010fa:	d100      	bne.n	80010fe <HAL_RCC_OscConfig+0x29e>
 80010fc:	e0b4      	b.n	8001268 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010fe:	201f      	movs	r0, #31
 8001100:	183b      	adds	r3, r7, r0
 8001102:	2200      	movs	r2, #0
 8001104:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001106:	4b21      	ldr	r3, [pc, #132]	; (800118c <HAL_RCC_OscConfig+0x32c>)
 8001108:	69da      	ldr	r2, [r3, #28]
 800110a:	2380      	movs	r3, #128	; 0x80
 800110c:	055b      	lsls	r3, r3, #21
 800110e:	4013      	ands	r3, r2
 8001110:	d110      	bne.n	8001134 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001112:	4b1e      	ldr	r3, [pc, #120]	; (800118c <HAL_RCC_OscConfig+0x32c>)
 8001114:	69da      	ldr	r2, [r3, #28]
 8001116:	4b1d      	ldr	r3, [pc, #116]	; (800118c <HAL_RCC_OscConfig+0x32c>)
 8001118:	2180      	movs	r1, #128	; 0x80
 800111a:	0549      	lsls	r1, r1, #21
 800111c:	430a      	orrs	r2, r1
 800111e:	61da      	str	r2, [r3, #28]
 8001120:	4b1a      	ldr	r3, [pc, #104]	; (800118c <HAL_RCC_OscConfig+0x32c>)
 8001122:	69da      	ldr	r2, [r3, #28]
 8001124:	2380      	movs	r3, #128	; 0x80
 8001126:	055b      	lsls	r3, r3, #21
 8001128:	4013      	ands	r3, r2
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800112e:	183b      	adds	r3, r7, r0
 8001130:	2201      	movs	r2, #1
 8001132:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001134:	4b18      	ldr	r3, [pc, #96]	; (8001198 <HAL_RCC_OscConfig+0x338>)
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	2380      	movs	r3, #128	; 0x80
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	4013      	ands	r3, r2
 800113e:	d11a      	bne.n	8001176 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001140:	4b15      	ldr	r3, [pc, #84]	; (8001198 <HAL_RCC_OscConfig+0x338>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4b14      	ldr	r3, [pc, #80]	; (8001198 <HAL_RCC_OscConfig+0x338>)
 8001146:	2180      	movs	r1, #128	; 0x80
 8001148:	0049      	lsls	r1, r1, #1
 800114a:	430a      	orrs	r2, r1
 800114c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800114e:	f7ff fc17 	bl	8000980 <HAL_GetTick>
 8001152:	0003      	movs	r3, r0
 8001154:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001156:	e008      	b.n	800116a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001158:	f7ff fc12 	bl	8000980 <HAL_GetTick>
 800115c:	0002      	movs	r2, r0
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b64      	cmp	r3, #100	; 0x64
 8001164:	d901      	bls.n	800116a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e185      	b.n	8001476 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800116a:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <HAL_RCC_OscConfig+0x338>)
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	2380      	movs	r3, #128	; 0x80
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	4013      	ands	r3, r2
 8001174:	d0f0      	beq.n	8001158 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d10e      	bne.n	800119c <HAL_RCC_OscConfig+0x33c>
 800117e:	4b03      	ldr	r3, [pc, #12]	; (800118c <HAL_RCC_OscConfig+0x32c>)
 8001180:	6a1a      	ldr	r2, [r3, #32]
 8001182:	4b02      	ldr	r3, [pc, #8]	; (800118c <HAL_RCC_OscConfig+0x32c>)
 8001184:	2101      	movs	r1, #1
 8001186:	430a      	orrs	r2, r1
 8001188:	621a      	str	r2, [r3, #32]
 800118a:	e035      	b.n	80011f8 <HAL_RCC_OscConfig+0x398>
 800118c:	40021000 	.word	0x40021000
 8001190:	fffeffff 	.word	0xfffeffff
 8001194:	fffbffff 	.word	0xfffbffff
 8001198:	40007000 	.word	0x40007000
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d10c      	bne.n	80011be <HAL_RCC_OscConfig+0x35e>
 80011a4:	4bb6      	ldr	r3, [pc, #728]	; (8001480 <HAL_RCC_OscConfig+0x620>)
 80011a6:	6a1a      	ldr	r2, [r3, #32]
 80011a8:	4bb5      	ldr	r3, [pc, #724]	; (8001480 <HAL_RCC_OscConfig+0x620>)
 80011aa:	2101      	movs	r1, #1
 80011ac:	438a      	bics	r2, r1
 80011ae:	621a      	str	r2, [r3, #32]
 80011b0:	4bb3      	ldr	r3, [pc, #716]	; (8001480 <HAL_RCC_OscConfig+0x620>)
 80011b2:	6a1a      	ldr	r2, [r3, #32]
 80011b4:	4bb2      	ldr	r3, [pc, #712]	; (8001480 <HAL_RCC_OscConfig+0x620>)
 80011b6:	2104      	movs	r1, #4
 80011b8:	438a      	bics	r2, r1
 80011ba:	621a      	str	r2, [r3, #32]
 80011bc:	e01c      	b.n	80011f8 <HAL_RCC_OscConfig+0x398>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	2b05      	cmp	r3, #5
 80011c4:	d10c      	bne.n	80011e0 <HAL_RCC_OscConfig+0x380>
 80011c6:	4bae      	ldr	r3, [pc, #696]	; (8001480 <HAL_RCC_OscConfig+0x620>)
 80011c8:	6a1a      	ldr	r2, [r3, #32]
 80011ca:	4bad      	ldr	r3, [pc, #692]	; (8001480 <HAL_RCC_OscConfig+0x620>)
 80011cc:	2104      	movs	r1, #4
 80011ce:	430a      	orrs	r2, r1
 80011d0:	621a      	str	r2, [r3, #32]
 80011d2:	4bab      	ldr	r3, [pc, #684]	; (8001480 <HAL_RCC_OscConfig+0x620>)
 80011d4:	6a1a      	ldr	r2, [r3, #32]
 80011d6:	4baa      	ldr	r3, [pc, #680]	; (8001480 <HAL_RCC_OscConfig+0x620>)
 80011d8:	2101      	movs	r1, #1
 80011da:	430a      	orrs	r2, r1
 80011dc:	621a      	str	r2, [r3, #32]
 80011de:	e00b      	b.n	80011f8 <HAL_RCC_OscConfig+0x398>
 80011e0:	4ba7      	ldr	r3, [pc, #668]	; (8001480 <HAL_RCC_OscConfig+0x620>)
 80011e2:	6a1a      	ldr	r2, [r3, #32]
 80011e4:	4ba6      	ldr	r3, [pc, #664]	; (8001480 <HAL_RCC_OscConfig+0x620>)
 80011e6:	2101      	movs	r1, #1
 80011e8:	438a      	bics	r2, r1
 80011ea:	621a      	str	r2, [r3, #32]
 80011ec:	4ba4      	ldr	r3, [pc, #656]	; (8001480 <HAL_RCC_OscConfig+0x620>)
 80011ee:	6a1a      	ldr	r2, [r3, #32]
 80011f0:	4ba3      	ldr	r3, [pc, #652]	; (8001480 <HAL_RCC_OscConfig+0x620>)
 80011f2:	2104      	movs	r1, #4
 80011f4:	438a      	bics	r2, r1
 80011f6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d014      	beq.n	800122a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001200:	f7ff fbbe 	bl	8000980 <HAL_GetTick>
 8001204:	0003      	movs	r3, r0
 8001206:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001208:	e009      	b.n	800121e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800120a:	f7ff fbb9 	bl	8000980 <HAL_GetTick>
 800120e:	0002      	movs	r2, r0
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	4a9b      	ldr	r2, [pc, #620]	; (8001484 <HAL_RCC_OscConfig+0x624>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d901      	bls.n	800121e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e12b      	b.n	8001476 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800121e:	4b98      	ldr	r3, [pc, #608]	; (8001480 <HAL_RCC_OscConfig+0x620>)
 8001220:	6a1b      	ldr	r3, [r3, #32]
 8001222:	2202      	movs	r2, #2
 8001224:	4013      	ands	r3, r2
 8001226:	d0f0      	beq.n	800120a <HAL_RCC_OscConfig+0x3aa>
 8001228:	e013      	b.n	8001252 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800122a:	f7ff fba9 	bl	8000980 <HAL_GetTick>
 800122e:	0003      	movs	r3, r0
 8001230:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001232:	e009      	b.n	8001248 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001234:	f7ff fba4 	bl	8000980 <HAL_GetTick>
 8001238:	0002      	movs	r2, r0
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	4a91      	ldr	r2, [pc, #580]	; (8001484 <HAL_RCC_OscConfig+0x624>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d901      	bls.n	8001248 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001244:	2303      	movs	r3, #3
 8001246:	e116      	b.n	8001476 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001248:	4b8d      	ldr	r3, [pc, #564]	; (8001480 <HAL_RCC_OscConfig+0x620>)
 800124a:	6a1b      	ldr	r3, [r3, #32]
 800124c:	2202      	movs	r2, #2
 800124e:	4013      	ands	r3, r2
 8001250:	d1f0      	bne.n	8001234 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001252:	231f      	movs	r3, #31
 8001254:	18fb      	adds	r3, r7, r3
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d105      	bne.n	8001268 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800125c:	4b88      	ldr	r3, [pc, #544]	; (8001480 <HAL_RCC_OscConfig+0x620>)
 800125e:	69da      	ldr	r2, [r3, #28]
 8001260:	4b87      	ldr	r3, [pc, #540]	; (8001480 <HAL_RCC_OscConfig+0x620>)
 8001262:	4989      	ldr	r1, [pc, #548]	; (8001488 <HAL_RCC_OscConfig+0x628>)
 8001264:	400a      	ands	r2, r1
 8001266:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2210      	movs	r2, #16
 800126e:	4013      	ands	r3, r2
 8001270:	d063      	beq.n	800133a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	695b      	ldr	r3, [r3, #20]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d12a      	bne.n	80012d0 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800127a:	4b81      	ldr	r3, [pc, #516]	; (8001480 <HAL_RCC_OscConfig+0x620>)
 800127c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800127e:	4b80      	ldr	r3, [pc, #512]	; (8001480 <HAL_RCC_OscConfig+0x620>)
 8001280:	2104      	movs	r1, #4
 8001282:	430a      	orrs	r2, r1
 8001284:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001286:	4b7e      	ldr	r3, [pc, #504]	; (8001480 <HAL_RCC_OscConfig+0x620>)
 8001288:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800128a:	4b7d      	ldr	r3, [pc, #500]	; (8001480 <HAL_RCC_OscConfig+0x620>)
 800128c:	2101      	movs	r1, #1
 800128e:	430a      	orrs	r2, r1
 8001290:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001292:	f7ff fb75 	bl	8000980 <HAL_GetTick>
 8001296:	0003      	movs	r3, r0
 8001298:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800129a:	e008      	b.n	80012ae <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800129c:	f7ff fb70 	bl	8000980 <HAL_GetTick>
 80012a0:	0002      	movs	r2, r0
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d901      	bls.n	80012ae <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e0e3      	b.n	8001476 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80012ae:	4b74      	ldr	r3, [pc, #464]	; (8001480 <HAL_RCC_OscConfig+0x620>)
 80012b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012b2:	2202      	movs	r2, #2
 80012b4:	4013      	ands	r3, r2
 80012b6:	d0f1      	beq.n	800129c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80012b8:	4b71      	ldr	r3, [pc, #452]	; (8001480 <HAL_RCC_OscConfig+0x620>)
 80012ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012bc:	22f8      	movs	r2, #248	; 0xf8
 80012be:	4393      	bics	r3, r2
 80012c0:	0019      	movs	r1, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	699b      	ldr	r3, [r3, #24]
 80012c6:	00da      	lsls	r2, r3, #3
 80012c8:	4b6d      	ldr	r3, [pc, #436]	; (8001480 <HAL_RCC_OscConfig+0x620>)
 80012ca:	430a      	orrs	r2, r1
 80012cc:	635a      	str	r2, [r3, #52]	; 0x34
 80012ce:	e034      	b.n	800133a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	695b      	ldr	r3, [r3, #20]
 80012d4:	3305      	adds	r3, #5
 80012d6:	d111      	bne.n	80012fc <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80012d8:	4b69      	ldr	r3, [pc, #420]	; (8001480 <HAL_RCC_OscConfig+0x620>)
 80012da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012dc:	4b68      	ldr	r3, [pc, #416]	; (8001480 <HAL_RCC_OscConfig+0x620>)
 80012de:	2104      	movs	r1, #4
 80012e0:	438a      	bics	r2, r1
 80012e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80012e4:	4b66      	ldr	r3, [pc, #408]	; (8001480 <HAL_RCC_OscConfig+0x620>)
 80012e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012e8:	22f8      	movs	r2, #248	; 0xf8
 80012ea:	4393      	bics	r3, r2
 80012ec:	0019      	movs	r1, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	699b      	ldr	r3, [r3, #24]
 80012f2:	00da      	lsls	r2, r3, #3
 80012f4:	4b62      	ldr	r3, [pc, #392]	; (8001480 <HAL_RCC_OscConfig+0x620>)
 80012f6:	430a      	orrs	r2, r1
 80012f8:	635a      	str	r2, [r3, #52]	; 0x34
 80012fa:	e01e      	b.n	800133a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80012fc:	4b60      	ldr	r3, [pc, #384]	; (8001480 <HAL_RCC_OscConfig+0x620>)
 80012fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001300:	4b5f      	ldr	r3, [pc, #380]	; (8001480 <HAL_RCC_OscConfig+0x620>)
 8001302:	2104      	movs	r1, #4
 8001304:	430a      	orrs	r2, r1
 8001306:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001308:	4b5d      	ldr	r3, [pc, #372]	; (8001480 <HAL_RCC_OscConfig+0x620>)
 800130a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800130c:	4b5c      	ldr	r3, [pc, #368]	; (8001480 <HAL_RCC_OscConfig+0x620>)
 800130e:	2101      	movs	r1, #1
 8001310:	438a      	bics	r2, r1
 8001312:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001314:	f7ff fb34 	bl	8000980 <HAL_GetTick>
 8001318:	0003      	movs	r3, r0
 800131a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800131c:	e008      	b.n	8001330 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800131e:	f7ff fb2f 	bl	8000980 <HAL_GetTick>
 8001322:	0002      	movs	r2, r0
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d901      	bls.n	8001330 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e0a2      	b.n	8001476 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001330:	4b53      	ldr	r3, [pc, #332]	; (8001480 <HAL_RCC_OscConfig+0x620>)
 8001332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001334:	2202      	movs	r2, #2
 8001336:	4013      	ands	r3, r2
 8001338:	d1f1      	bne.n	800131e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6a1b      	ldr	r3, [r3, #32]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d100      	bne.n	8001344 <HAL_RCC_OscConfig+0x4e4>
 8001342:	e097      	b.n	8001474 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001344:	4b4e      	ldr	r3, [pc, #312]	; (8001480 <HAL_RCC_OscConfig+0x620>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	220c      	movs	r2, #12
 800134a:	4013      	ands	r3, r2
 800134c:	2b08      	cmp	r3, #8
 800134e:	d100      	bne.n	8001352 <HAL_RCC_OscConfig+0x4f2>
 8001350:	e06b      	b.n	800142a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6a1b      	ldr	r3, [r3, #32]
 8001356:	2b02      	cmp	r3, #2
 8001358:	d14c      	bne.n	80013f4 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800135a:	4b49      	ldr	r3, [pc, #292]	; (8001480 <HAL_RCC_OscConfig+0x620>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	4b48      	ldr	r3, [pc, #288]	; (8001480 <HAL_RCC_OscConfig+0x620>)
 8001360:	494a      	ldr	r1, [pc, #296]	; (800148c <HAL_RCC_OscConfig+0x62c>)
 8001362:	400a      	ands	r2, r1
 8001364:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001366:	f7ff fb0b 	bl	8000980 <HAL_GetTick>
 800136a:	0003      	movs	r3, r0
 800136c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001370:	f7ff fb06 	bl	8000980 <HAL_GetTick>
 8001374:	0002      	movs	r2, r0
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b02      	cmp	r3, #2
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e079      	b.n	8001476 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001382:	4b3f      	ldr	r3, [pc, #252]	; (8001480 <HAL_RCC_OscConfig+0x620>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	2380      	movs	r3, #128	; 0x80
 8001388:	049b      	lsls	r3, r3, #18
 800138a:	4013      	ands	r3, r2
 800138c:	d1f0      	bne.n	8001370 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800138e:	4b3c      	ldr	r3, [pc, #240]	; (8001480 <HAL_RCC_OscConfig+0x620>)
 8001390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001392:	220f      	movs	r2, #15
 8001394:	4393      	bics	r3, r2
 8001396:	0019      	movs	r1, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800139c:	4b38      	ldr	r3, [pc, #224]	; (8001480 <HAL_RCC_OscConfig+0x620>)
 800139e:	430a      	orrs	r2, r1
 80013a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80013a2:	4b37      	ldr	r3, [pc, #220]	; (8001480 <HAL_RCC_OscConfig+0x620>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	4a3a      	ldr	r2, [pc, #232]	; (8001490 <HAL_RCC_OscConfig+0x630>)
 80013a8:	4013      	ands	r3, r2
 80013aa:	0019      	movs	r1, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b4:	431a      	orrs	r2, r3
 80013b6:	4b32      	ldr	r3, [pc, #200]	; (8001480 <HAL_RCC_OscConfig+0x620>)
 80013b8:	430a      	orrs	r2, r1
 80013ba:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013bc:	4b30      	ldr	r3, [pc, #192]	; (8001480 <HAL_RCC_OscConfig+0x620>)
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	4b2f      	ldr	r3, [pc, #188]	; (8001480 <HAL_RCC_OscConfig+0x620>)
 80013c2:	2180      	movs	r1, #128	; 0x80
 80013c4:	0449      	lsls	r1, r1, #17
 80013c6:	430a      	orrs	r2, r1
 80013c8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ca:	f7ff fad9 	bl	8000980 <HAL_GetTick>
 80013ce:	0003      	movs	r3, r0
 80013d0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013d2:	e008      	b.n	80013e6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013d4:	f7ff fad4 	bl	8000980 <HAL_GetTick>
 80013d8:	0002      	movs	r2, r0
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e047      	b.n	8001476 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013e6:	4b26      	ldr	r3, [pc, #152]	; (8001480 <HAL_RCC_OscConfig+0x620>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	2380      	movs	r3, #128	; 0x80
 80013ec:	049b      	lsls	r3, r3, #18
 80013ee:	4013      	ands	r3, r2
 80013f0:	d0f0      	beq.n	80013d4 <HAL_RCC_OscConfig+0x574>
 80013f2:	e03f      	b.n	8001474 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013f4:	4b22      	ldr	r3, [pc, #136]	; (8001480 <HAL_RCC_OscConfig+0x620>)
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	4b21      	ldr	r3, [pc, #132]	; (8001480 <HAL_RCC_OscConfig+0x620>)
 80013fa:	4924      	ldr	r1, [pc, #144]	; (800148c <HAL_RCC_OscConfig+0x62c>)
 80013fc:	400a      	ands	r2, r1
 80013fe:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001400:	f7ff fabe 	bl	8000980 <HAL_GetTick>
 8001404:	0003      	movs	r3, r0
 8001406:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001408:	e008      	b.n	800141c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800140a:	f7ff fab9 	bl	8000980 <HAL_GetTick>
 800140e:	0002      	movs	r2, r0
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	2b02      	cmp	r3, #2
 8001416:	d901      	bls.n	800141c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	e02c      	b.n	8001476 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800141c:	4b18      	ldr	r3, [pc, #96]	; (8001480 <HAL_RCC_OscConfig+0x620>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	2380      	movs	r3, #128	; 0x80
 8001422:	049b      	lsls	r3, r3, #18
 8001424:	4013      	ands	r3, r2
 8001426:	d1f0      	bne.n	800140a <HAL_RCC_OscConfig+0x5aa>
 8001428:	e024      	b.n	8001474 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6a1b      	ldr	r3, [r3, #32]
 800142e:	2b01      	cmp	r3, #1
 8001430:	d101      	bne.n	8001436 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e01f      	b.n	8001476 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001436:	4b12      	ldr	r3, [pc, #72]	; (8001480 <HAL_RCC_OscConfig+0x620>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800143c:	4b10      	ldr	r3, [pc, #64]	; (8001480 <HAL_RCC_OscConfig+0x620>)
 800143e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001440:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001442:	697a      	ldr	r2, [r7, #20]
 8001444:	2380      	movs	r3, #128	; 0x80
 8001446:	025b      	lsls	r3, r3, #9
 8001448:	401a      	ands	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144e:	429a      	cmp	r2, r3
 8001450:	d10e      	bne.n	8001470 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	220f      	movs	r2, #15
 8001456:	401a      	ands	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800145c:	429a      	cmp	r2, r3
 800145e:	d107      	bne.n	8001470 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001460:	697a      	ldr	r2, [r7, #20]
 8001462:	23f0      	movs	r3, #240	; 0xf0
 8001464:	039b      	lsls	r3, r3, #14
 8001466:	401a      	ands	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800146c:	429a      	cmp	r2, r3
 800146e:	d001      	beq.n	8001474 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e000      	b.n	8001476 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001474:	2300      	movs	r3, #0
}
 8001476:	0018      	movs	r0, r3
 8001478:	46bd      	mov	sp, r7
 800147a:	b008      	add	sp, #32
 800147c:	bd80      	pop	{r7, pc}
 800147e:	46c0      	nop			; (mov r8, r8)
 8001480:	40021000 	.word	0x40021000
 8001484:	00001388 	.word	0x00001388
 8001488:	efffffff 	.word	0xefffffff
 800148c:	feffffff 	.word	0xfeffffff
 8001490:	ffc2ffff 	.word	0xffc2ffff

08001494 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d101      	bne.n	80014a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e0b3      	b.n	8001610 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014a8:	4b5b      	ldr	r3, [pc, #364]	; (8001618 <HAL_RCC_ClockConfig+0x184>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2201      	movs	r2, #1
 80014ae:	4013      	ands	r3, r2
 80014b0:	683a      	ldr	r2, [r7, #0]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d911      	bls.n	80014da <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014b6:	4b58      	ldr	r3, [pc, #352]	; (8001618 <HAL_RCC_ClockConfig+0x184>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2201      	movs	r2, #1
 80014bc:	4393      	bics	r3, r2
 80014be:	0019      	movs	r1, r3
 80014c0:	4b55      	ldr	r3, [pc, #340]	; (8001618 <HAL_RCC_ClockConfig+0x184>)
 80014c2:	683a      	ldr	r2, [r7, #0]
 80014c4:	430a      	orrs	r2, r1
 80014c6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014c8:	4b53      	ldr	r3, [pc, #332]	; (8001618 <HAL_RCC_ClockConfig+0x184>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2201      	movs	r2, #1
 80014ce:	4013      	ands	r3, r2
 80014d0:	683a      	ldr	r2, [r7, #0]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d001      	beq.n	80014da <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e09a      	b.n	8001610 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2202      	movs	r2, #2
 80014e0:	4013      	ands	r3, r2
 80014e2:	d015      	beq.n	8001510 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2204      	movs	r2, #4
 80014ea:	4013      	ands	r3, r2
 80014ec:	d006      	beq.n	80014fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80014ee:	4b4b      	ldr	r3, [pc, #300]	; (800161c <HAL_RCC_ClockConfig+0x188>)
 80014f0:	685a      	ldr	r2, [r3, #4]
 80014f2:	4b4a      	ldr	r3, [pc, #296]	; (800161c <HAL_RCC_ClockConfig+0x188>)
 80014f4:	21e0      	movs	r1, #224	; 0xe0
 80014f6:	00c9      	lsls	r1, r1, #3
 80014f8:	430a      	orrs	r2, r1
 80014fa:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014fc:	4b47      	ldr	r3, [pc, #284]	; (800161c <HAL_RCC_ClockConfig+0x188>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	22f0      	movs	r2, #240	; 0xf0
 8001502:	4393      	bics	r3, r2
 8001504:	0019      	movs	r1, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	689a      	ldr	r2, [r3, #8]
 800150a:	4b44      	ldr	r3, [pc, #272]	; (800161c <HAL_RCC_ClockConfig+0x188>)
 800150c:	430a      	orrs	r2, r1
 800150e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2201      	movs	r2, #1
 8001516:	4013      	ands	r3, r2
 8001518:	d040      	beq.n	800159c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d107      	bne.n	8001532 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001522:	4b3e      	ldr	r3, [pc, #248]	; (800161c <HAL_RCC_ClockConfig+0x188>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	2380      	movs	r3, #128	; 0x80
 8001528:	029b      	lsls	r3, r3, #10
 800152a:	4013      	ands	r3, r2
 800152c:	d114      	bne.n	8001558 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e06e      	b.n	8001610 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	2b02      	cmp	r3, #2
 8001538:	d107      	bne.n	800154a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800153a:	4b38      	ldr	r3, [pc, #224]	; (800161c <HAL_RCC_ClockConfig+0x188>)
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	2380      	movs	r3, #128	; 0x80
 8001540:	049b      	lsls	r3, r3, #18
 8001542:	4013      	ands	r3, r2
 8001544:	d108      	bne.n	8001558 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e062      	b.n	8001610 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800154a:	4b34      	ldr	r3, [pc, #208]	; (800161c <HAL_RCC_ClockConfig+0x188>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2202      	movs	r2, #2
 8001550:	4013      	ands	r3, r2
 8001552:	d101      	bne.n	8001558 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e05b      	b.n	8001610 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001558:	4b30      	ldr	r3, [pc, #192]	; (800161c <HAL_RCC_ClockConfig+0x188>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	2203      	movs	r2, #3
 800155e:	4393      	bics	r3, r2
 8001560:	0019      	movs	r1, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685a      	ldr	r2, [r3, #4]
 8001566:	4b2d      	ldr	r3, [pc, #180]	; (800161c <HAL_RCC_ClockConfig+0x188>)
 8001568:	430a      	orrs	r2, r1
 800156a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800156c:	f7ff fa08 	bl	8000980 <HAL_GetTick>
 8001570:	0003      	movs	r3, r0
 8001572:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001574:	e009      	b.n	800158a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001576:	f7ff fa03 	bl	8000980 <HAL_GetTick>
 800157a:	0002      	movs	r2, r0
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	4a27      	ldr	r2, [pc, #156]	; (8001620 <HAL_RCC_ClockConfig+0x18c>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d901      	bls.n	800158a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e042      	b.n	8001610 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800158a:	4b24      	ldr	r3, [pc, #144]	; (800161c <HAL_RCC_ClockConfig+0x188>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	220c      	movs	r2, #12
 8001590:	401a      	ands	r2, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	429a      	cmp	r2, r3
 800159a:	d1ec      	bne.n	8001576 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800159c:	4b1e      	ldr	r3, [pc, #120]	; (8001618 <HAL_RCC_ClockConfig+0x184>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2201      	movs	r2, #1
 80015a2:	4013      	ands	r3, r2
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d211      	bcs.n	80015ce <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015aa:	4b1b      	ldr	r3, [pc, #108]	; (8001618 <HAL_RCC_ClockConfig+0x184>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2201      	movs	r2, #1
 80015b0:	4393      	bics	r3, r2
 80015b2:	0019      	movs	r1, r3
 80015b4:	4b18      	ldr	r3, [pc, #96]	; (8001618 <HAL_RCC_ClockConfig+0x184>)
 80015b6:	683a      	ldr	r2, [r7, #0]
 80015b8:	430a      	orrs	r2, r1
 80015ba:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015bc:	4b16      	ldr	r3, [pc, #88]	; (8001618 <HAL_RCC_ClockConfig+0x184>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2201      	movs	r2, #1
 80015c2:	4013      	ands	r3, r2
 80015c4:	683a      	ldr	r2, [r7, #0]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d001      	beq.n	80015ce <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e020      	b.n	8001610 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2204      	movs	r2, #4
 80015d4:	4013      	ands	r3, r2
 80015d6:	d009      	beq.n	80015ec <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80015d8:	4b10      	ldr	r3, [pc, #64]	; (800161c <HAL_RCC_ClockConfig+0x188>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	4a11      	ldr	r2, [pc, #68]	; (8001624 <HAL_RCC_ClockConfig+0x190>)
 80015de:	4013      	ands	r3, r2
 80015e0:	0019      	movs	r1, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	68da      	ldr	r2, [r3, #12]
 80015e6:	4b0d      	ldr	r3, [pc, #52]	; (800161c <HAL_RCC_ClockConfig+0x188>)
 80015e8:	430a      	orrs	r2, r1
 80015ea:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80015ec:	f000 f820 	bl	8001630 <HAL_RCC_GetSysClockFreq>
 80015f0:	0001      	movs	r1, r0
 80015f2:	4b0a      	ldr	r3, [pc, #40]	; (800161c <HAL_RCC_ClockConfig+0x188>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	091b      	lsrs	r3, r3, #4
 80015f8:	220f      	movs	r2, #15
 80015fa:	4013      	ands	r3, r2
 80015fc:	4a0a      	ldr	r2, [pc, #40]	; (8001628 <HAL_RCC_ClockConfig+0x194>)
 80015fe:	5cd3      	ldrb	r3, [r2, r3]
 8001600:	000a      	movs	r2, r1
 8001602:	40da      	lsrs	r2, r3
 8001604:	4b09      	ldr	r3, [pc, #36]	; (800162c <HAL_RCC_ClockConfig+0x198>)
 8001606:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001608:	2000      	movs	r0, #0
 800160a:	f7ff f973 	bl	80008f4 <HAL_InitTick>
  
  return HAL_OK;
 800160e:	2300      	movs	r3, #0
}
 8001610:	0018      	movs	r0, r3
 8001612:	46bd      	mov	sp, r7
 8001614:	b004      	add	sp, #16
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40022000 	.word	0x40022000
 800161c:	40021000 	.word	0x40021000
 8001620:	00001388 	.word	0x00001388
 8001624:	fffff8ff 	.word	0xfffff8ff
 8001628:	08003750 	.word	0x08003750
 800162c:	20000000 	.word	0x20000000

08001630 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	2300      	movs	r3, #0
 800163c:	60bb      	str	r3, [r7, #8]
 800163e:	2300      	movs	r3, #0
 8001640:	617b      	str	r3, [r7, #20]
 8001642:	2300      	movs	r3, #0
 8001644:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001646:	2300      	movs	r3, #0
 8001648:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800164a:	4b20      	ldr	r3, [pc, #128]	; (80016cc <HAL_RCC_GetSysClockFreq+0x9c>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	220c      	movs	r2, #12
 8001654:	4013      	ands	r3, r2
 8001656:	2b04      	cmp	r3, #4
 8001658:	d002      	beq.n	8001660 <HAL_RCC_GetSysClockFreq+0x30>
 800165a:	2b08      	cmp	r3, #8
 800165c:	d003      	beq.n	8001666 <HAL_RCC_GetSysClockFreq+0x36>
 800165e:	e02c      	b.n	80016ba <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001660:	4b1b      	ldr	r3, [pc, #108]	; (80016d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001662:	613b      	str	r3, [r7, #16]
      break;
 8001664:	e02c      	b.n	80016c0 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	0c9b      	lsrs	r3, r3, #18
 800166a:	220f      	movs	r2, #15
 800166c:	4013      	ands	r3, r2
 800166e:	4a19      	ldr	r2, [pc, #100]	; (80016d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001670:	5cd3      	ldrb	r3, [r2, r3]
 8001672:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001674:	4b15      	ldr	r3, [pc, #84]	; (80016cc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001678:	220f      	movs	r2, #15
 800167a:	4013      	ands	r3, r2
 800167c:	4a16      	ldr	r2, [pc, #88]	; (80016d8 <HAL_RCC_GetSysClockFreq+0xa8>)
 800167e:	5cd3      	ldrb	r3, [r2, r3]
 8001680:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001682:	68fa      	ldr	r2, [r7, #12]
 8001684:	2380      	movs	r3, #128	; 0x80
 8001686:	025b      	lsls	r3, r3, #9
 8001688:	4013      	ands	r3, r2
 800168a:	d009      	beq.n	80016a0 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800168c:	68b9      	ldr	r1, [r7, #8]
 800168e:	4810      	ldr	r0, [pc, #64]	; (80016d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001690:	f7fe fd4c 	bl	800012c <__udivsi3>
 8001694:	0003      	movs	r3, r0
 8001696:	001a      	movs	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4353      	muls	r3, r2
 800169c:	617b      	str	r3, [r7, #20]
 800169e:	e009      	b.n	80016b4 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80016a0:	6879      	ldr	r1, [r7, #4]
 80016a2:	000a      	movs	r2, r1
 80016a4:	0152      	lsls	r2, r2, #5
 80016a6:	1a52      	subs	r2, r2, r1
 80016a8:	0193      	lsls	r3, r2, #6
 80016aa:	1a9b      	subs	r3, r3, r2
 80016ac:	00db      	lsls	r3, r3, #3
 80016ae:	185b      	adds	r3, r3, r1
 80016b0:	021b      	lsls	r3, r3, #8
 80016b2:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	613b      	str	r3, [r7, #16]
      break;
 80016b8:	e002      	b.n	80016c0 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016ba:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80016bc:	613b      	str	r3, [r7, #16]
      break;
 80016be:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80016c0:	693b      	ldr	r3, [r7, #16]
}
 80016c2:	0018      	movs	r0, r3
 80016c4:	46bd      	mov	sp, r7
 80016c6:	b006      	add	sp, #24
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	46c0      	nop			; (mov r8, r8)
 80016cc:	40021000 	.word	0x40021000
 80016d0:	007a1200 	.word	0x007a1200
 80016d4:	08003768 	.word	0x08003768
 80016d8:	08003778 	.word	0x08003778

080016dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016e0:	4b02      	ldr	r3, [pc, #8]	; (80016ec <HAL_RCC_GetHCLKFreq+0x10>)
 80016e2:	681b      	ldr	r3, [r3, #0]
}
 80016e4:	0018      	movs	r0, r3
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	46c0      	nop			; (mov r8, r8)
 80016ec:	20000000 	.word	0x20000000

080016f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80016f4:	f7ff fff2 	bl	80016dc <HAL_RCC_GetHCLKFreq>
 80016f8:	0001      	movs	r1, r0
 80016fa:	4b06      	ldr	r3, [pc, #24]	; (8001714 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	0a1b      	lsrs	r3, r3, #8
 8001700:	2207      	movs	r2, #7
 8001702:	4013      	ands	r3, r2
 8001704:	4a04      	ldr	r2, [pc, #16]	; (8001718 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001706:	5cd3      	ldrb	r3, [r2, r3]
 8001708:	40d9      	lsrs	r1, r3
 800170a:	000b      	movs	r3, r1
}    
 800170c:	0018      	movs	r0, r3
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	46c0      	nop			; (mov r8, r8)
 8001714:	40021000 	.word	0x40021000
 8001718:	08003760 	.word	0x08003760

0800171c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e0a8      	b.n	8001880 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001732:	2b00      	cmp	r3, #0
 8001734:	d109      	bne.n	800174a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685a      	ldr	r2, [r3, #4]
 800173a:	2382      	movs	r3, #130	; 0x82
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	429a      	cmp	r2, r3
 8001740:	d009      	beq.n	8001756 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	61da      	str	r2, [r3, #28]
 8001748:	e005      	b.n	8001756 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	225d      	movs	r2, #93	; 0x5d
 8001760:	5c9b      	ldrb	r3, [r3, r2]
 8001762:	b2db      	uxtb	r3, r3
 8001764:	2b00      	cmp	r3, #0
 8001766:	d107      	bne.n	8001778 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	225c      	movs	r2, #92	; 0x5c
 800176c:	2100      	movs	r1, #0
 800176e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	0018      	movs	r0, r3
 8001774:	f7fe ff74 	bl	8000660 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	225d      	movs	r2, #93	; 0x5d
 800177c:	2102      	movs	r1, #2
 800177e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2140      	movs	r1, #64	; 0x40
 800178c:	438a      	bics	r2, r1
 800178e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	68da      	ldr	r2, [r3, #12]
 8001794:	23e0      	movs	r3, #224	; 0xe0
 8001796:	00db      	lsls	r3, r3, #3
 8001798:	429a      	cmp	r2, r3
 800179a:	d902      	bls.n	80017a2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800179c:	2300      	movs	r3, #0
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	e002      	b.n	80017a8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80017a2:	2380      	movs	r3, #128	; 0x80
 80017a4:	015b      	lsls	r3, r3, #5
 80017a6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	68da      	ldr	r2, [r3, #12]
 80017ac:	23f0      	movs	r3, #240	; 0xf0
 80017ae:	011b      	lsls	r3, r3, #4
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d008      	beq.n	80017c6 <HAL_SPI_Init+0xaa>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	68da      	ldr	r2, [r3, #12]
 80017b8:	23e0      	movs	r3, #224	; 0xe0
 80017ba:	00db      	lsls	r3, r3, #3
 80017bc:	429a      	cmp	r2, r3
 80017be:	d002      	beq.n	80017c6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685a      	ldr	r2, [r3, #4]
 80017ca:	2382      	movs	r3, #130	; 0x82
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	401a      	ands	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6899      	ldr	r1, [r3, #8]
 80017d4:	2384      	movs	r3, #132	; 0x84
 80017d6:	021b      	lsls	r3, r3, #8
 80017d8:	400b      	ands	r3, r1
 80017da:	431a      	orrs	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	691b      	ldr	r3, [r3, #16]
 80017e0:	2102      	movs	r1, #2
 80017e2:	400b      	ands	r3, r1
 80017e4:	431a      	orrs	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	695b      	ldr	r3, [r3, #20]
 80017ea:	2101      	movs	r1, #1
 80017ec:	400b      	ands	r3, r1
 80017ee:	431a      	orrs	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6999      	ldr	r1, [r3, #24]
 80017f4:	2380      	movs	r3, #128	; 0x80
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	400b      	ands	r3, r1
 80017fa:	431a      	orrs	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	69db      	ldr	r3, [r3, #28]
 8001800:	2138      	movs	r1, #56	; 0x38
 8001802:	400b      	ands	r3, r1
 8001804:	431a      	orrs	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a1b      	ldr	r3, [r3, #32]
 800180a:	2180      	movs	r1, #128	; 0x80
 800180c:	400b      	ands	r3, r1
 800180e:	431a      	orrs	r2, r3
 8001810:	0011      	movs	r1, r2
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001816:	2380      	movs	r3, #128	; 0x80
 8001818:	019b      	lsls	r3, r3, #6
 800181a:	401a      	ands	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	430a      	orrs	r2, r1
 8001822:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	0c1b      	lsrs	r3, r3, #16
 800182a:	2204      	movs	r2, #4
 800182c:	401a      	ands	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001832:	2110      	movs	r1, #16
 8001834:	400b      	ands	r3, r1
 8001836:	431a      	orrs	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800183c:	2108      	movs	r1, #8
 800183e:	400b      	ands	r3, r1
 8001840:	431a      	orrs	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	68d9      	ldr	r1, [r3, #12]
 8001846:	23f0      	movs	r3, #240	; 0xf0
 8001848:	011b      	lsls	r3, r3, #4
 800184a:	400b      	ands	r3, r1
 800184c:	431a      	orrs	r2, r3
 800184e:	0011      	movs	r1, r2
 8001850:	68fa      	ldr	r2, [r7, #12]
 8001852:	2380      	movs	r3, #128	; 0x80
 8001854:	015b      	lsls	r3, r3, #5
 8001856:	401a      	ands	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	430a      	orrs	r2, r1
 800185e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	69da      	ldr	r2, [r3, #28]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4907      	ldr	r1, [pc, #28]	; (8001888 <HAL_SPI_Init+0x16c>)
 800186c:	400a      	ands	r2, r1
 800186e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	225d      	movs	r2, #93	; 0x5d
 800187a:	2101      	movs	r1, #1
 800187c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800187e:	2300      	movs	r3, #0
}
 8001880:	0018      	movs	r0, r3
 8001882:	46bd      	mov	sp, r7
 8001884:	b004      	add	sp, #16
 8001886:	bd80      	pop	{r7, pc}
 8001888:	fffff7ff 	.word	0xfffff7ff

0800188c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800188c:	b590      	push	{r4, r7, lr}
 800188e:	b089      	sub	sp, #36	; 0x24
 8001890:	af02      	add	r7, sp, #8
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	603b      	str	r3, [r7, #0]
 8001898:	1dbb      	adds	r3, r7, #6
 800189a:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800189c:	2117      	movs	r1, #23
 800189e:	187b      	adds	r3, r7, r1
 80018a0:	2200      	movs	r2, #0
 80018a2:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	225d      	movs	r2, #93	; 0x5d
 80018a8:	5c9b      	ldrb	r3, [r3, r2]
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d003      	beq.n	80018b8 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 80018b0:	187b      	adds	r3, r7, r1
 80018b2:	2202      	movs	r2, #2
 80018b4:	701a      	strb	r2, [r3, #0]
    goto error;
 80018b6:	e12b      	b.n	8001b10 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	685a      	ldr	r2, [r3, #4]
 80018bc:	2382      	movs	r3, #130	; 0x82
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d113      	bne.n	80018ec <HAL_SPI_Receive+0x60>
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d10f      	bne.n	80018ec <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	225d      	movs	r2, #93	; 0x5d
 80018d0:	2104      	movs	r1, #4
 80018d2:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80018d4:	1dbb      	adds	r3, r7, #6
 80018d6:	881c      	ldrh	r4, [r3, #0]
 80018d8:	68ba      	ldr	r2, [r7, #8]
 80018da:	68b9      	ldr	r1, [r7, #8]
 80018dc:	68f8      	ldr	r0, [r7, #12]
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	9300      	str	r3, [sp, #0]
 80018e2:	0023      	movs	r3, r4
 80018e4:	f000 f924 	bl	8001b30 <HAL_SPI_TransmitReceive>
 80018e8:	0003      	movs	r3, r0
 80018ea:	e118      	b.n	8001b1e <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	225c      	movs	r2, #92	; 0x5c
 80018f0:	5c9b      	ldrb	r3, [r3, r2]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d101      	bne.n	80018fa <HAL_SPI_Receive+0x6e>
 80018f6:	2302      	movs	r3, #2
 80018f8:	e111      	b.n	8001b1e <HAL_SPI_Receive+0x292>
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	225c      	movs	r2, #92	; 0x5c
 80018fe:	2101      	movs	r1, #1
 8001900:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001902:	f7ff f83d 	bl	8000980 <HAL_GetTick>
 8001906:	0003      	movs	r3, r0
 8001908:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d003      	beq.n	8001918 <HAL_SPI_Receive+0x8c>
 8001910:	1dbb      	adds	r3, r7, #6
 8001912:	881b      	ldrh	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d104      	bne.n	8001922 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8001918:	2317      	movs	r3, #23
 800191a:	18fb      	adds	r3, r7, r3
 800191c:	2201      	movs	r2, #1
 800191e:	701a      	strb	r2, [r3, #0]
    goto error;
 8001920:	e0f6      	b.n	8001b10 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	225d      	movs	r2, #93	; 0x5d
 8001926:	2104      	movs	r1, #4
 8001928:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2200      	movs	r2, #0
 800192e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	68ba      	ldr	r2, [r7, #8]
 8001934:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	1dba      	adds	r2, r7, #6
 800193a:	2144      	movs	r1, #68	; 0x44
 800193c:	8812      	ldrh	r2, [r2, #0]
 800193e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	1dba      	adds	r2, r7, #6
 8001944:	2146      	movs	r1, #70	; 0x46
 8001946:	8812      	ldrh	r2, [r2, #0]
 8001948:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2200      	movs	r2, #0
 800194e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2200      	movs	r2, #0
 8001954:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2200      	movs	r2, #0
 800195a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2200      	movs	r2, #0
 8001960:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2200      	movs	r2, #0
 8001966:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	68da      	ldr	r2, [r3, #12]
 800196c:	23e0      	movs	r3, #224	; 0xe0
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	429a      	cmp	r2, r3
 8001972:	d908      	bls.n	8001986 <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	685a      	ldr	r2, [r3, #4]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	496a      	ldr	r1, [pc, #424]	; (8001b28 <HAL_SPI_Receive+0x29c>)
 8001980:	400a      	ands	r2, r1
 8001982:	605a      	str	r2, [r3, #4]
 8001984:	e008      	b.n	8001998 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	685a      	ldr	r2, [r3, #4]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2180      	movs	r1, #128	; 0x80
 8001992:	0149      	lsls	r1, r1, #5
 8001994:	430a      	orrs	r2, r1
 8001996:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	689a      	ldr	r2, [r3, #8]
 800199c:	2380      	movs	r3, #128	; 0x80
 800199e:	021b      	lsls	r3, r3, #8
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d10f      	bne.n	80019c4 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2140      	movs	r1, #64	; 0x40
 80019b0:	438a      	bics	r2, r1
 80019b2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	495b      	ldr	r1, [pc, #364]	; (8001b2c <HAL_SPI_Receive+0x2a0>)
 80019c0:	400a      	ands	r2, r1
 80019c2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2240      	movs	r2, #64	; 0x40
 80019cc:	4013      	ands	r3, r2
 80019ce:	2b40      	cmp	r3, #64	; 0x40
 80019d0:	d007      	beq.n	80019e2 <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2140      	movs	r1, #64	; 0x40
 80019de:	430a      	orrs	r2, r1
 80019e0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	68da      	ldr	r2, [r3, #12]
 80019e6:	23e0      	movs	r3, #224	; 0xe0
 80019e8:	00db      	lsls	r3, r3, #3
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d900      	bls.n	80019f0 <HAL_SPI_Receive+0x164>
 80019ee:	e071      	b.n	8001ad4 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80019f0:	e035      	b.n	8001a5e <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	2201      	movs	r2, #1
 80019fa:	4013      	ands	r3, r2
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d117      	bne.n	8001a30 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	330c      	adds	r3, #12
 8001a06:	001a      	movs	r2, r3
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0c:	7812      	ldrb	r2, [r2, #0]
 8001a0e:	b2d2      	uxtb	r2, r2
 8001a10:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	1c5a      	adds	r2, r3, #1
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2246      	movs	r2, #70	; 0x46
 8001a20:	5a9b      	ldrh	r3, [r3, r2]
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	3b01      	subs	r3, #1
 8001a26:	b299      	uxth	r1, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2246      	movs	r2, #70	; 0x46
 8001a2c:	5299      	strh	r1, [r3, r2]
 8001a2e:	e016      	b.n	8001a5e <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001a30:	f7fe ffa6 	bl	8000980 <HAL_GetTick>
 8001a34:	0002      	movs	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	683a      	ldr	r2, [r7, #0]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d802      	bhi.n	8001a46 <HAL_SPI_Receive+0x1ba>
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	3301      	adds	r3, #1
 8001a44:	d102      	bne.n	8001a4c <HAL_SPI_Receive+0x1c0>
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d108      	bne.n	8001a5e <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8001a4c:	2317      	movs	r3, #23
 8001a4e:	18fb      	adds	r3, r7, r3
 8001a50:	2203      	movs	r2, #3
 8001a52:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	225d      	movs	r2, #93	; 0x5d
 8001a58:	2101      	movs	r1, #1
 8001a5a:	5499      	strb	r1, [r3, r2]
          goto error;
 8001a5c:	e058      	b.n	8001b10 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2246      	movs	r2, #70	; 0x46
 8001a62:	5a9b      	ldrh	r3, [r3, r2]
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d1c3      	bne.n	80019f2 <HAL_SPI_Receive+0x166>
 8001a6a:	e039      	b.n	8001ae0 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	2201      	movs	r2, #1
 8001a74:	4013      	ands	r3, r2
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d115      	bne.n	8001aa6 <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	68da      	ldr	r2, [r3, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a84:	b292      	uxth	r2, r2
 8001a86:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8c:	1c9a      	adds	r2, r3, #2
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2246      	movs	r2, #70	; 0x46
 8001a96:	5a9b      	ldrh	r3, [r3, r2]
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	b299      	uxth	r1, r3
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2246      	movs	r2, #70	; 0x46
 8001aa2:	5299      	strh	r1, [r3, r2]
 8001aa4:	e016      	b.n	8001ad4 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001aa6:	f7fe ff6b 	bl	8000980 <HAL_GetTick>
 8001aaa:	0002      	movs	r2, r0
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d802      	bhi.n	8001abc <HAL_SPI_Receive+0x230>
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	d102      	bne.n	8001ac2 <HAL_SPI_Receive+0x236>
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d108      	bne.n	8001ad4 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8001ac2:	2317      	movs	r3, #23
 8001ac4:	18fb      	adds	r3, r7, r3
 8001ac6:	2203      	movs	r2, #3
 8001ac8:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	225d      	movs	r2, #93	; 0x5d
 8001ace:	2101      	movs	r1, #1
 8001ad0:	5499      	strb	r1, [r3, r2]
          goto error;
 8001ad2:	e01d      	b.n	8001b10 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2246      	movs	r2, #70	; 0x46
 8001ad8:	5a9b      	ldrh	r3, [r3, r2]
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d1c5      	bne.n	8001a6c <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	6839      	ldr	r1, [r7, #0]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	0018      	movs	r0, r3
 8001ae8:	f000 fb34 	bl	8002154 <SPI_EndRxTransaction>
 8001aec:	1e03      	subs	r3, r0, #0
 8001aee:	d002      	beq.n	8001af6 <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2220      	movs	r2, #32
 8001af4:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d004      	beq.n	8001b08 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 8001afe:	2317      	movs	r3, #23
 8001b00:	18fb      	adds	r3, r7, r3
 8001b02:	2201      	movs	r2, #1
 8001b04:	701a      	strb	r2, [r3, #0]
 8001b06:	e003      	b.n	8001b10 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	225d      	movs	r2, #93	; 0x5d
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	225c      	movs	r2, #92	; 0x5c
 8001b14:	2100      	movs	r1, #0
 8001b16:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001b18:	2317      	movs	r3, #23
 8001b1a:	18fb      	adds	r3, r7, r3
 8001b1c:	781b      	ldrb	r3, [r3, #0]
}
 8001b1e:	0018      	movs	r0, r3
 8001b20:	46bd      	mov	sp, r7
 8001b22:	b007      	add	sp, #28
 8001b24:	bd90      	pop	{r4, r7, pc}
 8001b26:	46c0      	nop			; (mov r8, r8)
 8001b28:	ffffefff 	.word	0xffffefff
 8001b2c:	ffffbfff 	.word	0xffffbfff

08001b30 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b08a      	sub	sp, #40	; 0x28
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
 8001b3c:	001a      	movs	r2, r3
 8001b3e:	1cbb      	adds	r3, r7, #2
 8001b40:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001b42:	2301      	movs	r3, #1
 8001b44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001b46:	2323      	movs	r3, #35	; 0x23
 8001b48:	18fb      	adds	r3, r7, r3
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	225c      	movs	r2, #92	; 0x5c
 8001b52:	5c9b      	ldrb	r3, [r3, r2]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d101      	bne.n	8001b5c <HAL_SPI_TransmitReceive+0x2c>
 8001b58:	2302      	movs	r3, #2
 8001b5a:	e1c4      	b.n	8001ee6 <HAL_SPI_TransmitReceive+0x3b6>
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	225c      	movs	r2, #92	; 0x5c
 8001b60:	2101      	movs	r1, #1
 8001b62:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001b64:	f7fe ff0c 	bl	8000980 <HAL_GetTick>
 8001b68:	0003      	movs	r3, r0
 8001b6a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001b6c:	201b      	movs	r0, #27
 8001b6e:	183b      	adds	r3, r7, r0
 8001b70:	68fa      	ldr	r2, [r7, #12]
 8001b72:	215d      	movs	r1, #93	; 0x5d
 8001b74:	5c52      	ldrb	r2, [r2, r1]
 8001b76:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8001b7e:	2312      	movs	r3, #18
 8001b80:	18fb      	adds	r3, r7, r3
 8001b82:	1cba      	adds	r2, r7, #2
 8001b84:	8812      	ldrh	r2, [r2, #0]
 8001b86:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001b88:	183b      	adds	r3, r7, r0
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d011      	beq.n	8001bb4 <HAL_SPI_TransmitReceive+0x84>
 8001b90:	697a      	ldr	r2, [r7, #20]
 8001b92:	2382      	movs	r3, #130	; 0x82
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d107      	bne.n	8001baa <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d103      	bne.n	8001baa <HAL_SPI_TransmitReceive+0x7a>
 8001ba2:	183b      	adds	r3, r7, r0
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	2b04      	cmp	r3, #4
 8001ba8:	d004      	beq.n	8001bb4 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8001baa:	2323      	movs	r3, #35	; 0x23
 8001bac:	18fb      	adds	r3, r7, r3
 8001bae:	2202      	movs	r2, #2
 8001bb0:	701a      	strb	r2, [r3, #0]
    goto error;
 8001bb2:	e191      	b.n	8001ed8 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d006      	beq.n	8001bc8 <HAL_SPI_TransmitReceive+0x98>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d003      	beq.n	8001bc8 <HAL_SPI_TransmitReceive+0x98>
 8001bc0:	1cbb      	adds	r3, r7, #2
 8001bc2:	881b      	ldrh	r3, [r3, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d104      	bne.n	8001bd2 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8001bc8:	2323      	movs	r3, #35	; 0x23
 8001bca:	18fb      	adds	r3, r7, r3
 8001bcc:	2201      	movs	r2, #1
 8001bce:	701a      	strb	r2, [r3, #0]
    goto error;
 8001bd0:	e182      	b.n	8001ed8 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	225d      	movs	r2, #93	; 0x5d
 8001bd6:	5c9b      	ldrb	r3, [r3, r2]
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b04      	cmp	r3, #4
 8001bdc:	d003      	beq.n	8001be6 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	225d      	movs	r2, #93	; 0x5d
 8001be2:	2105      	movs	r1, #5
 8001be4:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2200      	movs	r2, #0
 8001bea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	1cba      	adds	r2, r7, #2
 8001bf6:	2146      	movs	r1, #70	; 0x46
 8001bf8:	8812      	ldrh	r2, [r2, #0]
 8001bfa:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	1cba      	adds	r2, r7, #2
 8001c00:	2144      	movs	r1, #68	; 0x44
 8001c02:	8812      	ldrh	r2, [r2, #0]
 8001c04:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	68ba      	ldr	r2, [r7, #8]
 8001c0a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	1cba      	adds	r2, r7, #2
 8001c10:	8812      	ldrh	r2, [r2, #0]
 8001c12:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	1cba      	adds	r2, r7, #2
 8001c18:	8812      	ldrh	r2, [r2, #0]
 8001c1a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2200      	movs	r2, #0
 8001c26:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	68da      	ldr	r2, [r3, #12]
 8001c2c:	23e0      	movs	r3, #224	; 0xe0
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d908      	bls.n	8001c46 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	685a      	ldr	r2, [r3, #4]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	49ac      	ldr	r1, [pc, #688]	; (8001ef0 <HAL_SPI_TransmitReceive+0x3c0>)
 8001c40:	400a      	ands	r2, r1
 8001c42:	605a      	str	r2, [r3, #4]
 8001c44:	e008      	b.n	8001c58 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	685a      	ldr	r2, [r3, #4]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2180      	movs	r1, #128	; 0x80
 8001c52:	0149      	lsls	r1, r1, #5
 8001c54:	430a      	orrs	r2, r1
 8001c56:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2240      	movs	r2, #64	; 0x40
 8001c60:	4013      	ands	r3, r2
 8001c62:	2b40      	cmp	r3, #64	; 0x40
 8001c64:	d007      	beq.n	8001c76 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2140      	movs	r1, #64	; 0x40
 8001c72:	430a      	orrs	r2, r1
 8001c74:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	68da      	ldr	r2, [r3, #12]
 8001c7a:	23e0      	movs	r3, #224	; 0xe0
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d800      	bhi.n	8001c84 <HAL_SPI_TransmitReceive+0x154>
 8001c82:	e083      	b.n	8001d8c <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d005      	beq.n	8001c98 <HAL_SPI_TransmitReceive+0x168>
 8001c8c:	2312      	movs	r3, #18
 8001c8e:	18fb      	adds	r3, r7, r3
 8001c90:	881b      	ldrh	r3, [r3, #0]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d000      	beq.n	8001c98 <HAL_SPI_TransmitReceive+0x168>
 8001c96:	e06d      	b.n	8001d74 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c9c:	881a      	ldrh	r2, [r3, #0]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ca8:	1c9a      	adds	r2, r3, #2
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001cbc:	e05a      	b.n	8001d74 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	2202      	movs	r2, #2
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d11b      	bne.n	8001d04 <HAL_SPI_TransmitReceive+0x1d4>
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d016      	beq.n	8001d04 <HAL_SPI_TransmitReceive+0x1d4>
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d113      	bne.n	8001d04 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ce0:	881a      	ldrh	r2, [r3, #0]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cec:	1c9a      	adds	r2, r3, #2
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	3b01      	subs	r3, #1
 8001cfa:	b29a      	uxth	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001d00:	2300      	movs	r3, #0
 8001d02:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d11c      	bne.n	8001d4c <HAL_SPI_TransmitReceive+0x21c>
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2246      	movs	r2, #70	; 0x46
 8001d16:	5a9b      	ldrh	r3, [r3, r2]
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d016      	beq.n	8001d4c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	68da      	ldr	r2, [r3, #12]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d28:	b292      	uxth	r2, r2
 8001d2a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d30:	1c9a      	adds	r2, r3, #2
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2246      	movs	r2, #70	; 0x46
 8001d3a:	5a9b      	ldrh	r3, [r3, r2]
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	b299      	uxth	r1, r3
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2246      	movs	r2, #70	; 0x46
 8001d46:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001d4c:	f7fe fe18 	bl	8000980 <HAL_GetTick>
 8001d50:	0002      	movs	r2, r0
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d80b      	bhi.n	8001d74 <HAL_SPI_TransmitReceive+0x244>
 8001d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d5e:	3301      	adds	r3, #1
 8001d60:	d008      	beq.n	8001d74 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8001d62:	2323      	movs	r3, #35	; 0x23
 8001d64:	18fb      	adds	r3, r7, r3
 8001d66:	2203      	movs	r2, #3
 8001d68:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	225d      	movs	r2, #93	; 0x5d
 8001d6e:	2101      	movs	r1, #1
 8001d70:	5499      	strb	r1, [r3, r2]
        goto error;
 8001d72:	e0b1      	b.n	8001ed8 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d19f      	bne.n	8001cbe <HAL_SPI_TransmitReceive+0x18e>
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2246      	movs	r2, #70	; 0x46
 8001d82:	5a9b      	ldrh	r3, [r3, r2]
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d199      	bne.n	8001cbe <HAL_SPI_TransmitReceive+0x18e>
 8001d8a:	e089      	b.n	8001ea0 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d005      	beq.n	8001da0 <HAL_SPI_TransmitReceive+0x270>
 8001d94:	2312      	movs	r3, #18
 8001d96:	18fb      	adds	r3, r7, r3
 8001d98:	881b      	ldrh	r3, [r3, #0]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d000      	beq.n	8001da0 <HAL_SPI_TransmitReceive+0x270>
 8001d9e:	e074      	b.n	8001e8a <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	330c      	adds	r3, #12
 8001daa:	7812      	ldrb	r2, [r2, #0]
 8001dac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001db2:	1c5a      	adds	r2, r3, #1
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	b29a      	uxth	r2, r3
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001dc6:	e060      	b.n	8001e8a <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	2202      	movs	r2, #2
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d11c      	bne.n	8001e10 <HAL_SPI_TransmitReceive+0x2e0>
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d017      	beq.n	8001e10 <HAL_SPI_TransmitReceive+0x2e0>
 8001de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d114      	bne.n	8001e10 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	330c      	adds	r3, #12
 8001df0:	7812      	ldrb	r2, [r2, #0]
 8001df2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001df8:	1c5a      	adds	r2, r3, #1
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	3b01      	subs	r3, #1
 8001e06:	b29a      	uxth	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	2201      	movs	r2, #1
 8001e18:	4013      	ands	r3, r2
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d11e      	bne.n	8001e5c <HAL_SPI_TransmitReceive+0x32c>
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2246      	movs	r2, #70	; 0x46
 8001e22:	5a9b      	ldrh	r3, [r3, r2]
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d018      	beq.n	8001e5c <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	330c      	adds	r3, #12
 8001e30:	001a      	movs	r2, r3
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	7812      	ldrb	r2, [r2, #0]
 8001e38:	b2d2      	uxtb	r2, r2
 8001e3a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e40:	1c5a      	adds	r2, r3, #1
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2246      	movs	r2, #70	; 0x46
 8001e4a:	5a9b      	ldrh	r3, [r3, r2]
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	b299      	uxth	r1, r3
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2246      	movs	r2, #70	; 0x46
 8001e56:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001e5c:	f7fe fd90 	bl	8000980 <HAL_GetTick>
 8001e60:	0002      	movs	r2, r0
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d802      	bhi.n	8001e72 <HAL_SPI_TransmitReceive+0x342>
 8001e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e6e:	3301      	adds	r3, #1
 8001e70:	d102      	bne.n	8001e78 <HAL_SPI_TransmitReceive+0x348>
 8001e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d108      	bne.n	8001e8a <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8001e78:	2323      	movs	r3, #35	; 0x23
 8001e7a:	18fb      	adds	r3, r7, r3
 8001e7c:	2203      	movs	r2, #3
 8001e7e:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	225d      	movs	r2, #93	; 0x5d
 8001e84:	2101      	movs	r1, #1
 8001e86:	5499      	strb	r1, [r3, r2]
        goto error;
 8001e88:	e026      	b.n	8001ed8 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d199      	bne.n	8001dc8 <HAL_SPI_TransmitReceive+0x298>
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2246      	movs	r2, #70	; 0x46
 8001e98:	5a9b      	ldrh	r3, [r3, r2]
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d193      	bne.n	8001dc8 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001ea0:	69fa      	ldr	r2, [r7, #28]
 8001ea2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	0018      	movs	r0, r3
 8001ea8:	f000 f9b2 	bl	8002210 <SPI_EndRxTxTransaction>
 8001eac:	1e03      	subs	r3, r0, #0
 8001eae:	d006      	beq.n	8001ebe <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8001eb0:	2323      	movs	r3, #35	; 0x23
 8001eb2:	18fb      	adds	r3, r7, r3
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2220      	movs	r2, #32
 8001ebc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d004      	beq.n	8001ed0 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8001ec6:	2323      	movs	r3, #35	; 0x23
 8001ec8:	18fb      	adds	r3, r7, r3
 8001eca:	2201      	movs	r2, #1
 8001ecc:	701a      	strb	r2, [r3, #0]
 8001ece:	e003      	b.n	8001ed8 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	225d      	movs	r2, #93	; 0x5d
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	225c      	movs	r2, #92	; 0x5c
 8001edc:	2100      	movs	r1, #0
 8001ede:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001ee0:	2323      	movs	r3, #35	; 0x23
 8001ee2:	18fb      	adds	r3, r7, r3
 8001ee4:	781b      	ldrb	r3, [r3, #0]
}
 8001ee6:	0018      	movs	r0, r3
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	b00a      	add	sp, #40	; 0x28
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	46c0      	nop			; (mov r8, r8)
 8001ef0:	ffffefff 	.word	0xffffefff

08001ef4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b088      	sub	sp, #32
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	603b      	str	r3, [r7, #0]
 8001f00:	1dfb      	adds	r3, r7, #7
 8001f02:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001f04:	f7fe fd3c 	bl	8000980 <HAL_GetTick>
 8001f08:	0002      	movs	r2, r0
 8001f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f0c:	1a9b      	subs	r3, r3, r2
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	18d3      	adds	r3, r2, r3
 8001f12:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001f14:	f7fe fd34 	bl	8000980 <HAL_GetTick>
 8001f18:	0003      	movs	r3, r0
 8001f1a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001f1c:	4b3a      	ldr	r3, [pc, #232]	; (8002008 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	015b      	lsls	r3, r3, #5
 8001f22:	0d1b      	lsrs	r3, r3, #20
 8001f24:	69fa      	ldr	r2, [r7, #28]
 8001f26:	4353      	muls	r3, r2
 8001f28:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f2a:	e058      	b.n	8001fde <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	d055      	beq.n	8001fde <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001f32:	f7fe fd25 	bl	8000980 <HAL_GetTick>
 8001f36:	0002      	movs	r2, r0
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	69fa      	ldr	r2, [r7, #28]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d902      	bls.n	8001f48 <SPI_WaitFlagStateUntilTimeout+0x54>
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d142      	bne.n	8001fce <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	685a      	ldr	r2, [r3, #4]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	21e0      	movs	r1, #224	; 0xe0
 8001f54:	438a      	bics	r2, r1
 8001f56:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	685a      	ldr	r2, [r3, #4]
 8001f5c:	2382      	movs	r3, #130	; 0x82
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d113      	bne.n	8001f8c <SPI_WaitFlagStateUntilTimeout+0x98>
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	689a      	ldr	r2, [r3, #8]
 8001f68:	2380      	movs	r3, #128	; 0x80
 8001f6a:	021b      	lsls	r3, r3, #8
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d005      	beq.n	8001f7c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	689a      	ldr	r2, [r3, #8]
 8001f74:	2380      	movs	r3, #128	; 0x80
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d107      	bne.n	8001f8c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2140      	movs	r1, #64	; 0x40
 8001f88:	438a      	bics	r2, r1
 8001f8a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f90:	2380      	movs	r3, #128	; 0x80
 8001f92:	019b      	lsls	r3, r3, #6
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d110      	bne.n	8001fba <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	491a      	ldr	r1, [pc, #104]	; (800200c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8001fa4:	400a      	ands	r2, r1
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2180      	movs	r1, #128	; 0x80
 8001fb4:	0189      	lsls	r1, r1, #6
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	225d      	movs	r2, #93	; 0x5d
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	225c      	movs	r2, #92	; 0x5c
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e017      	b.n	8001ffe <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d101      	bne.n	8001fd8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	68ba      	ldr	r2, [r7, #8]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	68ba      	ldr	r2, [r7, #8]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	425a      	negs	r2, r3
 8001fee:	4153      	adcs	r3, r2
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	001a      	movs	r2, r3
 8001ff4:	1dfb      	adds	r3, r7, #7
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d197      	bne.n	8001f2c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	0018      	movs	r0, r3
 8002000:	46bd      	mov	sp, r7
 8002002:	b008      	add	sp, #32
 8002004:	bd80      	pop	{r7, pc}
 8002006:	46c0      	nop			; (mov r8, r8)
 8002008:	20000000 	.word	0x20000000
 800200c:	ffffdfff 	.word	0xffffdfff

08002010 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b08a      	sub	sp, #40	; 0x28
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
 800201c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800201e:	2317      	movs	r3, #23
 8002020:	18fb      	adds	r3, r7, r3
 8002022:	2200      	movs	r2, #0
 8002024:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002026:	f7fe fcab 	bl	8000980 <HAL_GetTick>
 800202a:	0002      	movs	r2, r0
 800202c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800202e:	1a9b      	subs	r3, r3, r2
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	18d3      	adds	r3, r2, r3
 8002034:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002036:	f7fe fca3 	bl	8000980 <HAL_GetTick>
 800203a:	0003      	movs	r3, r0
 800203c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	330c      	adds	r3, #12
 8002044:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002046:	4b41      	ldr	r3, [pc, #260]	; (800214c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	0013      	movs	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	189b      	adds	r3, r3, r2
 8002050:	00da      	lsls	r2, r3, #3
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	0d1b      	lsrs	r3, r3, #20
 8002056:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002058:	4353      	muls	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800205c:	e068      	b.n	8002130 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800205e:	68ba      	ldr	r2, [r7, #8]
 8002060:	23c0      	movs	r3, #192	; 0xc0
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	429a      	cmp	r2, r3
 8002066:	d10a      	bne.n	800207e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d107      	bne.n	800207e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	b2da      	uxtb	r2, r3
 8002074:	2117      	movs	r1, #23
 8002076:	187b      	adds	r3, r7, r1
 8002078:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800207a:	187b      	adds	r3, r7, r1
 800207c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	3301      	adds	r3, #1
 8002082:	d055      	beq.n	8002130 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002084:	f7fe fc7c 	bl	8000980 <HAL_GetTick>
 8002088:	0002      	movs	r2, r0
 800208a:	6a3b      	ldr	r3, [r7, #32]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002090:	429a      	cmp	r2, r3
 8002092:	d902      	bls.n	800209a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002096:	2b00      	cmp	r3, #0
 8002098:	d142      	bne.n	8002120 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	685a      	ldr	r2, [r3, #4]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	21e0      	movs	r1, #224	; 0xe0
 80020a6:	438a      	bics	r2, r1
 80020a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	685a      	ldr	r2, [r3, #4]
 80020ae:	2382      	movs	r3, #130	; 0x82
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d113      	bne.n	80020de <SPI_WaitFifoStateUntilTimeout+0xce>
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	689a      	ldr	r2, [r3, #8]
 80020ba:	2380      	movs	r3, #128	; 0x80
 80020bc:	021b      	lsls	r3, r3, #8
 80020be:	429a      	cmp	r2, r3
 80020c0:	d005      	beq.n	80020ce <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	689a      	ldr	r2, [r3, #8]
 80020c6:	2380      	movs	r3, #128	; 0x80
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d107      	bne.n	80020de <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2140      	movs	r1, #64	; 0x40
 80020da:	438a      	bics	r2, r1
 80020dc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020e2:	2380      	movs	r3, #128	; 0x80
 80020e4:	019b      	lsls	r3, r3, #6
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d110      	bne.n	800210c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4916      	ldr	r1, [pc, #88]	; (8002150 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80020f6:	400a      	ands	r2, r1
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2180      	movs	r1, #128	; 0x80
 8002106:	0189      	lsls	r1, r1, #6
 8002108:	430a      	orrs	r2, r1
 800210a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	225d      	movs	r2, #93	; 0x5d
 8002110:	2101      	movs	r1, #1
 8002112:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	225c      	movs	r2, #92	; 0x5c
 8002118:	2100      	movs	r1, #0
 800211a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e010      	b.n	8002142 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8002126:	2300      	movs	r3, #0
 8002128:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	3b01      	subs	r3, #1
 800212e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	68ba      	ldr	r2, [r7, #8]
 8002138:	4013      	ands	r3, r2
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	429a      	cmp	r2, r3
 800213e:	d18e      	bne.n	800205e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	0018      	movs	r0, r3
 8002144:	46bd      	mov	sp, r7
 8002146:	b00a      	add	sp, #40	; 0x28
 8002148:	bd80      	pop	{r7, pc}
 800214a:	46c0      	nop			; (mov r8, r8)
 800214c:	20000000 	.word	0x20000000
 8002150:	ffffdfff 	.word	0xffffdfff

08002154 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af02      	add	r7, sp, #8
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	685a      	ldr	r2, [r3, #4]
 8002164:	2382      	movs	r3, #130	; 0x82
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	429a      	cmp	r2, r3
 800216a:	d113      	bne.n	8002194 <SPI_EndRxTransaction+0x40>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	2380      	movs	r3, #128	; 0x80
 8002172:	021b      	lsls	r3, r3, #8
 8002174:	429a      	cmp	r2, r3
 8002176:	d005      	beq.n	8002184 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	689a      	ldr	r2, [r3, #8]
 800217c:	2380      	movs	r3, #128	; 0x80
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	429a      	cmp	r2, r3
 8002182:	d107      	bne.n	8002194 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2140      	movs	r1, #64	; 0x40
 8002190:	438a      	bics	r2, r1
 8002192:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002194:	68ba      	ldr	r2, [r7, #8]
 8002196:	68f8      	ldr	r0, [r7, #12]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	9300      	str	r3, [sp, #0]
 800219c:	0013      	movs	r3, r2
 800219e:	2200      	movs	r2, #0
 80021a0:	2180      	movs	r1, #128	; 0x80
 80021a2:	f7ff fea7 	bl	8001ef4 <SPI_WaitFlagStateUntilTimeout>
 80021a6:	1e03      	subs	r3, r0, #0
 80021a8:	d007      	beq.n	80021ba <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021ae:	2220      	movs	r2, #32
 80021b0:	431a      	orrs	r2, r3
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e026      	b.n	8002208 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	2382      	movs	r3, #130	; 0x82
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d11f      	bne.n	8002206 <SPI_EndRxTransaction+0xb2>
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	689a      	ldr	r2, [r3, #8]
 80021ca:	2380      	movs	r3, #128	; 0x80
 80021cc:	021b      	lsls	r3, r3, #8
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d005      	beq.n	80021de <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	689a      	ldr	r2, [r3, #8]
 80021d6:	2380      	movs	r3, #128	; 0x80
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	429a      	cmp	r2, r3
 80021dc:	d113      	bne.n	8002206 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	23c0      	movs	r3, #192	; 0xc0
 80021e2:	00d9      	lsls	r1, r3, #3
 80021e4:	68f8      	ldr	r0, [r7, #12]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	9300      	str	r3, [sp, #0]
 80021ea:	0013      	movs	r3, r2
 80021ec:	2200      	movs	r2, #0
 80021ee:	f7ff ff0f 	bl	8002010 <SPI_WaitFifoStateUntilTimeout>
 80021f2:	1e03      	subs	r3, r0, #0
 80021f4:	d007      	beq.n	8002206 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021fa:	2220      	movs	r2, #32
 80021fc:	431a      	orrs	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e000      	b.n	8002208 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8002206:	2300      	movs	r3, #0
}
 8002208:	0018      	movs	r0, r3
 800220a:	46bd      	mov	sp, r7
 800220c:	b004      	add	sp, #16
 800220e:	bd80      	pop	{r7, pc}

08002210 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af02      	add	r7, sp, #8
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800221c:	68ba      	ldr	r2, [r7, #8]
 800221e:	23c0      	movs	r3, #192	; 0xc0
 8002220:	0159      	lsls	r1, r3, #5
 8002222:	68f8      	ldr	r0, [r7, #12]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	9300      	str	r3, [sp, #0]
 8002228:	0013      	movs	r3, r2
 800222a:	2200      	movs	r2, #0
 800222c:	f7ff fef0 	bl	8002010 <SPI_WaitFifoStateUntilTimeout>
 8002230:	1e03      	subs	r3, r0, #0
 8002232:	d007      	beq.n	8002244 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002238:	2220      	movs	r2, #32
 800223a:	431a      	orrs	r2, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e027      	b.n	8002294 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002244:	68ba      	ldr	r2, [r7, #8]
 8002246:	68f8      	ldr	r0, [r7, #12]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	9300      	str	r3, [sp, #0]
 800224c:	0013      	movs	r3, r2
 800224e:	2200      	movs	r2, #0
 8002250:	2180      	movs	r1, #128	; 0x80
 8002252:	f7ff fe4f 	bl	8001ef4 <SPI_WaitFlagStateUntilTimeout>
 8002256:	1e03      	subs	r3, r0, #0
 8002258:	d007      	beq.n	800226a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800225e:	2220      	movs	r2, #32
 8002260:	431a      	orrs	r2, r3
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e014      	b.n	8002294 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	23c0      	movs	r3, #192	; 0xc0
 800226e:	00d9      	lsls	r1, r3, #3
 8002270:	68f8      	ldr	r0, [r7, #12]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	9300      	str	r3, [sp, #0]
 8002276:	0013      	movs	r3, r2
 8002278:	2200      	movs	r2, #0
 800227a:	f7ff fec9 	bl	8002010 <SPI_WaitFifoStateUntilTimeout>
 800227e:	1e03      	subs	r3, r0, #0
 8002280:	d007      	beq.n	8002292 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002286:	2220      	movs	r2, #32
 8002288:	431a      	orrs	r2, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e000      	b.n	8002294 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	0018      	movs	r0, r3
 8002296:	46bd      	mov	sp, r7
 8002298:	b004      	add	sp, #16
 800229a:	bd80      	pop	{r7, pc}

0800229c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d101      	bne.n	80022b0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e042      	b.n	8002336 <HAL_TIM_OnePulse_Init+0x9a>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	223d      	movs	r2, #61	; 0x3d
 80022b4:	5c9b      	ldrb	r3, [r3, r2]
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d107      	bne.n	80022cc <HAL_TIM_OnePulse_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	223c      	movs	r2, #60	; 0x3c
 80022c0:	2100      	movs	r1, #0
 80022c2:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	0018      	movs	r0, r3
 80022c8:	f7fe fa16 	bl	80006f8 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	223d      	movs	r2, #61	; 0x3d
 80022d0:	2102      	movs	r1, #2
 80022d2:	5499      	strb	r1, [r3, r2]

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	3304      	adds	r3, #4
 80022dc:	0019      	movs	r1, r3
 80022de:	0010      	movs	r0, r2
 80022e0:	f000 f82e 	bl	8002340 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2108      	movs	r1, #8
 80022f0:	438a      	bics	r2, r1
 80022f2:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6819      	ldr	r1, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	683a      	ldr	r2, [r7, #0]
 8002300:	430a      	orrs	r2, r1
 8002302:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2246      	movs	r2, #70	; 0x46
 8002308:	2101      	movs	r1, #1
 800230a:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	223e      	movs	r2, #62	; 0x3e
 8002310:	2101      	movs	r1, #1
 8002312:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	223f      	movs	r2, #63	; 0x3f
 8002318:	2101      	movs	r1, #1
 800231a:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2242      	movs	r2, #66	; 0x42
 8002320:	2101      	movs	r1, #1
 8002322:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2243      	movs	r2, #67	; 0x43
 8002328:	2101      	movs	r1, #1
 800232a:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	223d      	movs	r2, #61	; 0x3d
 8002330:	2101      	movs	r1, #1
 8002332:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	0018      	movs	r0, r3
 8002338:	46bd      	mov	sp, r7
 800233a:	b002      	add	sp, #8
 800233c:	bd80      	pop	{r7, pc}
	...

08002340 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a34      	ldr	r2, [pc, #208]	; (8002424 <TIM_Base_SetConfig+0xe4>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d008      	beq.n	800236a <TIM_Base_SetConfig+0x2a>
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	2380      	movs	r3, #128	; 0x80
 800235c:	05db      	lsls	r3, r3, #23
 800235e:	429a      	cmp	r2, r3
 8002360:	d003      	beq.n	800236a <TIM_Base_SetConfig+0x2a>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a30      	ldr	r2, [pc, #192]	; (8002428 <TIM_Base_SetConfig+0xe8>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d108      	bne.n	800237c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2270      	movs	r2, #112	; 0x70
 800236e:	4393      	bics	r3, r2
 8002370:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	4313      	orrs	r3, r2
 800237a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4a29      	ldr	r2, [pc, #164]	; (8002424 <TIM_Base_SetConfig+0xe4>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d018      	beq.n	80023b6 <TIM_Base_SetConfig+0x76>
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	2380      	movs	r3, #128	; 0x80
 8002388:	05db      	lsls	r3, r3, #23
 800238a:	429a      	cmp	r2, r3
 800238c:	d013      	beq.n	80023b6 <TIM_Base_SetConfig+0x76>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a25      	ldr	r2, [pc, #148]	; (8002428 <TIM_Base_SetConfig+0xe8>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d00f      	beq.n	80023b6 <TIM_Base_SetConfig+0x76>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a24      	ldr	r2, [pc, #144]	; (800242c <TIM_Base_SetConfig+0xec>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d00b      	beq.n	80023b6 <TIM_Base_SetConfig+0x76>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a23      	ldr	r2, [pc, #140]	; (8002430 <TIM_Base_SetConfig+0xf0>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d007      	beq.n	80023b6 <TIM_Base_SetConfig+0x76>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a22      	ldr	r2, [pc, #136]	; (8002434 <TIM_Base_SetConfig+0xf4>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d003      	beq.n	80023b6 <TIM_Base_SetConfig+0x76>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a21      	ldr	r2, [pc, #132]	; (8002438 <TIM_Base_SetConfig+0xf8>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d108      	bne.n	80023c8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	4a20      	ldr	r2, [pc, #128]	; (800243c <TIM_Base_SetConfig+0xfc>)
 80023ba:	4013      	ands	r3, r2
 80023bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2280      	movs	r2, #128	; 0x80
 80023cc:	4393      	bics	r3, r2
 80023ce:	001a      	movs	r2, r3
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	695b      	ldr	r3, [r3, #20]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	689a      	ldr	r2, [r3, #8]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a0c      	ldr	r2, [pc, #48]	; (8002424 <TIM_Base_SetConfig+0xe4>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d00b      	beq.n	800240e <TIM_Base_SetConfig+0xce>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a0d      	ldr	r2, [pc, #52]	; (8002430 <TIM_Base_SetConfig+0xf0>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d007      	beq.n	800240e <TIM_Base_SetConfig+0xce>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a0c      	ldr	r2, [pc, #48]	; (8002434 <TIM_Base_SetConfig+0xf4>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d003      	beq.n	800240e <TIM_Base_SetConfig+0xce>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a0b      	ldr	r2, [pc, #44]	; (8002438 <TIM_Base_SetConfig+0xf8>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d103      	bne.n	8002416 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	691a      	ldr	r2, [r3, #16]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2201      	movs	r2, #1
 800241a:	615a      	str	r2, [r3, #20]
}
 800241c:	46c0      	nop			; (mov r8, r8)
 800241e:	46bd      	mov	sp, r7
 8002420:	b004      	add	sp, #16
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40012c00 	.word	0x40012c00
 8002428:	40000400 	.word	0x40000400
 800242c:	40002000 	.word	0x40002000
 8002430:	40014000 	.word	0x40014000
 8002434:	40014400 	.word	0x40014400
 8002438:	40014800 	.word	0x40014800
 800243c:	fffffcff 	.word	0xfffffcff

08002440 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	223c      	movs	r2, #60	; 0x3c
 800244e:	5c9b      	ldrb	r3, [r3, r2]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d101      	bne.n	8002458 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002454:	2302      	movs	r3, #2
 8002456:	e047      	b.n	80024e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	223c      	movs	r2, #60	; 0x3c
 800245c:	2101      	movs	r1, #1
 800245e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	223d      	movs	r2, #61	; 0x3d
 8002464:	2102      	movs	r1, #2
 8002466:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2270      	movs	r2, #112	; 0x70
 800247c:	4393      	bics	r3, r2
 800247e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	4313      	orrs	r3, r2
 8002488:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a16      	ldr	r2, [pc, #88]	; (80024f0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d00f      	beq.n	80024bc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	2380      	movs	r3, #128	; 0x80
 80024a2:	05db      	lsls	r3, r3, #23
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d009      	beq.n	80024bc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a11      	ldr	r2, [pc, #68]	; (80024f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d004      	beq.n	80024bc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a10      	ldr	r2, [pc, #64]	; (80024f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d10c      	bne.n	80024d6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	2280      	movs	r2, #128	; 0x80
 80024c0:	4393      	bics	r3, r2
 80024c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	68ba      	ldr	r2, [r7, #8]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68ba      	ldr	r2, [r7, #8]
 80024d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	223d      	movs	r2, #61	; 0x3d
 80024da:	2101      	movs	r1, #1
 80024dc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	223c      	movs	r2, #60	; 0x3c
 80024e2:	2100      	movs	r1, #0
 80024e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	0018      	movs	r0, r3
 80024ea:	46bd      	mov	sp, r7
 80024ec:	b004      	add	sp, #16
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40012c00 	.word	0x40012c00
 80024f4:	40000400 	.word	0x40000400
 80024f8:	40014000 	.word	0x40014000

080024fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e044      	b.n	8002598 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002512:	2b00      	cmp	r3, #0
 8002514:	d107      	bne.n	8002526 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2278      	movs	r2, #120	; 0x78
 800251a:	2100      	movs	r1, #0
 800251c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	0018      	movs	r0, r3
 8002522:	f7fe f909 	bl	8000738 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2224      	movs	r2, #36	; 0x24
 800252a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2101      	movs	r1, #1
 8002538:	438a      	bics	r2, r1
 800253a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	0018      	movs	r0, r3
 8002540:	f000 f8d0 	bl	80026e4 <UART_SetConfig>
 8002544:	0003      	movs	r3, r0
 8002546:	2b01      	cmp	r3, #1
 8002548:	d101      	bne.n	800254e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e024      	b.n	8002598 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002552:	2b00      	cmp	r3, #0
 8002554:	d003      	beq.n	800255e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	0018      	movs	r0, r3
 800255a:	f000 fa03 	bl	8002964 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	685a      	ldr	r2, [r3, #4]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	490d      	ldr	r1, [pc, #52]	; (80025a0 <HAL_UART_Init+0xa4>)
 800256a:	400a      	ands	r2, r1
 800256c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	689a      	ldr	r2, [r3, #8]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	212a      	movs	r1, #42	; 0x2a
 800257a:	438a      	bics	r2, r1
 800257c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2101      	movs	r1, #1
 800258a:	430a      	orrs	r2, r1
 800258c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	0018      	movs	r0, r3
 8002592:	f000 fa9b 	bl	8002acc <UART_CheckIdleState>
 8002596:	0003      	movs	r3, r0
}
 8002598:	0018      	movs	r0, r3
 800259a:	46bd      	mov	sp, r7
 800259c:	b002      	add	sp, #8
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	ffffb7ff 	.word	0xffffb7ff

080025a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b08a      	sub	sp, #40	; 0x28
 80025a8:	af02      	add	r7, sp, #8
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	603b      	str	r3, [r7, #0]
 80025b0:	1dbb      	adds	r3, r7, #6
 80025b2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025b8:	2b20      	cmp	r3, #32
 80025ba:	d000      	beq.n	80025be <HAL_UART_Transmit+0x1a>
 80025bc:	e08d      	b.n	80026da <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d003      	beq.n	80025cc <HAL_UART_Transmit+0x28>
 80025c4:	1dbb      	adds	r3, r7, #6
 80025c6:	881b      	ldrh	r3, [r3, #0]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d101      	bne.n	80025d0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e085      	b.n	80026dc <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	689a      	ldr	r2, [r3, #8]
 80025d4:	2380      	movs	r3, #128	; 0x80
 80025d6:	015b      	lsls	r3, r3, #5
 80025d8:	429a      	cmp	r2, r3
 80025da:	d109      	bne.n	80025f0 <HAL_UART_Transmit+0x4c>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d105      	bne.n	80025f0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	2201      	movs	r2, #1
 80025e8:	4013      	ands	r3, r2
 80025ea:	d001      	beq.n	80025f0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e075      	b.n	80026dc <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2284      	movs	r2, #132	; 0x84
 80025f4:	2100      	movs	r1, #0
 80025f6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2221      	movs	r2, #33	; 0x21
 80025fc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025fe:	f7fe f9bf 	bl	8000980 <HAL_GetTick>
 8002602:	0003      	movs	r3, r0
 8002604:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	1dba      	adds	r2, r7, #6
 800260a:	2150      	movs	r1, #80	; 0x50
 800260c:	8812      	ldrh	r2, [r2, #0]
 800260e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	1dba      	adds	r2, r7, #6
 8002614:	2152      	movs	r1, #82	; 0x52
 8002616:	8812      	ldrh	r2, [r2, #0]
 8002618:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	689a      	ldr	r2, [r3, #8]
 800261e:	2380      	movs	r3, #128	; 0x80
 8002620:	015b      	lsls	r3, r3, #5
 8002622:	429a      	cmp	r2, r3
 8002624:	d108      	bne.n	8002638 <HAL_UART_Transmit+0x94>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d104      	bne.n	8002638 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800262e:	2300      	movs	r3, #0
 8002630:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	61bb      	str	r3, [r7, #24]
 8002636:	e003      	b.n	8002640 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800263c:	2300      	movs	r3, #0
 800263e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002640:	e030      	b.n	80026a4 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	0013      	movs	r3, r2
 800264c:	2200      	movs	r2, #0
 800264e:	2180      	movs	r1, #128	; 0x80
 8002650:	f000 fae4 	bl	8002c1c <UART_WaitOnFlagUntilTimeout>
 8002654:	1e03      	subs	r3, r0, #0
 8002656:	d004      	beq.n	8002662 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2220      	movs	r2, #32
 800265c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e03c      	b.n	80026dc <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d10b      	bne.n	8002680 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	881a      	ldrh	r2, [r3, #0]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	05d2      	lsls	r2, r2, #23
 8002672:	0dd2      	lsrs	r2, r2, #23
 8002674:	b292      	uxth	r2, r2
 8002676:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	3302      	adds	r3, #2
 800267c:	61bb      	str	r3, [r7, #24]
 800267e:	e008      	b.n	8002692 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	781a      	ldrb	r2, [r3, #0]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	b292      	uxth	r2, r2
 800268a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	3301      	adds	r3, #1
 8002690:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2252      	movs	r2, #82	; 0x52
 8002696:	5a9b      	ldrh	r3, [r3, r2]
 8002698:	b29b      	uxth	r3, r3
 800269a:	3b01      	subs	r3, #1
 800269c:	b299      	uxth	r1, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2252      	movs	r2, #82	; 0x52
 80026a2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2252      	movs	r2, #82	; 0x52
 80026a8:	5a9b      	ldrh	r3, [r3, r2]
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1c8      	bne.n	8002642 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026b0:	697a      	ldr	r2, [r7, #20]
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	9300      	str	r3, [sp, #0]
 80026b8:	0013      	movs	r3, r2
 80026ba:	2200      	movs	r2, #0
 80026bc:	2140      	movs	r1, #64	; 0x40
 80026be:	f000 faad 	bl	8002c1c <UART_WaitOnFlagUntilTimeout>
 80026c2:	1e03      	subs	r3, r0, #0
 80026c4:	d004      	beq.n	80026d0 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2220      	movs	r2, #32
 80026ca:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e005      	b.n	80026dc <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2220      	movs	r2, #32
 80026d4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80026d6:	2300      	movs	r3, #0
 80026d8:	e000      	b.n	80026dc <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 80026da:	2302      	movs	r3, #2
  }
}
 80026dc:	0018      	movs	r0, r3
 80026de:	46bd      	mov	sp, r7
 80026e0:	b008      	add	sp, #32
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b088      	sub	sp, #32
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80026ec:	231e      	movs	r3, #30
 80026ee:	18fb      	adds	r3, r7, r3
 80026f0:	2200      	movs	r2, #0
 80026f2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689a      	ldr	r2, [r3, #8]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	431a      	orrs	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	431a      	orrs	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	69db      	ldr	r3, [r3, #28]
 8002708:	4313      	orrs	r3, r2
 800270a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a8d      	ldr	r2, [pc, #564]	; (8002948 <UART_SetConfig+0x264>)
 8002714:	4013      	ands	r3, r2
 8002716:	0019      	movs	r1, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	697a      	ldr	r2, [r7, #20]
 800271e:	430a      	orrs	r2, r1
 8002720:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	4a88      	ldr	r2, [pc, #544]	; (800294c <UART_SetConfig+0x268>)
 800272a:	4013      	ands	r3, r2
 800272c:	0019      	movs	r1, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	68da      	ldr	r2, [r3, #12]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	430a      	orrs	r2, r1
 8002738:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a1b      	ldr	r3, [r3, #32]
 8002744:	697a      	ldr	r2, [r7, #20]
 8002746:	4313      	orrs	r3, r2
 8002748:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	4a7f      	ldr	r2, [pc, #508]	; (8002950 <UART_SetConfig+0x26c>)
 8002752:	4013      	ands	r3, r2
 8002754:	0019      	movs	r1, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	697a      	ldr	r2, [r7, #20]
 800275c:	430a      	orrs	r2, r1
 800275e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a7b      	ldr	r2, [pc, #492]	; (8002954 <UART_SetConfig+0x270>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d127      	bne.n	80027ba <UART_SetConfig+0xd6>
 800276a:	4b7b      	ldr	r3, [pc, #492]	; (8002958 <UART_SetConfig+0x274>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	2203      	movs	r2, #3
 8002770:	4013      	ands	r3, r2
 8002772:	2b03      	cmp	r3, #3
 8002774:	d00d      	beq.n	8002792 <UART_SetConfig+0xae>
 8002776:	d81b      	bhi.n	80027b0 <UART_SetConfig+0xcc>
 8002778:	2b02      	cmp	r3, #2
 800277a:	d014      	beq.n	80027a6 <UART_SetConfig+0xc2>
 800277c:	d818      	bhi.n	80027b0 <UART_SetConfig+0xcc>
 800277e:	2b00      	cmp	r3, #0
 8002780:	d002      	beq.n	8002788 <UART_SetConfig+0xa4>
 8002782:	2b01      	cmp	r3, #1
 8002784:	d00a      	beq.n	800279c <UART_SetConfig+0xb8>
 8002786:	e013      	b.n	80027b0 <UART_SetConfig+0xcc>
 8002788:	231f      	movs	r3, #31
 800278a:	18fb      	adds	r3, r7, r3
 800278c:	2200      	movs	r2, #0
 800278e:	701a      	strb	r2, [r3, #0]
 8002790:	e021      	b.n	80027d6 <UART_SetConfig+0xf2>
 8002792:	231f      	movs	r3, #31
 8002794:	18fb      	adds	r3, r7, r3
 8002796:	2202      	movs	r2, #2
 8002798:	701a      	strb	r2, [r3, #0]
 800279a:	e01c      	b.n	80027d6 <UART_SetConfig+0xf2>
 800279c:	231f      	movs	r3, #31
 800279e:	18fb      	adds	r3, r7, r3
 80027a0:	2204      	movs	r2, #4
 80027a2:	701a      	strb	r2, [r3, #0]
 80027a4:	e017      	b.n	80027d6 <UART_SetConfig+0xf2>
 80027a6:	231f      	movs	r3, #31
 80027a8:	18fb      	adds	r3, r7, r3
 80027aa:	2208      	movs	r2, #8
 80027ac:	701a      	strb	r2, [r3, #0]
 80027ae:	e012      	b.n	80027d6 <UART_SetConfig+0xf2>
 80027b0:	231f      	movs	r3, #31
 80027b2:	18fb      	adds	r3, r7, r3
 80027b4:	2210      	movs	r2, #16
 80027b6:	701a      	strb	r2, [r3, #0]
 80027b8:	e00d      	b.n	80027d6 <UART_SetConfig+0xf2>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a67      	ldr	r2, [pc, #412]	; (800295c <UART_SetConfig+0x278>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d104      	bne.n	80027ce <UART_SetConfig+0xea>
 80027c4:	231f      	movs	r3, #31
 80027c6:	18fb      	adds	r3, r7, r3
 80027c8:	2200      	movs	r2, #0
 80027ca:	701a      	strb	r2, [r3, #0]
 80027cc:	e003      	b.n	80027d6 <UART_SetConfig+0xf2>
 80027ce:	231f      	movs	r3, #31
 80027d0:	18fb      	adds	r3, r7, r3
 80027d2:	2210      	movs	r2, #16
 80027d4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	69da      	ldr	r2, [r3, #28]
 80027da:	2380      	movs	r3, #128	; 0x80
 80027dc:	021b      	lsls	r3, r3, #8
 80027de:	429a      	cmp	r2, r3
 80027e0:	d15c      	bne.n	800289c <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 80027e2:	231f      	movs	r3, #31
 80027e4:	18fb      	adds	r3, r7, r3
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2b08      	cmp	r3, #8
 80027ea:	d015      	beq.n	8002818 <UART_SetConfig+0x134>
 80027ec:	dc18      	bgt.n	8002820 <UART_SetConfig+0x13c>
 80027ee:	2b04      	cmp	r3, #4
 80027f0:	d00d      	beq.n	800280e <UART_SetConfig+0x12a>
 80027f2:	dc15      	bgt.n	8002820 <UART_SetConfig+0x13c>
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d002      	beq.n	80027fe <UART_SetConfig+0x11a>
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d005      	beq.n	8002808 <UART_SetConfig+0x124>
 80027fc:	e010      	b.n	8002820 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027fe:	f7fe ff77 	bl	80016f0 <HAL_RCC_GetPCLK1Freq>
 8002802:	0003      	movs	r3, r0
 8002804:	61bb      	str	r3, [r7, #24]
        break;
 8002806:	e012      	b.n	800282e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002808:	4b55      	ldr	r3, [pc, #340]	; (8002960 <UART_SetConfig+0x27c>)
 800280a:	61bb      	str	r3, [r7, #24]
        break;
 800280c:	e00f      	b.n	800282e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800280e:	f7fe ff0f 	bl	8001630 <HAL_RCC_GetSysClockFreq>
 8002812:	0003      	movs	r3, r0
 8002814:	61bb      	str	r3, [r7, #24]
        break;
 8002816:	e00a      	b.n	800282e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002818:	2380      	movs	r3, #128	; 0x80
 800281a:	021b      	lsls	r3, r3, #8
 800281c:	61bb      	str	r3, [r7, #24]
        break;
 800281e:	e006      	b.n	800282e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002820:	2300      	movs	r3, #0
 8002822:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002824:	231e      	movs	r3, #30
 8002826:	18fb      	adds	r3, r7, r3
 8002828:	2201      	movs	r2, #1
 800282a:	701a      	strb	r2, [r3, #0]
        break;
 800282c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d100      	bne.n	8002836 <UART_SetConfig+0x152>
 8002834:	e07a      	b.n	800292c <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	005a      	lsls	r2, r3, #1
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	085b      	lsrs	r3, r3, #1
 8002840:	18d2      	adds	r2, r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	0019      	movs	r1, r3
 8002848:	0010      	movs	r0, r2
 800284a:	f7fd fc6f 	bl	800012c <__udivsi3>
 800284e:	0003      	movs	r3, r0
 8002850:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	2b0f      	cmp	r3, #15
 8002856:	d91c      	bls.n	8002892 <UART_SetConfig+0x1ae>
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	2380      	movs	r3, #128	; 0x80
 800285c:	025b      	lsls	r3, r3, #9
 800285e:	429a      	cmp	r2, r3
 8002860:	d217      	bcs.n	8002892 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	b29a      	uxth	r2, r3
 8002866:	200e      	movs	r0, #14
 8002868:	183b      	adds	r3, r7, r0
 800286a:	210f      	movs	r1, #15
 800286c:	438a      	bics	r2, r1
 800286e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	085b      	lsrs	r3, r3, #1
 8002874:	b29b      	uxth	r3, r3
 8002876:	2207      	movs	r2, #7
 8002878:	4013      	ands	r3, r2
 800287a:	b299      	uxth	r1, r3
 800287c:	183b      	adds	r3, r7, r0
 800287e:	183a      	adds	r2, r7, r0
 8002880:	8812      	ldrh	r2, [r2, #0]
 8002882:	430a      	orrs	r2, r1
 8002884:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	183a      	adds	r2, r7, r0
 800288c:	8812      	ldrh	r2, [r2, #0]
 800288e:	60da      	str	r2, [r3, #12]
 8002890:	e04c      	b.n	800292c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8002892:	231e      	movs	r3, #30
 8002894:	18fb      	adds	r3, r7, r3
 8002896:	2201      	movs	r2, #1
 8002898:	701a      	strb	r2, [r3, #0]
 800289a:	e047      	b.n	800292c <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 800289c:	231f      	movs	r3, #31
 800289e:	18fb      	adds	r3, r7, r3
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2b08      	cmp	r3, #8
 80028a4:	d015      	beq.n	80028d2 <UART_SetConfig+0x1ee>
 80028a6:	dc18      	bgt.n	80028da <UART_SetConfig+0x1f6>
 80028a8:	2b04      	cmp	r3, #4
 80028aa:	d00d      	beq.n	80028c8 <UART_SetConfig+0x1e4>
 80028ac:	dc15      	bgt.n	80028da <UART_SetConfig+0x1f6>
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d002      	beq.n	80028b8 <UART_SetConfig+0x1d4>
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d005      	beq.n	80028c2 <UART_SetConfig+0x1de>
 80028b6:	e010      	b.n	80028da <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028b8:	f7fe ff1a 	bl	80016f0 <HAL_RCC_GetPCLK1Freq>
 80028bc:	0003      	movs	r3, r0
 80028be:	61bb      	str	r3, [r7, #24]
        break;
 80028c0:	e012      	b.n	80028e8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80028c2:	4b27      	ldr	r3, [pc, #156]	; (8002960 <UART_SetConfig+0x27c>)
 80028c4:	61bb      	str	r3, [r7, #24]
        break;
 80028c6:	e00f      	b.n	80028e8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028c8:	f7fe feb2 	bl	8001630 <HAL_RCC_GetSysClockFreq>
 80028cc:	0003      	movs	r3, r0
 80028ce:	61bb      	str	r3, [r7, #24]
        break;
 80028d0:	e00a      	b.n	80028e8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028d2:	2380      	movs	r3, #128	; 0x80
 80028d4:	021b      	lsls	r3, r3, #8
 80028d6:	61bb      	str	r3, [r7, #24]
        break;
 80028d8:	e006      	b.n	80028e8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80028da:	2300      	movs	r3, #0
 80028dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80028de:	231e      	movs	r3, #30
 80028e0:	18fb      	adds	r3, r7, r3
 80028e2:	2201      	movs	r2, #1
 80028e4:	701a      	strb	r2, [r3, #0]
        break;
 80028e6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d01e      	beq.n	800292c <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	085a      	lsrs	r2, r3, #1
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	18d2      	adds	r2, r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	0019      	movs	r1, r3
 80028fe:	0010      	movs	r0, r2
 8002900:	f7fd fc14 	bl	800012c <__udivsi3>
 8002904:	0003      	movs	r3, r0
 8002906:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	2b0f      	cmp	r3, #15
 800290c:	d90a      	bls.n	8002924 <UART_SetConfig+0x240>
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	2380      	movs	r3, #128	; 0x80
 8002912:	025b      	lsls	r3, r3, #9
 8002914:	429a      	cmp	r2, r3
 8002916:	d205      	bcs.n	8002924 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	b29a      	uxth	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	60da      	str	r2, [r3, #12]
 8002922:	e003      	b.n	800292c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8002924:	231e      	movs	r3, #30
 8002926:	18fb      	adds	r3, r7, r3
 8002928:	2201      	movs	r2, #1
 800292a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002938:	231e      	movs	r3, #30
 800293a:	18fb      	adds	r3, r7, r3
 800293c:	781b      	ldrb	r3, [r3, #0]
}
 800293e:	0018      	movs	r0, r3
 8002940:	46bd      	mov	sp, r7
 8002942:	b008      	add	sp, #32
 8002944:	bd80      	pop	{r7, pc}
 8002946:	46c0      	nop			; (mov r8, r8)
 8002948:	ffff69f3 	.word	0xffff69f3
 800294c:	ffffcfff 	.word	0xffffcfff
 8002950:	fffff4ff 	.word	0xfffff4ff
 8002954:	40013800 	.word	0x40013800
 8002958:	40021000 	.word	0x40021000
 800295c:	40004400 	.word	0x40004400
 8002960:	007a1200 	.word	0x007a1200

08002964 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002970:	2201      	movs	r2, #1
 8002972:	4013      	ands	r3, r2
 8002974:	d00b      	beq.n	800298e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	4a4a      	ldr	r2, [pc, #296]	; (8002aa8 <UART_AdvFeatureConfig+0x144>)
 800297e:	4013      	ands	r3, r2
 8002980:	0019      	movs	r1, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	430a      	orrs	r2, r1
 800298c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002992:	2202      	movs	r2, #2
 8002994:	4013      	ands	r3, r2
 8002996:	d00b      	beq.n	80029b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	4a43      	ldr	r2, [pc, #268]	; (8002aac <UART_AdvFeatureConfig+0x148>)
 80029a0:	4013      	ands	r3, r2
 80029a2:	0019      	movs	r1, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	430a      	orrs	r2, r1
 80029ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b4:	2204      	movs	r2, #4
 80029b6:	4013      	ands	r3, r2
 80029b8:	d00b      	beq.n	80029d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	4a3b      	ldr	r2, [pc, #236]	; (8002ab0 <UART_AdvFeatureConfig+0x14c>)
 80029c2:	4013      	ands	r3, r2
 80029c4:	0019      	movs	r1, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	430a      	orrs	r2, r1
 80029d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d6:	2208      	movs	r2, #8
 80029d8:	4013      	ands	r3, r2
 80029da:	d00b      	beq.n	80029f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	4a34      	ldr	r2, [pc, #208]	; (8002ab4 <UART_AdvFeatureConfig+0x150>)
 80029e4:	4013      	ands	r3, r2
 80029e6:	0019      	movs	r1, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	430a      	orrs	r2, r1
 80029f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f8:	2210      	movs	r2, #16
 80029fa:	4013      	ands	r3, r2
 80029fc:	d00b      	beq.n	8002a16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	4a2c      	ldr	r2, [pc, #176]	; (8002ab8 <UART_AdvFeatureConfig+0x154>)
 8002a06:	4013      	ands	r3, r2
 8002a08:	0019      	movs	r1, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1a:	2220      	movs	r2, #32
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	d00b      	beq.n	8002a38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	4a25      	ldr	r2, [pc, #148]	; (8002abc <UART_AdvFeatureConfig+0x158>)
 8002a28:	4013      	ands	r3, r2
 8002a2a:	0019      	movs	r1, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	430a      	orrs	r2, r1
 8002a36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3c:	2240      	movs	r2, #64	; 0x40
 8002a3e:	4013      	ands	r3, r2
 8002a40:	d01d      	beq.n	8002a7e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	4a1d      	ldr	r2, [pc, #116]	; (8002ac0 <UART_AdvFeatureConfig+0x15c>)
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	0019      	movs	r1, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	430a      	orrs	r2, r1
 8002a58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a5e:	2380      	movs	r3, #128	; 0x80
 8002a60:	035b      	lsls	r3, r3, #13
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d10b      	bne.n	8002a7e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	4a15      	ldr	r2, [pc, #84]	; (8002ac4 <UART_AdvFeatureConfig+0x160>)
 8002a6e:	4013      	ands	r3, r2
 8002a70:	0019      	movs	r1, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a82:	2280      	movs	r2, #128	; 0x80
 8002a84:	4013      	ands	r3, r2
 8002a86:	d00b      	beq.n	8002aa0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	4a0e      	ldr	r2, [pc, #56]	; (8002ac8 <UART_AdvFeatureConfig+0x164>)
 8002a90:	4013      	ands	r3, r2
 8002a92:	0019      	movs	r1, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	605a      	str	r2, [r3, #4]
  }
}
 8002aa0:	46c0      	nop			; (mov r8, r8)
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	b002      	add	sp, #8
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	fffdffff 	.word	0xfffdffff
 8002aac:	fffeffff 	.word	0xfffeffff
 8002ab0:	fffbffff 	.word	0xfffbffff
 8002ab4:	ffff7fff 	.word	0xffff7fff
 8002ab8:	ffffefff 	.word	0xffffefff
 8002abc:	ffffdfff 	.word	0xffffdfff
 8002ac0:	ffefffff 	.word	0xffefffff
 8002ac4:	ff9fffff 	.word	0xff9fffff
 8002ac8:	fff7ffff 	.word	0xfff7ffff

08002acc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b092      	sub	sp, #72	; 0x48
 8002ad0:	af02      	add	r7, sp, #8
 8002ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2284      	movs	r2, #132	; 0x84
 8002ad8:	2100      	movs	r1, #0
 8002ada:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002adc:	f7fd ff50 	bl	8000980 <HAL_GetTick>
 8002ae0:	0003      	movs	r3, r0
 8002ae2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2208      	movs	r2, #8
 8002aec:	4013      	ands	r3, r2
 8002aee:	2b08      	cmp	r3, #8
 8002af0:	d12c      	bne.n	8002b4c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002af2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002af4:	2280      	movs	r2, #128	; 0x80
 8002af6:	0391      	lsls	r1, r2, #14
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	4a46      	ldr	r2, [pc, #280]	; (8002c14 <UART_CheckIdleState+0x148>)
 8002afc:	9200      	str	r2, [sp, #0]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f000 f88c 	bl	8002c1c <UART_WaitOnFlagUntilTimeout>
 8002b04:	1e03      	subs	r3, r0, #0
 8002b06:	d021      	beq.n	8002b4c <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b08:	f3ef 8310 	mrs	r3, PRIMASK
 8002b0c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002b10:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b12:	2301      	movs	r3, #1
 8002b14:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b18:	f383 8810 	msr	PRIMASK, r3
}
 8002b1c:	46c0      	nop			; (mov r8, r8)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2180      	movs	r1, #128	; 0x80
 8002b2a:	438a      	bics	r2, r1
 8002b2c:	601a      	str	r2, [r3, #0]
 8002b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b30:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b34:	f383 8810 	msr	PRIMASK, r3
}
 8002b38:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2220      	movs	r2, #32
 8002b3e:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2278      	movs	r2, #120	; 0x78
 8002b44:	2100      	movs	r1, #0
 8002b46:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e05f      	b.n	8002c0c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2204      	movs	r2, #4
 8002b54:	4013      	ands	r3, r2
 8002b56:	2b04      	cmp	r3, #4
 8002b58:	d146      	bne.n	8002be8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b5c:	2280      	movs	r2, #128	; 0x80
 8002b5e:	03d1      	lsls	r1, r2, #15
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	4a2c      	ldr	r2, [pc, #176]	; (8002c14 <UART_CheckIdleState+0x148>)
 8002b64:	9200      	str	r2, [sp, #0]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f000 f858 	bl	8002c1c <UART_WaitOnFlagUntilTimeout>
 8002b6c:	1e03      	subs	r3, r0, #0
 8002b6e:	d03b      	beq.n	8002be8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b70:	f3ef 8310 	mrs	r3, PRIMASK
 8002b74:	60fb      	str	r3, [r7, #12]
  return(result);
 8002b76:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b78:	637b      	str	r3, [r7, #52]	; 0x34
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	f383 8810 	msr	PRIMASK, r3
}
 8002b84:	46c0      	nop			; (mov r8, r8)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4921      	ldr	r1, [pc, #132]	; (8002c18 <UART_CheckIdleState+0x14c>)
 8002b92:	400a      	ands	r2, r1
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b98:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	f383 8810 	msr	PRIMASK, r3
}
 8002ba0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ba2:	f3ef 8310 	mrs	r3, PRIMASK
 8002ba6:	61bb      	str	r3, [r7, #24]
  return(result);
 8002ba8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002baa:	633b      	str	r3, [r7, #48]	; 0x30
 8002bac:	2301      	movs	r3, #1
 8002bae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	f383 8810 	msr	PRIMASK, r3
}
 8002bb6:	46c0      	nop			; (mov r8, r8)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	689a      	ldr	r2, [r3, #8]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2101      	movs	r1, #1
 8002bc4:	438a      	bics	r2, r1
 8002bc6:	609a      	str	r2, [r3, #8]
 8002bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bca:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bcc:	6a3b      	ldr	r3, [r7, #32]
 8002bce:	f383 8810 	msr	PRIMASK, r3
}
 8002bd2:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2280      	movs	r2, #128	; 0x80
 8002bd8:	2120      	movs	r1, #32
 8002bda:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2278      	movs	r2, #120	; 0x78
 8002be0:	2100      	movs	r1, #0
 8002be2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e011      	b.n	8002c0c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2220      	movs	r2, #32
 8002bec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2280      	movs	r2, #128	; 0x80
 8002bf2:	2120      	movs	r1, #32
 8002bf4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2278      	movs	r2, #120	; 0x78
 8002c06:	2100      	movs	r1, #0
 8002c08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	0018      	movs	r0, r3
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	b010      	add	sp, #64	; 0x40
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	01ffffff 	.word	0x01ffffff
 8002c18:	fffffedf 	.word	0xfffffedf

08002c1c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	603b      	str	r3, [r7, #0]
 8002c28:	1dfb      	adds	r3, r7, #7
 8002c2a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c2c:	e04b      	b.n	8002cc6 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	3301      	adds	r3, #1
 8002c32:	d048      	beq.n	8002cc6 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c34:	f7fd fea4 	bl	8000980 <HAL_GetTick>
 8002c38:	0002      	movs	r2, r0
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d302      	bcc.n	8002c4a <UART_WaitOnFlagUntilTimeout+0x2e>
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e04b      	b.n	8002ce6 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2204      	movs	r2, #4
 8002c56:	4013      	ands	r3, r2
 8002c58:	d035      	beq.n	8002cc6 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	69db      	ldr	r3, [r3, #28]
 8002c60:	2208      	movs	r2, #8
 8002c62:	4013      	ands	r3, r2
 8002c64:	2b08      	cmp	r3, #8
 8002c66:	d111      	bne.n	8002c8c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2208      	movs	r2, #8
 8002c6e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	0018      	movs	r0, r3
 8002c74:	f000 f83c 	bl	8002cf0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2284      	movs	r2, #132	; 0x84
 8002c7c:	2108      	movs	r1, #8
 8002c7e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2278      	movs	r2, #120	; 0x78
 8002c84:	2100      	movs	r1, #0
 8002c86:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e02c      	b.n	8002ce6 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	69da      	ldr	r2, [r3, #28]
 8002c92:	2380      	movs	r3, #128	; 0x80
 8002c94:	011b      	lsls	r3, r3, #4
 8002c96:	401a      	ands	r2, r3
 8002c98:	2380      	movs	r3, #128	; 0x80
 8002c9a:	011b      	lsls	r3, r3, #4
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d112      	bne.n	8002cc6 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2280      	movs	r2, #128	; 0x80
 8002ca6:	0112      	lsls	r2, r2, #4
 8002ca8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	0018      	movs	r0, r3
 8002cae:	f000 f81f 	bl	8002cf0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2284      	movs	r2, #132	; 0x84
 8002cb6:	2120      	movs	r1, #32
 8002cb8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2278      	movs	r2, #120	; 0x78
 8002cbe:	2100      	movs	r1, #0
 8002cc0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e00f      	b.n	8002ce6 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	69db      	ldr	r3, [r3, #28]
 8002ccc:	68ba      	ldr	r2, [r7, #8]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	68ba      	ldr	r2, [r7, #8]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	425a      	negs	r2, r3
 8002cd6:	4153      	adcs	r3, r2
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	001a      	movs	r2, r3
 8002cdc:	1dfb      	adds	r3, r7, #7
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d0a4      	beq.n	8002c2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	0018      	movs	r0, r3
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	b004      	add	sp, #16
 8002cec:	bd80      	pop	{r7, pc}
	...

08002cf0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b08e      	sub	sp, #56	; 0x38
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cf8:	f3ef 8310 	mrs	r3, PRIMASK
 8002cfc:	617b      	str	r3, [r7, #20]
  return(result);
 8002cfe:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d00:	637b      	str	r3, [r7, #52]	; 0x34
 8002d02:	2301      	movs	r3, #1
 8002d04:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	f383 8810 	msr	PRIMASK, r3
}
 8002d0c:	46c0      	nop			; (mov r8, r8)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4926      	ldr	r1, [pc, #152]	; (8002db4 <UART_EndRxTransfer+0xc4>)
 8002d1a:	400a      	ands	r2, r1
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d20:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	f383 8810 	msr	PRIMASK, r3
}
 8002d28:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d2a:	f3ef 8310 	mrs	r3, PRIMASK
 8002d2e:	623b      	str	r3, [r7, #32]
  return(result);
 8002d30:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d32:	633b      	str	r3, [r7, #48]	; 0x30
 8002d34:	2301      	movs	r3, #1
 8002d36:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3a:	f383 8810 	msr	PRIMASK, r3
}
 8002d3e:	46c0      	nop			; (mov r8, r8)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	689a      	ldr	r2, [r3, #8]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	438a      	bics	r2, r1
 8002d4e:	609a      	str	r2, [r3, #8]
 8002d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d52:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d56:	f383 8810 	msr	PRIMASK, r3
}
 8002d5a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d118      	bne.n	8002d96 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d64:	f3ef 8310 	mrs	r3, PRIMASK
 8002d68:	60bb      	str	r3, [r7, #8]
  return(result);
 8002d6a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d6e:	2301      	movs	r3, #1
 8002d70:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f383 8810 	msr	PRIMASK, r3
}
 8002d78:	46c0      	nop			; (mov r8, r8)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2110      	movs	r1, #16
 8002d86:	438a      	bics	r2, r1
 8002d88:	601a      	str	r2, [r3, #0]
 8002d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d8c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	f383 8810 	msr	PRIMASK, r3
}
 8002d94:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2280      	movs	r2, #128	; 0x80
 8002d9a:	2120      	movs	r1, #32
 8002d9c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002daa:	46c0      	nop			; (mov r8, r8)
 8002dac:	46bd      	mov	sp, r7
 8002dae:	b00e      	add	sp, #56	; 0x38
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	46c0      	nop			; (mov r8, r8)
 8002db4:	fffffedf 	.word	0xfffffedf

08002db8 <siprintf>:
 8002db8:	b40e      	push	{r1, r2, r3}
 8002dba:	b500      	push	{lr}
 8002dbc:	490b      	ldr	r1, [pc, #44]	; (8002dec <siprintf+0x34>)
 8002dbe:	b09c      	sub	sp, #112	; 0x70
 8002dc0:	ab1d      	add	r3, sp, #116	; 0x74
 8002dc2:	9002      	str	r0, [sp, #8]
 8002dc4:	9006      	str	r0, [sp, #24]
 8002dc6:	9107      	str	r1, [sp, #28]
 8002dc8:	9104      	str	r1, [sp, #16]
 8002dca:	4809      	ldr	r0, [pc, #36]	; (8002df0 <siprintf+0x38>)
 8002dcc:	4909      	ldr	r1, [pc, #36]	; (8002df4 <siprintf+0x3c>)
 8002dce:	cb04      	ldmia	r3!, {r2}
 8002dd0:	9105      	str	r1, [sp, #20]
 8002dd2:	6800      	ldr	r0, [r0, #0]
 8002dd4:	a902      	add	r1, sp, #8
 8002dd6:	9301      	str	r3, [sp, #4]
 8002dd8:	f000 f9a2 	bl	8003120 <_svfiprintf_r>
 8002ddc:	2200      	movs	r2, #0
 8002dde:	9b02      	ldr	r3, [sp, #8]
 8002de0:	701a      	strb	r2, [r3, #0]
 8002de2:	b01c      	add	sp, #112	; 0x70
 8002de4:	bc08      	pop	{r3}
 8002de6:	b003      	add	sp, #12
 8002de8:	4718      	bx	r3
 8002dea:	46c0      	nop			; (mov r8, r8)
 8002dec:	7fffffff 	.word	0x7fffffff
 8002df0:	20000058 	.word	0x20000058
 8002df4:	ffff0208 	.word	0xffff0208

08002df8 <memset>:
 8002df8:	0003      	movs	r3, r0
 8002dfa:	1882      	adds	r2, r0, r2
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d100      	bne.n	8002e02 <memset+0xa>
 8002e00:	4770      	bx	lr
 8002e02:	7019      	strb	r1, [r3, #0]
 8002e04:	3301      	adds	r3, #1
 8002e06:	e7f9      	b.n	8002dfc <memset+0x4>

08002e08 <__errno>:
 8002e08:	4b01      	ldr	r3, [pc, #4]	; (8002e10 <__errno+0x8>)
 8002e0a:	6818      	ldr	r0, [r3, #0]
 8002e0c:	4770      	bx	lr
 8002e0e:	46c0      	nop			; (mov r8, r8)
 8002e10:	20000058 	.word	0x20000058

08002e14 <__libc_init_array>:
 8002e14:	b570      	push	{r4, r5, r6, lr}
 8002e16:	2600      	movs	r6, #0
 8002e18:	4c0c      	ldr	r4, [pc, #48]	; (8002e4c <__libc_init_array+0x38>)
 8002e1a:	4d0d      	ldr	r5, [pc, #52]	; (8002e50 <__libc_init_array+0x3c>)
 8002e1c:	1b64      	subs	r4, r4, r5
 8002e1e:	10a4      	asrs	r4, r4, #2
 8002e20:	42a6      	cmp	r6, r4
 8002e22:	d109      	bne.n	8002e38 <__libc_init_array+0x24>
 8002e24:	2600      	movs	r6, #0
 8002e26:	f000 fc6d 	bl	8003704 <_init>
 8002e2a:	4c0a      	ldr	r4, [pc, #40]	; (8002e54 <__libc_init_array+0x40>)
 8002e2c:	4d0a      	ldr	r5, [pc, #40]	; (8002e58 <__libc_init_array+0x44>)
 8002e2e:	1b64      	subs	r4, r4, r5
 8002e30:	10a4      	asrs	r4, r4, #2
 8002e32:	42a6      	cmp	r6, r4
 8002e34:	d105      	bne.n	8002e42 <__libc_init_array+0x2e>
 8002e36:	bd70      	pop	{r4, r5, r6, pc}
 8002e38:	00b3      	lsls	r3, r6, #2
 8002e3a:	58eb      	ldr	r3, [r5, r3]
 8002e3c:	4798      	blx	r3
 8002e3e:	3601      	adds	r6, #1
 8002e40:	e7ee      	b.n	8002e20 <__libc_init_array+0xc>
 8002e42:	00b3      	lsls	r3, r6, #2
 8002e44:	58eb      	ldr	r3, [r5, r3]
 8002e46:	4798      	blx	r3
 8002e48:	3601      	adds	r6, #1
 8002e4a:	e7f2      	b.n	8002e32 <__libc_init_array+0x1e>
 8002e4c:	080037bc 	.word	0x080037bc
 8002e50:	080037bc 	.word	0x080037bc
 8002e54:	080037c0 	.word	0x080037c0
 8002e58:	080037bc 	.word	0x080037bc

08002e5c <__retarget_lock_acquire_recursive>:
 8002e5c:	4770      	bx	lr

08002e5e <__retarget_lock_release_recursive>:
 8002e5e:	4770      	bx	lr

08002e60 <_free_r>:
 8002e60:	b570      	push	{r4, r5, r6, lr}
 8002e62:	0005      	movs	r5, r0
 8002e64:	2900      	cmp	r1, #0
 8002e66:	d010      	beq.n	8002e8a <_free_r+0x2a>
 8002e68:	1f0c      	subs	r4, r1, #4
 8002e6a:	6823      	ldr	r3, [r4, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	da00      	bge.n	8002e72 <_free_r+0x12>
 8002e70:	18e4      	adds	r4, r4, r3
 8002e72:	0028      	movs	r0, r5
 8002e74:	f000 f8e2 	bl	800303c <__malloc_lock>
 8002e78:	4a1d      	ldr	r2, [pc, #116]	; (8002ef0 <_free_r+0x90>)
 8002e7a:	6813      	ldr	r3, [r2, #0]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d105      	bne.n	8002e8c <_free_r+0x2c>
 8002e80:	6063      	str	r3, [r4, #4]
 8002e82:	6014      	str	r4, [r2, #0]
 8002e84:	0028      	movs	r0, r5
 8002e86:	f000 f8e1 	bl	800304c <__malloc_unlock>
 8002e8a:	bd70      	pop	{r4, r5, r6, pc}
 8002e8c:	42a3      	cmp	r3, r4
 8002e8e:	d908      	bls.n	8002ea2 <_free_r+0x42>
 8002e90:	6820      	ldr	r0, [r4, #0]
 8002e92:	1821      	adds	r1, r4, r0
 8002e94:	428b      	cmp	r3, r1
 8002e96:	d1f3      	bne.n	8002e80 <_free_r+0x20>
 8002e98:	6819      	ldr	r1, [r3, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	1809      	adds	r1, r1, r0
 8002e9e:	6021      	str	r1, [r4, #0]
 8002ea0:	e7ee      	b.n	8002e80 <_free_r+0x20>
 8002ea2:	001a      	movs	r2, r3
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <_free_r+0x4e>
 8002eaa:	42a3      	cmp	r3, r4
 8002eac:	d9f9      	bls.n	8002ea2 <_free_r+0x42>
 8002eae:	6811      	ldr	r1, [r2, #0]
 8002eb0:	1850      	adds	r0, r2, r1
 8002eb2:	42a0      	cmp	r0, r4
 8002eb4:	d10b      	bne.n	8002ece <_free_r+0x6e>
 8002eb6:	6820      	ldr	r0, [r4, #0]
 8002eb8:	1809      	adds	r1, r1, r0
 8002eba:	1850      	adds	r0, r2, r1
 8002ebc:	6011      	str	r1, [r2, #0]
 8002ebe:	4283      	cmp	r3, r0
 8002ec0:	d1e0      	bne.n	8002e84 <_free_r+0x24>
 8002ec2:	6818      	ldr	r0, [r3, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	1841      	adds	r1, r0, r1
 8002ec8:	6011      	str	r1, [r2, #0]
 8002eca:	6053      	str	r3, [r2, #4]
 8002ecc:	e7da      	b.n	8002e84 <_free_r+0x24>
 8002ece:	42a0      	cmp	r0, r4
 8002ed0:	d902      	bls.n	8002ed8 <_free_r+0x78>
 8002ed2:	230c      	movs	r3, #12
 8002ed4:	602b      	str	r3, [r5, #0]
 8002ed6:	e7d5      	b.n	8002e84 <_free_r+0x24>
 8002ed8:	6820      	ldr	r0, [r4, #0]
 8002eda:	1821      	adds	r1, r4, r0
 8002edc:	428b      	cmp	r3, r1
 8002ede:	d103      	bne.n	8002ee8 <_free_r+0x88>
 8002ee0:	6819      	ldr	r1, [r3, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	1809      	adds	r1, r1, r0
 8002ee6:	6021      	str	r1, [r4, #0]
 8002ee8:	6063      	str	r3, [r4, #4]
 8002eea:	6054      	str	r4, [r2, #4]
 8002eec:	e7ca      	b.n	8002e84 <_free_r+0x24>
 8002eee:	46c0      	nop			; (mov r8, r8)
 8002ef0:	200002f4 	.word	0x200002f4

08002ef4 <sbrk_aligned>:
 8002ef4:	b570      	push	{r4, r5, r6, lr}
 8002ef6:	4e0f      	ldr	r6, [pc, #60]	; (8002f34 <sbrk_aligned+0x40>)
 8002ef8:	000d      	movs	r5, r1
 8002efa:	6831      	ldr	r1, [r6, #0]
 8002efc:	0004      	movs	r4, r0
 8002efe:	2900      	cmp	r1, #0
 8002f00:	d102      	bne.n	8002f08 <sbrk_aligned+0x14>
 8002f02:	f000 fba1 	bl	8003648 <_sbrk_r>
 8002f06:	6030      	str	r0, [r6, #0]
 8002f08:	0029      	movs	r1, r5
 8002f0a:	0020      	movs	r0, r4
 8002f0c:	f000 fb9c 	bl	8003648 <_sbrk_r>
 8002f10:	1c43      	adds	r3, r0, #1
 8002f12:	d00a      	beq.n	8002f2a <sbrk_aligned+0x36>
 8002f14:	2303      	movs	r3, #3
 8002f16:	1cc5      	adds	r5, r0, #3
 8002f18:	439d      	bics	r5, r3
 8002f1a:	42a8      	cmp	r0, r5
 8002f1c:	d007      	beq.n	8002f2e <sbrk_aligned+0x3a>
 8002f1e:	1a29      	subs	r1, r5, r0
 8002f20:	0020      	movs	r0, r4
 8002f22:	f000 fb91 	bl	8003648 <_sbrk_r>
 8002f26:	3001      	adds	r0, #1
 8002f28:	d101      	bne.n	8002f2e <sbrk_aligned+0x3a>
 8002f2a:	2501      	movs	r5, #1
 8002f2c:	426d      	negs	r5, r5
 8002f2e:	0028      	movs	r0, r5
 8002f30:	bd70      	pop	{r4, r5, r6, pc}
 8002f32:	46c0      	nop			; (mov r8, r8)
 8002f34:	200002f8 	.word	0x200002f8

08002f38 <_malloc_r>:
 8002f38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f3a:	2203      	movs	r2, #3
 8002f3c:	1ccb      	adds	r3, r1, #3
 8002f3e:	4393      	bics	r3, r2
 8002f40:	3308      	adds	r3, #8
 8002f42:	0006      	movs	r6, r0
 8002f44:	001f      	movs	r7, r3
 8002f46:	2b0c      	cmp	r3, #12
 8002f48:	d238      	bcs.n	8002fbc <_malloc_r+0x84>
 8002f4a:	270c      	movs	r7, #12
 8002f4c:	42b9      	cmp	r1, r7
 8002f4e:	d837      	bhi.n	8002fc0 <_malloc_r+0x88>
 8002f50:	0030      	movs	r0, r6
 8002f52:	f000 f873 	bl	800303c <__malloc_lock>
 8002f56:	4b38      	ldr	r3, [pc, #224]	; (8003038 <_malloc_r+0x100>)
 8002f58:	9300      	str	r3, [sp, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	001c      	movs	r4, r3
 8002f5e:	2c00      	cmp	r4, #0
 8002f60:	d133      	bne.n	8002fca <_malloc_r+0x92>
 8002f62:	0039      	movs	r1, r7
 8002f64:	0030      	movs	r0, r6
 8002f66:	f7ff ffc5 	bl	8002ef4 <sbrk_aligned>
 8002f6a:	0004      	movs	r4, r0
 8002f6c:	1c43      	adds	r3, r0, #1
 8002f6e:	d15e      	bne.n	800302e <_malloc_r+0xf6>
 8002f70:	9b00      	ldr	r3, [sp, #0]
 8002f72:	681c      	ldr	r4, [r3, #0]
 8002f74:	0025      	movs	r5, r4
 8002f76:	2d00      	cmp	r5, #0
 8002f78:	d14e      	bne.n	8003018 <_malloc_r+0xe0>
 8002f7a:	2c00      	cmp	r4, #0
 8002f7c:	d051      	beq.n	8003022 <_malloc_r+0xea>
 8002f7e:	6823      	ldr	r3, [r4, #0]
 8002f80:	0029      	movs	r1, r5
 8002f82:	18e3      	adds	r3, r4, r3
 8002f84:	0030      	movs	r0, r6
 8002f86:	9301      	str	r3, [sp, #4]
 8002f88:	f000 fb5e 	bl	8003648 <_sbrk_r>
 8002f8c:	9b01      	ldr	r3, [sp, #4]
 8002f8e:	4283      	cmp	r3, r0
 8002f90:	d147      	bne.n	8003022 <_malloc_r+0xea>
 8002f92:	6823      	ldr	r3, [r4, #0]
 8002f94:	0030      	movs	r0, r6
 8002f96:	1aff      	subs	r7, r7, r3
 8002f98:	0039      	movs	r1, r7
 8002f9a:	f7ff ffab 	bl	8002ef4 <sbrk_aligned>
 8002f9e:	3001      	adds	r0, #1
 8002fa0:	d03f      	beq.n	8003022 <_malloc_r+0xea>
 8002fa2:	6823      	ldr	r3, [r4, #0]
 8002fa4:	19db      	adds	r3, r3, r7
 8002fa6:	6023      	str	r3, [r4, #0]
 8002fa8:	9b00      	ldr	r3, [sp, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d040      	beq.n	8003032 <_malloc_r+0xfa>
 8002fb0:	685a      	ldr	r2, [r3, #4]
 8002fb2:	42a2      	cmp	r2, r4
 8002fb4:	d133      	bne.n	800301e <_malloc_r+0xe6>
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	605a      	str	r2, [r3, #4]
 8002fba:	e014      	b.n	8002fe6 <_malloc_r+0xae>
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	dac5      	bge.n	8002f4c <_malloc_r+0x14>
 8002fc0:	230c      	movs	r3, #12
 8002fc2:	2500      	movs	r5, #0
 8002fc4:	6033      	str	r3, [r6, #0]
 8002fc6:	0028      	movs	r0, r5
 8002fc8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002fca:	6821      	ldr	r1, [r4, #0]
 8002fcc:	1bc9      	subs	r1, r1, r7
 8002fce:	d420      	bmi.n	8003012 <_malloc_r+0xda>
 8002fd0:	290b      	cmp	r1, #11
 8002fd2:	d918      	bls.n	8003006 <_malloc_r+0xce>
 8002fd4:	19e2      	adds	r2, r4, r7
 8002fd6:	6027      	str	r7, [r4, #0]
 8002fd8:	42a3      	cmp	r3, r4
 8002fda:	d112      	bne.n	8003002 <_malloc_r+0xca>
 8002fdc:	9b00      	ldr	r3, [sp, #0]
 8002fde:	601a      	str	r2, [r3, #0]
 8002fe0:	6863      	ldr	r3, [r4, #4]
 8002fe2:	6011      	str	r1, [r2, #0]
 8002fe4:	6053      	str	r3, [r2, #4]
 8002fe6:	0030      	movs	r0, r6
 8002fe8:	0025      	movs	r5, r4
 8002fea:	f000 f82f 	bl	800304c <__malloc_unlock>
 8002fee:	2207      	movs	r2, #7
 8002ff0:	350b      	adds	r5, #11
 8002ff2:	1d23      	adds	r3, r4, #4
 8002ff4:	4395      	bics	r5, r2
 8002ff6:	1aea      	subs	r2, r5, r3
 8002ff8:	429d      	cmp	r5, r3
 8002ffa:	d0e4      	beq.n	8002fc6 <_malloc_r+0x8e>
 8002ffc:	1b5b      	subs	r3, r3, r5
 8002ffe:	50a3      	str	r3, [r4, r2]
 8003000:	e7e1      	b.n	8002fc6 <_malloc_r+0x8e>
 8003002:	605a      	str	r2, [r3, #4]
 8003004:	e7ec      	b.n	8002fe0 <_malloc_r+0xa8>
 8003006:	6862      	ldr	r2, [r4, #4]
 8003008:	42a3      	cmp	r3, r4
 800300a:	d1d5      	bne.n	8002fb8 <_malloc_r+0x80>
 800300c:	9b00      	ldr	r3, [sp, #0]
 800300e:	601a      	str	r2, [r3, #0]
 8003010:	e7e9      	b.n	8002fe6 <_malloc_r+0xae>
 8003012:	0023      	movs	r3, r4
 8003014:	6864      	ldr	r4, [r4, #4]
 8003016:	e7a2      	b.n	8002f5e <_malloc_r+0x26>
 8003018:	002c      	movs	r4, r5
 800301a:	686d      	ldr	r5, [r5, #4]
 800301c:	e7ab      	b.n	8002f76 <_malloc_r+0x3e>
 800301e:	0013      	movs	r3, r2
 8003020:	e7c4      	b.n	8002fac <_malloc_r+0x74>
 8003022:	230c      	movs	r3, #12
 8003024:	0030      	movs	r0, r6
 8003026:	6033      	str	r3, [r6, #0]
 8003028:	f000 f810 	bl	800304c <__malloc_unlock>
 800302c:	e7cb      	b.n	8002fc6 <_malloc_r+0x8e>
 800302e:	6027      	str	r7, [r4, #0]
 8003030:	e7d9      	b.n	8002fe6 <_malloc_r+0xae>
 8003032:	605b      	str	r3, [r3, #4]
 8003034:	deff      	udf	#255	; 0xff
 8003036:	46c0      	nop			; (mov r8, r8)
 8003038:	200002f4 	.word	0x200002f4

0800303c <__malloc_lock>:
 800303c:	b510      	push	{r4, lr}
 800303e:	4802      	ldr	r0, [pc, #8]	; (8003048 <__malloc_lock+0xc>)
 8003040:	f7ff ff0c 	bl	8002e5c <__retarget_lock_acquire_recursive>
 8003044:	bd10      	pop	{r4, pc}
 8003046:	46c0      	nop			; (mov r8, r8)
 8003048:	200002f0 	.word	0x200002f0

0800304c <__malloc_unlock>:
 800304c:	b510      	push	{r4, lr}
 800304e:	4802      	ldr	r0, [pc, #8]	; (8003058 <__malloc_unlock+0xc>)
 8003050:	f7ff ff05 	bl	8002e5e <__retarget_lock_release_recursive>
 8003054:	bd10      	pop	{r4, pc}
 8003056:	46c0      	nop			; (mov r8, r8)
 8003058:	200002f0 	.word	0x200002f0

0800305c <__ssputs_r>:
 800305c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800305e:	b085      	sub	sp, #20
 8003060:	9301      	str	r3, [sp, #4]
 8003062:	9203      	str	r2, [sp, #12]
 8003064:	688e      	ldr	r6, [r1, #8]
 8003066:	9a01      	ldr	r2, [sp, #4]
 8003068:	0007      	movs	r7, r0
 800306a:	000c      	movs	r4, r1
 800306c:	680b      	ldr	r3, [r1, #0]
 800306e:	4296      	cmp	r6, r2
 8003070:	d831      	bhi.n	80030d6 <__ssputs_r+0x7a>
 8003072:	898a      	ldrh	r2, [r1, #12]
 8003074:	2190      	movs	r1, #144	; 0x90
 8003076:	00c9      	lsls	r1, r1, #3
 8003078:	420a      	tst	r2, r1
 800307a:	d029      	beq.n	80030d0 <__ssputs_r+0x74>
 800307c:	2003      	movs	r0, #3
 800307e:	6921      	ldr	r1, [r4, #16]
 8003080:	1a5b      	subs	r3, r3, r1
 8003082:	9302      	str	r3, [sp, #8]
 8003084:	6963      	ldr	r3, [r4, #20]
 8003086:	4343      	muls	r3, r0
 8003088:	0fdd      	lsrs	r5, r3, #31
 800308a:	18ed      	adds	r5, r5, r3
 800308c:	9b01      	ldr	r3, [sp, #4]
 800308e:	9802      	ldr	r0, [sp, #8]
 8003090:	3301      	adds	r3, #1
 8003092:	181b      	adds	r3, r3, r0
 8003094:	106d      	asrs	r5, r5, #1
 8003096:	42ab      	cmp	r3, r5
 8003098:	d900      	bls.n	800309c <__ssputs_r+0x40>
 800309a:	001d      	movs	r5, r3
 800309c:	0552      	lsls	r2, r2, #21
 800309e:	d529      	bpl.n	80030f4 <__ssputs_r+0x98>
 80030a0:	0029      	movs	r1, r5
 80030a2:	0038      	movs	r0, r7
 80030a4:	f7ff ff48 	bl	8002f38 <_malloc_r>
 80030a8:	1e06      	subs	r6, r0, #0
 80030aa:	d02d      	beq.n	8003108 <__ssputs_r+0xac>
 80030ac:	9a02      	ldr	r2, [sp, #8]
 80030ae:	6921      	ldr	r1, [r4, #16]
 80030b0:	f000 fae7 	bl	8003682 <memcpy>
 80030b4:	89a2      	ldrh	r2, [r4, #12]
 80030b6:	4b19      	ldr	r3, [pc, #100]	; (800311c <__ssputs_r+0xc0>)
 80030b8:	401a      	ands	r2, r3
 80030ba:	2380      	movs	r3, #128	; 0x80
 80030bc:	4313      	orrs	r3, r2
 80030be:	81a3      	strh	r3, [r4, #12]
 80030c0:	9b02      	ldr	r3, [sp, #8]
 80030c2:	6126      	str	r6, [r4, #16]
 80030c4:	18f6      	adds	r6, r6, r3
 80030c6:	6026      	str	r6, [r4, #0]
 80030c8:	6165      	str	r5, [r4, #20]
 80030ca:	9e01      	ldr	r6, [sp, #4]
 80030cc:	1aed      	subs	r5, r5, r3
 80030ce:	60a5      	str	r5, [r4, #8]
 80030d0:	9b01      	ldr	r3, [sp, #4]
 80030d2:	429e      	cmp	r6, r3
 80030d4:	d900      	bls.n	80030d8 <__ssputs_r+0x7c>
 80030d6:	9e01      	ldr	r6, [sp, #4]
 80030d8:	0032      	movs	r2, r6
 80030da:	9903      	ldr	r1, [sp, #12]
 80030dc:	6820      	ldr	r0, [r4, #0]
 80030de:	f000 fa9f 	bl	8003620 <memmove>
 80030e2:	2000      	movs	r0, #0
 80030e4:	68a3      	ldr	r3, [r4, #8]
 80030e6:	1b9b      	subs	r3, r3, r6
 80030e8:	60a3      	str	r3, [r4, #8]
 80030ea:	6823      	ldr	r3, [r4, #0]
 80030ec:	199b      	adds	r3, r3, r6
 80030ee:	6023      	str	r3, [r4, #0]
 80030f0:	b005      	add	sp, #20
 80030f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030f4:	002a      	movs	r2, r5
 80030f6:	0038      	movs	r0, r7
 80030f8:	f000 facc 	bl	8003694 <_realloc_r>
 80030fc:	1e06      	subs	r6, r0, #0
 80030fe:	d1df      	bne.n	80030c0 <__ssputs_r+0x64>
 8003100:	0038      	movs	r0, r7
 8003102:	6921      	ldr	r1, [r4, #16]
 8003104:	f7ff feac 	bl	8002e60 <_free_r>
 8003108:	230c      	movs	r3, #12
 800310a:	2001      	movs	r0, #1
 800310c:	603b      	str	r3, [r7, #0]
 800310e:	89a2      	ldrh	r2, [r4, #12]
 8003110:	3334      	adds	r3, #52	; 0x34
 8003112:	4313      	orrs	r3, r2
 8003114:	81a3      	strh	r3, [r4, #12]
 8003116:	4240      	negs	r0, r0
 8003118:	e7ea      	b.n	80030f0 <__ssputs_r+0x94>
 800311a:	46c0      	nop			; (mov r8, r8)
 800311c:	fffffb7f 	.word	0xfffffb7f

08003120 <_svfiprintf_r>:
 8003120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003122:	b0a1      	sub	sp, #132	; 0x84
 8003124:	9003      	str	r0, [sp, #12]
 8003126:	001d      	movs	r5, r3
 8003128:	898b      	ldrh	r3, [r1, #12]
 800312a:	000f      	movs	r7, r1
 800312c:	0016      	movs	r6, r2
 800312e:	061b      	lsls	r3, r3, #24
 8003130:	d511      	bpl.n	8003156 <_svfiprintf_r+0x36>
 8003132:	690b      	ldr	r3, [r1, #16]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d10e      	bne.n	8003156 <_svfiprintf_r+0x36>
 8003138:	2140      	movs	r1, #64	; 0x40
 800313a:	f7ff fefd 	bl	8002f38 <_malloc_r>
 800313e:	6038      	str	r0, [r7, #0]
 8003140:	6138      	str	r0, [r7, #16]
 8003142:	2800      	cmp	r0, #0
 8003144:	d105      	bne.n	8003152 <_svfiprintf_r+0x32>
 8003146:	230c      	movs	r3, #12
 8003148:	9a03      	ldr	r2, [sp, #12]
 800314a:	3801      	subs	r0, #1
 800314c:	6013      	str	r3, [r2, #0]
 800314e:	b021      	add	sp, #132	; 0x84
 8003150:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003152:	2340      	movs	r3, #64	; 0x40
 8003154:	617b      	str	r3, [r7, #20]
 8003156:	2300      	movs	r3, #0
 8003158:	ac08      	add	r4, sp, #32
 800315a:	6163      	str	r3, [r4, #20]
 800315c:	3320      	adds	r3, #32
 800315e:	7663      	strb	r3, [r4, #25]
 8003160:	3310      	adds	r3, #16
 8003162:	76a3      	strb	r3, [r4, #26]
 8003164:	9507      	str	r5, [sp, #28]
 8003166:	0035      	movs	r5, r6
 8003168:	782b      	ldrb	r3, [r5, #0]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <_svfiprintf_r+0x52>
 800316e:	2b25      	cmp	r3, #37	; 0x25
 8003170:	d148      	bne.n	8003204 <_svfiprintf_r+0xe4>
 8003172:	1bab      	subs	r3, r5, r6
 8003174:	9305      	str	r3, [sp, #20]
 8003176:	42b5      	cmp	r5, r6
 8003178:	d00b      	beq.n	8003192 <_svfiprintf_r+0x72>
 800317a:	0032      	movs	r2, r6
 800317c:	0039      	movs	r1, r7
 800317e:	9803      	ldr	r0, [sp, #12]
 8003180:	f7ff ff6c 	bl	800305c <__ssputs_r>
 8003184:	3001      	adds	r0, #1
 8003186:	d100      	bne.n	800318a <_svfiprintf_r+0x6a>
 8003188:	e0af      	b.n	80032ea <_svfiprintf_r+0x1ca>
 800318a:	6963      	ldr	r3, [r4, #20]
 800318c:	9a05      	ldr	r2, [sp, #20]
 800318e:	189b      	adds	r3, r3, r2
 8003190:	6163      	str	r3, [r4, #20]
 8003192:	782b      	ldrb	r3, [r5, #0]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d100      	bne.n	800319a <_svfiprintf_r+0x7a>
 8003198:	e0a7      	b.n	80032ea <_svfiprintf_r+0x1ca>
 800319a:	2201      	movs	r2, #1
 800319c:	2300      	movs	r3, #0
 800319e:	4252      	negs	r2, r2
 80031a0:	6062      	str	r2, [r4, #4]
 80031a2:	a904      	add	r1, sp, #16
 80031a4:	3254      	adds	r2, #84	; 0x54
 80031a6:	1852      	adds	r2, r2, r1
 80031a8:	1c6e      	adds	r6, r5, #1
 80031aa:	6023      	str	r3, [r4, #0]
 80031ac:	60e3      	str	r3, [r4, #12]
 80031ae:	60a3      	str	r3, [r4, #8]
 80031b0:	7013      	strb	r3, [r2, #0]
 80031b2:	65a3      	str	r3, [r4, #88]	; 0x58
 80031b4:	4b55      	ldr	r3, [pc, #340]	; (800330c <_svfiprintf_r+0x1ec>)
 80031b6:	2205      	movs	r2, #5
 80031b8:	0018      	movs	r0, r3
 80031ba:	7831      	ldrb	r1, [r6, #0]
 80031bc:	9305      	str	r3, [sp, #20]
 80031be:	f000 fa55 	bl	800366c <memchr>
 80031c2:	1c75      	adds	r5, r6, #1
 80031c4:	2800      	cmp	r0, #0
 80031c6:	d11f      	bne.n	8003208 <_svfiprintf_r+0xe8>
 80031c8:	6822      	ldr	r2, [r4, #0]
 80031ca:	06d3      	lsls	r3, r2, #27
 80031cc:	d504      	bpl.n	80031d8 <_svfiprintf_r+0xb8>
 80031ce:	2353      	movs	r3, #83	; 0x53
 80031d0:	a904      	add	r1, sp, #16
 80031d2:	185b      	adds	r3, r3, r1
 80031d4:	2120      	movs	r1, #32
 80031d6:	7019      	strb	r1, [r3, #0]
 80031d8:	0713      	lsls	r3, r2, #28
 80031da:	d504      	bpl.n	80031e6 <_svfiprintf_r+0xc6>
 80031dc:	2353      	movs	r3, #83	; 0x53
 80031de:	a904      	add	r1, sp, #16
 80031e0:	185b      	adds	r3, r3, r1
 80031e2:	212b      	movs	r1, #43	; 0x2b
 80031e4:	7019      	strb	r1, [r3, #0]
 80031e6:	7833      	ldrb	r3, [r6, #0]
 80031e8:	2b2a      	cmp	r3, #42	; 0x2a
 80031ea:	d016      	beq.n	800321a <_svfiprintf_r+0xfa>
 80031ec:	0035      	movs	r5, r6
 80031ee:	2100      	movs	r1, #0
 80031f0:	200a      	movs	r0, #10
 80031f2:	68e3      	ldr	r3, [r4, #12]
 80031f4:	782a      	ldrb	r2, [r5, #0]
 80031f6:	1c6e      	adds	r6, r5, #1
 80031f8:	3a30      	subs	r2, #48	; 0x30
 80031fa:	2a09      	cmp	r2, #9
 80031fc:	d94e      	bls.n	800329c <_svfiprintf_r+0x17c>
 80031fe:	2900      	cmp	r1, #0
 8003200:	d111      	bne.n	8003226 <_svfiprintf_r+0x106>
 8003202:	e017      	b.n	8003234 <_svfiprintf_r+0x114>
 8003204:	3501      	adds	r5, #1
 8003206:	e7af      	b.n	8003168 <_svfiprintf_r+0x48>
 8003208:	9b05      	ldr	r3, [sp, #20]
 800320a:	6822      	ldr	r2, [r4, #0]
 800320c:	1ac0      	subs	r0, r0, r3
 800320e:	2301      	movs	r3, #1
 8003210:	4083      	lsls	r3, r0
 8003212:	4313      	orrs	r3, r2
 8003214:	002e      	movs	r6, r5
 8003216:	6023      	str	r3, [r4, #0]
 8003218:	e7cc      	b.n	80031b4 <_svfiprintf_r+0x94>
 800321a:	9b07      	ldr	r3, [sp, #28]
 800321c:	1d19      	adds	r1, r3, #4
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	9107      	str	r1, [sp, #28]
 8003222:	2b00      	cmp	r3, #0
 8003224:	db01      	blt.n	800322a <_svfiprintf_r+0x10a>
 8003226:	930b      	str	r3, [sp, #44]	; 0x2c
 8003228:	e004      	b.n	8003234 <_svfiprintf_r+0x114>
 800322a:	425b      	negs	r3, r3
 800322c:	60e3      	str	r3, [r4, #12]
 800322e:	2302      	movs	r3, #2
 8003230:	4313      	orrs	r3, r2
 8003232:	6023      	str	r3, [r4, #0]
 8003234:	782b      	ldrb	r3, [r5, #0]
 8003236:	2b2e      	cmp	r3, #46	; 0x2e
 8003238:	d10a      	bne.n	8003250 <_svfiprintf_r+0x130>
 800323a:	786b      	ldrb	r3, [r5, #1]
 800323c:	2b2a      	cmp	r3, #42	; 0x2a
 800323e:	d135      	bne.n	80032ac <_svfiprintf_r+0x18c>
 8003240:	9b07      	ldr	r3, [sp, #28]
 8003242:	3502      	adds	r5, #2
 8003244:	1d1a      	adds	r2, r3, #4
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	9207      	str	r2, [sp, #28]
 800324a:	2b00      	cmp	r3, #0
 800324c:	db2b      	blt.n	80032a6 <_svfiprintf_r+0x186>
 800324e:	9309      	str	r3, [sp, #36]	; 0x24
 8003250:	4e2f      	ldr	r6, [pc, #188]	; (8003310 <_svfiprintf_r+0x1f0>)
 8003252:	2203      	movs	r2, #3
 8003254:	0030      	movs	r0, r6
 8003256:	7829      	ldrb	r1, [r5, #0]
 8003258:	f000 fa08 	bl	800366c <memchr>
 800325c:	2800      	cmp	r0, #0
 800325e:	d006      	beq.n	800326e <_svfiprintf_r+0x14e>
 8003260:	2340      	movs	r3, #64	; 0x40
 8003262:	1b80      	subs	r0, r0, r6
 8003264:	4083      	lsls	r3, r0
 8003266:	6822      	ldr	r2, [r4, #0]
 8003268:	3501      	adds	r5, #1
 800326a:	4313      	orrs	r3, r2
 800326c:	6023      	str	r3, [r4, #0]
 800326e:	7829      	ldrb	r1, [r5, #0]
 8003270:	2206      	movs	r2, #6
 8003272:	4828      	ldr	r0, [pc, #160]	; (8003314 <_svfiprintf_r+0x1f4>)
 8003274:	1c6e      	adds	r6, r5, #1
 8003276:	7621      	strb	r1, [r4, #24]
 8003278:	f000 f9f8 	bl	800366c <memchr>
 800327c:	2800      	cmp	r0, #0
 800327e:	d03c      	beq.n	80032fa <_svfiprintf_r+0x1da>
 8003280:	4b25      	ldr	r3, [pc, #148]	; (8003318 <_svfiprintf_r+0x1f8>)
 8003282:	2b00      	cmp	r3, #0
 8003284:	d125      	bne.n	80032d2 <_svfiprintf_r+0x1b2>
 8003286:	2207      	movs	r2, #7
 8003288:	9b07      	ldr	r3, [sp, #28]
 800328a:	3307      	adds	r3, #7
 800328c:	4393      	bics	r3, r2
 800328e:	3308      	adds	r3, #8
 8003290:	9307      	str	r3, [sp, #28]
 8003292:	6963      	ldr	r3, [r4, #20]
 8003294:	9a04      	ldr	r2, [sp, #16]
 8003296:	189b      	adds	r3, r3, r2
 8003298:	6163      	str	r3, [r4, #20]
 800329a:	e764      	b.n	8003166 <_svfiprintf_r+0x46>
 800329c:	4343      	muls	r3, r0
 800329e:	0035      	movs	r5, r6
 80032a0:	2101      	movs	r1, #1
 80032a2:	189b      	adds	r3, r3, r2
 80032a4:	e7a6      	b.n	80031f4 <_svfiprintf_r+0xd4>
 80032a6:	2301      	movs	r3, #1
 80032a8:	425b      	negs	r3, r3
 80032aa:	e7d0      	b.n	800324e <_svfiprintf_r+0x12e>
 80032ac:	2300      	movs	r3, #0
 80032ae:	200a      	movs	r0, #10
 80032b0:	001a      	movs	r2, r3
 80032b2:	3501      	adds	r5, #1
 80032b4:	6063      	str	r3, [r4, #4]
 80032b6:	7829      	ldrb	r1, [r5, #0]
 80032b8:	1c6e      	adds	r6, r5, #1
 80032ba:	3930      	subs	r1, #48	; 0x30
 80032bc:	2909      	cmp	r1, #9
 80032be:	d903      	bls.n	80032c8 <_svfiprintf_r+0x1a8>
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d0c5      	beq.n	8003250 <_svfiprintf_r+0x130>
 80032c4:	9209      	str	r2, [sp, #36]	; 0x24
 80032c6:	e7c3      	b.n	8003250 <_svfiprintf_r+0x130>
 80032c8:	4342      	muls	r2, r0
 80032ca:	0035      	movs	r5, r6
 80032cc:	2301      	movs	r3, #1
 80032ce:	1852      	adds	r2, r2, r1
 80032d0:	e7f1      	b.n	80032b6 <_svfiprintf_r+0x196>
 80032d2:	aa07      	add	r2, sp, #28
 80032d4:	9200      	str	r2, [sp, #0]
 80032d6:	0021      	movs	r1, r4
 80032d8:	003a      	movs	r2, r7
 80032da:	4b10      	ldr	r3, [pc, #64]	; (800331c <_svfiprintf_r+0x1fc>)
 80032dc:	9803      	ldr	r0, [sp, #12]
 80032de:	e000      	b.n	80032e2 <_svfiprintf_r+0x1c2>
 80032e0:	bf00      	nop
 80032e2:	9004      	str	r0, [sp, #16]
 80032e4:	9b04      	ldr	r3, [sp, #16]
 80032e6:	3301      	adds	r3, #1
 80032e8:	d1d3      	bne.n	8003292 <_svfiprintf_r+0x172>
 80032ea:	89bb      	ldrh	r3, [r7, #12]
 80032ec:	980d      	ldr	r0, [sp, #52]	; 0x34
 80032ee:	065b      	lsls	r3, r3, #25
 80032f0:	d400      	bmi.n	80032f4 <_svfiprintf_r+0x1d4>
 80032f2:	e72c      	b.n	800314e <_svfiprintf_r+0x2e>
 80032f4:	2001      	movs	r0, #1
 80032f6:	4240      	negs	r0, r0
 80032f8:	e729      	b.n	800314e <_svfiprintf_r+0x2e>
 80032fa:	aa07      	add	r2, sp, #28
 80032fc:	9200      	str	r2, [sp, #0]
 80032fe:	0021      	movs	r1, r4
 8003300:	003a      	movs	r2, r7
 8003302:	4b06      	ldr	r3, [pc, #24]	; (800331c <_svfiprintf_r+0x1fc>)
 8003304:	9803      	ldr	r0, [sp, #12]
 8003306:	f000 f87b 	bl	8003400 <_printf_i>
 800330a:	e7ea      	b.n	80032e2 <_svfiprintf_r+0x1c2>
 800330c:	08003788 	.word	0x08003788
 8003310:	0800378e 	.word	0x0800378e
 8003314:	08003792 	.word	0x08003792
 8003318:	00000000 	.word	0x00000000
 800331c:	0800305d 	.word	0x0800305d

08003320 <_printf_common>:
 8003320:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003322:	0016      	movs	r6, r2
 8003324:	9301      	str	r3, [sp, #4]
 8003326:	688a      	ldr	r2, [r1, #8]
 8003328:	690b      	ldr	r3, [r1, #16]
 800332a:	000c      	movs	r4, r1
 800332c:	9000      	str	r0, [sp, #0]
 800332e:	4293      	cmp	r3, r2
 8003330:	da00      	bge.n	8003334 <_printf_common+0x14>
 8003332:	0013      	movs	r3, r2
 8003334:	0022      	movs	r2, r4
 8003336:	6033      	str	r3, [r6, #0]
 8003338:	3243      	adds	r2, #67	; 0x43
 800333a:	7812      	ldrb	r2, [r2, #0]
 800333c:	2a00      	cmp	r2, #0
 800333e:	d001      	beq.n	8003344 <_printf_common+0x24>
 8003340:	3301      	adds	r3, #1
 8003342:	6033      	str	r3, [r6, #0]
 8003344:	6823      	ldr	r3, [r4, #0]
 8003346:	069b      	lsls	r3, r3, #26
 8003348:	d502      	bpl.n	8003350 <_printf_common+0x30>
 800334a:	6833      	ldr	r3, [r6, #0]
 800334c:	3302      	adds	r3, #2
 800334e:	6033      	str	r3, [r6, #0]
 8003350:	6822      	ldr	r2, [r4, #0]
 8003352:	2306      	movs	r3, #6
 8003354:	0015      	movs	r5, r2
 8003356:	401d      	ands	r5, r3
 8003358:	421a      	tst	r2, r3
 800335a:	d027      	beq.n	80033ac <_printf_common+0x8c>
 800335c:	0023      	movs	r3, r4
 800335e:	3343      	adds	r3, #67	; 0x43
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	1e5a      	subs	r2, r3, #1
 8003364:	4193      	sbcs	r3, r2
 8003366:	6822      	ldr	r2, [r4, #0]
 8003368:	0692      	lsls	r2, r2, #26
 800336a:	d430      	bmi.n	80033ce <_printf_common+0xae>
 800336c:	0022      	movs	r2, r4
 800336e:	9901      	ldr	r1, [sp, #4]
 8003370:	9800      	ldr	r0, [sp, #0]
 8003372:	9d08      	ldr	r5, [sp, #32]
 8003374:	3243      	adds	r2, #67	; 0x43
 8003376:	47a8      	blx	r5
 8003378:	3001      	adds	r0, #1
 800337a:	d025      	beq.n	80033c8 <_printf_common+0xa8>
 800337c:	2206      	movs	r2, #6
 800337e:	6823      	ldr	r3, [r4, #0]
 8003380:	2500      	movs	r5, #0
 8003382:	4013      	ands	r3, r2
 8003384:	2b04      	cmp	r3, #4
 8003386:	d105      	bne.n	8003394 <_printf_common+0x74>
 8003388:	6833      	ldr	r3, [r6, #0]
 800338a:	68e5      	ldr	r5, [r4, #12]
 800338c:	1aed      	subs	r5, r5, r3
 800338e:	43eb      	mvns	r3, r5
 8003390:	17db      	asrs	r3, r3, #31
 8003392:	401d      	ands	r5, r3
 8003394:	68a3      	ldr	r3, [r4, #8]
 8003396:	6922      	ldr	r2, [r4, #16]
 8003398:	4293      	cmp	r3, r2
 800339a:	dd01      	ble.n	80033a0 <_printf_common+0x80>
 800339c:	1a9b      	subs	r3, r3, r2
 800339e:	18ed      	adds	r5, r5, r3
 80033a0:	2600      	movs	r6, #0
 80033a2:	42b5      	cmp	r5, r6
 80033a4:	d120      	bne.n	80033e8 <_printf_common+0xc8>
 80033a6:	2000      	movs	r0, #0
 80033a8:	e010      	b.n	80033cc <_printf_common+0xac>
 80033aa:	3501      	adds	r5, #1
 80033ac:	68e3      	ldr	r3, [r4, #12]
 80033ae:	6832      	ldr	r2, [r6, #0]
 80033b0:	1a9b      	subs	r3, r3, r2
 80033b2:	42ab      	cmp	r3, r5
 80033b4:	ddd2      	ble.n	800335c <_printf_common+0x3c>
 80033b6:	0022      	movs	r2, r4
 80033b8:	2301      	movs	r3, #1
 80033ba:	9901      	ldr	r1, [sp, #4]
 80033bc:	9800      	ldr	r0, [sp, #0]
 80033be:	9f08      	ldr	r7, [sp, #32]
 80033c0:	3219      	adds	r2, #25
 80033c2:	47b8      	blx	r7
 80033c4:	3001      	adds	r0, #1
 80033c6:	d1f0      	bne.n	80033aa <_printf_common+0x8a>
 80033c8:	2001      	movs	r0, #1
 80033ca:	4240      	negs	r0, r0
 80033cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80033ce:	2030      	movs	r0, #48	; 0x30
 80033d0:	18e1      	adds	r1, r4, r3
 80033d2:	3143      	adds	r1, #67	; 0x43
 80033d4:	7008      	strb	r0, [r1, #0]
 80033d6:	0021      	movs	r1, r4
 80033d8:	1c5a      	adds	r2, r3, #1
 80033da:	3145      	adds	r1, #69	; 0x45
 80033dc:	7809      	ldrb	r1, [r1, #0]
 80033de:	18a2      	adds	r2, r4, r2
 80033e0:	3243      	adds	r2, #67	; 0x43
 80033e2:	3302      	adds	r3, #2
 80033e4:	7011      	strb	r1, [r2, #0]
 80033e6:	e7c1      	b.n	800336c <_printf_common+0x4c>
 80033e8:	0022      	movs	r2, r4
 80033ea:	2301      	movs	r3, #1
 80033ec:	9901      	ldr	r1, [sp, #4]
 80033ee:	9800      	ldr	r0, [sp, #0]
 80033f0:	9f08      	ldr	r7, [sp, #32]
 80033f2:	321a      	adds	r2, #26
 80033f4:	47b8      	blx	r7
 80033f6:	3001      	adds	r0, #1
 80033f8:	d0e6      	beq.n	80033c8 <_printf_common+0xa8>
 80033fa:	3601      	adds	r6, #1
 80033fc:	e7d1      	b.n	80033a2 <_printf_common+0x82>
	...

08003400 <_printf_i>:
 8003400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003402:	b08b      	sub	sp, #44	; 0x2c
 8003404:	9206      	str	r2, [sp, #24]
 8003406:	000a      	movs	r2, r1
 8003408:	3243      	adds	r2, #67	; 0x43
 800340a:	9307      	str	r3, [sp, #28]
 800340c:	9005      	str	r0, [sp, #20]
 800340e:	9204      	str	r2, [sp, #16]
 8003410:	7e0a      	ldrb	r2, [r1, #24]
 8003412:	000c      	movs	r4, r1
 8003414:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003416:	2a78      	cmp	r2, #120	; 0x78
 8003418:	d809      	bhi.n	800342e <_printf_i+0x2e>
 800341a:	2a62      	cmp	r2, #98	; 0x62
 800341c:	d80b      	bhi.n	8003436 <_printf_i+0x36>
 800341e:	2a00      	cmp	r2, #0
 8003420:	d100      	bne.n	8003424 <_printf_i+0x24>
 8003422:	e0be      	b.n	80035a2 <_printf_i+0x1a2>
 8003424:	497c      	ldr	r1, [pc, #496]	; (8003618 <_printf_i+0x218>)
 8003426:	9103      	str	r1, [sp, #12]
 8003428:	2a58      	cmp	r2, #88	; 0x58
 800342a:	d100      	bne.n	800342e <_printf_i+0x2e>
 800342c:	e093      	b.n	8003556 <_printf_i+0x156>
 800342e:	0026      	movs	r6, r4
 8003430:	3642      	adds	r6, #66	; 0x42
 8003432:	7032      	strb	r2, [r6, #0]
 8003434:	e022      	b.n	800347c <_printf_i+0x7c>
 8003436:	0010      	movs	r0, r2
 8003438:	3863      	subs	r0, #99	; 0x63
 800343a:	2815      	cmp	r0, #21
 800343c:	d8f7      	bhi.n	800342e <_printf_i+0x2e>
 800343e:	f7fc fe6b 	bl	8000118 <__gnu_thumb1_case_shi>
 8003442:	0016      	.short	0x0016
 8003444:	fff6001f 	.word	0xfff6001f
 8003448:	fff6fff6 	.word	0xfff6fff6
 800344c:	001ffff6 	.word	0x001ffff6
 8003450:	fff6fff6 	.word	0xfff6fff6
 8003454:	fff6fff6 	.word	0xfff6fff6
 8003458:	003600a3 	.word	0x003600a3
 800345c:	fff60083 	.word	0xfff60083
 8003460:	00b4fff6 	.word	0x00b4fff6
 8003464:	0036fff6 	.word	0x0036fff6
 8003468:	fff6fff6 	.word	0xfff6fff6
 800346c:	0087      	.short	0x0087
 800346e:	0026      	movs	r6, r4
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	3642      	adds	r6, #66	; 0x42
 8003474:	1d11      	adds	r1, r2, #4
 8003476:	6019      	str	r1, [r3, #0]
 8003478:	6813      	ldr	r3, [r2, #0]
 800347a:	7033      	strb	r3, [r6, #0]
 800347c:	2301      	movs	r3, #1
 800347e:	e0a2      	b.n	80035c6 <_printf_i+0x1c6>
 8003480:	6818      	ldr	r0, [r3, #0]
 8003482:	6809      	ldr	r1, [r1, #0]
 8003484:	1d02      	adds	r2, r0, #4
 8003486:	060d      	lsls	r5, r1, #24
 8003488:	d50b      	bpl.n	80034a2 <_printf_i+0xa2>
 800348a:	6805      	ldr	r5, [r0, #0]
 800348c:	601a      	str	r2, [r3, #0]
 800348e:	2d00      	cmp	r5, #0
 8003490:	da03      	bge.n	800349a <_printf_i+0x9a>
 8003492:	232d      	movs	r3, #45	; 0x2d
 8003494:	9a04      	ldr	r2, [sp, #16]
 8003496:	426d      	negs	r5, r5
 8003498:	7013      	strb	r3, [r2, #0]
 800349a:	4b5f      	ldr	r3, [pc, #380]	; (8003618 <_printf_i+0x218>)
 800349c:	270a      	movs	r7, #10
 800349e:	9303      	str	r3, [sp, #12]
 80034a0:	e01b      	b.n	80034da <_printf_i+0xda>
 80034a2:	6805      	ldr	r5, [r0, #0]
 80034a4:	601a      	str	r2, [r3, #0]
 80034a6:	0649      	lsls	r1, r1, #25
 80034a8:	d5f1      	bpl.n	800348e <_printf_i+0x8e>
 80034aa:	b22d      	sxth	r5, r5
 80034ac:	e7ef      	b.n	800348e <_printf_i+0x8e>
 80034ae:	680d      	ldr	r5, [r1, #0]
 80034b0:	6819      	ldr	r1, [r3, #0]
 80034b2:	1d08      	adds	r0, r1, #4
 80034b4:	6018      	str	r0, [r3, #0]
 80034b6:	062e      	lsls	r6, r5, #24
 80034b8:	d501      	bpl.n	80034be <_printf_i+0xbe>
 80034ba:	680d      	ldr	r5, [r1, #0]
 80034bc:	e003      	b.n	80034c6 <_printf_i+0xc6>
 80034be:	066d      	lsls	r5, r5, #25
 80034c0:	d5fb      	bpl.n	80034ba <_printf_i+0xba>
 80034c2:	680d      	ldr	r5, [r1, #0]
 80034c4:	b2ad      	uxth	r5, r5
 80034c6:	4b54      	ldr	r3, [pc, #336]	; (8003618 <_printf_i+0x218>)
 80034c8:	2708      	movs	r7, #8
 80034ca:	9303      	str	r3, [sp, #12]
 80034cc:	2a6f      	cmp	r2, #111	; 0x6f
 80034ce:	d000      	beq.n	80034d2 <_printf_i+0xd2>
 80034d0:	3702      	adds	r7, #2
 80034d2:	0023      	movs	r3, r4
 80034d4:	2200      	movs	r2, #0
 80034d6:	3343      	adds	r3, #67	; 0x43
 80034d8:	701a      	strb	r2, [r3, #0]
 80034da:	6863      	ldr	r3, [r4, #4]
 80034dc:	60a3      	str	r3, [r4, #8]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	db03      	blt.n	80034ea <_printf_i+0xea>
 80034e2:	2104      	movs	r1, #4
 80034e4:	6822      	ldr	r2, [r4, #0]
 80034e6:	438a      	bics	r2, r1
 80034e8:	6022      	str	r2, [r4, #0]
 80034ea:	2d00      	cmp	r5, #0
 80034ec:	d102      	bne.n	80034f4 <_printf_i+0xf4>
 80034ee:	9e04      	ldr	r6, [sp, #16]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00c      	beq.n	800350e <_printf_i+0x10e>
 80034f4:	9e04      	ldr	r6, [sp, #16]
 80034f6:	0028      	movs	r0, r5
 80034f8:	0039      	movs	r1, r7
 80034fa:	f7fc fe9d 	bl	8000238 <__aeabi_uidivmod>
 80034fe:	9b03      	ldr	r3, [sp, #12]
 8003500:	3e01      	subs	r6, #1
 8003502:	5c5b      	ldrb	r3, [r3, r1]
 8003504:	7033      	strb	r3, [r6, #0]
 8003506:	002b      	movs	r3, r5
 8003508:	0005      	movs	r5, r0
 800350a:	429f      	cmp	r7, r3
 800350c:	d9f3      	bls.n	80034f6 <_printf_i+0xf6>
 800350e:	2f08      	cmp	r7, #8
 8003510:	d109      	bne.n	8003526 <_printf_i+0x126>
 8003512:	6823      	ldr	r3, [r4, #0]
 8003514:	07db      	lsls	r3, r3, #31
 8003516:	d506      	bpl.n	8003526 <_printf_i+0x126>
 8003518:	6862      	ldr	r2, [r4, #4]
 800351a:	6923      	ldr	r3, [r4, #16]
 800351c:	429a      	cmp	r2, r3
 800351e:	dc02      	bgt.n	8003526 <_printf_i+0x126>
 8003520:	2330      	movs	r3, #48	; 0x30
 8003522:	3e01      	subs	r6, #1
 8003524:	7033      	strb	r3, [r6, #0]
 8003526:	9b04      	ldr	r3, [sp, #16]
 8003528:	1b9b      	subs	r3, r3, r6
 800352a:	6123      	str	r3, [r4, #16]
 800352c:	9b07      	ldr	r3, [sp, #28]
 800352e:	0021      	movs	r1, r4
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	9805      	ldr	r0, [sp, #20]
 8003534:	9b06      	ldr	r3, [sp, #24]
 8003536:	aa09      	add	r2, sp, #36	; 0x24
 8003538:	f7ff fef2 	bl	8003320 <_printf_common>
 800353c:	3001      	adds	r0, #1
 800353e:	d147      	bne.n	80035d0 <_printf_i+0x1d0>
 8003540:	2001      	movs	r0, #1
 8003542:	4240      	negs	r0, r0
 8003544:	b00b      	add	sp, #44	; 0x2c
 8003546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003548:	2220      	movs	r2, #32
 800354a:	6809      	ldr	r1, [r1, #0]
 800354c:	430a      	orrs	r2, r1
 800354e:	6022      	str	r2, [r4, #0]
 8003550:	2278      	movs	r2, #120	; 0x78
 8003552:	4932      	ldr	r1, [pc, #200]	; (800361c <_printf_i+0x21c>)
 8003554:	9103      	str	r1, [sp, #12]
 8003556:	0021      	movs	r1, r4
 8003558:	3145      	adds	r1, #69	; 0x45
 800355a:	700a      	strb	r2, [r1, #0]
 800355c:	6819      	ldr	r1, [r3, #0]
 800355e:	6822      	ldr	r2, [r4, #0]
 8003560:	c920      	ldmia	r1!, {r5}
 8003562:	0610      	lsls	r0, r2, #24
 8003564:	d402      	bmi.n	800356c <_printf_i+0x16c>
 8003566:	0650      	lsls	r0, r2, #25
 8003568:	d500      	bpl.n	800356c <_printf_i+0x16c>
 800356a:	b2ad      	uxth	r5, r5
 800356c:	6019      	str	r1, [r3, #0]
 800356e:	07d3      	lsls	r3, r2, #31
 8003570:	d502      	bpl.n	8003578 <_printf_i+0x178>
 8003572:	2320      	movs	r3, #32
 8003574:	4313      	orrs	r3, r2
 8003576:	6023      	str	r3, [r4, #0]
 8003578:	2710      	movs	r7, #16
 800357a:	2d00      	cmp	r5, #0
 800357c:	d1a9      	bne.n	80034d2 <_printf_i+0xd2>
 800357e:	2220      	movs	r2, #32
 8003580:	6823      	ldr	r3, [r4, #0]
 8003582:	4393      	bics	r3, r2
 8003584:	6023      	str	r3, [r4, #0]
 8003586:	e7a4      	b.n	80034d2 <_printf_i+0xd2>
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	680d      	ldr	r5, [r1, #0]
 800358c:	1d10      	adds	r0, r2, #4
 800358e:	6949      	ldr	r1, [r1, #20]
 8003590:	6018      	str	r0, [r3, #0]
 8003592:	6813      	ldr	r3, [r2, #0]
 8003594:	062e      	lsls	r6, r5, #24
 8003596:	d501      	bpl.n	800359c <_printf_i+0x19c>
 8003598:	6019      	str	r1, [r3, #0]
 800359a:	e002      	b.n	80035a2 <_printf_i+0x1a2>
 800359c:	066d      	lsls	r5, r5, #25
 800359e:	d5fb      	bpl.n	8003598 <_printf_i+0x198>
 80035a0:	8019      	strh	r1, [r3, #0]
 80035a2:	2300      	movs	r3, #0
 80035a4:	9e04      	ldr	r6, [sp, #16]
 80035a6:	6123      	str	r3, [r4, #16]
 80035a8:	e7c0      	b.n	800352c <_printf_i+0x12c>
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	1d11      	adds	r1, r2, #4
 80035ae:	6019      	str	r1, [r3, #0]
 80035b0:	6816      	ldr	r6, [r2, #0]
 80035b2:	2100      	movs	r1, #0
 80035b4:	0030      	movs	r0, r6
 80035b6:	6862      	ldr	r2, [r4, #4]
 80035b8:	f000 f858 	bl	800366c <memchr>
 80035bc:	2800      	cmp	r0, #0
 80035be:	d001      	beq.n	80035c4 <_printf_i+0x1c4>
 80035c0:	1b80      	subs	r0, r0, r6
 80035c2:	6060      	str	r0, [r4, #4]
 80035c4:	6863      	ldr	r3, [r4, #4]
 80035c6:	6123      	str	r3, [r4, #16]
 80035c8:	2300      	movs	r3, #0
 80035ca:	9a04      	ldr	r2, [sp, #16]
 80035cc:	7013      	strb	r3, [r2, #0]
 80035ce:	e7ad      	b.n	800352c <_printf_i+0x12c>
 80035d0:	0032      	movs	r2, r6
 80035d2:	6923      	ldr	r3, [r4, #16]
 80035d4:	9906      	ldr	r1, [sp, #24]
 80035d6:	9805      	ldr	r0, [sp, #20]
 80035d8:	9d07      	ldr	r5, [sp, #28]
 80035da:	47a8      	blx	r5
 80035dc:	3001      	adds	r0, #1
 80035de:	d0af      	beq.n	8003540 <_printf_i+0x140>
 80035e0:	6823      	ldr	r3, [r4, #0]
 80035e2:	079b      	lsls	r3, r3, #30
 80035e4:	d415      	bmi.n	8003612 <_printf_i+0x212>
 80035e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035e8:	68e0      	ldr	r0, [r4, #12]
 80035ea:	4298      	cmp	r0, r3
 80035ec:	daaa      	bge.n	8003544 <_printf_i+0x144>
 80035ee:	0018      	movs	r0, r3
 80035f0:	e7a8      	b.n	8003544 <_printf_i+0x144>
 80035f2:	0022      	movs	r2, r4
 80035f4:	2301      	movs	r3, #1
 80035f6:	9906      	ldr	r1, [sp, #24]
 80035f8:	9805      	ldr	r0, [sp, #20]
 80035fa:	9e07      	ldr	r6, [sp, #28]
 80035fc:	3219      	adds	r2, #25
 80035fe:	47b0      	blx	r6
 8003600:	3001      	adds	r0, #1
 8003602:	d09d      	beq.n	8003540 <_printf_i+0x140>
 8003604:	3501      	adds	r5, #1
 8003606:	68e3      	ldr	r3, [r4, #12]
 8003608:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800360a:	1a9b      	subs	r3, r3, r2
 800360c:	42ab      	cmp	r3, r5
 800360e:	dcf0      	bgt.n	80035f2 <_printf_i+0x1f2>
 8003610:	e7e9      	b.n	80035e6 <_printf_i+0x1e6>
 8003612:	2500      	movs	r5, #0
 8003614:	e7f7      	b.n	8003606 <_printf_i+0x206>
 8003616:	46c0      	nop			; (mov r8, r8)
 8003618:	08003799 	.word	0x08003799
 800361c:	080037aa 	.word	0x080037aa

08003620 <memmove>:
 8003620:	b510      	push	{r4, lr}
 8003622:	4288      	cmp	r0, r1
 8003624:	d902      	bls.n	800362c <memmove+0xc>
 8003626:	188b      	adds	r3, r1, r2
 8003628:	4298      	cmp	r0, r3
 800362a:	d303      	bcc.n	8003634 <memmove+0x14>
 800362c:	2300      	movs	r3, #0
 800362e:	e007      	b.n	8003640 <memmove+0x20>
 8003630:	5c8b      	ldrb	r3, [r1, r2]
 8003632:	5483      	strb	r3, [r0, r2]
 8003634:	3a01      	subs	r2, #1
 8003636:	d2fb      	bcs.n	8003630 <memmove+0x10>
 8003638:	bd10      	pop	{r4, pc}
 800363a:	5ccc      	ldrb	r4, [r1, r3]
 800363c:	54c4      	strb	r4, [r0, r3]
 800363e:	3301      	adds	r3, #1
 8003640:	429a      	cmp	r2, r3
 8003642:	d1fa      	bne.n	800363a <memmove+0x1a>
 8003644:	e7f8      	b.n	8003638 <memmove+0x18>
	...

08003648 <_sbrk_r>:
 8003648:	2300      	movs	r3, #0
 800364a:	b570      	push	{r4, r5, r6, lr}
 800364c:	4d06      	ldr	r5, [pc, #24]	; (8003668 <_sbrk_r+0x20>)
 800364e:	0004      	movs	r4, r0
 8003650:	0008      	movs	r0, r1
 8003652:	602b      	str	r3, [r5, #0]
 8003654:	f7fd f8d4 	bl	8000800 <_sbrk>
 8003658:	1c43      	adds	r3, r0, #1
 800365a:	d103      	bne.n	8003664 <_sbrk_r+0x1c>
 800365c:	682b      	ldr	r3, [r5, #0]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d000      	beq.n	8003664 <_sbrk_r+0x1c>
 8003662:	6023      	str	r3, [r4, #0]
 8003664:	bd70      	pop	{r4, r5, r6, pc}
 8003666:	46c0      	nop			; (mov r8, r8)
 8003668:	200002ec 	.word	0x200002ec

0800366c <memchr>:
 800366c:	b2c9      	uxtb	r1, r1
 800366e:	1882      	adds	r2, r0, r2
 8003670:	4290      	cmp	r0, r2
 8003672:	d101      	bne.n	8003678 <memchr+0xc>
 8003674:	2000      	movs	r0, #0
 8003676:	4770      	bx	lr
 8003678:	7803      	ldrb	r3, [r0, #0]
 800367a:	428b      	cmp	r3, r1
 800367c:	d0fb      	beq.n	8003676 <memchr+0xa>
 800367e:	3001      	adds	r0, #1
 8003680:	e7f6      	b.n	8003670 <memchr+0x4>

08003682 <memcpy>:
 8003682:	2300      	movs	r3, #0
 8003684:	b510      	push	{r4, lr}
 8003686:	429a      	cmp	r2, r3
 8003688:	d100      	bne.n	800368c <memcpy+0xa>
 800368a:	bd10      	pop	{r4, pc}
 800368c:	5ccc      	ldrb	r4, [r1, r3]
 800368e:	54c4      	strb	r4, [r0, r3]
 8003690:	3301      	adds	r3, #1
 8003692:	e7f8      	b.n	8003686 <memcpy+0x4>

08003694 <_realloc_r>:
 8003694:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003696:	0007      	movs	r7, r0
 8003698:	000e      	movs	r6, r1
 800369a:	0014      	movs	r4, r2
 800369c:	2900      	cmp	r1, #0
 800369e:	d105      	bne.n	80036ac <_realloc_r+0x18>
 80036a0:	0011      	movs	r1, r2
 80036a2:	f7ff fc49 	bl	8002f38 <_malloc_r>
 80036a6:	0005      	movs	r5, r0
 80036a8:	0028      	movs	r0, r5
 80036aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80036ac:	2a00      	cmp	r2, #0
 80036ae:	d103      	bne.n	80036b8 <_realloc_r+0x24>
 80036b0:	f7ff fbd6 	bl	8002e60 <_free_r>
 80036b4:	0025      	movs	r5, r4
 80036b6:	e7f7      	b.n	80036a8 <_realloc_r+0x14>
 80036b8:	f000 f81b 	bl	80036f2 <_malloc_usable_size_r>
 80036bc:	9001      	str	r0, [sp, #4]
 80036be:	4284      	cmp	r4, r0
 80036c0:	d803      	bhi.n	80036ca <_realloc_r+0x36>
 80036c2:	0035      	movs	r5, r6
 80036c4:	0843      	lsrs	r3, r0, #1
 80036c6:	42a3      	cmp	r3, r4
 80036c8:	d3ee      	bcc.n	80036a8 <_realloc_r+0x14>
 80036ca:	0021      	movs	r1, r4
 80036cc:	0038      	movs	r0, r7
 80036ce:	f7ff fc33 	bl	8002f38 <_malloc_r>
 80036d2:	1e05      	subs	r5, r0, #0
 80036d4:	d0e8      	beq.n	80036a8 <_realloc_r+0x14>
 80036d6:	9b01      	ldr	r3, [sp, #4]
 80036d8:	0022      	movs	r2, r4
 80036da:	429c      	cmp	r4, r3
 80036dc:	d900      	bls.n	80036e0 <_realloc_r+0x4c>
 80036de:	001a      	movs	r2, r3
 80036e0:	0031      	movs	r1, r6
 80036e2:	0028      	movs	r0, r5
 80036e4:	f7ff ffcd 	bl	8003682 <memcpy>
 80036e8:	0031      	movs	r1, r6
 80036ea:	0038      	movs	r0, r7
 80036ec:	f7ff fbb8 	bl	8002e60 <_free_r>
 80036f0:	e7da      	b.n	80036a8 <_realloc_r+0x14>

080036f2 <_malloc_usable_size_r>:
 80036f2:	1f0b      	subs	r3, r1, #4
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	1f18      	subs	r0, r3, #4
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	da01      	bge.n	8003700 <_malloc_usable_size_r+0xe>
 80036fc:	580b      	ldr	r3, [r1, r0]
 80036fe:	18c0      	adds	r0, r0, r3
 8003700:	4770      	bx	lr
	...

08003704 <_init>:
 8003704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003706:	46c0      	nop			; (mov r8, r8)
 8003708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800370a:	bc08      	pop	{r3}
 800370c:	469e      	mov	lr, r3
 800370e:	4770      	bx	lr

08003710 <_fini>:
 8003710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003712:	46c0      	nop			; (mov r8, r8)
 8003714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003716:	bc08      	pop	{r3}
 8003718:	469e      	mov	lr, r3
 800371a:	4770      	bx	lr
