
Tutorial4-TempSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003808  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  080038c8  080038c8  000138c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039d8  080039d8  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080039d8  080039d8  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080039d8  080039d8  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039d8  080039d8  000139d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039dc  080039dc  000139dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080039e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  2000005c  08003a3c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  08003a3c  000202a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a381  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001876  00000000  00000000  0002a448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008e0  00000000  00000000  0002bcc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006ef  00000000  00000000  0002c5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00011c82  00000000  00000000  0002cc8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000caba  00000000  00000000  0003e911  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00069b36  00000000  00000000  0004b3cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000023f0  00000000  00000000  000b4f04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000b72f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080038b0 	.word	0x080038b0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	080038b0 	.word	0x080038b0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800041a:	b09d      	sub	sp, #116	; 0x74
 800041c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint8_t buffer[60];
	int temperature;
	const int deviceNum = 4;
 800041e:	2304      	movs	r3, #4
 8000420:	65fb      	str	r3, [r7, #92]	; 0x5c
	const int deviceAddresses[4] = {0x48 << 1, 0x49 << 1, 0x4A << 1, 0x4B << 1}; // 4 Temperature sensors, I2C addresses
 8000422:	1d3b      	adds	r3, r7, #4
 8000424:	4a59      	ldr	r2, [pc, #356]	; (800058c <main+0x174>)
 8000426:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000428:	c313      	stmia	r3!, {r0, r1, r4}
 800042a:	6812      	ldr	r2, [r2, #0]
 800042c:	601a      	str	r2, [r3, #0]
	const int tempRegisterAddress = 0x0; //All sensors have the same register for the temperature
 800042e:	2300      	movs	r3, #0
 8000430:	65bb      	str	r3, [r7, #88]	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000432:	f000 fb3f 	bl	8000ab4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000436:	f000 f8bb 	bl	80005b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800043a:	f000 f98d 	bl	8000758 <MX_GPIO_Init>
  MX_I2C1_Init();
 800043e:	f000 f91b 	bl	8000678 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000442:	f000 f959 	bl	80006f8 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for(i=0;i<deviceNum;i++) //Go to each device
 8000446:	2300      	movs	r3, #0
 8000448:	667b      	str	r3, [r7, #100]	; 0x64
 800044a:	e094      	b.n	8000576 <main+0x15e>
	  {
		  buffer[0] = tempRegisterAddress; //Register address with MSB of temperature data
 800044c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800044e:	b2da      	uxtb	r2, r3
 8000450:	2514      	movs	r5, #20
 8000452:	197b      	adds	r3, r7, r5
 8000454:	701a      	strb	r2, [r3, #0]
		  status = HAL_I2C_Master_Transmit(&hi2c1, deviceAddresses[i], buffer, 1, 10000); //Send request to read to register 0x0 of the current device
 8000456:	1d3b      	adds	r3, r7, #4
 8000458:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800045a:	0092      	lsls	r2, r2, #2
 800045c:	58d3      	ldr	r3, [r2, r3]
 800045e:	b299      	uxth	r1, r3
 8000460:	2657      	movs	r6, #87	; 0x57
 8000462:	19bc      	adds	r4, r7, r6
 8000464:	197a      	adds	r2, r7, r5
 8000466:	484a      	ldr	r0, [pc, #296]	; (8000590 <main+0x178>)
 8000468:	4b4a      	ldr	r3, [pc, #296]	; (8000594 <main+0x17c>)
 800046a:	9300      	str	r3, [sp, #0]
 800046c:	2301      	movs	r3, #1
 800046e:	f000 fe81 	bl	8001174 <HAL_I2C_Master_Transmit>
 8000472:	0003      	movs	r3, r0
 8000474:	7023      	strb	r3, [r4, #0]
		  if(status != HAL_OK)
 8000476:	19bb      	adds	r3, r7, r6
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	2b00      	cmp	r3, #0
 800047c:	d00a      	beq.n	8000494 <main+0x7c>
		  {
			 sprintf((char*) buffer, "Error transmitting to temp sensor of device %d of addr [%X]\r\n", i, deviceAddresses[i] >> 1);
 800047e:	1d3b      	adds	r3, r7, #4
 8000480:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000482:	0092      	lsls	r2, r2, #2
 8000484:	58d3      	ldr	r3, [r2, r3]
 8000486:	105b      	asrs	r3, r3, #1
 8000488:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800048a:	4943      	ldr	r1, [pc, #268]	; (8000598 <main+0x180>)
 800048c:	1978      	adds	r0, r7, r5
 800048e:	f002 fd69 	bl	8002f64 <siprintf>
 8000492:	e061      	b.n	8000558 <main+0x140>
		  }
		  else
		  {
			  status = HAL_I2C_Master_Receive(&hi2c1, deviceAddresses[i], buffer, 2, 10000); //Get 2 bytes, starting at register 0x0 and then 0x1
 8000494:	1d3b      	adds	r3, r7, #4
 8000496:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000498:	0092      	lsls	r2, r2, #2
 800049a:	58d3      	ldr	r3, [r2, r3]
 800049c:	b299      	uxth	r1, r3
 800049e:	2557      	movs	r5, #87	; 0x57
 80004a0:	197c      	adds	r4, r7, r5
 80004a2:	2614      	movs	r6, #20
 80004a4:	19ba      	adds	r2, r7, r6
 80004a6:	483a      	ldr	r0, [pc, #232]	; (8000590 <main+0x178>)
 80004a8:	4b3a      	ldr	r3, [pc, #232]	; (8000594 <main+0x17c>)
 80004aa:	9300      	str	r3, [sp, #0]
 80004ac:	2302      	movs	r3, #2
 80004ae:	f000 ff69 	bl	8001384 <HAL_I2C_Master_Receive>
 80004b2:	0003      	movs	r3, r0
 80004b4:	7023      	strb	r3, [r4, #0]

			  if(status != HAL_OK)
 80004b6:	197b      	adds	r3, r7, r5
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d00a      	beq.n	80004d4 <main+0xbc>
			  {
				  sprintf((char*) buffer, "Error receiving from temp sensor of device %d of addr [%X]\r\n", i, deviceAddresses[i] >> 1);
 80004be:	1d3b      	adds	r3, r7, #4
 80004c0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80004c2:	0092      	lsls	r2, r2, #2
 80004c4:	58d3      	ldr	r3, [r2, r3]
 80004c6:	105b      	asrs	r3, r3, #1
 80004c8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80004ca:	4934      	ldr	r1, [pc, #208]	; (800059c <main+0x184>)
 80004cc:	19b8      	adds	r0, r7, r6
 80004ce:	f002 fd49 	bl	8002f64 <siprintf>
 80004d2:	e041      	b.n	8000558 <main+0x140>
			  {
				  //Format of return  SMMMMMMM
				  //				  LLLLLFFF
				  // s MMMM MMML LLLL

				  val = ((uint16_t)buffer[0] << 5 | buffer[1] >> 3);
 80004d4:	2114      	movs	r1, #20
 80004d6:	187b      	adds	r3, r7, r1
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	015b      	lsls	r3, r3, #5
 80004dc:	b21a      	sxth	r2, r3
 80004de:	187b      	adds	r3, r7, r1
 80004e0:	785b      	ldrb	r3, [r3, #1]
 80004e2:	08db      	lsrs	r3, r3, #3
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	b21b      	sxth	r3, r3
 80004e8:	4313      	orrs	r3, r2
 80004ea:	b21a      	sxth	r2, r3
 80004ec:	2162      	movs	r1, #98	; 0x62
 80004ee:	187b      	adds	r3, r7, r1
 80004f0:	801a      	strh	r2, [r3, #0]

				  if(val > 0x7FF) // If the output is bigger than the value of just the sign bit
 80004f2:	187b      	adds	r3, r7, r1
 80004f4:	881a      	ldrh	r2, [r3, #0]
 80004f6:	2380      	movs	r3, #128	; 0x80
 80004f8:	011b      	lsls	r3, r3, #4
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d305      	bcc.n	800050a <main+0xf2>
				  {
					  val |= 0xF000;
 80004fe:	187b      	adds	r3, r7, r1
 8000500:	187a      	adds	r2, r7, r1
 8000502:	8812      	ldrh	r2, [r2, #0]
 8000504:	4926      	ldr	r1, [pc, #152]	; (80005a0 <main+0x188>)
 8000506:	430a      	orrs	r2, r1
 8000508:	801a      	strh	r2, [r3, #0]
				  }

				  temperature = val * 625; //Each step for 13 bits is 0.0625 * 10,000
 800050a:	2362      	movs	r3, #98	; 0x62
 800050c:	18fb      	adds	r3, r7, r3
 800050e:	881a      	ldrh	r2, [r3, #0]
 8000510:	0013      	movs	r3, r2
 8000512:	015b      	lsls	r3, r3, #5
 8000514:	1a9b      	subs	r3, r3, r2
 8000516:	009b      	lsls	r3, r3, #2
 8000518:	189b      	adds	r3, r3, r2
 800051a:	009a      	lsls	r2, r3, #2
 800051c:	189b      	adds	r3, r3, r2
 800051e:	653b      	str	r3, [r7, #80]	; 0x50

				  //Format for output
				  temperature /= 100;//Split the decimal
 8000520:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000522:	2164      	movs	r1, #100	; 0x64
 8000524:	0018      	movs	r0, r3
 8000526:	f7ff fe8b 	bl	8000240 <__divsi3>
 800052a:	0003      	movs	r3, r0
 800052c:	653b      	str	r3, [r7, #80]	; 0x50
				  sprintf((char*) buffer, "%d - %u.%02u C\r\n", i, (unsigned int) temperature / 100, (unsigned int) temperature % 100);
 800052e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000530:	2164      	movs	r1, #100	; 0x64
 8000532:	0018      	movs	r0, r3
 8000534:	f7ff fdfa 	bl	800012c <__udivsi3>
 8000538:	0003      	movs	r3, r0
 800053a:	001c      	movs	r4, r3
 800053c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800053e:	2164      	movs	r1, #100	; 0x64
 8000540:	0018      	movs	r0, r3
 8000542:	f7ff fe79 	bl	8000238 <__aeabi_uidivmod>
 8000546:	000b      	movs	r3, r1
 8000548:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800054a:	4916      	ldr	r1, [pc, #88]	; (80005a4 <main+0x18c>)
 800054c:	2014      	movs	r0, #20
 800054e:	1838      	adds	r0, r7, r0
 8000550:	9300      	str	r3, [sp, #0]
 8000552:	0023      	movs	r3, r4
 8000554:	f002 fd06 	bl	8002f64 <siprintf>
			  }
		  }

		  HAL_UART_Transmit(&huart1, buffer, strlen((char*)buffer), 100000);
 8000558:	2414      	movs	r4, #20
 800055a:	193b      	adds	r3, r7, r4
 800055c:	0018      	movs	r0, r3
 800055e:	f7ff fdd3 	bl	8000108 <strlen>
 8000562:	0003      	movs	r3, r0
 8000564:	b29a      	uxth	r2, r3
 8000566:	4b10      	ldr	r3, [pc, #64]	; (80005a8 <main+0x190>)
 8000568:	1939      	adds	r1, r7, r4
 800056a:	4810      	ldr	r0, [pc, #64]	; (80005ac <main+0x194>)
 800056c:	f002 f8f0 	bl	8002750 <HAL_UART_Transmit>
	  for(i=0;i<deviceNum;i++) //Go to each device
 8000570:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000572:	3301      	adds	r3, #1
 8000574:	667b      	str	r3, [r7, #100]	; 0x64
 8000576:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000578:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800057a:	429a      	cmp	r2, r3
 800057c:	da00      	bge.n	8000580 <main+0x168>
 800057e:	e765      	b.n	800044c <main+0x34>
	  }

	  HAL_Delay(2000);
 8000580:	23fa      	movs	r3, #250	; 0xfa
 8000582:	00db      	lsls	r3, r3, #3
 8000584:	0018      	movs	r0, r3
 8000586:	f000 faf9 	bl	8000b7c <HAL_Delay>
	  for(i=0;i<deviceNum;i++) //Go to each device
 800058a:	e75c      	b.n	8000446 <main+0x2e>
 800058c:	0800395c 	.word	0x0800395c
 8000590:	20000078 	.word	0x20000078
 8000594:	00002710 	.word	0x00002710
 8000598:	080038c8 	.word	0x080038c8
 800059c:	08003908 	.word	0x08003908
 80005a0:	fffff000 	.word	0xfffff000
 80005a4:	08003948 	.word	0x08003948
 80005a8:	000186a0 	.word	0x000186a0
 80005ac:	200000cc 	.word	0x200000cc

080005b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b0:	b590      	push	{r4, r7, lr}
 80005b2:	b097      	sub	sp, #92	; 0x5c
 80005b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b6:	2428      	movs	r4, #40	; 0x28
 80005b8:	193b      	adds	r3, r7, r4
 80005ba:	0018      	movs	r0, r3
 80005bc:	2330      	movs	r3, #48	; 0x30
 80005be:	001a      	movs	r2, r3
 80005c0:	2100      	movs	r1, #0
 80005c2:	f002 fcef 	bl	8002fa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c6:	2318      	movs	r3, #24
 80005c8:	18fb      	adds	r3, r7, r3
 80005ca:	0018      	movs	r0, r3
 80005cc:	2310      	movs	r3, #16
 80005ce:	001a      	movs	r2, r3
 80005d0:	2100      	movs	r1, #0
 80005d2:	f002 fce7 	bl	8002fa4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	0018      	movs	r0, r3
 80005da:	2314      	movs	r3, #20
 80005dc:	001a      	movs	r2, r3
 80005de:	2100      	movs	r1, #0
 80005e0:	f002 fce0 	bl	8002fa4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e4:	0021      	movs	r1, r4
 80005e6:	187b      	adds	r3, r7, r1
 80005e8:	2202      	movs	r2, #2
 80005ea:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ec:	187b      	adds	r3, r7, r1
 80005ee:	2201      	movs	r2, #1
 80005f0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f2:	187b      	adds	r3, r7, r1
 80005f4:	2210      	movs	r2, #16
 80005f6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	2202      	movs	r2, #2
 80005fc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005fe:	187b      	adds	r3, r7, r1
 8000600:	2200      	movs	r2, #0
 8000602:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000604:	187b      	adds	r3, r7, r1
 8000606:	22a0      	movs	r2, #160	; 0xa0
 8000608:	0392      	lsls	r2, r2, #14
 800060a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800060c:	187b      	adds	r3, r7, r1
 800060e:	2200      	movs	r2, #0
 8000610:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000612:	187b      	adds	r3, r7, r1
 8000614:	0018      	movs	r0, r3
 8000616:	f001 fb0b 	bl	8001c30 <HAL_RCC_OscConfig>
 800061a:	1e03      	subs	r3, r0, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800061e:	f000 f905 	bl	800082c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000622:	2118      	movs	r1, #24
 8000624:	187b      	adds	r3, r7, r1
 8000626:	2207      	movs	r2, #7
 8000628:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062a:	187b      	adds	r3, r7, r1
 800062c:	2202      	movs	r2, #2
 800062e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000630:	187b      	adds	r3, r7, r1
 8000632:	2200      	movs	r2, #0
 8000634:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000636:	187b      	adds	r3, r7, r1
 8000638:	2200      	movs	r2, #0
 800063a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800063c:	187b      	adds	r3, r7, r1
 800063e:	2101      	movs	r1, #1
 8000640:	0018      	movs	r0, r3
 8000642:	f001 fe0f 	bl	8002264 <HAL_RCC_ClockConfig>
 8000646:	1e03      	subs	r3, r0, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800064a:	f000 f8ef 	bl	800082c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	2221      	movs	r2, #33	; 0x21
 8000652:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	2200      	movs	r2, #0
 8000658:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	2200      	movs	r2, #0
 800065e:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	0018      	movs	r0, r3
 8000664:	f001 ff42 	bl	80024ec <HAL_RCCEx_PeriphCLKConfig>
 8000668:	1e03      	subs	r3, r0, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800066c:	f000 f8de 	bl	800082c <Error_Handler>
  }
}
 8000670:	46c0      	nop			; (mov r8, r8)
 8000672:	46bd      	mov	sp, r7
 8000674:	b017      	add	sp, #92	; 0x5c
 8000676:	bd90      	pop	{r4, r7, pc}

08000678 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800067c:	4b1b      	ldr	r3, [pc, #108]	; (80006ec <MX_I2C1_Init+0x74>)
 800067e:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <MX_I2C1_Init+0x78>)
 8000680:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000682:	4b1a      	ldr	r3, [pc, #104]	; (80006ec <MX_I2C1_Init+0x74>)
 8000684:	4a1b      	ldr	r2, [pc, #108]	; (80006f4 <MX_I2C1_Init+0x7c>)
 8000686:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000688:	4b18      	ldr	r3, [pc, #96]	; (80006ec <MX_I2C1_Init+0x74>)
 800068a:	2200      	movs	r2, #0
 800068c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800068e:	4b17      	ldr	r3, [pc, #92]	; (80006ec <MX_I2C1_Init+0x74>)
 8000690:	2201      	movs	r2, #1
 8000692:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000694:	4b15      	ldr	r3, [pc, #84]	; (80006ec <MX_I2C1_Init+0x74>)
 8000696:	2200      	movs	r2, #0
 8000698:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800069a:	4b14      	ldr	r3, [pc, #80]	; (80006ec <MX_I2C1_Init+0x74>)
 800069c:	2200      	movs	r2, #0
 800069e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006a0:	4b12      	ldr	r3, [pc, #72]	; (80006ec <MX_I2C1_Init+0x74>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006a6:	4b11      	ldr	r3, [pc, #68]	; (80006ec <MX_I2C1_Init+0x74>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <MX_I2C1_Init+0x74>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006b2:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <MX_I2C1_Init+0x74>)
 80006b4:	0018      	movs	r0, r3
 80006b6:	f000 fcc7 	bl	8001048 <HAL_I2C_Init>
 80006ba:	1e03      	subs	r3, r0, #0
 80006bc:	d001      	beq.n	80006c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006be:	f000 f8b5 	bl	800082c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006c2:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <MX_I2C1_Init+0x74>)
 80006c4:	2100      	movs	r1, #0
 80006c6:	0018      	movs	r0, r3
 80006c8:	f001 fa1a 	bl	8001b00 <HAL_I2CEx_ConfigAnalogFilter>
 80006cc:	1e03      	subs	r3, r0, #0
 80006ce:	d001      	beq.n	80006d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006d0:	f000 f8ac 	bl	800082c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006d4:	4b05      	ldr	r3, [pc, #20]	; (80006ec <MX_I2C1_Init+0x74>)
 80006d6:	2100      	movs	r1, #0
 80006d8:	0018      	movs	r0, r3
 80006da:	f001 fa5d 	bl	8001b98 <HAL_I2CEx_ConfigDigitalFilter>
 80006de:	1e03      	subs	r3, r0, #0
 80006e0:	d001      	beq.n	80006e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006e2:	f000 f8a3 	bl	800082c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000078 	.word	0x20000078
 80006f0:	40005400 	.word	0x40005400
 80006f4:	2000090e 	.word	0x2000090e

080006f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006fc:	4b14      	ldr	r3, [pc, #80]	; (8000750 <MX_USART1_UART_Init+0x58>)
 80006fe:	4a15      	ldr	r2, [pc, #84]	; (8000754 <MX_USART1_UART_Init+0x5c>)
 8000700:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000702:	4b13      	ldr	r3, [pc, #76]	; (8000750 <MX_USART1_UART_Init+0x58>)
 8000704:	2296      	movs	r2, #150	; 0x96
 8000706:	0192      	lsls	r2, r2, #6
 8000708:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800070a:	4b11      	ldr	r3, [pc, #68]	; (8000750 <MX_USART1_UART_Init+0x58>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000710:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <MX_USART1_UART_Init+0x58>)
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <MX_USART1_UART_Init+0x58>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <MX_USART1_UART_Init+0x58>)
 800071e:	220c      	movs	r2, #12
 8000720:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000722:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <MX_USART1_UART_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000728:	4b09      	ldr	r3, [pc, #36]	; (8000750 <MX_USART1_UART_Init+0x58>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800072e:	4b08      	ldr	r3, [pc, #32]	; (8000750 <MX_USART1_UART_Init+0x58>)
 8000730:	2200      	movs	r2, #0
 8000732:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <MX_USART1_UART_Init+0x58>)
 8000736:	2200      	movs	r2, #0
 8000738:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800073a:	4b05      	ldr	r3, [pc, #20]	; (8000750 <MX_USART1_UART_Init+0x58>)
 800073c:	0018      	movs	r0, r3
 800073e:	f001 ffb3 	bl	80026a8 <HAL_UART_Init>
 8000742:	1e03      	subs	r3, r0, #0
 8000744:	d001      	beq.n	800074a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000746:	f000 f871 	bl	800082c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	200000cc 	.word	0x200000cc
 8000754:	40013800 	.word	0x40013800

08000758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000758:	b590      	push	{r4, r7, lr}
 800075a:	b089      	sub	sp, #36	; 0x24
 800075c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075e:	240c      	movs	r4, #12
 8000760:	193b      	adds	r3, r7, r4
 8000762:	0018      	movs	r0, r3
 8000764:	2314      	movs	r3, #20
 8000766:	001a      	movs	r2, r3
 8000768:	2100      	movs	r1, #0
 800076a:	f002 fc1b 	bl	8002fa4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076e:	4b2d      	ldr	r3, [pc, #180]	; (8000824 <MX_GPIO_Init+0xcc>)
 8000770:	695a      	ldr	r2, [r3, #20]
 8000772:	4b2c      	ldr	r3, [pc, #176]	; (8000824 <MX_GPIO_Init+0xcc>)
 8000774:	2180      	movs	r1, #128	; 0x80
 8000776:	0289      	lsls	r1, r1, #10
 8000778:	430a      	orrs	r2, r1
 800077a:	615a      	str	r2, [r3, #20]
 800077c:	4b29      	ldr	r3, [pc, #164]	; (8000824 <MX_GPIO_Init+0xcc>)
 800077e:	695a      	ldr	r2, [r3, #20]
 8000780:	2380      	movs	r3, #128	; 0x80
 8000782:	029b      	lsls	r3, r3, #10
 8000784:	4013      	ands	r3, r2
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078a:	4b26      	ldr	r3, [pc, #152]	; (8000824 <MX_GPIO_Init+0xcc>)
 800078c:	695a      	ldr	r2, [r3, #20]
 800078e:	4b25      	ldr	r3, [pc, #148]	; (8000824 <MX_GPIO_Init+0xcc>)
 8000790:	2180      	movs	r1, #128	; 0x80
 8000792:	0309      	lsls	r1, r1, #12
 8000794:	430a      	orrs	r2, r1
 8000796:	615a      	str	r2, [r3, #20]
 8000798:	4b22      	ldr	r3, [pc, #136]	; (8000824 <MX_GPIO_Init+0xcc>)
 800079a:	695a      	ldr	r2, [r3, #20]
 800079c:	2380      	movs	r3, #128	; 0x80
 800079e:	031b      	lsls	r3, r3, #12
 80007a0:	4013      	ands	r3, r2
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a6:	4b1f      	ldr	r3, [pc, #124]	; (8000824 <MX_GPIO_Init+0xcc>)
 80007a8:	695a      	ldr	r2, [r3, #20]
 80007aa:	4b1e      	ldr	r3, [pc, #120]	; (8000824 <MX_GPIO_Init+0xcc>)
 80007ac:	2180      	movs	r1, #128	; 0x80
 80007ae:	02c9      	lsls	r1, r1, #11
 80007b0:	430a      	orrs	r2, r1
 80007b2:	615a      	str	r2, [r3, #20]
 80007b4:	4b1b      	ldr	r3, [pc, #108]	; (8000824 <MX_GPIO_Init+0xcc>)
 80007b6:	695a      	ldr	r2, [r3, #20]
 80007b8:	2380      	movs	r3, #128	; 0x80
 80007ba:	02db      	lsls	r3, r3, #11
 80007bc:	4013      	ands	r3, r2
 80007be:	603b      	str	r3, [r7, #0]
 80007c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 80007c2:	23c0      	movs	r3, #192	; 0xc0
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	4818      	ldr	r0, [pc, #96]	; (8000828 <MX_GPIO_Init+0xd0>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	0019      	movs	r1, r3
 80007cc:	f000 fc1e 	bl	800100c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007d0:	193b      	adds	r3, r7, r4
 80007d2:	2201      	movs	r2, #1
 80007d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80007d6:	193b      	adds	r3, r7, r4
 80007d8:	2290      	movs	r2, #144	; 0x90
 80007da:	0352      	lsls	r2, r2, #13
 80007dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	193b      	adds	r3, r7, r4
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007e4:	193a      	adds	r2, r7, r4
 80007e6:	2390      	movs	r3, #144	; 0x90
 80007e8:	05db      	lsls	r3, r3, #23
 80007ea:	0011      	movs	r1, r2
 80007ec:	0018      	movs	r0, r3
 80007ee:	f000 fa9d 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 80007f2:	0021      	movs	r1, r4
 80007f4:	187b      	adds	r3, r7, r1
 80007f6:	22c0      	movs	r2, #192	; 0xc0
 80007f8:	0092      	lsls	r2, r2, #2
 80007fa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fc:	187b      	adds	r3, r7, r1
 80007fe:	2201      	movs	r2, #1
 8000800:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	187b      	adds	r3, r7, r1
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000808:	187b      	adds	r3, r7, r1
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800080e:	187b      	adds	r3, r7, r1
 8000810:	4a05      	ldr	r2, [pc, #20]	; (8000828 <MX_GPIO_Init+0xd0>)
 8000812:	0019      	movs	r1, r3
 8000814:	0010      	movs	r0, r2
 8000816:	f000 fa89 	bl	8000d2c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	46bd      	mov	sp, r7
 800081e:	b009      	add	sp, #36	; 0x24
 8000820:	bd90      	pop	{r4, r7, pc}
 8000822:	46c0      	nop			; (mov r8, r8)
 8000824:	40021000 	.word	0x40021000
 8000828:	48000800 	.word	0x48000800

0800082c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000830:	b672      	cpsid	i
}
 8000832:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000834:	e7fe      	b.n	8000834 <Error_Handler+0x8>
	...

08000838 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083e:	4b0f      	ldr	r3, [pc, #60]	; (800087c <HAL_MspInit+0x44>)
 8000840:	699a      	ldr	r2, [r3, #24]
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <HAL_MspInit+0x44>)
 8000844:	2101      	movs	r1, #1
 8000846:	430a      	orrs	r2, r1
 8000848:	619a      	str	r2, [r3, #24]
 800084a:	4b0c      	ldr	r3, [pc, #48]	; (800087c <HAL_MspInit+0x44>)
 800084c:	699b      	ldr	r3, [r3, #24]
 800084e:	2201      	movs	r2, #1
 8000850:	4013      	ands	r3, r2
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000856:	4b09      	ldr	r3, [pc, #36]	; (800087c <HAL_MspInit+0x44>)
 8000858:	69da      	ldr	r2, [r3, #28]
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <HAL_MspInit+0x44>)
 800085c:	2180      	movs	r1, #128	; 0x80
 800085e:	0549      	lsls	r1, r1, #21
 8000860:	430a      	orrs	r2, r1
 8000862:	61da      	str	r2, [r3, #28]
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <HAL_MspInit+0x44>)
 8000866:	69da      	ldr	r2, [r3, #28]
 8000868:	2380      	movs	r3, #128	; 0x80
 800086a:	055b      	lsls	r3, r3, #21
 800086c:	4013      	ands	r3, r2
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	46bd      	mov	sp, r7
 8000876:	b002      	add	sp, #8
 8000878:	bd80      	pop	{r7, pc}
 800087a:	46c0      	nop			; (mov r8, r8)
 800087c:	40021000 	.word	0x40021000

08000880 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000880:	b590      	push	{r4, r7, lr}
 8000882:	b08b      	sub	sp, #44	; 0x2c
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000888:	2414      	movs	r4, #20
 800088a:	193b      	adds	r3, r7, r4
 800088c:	0018      	movs	r0, r3
 800088e:	2314      	movs	r3, #20
 8000890:	001a      	movs	r2, r3
 8000892:	2100      	movs	r1, #0
 8000894:	f002 fb86 	bl	8002fa4 <memset>
  if(hi2c->Instance==I2C1)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a1c      	ldr	r2, [pc, #112]	; (8000910 <HAL_I2C_MspInit+0x90>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d131      	bne.n	8000906 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a2:	4b1c      	ldr	r3, [pc, #112]	; (8000914 <HAL_I2C_MspInit+0x94>)
 80008a4:	695a      	ldr	r2, [r3, #20]
 80008a6:	4b1b      	ldr	r3, [pc, #108]	; (8000914 <HAL_I2C_MspInit+0x94>)
 80008a8:	2180      	movs	r1, #128	; 0x80
 80008aa:	02c9      	lsls	r1, r1, #11
 80008ac:	430a      	orrs	r2, r1
 80008ae:	615a      	str	r2, [r3, #20]
 80008b0:	4b18      	ldr	r3, [pc, #96]	; (8000914 <HAL_I2C_MspInit+0x94>)
 80008b2:	695a      	ldr	r2, [r3, #20]
 80008b4:	2380      	movs	r3, #128	; 0x80
 80008b6:	02db      	lsls	r3, r3, #11
 80008b8:	4013      	ands	r3, r2
 80008ba:	613b      	str	r3, [r7, #16]
 80008bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008be:	0021      	movs	r1, r4
 80008c0:	187b      	adds	r3, r7, r1
 80008c2:	22c0      	movs	r2, #192	; 0xc0
 80008c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008c6:	187b      	adds	r3, r7, r1
 80008c8:	2212      	movs	r2, #18
 80008ca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	187b      	adds	r3, r7, r1
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008d2:	187b      	adds	r3, r7, r1
 80008d4:	2203      	movs	r2, #3
 80008d6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80008d8:	187b      	adds	r3, r7, r1
 80008da:	2201      	movs	r2, #1
 80008dc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008de:	187b      	adds	r3, r7, r1
 80008e0:	4a0d      	ldr	r2, [pc, #52]	; (8000918 <HAL_I2C_MspInit+0x98>)
 80008e2:	0019      	movs	r1, r3
 80008e4:	0010      	movs	r0, r2
 80008e6:	f000 fa21 	bl	8000d2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008ea:	4b0a      	ldr	r3, [pc, #40]	; (8000914 <HAL_I2C_MspInit+0x94>)
 80008ec:	69da      	ldr	r2, [r3, #28]
 80008ee:	4b09      	ldr	r3, [pc, #36]	; (8000914 <HAL_I2C_MspInit+0x94>)
 80008f0:	2180      	movs	r1, #128	; 0x80
 80008f2:	0389      	lsls	r1, r1, #14
 80008f4:	430a      	orrs	r2, r1
 80008f6:	61da      	str	r2, [r3, #28]
 80008f8:	4b06      	ldr	r3, [pc, #24]	; (8000914 <HAL_I2C_MspInit+0x94>)
 80008fa:	69da      	ldr	r2, [r3, #28]
 80008fc:	2380      	movs	r3, #128	; 0x80
 80008fe:	039b      	lsls	r3, r3, #14
 8000900:	4013      	ands	r3, r2
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	46bd      	mov	sp, r7
 800090a:	b00b      	add	sp, #44	; 0x2c
 800090c:	bd90      	pop	{r4, r7, pc}
 800090e:	46c0      	nop			; (mov r8, r8)
 8000910:	40005400 	.word	0x40005400
 8000914:	40021000 	.word	0x40021000
 8000918:	48000400 	.word	0x48000400

0800091c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800091c:	b590      	push	{r4, r7, lr}
 800091e:	b08b      	sub	sp, #44	; 0x2c
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000924:	2414      	movs	r4, #20
 8000926:	193b      	adds	r3, r7, r4
 8000928:	0018      	movs	r0, r3
 800092a:	2314      	movs	r3, #20
 800092c:	001a      	movs	r2, r3
 800092e:	2100      	movs	r1, #0
 8000930:	f002 fb38 	bl	8002fa4 <memset>
  if(huart->Instance==USART1)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a1d      	ldr	r2, [pc, #116]	; (80009b0 <HAL_UART_MspInit+0x94>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d133      	bne.n	80009a6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800093e:	4b1d      	ldr	r3, [pc, #116]	; (80009b4 <HAL_UART_MspInit+0x98>)
 8000940:	699a      	ldr	r2, [r3, #24]
 8000942:	4b1c      	ldr	r3, [pc, #112]	; (80009b4 <HAL_UART_MspInit+0x98>)
 8000944:	2180      	movs	r1, #128	; 0x80
 8000946:	01c9      	lsls	r1, r1, #7
 8000948:	430a      	orrs	r2, r1
 800094a:	619a      	str	r2, [r3, #24]
 800094c:	4b19      	ldr	r3, [pc, #100]	; (80009b4 <HAL_UART_MspInit+0x98>)
 800094e:	699a      	ldr	r2, [r3, #24]
 8000950:	2380      	movs	r3, #128	; 0x80
 8000952:	01db      	lsls	r3, r3, #7
 8000954:	4013      	ands	r3, r2
 8000956:	613b      	str	r3, [r7, #16]
 8000958:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	4b16      	ldr	r3, [pc, #88]	; (80009b4 <HAL_UART_MspInit+0x98>)
 800095c:	695a      	ldr	r2, [r3, #20]
 800095e:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <HAL_UART_MspInit+0x98>)
 8000960:	2180      	movs	r1, #128	; 0x80
 8000962:	0289      	lsls	r1, r1, #10
 8000964:	430a      	orrs	r2, r1
 8000966:	615a      	str	r2, [r3, #20]
 8000968:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <HAL_UART_MspInit+0x98>)
 800096a:	695a      	ldr	r2, [r3, #20]
 800096c:	2380      	movs	r3, #128	; 0x80
 800096e:	029b      	lsls	r3, r3, #10
 8000970:	4013      	ands	r3, r2
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000976:	193b      	adds	r3, r7, r4
 8000978:	22c0      	movs	r2, #192	; 0xc0
 800097a:	00d2      	lsls	r2, r2, #3
 800097c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097e:	0021      	movs	r1, r4
 8000980:	187b      	adds	r3, r7, r1
 8000982:	2202      	movs	r2, #2
 8000984:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	187b      	adds	r3, r7, r1
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800098c:	187b      	adds	r3, r7, r1
 800098e:	2203      	movs	r2, #3
 8000990:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000992:	187b      	adds	r3, r7, r1
 8000994:	2201      	movs	r2, #1
 8000996:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000998:	187a      	adds	r2, r7, r1
 800099a:	2390      	movs	r3, #144	; 0x90
 800099c:	05db      	lsls	r3, r3, #23
 800099e:	0011      	movs	r1, r2
 80009a0:	0018      	movs	r0, r3
 80009a2:	f000 f9c3 	bl	8000d2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80009a6:	46c0      	nop			; (mov r8, r8)
 80009a8:	46bd      	mov	sp, r7
 80009aa:	b00b      	add	sp, #44	; 0x2c
 80009ac:	bd90      	pop	{r4, r7, pc}
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	40013800 	.word	0x40013800
 80009b4:	40021000 	.word	0x40021000

080009b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <NMI_Handler+0x4>

080009be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c2:	e7fe      	b.n	80009c2 <HardFault_Handler+0x4>

080009c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009c8:	46c0      	nop			; (mov r8, r8)
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}

080009ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ce:	b580      	push	{r7, lr}
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009d2:	46c0      	nop			; (mov r8, r8)
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009dc:	f000 f8b2 	bl	8000b44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e0:	46c0      	nop			; (mov r8, r8)
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
	...

080009e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009f0:	4a14      	ldr	r2, [pc, #80]	; (8000a44 <_sbrk+0x5c>)
 80009f2:	4b15      	ldr	r3, [pc, #84]	; (8000a48 <_sbrk+0x60>)
 80009f4:	1ad3      	subs	r3, r2, r3
 80009f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009fc:	4b13      	ldr	r3, [pc, #76]	; (8000a4c <_sbrk+0x64>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d102      	bne.n	8000a0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a04:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <_sbrk+0x64>)
 8000a06:	4a12      	ldr	r2, [pc, #72]	; (8000a50 <_sbrk+0x68>)
 8000a08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a0a:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <_sbrk+0x64>)
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	18d3      	adds	r3, r2, r3
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d207      	bcs.n	8000a28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a18:	f002 facc 	bl	8002fb4 <__errno>
 8000a1c:	0003      	movs	r3, r0
 8000a1e:	220c      	movs	r2, #12
 8000a20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a22:	2301      	movs	r3, #1
 8000a24:	425b      	negs	r3, r3
 8000a26:	e009      	b.n	8000a3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a28:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <_sbrk+0x64>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a2e:	4b07      	ldr	r3, [pc, #28]	; (8000a4c <_sbrk+0x64>)
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	18d2      	adds	r2, r2, r3
 8000a36:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <_sbrk+0x64>)
 8000a38:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000a3a:	68fb      	ldr	r3, [r7, #12]
}
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	b006      	add	sp, #24
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20002000 	.word	0x20002000
 8000a48:	00000400 	.word	0x00000400
 8000a4c:	20000154 	.word	0x20000154
 8000a50:	200002a8 	.word	0x200002a8

08000a54 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000a58:	46c0      	nop			; (mov r8, r8)
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
	...

08000a60 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a60:	480d      	ldr	r0, [pc, #52]	; (8000a98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a62:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 8000a64:	f7ff fff6 	bl	8000a54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a68:	480c      	ldr	r0, [pc, #48]	; (8000a9c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a6a:	490d      	ldr	r1, [pc, #52]	; (8000aa0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a6c:	4a0d      	ldr	r2, [pc, #52]	; (8000aa4 <LoopForever+0xe>)
  movs r3, #0
 8000a6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a70:	e002      	b.n	8000a78 <LoopCopyDataInit>

08000a72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a76:	3304      	adds	r3, #4

08000a78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a7c:	d3f9      	bcc.n	8000a72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a7e:	4a0a      	ldr	r2, [pc, #40]	; (8000aa8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a80:	4c0a      	ldr	r4, [pc, #40]	; (8000aac <LoopForever+0x16>)
  movs r3, #0
 8000a82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a84:	e001      	b.n	8000a8a <LoopFillZerobss>

08000a86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a88:	3204      	adds	r2, #4

08000a8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a8c:	d3fb      	bcc.n	8000a86 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a8e:	f002 fa97 	bl	8002fc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a92:	f7ff fcc1 	bl	8000418 <main>

08000a96 <LoopForever>:

LoopForever:
    b LoopForever
 8000a96:	e7fe      	b.n	8000a96 <LoopForever>
  ldr   r0, =_estack
 8000a98:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000a9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aa0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000aa4:	080039e0 	.word	0x080039e0
  ldr r2, =_sbss
 8000aa8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000aac:	200002a4 	.word	0x200002a4

08000ab0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ab0:	e7fe      	b.n	8000ab0 <ADC1_COMP_IRQHandler>
	...

08000ab4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab8:	4b07      	ldr	r3, [pc, #28]	; (8000ad8 <HAL_Init+0x24>)
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <HAL_Init+0x24>)
 8000abe:	2110      	movs	r1, #16
 8000ac0:	430a      	orrs	r2, r1
 8000ac2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000ac4:	2000      	movs	r0, #0
 8000ac6:	f000 f809 	bl	8000adc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aca:	f7ff feb5 	bl	8000838 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ace:	2300      	movs	r3, #0
}
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	40022000 	.word	0x40022000

08000adc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000adc:	b590      	push	{r4, r7, lr}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ae4:	4b14      	ldr	r3, [pc, #80]	; (8000b38 <HAL_InitTick+0x5c>)
 8000ae6:	681c      	ldr	r4, [r3, #0]
 8000ae8:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <HAL_InitTick+0x60>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	0019      	movs	r1, r3
 8000aee:	23fa      	movs	r3, #250	; 0xfa
 8000af0:	0098      	lsls	r0, r3, #2
 8000af2:	f7ff fb1b 	bl	800012c <__udivsi3>
 8000af6:	0003      	movs	r3, r0
 8000af8:	0019      	movs	r1, r3
 8000afa:	0020      	movs	r0, r4
 8000afc:	f7ff fb16 	bl	800012c <__udivsi3>
 8000b00:	0003      	movs	r3, r0
 8000b02:	0018      	movs	r0, r3
 8000b04:	f000 f905 	bl	8000d12 <HAL_SYSTICK_Config>
 8000b08:	1e03      	subs	r3, r0, #0
 8000b0a:	d001      	beq.n	8000b10 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	e00f      	b.n	8000b30 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2b03      	cmp	r3, #3
 8000b14:	d80b      	bhi.n	8000b2e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b16:	6879      	ldr	r1, [r7, #4]
 8000b18:	2301      	movs	r3, #1
 8000b1a:	425b      	negs	r3, r3
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	0018      	movs	r0, r3
 8000b20:	f000 f8e2 	bl	8000ce8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <HAL_InitTick+0x64>)
 8000b26:	687a      	ldr	r2, [r7, #4]
 8000b28:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	e000      	b.n	8000b30 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
}
 8000b30:	0018      	movs	r0, r3
 8000b32:	46bd      	mov	sp, r7
 8000b34:	b003      	add	sp, #12
 8000b36:	bd90      	pop	{r4, r7, pc}
 8000b38:	20000000 	.word	0x20000000
 8000b3c:	20000008 	.word	0x20000008
 8000b40:	20000004 	.word	0x20000004

08000b44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b48:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <HAL_IncTick+0x1c>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	001a      	movs	r2, r3
 8000b4e:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <HAL_IncTick+0x20>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	18d2      	adds	r2, r2, r3
 8000b54:	4b03      	ldr	r3, [pc, #12]	; (8000b64 <HAL_IncTick+0x20>)
 8000b56:	601a      	str	r2, [r3, #0]
}
 8000b58:	46c0      	nop			; (mov r8, r8)
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	20000008 	.word	0x20000008
 8000b64:	20000158 	.word	0x20000158

08000b68 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b6c:	4b02      	ldr	r3, [pc, #8]	; (8000b78 <HAL_GetTick+0x10>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
}
 8000b70:	0018      	movs	r0, r3
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	46c0      	nop			; (mov r8, r8)
 8000b78:	20000158 	.word	0x20000158

08000b7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b84:	f7ff fff0 	bl	8000b68 <HAL_GetTick>
 8000b88:	0003      	movs	r3, r0
 8000b8a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	3301      	adds	r3, #1
 8000b94:	d005      	beq.n	8000ba2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b96:	4b0a      	ldr	r3, [pc, #40]	; (8000bc0 <HAL_Delay+0x44>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	001a      	movs	r2, r3
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	189b      	adds	r3, r3, r2
 8000ba0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	f7ff ffe0 	bl	8000b68 <HAL_GetTick>
 8000ba8:	0002      	movs	r2, r0
 8000baa:	68bb      	ldr	r3, [r7, #8]
 8000bac:	1ad3      	subs	r3, r2, r3
 8000bae:	68fa      	ldr	r2, [r7, #12]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d8f7      	bhi.n	8000ba4 <HAL_Delay+0x28>
  {
  }
}
 8000bb4:	46c0      	nop			; (mov r8, r8)
 8000bb6:	46c0      	nop			; (mov r8, r8)
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	b004      	add	sp, #16
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	20000008 	.word	0x20000008

08000bc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bc4:	b590      	push	{r4, r7, lr}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	0002      	movs	r2, r0
 8000bcc:	6039      	str	r1, [r7, #0]
 8000bce:	1dfb      	adds	r3, r7, #7
 8000bd0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bd2:	1dfb      	adds	r3, r7, #7
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	2b7f      	cmp	r3, #127	; 0x7f
 8000bd8:	d828      	bhi.n	8000c2c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bda:	4a2f      	ldr	r2, [pc, #188]	; (8000c98 <__NVIC_SetPriority+0xd4>)
 8000bdc:	1dfb      	adds	r3, r7, #7
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	b25b      	sxtb	r3, r3
 8000be2:	089b      	lsrs	r3, r3, #2
 8000be4:	33c0      	adds	r3, #192	; 0xc0
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	589b      	ldr	r3, [r3, r2]
 8000bea:	1dfa      	adds	r2, r7, #7
 8000bec:	7812      	ldrb	r2, [r2, #0]
 8000bee:	0011      	movs	r1, r2
 8000bf0:	2203      	movs	r2, #3
 8000bf2:	400a      	ands	r2, r1
 8000bf4:	00d2      	lsls	r2, r2, #3
 8000bf6:	21ff      	movs	r1, #255	; 0xff
 8000bf8:	4091      	lsls	r1, r2
 8000bfa:	000a      	movs	r2, r1
 8000bfc:	43d2      	mvns	r2, r2
 8000bfe:	401a      	ands	r2, r3
 8000c00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	019b      	lsls	r3, r3, #6
 8000c06:	22ff      	movs	r2, #255	; 0xff
 8000c08:	401a      	ands	r2, r3
 8000c0a:	1dfb      	adds	r3, r7, #7
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	0018      	movs	r0, r3
 8000c10:	2303      	movs	r3, #3
 8000c12:	4003      	ands	r3, r0
 8000c14:	00db      	lsls	r3, r3, #3
 8000c16:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c18:	481f      	ldr	r0, [pc, #124]	; (8000c98 <__NVIC_SetPriority+0xd4>)
 8000c1a:	1dfb      	adds	r3, r7, #7
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	b25b      	sxtb	r3, r3
 8000c20:	089b      	lsrs	r3, r3, #2
 8000c22:	430a      	orrs	r2, r1
 8000c24:	33c0      	adds	r3, #192	; 0xc0
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c2a:	e031      	b.n	8000c90 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c2c:	4a1b      	ldr	r2, [pc, #108]	; (8000c9c <__NVIC_SetPriority+0xd8>)
 8000c2e:	1dfb      	adds	r3, r7, #7
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	0019      	movs	r1, r3
 8000c34:	230f      	movs	r3, #15
 8000c36:	400b      	ands	r3, r1
 8000c38:	3b08      	subs	r3, #8
 8000c3a:	089b      	lsrs	r3, r3, #2
 8000c3c:	3306      	adds	r3, #6
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	18d3      	adds	r3, r2, r3
 8000c42:	3304      	adds	r3, #4
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	1dfa      	adds	r2, r7, #7
 8000c48:	7812      	ldrb	r2, [r2, #0]
 8000c4a:	0011      	movs	r1, r2
 8000c4c:	2203      	movs	r2, #3
 8000c4e:	400a      	ands	r2, r1
 8000c50:	00d2      	lsls	r2, r2, #3
 8000c52:	21ff      	movs	r1, #255	; 0xff
 8000c54:	4091      	lsls	r1, r2
 8000c56:	000a      	movs	r2, r1
 8000c58:	43d2      	mvns	r2, r2
 8000c5a:	401a      	ands	r2, r3
 8000c5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	019b      	lsls	r3, r3, #6
 8000c62:	22ff      	movs	r2, #255	; 0xff
 8000c64:	401a      	ands	r2, r3
 8000c66:	1dfb      	adds	r3, r7, #7
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	4003      	ands	r3, r0
 8000c70:	00db      	lsls	r3, r3, #3
 8000c72:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c74:	4809      	ldr	r0, [pc, #36]	; (8000c9c <__NVIC_SetPriority+0xd8>)
 8000c76:	1dfb      	adds	r3, r7, #7
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	001c      	movs	r4, r3
 8000c7c:	230f      	movs	r3, #15
 8000c7e:	4023      	ands	r3, r4
 8000c80:	3b08      	subs	r3, #8
 8000c82:	089b      	lsrs	r3, r3, #2
 8000c84:	430a      	orrs	r2, r1
 8000c86:	3306      	adds	r3, #6
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	18c3      	adds	r3, r0, r3
 8000c8c:	3304      	adds	r3, #4
 8000c8e:	601a      	str	r2, [r3, #0]
}
 8000c90:	46c0      	nop			; (mov r8, r8)
 8000c92:	46bd      	mov	sp, r7
 8000c94:	b003      	add	sp, #12
 8000c96:	bd90      	pop	{r4, r7, pc}
 8000c98:	e000e100 	.word	0xe000e100
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	1e5a      	subs	r2, r3, #1
 8000cac:	2380      	movs	r3, #128	; 0x80
 8000cae:	045b      	lsls	r3, r3, #17
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d301      	bcc.n	8000cb8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	e010      	b.n	8000cda <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cb8:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <SysTick_Config+0x44>)
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	3a01      	subs	r2, #1
 8000cbe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	425b      	negs	r3, r3
 8000cc4:	2103      	movs	r1, #3
 8000cc6:	0018      	movs	r0, r3
 8000cc8:	f7ff ff7c 	bl	8000bc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ccc:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <SysTick_Config+0x44>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cd2:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <SysTick_Config+0x44>)
 8000cd4:	2207      	movs	r2, #7
 8000cd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	0018      	movs	r0, r3
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	b002      	add	sp, #8
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	e000e010 	.word	0xe000e010

08000ce8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60b9      	str	r1, [r7, #8]
 8000cf0:	607a      	str	r2, [r7, #4]
 8000cf2:	210f      	movs	r1, #15
 8000cf4:	187b      	adds	r3, r7, r1
 8000cf6:	1c02      	adds	r2, r0, #0
 8000cf8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000cfa:	68ba      	ldr	r2, [r7, #8]
 8000cfc:	187b      	adds	r3, r7, r1
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	b25b      	sxtb	r3, r3
 8000d02:	0011      	movs	r1, r2
 8000d04:	0018      	movs	r0, r3
 8000d06:	f7ff ff5d 	bl	8000bc4 <__NVIC_SetPriority>
}
 8000d0a:	46c0      	nop			; (mov r8, r8)
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	b004      	add	sp, #16
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b082      	sub	sp, #8
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	f7ff ffbf 	bl	8000ca0 <SysTick_Config>
 8000d22:	0003      	movs	r3, r0
}
 8000d24:	0018      	movs	r0, r3
 8000d26:	46bd      	mov	sp, r7
 8000d28:	b002      	add	sp, #8
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d36:	2300      	movs	r3, #0
 8000d38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d3a:	e14f      	b.n	8000fdc <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2101      	movs	r1, #1
 8000d42:	697a      	ldr	r2, [r7, #20]
 8000d44:	4091      	lsls	r1, r2
 8000d46:	000a      	movs	r2, r1
 8000d48:	4013      	ands	r3, r2
 8000d4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d100      	bne.n	8000d54 <HAL_GPIO_Init+0x28>
 8000d52:	e140      	b.n	8000fd6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	2203      	movs	r2, #3
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d005      	beq.n	8000d6c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	2203      	movs	r2, #3
 8000d66:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d68:	2b02      	cmp	r3, #2
 8000d6a:	d130      	bne.n	8000dce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	689b      	ldr	r3, [r3, #8]
 8000d70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	2203      	movs	r2, #3
 8000d78:	409a      	lsls	r2, r3
 8000d7a:	0013      	movs	r3, r2
 8000d7c:	43da      	mvns	r2, r3
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	4013      	ands	r3, r2
 8000d82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	68da      	ldr	r2, [r3, #12]
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	409a      	lsls	r2, r3
 8000d8e:	0013      	movs	r3, r2
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000da2:	2201      	movs	r2, #1
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	409a      	lsls	r2, r3
 8000da8:	0013      	movs	r3, r2
 8000daa:	43da      	mvns	r2, r3
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	4013      	ands	r3, r2
 8000db0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	091b      	lsrs	r3, r3, #4
 8000db8:	2201      	movs	r2, #1
 8000dba:	401a      	ands	r2, r3
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	409a      	lsls	r2, r3
 8000dc0:	0013      	movs	r3, r2
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	2203      	movs	r2, #3
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	2b03      	cmp	r3, #3
 8000dd8:	d017      	beq.n	8000e0a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	68db      	ldr	r3, [r3, #12]
 8000dde:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	2203      	movs	r2, #3
 8000de6:	409a      	lsls	r2, r3
 8000de8:	0013      	movs	r3, r2
 8000dea:	43da      	mvns	r2, r3
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	4013      	ands	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	689a      	ldr	r2, [r3, #8]
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	409a      	lsls	r2, r3
 8000dfc:	0013      	movs	r3, r2
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	2203      	movs	r2, #3
 8000e10:	4013      	ands	r3, r2
 8000e12:	2b02      	cmp	r3, #2
 8000e14:	d123      	bne.n	8000e5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	08da      	lsrs	r2, r3, #3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	3208      	adds	r2, #8
 8000e1e:	0092      	lsls	r2, r2, #2
 8000e20:	58d3      	ldr	r3, [r2, r3]
 8000e22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	2207      	movs	r2, #7
 8000e28:	4013      	ands	r3, r2
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	220f      	movs	r2, #15
 8000e2e:	409a      	lsls	r2, r3
 8000e30:	0013      	movs	r3, r2
 8000e32:	43da      	mvns	r2, r3
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	4013      	ands	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	691a      	ldr	r2, [r3, #16]
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	2107      	movs	r1, #7
 8000e42:	400b      	ands	r3, r1
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	409a      	lsls	r2, r3
 8000e48:	0013      	movs	r3, r2
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	08da      	lsrs	r2, r3, #3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	3208      	adds	r2, #8
 8000e58:	0092      	lsls	r2, r2, #2
 8000e5a:	6939      	ldr	r1, [r7, #16]
 8000e5c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	2203      	movs	r2, #3
 8000e6a:	409a      	lsls	r2, r3
 8000e6c:	0013      	movs	r3, r2
 8000e6e:	43da      	mvns	r2, r3
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	4013      	ands	r3, r2
 8000e74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	2203      	movs	r2, #3
 8000e7c:	401a      	ands	r2, r3
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	409a      	lsls	r2, r3
 8000e84:	0013      	movs	r3, r2
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685a      	ldr	r2, [r3, #4]
 8000e96:	23c0      	movs	r3, #192	; 0xc0
 8000e98:	029b      	lsls	r3, r3, #10
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	d100      	bne.n	8000ea0 <HAL_GPIO_Init+0x174>
 8000e9e:	e09a      	b.n	8000fd6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea0:	4b54      	ldr	r3, [pc, #336]	; (8000ff4 <HAL_GPIO_Init+0x2c8>)
 8000ea2:	699a      	ldr	r2, [r3, #24]
 8000ea4:	4b53      	ldr	r3, [pc, #332]	; (8000ff4 <HAL_GPIO_Init+0x2c8>)
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	430a      	orrs	r2, r1
 8000eaa:	619a      	str	r2, [r3, #24]
 8000eac:	4b51      	ldr	r3, [pc, #324]	; (8000ff4 <HAL_GPIO_Init+0x2c8>)
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	60bb      	str	r3, [r7, #8]
 8000eb6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000eb8:	4a4f      	ldr	r2, [pc, #316]	; (8000ff8 <HAL_GPIO_Init+0x2cc>)
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	089b      	lsrs	r3, r3, #2
 8000ebe:	3302      	adds	r3, #2
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	589b      	ldr	r3, [r3, r2]
 8000ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	2203      	movs	r2, #3
 8000eca:	4013      	ands	r3, r2
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	220f      	movs	r2, #15
 8000ed0:	409a      	lsls	r2, r3
 8000ed2:	0013      	movs	r3, r2
 8000ed4:	43da      	mvns	r2, r3
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	2390      	movs	r3, #144	; 0x90
 8000ee0:	05db      	lsls	r3, r3, #23
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	d013      	beq.n	8000f0e <HAL_GPIO_Init+0x1e2>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a44      	ldr	r2, [pc, #272]	; (8000ffc <HAL_GPIO_Init+0x2d0>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d00d      	beq.n	8000f0a <HAL_GPIO_Init+0x1de>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a43      	ldr	r2, [pc, #268]	; (8001000 <HAL_GPIO_Init+0x2d4>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d007      	beq.n	8000f06 <HAL_GPIO_Init+0x1da>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a42      	ldr	r2, [pc, #264]	; (8001004 <HAL_GPIO_Init+0x2d8>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d101      	bne.n	8000f02 <HAL_GPIO_Init+0x1d6>
 8000efe:	2303      	movs	r3, #3
 8000f00:	e006      	b.n	8000f10 <HAL_GPIO_Init+0x1e4>
 8000f02:	2305      	movs	r3, #5
 8000f04:	e004      	b.n	8000f10 <HAL_GPIO_Init+0x1e4>
 8000f06:	2302      	movs	r3, #2
 8000f08:	e002      	b.n	8000f10 <HAL_GPIO_Init+0x1e4>
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e000      	b.n	8000f10 <HAL_GPIO_Init+0x1e4>
 8000f0e:	2300      	movs	r3, #0
 8000f10:	697a      	ldr	r2, [r7, #20]
 8000f12:	2103      	movs	r1, #3
 8000f14:	400a      	ands	r2, r1
 8000f16:	0092      	lsls	r2, r2, #2
 8000f18:	4093      	lsls	r3, r2
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f20:	4935      	ldr	r1, [pc, #212]	; (8000ff8 <HAL_GPIO_Init+0x2cc>)
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	089b      	lsrs	r3, r3, #2
 8000f26:	3302      	adds	r3, #2
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f2e:	4b36      	ldr	r3, [pc, #216]	; (8001008 <HAL_GPIO_Init+0x2dc>)
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	43da      	mvns	r2, r3
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685a      	ldr	r2, [r3, #4]
 8000f42:	2380      	movs	r3, #128	; 0x80
 8000f44:	035b      	lsls	r3, r3, #13
 8000f46:	4013      	ands	r3, r2
 8000f48:	d003      	beq.n	8000f52 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f52:	4b2d      	ldr	r3, [pc, #180]	; (8001008 <HAL_GPIO_Init+0x2dc>)
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000f58:	4b2b      	ldr	r3, [pc, #172]	; (8001008 <HAL_GPIO_Init+0x2dc>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	43da      	mvns	r2, r3
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	4013      	ands	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685a      	ldr	r2, [r3, #4]
 8000f6c:	2380      	movs	r3, #128	; 0x80
 8000f6e:	039b      	lsls	r3, r3, #14
 8000f70:	4013      	ands	r3, r2
 8000f72:	d003      	beq.n	8000f7c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f7c:	4b22      	ldr	r3, [pc, #136]	; (8001008 <HAL_GPIO_Init+0x2dc>)
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000f82:	4b21      	ldr	r3, [pc, #132]	; (8001008 <HAL_GPIO_Init+0x2dc>)
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	43da      	mvns	r2, r3
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685a      	ldr	r2, [r3, #4]
 8000f96:	2380      	movs	r3, #128	; 0x80
 8000f98:	029b      	lsls	r3, r3, #10
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	d003      	beq.n	8000fa6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000fa6:	4b18      	ldr	r3, [pc, #96]	; (8001008 <HAL_GPIO_Init+0x2dc>)
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000fac:	4b16      	ldr	r3, [pc, #88]	; (8001008 <HAL_GPIO_Init+0x2dc>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	43da      	mvns	r2, r3
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685a      	ldr	r2, [r3, #4]
 8000fc0:	2380      	movs	r3, #128	; 0x80
 8000fc2:	025b      	lsls	r3, r3, #9
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	d003      	beq.n	8000fd0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fd0:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <HAL_GPIO_Init+0x2dc>)
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	40da      	lsrs	r2, r3
 8000fe4:	1e13      	subs	r3, r2, #0
 8000fe6:	d000      	beq.n	8000fea <HAL_GPIO_Init+0x2be>
 8000fe8:	e6a8      	b.n	8000d3c <HAL_GPIO_Init+0x10>
  } 
}
 8000fea:	46c0      	nop			; (mov r8, r8)
 8000fec:	46c0      	nop			; (mov r8, r8)
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	b006      	add	sp, #24
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	40010000 	.word	0x40010000
 8000ffc:	48000400 	.word	0x48000400
 8001000:	48000800 	.word	0x48000800
 8001004:	48000c00 	.word	0x48000c00
 8001008:	40010400 	.word	0x40010400

0800100c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	0008      	movs	r0, r1
 8001016:	0011      	movs	r1, r2
 8001018:	1cbb      	adds	r3, r7, #2
 800101a:	1c02      	adds	r2, r0, #0
 800101c:	801a      	strh	r2, [r3, #0]
 800101e:	1c7b      	adds	r3, r7, #1
 8001020:	1c0a      	adds	r2, r1, #0
 8001022:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001024:	1c7b      	adds	r3, r7, #1
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d004      	beq.n	8001036 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800102c:	1cbb      	adds	r3, r7, #2
 800102e:	881a      	ldrh	r2, [r3, #0]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001034:	e003      	b.n	800103e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001036:	1cbb      	adds	r3, r7, #2
 8001038:	881a      	ldrh	r2, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800103e:	46c0      	nop			; (mov r8, r8)
 8001040:	46bd      	mov	sp, r7
 8001042:	b002      	add	sp, #8
 8001044:	bd80      	pop	{r7, pc}
	...

08001048 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d101      	bne.n	800105a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e082      	b.n	8001160 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2241      	movs	r2, #65	; 0x41
 800105e:	5c9b      	ldrb	r3, [r3, r2]
 8001060:	b2db      	uxtb	r3, r3
 8001062:	2b00      	cmp	r3, #0
 8001064:	d107      	bne.n	8001076 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2240      	movs	r2, #64	; 0x40
 800106a:	2100      	movs	r1, #0
 800106c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	0018      	movs	r0, r3
 8001072:	f7ff fc05 	bl	8000880 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2241      	movs	r2, #65	; 0x41
 800107a:	2124      	movs	r1, #36	; 0x24
 800107c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2101      	movs	r1, #1
 800108a:	438a      	bics	r2, r1
 800108c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	685a      	ldr	r2, [r3, #4]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4934      	ldr	r1, [pc, #208]	; (8001168 <HAL_I2C_Init+0x120>)
 8001098:	400a      	ands	r2, r1
 800109a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	689a      	ldr	r2, [r3, #8]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4931      	ldr	r1, [pc, #196]	; (800116c <HAL_I2C_Init+0x124>)
 80010a8:	400a      	ands	r2, r1
 80010aa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d108      	bne.n	80010c6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	689a      	ldr	r2, [r3, #8]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2180      	movs	r1, #128	; 0x80
 80010be:	0209      	lsls	r1, r1, #8
 80010c0:	430a      	orrs	r2, r1
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	e007      	b.n	80010d6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	689a      	ldr	r2, [r3, #8]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2184      	movs	r1, #132	; 0x84
 80010d0:	0209      	lsls	r1, r1, #8
 80010d2:	430a      	orrs	r2, r1
 80010d4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	68db      	ldr	r3, [r3, #12]
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d104      	bne.n	80010e8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2280      	movs	r2, #128	; 0x80
 80010e4:	0112      	lsls	r2, r2, #4
 80010e6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	685a      	ldr	r2, [r3, #4]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	491f      	ldr	r1, [pc, #124]	; (8001170 <HAL_I2C_Init+0x128>)
 80010f4:	430a      	orrs	r2, r1
 80010f6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	68da      	ldr	r2, [r3, #12]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	491a      	ldr	r1, [pc, #104]	; (800116c <HAL_I2C_Init+0x124>)
 8001104:	400a      	ands	r2, r1
 8001106:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	691a      	ldr	r2, [r3, #16]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	695b      	ldr	r3, [r3, #20]
 8001110:	431a      	orrs	r2, r3
 8001112:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	430a      	orrs	r2, r1
 8001120:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	69d9      	ldr	r1, [r3, #28]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6a1a      	ldr	r2, [r3, #32]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	430a      	orrs	r2, r1
 8001130:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2101      	movs	r1, #1
 800113e:	430a      	orrs	r2, r1
 8001140:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2200      	movs	r2, #0
 8001146:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2241      	movs	r2, #65	; 0x41
 800114c:	2120      	movs	r1, #32
 800114e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2200      	movs	r2, #0
 8001154:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2242      	movs	r2, #66	; 0x42
 800115a:	2100      	movs	r1, #0
 800115c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800115e:	2300      	movs	r3, #0
}
 8001160:	0018      	movs	r0, r3
 8001162:	46bd      	mov	sp, r7
 8001164:	b002      	add	sp, #8
 8001166:	bd80      	pop	{r7, pc}
 8001168:	f0ffffff 	.word	0xf0ffffff
 800116c:	ffff7fff 	.word	0xffff7fff
 8001170:	02008000 	.word	0x02008000

08001174 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001174:	b590      	push	{r4, r7, lr}
 8001176:	b089      	sub	sp, #36	; 0x24
 8001178:	af02      	add	r7, sp, #8
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	0008      	movs	r0, r1
 800117e:	607a      	str	r2, [r7, #4]
 8001180:	0019      	movs	r1, r3
 8001182:	230a      	movs	r3, #10
 8001184:	18fb      	adds	r3, r7, r3
 8001186:	1c02      	adds	r2, r0, #0
 8001188:	801a      	strh	r2, [r3, #0]
 800118a:	2308      	movs	r3, #8
 800118c:	18fb      	adds	r3, r7, r3
 800118e:	1c0a      	adds	r2, r1, #0
 8001190:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	2241      	movs	r2, #65	; 0x41
 8001196:	5c9b      	ldrb	r3, [r3, r2]
 8001198:	b2db      	uxtb	r3, r3
 800119a:	2b20      	cmp	r3, #32
 800119c:	d000      	beq.n	80011a0 <HAL_I2C_Master_Transmit+0x2c>
 800119e:	e0e7      	b.n	8001370 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	2240      	movs	r2, #64	; 0x40
 80011a4:	5c9b      	ldrb	r3, [r3, r2]
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d101      	bne.n	80011ae <HAL_I2C_Master_Transmit+0x3a>
 80011aa:	2302      	movs	r3, #2
 80011ac:	e0e1      	b.n	8001372 <HAL_I2C_Master_Transmit+0x1fe>
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	2240      	movs	r2, #64	; 0x40
 80011b2:	2101      	movs	r1, #1
 80011b4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80011b6:	f7ff fcd7 	bl	8000b68 <HAL_GetTick>
 80011ba:	0003      	movs	r3, r0
 80011bc:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80011be:	2380      	movs	r3, #128	; 0x80
 80011c0:	0219      	lsls	r1, r3, #8
 80011c2:	68f8      	ldr	r0, [r7, #12]
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	9300      	str	r3, [sp, #0]
 80011c8:	2319      	movs	r3, #25
 80011ca:	2201      	movs	r2, #1
 80011cc:	f000 fa04 	bl	80015d8 <I2C_WaitOnFlagUntilTimeout>
 80011d0:	1e03      	subs	r3, r0, #0
 80011d2:	d001      	beq.n	80011d8 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e0cc      	b.n	8001372 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2241      	movs	r2, #65	; 0x41
 80011dc:	2121      	movs	r1, #33	; 0x21
 80011de:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	2242      	movs	r2, #66	; 0x42
 80011e4:	2110      	movs	r1, #16
 80011e6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	2200      	movs	r2, #0
 80011ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	2208      	movs	r2, #8
 80011f8:	18ba      	adds	r2, r7, r2
 80011fa:	8812      	ldrh	r2, [r2, #0]
 80011fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	2200      	movs	r2, #0
 8001202:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001208:	b29b      	uxth	r3, r3
 800120a:	2bff      	cmp	r3, #255	; 0xff
 800120c:	d911      	bls.n	8001232 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	22ff      	movs	r2, #255	; 0xff
 8001212:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001218:	b2da      	uxtb	r2, r3
 800121a:	2380      	movs	r3, #128	; 0x80
 800121c:	045c      	lsls	r4, r3, #17
 800121e:	230a      	movs	r3, #10
 8001220:	18fb      	adds	r3, r7, r3
 8001222:	8819      	ldrh	r1, [r3, #0]
 8001224:	68f8      	ldr	r0, [r7, #12]
 8001226:	4b55      	ldr	r3, [pc, #340]	; (800137c <HAL_I2C_Master_Transmit+0x208>)
 8001228:	9300      	str	r3, [sp, #0]
 800122a:	0023      	movs	r3, r4
 800122c:	f000 fc2e 	bl	8001a8c <I2C_TransferConfig>
 8001230:	e075      	b.n	800131e <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001236:	b29a      	uxth	r2, r3
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001240:	b2da      	uxtb	r2, r3
 8001242:	2380      	movs	r3, #128	; 0x80
 8001244:	049c      	lsls	r4, r3, #18
 8001246:	230a      	movs	r3, #10
 8001248:	18fb      	adds	r3, r7, r3
 800124a:	8819      	ldrh	r1, [r3, #0]
 800124c:	68f8      	ldr	r0, [r7, #12]
 800124e:	4b4b      	ldr	r3, [pc, #300]	; (800137c <HAL_I2C_Master_Transmit+0x208>)
 8001250:	9300      	str	r3, [sp, #0]
 8001252:	0023      	movs	r3, r4
 8001254:	f000 fc1a 	bl	8001a8c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001258:	e061      	b.n	800131e <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800125a:	697a      	ldr	r2, [r7, #20]
 800125c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	0018      	movs	r0, r3
 8001262:	f000 fa07 	bl	8001674 <I2C_WaitOnTXISFlagUntilTimeout>
 8001266:	1e03      	subs	r3, r0, #0
 8001268:	d001      	beq.n	800126e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e081      	b.n	8001372 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001272:	781a      	ldrb	r2, [r3, #0]
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127e:	1c5a      	adds	r2, r3, #1
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001288:	b29b      	uxth	r3, r3
 800128a:	3b01      	subs	r3, #1
 800128c:	b29a      	uxth	r2, r3
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001296:	3b01      	subs	r3, #1
 8001298:	b29a      	uxth	r2, r3
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d03a      	beq.n	800131e <HAL_I2C_Master_Transmit+0x1aa>
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d136      	bne.n	800131e <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80012b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012b2:	68f8      	ldr	r0, [r7, #12]
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	9300      	str	r3, [sp, #0]
 80012b8:	0013      	movs	r3, r2
 80012ba:	2200      	movs	r2, #0
 80012bc:	2180      	movs	r1, #128	; 0x80
 80012be:	f000 f98b 	bl	80015d8 <I2C_WaitOnFlagUntilTimeout>
 80012c2:	1e03      	subs	r3, r0, #0
 80012c4:	d001      	beq.n	80012ca <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e053      	b.n	8001372 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	2bff      	cmp	r3, #255	; 0xff
 80012d2:	d911      	bls.n	80012f8 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	22ff      	movs	r2, #255	; 0xff
 80012d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	2380      	movs	r3, #128	; 0x80
 80012e2:	045c      	lsls	r4, r3, #17
 80012e4:	230a      	movs	r3, #10
 80012e6:	18fb      	adds	r3, r7, r3
 80012e8:	8819      	ldrh	r1, [r3, #0]
 80012ea:	68f8      	ldr	r0, [r7, #12]
 80012ec:	2300      	movs	r3, #0
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	0023      	movs	r3, r4
 80012f2:	f000 fbcb 	bl	8001a8c <I2C_TransferConfig>
 80012f6:	e012      	b.n	800131e <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012fc:	b29a      	uxth	r2, r3
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001306:	b2da      	uxtb	r2, r3
 8001308:	2380      	movs	r3, #128	; 0x80
 800130a:	049c      	lsls	r4, r3, #18
 800130c:	230a      	movs	r3, #10
 800130e:	18fb      	adds	r3, r7, r3
 8001310:	8819      	ldrh	r1, [r3, #0]
 8001312:	68f8      	ldr	r0, [r7, #12]
 8001314:	2300      	movs	r3, #0
 8001316:	9300      	str	r3, [sp, #0]
 8001318:	0023      	movs	r3, r4
 800131a:	f000 fbb7 	bl	8001a8c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001322:	b29b      	uxth	r3, r3
 8001324:	2b00      	cmp	r3, #0
 8001326:	d198      	bne.n	800125a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001328:	697a      	ldr	r2, [r7, #20]
 800132a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	0018      	movs	r0, r3
 8001330:	f000 f9e6 	bl	8001700 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001334:	1e03      	subs	r3, r0, #0
 8001336:	d001      	beq.n	800133c <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e01a      	b.n	8001372 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2220      	movs	r2, #32
 8001342:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	685a      	ldr	r2, [r3, #4]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	490c      	ldr	r1, [pc, #48]	; (8001380 <HAL_I2C_Master_Transmit+0x20c>)
 8001350:	400a      	ands	r2, r1
 8001352:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2241      	movs	r2, #65	; 0x41
 8001358:	2120      	movs	r1, #32
 800135a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	2242      	movs	r2, #66	; 0x42
 8001360:	2100      	movs	r1, #0
 8001362:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	2240      	movs	r2, #64	; 0x40
 8001368:	2100      	movs	r1, #0
 800136a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800136c:	2300      	movs	r3, #0
 800136e:	e000      	b.n	8001372 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001370:	2302      	movs	r3, #2
  }
}
 8001372:	0018      	movs	r0, r3
 8001374:	46bd      	mov	sp, r7
 8001376:	b007      	add	sp, #28
 8001378:	bd90      	pop	{r4, r7, pc}
 800137a:	46c0      	nop			; (mov r8, r8)
 800137c:	80002000 	.word	0x80002000
 8001380:	fe00e800 	.word	0xfe00e800

08001384 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001384:	b590      	push	{r4, r7, lr}
 8001386:	b089      	sub	sp, #36	; 0x24
 8001388:	af02      	add	r7, sp, #8
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	0008      	movs	r0, r1
 800138e:	607a      	str	r2, [r7, #4]
 8001390:	0019      	movs	r1, r3
 8001392:	230a      	movs	r3, #10
 8001394:	18fb      	adds	r3, r7, r3
 8001396:	1c02      	adds	r2, r0, #0
 8001398:	801a      	strh	r2, [r3, #0]
 800139a:	2308      	movs	r3, #8
 800139c:	18fb      	adds	r3, r7, r3
 800139e:	1c0a      	adds	r2, r1, #0
 80013a0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	2241      	movs	r2, #65	; 0x41
 80013a6:	5c9b      	ldrb	r3, [r3, r2]
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2b20      	cmp	r3, #32
 80013ac:	d000      	beq.n	80013b0 <HAL_I2C_Master_Receive+0x2c>
 80013ae:	e0e8      	b.n	8001582 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	2240      	movs	r2, #64	; 0x40
 80013b4:	5c9b      	ldrb	r3, [r3, r2]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d101      	bne.n	80013be <HAL_I2C_Master_Receive+0x3a>
 80013ba:	2302      	movs	r3, #2
 80013bc:	e0e2      	b.n	8001584 <HAL_I2C_Master_Receive+0x200>
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	2240      	movs	r2, #64	; 0x40
 80013c2:	2101      	movs	r1, #1
 80013c4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80013c6:	f7ff fbcf 	bl	8000b68 <HAL_GetTick>
 80013ca:	0003      	movs	r3, r0
 80013cc:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80013ce:	2380      	movs	r3, #128	; 0x80
 80013d0:	0219      	lsls	r1, r3, #8
 80013d2:	68f8      	ldr	r0, [r7, #12]
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	9300      	str	r3, [sp, #0]
 80013d8:	2319      	movs	r3, #25
 80013da:	2201      	movs	r2, #1
 80013dc:	f000 f8fc 	bl	80015d8 <I2C_WaitOnFlagUntilTimeout>
 80013e0:	1e03      	subs	r3, r0, #0
 80013e2:	d001      	beq.n	80013e8 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e0cd      	b.n	8001584 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	2241      	movs	r2, #65	; 0x41
 80013ec:	2122      	movs	r1, #34	; 0x22
 80013ee:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2242      	movs	r2, #66	; 0x42
 80013f4:	2110      	movs	r1, #16
 80013f6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	2200      	movs	r2, #0
 80013fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	2208      	movs	r2, #8
 8001408:	18ba      	adds	r2, r7, r2
 800140a:	8812      	ldrh	r2, [r2, #0]
 800140c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	2200      	movs	r2, #0
 8001412:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001418:	b29b      	uxth	r3, r3
 800141a:	2bff      	cmp	r3, #255	; 0xff
 800141c:	d911      	bls.n	8001442 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	22ff      	movs	r2, #255	; 0xff
 8001422:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001428:	b2da      	uxtb	r2, r3
 800142a:	2380      	movs	r3, #128	; 0x80
 800142c:	045c      	lsls	r4, r3, #17
 800142e:	230a      	movs	r3, #10
 8001430:	18fb      	adds	r3, r7, r3
 8001432:	8819      	ldrh	r1, [r3, #0]
 8001434:	68f8      	ldr	r0, [r7, #12]
 8001436:	4b55      	ldr	r3, [pc, #340]	; (800158c <HAL_I2C_Master_Receive+0x208>)
 8001438:	9300      	str	r3, [sp, #0]
 800143a:	0023      	movs	r3, r4
 800143c:	f000 fb26 	bl	8001a8c <I2C_TransferConfig>
 8001440:	e076      	b.n	8001530 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001446:	b29a      	uxth	r2, r3
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001450:	b2da      	uxtb	r2, r3
 8001452:	2380      	movs	r3, #128	; 0x80
 8001454:	049c      	lsls	r4, r3, #18
 8001456:	230a      	movs	r3, #10
 8001458:	18fb      	adds	r3, r7, r3
 800145a:	8819      	ldrh	r1, [r3, #0]
 800145c:	68f8      	ldr	r0, [r7, #12]
 800145e:	4b4b      	ldr	r3, [pc, #300]	; (800158c <HAL_I2C_Master_Receive+0x208>)
 8001460:	9300      	str	r3, [sp, #0]
 8001462:	0023      	movs	r3, r4
 8001464:	f000 fb12 	bl	8001a8c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001468:	e062      	b.n	8001530 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800146a:	697a      	ldr	r2, [r7, #20]
 800146c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	0018      	movs	r0, r3
 8001472:	f000 f989 	bl	8001788 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001476:	1e03      	subs	r3, r0, #0
 8001478:	d001      	beq.n	800147e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e082      	b.n	8001584 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001488:	b2d2      	uxtb	r2, r2
 800148a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001490:	1c5a      	adds	r2, r3, #1
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800149a:	3b01      	subs	r3, #1
 800149c:	b29a      	uxth	r2, r3
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	3b01      	subs	r3, #1
 80014aa:	b29a      	uxth	r2, r3
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d03a      	beq.n	8001530 <HAL_I2C_Master_Receive+0x1ac>
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d136      	bne.n	8001530 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80014c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014c4:	68f8      	ldr	r0, [r7, #12]
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	9300      	str	r3, [sp, #0]
 80014ca:	0013      	movs	r3, r2
 80014cc:	2200      	movs	r2, #0
 80014ce:	2180      	movs	r1, #128	; 0x80
 80014d0:	f000 f882 	bl	80015d8 <I2C_WaitOnFlagUntilTimeout>
 80014d4:	1e03      	subs	r3, r0, #0
 80014d6:	d001      	beq.n	80014dc <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e053      	b.n	8001584 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	2bff      	cmp	r3, #255	; 0xff
 80014e4:	d911      	bls.n	800150a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	22ff      	movs	r2, #255	; 0xff
 80014ea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014f0:	b2da      	uxtb	r2, r3
 80014f2:	2380      	movs	r3, #128	; 0x80
 80014f4:	045c      	lsls	r4, r3, #17
 80014f6:	230a      	movs	r3, #10
 80014f8:	18fb      	adds	r3, r7, r3
 80014fa:	8819      	ldrh	r1, [r3, #0]
 80014fc:	68f8      	ldr	r0, [r7, #12]
 80014fe:	2300      	movs	r3, #0
 8001500:	9300      	str	r3, [sp, #0]
 8001502:	0023      	movs	r3, r4
 8001504:	f000 fac2 	bl	8001a8c <I2C_TransferConfig>
 8001508:	e012      	b.n	8001530 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800150e:	b29a      	uxth	r2, r3
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001518:	b2da      	uxtb	r2, r3
 800151a:	2380      	movs	r3, #128	; 0x80
 800151c:	049c      	lsls	r4, r3, #18
 800151e:	230a      	movs	r3, #10
 8001520:	18fb      	adds	r3, r7, r3
 8001522:	8819      	ldrh	r1, [r3, #0]
 8001524:	68f8      	ldr	r0, [r7, #12]
 8001526:	2300      	movs	r3, #0
 8001528:	9300      	str	r3, [sp, #0]
 800152a:	0023      	movs	r3, r4
 800152c:	f000 faae 	bl	8001a8c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001534:	b29b      	uxth	r3, r3
 8001536:	2b00      	cmp	r3, #0
 8001538:	d197      	bne.n	800146a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800153a:	697a      	ldr	r2, [r7, #20]
 800153c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	0018      	movs	r0, r3
 8001542:	f000 f8dd 	bl	8001700 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001546:	1e03      	subs	r3, r0, #0
 8001548:	d001      	beq.n	800154e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e01a      	b.n	8001584 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2220      	movs	r2, #32
 8001554:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	685a      	ldr	r2, [r3, #4]
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	490b      	ldr	r1, [pc, #44]	; (8001590 <HAL_I2C_Master_Receive+0x20c>)
 8001562:	400a      	ands	r2, r1
 8001564:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2241      	movs	r2, #65	; 0x41
 800156a:	2120      	movs	r1, #32
 800156c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	2242      	movs	r2, #66	; 0x42
 8001572:	2100      	movs	r1, #0
 8001574:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	2240      	movs	r2, #64	; 0x40
 800157a:	2100      	movs	r1, #0
 800157c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800157e:	2300      	movs	r3, #0
 8001580:	e000      	b.n	8001584 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8001582:	2302      	movs	r3, #2
  }
}
 8001584:	0018      	movs	r0, r3
 8001586:	46bd      	mov	sp, r7
 8001588:	b007      	add	sp, #28
 800158a:	bd90      	pop	{r4, r7, pc}
 800158c:	80002400 	.word	0x80002400
 8001590:	fe00e800 	.word	0xfe00e800

08001594 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	699b      	ldr	r3, [r3, #24]
 80015a2:	2202      	movs	r2, #2
 80015a4:	4013      	ands	r3, r2
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d103      	bne.n	80015b2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2200      	movs	r2, #0
 80015b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	2201      	movs	r2, #1
 80015ba:	4013      	ands	r3, r2
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d007      	beq.n	80015d0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	699a      	ldr	r2, [r3, #24]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2101      	movs	r1, #1
 80015cc:	430a      	orrs	r2, r1
 80015ce:	619a      	str	r2, [r3, #24]
  }
}
 80015d0:	46c0      	nop			; (mov r8, r8)
 80015d2:	46bd      	mov	sp, r7
 80015d4:	b002      	add	sp, #8
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	603b      	str	r3, [r7, #0]
 80015e4:	1dfb      	adds	r3, r7, #7
 80015e6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80015e8:	e030      	b.n	800164c <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	3301      	adds	r3, #1
 80015ee:	d02d      	beq.n	800164c <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015f0:	f7ff faba 	bl	8000b68 <HAL_GetTick>
 80015f4:	0002      	movs	r2, r0
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	683a      	ldr	r2, [r7, #0]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d302      	bcc.n	8001606 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d122      	bne.n	800164c <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	68ba      	ldr	r2, [r7, #8]
 800160e:	4013      	ands	r3, r2
 8001610:	68ba      	ldr	r2, [r7, #8]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	425a      	negs	r2, r3
 8001616:	4153      	adcs	r3, r2
 8001618:	b2db      	uxtb	r3, r3
 800161a:	001a      	movs	r2, r3
 800161c:	1dfb      	adds	r3, r7, #7
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	429a      	cmp	r2, r3
 8001622:	d113      	bne.n	800164c <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001628:	2220      	movs	r2, #32
 800162a:	431a      	orrs	r2, r3
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2241      	movs	r2, #65	; 0x41
 8001634:	2120      	movs	r1, #32
 8001636:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2242      	movs	r2, #66	; 0x42
 800163c:	2100      	movs	r1, #0
 800163e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2240      	movs	r2, #64	; 0x40
 8001644:	2100      	movs	r1, #0
 8001646:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e00f      	b.n	800166c <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	68ba      	ldr	r2, [r7, #8]
 8001654:	4013      	ands	r3, r2
 8001656:	68ba      	ldr	r2, [r7, #8]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	425a      	negs	r2, r3
 800165c:	4153      	adcs	r3, r2
 800165e:	b2db      	uxtb	r3, r3
 8001660:	001a      	movs	r2, r3
 8001662:	1dfb      	adds	r3, r7, #7
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	429a      	cmp	r2, r3
 8001668:	d0bf      	beq.n	80015ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800166a:	2300      	movs	r3, #0
}
 800166c:	0018      	movs	r0, r3
 800166e:	46bd      	mov	sp, r7
 8001670:	b004      	add	sp, #16
 8001672:	bd80      	pop	{r7, pc}

08001674 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001680:	e032      	b.n	80016e8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	68b9      	ldr	r1, [r7, #8]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	0018      	movs	r0, r3
 800168a:	f000 f8ff 	bl	800188c <I2C_IsErrorOccurred>
 800168e:	1e03      	subs	r3, r0, #0
 8001690:	d001      	beq.n	8001696 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e030      	b.n	80016f8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	3301      	adds	r3, #1
 800169a:	d025      	beq.n	80016e8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800169c:	f7ff fa64 	bl	8000b68 <HAL_GetTick>
 80016a0:	0002      	movs	r2, r0
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	68ba      	ldr	r2, [r7, #8]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d302      	bcc.n	80016b2 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d11a      	bne.n	80016e8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	2202      	movs	r2, #2
 80016ba:	4013      	ands	r3, r2
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d013      	beq.n	80016e8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c4:	2220      	movs	r2, #32
 80016c6:	431a      	orrs	r2, r3
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2241      	movs	r2, #65	; 0x41
 80016d0:	2120      	movs	r1, #32
 80016d2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2242      	movs	r2, #66	; 0x42
 80016d8:	2100      	movs	r1, #0
 80016da:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2240      	movs	r2, #64	; 0x40
 80016e0:	2100      	movs	r1, #0
 80016e2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e007      	b.n	80016f8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	2202      	movs	r2, #2
 80016f0:	4013      	ands	r3, r2
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d1c5      	bne.n	8001682 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80016f6:	2300      	movs	r3, #0
}
 80016f8:	0018      	movs	r0, r3
 80016fa:	46bd      	mov	sp, r7
 80016fc:	b004      	add	sp, #16
 80016fe:	bd80      	pop	{r7, pc}

08001700 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800170c:	e02f      	b.n	800176e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	68b9      	ldr	r1, [r7, #8]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	0018      	movs	r0, r3
 8001716:	f000 f8b9 	bl	800188c <I2C_IsErrorOccurred>
 800171a:	1e03      	subs	r3, r0, #0
 800171c:	d001      	beq.n	8001722 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e02d      	b.n	800177e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001722:	f7ff fa21 	bl	8000b68 <HAL_GetTick>
 8001726:	0002      	movs	r2, r0
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	68ba      	ldr	r2, [r7, #8]
 800172e:	429a      	cmp	r2, r3
 8001730:	d302      	bcc.n	8001738 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d11a      	bne.n	800176e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	699b      	ldr	r3, [r3, #24]
 800173e:	2220      	movs	r2, #32
 8001740:	4013      	ands	r3, r2
 8001742:	2b20      	cmp	r3, #32
 8001744:	d013      	beq.n	800176e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174a:	2220      	movs	r2, #32
 800174c:	431a      	orrs	r2, r3
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2241      	movs	r2, #65	; 0x41
 8001756:	2120      	movs	r1, #32
 8001758:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2242      	movs	r2, #66	; 0x42
 800175e:	2100      	movs	r1, #0
 8001760:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2240      	movs	r2, #64	; 0x40
 8001766:	2100      	movs	r1, #0
 8001768:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e007      	b.n	800177e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	2220      	movs	r2, #32
 8001776:	4013      	ands	r3, r2
 8001778:	2b20      	cmp	r3, #32
 800177a:	d1c8      	bne.n	800170e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800177c:	2300      	movs	r3, #0
}
 800177e:	0018      	movs	r0, r3
 8001780:	46bd      	mov	sp, r7
 8001782:	b004      	add	sp, #16
 8001784:	bd80      	pop	{r7, pc}
	...

08001788 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001794:	e06b      	b.n	800186e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	68b9      	ldr	r1, [r7, #8]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	0018      	movs	r0, r3
 800179e:	f000 f875 	bl	800188c <I2C_IsErrorOccurred>
 80017a2:	1e03      	subs	r3, r0, #0
 80017a4:	d001      	beq.n	80017aa <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e069      	b.n	800187e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	2220      	movs	r2, #32
 80017b2:	4013      	ands	r3, r2
 80017b4:	2b20      	cmp	r3, #32
 80017b6:	d138      	bne.n	800182a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	2204      	movs	r2, #4
 80017c0:	4013      	ands	r3, r2
 80017c2:	2b04      	cmp	r3, #4
 80017c4:	d105      	bne.n	80017d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80017ce:	2300      	movs	r3, #0
 80017d0:	e055      	b.n	800187e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	2210      	movs	r2, #16
 80017da:	4013      	ands	r3, r2
 80017dc:	2b10      	cmp	r3, #16
 80017de:	d107      	bne.n	80017f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2210      	movs	r2, #16
 80017e6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2204      	movs	r2, #4
 80017ec:	645a      	str	r2, [r3, #68]	; 0x44
 80017ee:	e002      	b.n	80017f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2200      	movs	r2, #0
 80017f4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2220      	movs	r2, #32
 80017fc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	685a      	ldr	r2, [r3, #4]
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	491f      	ldr	r1, [pc, #124]	; (8001888 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 800180a:	400a      	ands	r2, r1
 800180c:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2241      	movs	r2, #65	; 0x41
 8001812:	2120      	movs	r1, #32
 8001814:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2242      	movs	r2, #66	; 0x42
 800181a:	2100      	movs	r1, #0
 800181c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2240      	movs	r2, #64	; 0x40
 8001822:	2100      	movs	r1, #0
 8001824:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e029      	b.n	800187e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800182a:	f7ff f99d 	bl	8000b68 <HAL_GetTick>
 800182e:	0002      	movs	r2, r0
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	68ba      	ldr	r2, [r7, #8]
 8001836:	429a      	cmp	r2, r3
 8001838:	d302      	bcc.n	8001840 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d116      	bne.n	800186e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	699b      	ldr	r3, [r3, #24]
 8001846:	2204      	movs	r2, #4
 8001848:	4013      	ands	r3, r2
 800184a:	2b04      	cmp	r3, #4
 800184c:	d00f      	beq.n	800186e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001852:	2220      	movs	r2, #32
 8001854:	431a      	orrs	r2, r3
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	2241      	movs	r2, #65	; 0x41
 800185e:	2120      	movs	r1, #32
 8001860:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2240      	movs	r2, #64	; 0x40
 8001866:	2100      	movs	r1, #0
 8001868:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e007      	b.n	800187e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	2204      	movs	r2, #4
 8001876:	4013      	ands	r3, r2
 8001878:	2b04      	cmp	r3, #4
 800187a:	d18c      	bne.n	8001796 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800187c:	2300      	movs	r3, #0
}
 800187e:	0018      	movs	r0, r3
 8001880:	46bd      	mov	sp, r7
 8001882:	b004      	add	sp, #16
 8001884:	bd80      	pop	{r7, pc}
 8001886:	46c0      	nop			; (mov r8, r8)
 8001888:	fe00e800 	.word	0xfe00e800

0800188c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800188c:	b590      	push	{r4, r7, lr}
 800188e:	b08b      	sub	sp, #44	; 0x2c
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001898:	2327      	movs	r3, #39	; 0x27
 800189a:	18fb      	adds	r3, r7, r3
 800189c:	2200      	movs	r2, #0
 800189e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80018a8:	2300      	movs	r3, #0
 80018aa:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	2210      	movs	r2, #16
 80018b4:	4013      	ands	r3, r2
 80018b6:	d100      	bne.n	80018ba <I2C_IsErrorOccurred+0x2e>
 80018b8:	e082      	b.n	80019c0 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2210      	movs	r2, #16
 80018c0:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80018c2:	e060      	b.n	8001986 <I2C_IsErrorOccurred+0xfa>
 80018c4:	2427      	movs	r4, #39	; 0x27
 80018c6:	193b      	adds	r3, r7, r4
 80018c8:	193a      	adds	r2, r7, r4
 80018ca:	7812      	ldrb	r2, [r2, #0]
 80018cc:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	3301      	adds	r3, #1
 80018d2:	d058      	beq.n	8001986 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80018d4:	f7ff f948 	bl	8000b68 <HAL_GetTick>
 80018d8:	0002      	movs	r2, r0
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	68ba      	ldr	r2, [r7, #8]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d306      	bcc.n	80018f2 <I2C_IsErrorOccurred+0x66>
 80018e4:	193b      	adds	r3, r7, r4
 80018e6:	193a      	adds	r2, r7, r4
 80018e8:	7812      	ldrb	r2, [r2, #0]
 80018ea:	701a      	strb	r2, [r3, #0]
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d149      	bne.n	8001986 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	685a      	ldr	r2, [r3, #4]
 80018f8:	2380      	movs	r3, #128	; 0x80
 80018fa:	01db      	lsls	r3, r3, #7
 80018fc:	4013      	ands	r3, r2
 80018fe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001900:	2013      	movs	r0, #19
 8001902:	183b      	adds	r3, r7, r0
 8001904:	68fa      	ldr	r2, [r7, #12]
 8001906:	2142      	movs	r1, #66	; 0x42
 8001908:	5c52      	ldrb	r2, [r2, r1]
 800190a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	699a      	ldr	r2, [r3, #24]
 8001912:	2380      	movs	r3, #128	; 0x80
 8001914:	021b      	lsls	r3, r3, #8
 8001916:	401a      	ands	r2, r3
 8001918:	2380      	movs	r3, #128	; 0x80
 800191a:	021b      	lsls	r3, r3, #8
 800191c:	429a      	cmp	r2, r3
 800191e:	d126      	bne.n	800196e <I2C_IsErrorOccurred+0xe2>
 8001920:	697a      	ldr	r2, [r7, #20]
 8001922:	2380      	movs	r3, #128	; 0x80
 8001924:	01db      	lsls	r3, r3, #7
 8001926:	429a      	cmp	r2, r3
 8001928:	d021      	beq.n	800196e <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 800192a:	183b      	adds	r3, r7, r0
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	2b20      	cmp	r3, #32
 8001930:	d01d      	beq.n	800196e <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	685a      	ldr	r2, [r3, #4]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2180      	movs	r1, #128	; 0x80
 800193e:	01c9      	lsls	r1, r1, #7
 8001940:	430a      	orrs	r2, r1
 8001942:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001944:	f7ff f910 	bl	8000b68 <HAL_GetTick>
 8001948:	0003      	movs	r3, r0
 800194a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800194c:	e00f      	b.n	800196e <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800194e:	f7ff f90b 	bl	8000b68 <HAL_GetTick>
 8001952:	0002      	movs	r2, r0
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b19      	cmp	r3, #25
 800195a:	d908      	bls.n	800196e <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800195c:	6a3b      	ldr	r3, [r7, #32]
 800195e:	2220      	movs	r2, #32
 8001960:	4313      	orrs	r3, r2
 8001962:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001964:	2327      	movs	r3, #39	; 0x27
 8001966:	18fb      	adds	r3, r7, r3
 8001968:	2201      	movs	r2, #1
 800196a:	701a      	strb	r2, [r3, #0]

              break;
 800196c:	e00b      	b.n	8001986 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	2220      	movs	r2, #32
 8001976:	4013      	ands	r3, r2
 8001978:	2127      	movs	r1, #39	; 0x27
 800197a:	187a      	adds	r2, r7, r1
 800197c:	1879      	adds	r1, r7, r1
 800197e:	7809      	ldrb	r1, [r1, #0]
 8001980:	7011      	strb	r1, [r2, #0]
 8001982:	2b20      	cmp	r3, #32
 8001984:	d1e3      	bne.n	800194e <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	2220      	movs	r2, #32
 800198e:	4013      	ands	r3, r2
 8001990:	2b20      	cmp	r3, #32
 8001992:	d004      	beq.n	800199e <I2C_IsErrorOccurred+0x112>
 8001994:	2327      	movs	r3, #39	; 0x27
 8001996:	18fb      	adds	r3, r7, r3
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d092      	beq.n	80018c4 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800199e:	2327      	movs	r3, #39	; 0x27
 80019a0:	18fb      	adds	r3, r7, r3
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d103      	bne.n	80019b0 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2220      	movs	r2, #32
 80019ae:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80019b0:	6a3b      	ldr	r3, [r7, #32]
 80019b2:	2204      	movs	r2, #4
 80019b4:	4313      	orrs	r3, r2
 80019b6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80019b8:	2327      	movs	r3, #39	; 0x27
 80019ba:	18fb      	adds	r3, r7, r3
 80019bc:	2201      	movs	r2, #1
 80019be:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	2380      	movs	r3, #128	; 0x80
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	4013      	ands	r3, r2
 80019d0:	d00c      	beq.n	80019ec <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80019d2:	6a3b      	ldr	r3, [r7, #32]
 80019d4:	2201      	movs	r2, #1
 80019d6:	4313      	orrs	r3, r2
 80019d8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2280      	movs	r2, #128	; 0x80
 80019e0:	0052      	lsls	r2, r2, #1
 80019e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80019e4:	2327      	movs	r3, #39	; 0x27
 80019e6:	18fb      	adds	r3, r7, r3
 80019e8:	2201      	movs	r2, #1
 80019ea:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	2380      	movs	r3, #128	; 0x80
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	4013      	ands	r3, r2
 80019f4:	d00c      	beq.n	8001a10 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80019f6:	6a3b      	ldr	r3, [r7, #32]
 80019f8:	2208      	movs	r2, #8
 80019fa:	4313      	orrs	r3, r2
 80019fc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2280      	movs	r2, #128	; 0x80
 8001a04:	00d2      	lsls	r2, r2, #3
 8001a06:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001a08:	2327      	movs	r3, #39	; 0x27
 8001a0a:	18fb      	adds	r3, r7, r3
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	2380      	movs	r3, #128	; 0x80
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	4013      	ands	r3, r2
 8001a18:	d00c      	beq.n	8001a34 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001a1a:	6a3b      	ldr	r3, [r7, #32]
 8001a1c:	2202      	movs	r2, #2
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2280      	movs	r2, #128	; 0x80
 8001a28:	0092      	lsls	r2, r2, #2
 8001a2a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001a2c:	2327      	movs	r3, #39	; 0x27
 8001a2e:	18fb      	adds	r3, r7, r3
 8001a30:	2201      	movs	r2, #1
 8001a32:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001a34:	2327      	movs	r3, #39	; 0x27
 8001a36:	18fb      	adds	r3, r7, r3
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d01d      	beq.n	8001a7a <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	0018      	movs	r0, r3
 8001a42:	f7ff fda7 	bl	8001594 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	685a      	ldr	r2, [r3, #4]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	490d      	ldr	r1, [pc, #52]	; (8001a88 <I2C_IsErrorOccurred+0x1fc>)
 8001a52:	400a      	ands	r2, r1
 8001a54:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a5a:	6a3b      	ldr	r3, [r7, #32]
 8001a5c:	431a      	orrs	r2, r3
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2241      	movs	r2, #65	; 0x41
 8001a66:	2120      	movs	r1, #32
 8001a68:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2242      	movs	r2, #66	; 0x42
 8001a6e:	2100      	movs	r1, #0
 8001a70:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2240      	movs	r2, #64	; 0x40
 8001a76:	2100      	movs	r1, #0
 8001a78:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001a7a:	2327      	movs	r3, #39	; 0x27
 8001a7c:	18fb      	adds	r3, r7, r3
 8001a7e:	781b      	ldrb	r3, [r3, #0]
}
 8001a80:	0018      	movs	r0, r3
 8001a82:	46bd      	mov	sp, r7
 8001a84:	b00b      	add	sp, #44	; 0x2c
 8001a86:	bd90      	pop	{r4, r7, pc}
 8001a88:	fe00e800 	.word	0xfe00e800

08001a8c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001a8c:	b590      	push	{r4, r7, lr}
 8001a8e:	b087      	sub	sp, #28
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	0008      	movs	r0, r1
 8001a96:	0011      	movs	r1, r2
 8001a98:	607b      	str	r3, [r7, #4]
 8001a9a:	240a      	movs	r4, #10
 8001a9c:	193b      	adds	r3, r7, r4
 8001a9e:	1c02      	adds	r2, r0, #0
 8001aa0:	801a      	strh	r2, [r3, #0]
 8001aa2:	2009      	movs	r0, #9
 8001aa4:	183b      	adds	r3, r7, r0
 8001aa6:	1c0a      	adds	r2, r1, #0
 8001aa8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001aaa:	193b      	adds	r3, r7, r4
 8001aac:	881b      	ldrh	r3, [r3, #0]
 8001aae:	059b      	lsls	r3, r3, #22
 8001ab0:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001ab2:	183b      	adds	r3, r7, r0
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	0419      	lsls	r1, r3, #16
 8001ab8:	23ff      	movs	r3, #255	; 0xff
 8001aba:	041b      	lsls	r3, r3, #16
 8001abc:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001abe:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	085b      	lsrs	r3, r3, #1
 8001acc:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ad6:	0d51      	lsrs	r1, r2, #21
 8001ad8:	2280      	movs	r2, #128	; 0x80
 8001ada:	00d2      	lsls	r2, r2, #3
 8001adc:	400a      	ands	r2, r1
 8001ade:	4907      	ldr	r1, [pc, #28]	; (8001afc <I2C_TransferConfig+0x70>)
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	43d2      	mvns	r2, r2
 8001ae4:	401a      	ands	r2, r3
 8001ae6:	0011      	movs	r1, r2
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	697a      	ldr	r2, [r7, #20]
 8001aee:	430a      	orrs	r2, r1
 8001af0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001af2:	46c0      	nop			; (mov r8, r8)
 8001af4:	46bd      	mov	sp, r7
 8001af6:	b007      	add	sp, #28
 8001af8:	bd90      	pop	{r4, r7, pc}
 8001afa:	46c0      	nop			; (mov r8, r8)
 8001afc:	03ff63ff 	.word	0x03ff63ff

08001b00 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2241      	movs	r2, #65	; 0x41
 8001b0e:	5c9b      	ldrb	r3, [r3, r2]
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b20      	cmp	r3, #32
 8001b14:	d138      	bne.n	8001b88 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2240      	movs	r2, #64	; 0x40
 8001b1a:	5c9b      	ldrb	r3, [r3, r2]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d101      	bne.n	8001b24 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001b20:	2302      	movs	r3, #2
 8001b22:	e032      	b.n	8001b8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2240      	movs	r2, #64	; 0x40
 8001b28:	2101      	movs	r1, #1
 8001b2a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2241      	movs	r2, #65	; 0x41
 8001b30:	2124      	movs	r1, #36	; 0x24
 8001b32:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2101      	movs	r1, #1
 8001b40:	438a      	bics	r2, r1
 8001b42:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4911      	ldr	r1, [pc, #68]	; (8001b94 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001b50:	400a      	ands	r2, r1
 8001b52:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6819      	ldr	r1, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	430a      	orrs	r2, r1
 8001b62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2101      	movs	r1, #1
 8001b70:	430a      	orrs	r2, r1
 8001b72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2241      	movs	r2, #65	; 0x41
 8001b78:	2120      	movs	r1, #32
 8001b7a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2240      	movs	r2, #64	; 0x40
 8001b80:	2100      	movs	r1, #0
 8001b82:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001b84:	2300      	movs	r3, #0
 8001b86:	e000      	b.n	8001b8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001b88:	2302      	movs	r3, #2
  }
}
 8001b8a:	0018      	movs	r0, r3
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	b002      	add	sp, #8
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	46c0      	nop			; (mov r8, r8)
 8001b94:	ffffefff 	.word	0xffffefff

08001b98 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2241      	movs	r2, #65	; 0x41
 8001ba6:	5c9b      	ldrb	r3, [r3, r2]
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b20      	cmp	r3, #32
 8001bac:	d139      	bne.n	8001c22 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2240      	movs	r2, #64	; 0x40
 8001bb2:	5c9b      	ldrb	r3, [r3, r2]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d101      	bne.n	8001bbc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001bb8:	2302      	movs	r3, #2
 8001bba:	e033      	b.n	8001c24 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2240      	movs	r2, #64	; 0x40
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2241      	movs	r2, #65	; 0x41
 8001bc8:	2124      	movs	r1, #36	; 0x24
 8001bca:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	438a      	bics	r2, r1
 8001bda:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	4a11      	ldr	r2, [pc, #68]	; (8001c2c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001be8:	4013      	ands	r3, r2
 8001bea:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	021b      	lsls	r3, r3, #8
 8001bf0:	68fa      	ldr	r2, [r7, #12]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2101      	movs	r1, #1
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2241      	movs	r2, #65	; 0x41
 8001c12:	2120      	movs	r1, #32
 8001c14:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2240      	movs	r2, #64	; 0x40
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	e000      	b.n	8001c24 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001c22:	2302      	movs	r3, #2
  }
}
 8001c24:	0018      	movs	r0, r3
 8001c26:	46bd      	mov	sp, r7
 8001c28:	b004      	add	sp, #16
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	fffff0ff 	.word	0xfffff0ff

08001c30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b088      	sub	sp, #32
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e301      	b.n	8002246 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2201      	movs	r2, #1
 8001c48:	4013      	ands	r3, r2
 8001c4a:	d100      	bne.n	8001c4e <HAL_RCC_OscConfig+0x1e>
 8001c4c:	e08d      	b.n	8001d6a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001c4e:	4bc3      	ldr	r3, [pc, #780]	; (8001f5c <HAL_RCC_OscConfig+0x32c>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	220c      	movs	r2, #12
 8001c54:	4013      	ands	r3, r2
 8001c56:	2b04      	cmp	r3, #4
 8001c58:	d00e      	beq.n	8001c78 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c5a:	4bc0      	ldr	r3, [pc, #768]	; (8001f5c <HAL_RCC_OscConfig+0x32c>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	220c      	movs	r2, #12
 8001c60:	4013      	ands	r3, r2
 8001c62:	2b08      	cmp	r3, #8
 8001c64:	d116      	bne.n	8001c94 <HAL_RCC_OscConfig+0x64>
 8001c66:	4bbd      	ldr	r3, [pc, #756]	; (8001f5c <HAL_RCC_OscConfig+0x32c>)
 8001c68:	685a      	ldr	r2, [r3, #4]
 8001c6a:	2380      	movs	r3, #128	; 0x80
 8001c6c:	025b      	lsls	r3, r3, #9
 8001c6e:	401a      	ands	r2, r3
 8001c70:	2380      	movs	r3, #128	; 0x80
 8001c72:	025b      	lsls	r3, r3, #9
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d10d      	bne.n	8001c94 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c78:	4bb8      	ldr	r3, [pc, #736]	; (8001f5c <HAL_RCC_OscConfig+0x32c>)
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	2380      	movs	r3, #128	; 0x80
 8001c7e:	029b      	lsls	r3, r3, #10
 8001c80:	4013      	ands	r3, r2
 8001c82:	d100      	bne.n	8001c86 <HAL_RCC_OscConfig+0x56>
 8001c84:	e070      	b.n	8001d68 <HAL_RCC_OscConfig+0x138>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d000      	beq.n	8001c90 <HAL_RCC_OscConfig+0x60>
 8001c8e:	e06b      	b.n	8001d68 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e2d8      	b.n	8002246 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d107      	bne.n	8001cac <HAL_RCC_OscConfig+0x7c>
 8001c9c:	4baf      	ldr	r3, [pc, #700]	; (8001f5c <HAL_RCC_OscConfig+0x32c>)
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	4bae      	ldr	r3, [pc, #696]	; (8001f5c <HAL_RCC_OscConfig+0x32c>)
 8001ca2:	2180      	movs	r1, #128	; 0x80
 8001ca4:	0249      	lsls	r1, r1, #9
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	601a      	str	r2, [r3, #0]
 8001caa:	e02f      	b.n	8001d0c <HAL_RCC_OscConfig+0xdc>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d10c      	bne.n	8001cce <HAL_RCC_OscConfig+0x9e>
 8001cb4:	4ba9      	ldr	r3, [pc, #676]	; (8001f5c <HAL_RCC_OscConfig+0x32c>)
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	4ba8      	ldr	r3, [pc, #672]	; (8001f5c <HAL_RCC_OscConfig+0x32c>)
 8001cba:	49a9      	ldr	r1, [pc, #676]	; (8001f60 <HAL_RCC_OscConfig+0x330>)
 8001cbc:	400a      	ands	r2, r1
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	4ba6      	ldr	r3, [pc, #664]	; (8001f5c <HAL_RCC_OscConfig+0x32c>)
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	4ba5      	ldr	r3, [pc, #660]	; (8001f5c <HAL_RCC_OscConfig+0x32c>)
 8001cc6:	49a7      	ldr	r1, [pc, #668]	; (8001f64 <HAL_RCC_OscConfig+0x334>)
 8001cc8:	400a      	ands	r2, r1
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	e01e      	b.n	8001d0c <HAL_RCC_OscConfig+0xdc>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	2b05      	cmp	r3, #5
 8001cd4:	d10e      	bne.n	8001cf4 <HAL_RCC_OscConfig+0xc4>
 8001cd6:	4ba1      	ldr	r3, [pc, #644]	; (8001f5c <HAL_RCC_OscConfig+0x32c>)
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	4ba0      	ldr	r3, [pc, #640]	; (8001f5c <HAL_RCC_OscConfig+0x32c>)
 8001cdc:	2180      	movs	r1, #128	; 0x80
 8001cde:	02c9      	lsls	r1, r1, #11
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	4b9d      	ldr	r3, [pc, #628]	; (8001f5c <HAL_RCC_OscConfig+0x32c>)
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	4b9c      	ldr	r3, [pc, #624]	; (8001f5c <HAL_RCC_OscConfig+0x32c>)
 8001cea:	2180      	movs	r1, #128	; 0x80
 8001cec:	0249      	lsls	r1, r1, #9
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	601a      	str	r2, [r3, #0]
 8001cf2:	e00b      	b.n	8001d0c <HAL_RCC_OscConfig+0xdc>
 8001cf4:	4b99      	ldr	r3, [pc, #612]	; (8001f5c <HAL_RCC_OscConfig+0x32c>)
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	4b98      	ldr	r3, [pc, #608]	; (8001f5c <HAL_RCC_OscConfig+0x32c>)
 8001cfa:	4999      	ldr	r1, [pc, #612]	; (8001f60 <HAL_RCC_OscConfig+0x330>)
 8001cfc:	400a      	ands	r2, r1
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	4b96      	ldr	r3, [pc, #600]	; (8001f5c <HAL_RCC_OscConfig+0x32c>)
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	4b95      	ldr	r3, [pc, #596]	; (8001f5c <HAL_RCC_OscConfig+0x32c>)
 8001d06:	4997      	ldr	r1, [pc, #604]	; (8001f64 <HAL_RCC_OscConfig+0x334>)
 8001d08:	400a      	ands	r2, r1
 8001d0a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d014      	beq.n	8001d3e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d14:	f7fe ff28 	bl	8000b68 <HAL_GetTick>
 8001d18:	0003      	movs	r3, r0
 8001d1a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d1e:	f7fe ff23 	bl	8000b68 <HAL_GetTick>
 8001d22:	0002      	movs	r2, r0
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b64      	cmp	r3, #100	; 0x64
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e28a      	b.n	8002246 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d30:	4b8a      	ldr	r3, [pc, #552]	; (8001f5c <HAL_RCC_OscConfig+0x32c>)
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	2380      	movs	r3, #128	; 0x80
 8001d36:	029b      	lsls	r3, r3, #10
 8001d38:	4013      	ands	r3, r2
 8001d3a:	d0f0      	beq.n	8001d1e <HAL_RCC_OscConfig+0xee>
 8001d3c:	e015      	b.n	8001d6a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3e:	f7fe ff13 	bl	8000b68 <HAL_GetTick>
 8001d42:	0003      	movs	r3, r0
 8001d44:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d48:	f7fe ff0e 	bl	8000b68 <HAL_GetTick>
 8001d4c:	0002      	movs	r2, r0
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b64      	cmp	r3, #100	; 0x64
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e275      	b.n	8002246 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d5a:	4b80      	ldr	r3, [pc, #512]	; (8001f5c <HAL_RCC_OscConfig+0x32c>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	2380      	movs	r3, #128	; 0x80
 8001d60:	029b      	lsls	r3, r3, #10
 8001d62:	4013      	ands	r3, r2
 8001d64:	d1f0      	bne.n	8001d48 <HAL_RCC_OscConfig+0x118>
 8001d66:	e000      	b.n	8001d6a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d68:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2202      	movs	r2, #2
 8001d70:	4013      	ands	r3, r2
 8001d72:	d100      	bne.n	8001d76 <HAL_RCC_OscConfig+0x146>
 8001d74:	e069      	b.n	8001e4a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d76:	4b79      	ldr	r3, [pc, #484]	; (8001f5c <HAL_RCC_OscConfig+0x32c>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	220c      	movs	r2, #12
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	d00b      	beq.n	8001d98 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d80:	4b76      	ldr	r3, [pc, #472]	; (8001f5c <HAL_RCC_OscConfig+0x32c>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	220c      	movs	r2, #12
 8001d86:	4013      	ands	r3, r2
 8001d88:	2b08      	cmp	r3, #8
 8001d8a:	d11c      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x196>
 8001d8c:	4b73      	ldr	r3, [pc, #460]	; (8001f5c <HAL_RCC_OscConfig+0x32c>)
 8001d8e:	685a      	ldr	r2, [r3, #4]
 8001d90:	2380      	movs	r3, #128	; 0x80
 8001d92:	025b      	lsls	r3, r3, #9
 8001d94:	4013      	ands	r3, r2
 8001d96:	d116      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d98:	4b70      	ldr	r3, [pc, #448]	; (8001f5c <HAL_RCC_OscConfig+0x32c>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2202      	movs	r2, #2
 8001d9e:	4013      	ands	r3, r2
 8001da0:	d005      	beq.n	8001dae <HAL_RCC_OscConfig+0x17e>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d001      	beq.n	8001dae <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e24b      	b.n	8002246 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dae:	4b6b      	ldr	r3, [pc, #428]	; (8001f5c <HAL_RCC_OscConfig+0x32c>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	22f8      	movs	r2, #248	; 0xf8
 8001db4:	4393      	bics	r3, r2
 8001db6:	0019      	movs	r1, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	00da      	lsls	r2, r3, #3
 8001dbe:	4b67      	ldr	r3, [pc, #412]	; (8001f5c <HAL_RCC_OscConfig+0x32c>)
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dc4:	e041      	b.n	8001e4a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d024      	beq.n	8001e18 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dce:	4b63      	ldr	r3, [pc, #396]	; (8001f5c <HAL_RCC_OscConfig+0x32c>)
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	4b62      	ldr	r3, [pc, #392]	; (8001f5c <HAL_RCC_OscConfig+0x32c>)
 8001dd4:	2101      	movs	r1, #1
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dda:	f7fe fec5 	bl	8000b68 <HAL_GetTick>
 8001dde:	0003      	movs	r3, r0
 8001de0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de2:	e008      	b.n	8001df6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001de4:	f7fe fec0 	bl	8000b68 <HAL_GetTick>
 8001de8:	0002      	movs	r2, r0
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e227      	b.n	8002246 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df6:	4b59      	ldr	r3, [pc, #356]	; (8001f5c <HAL_RCC_OscConfig+0x32c>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	d0f1      	beq.n	8001de4 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e00:	4b56      	ldr	r3, [pc, #344]	; (8001f5c <HAL_RCC_OscConfig+0x32c>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	22f8      	movs	r2, #248	; 0xf8
 8001e06:	4393      	bics	r3, r2
 8001e08:	0019      	movs	r1, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	00da      	lsls	r2, r3, #3
 8001e10:	4b52      	ldr	r3, [pc, #328]	; (8001f5c <HAL_RCC_OscConfig+0x32c>)
 8001e12:	430a      	orrs	r2, r1
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	e018      	b.n	8001e4a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e18:	4b50      	ldr	r3, [pc, #320]	; (8001f5c <HAL_RCC_OscConfig+0x32c>)
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	4b4f      	ldr	r3, [pc, #316]	; (8001f5c <HAL_RCC_OscConfig+0x32c>)
 8001e1e:	2101      	movs	r1, #1
 8001e20:	438a      	bics	r2, r1
 8001e22:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e24:	f7fe fea0 	bl	8000b68 <HAL_GetTick>
 8001e28:	0003      	movs	r3, r0
 8001e2a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e2c:	e008      	b.n	8001e40 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e2e:	f7fe fe9b 	bl	8000b68 <HAL_GetTick>
 8001e32:	0002      	movs	r2, r0
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e202      	b.n	8002246 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e40:	4b46      	ldr	r3, [pc, #280]	; (8001f5c <HAL_RCC_OscConfig+0x32c>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2202      	movs	r2, #2
 8001e46:	4013      	ands	r3, r2
 8001e48:	d1f1      	bne.n	8001e2e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2208      	movs	r2, #8
 8001e50:	4013      	ands	r3, r2
 8001e52:	d036      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	69db      	ldr	r3, [r3, #28]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d019      	beq.n	8001e90 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e5c:	4b3f      	ldr	r3, [pc, #252]	; (8001f5c <HAL_RCC_OscConfig+0x32c>)
 8001e5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e60:	4b3e      	ldr	r3, [pc, #248]	; (8001f5c <HAL_RCC_OscConfig+0x32c>)
 8001e62:	2101      	movs	r1, #1
 8001e64:	430a      	orrs	r2, r1
 8001e66:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e68:	f7fe fe7e 	bl	8000b68 <HAL_GetTick>
 8001e6c:	0003      	movs	r3, r0
 8001e6e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e70:	e008      	b.n	8001e84 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e72:	f7fe fe79 	bl	8000b68 <HAL_GetTick>
 8001e76:	0002      	movs	r2, r0
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e1e0      	b.n	8002246 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e84:	4b35      	ldr	r3, [pc, #212]	; (8001f5c <HAL_RCC_OscConfig+0x32c>)
 8001e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e88:	2202      	movs	r2, #2
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	d0f1      	beq.n	8001e72 <HAL_RCC_OscConfig+0x242>
 8001e8e:	e018      	b.n	8001ec2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e90:	4b32      	ldr	r3, [pc, #200]	; (8001f5c <HAL_RCC_OscConfig+0x32c>)
 8001e92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e94:	4b31      	ldr	r3, [pc, #196]	; (8001f5c <HAL_RCC_OscConfig+0x32c>)
 8001e96:	2101      	movs	r1, #1
 8001e98:	438a      	bics	r2, r1
 8001e9a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e9c:	f7fe fe64 	bl	8000b68 <HAL_GetTick>
 8001ea0:	0003      	movs	r3, r0
 8001ea2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ea4:	e008      	b.n	8001eb8 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ea6:	f7fe fe5f 	bl	8000b68 <HAL_GetTick>
 8001eaa:	0002      	movs	r2, r0
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e1c6      	b.n	8002246 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eb8:	4b28      	ldr	r3, [pc, #160]	; (8001f5c <HAL_RCC_OscConfig+0x32c>)
 8001eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebc:	2202      	movs	r2, #2
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	d1f1      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2204      	movs	r2, #4
 8001ec8:	4013      	ands	r3, r2
 8001eca:	d100      	bne.n	8001ece <HAL_RCC_OscConfig+0x29e>
 8001ecc:	e0b4      	b.n	8002038 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ece:	201f      	movs	r0, #31
 8001ed0:	183b      	adds	r3, r7, r0
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ed6:	4b21      	ldr	r3, [pc, #132]	; (8001f5c <HAL_RCC_OscConfig+0x32c>)
 8001ed8:	69da      	ldr	r2, [r3, #28]
 8001eda:	2380      	movs	r3, #128	; 0x80
 8001edc:	055b      	lsls	r3, r3, #21
 8001ede:	4013      	ands	r3, r2
 8001ee0:	d110      	bne.n	8001f04 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ee2:	4b1e      	ldr	r3, [pc, #120]	; (8001f5c <HAL_RCC_OscConfig+0x32c>)
 8001ee4:	69da      	ldr	r2, [r3, #28]
 8001ee6:	4b1d      	ldr	r3, [pc, #116]	; (8001f5c <HAL_RCC_OscConfig+0x32c>)
 8001ee8:	2180      	movs	r1, #128	; 0x80
 8001eea:	0549      	lsls	r1, r1, #21
 8001eec:	430a      	orrs	r2, r1
 8001eee:	61da      	str	r2, [r3, #28]
 8001ef0:	4b1a      	ldr	r3, [pc, #104]	; (8001f5c <HAL_RCC_OscConfig+0x32c>)
 8001ef2:	69da      	ldr	r2, [r3, #28]
 8001ef4:	2380      	movs	r3, #128	; 0x80
 8001ef6:	055b      	lsls	r3, r3, #21
 8001ef8:	4013      	ands	r3, r2
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001efe:	183b      	adds	r3, r7, r0
 8001f00:	2201      	movs	r2, #1
 8001f02:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f04:	4b18      	ldr	r3, [pc, #96]	; (8001f68 <HAL_RCC_OscConfig+0x338>)
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	2380      	movs	r3, #128	; 0x80
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	d11a      	bne.n	8001f46 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f10:	4b15      	ldr	r3, [pc, #84]	; (8001f68 <HAL_RCC_OscConfig+0x338>)
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	4b14      	ldr	r3, [pc, #80]	; (8001f68 <HAL_RCC_OscConfig+0x338>)
 8001f16:	2180      	movs	r1, #128	; 0x80
 8001f18:	0049      	lsls	r1, r1, #1
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f1e:	f7fe fe23 	bl	8000b68 <HAL_GetTick>
 8001f22:	0003      	movs	r3, r0
 8001f24:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f28:	f7fe fe1e 	bl	8000b68 <HAL_GetTick>
 8001f2c:	0002      	movs	r2, r0
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b64      	cmp	r3, #100	; 0x64
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e185      	b.n	8002246 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f3a:	4b0b      	ldr	r3, [pc, #44]	; (8001f68 <HAL_RCC_OscConfig+0x338>)
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	2380      	movs	r3, #128	; 0x80
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	4013      	ands	r3, r2
 8001f44:	d0f0      	beq.n	8001f28 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d10e      	bne.n	8001f6c <HAL_RCC_OscConfig+0x33c>
 8001f4e:	4b03      	ldr	r3, [pc, #12]	; (8001f5c <HAL_RCC_OscConfig+0x32c>)
 8001f50:	6a1a      	ldr	r2, [r3, #32]
 8001f52:	4b02      	ldr	r3, [pc, #8]	; (8001f5c <HAL_RCC_OscConfig+0x32c>)
 8001f54:	2101      	movs	r1, #1
 8001f56:	430a      	orrs	r2, r1
 8001f58:	621a      	str	r2, [r3, #32]
 8001f5a:	e035      	b.n	8001fc8 <HAL_RCC_OscConfig+0x398>
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	fffeffff 	.word	0xfffeffff
 8001f64:	fffbffff 	.word	0xfffbffff
 8001f68:	40007000 	.word	0x40007000
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d10c      	bne.n	8001f8e <HAL_RCC_OscConfig+0x35e>
 8001f74:	4bb6      	ldr	r3, [pc, #728]	; (8002250 <HAL_RCC_OscConfig+0x620>)
 8001f76:	6a1a      	ldr	r2, [r3, #32]
 8001f78:	4bb5      	ldr	r3, [pc, #724]	; (8002250 <HAL_RCC_OscConfig+0x620>)
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	438a      	bics	r2, r1
 8001f7e:	621a      	str	r2, [r3, #32]
 8001f80:	4bb3      	ldr	r3, [pc, #716]	; (8002250 <HAL_RCC_OscConfig+0x620>)
 8001f82:	6a1a      	ldr	r2, [r3, #32]
 8001f84:	4bb2      	ldr	r3, [pc, #712]	; (8002250 <HAL_RCC_OscConfig+0x620>)
 8001f86:	2104      	movs	r1, #4
 8001f88:	438a      	bics	r2, r1
 8001f8a:	621a      	str	r2, [r3, #32]
 8001f8c:	e01c      	b.n	8001fc8 <HAL_RCC_OscConfig+0x398>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	2b05      	cmp	r3, #5
 8001f94:	d10c      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x380>
 8001f96:	4bae      	ldr	r3, [pc, #696]	; (8002250 <HAL_RCC_OscConfig+0x620>)
 8001f98:	6a1a      	ldr	r2, [r3, #32]
 8001f9a:	4bad      	ldr	r3, [pc, #692]	; (8002250 <HAL_RCC_OscConfig+0x620>)
 8001f9c:	2104      	movs	r1, #4
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	621a      	str	r2, [r3, #32]
 8001fa2:	4bab      	ldr	r3, [pc, #684]	; (8002250 <HAL_RCC_OscConfig+0x620>)
 8001fa4:	6a1a      	ldr	r2, [r3, #32]
 8001fa6:	4baa      	ldr	r3, [pc, #680]	; (8002250 <HAL_RCC_OscConfig+0x620>)
 8001fa8:	2101      	movs	r1, #1
 8001faa:	430a      	orrs	r2, r1
 8001fac:	621a      	str	r2, [r3, #32]
 8001fae:	e00b      	b.n	8001fc8 <HAL_RCC_OscConfig+0x398>
 8001fb0:	4ba7      	ldr	r3, [pc, #668]	; (8002250 <HAL_RCC_OscConfig+0x620>)
 8001fb2:	6a1a      	ldr	r2, [r3, #32]
 8001fb4:	4ba6      	ldr	r3, [pc, #664]	; (8002250 <HAL_RCC_OscConfig+0x620>)
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	438a      	bics	r2, r1
 8001fba:	621a      	str	r2, [r3, #32]
 8001fbc:	4ba4      	ldr	r3, [pc, #656]	; (8002250 <HAL_RCC_OscConfig+0x620>)
 8001fbe:	6a1a      	ldr	r2, [r3, #32]
 8001fc0:	4ba3      	ldr	r3, [pc, #652]	; (8002250 <HAL_RCC_OscConfig+0x620>)
 8001fc2:	2104      	movs	r1, #4
 8001fc4:	438a      	bics	r2, r1
 8001fc6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d014      	beq.n	8001ffa <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fd0:	f7fe fdca 	bl	8000b68 <HAL_GetTick>
 8001fd4:	0003      	movs	r3, r0
 8001fd6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fd8:	e009      	b.n	8001fee <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fda:	f7fe fdc5 	bl	8000b68 <HAL_GetTick>
 8001fde:	0002      	movs	r2, r0
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	4a9b      	ldr	r2, [pc, #620]	; (8002254 <HAL_RCC_OscConfig+0x624>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e12b      	b.n	8002246 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fee:	4b98      	ldr	r3, [pc, #608]	; (8002250 <HAL_RCC_OscConfig+0x620>)
 8001ff0:	6a1b      	ldr	r3, [r3, #32]
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	d0f0      	beq.n	8001fda <HAL_RCC_OscConfig+0x3aa>
 8001ff8:	e013      	b.n	8002022 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ffa:	f7fe fdb5 	bl	8000b68 <HAL_GetTick>
 8001ffe:	0003      	movs	r3, r0
 8002000:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002002:	e009      	b.n	8002018 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002004:	f7fe fdb0 	bl	8000b68 <HAL_GetTick>
 8002008:	0002      	movs	r2, r0
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	4a91      	ldr	r2, [pc, #580]	; (8002254 <HAL_RCC_OscConfig+0x624>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e116      	b.n	8002246 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002018:	4b8d      	ldr	r3, [pc, #564]	; (8002250 <HAL_RCC_OscConfig+0x620>)
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	2202      	movs	r2, #2
 800201e:	4013      	ands	r3, r2
 8002020:	d1f0      	bne.n	8002004 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002022:	231f      	movs	r3, #31
 8002024:	18fb      	adds	r3, r7, r3
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d105      	bne.n	8002038 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800202c:	4b88      	ldr	r3, [pc, #544]	; (8002250 <HAL_RCC_OscConfig+0x620>)
 800202e:	69da      	ldr	r2, [r3, #28]
 8002030:	4b87      	ldr	r3, [pc, #540]	; (8002250 <HAL_RCC_OscConfig+0x620>)
 8002032:	4989      	ldr	r1, [pc, #548]	; (8002258 <HAL_RCC_OscConfig+0x628>)
 8002034:	400a      	ands	r2, r1
 8002036:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2210      	movs	r2, #16
 800203e:	4013      	ands	r3, r2
 8002040:	d063      	beq.n	800210a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d12a      	bne.n	80020a0 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800204a:	4b81      	ldr	r3, [pc, #516]	; (8002250 <HAL_RCC_OscConfig+0x620>)
 800204c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800204e:	4b80      	ldr	r3, [pc, #512]	; (8002250 <HAL_RCC_OscConfig+0x620>)
 8002050:	2104      	movs	r1, #4
 8002052:	430a      	orrs	r2, r1
 8002054:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002056:	4b7e      	ldr	r3, [pc, #504]	; (8002250 <HAL_RCC_OscConfig+0x620>)
 8002058:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800205a:	4b7d      	ldr	r3, [pc, #500]	; (8002250 <HAL_RCC_OscConfig+0x620>)
 800205c:	2101      	movs	r1, #1
 800205e:	430a      	orrs	r2, r1
 8002060:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002062:	f7fe fd81 	bl	8000b68 <HAL_GetTick>
 8002066:	0003      	movs	r3, r0
 8002068:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800206c:	f7fe fd7c 	bl	8000b68 <HAL_GetTick>
 8002070:	0002      	movs	r2, r0
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e0e3      	b.n	8002246 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800207e:	4b74      	ldr	r3, [pc, #464]	; (8002250 <HAL_RCC_OscConfig+0x620>)
 8002080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002082:	2202      	movs	r2, #2
 8002084:	4013      	ands	r3, r2
 8002086:	d0f1      	beq.n	800206c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002088:	4b71      	ldr	r3, [pc, #452]	; (8002250 <HAL_RCC_OscConfig+0x620>)
 800208a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800208c:	22f8      	movs	r2, #248	; 0xf8
 800208e:	4393      	bics	r3, r2
 8002090:	0019      	movs	r1, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	00da      	lsls	r2, r3, #3
 8002098:	4b6d      	ldr	r3, [pc, #436]	; (8002250 <HAL_RCC_OscConfig+0x620>)
 800209a:	430a      	orrs	r2, r1
 800209c:	635a      	str	r2, [r3, #52]	; 0x34
 800209e:	e034      	b.n	800210a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	695b      	ldr	r3, [r3, #20]
 80020a4:	3305      	adds	r3, #5
 80020a6:	d111      	bne.n	80020cc <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80020a8:	4b69      	ldr	r3, [pc, #420]	; (8002250 <HAL_RCC_OscConfig+0x620>)
 80020aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020ac:	4b68      	ldr	r3, [pc, #416]	; (8002250 <HAL_RCC_OscConfig+0x620>)
 80020ae:	2104      	movs	r1, #4
 80020b0:	438a      	bics	r2, r1
 80020b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80020b4:	4b66      	ldr	r3, [pc, #408]	; (8002250 <HAL_RCC_OscConfig+0x620>)
 80020b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020b8:	22f8      	movs	r2, #248	; 0xf8
 80020ba:	4393      	bics	r3, r2
 80020bc:	0019      	movs	r1, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	00da      	lsls	r2, r3, #3
 80020c4:	4b62      	ldr	r3, [pc, #392]	; (8002250 <HAL_RCC_OscConfig+0x620>)
 80020c6:	430a      	orrs	r2, r1
 80020c8:	635a      	str	r2, [r3, #52]	; 0x34
 80020ca:	e01e      	b.n	800210a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80020cc:	4b60      	ldr	r3, [pc, #384]	; (8002250 <HAL_RCC_OscConfig+0x620>)
 80020ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020d0:	4b5f      	ldr	r3, [pc, #380]	; (8002250 <HAL_RCC_OscConfig+0x620>)
 80020d2:	2104      	movs	r1, #4
 80020d4:	430a      	orrs	r2, r1
 80020d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80020d8:	4b5d      	ldr	r3, [pc, #372]	; (8002250 <HAL_RCC_OscConfig+0x620>)
 80020da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020dc:	4b5c      	ldr	r3, [pc, #368]	; (8002250 <HAL_RCC_OscConfig+0x620>)
 80020de:	2101      	movs	r1, #1
 80020e0:	438a      	bics	r2, r1
 80020e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020e4:	f7fe fd40 	bl	8000b68 <HAL_GetTick>
 80020e8:	0003      	movs	r3, r0
 80020ea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80020ec:	e008      	b.n	8002100 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80020ee:	f7fe fd3b 	bl	8000b68 <HAL_GetTick>
 80020f2:	0002      	movs	r2, r0
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e0a2      	b.n	8002246 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002100:	4b53      	ldr	r3, [pc, #332]	; (8002250 <HAL_RCC_OscConfig+0x620>)
 8002102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002104:	2202      	movs	r2, #2
 8002106:	4013      	ands	r3, r2
 8002108:	d1f1      	bne.n	80020ee <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a1b      	ldr	r3, [r3, #32]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d100      	bne.n	8002114 <HAL_RCC_OscConfig+0x4e4>
 8002112:	e097      	b.n	8002244 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002114:	4b4e      	ldr	r3, [pc, #312]	; (8002250 <HAL_RCC_OscConfig+0x620>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	220c      	movs	r2, #12
 800211a:	4013      	ands	r3, r2
 800211c:	2b08      	cmp	r3, #8
 800211e:	d100      	bne.n	8002122 <HAL_RCC_OscConfig+0x4f2>
 8002120:	e06b      	b.n	80021fa <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a1b      	ldr	r3, [r3, #32]
 8002126:	2b02      	cmp	r3, #2
 8002128:	d14c      	bne.n	80021c4 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800212a:	4b49      	ldr	r3, [pc, #292]	; (8002250 <HAL_RCC_OscConfig+0x620>)
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	4b48      	ldr	r3, [pc, #288]	; (8002250 <HAL_RCC_OscConfig+0x620>)
 8002130:	494a      	ldr	r1, [pc, #296]	; (800225c <HAL_RCC_OscConfig+0x62c>)
 8002132:	400a      	ands	r2, r1
 8002134:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002136:	f7fe fd17 	bl	8000b68 <HAL_GetTick>
 800213a:	0003      	movs	r3, r0
 800213c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800213e:	e008      	b.n	8002152 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002140:	f7fe fd12 	bl	8000b68 <HAL_GetTick>
 8002144:	0002      	movs	r2, r0
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b02      	cmp	r3, #2
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e079      	b.n	8002246 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002152:	4b3f      	ldr	r3, [pc, #252]	; (8002250 <HAL_RCC_OscConfig+0x620>)
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	2380      	movs	r3, #128	; 0x80
 8002158:	049b      	lsls	r3, r3, #18
 800215a:	4013      	ands	r3, r2
 800215c:	d1f0      	bne.n	8002140 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800215e:	4b3c      	ldr	r3, [pc, #240]	; (8002250 <HAL_RCC_OscConfig+0x620>)
 8002160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002162:	220f      	movs	r2, #15
 8002164:	4393      	bics	r3, r2
 8002166:	0019      	movs	r1, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800216c:	4b38      	ldr	r3, [pc, #224]	; (8002250 <HAL_RCC_OscConfig+0x620>)
 800216e:	430a      	orrs	r2, r1
 8002170:	62da      	str	r2, [r3, #44]	; 0x2c
 8002172:	4b37      	ldr	r3, [pc, #220]	; (8002250 <HAL_RCC_OscConfig+0x620>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	4a3a      	ldr	r2, [pc, #232]	; (8002260 <HAL_RCC_OscConfig+0x630>)
 8002178:	4013      	ands	r3, r2
 800217a:	0019      	movs	r1, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002184:	431a      	orrs	r2, r3
 8002186:	4b32      	ldr	r3, [pc, #200]	; (8002250 <HAL_RCC_OscConfig+0x620>)
 8002188:	430a      	orrs	r2, r1
 800218a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800218c:	4b30      	ldr	r3, [pc, #192]	; (8002250 <HAL_RCC_OscConfig+0x620>)
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	4b2f      	ldr	r3, [pc, #188]	; (8002250 <HAL_RCC_OscConfig+0x620>)
 8002192:	2180      	movs	r1, #128	; 0x80
 8002194:	0449      	lsls	r1, r1, #17
 8002196:	430a      	orrs	r2, r1
 8002198:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219a:	f7fe fce5 	bl	8000b68 <HAL_GetTick>
 800219e:	0003      	movs	r3, r0
 80021a0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021a4:	f7fe fce0 	bl	8000b68 <HAL_GetTick>
 80021a8:	0002      	movs	r2, r0
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e047      	b.n	8002246 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021b6:	4b26      	ldr	r3, [pc, #152]	; (8002250 <HAL_RCC_OscConfig+0x620>)
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	2380      	movs	r3, #128	; 0x80
 80021bc:	049b      	lsls	r3, r3, #18
 80021be:	4013      	ands	r3, r2
 80021c0:	d0f0      	beq.n	80021a4 <HAL_RCC_OscConfig+0x574>
 80021c2:	e03f      	b.n	8002244 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021c4:	4b22      	ldr	r3, [pc, #136]	; (8002250 <HAL_RCC_OscConfig+0x620>)
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	4b21      	ldr	r3, [pc, #132]	; (8002250 <HAL_RCC_OscConfig+0x620>)
 80021ca:	4924      	ldr	r1, [pc, #144]	; (800225c <HAL_RCC_OscConfig+0x62c>)
 80021cc:	400a      	ands	r2, r1
 80021ce:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d0:	f7fe fcca 	bl	8000b68 <HAL_GetTick>
 80021d4:	0003      	movs	r3, r0
 80021d6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021d8:	e008      	b.n	80021ec <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021da:	f7fe fcc5 	bl	8000b68 <HAL_GetTick>
 80021de:	0002      	movs	r2, r0
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e02c      	b.n	8002246 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ec:	4b18      	ldr	r3, [pc, #96]	; (8002250 <HAL_RCC_OscConfig+0x620>)
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	2380      	movs	r3, #128	; 0x80
 80021f2:	049b      	lsls	r3, r3, #18
 80021f4:	4013      	ands	r3, r2
 80021f6:	d1f0      	bne.n	80021da <HAL_RCC_OscConfig+0x5aa>
 80021f8:	e024      	b.n	8002244 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a1b      	ldr	r3, [r3, #32]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d101      	bne.n	8002206 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e01f      	b.n	8002246 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002206:	4b12      	ldr	r3, [pc, #72]	; (8002250 <HAL_RCC_OscConfig+0x620>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800220c:	4b10      	ldr	r3, [pc, #64]	; (8002250 <HAL_RCC_OscConfig+0x620>)
 800220e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002210:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002212:	697a      	ldr	r2, [r7, #20]
 8002214:	2380      	movs	r3, #128	; 0x80
 8002216:	025b      	lsls	r3, r3, #9
 8002218:	401a      	ands	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221e:	429a      	cmp	r2, r3
 8002220:	d10e      	bne.n	8002240 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	220f      	movs	r2, #15
 8002226:	401a      	ands	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800222c:	429a      	cmp	r2, r3
 800222e:	d107      	bne.n	8002240 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002230:	697a      	ldr	r2, [r7, #20]
 8002232:	23f0      	movs	r3, #240	; 0xf0
 8002234:	039b      	lsls	r3, r3, #14
 8002236:	401a      	ands	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800223c:	429a      	cmp	r2, r3
 800223e:	d001      	beq.n	8002244 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e000      	b.n	8002246 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	0018      	movs	r0, r3
 8002248:	46bd      	mov	sp, r7
 800224a:	b008      	add	sp, #32
 800224c:	bd80      	pop	{r7, pc}
 800224e:	46c0      	nop			; (mov r8, r8)
 8002250:	40021000 	.word	0x40021000
 8002254:	00001388 	.word	0x00001388
 8002258:	efffffff 	.word	0xefffffff
 800225c:	feffffff 	.word	0xfeffffff
 8002260:	ffc2ffff 	.word	0xffc2ffff

08002264 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d101      	bne.n	8002278 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e0b3      	b.n	80023e0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002278:	4b5b      	ldr	r3, [pc, #364]	; (80023e8 <HAL_RCC_ClockConfig+0x184>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2201      	movs	r2, #1
 800227e:	4013      	ands	r3, r2
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	429a      	cmp	r2, r3
 8002284:	d911      	bls.n	80022aa <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002286:	4b58      	ldr	r3, [pc, #352]	; (80023e8 <HAL_RCC_ClockConfig+0x184>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2201      	movs	r2, #1
 800228c:	4393      	bics	r3, r2
 800228e:	0019      	movs	r1, r3
 8002290:	4b55      	ldr	r3, [pc, #340]	; (80023e8 <HAL_RCC_ClockConfig+0x184>)
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	430a      	orrs	r2, r1
 8002296:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002298:	4b53      	ldr	r3, [pc, #332]	; (80023e8 <HAL_RCC_ClockConfig+0x184>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2201      	movs	r2, #1
 800229e:	4013      	ands	r3, r2
 80022a0:	683a      	ldr	r2, [r7, #0]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d001      	beq.n	80022aa <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e09a      	b.n	80023e0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2202      	movs	r2, #2
 80022b0:	4013      	ands	r3, r2
 80022b2:	d015      	beq.n	80022e0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2204      	movs	r2, #4
 80022ba:	4013      	ands	r3, r2
 80022bc:	d006      	beq.n	80022cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80022be:	4b4b      	ldr	r3, [pc, #300]	; (80023ec <HAL_RCC_ClockConfig+0x188>)
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	4b4a      	ldr	r3, [pc, #296]	; (80023ec <HAL_RCC_ClockConfig+0x188>)
 80022c4:	21e0      	movs	r1, #224	; 0xe0
 80022c6:	00c9      	lsls	r1, r1, #3
 80022c8:	430a      	orrs	r2, r1
 80022ca:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022cc:	4b47      	ldr	r3, [pc, #284]	; (80023ec <HAL_RCC_ClockConfig+0x188>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	22f0      	movs	r2, #240	; 0xf0
 80022d2:	4393      	bics	r3, r2
 80022d4:	0019      	movs	r1, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	689a      	ldr	r2, [r3, #8]
 80022da:	4b44      	ldr	r3, [pc, #272]	; (80023ec <HAL_RCC_ClockConfig+0x188>)
 80022dc:	430a      	orrs	r2, r1
 80022de:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2201      	movs	r2, #1
 80022e6:	4013      	ands	r3, r2
 80022e8:	d040      	beq.n	800236c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d107      	bne.n	8002302 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022f2:	4b3e      	ldr	r3, [pc, #248]	; (80023ec <HAL_RCC_ClockConfig+0x188>)
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	2380      	movs	r3, #128	; 0x80
 80022f8:	029b      	lsls	r3, r3, #10
 80022fa:	4013      	ands	r3, r2
 80022fc:	d114      	bne.n	8002328 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e06e      	b.n	80023e0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	2b02      	cmp	r3, #2
 8002308:	d107      	bne.n	800231a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800230a:	4b38      	ldr	r3, [pc, #224]	; (80023ec <HAL_RCC_ClockConfig+0x188>)
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	2380      	movs	r3, #128	; 0x80
 8002310:	049b      	lsls	r3, r3, #18
 8002312:	4013      	ands	r3, r2
 8002314:	d108      	bne.n	8002328 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e062      	b.n	80023e0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800231a:	4b34      	ldr	r3, [pc, #208]	; (80023ec <HAL_RCC_ClockConfig+0x188>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2202      	movs	r2, #2
 8002320:	4013      	ands	r3, r2
 8002322:	d101      	bne.n	8002328 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e05b      	b.n	80023e0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002328:	4b30      	ldr	r3, [pc, #192]	; (80023ec <HAL_RCC_ClockConfig+0x188>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	2203      	movs	r2, #3
 800232e:	4393      	bics	r3, r2
 8002330:	0019      	movs	r1, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685a      	ldr	r2, [r3, #4]
 8002336:	4b2d      	ldr	r3, [pc, #180]	; (80023ec <HAL_RCC_ClockConfig+0x188>)
 8002338:	430a      	orrs	r2, r1
 800233a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800233c:	f7fe fc14 	bl	8000b68 <HAL_GetTick>
 8002340:	0003      	movs	r3, r0
 8002342:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002344:	e009      	b.n	800235a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002346:	f7fe fc0f 	bl	8000b68 <HAL_GetTick>
 800234a:	0002      	movs	r2, r0
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	4a27      	ldr	r2, [pc, #156]	; (80023f0 <HAL_RCC_ClockConfig+0x18c>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d901      	bls.n	800235a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e042      	b.n	80023e0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800235a:	4b24      	ldr	r3, [pc, #144]	; (80023ec <HAL_RCC_ClockConfig+0x188>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	220c      	movs	r2, #12
 8002360:	401a      	ands	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	429a      	cmp	r2, r3
 800236a:	d1ec      	bne.n	8002346 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800236c:	4b1e      	ldr	r3, [pc, #120]	; (80023e8 <HAL_RCC_ClockConfig+0x184>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2201      	movs	r2, #1
 8002372:	4013      	ands	r3, r2
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	429a      	cmp	r2, r3
 8002378:	d211      	bcs.n	800239e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800237a:	4b1b      	ldr	r3, [pc, #108]	; (80023e8 <HAL_RCC_ClockConfig+0x184>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2201      	movs	r2, #1
 8002380:	4393      	bics	r3, r2
 8002382:	0019      	movs	r1, r3
 8002384:	4b18      	ldr	r3, [pc, #96]	; (80023e8 <HAL_RCC_ClockConfig+0x184>)
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	430a      	orrs	r2, r1
 800238a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800238c:	4b16      	ldr	r3, [pc, #88]	; (80023e8 <HAL_RCC_ClockConfig+0x184>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2201      	movs	r2, #1
 8002392:	4013      	ands	r3, r2
 8002394:	683a      	ldr	r2, [r7, #0]
 8002396:	429a      	cmp	r2, r3
 8002398:	d001      	beq.n	800239e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e020      	b.n	80023e0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2204      	movs	r2, #4
 80023a4:	4013      	ands	r3, r2
 80023a6:	d009      	beq.n	80023bc <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80023a8:	4b10      	ldr	r3, [pc, #64]	; (80023ec <HAL_RCC_ClockConfig+0x188>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	4a11      	ldr	r2, [pc, #68]	; (80023f4 <HAL_RCC_ClockConfig+0x190>)
 80023ae:	4013      	ands	r3, r2
 80023b0:	0019      	movs	r1, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	68da      	ldr	r2, [r3, #12]
 80023b6:	4b0d      	ldr	r3, [pc, #52]	; (80023ec <HAL_RCC_ClockConfig+0x188>)
 80023b8:	430a      	orrs	r2, r1
 80023ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80023bc:	f000 f820 	bl	8002400 <HAL_RCC_GetSysClockFreq>
 80023c0:	0001      	movs	r1, r0
 80023c2:	4b0a      	ldr	r3, [pc, #40]	; (80023ec <HAL_RCC_ClockConfig+0x188>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	091b      	lsrs	r3, r3, #4
 80023c8:	220f      	movs	r2, #15
 80023ca:	4013      	ands	r3, r2
 80023cc:	4a0a      	ldr	r2, [pc, #40]	; (80023f8 <HAL_RCC_ClockConfig+0x194>)
 80023ce:	5cd3      	ldrb	r3, [r2, r3]
 80023d0:	000a      	movs	r2, r1
 80023d2:	40da      	lsrs	r2, r3
 80023d4:	4b09      	ldr	r3, [pc, #36]	; (80023fc <HAL_RCC_ClockConfig+0x198>)
 80023d6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80023d8:	2000      	movs	r0, #0
 80023da:	f7fe fb7f 	bl	8000adc <HAL_InitTick>
  
  return HAL_OK;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	0018      	movs	r0, r3
 80023e2:	46bd      	mov	sp, r7
 80023e4:	b004      	add	sp, #16
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40022000 	.word	0x40022000
 80023ec:	40021000 	.word	0x40021000
 80023f0:	00001388 	.word	0x00001388
 80023f4:	fffff8ff 	.word	0xfffff8ff
 80023f8:	0800396c 	.word	0x0800396c
 80023fc:	20000000 	.word	0x20000000

08002400 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002406:	2300      	movs	r3, #0
 8002408:	60fb      	str	r3, [r7, #12]
 800240a:	2300      	movs	r3, #0
 800240c:	60bb      	str	r3, [r7, #8]
 800240e:	2300      	movs	r3, #0
 8002410:	617b      	str	r3, [r7, #20]
 8002412:	2300      	movs	r3, #0
 8002414:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002416:	2300      	movs	r3, #0
 8002418:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800241a:	4b20      	ldr	r3, [pc, #128]	; (800249c <HAL_RCC_GetSysClockFreq+0x9c>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	220c      	movs	r2, #12
 8002424:	4013      	ands	r3, r2
 8002426:	2b04      	cmp	r3, #4
 8002428:	d002      	beq.n	8002430 <HAL_RCC_GetSysClockFreq+0x30>
 800242a:	2b08      	cmp	r3, #8
 800242c:	d003      	beq.n	8002436 <HAL_RCC_GetSysClockFreq+0x36>
 800242e:	e02c      	b.n	800248a <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002430:	4b1b      	ldr	r3, [pc, #108]	; (80024a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002432:	613b      	str	r3, [r7, #16]
      break;
 8002434:	e02c      	b.n	8002490 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	0c9b      	lsrs	r3, r3, #18
 800243a:	220f      	movs	r2, #15
 800243c:	4013      	ands	r3, r2
 800243e:	4a19      	ldr	r2, [pc, #100]	; (80024a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002440:	5cd3      	ldrb	r3, [r2, r3]
 8002442:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002444:	4b15      	ldr	r3, [pc, #84]	; (800249c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002448:	220f      	movs	r2, #15
 800244a:	4013      	ands	r3, r2
 800244c:	4a16      	ldr	r2, [pc, #88]	; (80024a8 <HAL_RCC_GetSysClockFreq+0xa8>)
 800244e:	5cd3      	ldrb	r3, [r2, r3]
 8002450:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	2380      	movs	r3, #128	; 0x80
 8002456:	025b      	lsls	r3, r3, #9
 8002458:	4013      	ands	r3, r2
 800245a:	d009      	beq.n	8002470 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800245c:	68b9      	ldr	r1, [r7, #8]
 800245e:	4810      	ldr	r0, [pc, #64]	; (80024a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002460:	f7fd fe64 	bl	800012c <__udivsi3>
 8002464:	0003      	movs	r3, r0
 8002466:	001a      	movs	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4353      	muls	r3, r2
 800246c:	617b      	str	r3, [r7, #20]
 800246e:	e009      	b.n	8002484 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002470:	6879      	ldr	r1, [r7, #4]
 8002472:	000a      	movs	r2, r1
 8002474:	0152      	lsls	r2, r2, #5
 8002476:	1a52      	subs	r2, r2, r1
 8002478:	0193      	lsls	r3, r2, #6
 800247a:	1a9b      	subs	r3, r3, r2
 800247c:	00db      	lsls	r3, r3, #3
 800247e:	185b      	adds	r3, r3, r1
 8002480:	021b      	lsls	r3, r3, #8
 8002482:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	613b      	str	r3, [r7, #16]
      break;
 8002488:	e002      	b.n	8002490 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800248a:	4b05      	ldr	r3, [pc, #20]	; (80024a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800248c:	613b      	str	r3, [r7, #16]
      break;
 800248e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002490:	693b      	ldr	r3, [r7, #16]
}
 8002492:	0018      	movs	r0, r3
 8002494:	46bd      	mov	sp, r7
 8002496:	b006      	add	sp, #24
 8002498:	bd80      	pop	{r7, pc}
 800249a:	46c0      	nop			; (mov r8, r8)
 800249c:	40021000 	.word	0x40021000
 80024a0:	007a1200 	.word	0x007a1200
 80024a4:	08003984 	.word	0x08003984
 80024a8:	08003994 	.word	0x08003994

080024ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024b0:	4b02      	ldr	r3, [pc, #8]	; (80024bc <HAL_RCC_GetHCLKFreq+0x10>)
 80024b2:	681b      	ldr	r3, [r3, #0]
}
 80024b4:	0018      	movs	r0, r3
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	46c0      	nop			; (mov r8, r8)
 80024bc:	20000000 	.word	0x20000000

080024c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80024c4:	f7ff fff2 	bl	80024ac <HAL_RCC_GetHCLKFreq>
 80024c8:	0001      	movs	r1, r0
 80024ca:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	0a1b      	lsrs	r3, r3, #8
 80024d0:	2207      	movs	r2, #7
 80024d2:	4013      	ands	r3, r2
 80024d4:	4a04      	ldr	r2, [pc, #16]	; (80024e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80024d6:	5cd3      	ldrb	r3, [r2, r3]
 80024d8:	40d9      	lsrs	r1, r3
 80024da:	000b      	movs	r3, r1
}    
 80024dc:	0018      	movs	r0, r3
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	46c0      	nop			; (mov r8, r8)
 80024e4:	40021000 	.word	0x40021000
 80024e8:	0800397c 	.word	0x0800397c

080024ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024f4:	2300      	movs	r3, #0
 80024f6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80024f8:	2300      	movs	r3, #0
 80024fa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	2380      	movs	r3, #128	; 0x80
 8002502:	025b      	lsls	r3, r3, #9
 8002504:	4013      	ands	r3, r2
 8002506:	d100      	bne.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002508:	e08e      	b.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800250a:	2017      	movs	r0, #23
 800250c:	183b      	adds	r3, r7, r0
 800250e:	2200      	movs	r2, #0
 8002510:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002512:	4b5f      	ldr	r3, [pc, #380]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002514:	69da      	ldr	r2, [r3, #28]
 8002516:	2380      	movs	r3, #128	; 0x80
 8002518:	055b      	lsls	r3, r3, #21
 800251a:	4013      	ands	r3, r2
 800251c:	d110      	bne.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800251e:	4b5c      	ldr	r3, [pc, #368]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002520:	69da      	ldr	r2, [r3, #28]
 8002522:	4b5b      	ldr	r3, [pc, #364]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002524:	2180      	movs	r1, #128	; 0x80
 8002526:	0549      	lsls	r1, r1, #21
 8002528:	430a      	orrs	r2, r1
 800252a:	61da      	str	r2, [r3, #28]
 800252c:	4b58      	ldr	r3, [pc, #352]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800252e:	69da      	ldr	r2, [r3, #28]
 8002530:	2380      	movs	r3, #128	; 0x80
 8002532:	055b      	lsls	r3, r3, #21
 8002534:	4013      	ands	r3, r2
 8002536:	60bb      	str	r3, [r7, #8]
 8002538:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800253a:	183b      	adds	r3, r7, r0
 800253c:	2201      	movs	r2, #1
 800253e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002540:	4b54      	ldr	r3, [pc, #336]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	2380      	movs	r3, #128	; 0x80
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	4013      	ands	r3, r2
 800254a:	d11a      	bne.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800254c:	4b51      	ldr	r3, [pc, #324]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	4b50      	ldr	r3, [pc, #320]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002552:	2180      	movs	r1, #128	; 0x80
 8002554:	0049      	lsls	r1, r1, #1
 8002556:	430a      	orrs	r2, r1
 8002558:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800255a:	f7fe fb05 	bl	8000b68 <HAL_GetTick>
 800255e:	0003      	movs	r3, r0
 8002560:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002562:	e008      	b.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002564:	f7fe fb00 	bl	8000b68 <HAL_GetTick>
 8002568:	0002      	movs	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b64      	cmp	r3, #100	; 0x64
 8002570:	d901      	bls.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e087      	b.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002576:	4b47      	ldr	r3, [pc, #284]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	2380      	movs	r3, #128	; 0x80
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	4013      	ands	r3, r2
 8002580:	d0f0      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002582:	4b43      	ldr	r3, [pc, #268]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002584:	6a1a      	ldr	r2, [r3, #32]
 8002586:	23c0      	movs	r3, #192	; 0xc0
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	4013      	ands	r3, r2
 800258c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d034      	beq.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685a      	ldr	r2, [r3, #4]
 8002598:	23c0      	movs	r3, #192	; 0xc0
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	4013      	ands	r3, r2
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d02c      	beq.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025a4:	4b3a      	ldr	r3, [pc, #232]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80025a6:	6a1b      	ldr	r3, [r3, #32]
 80025a8:	4a3b      	ldr	r2, [pc, #236]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025aa:	4013      	ands	r3, r2
 80025ac:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025ae:	4b38      	ldr	r3, [pc, #224]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80025b0:	6a1a      	ldr	r2, [r3, #32]
 80025b2:	4b37      	ldr	r3, [pc, #220]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80025b4:	2180      	movs	r1, #128	; 0x80
 80025b6:	0249      	lsls	r1, r1, #9
 80025b8:	430a      	orrs	r2, r1
 80025ba:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025bc:	4b34      	ldr	r3, [pc, #208]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80025be:	6a1a      	ldr	r2, [r3, #32]
 80025c0:	4b33      	ldr	r3, [pc, #204]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80025c2:	4936      	ldr	r1, [pc, #216]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80025c4:	400a      	ands	r2, r1
 80025c6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80025c8:	4b31      	ldr	r3, [pc, #196]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2201      	movs	r2, #1
 80025d2:	4013      	ands	r3, r2
 80025d4:	d013      	beq.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d6:	f7fe fac7 	bl	8000b68 <HAL_GetTick>
 80025da:	0003      	movs	r3, r0
 80025dc:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025de:	e009      	b.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025e0:	f7fe fac2 	bl	8000b68 <HAL_GetTick>
 80025e4:	0002      	movs	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	4a2d      	ldr	r2, [pc, #180]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d901      	bls.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e048      	b.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025f4:	4b26      	ldr	r3, [pc, #152]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80025f6:	6a1b      	ldr	r3, [r3, #32]
 80025f8:	2202      	movs	r2, #2
 80025fa:	4013      	ands	r3, r2
 80025fc:	d0f0      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025fe:	4b24      	ldr	r3, [pc, #144]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002600:	6a1b      	ldr	r3, [r3, #32]
 8002602:	4a25      	ldr	r2, [pc, #148]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002604:	4013      	ands	r3, r2
 8002606:	0019      	movs	r1, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685a      	ldr	r2, [r3, #4]
 800260c:	4b20      	ldr	r3, [pc, #128]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800260e:	430a      	orrs	r2, r1
 8002610:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002612:	2317      	movs	r3, #23
 8002614:	18fb      	adds	r3, r7, r3
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d105      	bne.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800261c:	4b1c      	ldr	r3, [pc, #112]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800261e:	69da      	ldr	r2, [r3, #28]
 8002620:	4b1b      	ldr	r3, [pc, #108]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002622:	4920      	ldr	r1, [pc, #128]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002624:	400a      	ands	r2, r1
 8002626:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2201      	movs	r2, #1
 800262e:	4013      	ands	r3, r2
 8002630:	d009      	beq.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002632:	4b17      	ldr	r3, [pc, #92]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002636:	2203      	movs	r2, #3
 8002638:	4393      	bics	r3, r2
 800263a:	0019      	movs	r1, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	4b13      	ldr	r3, [pc, #76]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002642:	430a      	orrs	r2, r1
 8002644:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2220      	movs	r2, #32
 800264c:	4013      	ands	r3, r2
 800264e:	d009      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002650:	4b0f      	ldr	r3, [pc, #60]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002654:	2210      	movs	r2, #16
 8002656:	4393      	bics	r3, r2
 8002658:	0019      	movs	r1, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	68da      	ldr	r2, [r3, #12]
 800265e:	4b0c      	ldr	r3, [pc, #48]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002660:	430a      	orrs	r2, r1
 8002662:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	2380      	movs	r3, #128	; 0x80
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	4013      	ands	r3, r2
 800266e:	d009      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002670:	4b07      	ldr	r3, [pc, #28]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002674:	2240      	movs	r2, #64	; 0x40
 8002676:	4393      	bics	r3, r2
 8002678:	0019      	movs	r1, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	691a      	ldr	r2, [r3, #16]
 800267e:	4b04      	ldr	r3, [pc, #16]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002680:	430a      	orrs	r2, r1
 8002682:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	0018      	movs	r0, r3
 8002688:	46bd      	mov	sp, r7
 800268a:	b006      	add	sp, #24
 800268c:	bd80      	pop	{r7, pc}
 800268e:	46c0      	nop			; (mov r8, r8)
 8002690:	40021000 	.word	0x40021000
 8002694:	40007000 	.word	0x40007000
 8002698:	fffffcff 	.word	0xfffffcff
 800269c:	fffeffff 	.word	0xfffeffff
 80026a0:	00001388 	.word	0x00001388
 80026a4:	efffffff 	.word	0xefffffff

080026a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e044      	b.n	8002744 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d107      	bne.n	80026d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2278      	movs	r2, #120	; 0x78
 80026c6:	2100      	movs	r1, #0
 80026c8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	0018      	movs	r0, r3
 80026ce:	f7fe f925 	bl	800091c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2224      	movs	r2, #36	; 0x24
 80026d6:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2101      	movs	r1, #1
 80026e4:	438a      	bics	r2, r1
 80026e6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	0018      	movs	r0, r3
 80026ec:	f000 f8d0 	bl	8002890 <UART_SetConfig>
 80026f0:	0003      	movs	r3, r0
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d101      	bne.n	80026fa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e024      	b.n	8002744 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	0018      	movs	r0, r3
 8002706:	f000 fa03 	bl	8002b10 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	685a      	ldr	r2, [r3, #4]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	490d      	ldr	r1, [pc, #52]	; (800274c <HAL_UART_Init+0xa4>)
 8002716:	400a      	ands	r2, r1
 8002718:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	212a      	movs	r1, #42	; 0x2a
 8002726:	438a      	bics	r2, r1
 8002728:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2101      	movs	r1, #1
 8002736:	430a      	orrs	r2, r1
 8002738:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	0018      	movs	r0, r3
 800273e:	f000 fa9b 	bl	8002c78 <UART_CheckIdleState>
 8002742:	0003      	movs	r3, r0
}
 8002744:	0018      	movs	r0, r3
 8002746:	46bd      	mov	sp, r7
 8002748:	b002      	add	sp, #8
 800274a:	bd80      	pop	{r7, pc}
 800274c:	ffffb7ff 	.word	0xffffb7ff

08002750 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b08a      	sub	sp, #40	; 0x28
 8002754:	af02      	add	r7, sp, #8
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	603b      	str	r3, [r7, #0]
 800275c:	1dbb      	adds	r3, r7, #6
 800275e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002764:	2b20      	cmp	r3, #32
 8002766:	d000      	beq.n	800276a <HAL_UART_Transmit+0x1a>
 8002768:	e08d      	b.n	8002886 <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d003      	beq.n	8002778 <HAL_UART_Transmit+0x28>
 8002770:	1dbb      	adds	r3, r7, #6
 8002772:	881b      	ldrh	r3, [r3, #0]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d101      	bne.n	800277c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e085      	b.n	8002888 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	689a      	ldr	r2, [r3, #8]
 8002780:	2380      	movs	r3, #128	; 0x80
 8002782:	015b      	lsls	r3, r3, #5
 8002784:	429a      	cmp	r2, r3
 8002786:	d109      	bne.n	800279c <HAL_UART_Transmit+0x4c>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d105      	bne.n	800279c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	2201      	movs	r2, #1
 8002794:	4013      	ands	r3, r2
 8002796:	d001      	beq.n	800279c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e075      	b.n	8002888 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2284      	movs	r2, #132	; 0x84
 80027a0:	2100      	movs	r1, #0
 80027a2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2221      	movs	r2, #33	; 0x21
 80027a8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027aa:	f7fe f9dd 	bl	8000b68 <HAL_GetTick>
 80027ae:	0003      	movs	r3, r0
 80027b0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	1dba      	adds	r2, r7, #6
 80027b6:	2150      	movs	r1, #80	; 0x50
 80027b8:	8812      	ldrh	r2, [r2, #0]
 80027ba:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	1dba      	adds	r2, r7, #6
 80027c0:	2152      	movs	r1, #82	; 0x52
 80027c2:	8812      	ldrh	r2, [r2, #0]
 80027c4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	689a      	ldr	r2, [r3, #8]
 80027ca:	2380      	movs	r3, #128	; 0x80
 80027cc:	015b      	lsls	r3, r3, #5
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d108      	bne.n	80027e4 <HAL_UART_Transmit+0x94>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d104      	bne.n	80027e4 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80027da:	2300      	movs	r3, #0
 80027dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	61bb      	str	r3, [r7, #24]
 80027e2:	e003      	b.n	80027ec <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027e8:	2300      	movs	r3, #0
 80027ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80027ec:	e030      	b.n	8002850 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	0013      	movs	r3, r2
 80027f8:	2200      	movs	r2, #0
 80027fa:	2180      	movs	r1, #128	; 0x80
 80027fc:	f000 fae4 	bl	8002dc8 <UART_WaitOnFlagUntilTimeout>
 8002800:	1e03      	subs	r3, r0, #0
 8002802:	d004      	beq.n	800280e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2220      	movs	r2, #32
 8002808:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e03c      	b.n	8002888 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d10b      	bne.n	800282c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	881a      	ldrh	r2, [r3, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	05d2      	lsls	r2, r2, #23
 800281e:	0dd2      	lsrs	r2, r2, #23
 8002820:	b292      	uxth	r2, r2
 8002822:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	3302      	adds	r3, #2
 8002828:	61bb      	str	r3, [r7, #24]
 800282a:	e008      	b.n	800283e <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	781a      	ldrb	r2, [r3, #0]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	b292      	uxth	r2, r2
 8002836:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	3301      	adds	r3, #1
 800283c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2252      	movs	r2, #82	; 0x52
 8002842:	5a9b      	ldrh	r3, [r3, r2]
 8002844:	b29b      	uxth	r3, r3
 8002846:	3b01      	subs	r3, #1
 8002848:	b299      	uxth	r1, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2252      	movs	r2, #82	; 0x52
 800284e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2252      	movs	r2, #82	; 0x52
 8002854:	5a9b      	ldrh	r3, [r3, r2]
 8002856:	b29b      	uxth	r3, r3
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1c8      	bne.n	80027ee <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800285c:	697a      	ldr	r2, [r7, #20]
 800285e:	68f8      	ldr	r0, [r7, #12]
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	9300      	str	r3, [sp, #0]
 8002864:	0013      	movs	r3, r2
 8002866:	2200      	movs	r2, #0
 8002868:	2140      	movs	r1, #64	; 0x40
 800286a:	f000 faad 	bl	8002dc8 <UART_WaitOnFlagUntilTimeout>
 800286e:	1e03      	subs	r3, r0, #0
 8002870:	d004      	beq.n	800287c <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2220      	movs	r2, #32
 8002876:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e005      	b.n	8002888 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2220      	movs	r2, #32
 8002880:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002882:	2300      	movs	r3, #0
 8002884:	e000      	b.n	8002888 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 8002886:	2302      	movs	r3, #2
  }
}
 8002888:	0018      	movs	r0, r3
 800288a:	46bd      	mov	sp, r7
 800288c:	b008      	add	sp, #32
 800288e:	bd80      	pop	{r7, pc}

08002890 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b088      	sub	sp, #32
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002898:	231e      	movs	r3, #30
 800289a:	18fb      	adds	r3, r7, r3
 800289c:	2200      	movs	r2, #0
 800289e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	431a      	orrs	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	431a      	orrs	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	69db      	ldr	r3, [r3, #28]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a8d      	ldr	r2, [pc, #564]	; (8002af4 <UART_SetConfig+0x264>)
 80028c0:	4013      	ands	r3, r2
 80028c2:	0019      	movs	r1, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	697a      	ldr	r2, [r7, #20]
 80028ca:	430a      	orrs	r2, r1
 80028cc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	4a88      	ldr	r2, [pc, #544]	; (8002af8 <UART_SetConfig+0x268>)
 80028d6:	4013      	ands	r3, r2
 80028d8:	0019      	movs	r1, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	68da      	ldr	r2, [r3, #12]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	430a      	orrs	r2, r1
 80028e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	4a7f      	ldr	r2, [pc, #508]	; (8002afc <UART_SetConfig+0x26c>)
 80028fe:	4013      	ands	r3, r2
 8002900:	0019      	movs	r1, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	697a      	ldr	r2, [r7, #20]
 8002908:	430a      	orrs	r2, r1
 800290a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a7b      	ldr	r2, [pc, #492]	; (8002b00 <UART_SetConfig+0x270>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d127      	bne.n	8002966 <UART_SetConfig+0xd6>
 8002916:	4b7b      	ldr	r3, [pc, #492]	; (8002b04 <UART_SetConfig+0x274>)
 8002918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291a:	2203      	movs	r2, #3
 800291c:	4013      	ands	r3, r2
 800291e:	2b03      	cmp	r3, #3
 8002920:	d00d      	beq.n	800293e <UART_SetConfig+0xae>
 8002922:	d81b      	bhi.n	800295c <UART_SetConfig+0xcc>
 8002924:	2b02      	cmp	r3, #2
 8002926:	d014      	beq.n	8002952 <UART_SetConfig+0xc2>
 8002928:	d818      	bhi.n	800295c <UART_SetConfig+0xcc>
 800292a:	2b00      	cmp	r3, #0
 800292c:	d002      	beq.n	8002934 <UART_SetConfig+0xa4>
 800292e:	2b01      	cmp	r3, #1
 8002930:	d00a      	beq.n	8002948 <UART_SetConfig+0xb8>
 8002932:	e013      	b.n	800295c <UART_SetConfig+0xcc>
 8002934:	231f      	movs	r3, #31
 8002936:	18fb      	adds	r3, r7, r3
 8002938:	2200      	movs	r2, #0
 800293a:	701a      	strb	r2, [r3, #0]
 800293c:	e021      	b.n	8002982 <UART_SetConfig+0xf2>
 800293e:	231f      	movs	r3, #31
 8002940:	18fb      	adds	r3, r7, r3
 8002942:	2202      	movs	r2, #2
 8002944:	701a      	strb	r2, [r3, #0]
 8002946:	e01c      	b.n	8002982 <UART_SetConfig+0xf2>
 8002948:	231f      	movs	r3, #31
 800294a:	18fb      	adds	r3, r7, r3
 800294c:	2204      	movs	r2, #4
 800294e:	701a      	strb	r2, [r3, #0]
 8002950:	e017      	b.n	8002982 <UART_SetConfig+0xf2>
 8002952:	231f      	movs	r3, #31
 8002954:	18fb      	adds	r3, r7, r3
 8002956:	2208      	movs	r2, #8
 8002958:	701a      	strb	r2, [r3, #0]
 800295a:	e012      	b.n	8002982 <UART_SetConfig+0xf2>
 800295c:	231f      	movs	r3, #31
 800295e:	18fb      	adds	r3, r7, r3
 8002960:	2210      	movs	r2, #16
 8002962:	701a      	strb	r2, [r3, #0]
 8002964:	e00d      	b.n	8002982 <UART_SetConfig+0xf2>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a67      	ldr	r2, [pc, #412]	; (8002b08 <UART_SetConfig+0x278>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d104      	bne.n	800297a <UART_SetConfig+0xea>
 8002970:	231f      	movs	r3, #31
 8002972:	18fb      	adds	r3, r7, r3
 8002974:	2200      	movs	r2, #0
 8002976:	701a      	strb	r2, [r3, #0]
 8002978:	e003      	b.n	8002982 <UART_SetConfig+0xf2>
 800297a:	231f      	movs	r3, #31
 800297c:	18fb      	adds	r3, r7, r3
 800297e:	2210      	movs	r2, #16
 8002980:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	69da      	ldr	r2, [r3, #28]
 8002986:	2380      	movs	r3, #128	; 0x80
 8002988:	021b      	lsls	r3, r3, #8
 800298a:	429a      	cmp	r2, r3
 800298c:	d15c      	bne.n	8002a48 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 800298e:	231f      	movs	r3, #31
 8002990:	18fb      	adds	r3, r7, r3
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	2b08      	cmp	r3, #8
 8002996:	d015      	beq.n	80029c4 <UART_SetConfig+0x134>
 8002998:	dc18      	bgt.n	80029cc <UART_SetConfig+0x13c>
 800299a:	2b04      	cmp	r3, #4
 800299c:	d00d      	beq.n	80029ba <UART_SetConfig+0x12a>
 800299e:	dc15      	bgt.n	80029cc <UART_SetConfig+0x13c>
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d002      	beq.n	80029aa <UART_SetConfig+0x11a>
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d005      	beq.n	80029b4 <UART_SetConfig+0x124>
 80029a8:	e010      	b.n	80029cc <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80029aa:	f7ff fd89 	bl	80024c0 <HAL_RCC_GetPCLK1Freq>
 80029ae:	0003      	movs	r3, r0
 80029b0:	61bb      	str	r3, [r7, #24]
        break;
 80029b2:	e012      	b.n	80029da <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80029b4:	4b55      	ldr	r3, [pc, #340]	; (8002b0c <UART_SetConfig+0x27c>)
 80029b6:	61bb      	str	r3, [r7, #24]
        break;
 80029b8:	e00f      	b.n	80029da <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029ba:	f7ff fd21 	bl	8002400 <HAL_RCC_GetSysClockFreq>
 80029be:	0003      	movs	r3, r0
 80029c0:	61bb      	str	r3, [r7, #24]
        break;
 80029c2:	e00a      	b.n	80029da <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029c4:	2380      	movs	r3, #128	; 0x80
 80029c6:	021b      	lsls	r3, r3, #8
 80029c8:	61bb      	str	r3, [r7, #24]
        break;
 80029ca:	e006      	b.n	80029da <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80029cc:	2300      	movs	r3, #0
 80029ce:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80029d0:	231e      	movs	r3, #30
 80029d2:	18fb      	adds	r3, r7, r3
 80029d4:	2201      	movs	r2, #1
 80029d6:	701a      	strb	r2, [r3, #0]
        break;
 80029d8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d100      	bne.n	80029e2 <UART_SetConfig+0x152>
 80029e0:	e07a      	b.n	8002ad8 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	005a      	lsls	r2, r3, #1
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	085b      	lsrs	r3, r3, #1
 80029ec:	18d2      	adds	r2, r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	0019      	movs	r1, r3
 80029f4:	0010      	movs	r0, r2
 80029f6:	f7fd fb99 	bl	800012c <__udivsi3>
 80029fa:	0003      	movs	r3, r0
 80029fc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	2b0f      	cmp	r3, #15
 8002a02:	d91c      	bls.n	8002a3e <UART_SetConfig+0x1ae>
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	2380      	movs	r3, #128	; 0x80
 8002a08:	025b      	lsls	r3, r3, #9
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d217      	bcs.n	8002a3e <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	200e      	movs	r0, #14
 8002a14:	183b      	adds	r3, r7, r0
 8002a16:	210f      	movs	r1, #15
 8002a18:	438a      	bics	r2, r1
 8002a1a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	085b      	lsrs	r3, r3, #1
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	2207      	movs	r2, #7
 8002a24:	4013      	ands	r3, r2
 8002a26:	b299      	uxth	r1, r3
 8002a28:	183b      	adds	r3, r7, r0
 8002a2a:	183a      	adds	r2, r7, r0
 8002a2c:	8812      	ldrh	r2, [r2, #0]
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	183a      	adds	r2, r7, r0
 8002a38:	8812      	ldrh	r2, [r2, #0]
 8002a3a:	60da      	str	r2, [r3, #12]
 8002a3c:	e04c      	b.n	8002ad8 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8002a3e:	231e      	movs	r3, #30
 8002a40:	18fb      	adds	r3, r7, r3
 8002a42:	2201      	movs	r2, #1
 8002a44:	701a      	strb	r2, [r3, #0]
 8002a46:	e047      	b.n	8002ad8 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002a48:	231f      	movs	r3, #31
 8002a4a:	18fb      	adds	r3, r7, r3
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	2b08      	cmp	r3, #8
 8002a50:	d015      	beq.n	8002a7e <UART_SetConfig+0x1ee>
 8002a52:	dc18      	bgt.n	8002a86 <UART_SetConfig+0x1f6>
 8002a54:	2b04      	cmp	r3, #4
 8002a56:	d00d      	beq.n	8002a74 <UART_SetConfig+0x1e4>
 8002a58:	dc15      	bgt.n	8002a86 <UART_SetConfig+0x1f6>
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d002      	beq.n	8002a64 <UART_SetConfig+0x1d4>
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d005      	beq.n	8002a6e <UART_SetConfig+0x1de>
 8002a62:	e010      	b.n	8002a86 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a64:	f7ff fd2c 	bl	80024c0 <HAL_RCC_GetPCLK1Freq>
 8002a68:	0003      	movs	r3, r0
 8002a6a:	61bb      	str	r3, [r7, #24]
        break;
 8002a6c:	e012      	b.n	8002a94 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a6e:	4b27      	ldr	r3, [pc, #156]	; (8002b0c <UART_SetConfig+0x27c>)
 8002a70:	61bb      	str	r3, [r7, #24]
        break;
 8002a72:	e00f      	b.n	8002a94 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a74:	f7ff fcc4 	bl	8002400 <HAL_RCC_GetSysClockFreq>
 8002a78:	0003      	movs	r3, r0
 8002a7a:	61bb      	str	r3, [r7, #24]
        break;
 8002a7c:	e00a      	b.n	8002a94 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a7e:	2380      	movs	r3, #128	; 0x80
 8002a80:	021b      	lsls	r3, r3, #8
 8002a82:	61bb      	str	r3, [r7, #24]
        break;
 8002a84:	e006      	b.n	8002a94 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002a86:	2300      	movs	r3, #0
 8002a88:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002a8a:	231e      	movs	r3, #30
 8002a8c:	18fb      	adds	r3, r7, r3
 8002a8e:	2201      	movs	r2, #1
 8002a90:	701a      	strb	r2, [r3, #0]
        break;
 8002a92:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d01e      	beq.n	8002ad8 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	085a      	lsrs	r2, r3, #1
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	18d2      	adds	r2, r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	0019      	movs	r1, r3
 8002aaa:	0010      	movs	r0, r2
 8002aac:	f7fd fb3e 	bl	800012c <__udivsi3>
 8002ab0:	0003      	movs	r3, r0
 8002ab2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	2b0f      	cmp	r3, #15
 8002ab8:	d90a      	bls.n	8002ad0 <UART_SetConfig+0x240>
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	2380      	movs	r3, #128	; 0x80
 8002abe:	025b      	lsls	r3, r3, #9
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d205      	bcs.n	8002ad0 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	60da      	str	r2, [r3, #12]
 8002ace:	e003      	b.n	8002ad8 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8002ad0:	231e      	movs	r3, #30
 8002ad2:	18fb      	adds	r3, r7, r3
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002ae4:	231e      	movs	r3, #30
 8002ae6:	18fb      	adds	r3, r7, r3
 8002ae8:	781b      	ldrb	r3, [r3, #0]
}
 8002aea:	0018      	movs	r0, r3
 8002aec:	46bd      	mov	sp, r7
 8002aee:	b008      	add	sp, #32
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	46c0      	nop			; (mov r8, r8)
 8002af4:	ffff69f3 	.word	0xffff69f3
 8002af8:	ffffcfff 	.word	0xffffcfff
 8002afc:	fffff4ff 	.word	0xfffff4ff
 8002b00:	40013800 	.word	0x40013800
 8002b04:	40021000 	.word	0x40021000
 8002b08:	40004400 	.word	0x40004400
 8002b0c:	007a1200 	.word	0x007a1200

08002b10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	4013      	ands	r3, r2
 8002b20:	d00b      	beq.n	8002b3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	4a4a      	ldr	r2, [pc, #296]	; (8002c54 <UART_AdvFeatureConfig+0x144>)
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	0019      	movs	r1, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	430a      	orrs	r2, r1
 8002b38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3e:	2202      	movs	r2, #2
 8002b40:	4013      	ands	r3, r2
 8002b42:	d00b      	beq.n	8002b5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	4a43      	ldr	r2, [pc, #268]	; (8002c58 <UART_AdvFeatureConfig+0x148>)
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	0019      	movs	r1, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b60:	2204      	movs	r2, #4
 8002b62:	4013      	ands	r3, r2
 8002b64:	d00b      	beq.n	8002b7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	4a3b      	ldr	r2, [pc, #236]	; (8002c5c <UART_AdvFeatureConfig+0x14c>)
 8002b6e:	4013      	ands	r3, r2
 8002b70:	0019      	movs	r1, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b82:	2208      	movs	r2, #8
 8002b84:	4013      	ands	r3, r2
 8002b86:	d00b      	beq.n	8002ba0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	4a34      	ldr	r2, [pc, #208]	; (8002c60 <UART_AdvFeatureConfig+0x150>)
 8002b90:	4013      	ands	r3, r2
 8002b92:	0019      	movs	r1, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba4:	2210      	movs	r2, #16
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	d00b      	beq.n	8002bc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	4a2c      	ldr	r2, [pc, #176]	; (8002c64 <UART_AdvFeatureConfig+0x154>)
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	0019      	movs	r1, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc6:	2220      	movs	r2, #32
 8002bc8:	4013      	ands	r3, r2
 8002bca:	d00b      	beq.n	8002be4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	4a25      	ldr	r2, [pc, #148]	; (8002c68 <UART_AdvFeatureConfig+0x158>)
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	0019      	movs	r1, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	430a      	orrs	r2, r1
 8002be2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be8:	2240      	movs	r2, #64	; 0x40
 8002bea:	4013      	ands	r3, r2
 8002bec:	d01d      	beq.n	8002c2a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	4a1d      	ldr	r2, [pc, #116]	; (8002c6c <UART_AdvFeatureConfig+0x15c>)
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	0019      	movs	r1, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	430a      	orrs	r2, r1
 8002c04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c0a:	2380      	movs	r3, #128	; 0x80
 8002c0c:	035b      	lsls	r3, r3, #13
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d10b      	bne.n	8002c2a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	4a15      	ldr	r2, [pc, #84]	; (8002c70 <UART_AdvFeatureConfig+0x160>)
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	0019      	movs	r1, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	430a      	orrs	r2, r1
 8002c28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2e:	2280      	movs	r2, #128	; 0x80
 8002c30:	4013      	ands	r3, r2
 8002c32:	d00b      	beq.n	8002c4c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	4a0e      	ldr	r2, [pc, #56]	; (8002c74 <UART_AdvFeatureConfig+0x164>)
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	0019      	movs	r1, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	605a      	str	r2, [r3, #4]
  }
}
 8002c4c:	46c0      	nop			; (mov r8, r8)
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	b002      	add	sp, #8
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	fffdffff 	.word	0xfffdffff
 8002c58:	fffeffff 	.word	0xfffeffff
 8002c5c:	fffbffff 	.word	0xfffbffff
 8002c60:	ffff7fff 	.word	0xffff7fff
 8002c64:	ffffefff 	.word	0xffffefff
 8002c68:	ffffdfff 	.word	0xffffdfff
 8002c6c:	ffefffff 	.word	0xffefffff
 8002c70:	ff9fffff 	.word	0xff9fffff
 8002c74:	fff7ffff 	.word	0xfff7ffff

08002c78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b092      	sub	sp, #72	; 0x48
 8002c7c:	af02      	add	r7, sp, #8
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2284      	movs	r2, #132	; 0x84
 8002c84:	2100      	movs	r1, #0
 8002c86:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002c88:	f7fd ff6e 	bl	8000b68 <HAL_GetTick>
 8002c8c:	0003      	movs	r3, r0
 8002c8e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2208      	movs	r2, #8
 8002c98:	4013      	ands	r3, r2
 8002c9a:	2b08      	cmp	r3, #8
 8002c9c:	d12c      	bne.n	8002cf8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ca0:	2280      	movs	r2, #128	; 0x80
 8002ca2:	0391      	lsls	r1, r2, #14
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	4a46      	ldr	r2, [pc, #280]	; (8002dc0 <UART_CheckIdleState+0x148>)
 8002ca8:	9200      	str	r2, [sp, #0]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f000 f88c 	bl	8002dc8 <UART_WaitOnFlagUntilTimeout>
 8002cb0:	1e03      	subs	r3, r0, #0
 8002cb2:	d021      	beq.n	8002cf8 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cb4:	f3ef 8310 	mrs	r3, PRIMASK
 8002cb8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002cbc:	63bb      	str	r3, [r7, #56]	; 0x38
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc4:	f383 8810 	msr	PRIMASK, r3
}
 8002cc8:	46c0      	nop			; (mov r8, r8)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2180      	movs	r1, #128	; 0x80
 8002cd6:	438a      	bics	r2, r1
 8002cd8:	601a      	str	r2, [r3, #0]
 8002cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce0:	f383 8810 	msr	PRIMASK, r3
}
 8002ce4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2220      	movs	r2, #32
 8002cea:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2278      	movs	r2, #120	; 0x78
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e05f      	b.n	8002db8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2204      	movs	r2, #4
 8002d00:	4013      	ands	r3, r2
 8002d02:	2b04      	cmp	r3, #4
 8002d04:	d146      	bne.n	8002d94 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d08:	2280      	movs	r2, #128	; 0x80
 8002d0a:	03d1      	lsls	r1, r2, #15
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	4a2c      	ldr	r2, [pc, #176]	; (8002dc0 <UART_CheckIdleState+0x148>)
 8002d10:	9200      	str	r2, [sp, #0]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f000 f858 	bl	8002dc8 <UART_WaitOnFlagUntilTimeout>
 8002d18:	1e03      	subs	r3, r0, #0
 8002d1a:	d03b      	beq.n	8002d94 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d1c:	f3ef 8310 	mrs	r3, PRIMASK
 8002d20:	60fb      	str	r3, [r7, #12]
  return(result);
 8002d22:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d24:	637b      	str	r3, [r7, #52]	; 0x34
 8002d26:	2301      	movs	r3, #1
 8002d28:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	f383 8810 	msr	PRIMASK, r3
}
 8002d30:	46c0      	nop			; (mov r8, r8)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4921      	ldr	r1, [pc, #132]	; (8002dc4 <UART_CheckIdleState+0x14c>)
 8002d3e:	400a      	ands	r2, r1
 8002d40:	601a      	str	r2, [r3, #0]
 8002d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d44:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	f383 8810 	msr	PRIMASK, r3
}
 8002d4c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d4e:	f3ef 8310 	mrs	r3, PRIMASK
 8002d52:	61bb      	str	r3, [r7, #24]
  return(result);
 8002d54:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d56:	633b      	str	r3, [r7, #48]	; 0x30
 8002d58:	2301      	movs	r3, #1
 8002d5a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	f383 8810 	msr	PRIMASK, r3
}
 8002d62:	46c0      	nop			; (mov r8, r8)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	689a      	ldr	r2, [r3, #8]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2101      	movs	r1, #1
 8002d70:	438a      	bics	r2, r1
 8002d72:	609a      	str	r2, [r3, #8]
 8002d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d76:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d78:	6a3b      	ldr	r3, [r7, #32]
 8002d7a:	f383 8810 	msr	PRIMASK, r3
}
 8002d7e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2280      	movs	r2, #128	; 0x80
 8002d84:	2120      	movs	r1, #32
 8002d86:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2278      	movs	r2, #120	; 0x78
 8002d8c:	2100      	movs	r1, #0
 8002d8e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e011      	b.n	8002db8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2220      	movs	r2, #32
 8002d98:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2280      	movs	r2, #128	; 0x80
 8002d9e:	2120      	movs	r1, #32
 8002da0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2278      	movs	r2, #120	; 0x78
 8002db2:	2100      	movs	r1, #0
 8002db4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	0018      	movs	r0, r3
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	b010      	add	sp, #64	; 0x40
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	01ffffff 	.word	0x01ffffff
 8002dc4:	fffffedf 	.word	0xfffffedf

08002dc8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	603b      	str	r3, [r7, #0]
 8002dd4:	1dfb      	adds	r3, r7, #7
 8002dd6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dd8:	e04b      	b.n	8002e72 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	3301      	adds	r3, #1
 8002dde:	d048      	beq.n	8002e72 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002de0:	f7fd fec2 	bl	8000b68 <HAL_GetTick>
 8002de4:	0002      	movs	r2, r0
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d302      	bcc.n	8002df6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e04b      	b.n	8002e92 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2204      	movs	r2, #4
 8002e02:	4013      	ands	r3, r2
 8002e04:	d035      	beq.n	8002e72 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	69db      	ldr	r3, [r3, #28]
 8002e0c:	2208      	movs	r2, #8
 8002e0e:	4013      	ands	r3, r2
 8002e10:	2b08      	cmp	r3, #8
 8002e12:	d111      	bne.n	8002e38 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2208      	movs	r2, #8
 8002e1a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	0018      	movs	r0, r3
 8002e20:	f000 f83c 	bl	8002e9c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2284      	movs	r2, #132	; 0x84
 8002e28:	2108      	movs	r1, #8
 8002e2a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2278      	movs	r2, #120	; 0x78
 8002e30:	2100      	movs	r1, #0
 8002e32:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e02c      	b.n	8002e92 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	69da      	ldr	r2, [r3, #28]
 8002e3e:	2380      	movs	r3, #128	; 0x80
 8002e40:	011b      	lsls	r3, r3, #4
 8002e42:	401a      	ands	r2, r3
 8002e44:	2380      	movs	r3, #128	; 0x80
 8002e46:	011b      	lsls	r3, r3, #4
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d112      	bne.n	8002e72 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2280      	movs	r2, #128	; 0x80
 8002e52:	0112      	lsls	r2, r2, #4
 8002e54:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	0018      	movs	r0, r3
 8002e5a:	f000 f81f 	bl	8002e9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2284      	movs	r2, #132	; 0x84
 8002e62:	2120      	movs	r1, #32
 8002e64:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2278      	movs	r2, #120	; 0x78
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e00f      	b.n	8002e92 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	69db      	ldr	r3, [r3, #28]
 8002e78:	68ba      	ldr	r2, [r7, #8]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	68ba      	ldr	r2, [r7, #8]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	425a      	negs	r2, r3
 8002e82:	4153      	adcs	r3, r2
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	001a      	movs	r2, r3
 8002e88:	1dfb      	adds	r3, r7, #7
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d0a4      	beq.n	8002dda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	0018      	movs	r0, r3
 8002e94:	46bd      	mov	sp, r7
 8002e96:	b004      	add	sp, #16
 8002e98:	bd80      	pop	{r7, pc}
	...

08002e9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b08e      	sub	sp, #56	; 0x38
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ea4:	f3ef 8310 	mrs	r3, PRIMASK
 8002ea8:	617b      	str	r3, [r7, #20]
  return(result);
 8002eaa:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002eac:	637b      	str	r3, [r7, #52]	; 0x34
 8002eae:	2301      	movs	r3, #1
 8002eb0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	f383 8810 	msr	PRIMASK, r3
}
 8002eb8:	46c0      	nop			; (mov r8, r8)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4926      	ldr	r1, [pc, #152]	; (8002f60 <UART_EndRxTransfer+0xc4>)
 8002ec6:	400a      	ands	r2, r1
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ecc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	f383 8810 	msr	PRIMASK, r3
}
 8002ed4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ed6:	f3ef 8310 	mrs	r3, PRIMASK
 8002eda:	623b      	str	r3, [r7, #32]
  return(result);
 8002edc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ede:	633b      	str	r3, [r7, #48]	; 0x30
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee6:	f383 8810 	msr	PRIMASK, r3
}
 8002eea:	46c0      	nop			; (mov r8, r8)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	689a      	ldr	r2, [r3, #8]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	438a      	bics	r2, r1
 8002efa:	609a      	str	r2, [r3, #8]
 8002efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002efe:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f02:	f383 8810 	msr	PRIMASK, r3
}
 8002f06:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d118      	bne.n	8002f42 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f10:	f3ef 8310 	mrs	r3, PRIMASK
 8002f14:	60bb      	str	r3, [r7, #8]
  return(result);
 8002f16:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f383 8810 	msr	PRIMASK, r3
}
 8002f24:	46c0      	nop			; (mov r8, r8)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2110      	movs	r1, #16
 8002f32:	438a      	bics	r2, r1
 8002f34:	601a      	str	r2, [r3, #0]
 8002f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f38:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	f383 8810 	msr	PRIMASK, r3
}
 8002f40:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2280      	movs	r2, #128	; 0x80
 8002f46:	2120      	movs	r1, #32
 8002f48:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002f56:	46c0      	nop			; (mov r8, r8)
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	b00e      	add	sp, #56	; 0x38
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	46c0      	nop			; (mov r8, r8)
 8002f60:	fffffedf 	.word	0xfffffedf

08002f64 <siprintf>:
 8002f64:	b40e      	push	{r1, r2, r3}
 8002f66:	b500      	push	{lr}
 8002f68:	490b      	ldr	r1, [pc, #44]	; (8002f98 <siprintf+0x34>)
 8002f6a:	b09c      	sub	sp, #112	; 0x70
 8002f6c:	ab1d      	add	r3, sp, #116	; 0x74
 8002f6e:	9002      	str	r0, [sp, #8]
 8002f70:	9006      	str	r0, [sp, #24]
 8002f72:	9107      	str	r1, [sp, #28]
 8002f74:	9104      	str	r1, [sp, #16]
 8002f76:	4809      	ldr	r0, [pc, #36]	; (8002f9c <siprintf+0x38>)
 8002f78:	4909      	ldr	r1, [pc, #36]	; (8002fa0 <siprintf+0x3c>)
 8002f7a:	cb04      	ldmia	r3!, {r2}
 8002f7c:	9105      	str	r1, [sp, #20]
 8002f7e:	6800      	ldr	r0, [r0, #0]
 8002f80:	a902      	add	r1, sp, #8
 8002f82:	9301      	str	r3, [sp, #4]
 8002f84:	f000 f9a2 	bl	80032cc <_svfiprintf_r>
 8002f88:	2200      	movs	r2, #0
 8002f8a:	9b02      	ldr	r3, [sp, #8]
 8002f8c:	701a      	strb	r2, [r3, #0]
 8002f8e:	b01c      	add	sp, #112	; 0x70
 8002f90:	bc08      	pop	{r3}
 8002f92:	b003      	add	sp, #12
 8002f94:	4718      	bx	r3
 8002f96:	46c0      	nop			; (mov r8, r8)
 8002f98:	7fffffff 	.word	0x7fffffff
 8002f9c:	20000058 	.word	0x20000058
 8002fa0:	ffff0208 	.word	0xffff0208

08002fa4 <memset>:
 8002fa4:	0003      	movs	r3, r0
 8002fa6:	1882      	adds	r2, r0, r2
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d100      	bne.n	8002fae <memset+0xa>
 8002fac:	4770      	bx	lr
 8002fae:	7019      	strb	r1, [r3, #0]
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	e7f9      	b.n	8002fa8 <memset+0x4>

08002fb4 <__errno>:
 8002fb4:	4b01      	ldr	r3, [pc, #4]	; (8002fbc <__errno+0x8>)
 8002fb6:	6818      	ldr	r0, [r3, #0]
 8002fb8:	4770      	bx	lr
 8002fba:	46c0      	nop			; (mov r8, r8)
 8002fbc:	20000058 	.word	0x20000058

08002fc0 <__libc_init_array>:
 8002fc0:	b570      	push	{r4, r5, r6, lr}
 8002fc2:	2600      	movs	r6, #0
 8002fc4:	4c0c      	ldr	r4, [pc, #48]	; (8002ff8 <__libc_init_array+0x38>)
 8002fc6:	4d0d      	ldr	r5, [pc, #52]	; (8002ffc <__libc_init_array+0x3c>)
 8002fc8:	1b64      	subs	r4, r4, r5
 8002fca:	10a4      	asrs	r4, r4, #2
 8002fcc:	42a6      	cmp	r6, r4
 8002fce:	d109      	bne.n	8002fe4 <__libc_init_array+0x24>
 8002fd0:	2600      	movs	r6, #0
 8002fd2:	f000 fc6d 	bl	80038b0 <_init>
 8002fd6:	4c0a      	ldr	r4, [pc, #40]	; (8003000 <__libc_init_array+0x40>)
 8002fd8:	4d0a      	ldr	r5, [pc, #40]	; (8003004 <__libc_init_array+0x44>)
 8002fda:	1b64      	subs	r4, r4, r5
 8002fdc:	10a4      	asrs	r4, r4, #2
 8002fde:	42a6      	cmp	r6, r4
 8002fe0:	d105      	bne.n	8002fee <__libc_init_array+0x2e>
 8002fe2:	bd70      	pop	{r4, r5, r6, pc}
 8002fe4:	00b3      	lsls	r3, r6, #2
 8002fe6:	58eb      	ldr	r3, [r5, r3]
 8002fe8:	4798      	blx	r3
 8002fea:	3601      	adds	r6, #1
 8002fec:	e7ee      	b.n	8002fcc <__libc_init_array+0xc>
 8002fee:	00b3      	lsls	r3, r6, #2
 8002ff0:	58eb      	ldr	r3, [r5, r3]
 8002ff2:	4798      	blx	r3
 8002ff4:	3601      	adds	r6, #1
 8002ff6:	e7f2      	b.n	8002fde <__libc_init_array+0x1e>
 8002ff8:	080039d8 	.word	0x080039d8
 8002ffc:	080039d8 	.word	0x080039d8
 8003000:	080039dc 	.word	0x080039dc
 8003004:	080039d8 	.word	0x080039d8

08003008 <__retarget_lock_acquire_recursive>:
 8003008:	4770      	bx	lr

0800300a <__retarget_lock_release_recursive>:
 800300a:	4770      	bx	lr

0800300c <_free_r>:
 800300c:	b570      	push	{r4, r5, r6, lr}
 800300e:	0005      	movs	r5, r0
 8003010:	2900      	cmp	r1, #0
 8003012:	d010      	beq.n	8003036 <_free_r+0x2a>
 8003014:	1f0c      	subs	r4, r1, #4
 8003016:	6823      	ldr	r3, [r4, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	da00      	bge.n	800301e <_free_r+0x12>
 800301c:	18e4      	adds	r4, r4, r3
 800301e:	0028      	movs	r0, r5
 8003020:	f000 f8e2 	bl	80031e8 <__malloc_lock>
 8003024:	4a1d      	ldr	r2, [pc, #116]	; (800309c <_free_r+0x90>)
 8003026:	6813      	ldr	r3, [r2, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d105      	bne.n	8003038 <_free_r+0x2c>
 800302c:	6063      	str	r3, [r4, #4]
 800302e:	6014      	str	r4, [r2, #0]
 8003030:	0028      	movs	r0, r5
 8003032:	f000 f8e1 	bl	80031f8 <__malloc_unlock>
 8003036:	bd70      	pop	{r4, r5, r6, pc}
 8003038:	42a3      	cmp	r3, r4
 800303a:	d908      	bls.n	800304e <_free_r+0x42>
 800303c:	6820      	ldr	r0, [r4, #0]
 800303e:	1821      	adds	r1, r4, r0
 8003040:	428b      	cmp	r3, r1
 8003042:	d1f3      	bne.n	800302c <_free_r+0x20>
 8003044:	6819      	ldr	r1, [r3, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	1809      	adds	r1, r1, r0
 800304a:	6021      	str	r1, [r4, #0]
 800304c:	e7ee      	b.n	800302c <_free_r+0x20>
 800304e:	001a      	movs	r2, r3
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <_free_r+0x4e>
 8003056:	42a3      	cmp	r3, r4
 8003058:	d9f9      	bls.n	800304e <_free_r+0x42>
 800305a:	6811      	ldr	r1, [r2, #0]
 800305c:	1850      	adds	r0, r2, r1
 800305e:	42a0      	cmp	r0, r4
 8003060:	d10b      	bne.n	800307a <_free_r+0x6e>
 8003062:	6820      	ldr	r0, [r4, #0]
 8003064:	1809      	adds	r1, r1, r0
 8003066:	1850      	adds	r0, r2, r1
 8003068:	6011      	str	r1, [r2, #0]
 800306a:	4283      	cmp	r3, r0
 800306c:	d1e0      	bne.n	8003030 <_free_r+0x24>
 800306e:	6818      	ldr	r0, [r3, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	1841      	adds	r1, r0, r1
 8003074:	6011      	str	r1, [r2, #0]
 8003076:	6053      	str	r3, [r2, #4]
 8003078:	e7da      	b.n	8003030 <_free_r+0x24>
 800307a:	42a0      	cmp	r0, r4
 800307c:	d902      	bls.n	8003084 <_free_r+0x78>
 800307e:	230c      	movs	r3, #12
 8003080:	602b      	str	r3, [r5, #0]
 8003082:	e7d5      	b.n	8003030 <_free_r+0x24>
 8003084:	6820      	ldr	r0, [r4, #0]
 8003086:	1821      	adds	r1, r4, r0
 8003088:	428b      	cmp	r3, r1
 800308a:	d103      	bne.n	8003094 <_free_r+0x88>
 800308c:	6819      	ldr	r1, [r3, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	1809      	adds	r1, r1, r0
 8003092:	6021      	str	r1, [r4, #0]
 8003094:	6063      	str	r3, [r4, #4]
 8003096:	6054      	str	r4, [r2, #4]
 8003098:	e7ca      	b.n	8003030 <_free_r+0x24>
 800309a:	46c0      	nop			; (mov r8, r8)
 800309c:	2000029c 	.word	0x2000029c

080030a0 <sbrk_aligned>:
 80030a0:	b570      	push	{r4, r5, r6, lr}
 80030a2:	4e0f      	ldr	r6, [pc, #60]	; (80030e0 <sbrk_aligned+0x40>)
 80030a4:	000d      	movs	r5, r1
 80030a6:	6831      	ldr	r1, [r6, #0]
 80030a8:	0004      	movs	r4, r0
 80030aa:	2900      	cmp	r1, #0
 80030ac:	d102      	bne.n	80030b4 <sbrk_aligned+0x14>
 80030ae:	f000 fba1 	bl	80037f4 <_sbrk_r>
 80030b2:	6030      	str	r0, [r6, #0]
 80030b4:	0029      	movs	r1, r5
 80030b6:	0020      	movs	r0, r4
 80030b8:	f000 fb9c 	bl	80037f4 <_sbrk_r>
 80030bc:	1c43      	adds	r3, r0, #1
 80030be:	d00a      	beq.n	80030d6 <sbrk_aligned+0x36>
 80030c0:	2303      	movs	r3, #3
 80030c2:	1cc5      	adds	r5, r0, #3
 80030c4:	439d      	bics	r5, r3
 80030c6:	42a8      	cmp	r0, r5
 80030c8:	d007      	beq.n	80030da <sbrk_aligned+0x3a>
 80030ca:	1a29      	subs	r1, r5, r0
 80030cc:	0020      	movs	r0, r4
 80030ce:	f000 fb91 	bl	80037f4 <_sbrk_r>
 80030d2:	3001      	adds	r0, #1
 80030d4:	d101      	bne.n	80030da <sbrk_aligned+0x3a>
 80030d6:	2501      	movs	r5, #1
 80030d8:	426d      	negs	r5, r5
 80030da:	0028      	movs	r0, r5
 80030dc:	bd70      	pop	{r4, r5, r6, pc}
 80030de:	46c0      	nop			; (mov r8, r8)
 80030e0:	200002a0 	.word	0x200002a0

080030e4 <_malloc_r>:
 80030e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80030e6:	2203      	movs	r2, #3
 80030e8:	1ccb      	adds	r3, r1, #3
 80030ea:	4393      	bics	r3, r2
 80030ec:	3308      	adds	r3, #8
 80030ee:	0006      	movs	r6, r0
 80030f0:	001f      	movs	r7, r3
 80030f2:	2b0c      	cmp	r3, #12
 80030f4:	d238      	bcs.n	8003168 <_malloc_r+0x84>
 80030f6:	270c      	movs	r7, #12
 80030f8:	42b9      	cmp	r1, r7
 80030fa:	d837      	bhi.n	800316c <_malloc_r+0x88>
 80030fc:	0030      	movs	r0, r6
 80030fe:	f000 f873 	bl	80031e8 <__malloc_lock>
 8003102:	4b38      	ldr	r3, [pc, #224]	; (80031e4 <_malloc_r+0x100>)
 8003104:	9300      	str	r3, [sp, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	001c      	movs	r4, r3
 800310a:	2c00      	cmp	r4, #0
 800310c:	d133      	bne.n	8003176 <_malloc_r+0x92>
 800310e:	0039      	movs	r1, r7
 8003110:	0030      	movs	r0, r6
 8003112:	f7ff ffc5 	bl	80030a0 <sbrk_aligned>
 8003116:	0004      	movs	r4, r0
 8003118:	1c43      	adds	r3, r0, #1
 800311a:	d15e      	bne.n	80031da <_malloc_r+0xf6>
 800311c:	9b00      	ldr	r3, [sp, #0]
 800311e:	681c      	ldr	r4, [r3, #0]
 8003120:	0025      	movs	r5, r4
 8003122:	2d00      	cmp	r5, #0
 8003124:	d14e      	bne.n	80031c4 <_malloc_r+0xe0>
 8003126:	2c00      	cmp	r4, #0
 8003128:	d051      	beq.n	80031ce <_malloc_r+0xea>
 800312a:	6823      	ldr	r3, [r4, #0]
 800312c:	0029      	movs	r1, r5
 800312e:	18e3      	adds	r3, r4, r3
 8003130:	0030      	movs	r0, r6
 8003132:	9301      	str	r3, [sp, #4]
 8003134:	f000 fb5e 	bl	80037f4 <_sbrk_r>
 8003138:	9b01      	ldr	r3, [sp, #4]
 800313a:	4283      	cmp	r3, r0
 800313c:	d147      	bne.n	80031ce <_malloc_r+0xea>
 800313e:	6823      	ldr	r3, [r4, #0]
 8003140:	0030      	movs	r0, r6
 8003142:	1aff      	subs	r7, r7, r3
 8003144:	0039      	movs	r1, r7
 8003146:	f7ff ffab 	bl	80030a0 <sbrk_aligned>
 800314a:	3001      	adds	r0, #1
 800314c:	d03f      	beq.n	80031ce <_malloc_r+0xea>
 800314e:	6823      	ldr	r3, [r4, #0]
 8003150:	19db      	adds	r3, r3, r7
 8003152:	6023      	str	r3, [r4, #0]
 8003154:	9b00      	ldr	r3, [sp, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d040      	beq.n	80031de <_malloc_r+0xfa>
 800315c:	685a      	ldr	r2, [r3, #4]
 800315e:	42a2      	cmp	r2, r4
 8003160:	d133      	bne.n	80031ca <_malloc_r+0xe6>
 8003162:	2200      	movs	r2, #0
 8003164:	605a      	str	r2, [r3, #4]
 8003166:	e014      	b.n	8003192 <_malloc_r+0xae>
 8003168:	2b00      	cmp	r3, #0
 800316a:	dac5      	bge.n	80030f8 <_malloc_r+0x14>
 800316c:	230c      	movs	r3, #12
 800316e:	2500      	movs	r5, #0
 8003170:	6033      	str	r3, [r6, #0]
 8003172:	0028      	movs	r0, r5
 8003174:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003176:	6821      	ldr	r1, [r4, #0]
 8003178:	1bc9      	subs	r1, r1, r7
 800317a:	d420      	bmi.n	80031be <_malloc_r+0xda>
 800317c:	290b      	cmp	r1, #11
 800317e:	d918      	bls.n	80031b2 <_malloc_r+0xce>
 8003180:	19e2      	adds	r2, r4, r7
 8003182:	6027      	str	r7, [r4, #0]
 8003184:	42a3      	cmp	r3, r4
 8003186:	d112      	bne.n	80031ae <_malloc_r+0xca>
 8003188:	9b00      	ldr	r3, [sp, #0]
 800318a:	601a      	str	r2, [r3, #0]
 800318c:	6863      	ldr	r3, [r4, #4]
 800318e:	6011      	str	r1, [r2, #0]
 8003190:	6053      	str	r3, [r2, #4]
 8003192:	0030      	movs	r0, r6
 8003194:	0025      	movs	r5, r4
 8003196:	f000 f82f 	bl	80031f8 <__malloc_unlock>
 800319a:	2207      	movs	r2, #7
 800319c:	350b      	adds	r5, #11
 800319e:	1d23      	adds	r3, r4, #4
 80031a0:	4395      	bics	r5, r2
 80031a2:	1aea      	subs	r2, r5, r3
 80031a4:	429d      	cmp	r5, r3
 80031a6:	d0e4      	beq.n	8003172 <_malloc_r+0x8e>
 80031a8:	1b5b      	subs	r3, r3, r5
 80031aa:	50a3      	str	r3, [r4, r2]
 80031ac:	e7e1      	b.n	8003172 <_malloc_r+0x8e>
 80031ae:	605a      	str	r2, [r3, #4]
 80031b0:	e7ec      	b.n	800318c <_malloc_r+0xa8>
 80031b2:	6862      	ldr	r2, [r4, #4]
 80031b4:	42a3      	cmp	r3, r4
 80031b6:	d1d5      	bne.n	8003164 <_malloc_r+0x80>
 80031b8:	9b00      	ldr	r3, [sp, #0]
 80031ba:	601a      	str	r2, [r3, #0]
 80031bc:	e7e9      	b.n	8003192 <_malloc_r+0xae>
 80031be:	0023      	movs	r3, r4
 80031c0:	6864      	ldr	r4, [r4, #4]
 80031c2:	e7a2      	b.n	800310a <_malloc_r+0x26>
 80031c4:	002c      	movs	r4, r5
 80031c6:	686d      	ldr	r5, [r5, #4]
 80031c8:	e7ab      	b.n	8003122 <_malloc_r+0x3e>
 80031ca:	0013      	movs	r3, r2
 80031cc:	e7c4      	b.n	8003158 <_malloc_r+0x74>
 80031ce:	230c      	movs	r3, #12
 80031d0:	0030      	movs	r0, r6
 80031d2:	6033      	str	r3, [r6, #0]
 80031d4:	f000 f810 	bl	80031f8 <__malloc_unlock>
 80031d8:	e7cb      	b.n	8003172 <_malloc_r+0x8e>
 80031da:	6027      	str	r7, [r4, #0]
 80031dc:	e7d9      	b.n	8003192 <_malloc_r+0xae>
 80031de:	605b      	str	r3, [r3, #4]
 80031e0:	deff      	udf	#255	; 0xff
 80031e2:	46c0      	nop			; (mov r8, r8)
 80031e4:	2000029c 	.word	0x2000029c

080031e8 <__malloc_lock>:
 80031e8:	b510      	push	{r4, lr}
 80031ea:	4802      	ldr	r0, [pc, #8]	; (80031f4 <__malloc_lock+0xc>)
 80031ec:	f7ff ff0c 	bl	8003008 <__retarget_lock_acquire_recursive>
 80031f0:	bd10      	pop	{r4, pc}
 80031f2:	46c0      	nop			; (mov r8, r8)
 80031f4:	20000298 	.word	0x20000298

080031f8 <__malloc_unlock>:
 80031f8:	b510      	push	{r4, lr}
 80031fa:	4802      	ldr	r0, [pc, #8]	; (8003204 <__malloc_unlock+0xc>)
 80031fc:	f7ff ff05 	bl	800300a <__retarget_lock_release_recursive>
 8003200:	bd10      	pop	{r4, pc}
 8003202:	46c0      	nop			; (mov r8, r8)
 8003204:	20000298 	.word	0x20000298

08003208 <__ssputs_r>:
 8003208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800320a:	b085      	sub	sp, #20
 800320c:	9301      	str	r3, [sp, #4]
 800320e:	9203      	str	r2, [sp, #12]
 8003210:	688e      	ldr	r6, [r1, #8]
 8003212:	9a01      	ldr	r2, [sp, #4]
 8003214:	0007      	movs	r7, r0
 8003216:	000c      	movs	r4, r1
 8003218:	680b      	ldr	r3, [r1, #0]
 800321a:	4296      	cmp	r6, r2
 800321c:	d831      	bhi.n	8003282 <__ssputs_r+0x7a>
 800321e:	898a      	ldrh	r2, [r1, #12]
 8003220:	2190      	movs	r1, #144	; 0x90
 8003222:	00c9      	lsls	r1, r1, #3
 8003224:	420a      	tst	r2, r1
 8003226:	d029      	beq.n	800327c <__ssputs_r+0x74>
 8003228:	2003      	movs	r0, #3
 800322a:	6921      	ldr	r1, [r4, #16]
 800322c:	1a5b      	subs	r3, r3, r1
 800322e:	9302      	str	r3, [sp, #8]
 8003230:	6963      	ldr	r3, [r4, #20]
 8003232:	4343      	muls	r3, r0
 8003234:	0fdd      	lsrs	r5, r3, #31
 8003236:	18ed      	adds	r5, r5, r3
 8003238:	9b01      	ldr	r3, [sp, #4]
 800323a:	9802      	ldr	r0, [sp, #8]
 800323c:	3301      	adds	r3, #1
 800323e:	181b      	adds	r3, r3, r0
 8003240:	106d      	asrs	r5, r5, #1
 8003242:	42ab      	cmp	r3, r5
 8003244:	d900      	bls.n	8003248 <__ssputs_r+0x40>
 8003246:	001d      	movs	r5, r3
 8003248:	0552      	lsls	r2, r2, #21
 800324a:	d529      	bpl.n	80032a0 <__ssputs_r+0x98>
 800324c:	0029      	movs	r1, r5
 800324e:	0038      	movs	r0, r7
 8003250:	f7ff ff48 	bl	80030e4 <_malloc_r>
 8003254:	1e06      	subs	r6, r0, #0
 8003256:	d02d      	beq.n	80032b4 <__ssputs_r+0xac>
 8003258:	9a02      	ldr	r2, [sp, #8]
 800325a:	6921      	ldr	r1, [r4, #16]
 800325c:	f000 fae7 	bl	800382e <memcpy>
 8003260:	89a2      	ldrh	r2, [r4, #12]
 8003262:	4b19      	ldr	r3, [pc, #100]	; (80032c8 <__ssputs_r+0xc0>)
 8003264:	401a      	ands	r2, r3
 8003266:	2380      	movs	r3, #128	; 0x80
 8003268:	4313      	orrs	r3, r2
 800326a:	81a3      	strh	r3, [r4, #12]
 800326c:	9b02      	ldr	r3, [sp, #8]
 800326e:	6126      	str	r6, [r4, #16]
 8003270:	18f6      	adds	r6, r6, r3
 8003272:	6026      	str	r6, [r4, #0]
 8003274:	6165      	str	r5, [r4, #20]
 8003276:	9e01      	ldr	r6, [sp, #4]
 8003278:	1aed      	subs	r5, r5, r3
 800327a:	60a5      	str	r5, [r4, #8]
 800327c:	9b01      	ldr	r3, [sp, #4]
 800327e:	429e      	cmp	r6, r3
 8003280:	d900      	bls.n	8003284 <__ssputs_r+0x7c>
 8003282:	9e01      	ldr	r6, [sp, #4]
 8003284:	0032      	movs	r2, r6
 8003286:	9903      	ldr	r1, [sp, #12]
 8003288:	6820      	ldr	r0, [r4, #0]
 800328a:	f000 fa9f 	bl	80037cc <memmove>
 800328e:	2000      	movs	r0, #0
 8003290:	68a3      	ldr	r3, [r4, #8]
 8003292:	1b9b      	subs	r3, r3, r6
 8003294:	60a3      	str	r3, [r4, #8]
 8003296:	6823      	ldr	r3, [r4, #0]
 8003298:	199b      	adds	r3, r3, r6
 800329a:	6023      	str	r3, [r4, #0]
 800329c:	b005      	add	sp, #20
 800329e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032a0:	002a      	movs	r2, r5
 80032a2:	0038      	movs	r0, r7
 80032a4:	f000 facc 	bl	8003840 <_realloc_r>
 80032a8:	1e06      	subs	r6, r0, #0
 80032aa:	d1df      	bne.n	800326c <__ssputs_r+0x64>
 80032ac:	0038      	movs	r0, r7
 80032ae:	6921      	ldr	r1, [r4, #16]
 80032b0:	f7ff feac 	bl	800300c <_free_r>
 80032b4:	230c      	movs	r3, #12
 80032b6:	2001      	movs	r0, #1
 80032b8:	603b      	str	r3, [r7, #0]
 80032ba:	89a2      	ldrh	r2, [r4, #12]
 80032bc:	3334      	adds	r3, #52	; 0x34
 80032be:	4313      	orrs	r3, r2
 80032c0:	81a3      	strh	r3, [r4, #12]
 80032c2:	4240      	negs	r0, r0
 80032c4:	e7ea      	b.n	800329c <__ssputs_r+0x94>
 80032c6:	46c0      	nop			; (mov r8, r8)
 80032c8:	fffffb7f 	.word	0xfffffb7f

080032cc <_svfiprintf_r>:
 80032cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032ce:	b0a1      	sub	sp, #132	; 0x84
 80032d0:	9003      	str	r0, [sp, #12]
 80032d2:	001d      	movs	r5, r3
 80032d4:	898b      	ldrh	r3, [r1, #12]
 80032d6:	000f      	movs	r7, r1
 80032d8:	0016      	movs	r6, r2
 80032da:	061b      	lsls	r3, r3, #24
 80032dc:	d511      	bpl.n	8003302 <_svfiprintf_r+0x36>
 80032de:	690b      	ldr	r3, [r1, #16]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d10e      	bne.n	8003302 <_svfiprintf_r+0x36>
 80032e4:	2140      	movs	r1, #64	; 0x40
 80032e6:	f7ff fefd 	bl	80030e4 <_malloc_r>
 80032ea:	6038      	str	r0, [r7, #0]
 80032ec:	6138      	str	r0, [r7, #16]
 80032ee:	2800      	cmp	r0, #0
 80032f0:	d105      	bne.n	80032fe <_svfiprintf_r+0x32>
 80032f2:	230c      	movs	r3, #12
 80032f4:	9a03      	ldr	r2, [sp, #12]
 80032f6:	3801      	subs	r0, #1
 80032f8:	6013      	str	r3, [r2, #0]
 80032fa:	b021      	add	sp, #132	; 0x84
 80032fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032fe:	2340      	movs	r3, #64	; 0x40
 8003300:	617b      	str	r3, [r7, #20]
 8003302:	2300      	movs	r3, #0
 8003304:	ac08      	add	r4, sp, #32
 8003306:	6163      	str	r3, [r4, #20]
 8003308:	3320      	adds	r3, #32
 800330a:	7663      	strb	r3, [r4, #25]
 800330c:	3310      	adds	r3, #16
 800330e:	76a3      	strb	r3, [r4, #26]
 8003310:	9507      	str	r5, [sp, #28]
 8003312:	0035      	movs	r5, r6
 8003314:	782b      	ldrb	r3, [r5, #0]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <_svfiprintf_r+0x52>
 800331a:	2b25      	cmp	r3, #37	; 0x25
 800331c:	d148      	bne.n	80033b0 <_svfiprintf_r+0xe4>
 800331e:	1bab      	subs	r3, r5, r6
 8003320:	9305      	str	r3, [sp, #20]
 8003322:	42b5      	cmp	r5, r6
 8003324:	d00b      	beq.n	800333e <_svfiprintf_r+0x72>
 8003326:	0032      	movs	r2, r6
 8003328:	0039      	movs	r1, r7
 800332a:	9803      	ldr	r0, [sp, #12]
 800332c:	f7ff ff6c 	bl	8003208 <__ssputs_r>
 8003330:	3001      	adds	r0, #1
 8003332:	d100      	bne.n	8003336 <_svfiprintf_r+0x6a>
 8003334:	e0af      	b.n	8003496 <_svfiprintf_r+0x1ca>
 8003336:	6963      	ldr	r3, [r4, #20]
 8003338:	9a05      	ldr	r2, [sp, #20]
 800333a:	189b      	adds	r3, r3, r2
 800333c:	6163      	str	r3, [r4, #20]
 800333e:	782b      	ldrb	r3, [r5, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d100      	bne.n	8003346 <_svfiprintf_r+0x7a>
 8003344:	e0a7      	b.n	8003496 <_svfiprintf_r+0x1ca>
 8003346:	2201      	movs	r2, #1
 8003348:	2300      	movs	r3, #0
 800334a:	4252      	negs	r2, r2
 800334c:	6062      	str	r2, [r4, #4]
 800334e:	a904      	add	r1, sp, #16
 8003350:	3254      	adds	r2, #84	; 0x54
 8003352:	1852      	adds	r2, r2, r1
 8003354:	1c6e      	adds	r6, r5, #1
 8003356:	6023      	str	r3, [r4, #0]
 8003358:	60e3      	str	r3, [r4, #12]
 800335a:	60a3      	str	r3, [r4, #8]
 800335c:	7013      	strb	r3, [r2, #0]
 800335e:	65a3      	str	r3, [r4, #88]	; 0x58
 8003360:	4b55      	ldr	r3, [pc, #340]	; (80034b8 <_svfiprintf_r+0x1ec>)
 8003362:	2205      	movs	r2, #5
 8003364:	0018      	movs	r0, r3
 8003366:	7831      	ldrb	r1, [r6, #0]
 8003368:	9305      	str	r3, [sp, #20]
 800336a:	f000 fa55 	bl	8003818 <memchr>
 800336e:	1c75      	adds	r5, r6, #1
 8003370:	2800      	cmp	r0, #0
 8003372:	d11f      	bne.n	80033b4 <_svfiprintf_r+0xe8>
 8003374:	6822      	ldr	r2, [r4, #0]
 8003376:	06d3      	lsls	r3, r2, #27
 8003378:	d504      	bpl.n	8003384 <_svfiprintf_r+0xb8>
 800337a:	2353      	movs	r3, #83	; 0x53
 800337c:	a904      	add	r1, sp, #16
 800337e:	185b      	adds	r3, r3, r1
 8003380:	2120      	movs	r1, #32
 8003382:	7019      	strb	r1, [r3, #0]
 8003384:	0713      	lsls	r3, r2, #28
 8003386:	d504      	bpl.n	8003392 <_svfiprintf_r+0xc6>
 8003388:	2353      	movs	r3, #83	; 0x53
 800338a:	a904      	add	r1, sp, #16
 800338c:	185b      	adds	r3, r3, r1
 800338e:	212b      	movs	r1, #43	; 0x2b
 8003390:	7019      	strb	r1, [r3, #0]
 8003392:	7833      	ldrb	r3, [r6, #0]
 8003394:	2b2a      	cmp	r3, #42	; 0x2a
 8003396:	d016      	beq.n	80033c6 <_svfiprintf_r+0xfa>
 8003398:	0035      	movs	r5, r6
 800339a:	2100      	movs	r1, #0
 800339c:	200a      	movs	r0, #10
 800339e:	68e3      	ldr	r3, [r4, #12]
 80033a0:	782a      	ldrb	r2, [r5, #0]
 80033a2:	1c6e      	adds	r6, r5, #1
 80033a4:	3a30      	subs	r2, #48	; 0x30
 80033a6:	2a09      	cmp	r2, #9
 80033a8:	d94e      	bls.n	8003448 <_svfiprintf_r+0x17c>
 80033aa:	2900      	cmp	r1, #0
 80033ac:	d111      	bne.n	80033d2 <_svfiprintf_r+0x106>
 80033ae:	e017      	b.n	80033e0 <_svfiprintf_r+0x114>
 80033b0:	3501      	adds	r5, #1
 80033b2:	e7af      	b.n	8003314 <_svfiprintf_r+0x48>
 80033b4:	9b05      	ldr	r3, [sp, #20]
 80033b6:	6822      	ldr	r2, [r4, #0]
 80033b8:	1ac0      	subs	r0, r0, r3
 80033ba:	2301      	movs	r3, #1
 80033bc:	4083      	lsls	r3, r0
 80033be:	4313      	orrs	r3, r2
 80033c0:	002e      	movs	r6, r5
 80033c2:	6023      	str	r3, [r4, #0]
 80033c4:	e7cc      	b.n	8003360 <_svfiprintf_r+0x94>
 80033c6:	9b07      	ldr	r3, [sp, #28]
 80033c8:	1d19      	adds	r1, r3, #4
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	9107      	str	r1, [sp, #28]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	db01      	blt.n	80033d6 <_svfiprintf_r+0x10a>
 80033d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80033d4:	e004      	b.n	80033e0 <_svfiprintf_r+0x114>
 80033d6:	425b      	negs	r3, r3
 80033d8:	60e3      	str	r3, [r4, #12]
 80033da:	2302      	movs	r3, #2
 80033dc:	4313      	orrs	r3, r2
 80033de:	6023      	str	r3, [r4, #0]
 80033e0:	782b      	ldrb	r3, [r5, #0]
 80033e2:	2b2e      	cmp	r3, #46	; 0x2e
 80033e4:	d10a      	bne.n	80033fc <_svfiprintf_r+0x130>
 80033e6:	786b      	ldrb	r3, [r5, #1]
 80033e8:	2b2a      	cmp	r3, #42	; 0x2a
 80033ea:	d135      	bne.n	8003458 <_svfiprintf_r+0x18c>
 80033ec:	9b07      	ldr	r3, [sp, #28]
 80033ee:	3502      	adds	r5, #2
 80033f0:	1d1a      	adds	r2, r3, #4
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	9207      	str	r2, [sp, #28]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	db2b      	blt.n	8003452 <_svfiprintf_r+0x186>
 80033fa:	9309      	str	r3, [sp, #36]	; 0x24
 80033fc:	4e2f      	ldr	r6, [pc, #188]	; (80034bc <_svfiprintf_r+0x1f0>)
 80033fe:	2203      	movs	r2, #3
 8003400:	0030      	movs	r0, r6
 8003402:	7829      	ldrb	r1, [r5, #0]
 8003404:	f000 fa08 	bl	8003818 <memchr>
 8003408:	2800      	cmp	r0, #0
 800340a:	d006      	beq.n	800341a <_svfiprintf_r+0x14e>
 800340c:	2340      	movs	r3, #64	; 0x40
 800340e:	1b80      	subs	r0, r0, r6
 8003410:	4083      	lsls	r3, r0
 8003412:	6822      	ldr	r2, [r4, #0]
 8003414:	3501      	adds	r5, #1
 8003416:	4313      	orrs	r3, r2
 8003418:	6023      	str	r3, [r4, #0]
 800341a:	7829      	ldrb	r1, [r5, #0]
 800341c:	2206      	movs	r2, #6
 800341e:	4828      	ldr	r0, [pc, #160]	; (80034c0 <_svfiprintf_r+0x1f4>)
 8003420:	1c6e      	adds	r6, r5, #1
 8003422:	7621      	strb	r1, [r4, #24]
 8003424:	f000 f9f8 	bl	8003818 <memchr>
 8003428:	2800      	cmp	r0, #0
 800342a:	d03c      	beq.n	80034a6 <_svfiprintf_r+0x1da>
 800342c:	4b25      	ldr	r3, [pc, #148]	; (80034c4 <_svfiprintf_r+0x1f8>)
 800342e:	2b00      	cmp	r3, #0
 8003430:	d125      	bne.n	800347e <_svfiprintf_r+0x1b2>
 8003432:	2207      	movs	r2, #7
 8003434:	9b07      	ldr	r3, [sp, #28]
 8003436:	3307      	adds	r3, #7
 8003438:	4393      	bics	r3, r2
 800343a:	3308      	adds	r3, #8
 800343c:	9307      	str	r3, [sp, #28]
 800343e:	6963      	ldr	r3, [r4, #20]
 8003440:	9a04      	ldr	r2, [sp, #16]
 8003442:	189b      	adds	r3, r3, r2
 8003444:	6163      	str	r3, [r4, #20]
 8003446:	e764      	b.n	8003312 <_svfiprintf_r+0x46>
 8003448:	4343      	muls	r3, r0
 800344a:	0035      	movs	r5, r6
 800344c:	2101      	movs	r1, #1
 800344e:	189b      	adds	r3, r3, r2
 8003450:	e7a6      	b.n	80033a0 <_svfiprintf_r+0xd4>
 8003452:	2301      	movs	r3, #1
 8003454:	425b      	negs	r3, r3
 8003456:	e7d0      	b.n	80033fa <_svfiprintf_r+0x12e>
 8003458:	2300      	movs	r3, #0
 800345a:	200a      	movs	r0, #10
 800345c:	001a      	movs	r2, r3
 800345e:	3501      	adds	r5, #1
 8003460:	6063      	str	r3, [r4, #4]
 8003462:	7829      	ldrb	r1, [r5, #0]
 8003464:	1c6e      	adds	r6, r5, #1
 8003466:	3930      	subs	r1, #48	; 0x30
 8003468:	2909      	cmp	r1, #9
 800346a:	d903      	bls.n	8003474 <_svfiprintf_r+0x1a8>
 800346c:	2b00      	cmp	r3, #0
 800346e:	d0c5      	beq.n	80033fc <_svfiprintf_r+0x130>
 8003470:	9209      	str	r2, [sp, #36]	; 0x24
 8003472:	e7c3      	b.n	80033fc <_svfiprintf_r+0x130>
 8003474:	4342      	muls	r2, r0
 8003476:	0035      	movs	r5, r6
 8003478:	2301      	movs	r3, #1
 800347a:	1852      	adds	r2, r2, r1
 800347c:	e7f1      	b.n	8003462 <_svfiprintf_r+0x196>
 800347e:	aa07      	add	r2, sp, #28
 8003480:	9200      	str	r2, [sp, #0]
 8003482:	0021      	movs	r1, r4
 8003484:	003a      	movs	r2, r7
 8003486:	4b10      	ldr	r3, [pc, #64]	; (80034c8 <_svfiprintf_r+0x1fc>)
 8003488:	9803      	ldr	r0, [sp, #12]
 800348a:	e000      	b.n	800348e <_svfiprintf_r+0x1c2>
 800348c:	bf00      	nop
 800348e:	9004      	str	r0, [sp, #16]
 8003490:	9b04      	ldr	r3, [sp, #16]
 8003492:	3301      	adds	r3, #1
 8003494:	d1d3      	bne.n	800343e <_svfiprintf_r+0x172>
 8003496:	89bb      	ldrh	r3, [r7, #12]
 8003498:	980d      	ldr	r0, [sp, #52]	; 0x34
 800349a:	065b      	lsls	r3, r3, #25
 800349c:	d400      	bmi.n	80034a0 <_svfiprintf_r+0x1d4>
 800349e:	e72c      	b.n	80032fa <_svfiprintf_r+0x2e>
 80034a0:	2001      	movs	r0, #1
 80034a2:	4240      	negs	r0, r0
 80034a4:	e729      	b.n	80032fa <_svfiprintf_r+0x2e>
 80034a6:	aa07      	add	r2, sp, #28
 80034a8:	9200      	str	r2, [sp, #0]
 80034aa:	0021      	movs	r1, r4
 80034ac:	003a      	movs	r2, r7
 80034ae:	4b06      	ldr	r3, [pc, #24]	; (80034c8 <_svfiprintf_r+0x1fc>)
 80034b0:	9803      	ldr	r0, [sp, #12]
 80034b2:	f000 f87b 	bl	80035ac <_printf_i>
 80034b6:	e7ea      	b.n	800348e <_svfiprintf_r+0x1c2>
 80034b8:	080039a4 	.word	0x080039a4
 80034bc:	080039aa 	.word	0x080039aa
 80034c0:	080039ae 	.word	0x080039ae
 80034c4:	00000000 	.word	0x00000000
 80034c8:	08003209 	.word	0x08003209

080034cc <_printf_common>:
 80034cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80034ce:	0016      	movs	r6, r2
 80034d0:	9301      	str	r3, [sp, #4]
 80034d2:	688a      	ldr	r2, [r1, #8]
 80034d4:	690b      	ldr	r3, [r1, #16]
 80034d6:	000c      	movs	r4, r1
 80034d8:	9000      	str	r0, [sp, #0]
 80034da:	4293      	cmp	r3, r2
 80034dc:	da00      	bge.n	80034e0 <_printf_common+0x14>
 80034de:	0013      	movs	r3, r2
 80034e0:	0022      	movs	r2, r4
 80034e2:	6033      	str	r3, [r6, #0]
 80034e4:	3243      	adds	r2, #67	; 0x43
 80034e6:	7812      	ldrb	r2, [r2, #0]
 80034e8:	2a00      	cmp	r2, #0
 80034ea:	d001      	beq.n	80034f0 <_printf_common+0x24>
 80034ec:	3301      	adds	r3, #1
 80034ee:	6033      	str	r3, [r6, #0]
 80034f0:	6823      	ldr	r3, [r4, #0]
 80034f2:	069b      	lsls	r3, r3, #26
 80034f4:	d502      	bpl.n	80034fc <_printf_common+0x30>
 80034f6:	6833      	ldr	r3, [r6, #0]
 80034f8:	3302      	adds	r3, #2
 80034fa:	6033      	str	r3, [r6, #0]
 80034fc:	6822      	ldr	r2, [r4, #0]
 80034fe:	2306      	movs	r3, #6
 8003500:	0015      	movs	r5, r2
 8003502:	401d      	ands	r5, r3
 8003504:	421a      	tst	r2, r3
 8003506:	d027      	beq.n	8003558 <_printf_common+0x8c>
 8003508:	0023      	movs	r3, r4
 800350a:	3343      	adds	r3, #67	; 0x43
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	1e5a      	subs	r2, r3, #1
 8003510:	4193      	sbcs	r3, r2
 8003512:	6822      	ldr	r2, [r4, #0]
 8003514:	0692      	lsls	r2, r2, #26
 8003516:	d430      	bmi.n	800357a <_printf_common+0xae>
 8003518:	0022      	movs	r2, r4
 800351a:	9901      	ldr	r1, [sp, #4]
 800351c:	9800      	ldr	r0, [sp, #0]
 800351e:	9d08      	ldr	r5, [sp, #32]
 8003520:	3243      	adds	r2, #67	; 0x43
 8003522:	47a8      	blx	r5
 8003524:	3001      	adds	r0, #1
 8003526:	d025      	beq.n	8003574 <_printf_common+0xa8>
 8003528:	2206      	movs	r2, #6
 800352a:	6823      	ldr	r3, [r4, #0]
 800352c:	2500      	movs	r5, #0
 800352e:	4013      	ands	r3, r2
 8003530:	2b04      	cmp	r3, #4
 8003532:	d105      	bne.n	8003540 <_printf_common+0x74>
 8003534:	6833      	ldr	r3, [r6, #0]
 8003536:	68e5      	ldr	r5, [r4, #12]
 8003538:	1aed      	subs	r5, r5, r3
 800353a:	43eb      	mvns	r3, r5
 800353c:	17db      	asrs	r3, r3, #31
 800353e:	401d      	ands	r5, r3
 8003540:	68a3      	ldr	r3, [r4, #8]
 8003542:	6922      	ldr	r2, [r4, #16]
 8003544:	4293      	cmp	r3, r2
 8003546:	dd01      	ble.n	800354c <_printf_common+0x80>
 8003548:	1a9b      	subs	r3, r3, r2
 800354a:	18ed      	adds	r5, r5, r3
 800354c:	2600      	movs	r6, #0
 800354e:	42b5      	cmp	r5, r6
 8003550:	d120      	bne.n	8003594 <_printf_common+0xc8>
 8003552:	2000      	movs	r0, #0
 8003554:	e010      	b.n	8003578 <_printf_common+0xac>
 8003556:	3501      	adds	r5, #1
 8003558:	68e3      	ldr	r3, [r4, #12]
 800355a:	6832      	ldr	r2, [r6, #0]
 800355c:	1a9b      	subs	r3, r3, r2
 800355e:	42ab      	cmp	r3, r5
 8003560:	ddd2      	ble.n	8003508 <_printf_common+0x3c>
 8003562:	0022      	movs	r2, r4
 8003564:	2301      	movs	r3, #1
 8003566:	9901      	ldr	r1, [sp, #4]
 8003568:	9800      	ldr	r0, [sp, #0]
 800356a:	9f08      	ldr	r7, [sp, #32]
 800356c:	3219      	adds	r2, #25
 800356e:	47b8      	blx	r7
 8003570:	3001      	adds	r0, #1
 8003572:	d1f0      	bne.n	8003556 <_printf_common+0x8a>
 8003574:	2001      	movs	r0, #1
 8003576:	4240      	negs	r0, r0
 8003578:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800357a:	2030      	movs	r0, #48	; 0x30
 800357c:	18e1      	adds	r1, r4, r3
 800357e:	3143      	adds	r1, #67	; 0x43
 8003580:	7008      	strb	r0, [r1, #0]
 8003582:	0021      	movs	r1, r4
 8003584:	1c5a      	adds	r2, r3, #1
 8003586:	3145      	adds	r1, #69	; 0x45
 8003588:	7809      	ldrb	r1, [r1, #0]
 800358a:	18a2      	adds	r2, r4, r2
 800358c:	3243      	adds	r2, #67	; 0x43
 800358e:	3302      	adds	r3, #2
 8003590:	7011      	strb	r1, [r2, #0]
 8003592:	e7c1      	b.n	8003518 <_printf_common+0x4c>
 8003594:	0022      	movs	r2, r4
 8003596:	2301      	movs	r3, #1
 8003598:	9901      	ldr	r1, [sp, #4]
 800359a:	9800      	ldr	r0, [sp, #0]
 800359c:	9f08      	ldr	r7, [sp, #32]
 800359e:	321a      	adds	r2, #26
 80035a0:	47b8      	blx	r7
 80035a2:	3001      	adds	r0, #1
 80035a4:	d0e6      	beq.n	8003574 <_printf_common+0xa8>
 80035a6:	3601      	adds	r6, #1
 80035a8:	e7d1      	b.n	800354e <_printf_common+0x82>
	...

080035ac <_printf_i>:
 80035ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035ae:	b08b      	sub	sp, #44	; 0x2c
 80035b0:	9206      	str	r2, [sp, #24]
 80035b2:	000a      	movs	r2, r1
 80035b4:	3243      	adds	r2, #67	; 0x43
 80035b6:	9307      	str	r3, [sp, #28]
 80035b8:	9005      	str	r0, [sp, #20]
 80035ba:	9204      	str	r2, [sp, #16]
 80035bc:	7e0a      	ldrb	r2, [r1, #24]
 80035be:	000c      	movs	r4, r1
 80035c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80035c2:	2a78      	cmp	r2, #120	; 0x78
 80035c4:	d809      	bhi.n	80035da <_printf_i+0x2e>
 80035c6:	2a62      	cmp	r2, #98	; 0x62
 80035c8:	d80b      	bhi.n	80035e2 <_printf_i+0x36>
 80035ca:	2a00      	cmp	r2, #0
 80035cc:	d100      	bne.n	80035d0 <_printf_i+0x24>
 80035ce:	e0be      	b.n	800374e <_printf_i+0x1a2>
 80035d0:	497c      	ldr	r1, [pc, #496]	; (80037c4 <_printf_i+0x218>)
 80035d2:	9103      	str	r1, [sp, #12]
 80035d4:	2a58      	cmp	r2, #88	; 0x58
 80035d6:	d100      	bne.n	80035da <_printf_i+0x2e>
 80035d8:	e093      	b.n	8003702 <_printf_i+0x156>
 80035da:	0026      	movs	r6, r4
 80035dc:	3642      	adds	r6, #66	; 0x42
 80035de:	7032      	strb	r2, [r6, #0]
 80035e0:	e022      	b.n	8003628 <_printf_i+0x7c>
 80035e2:	0010      	movs	r0, r2
 80035e4:	3863      	subs	r0, #99	; 0x63
 80035e6:	2815      	cmp	r0, #21
 80035e8:	d8f7      	bhi.n	80035da <_printf_i+0x2e>
 80035ea:	f7fc fd95 	bl	8000118 <__gnu_thumb1_case_shi>
 80035ee:	0016      	.short	0x0016
 80035f0:	fff6001f 	.word	0xfff6001f
 80035f4:	fff6fff6 	.word	0xfff6fff6
 80035f8:	001ffff6 	.word	0x001ffff6
 80035fc:	fff6fff6 	.word	0xfff6fff6
 8003600:	fff6fff6 	.word	0xfff6fff6
 8003604:	003600a3 	.word	0x003600a3
 8003608:	fff60083 	.word	0xfff60083
 800360c:	00b4fff6 	.word	0x00b4fff6
 8003610:	0036fff6 	.word	0x0036fff6
 8003614:	fff6fff6 	.word	0xfff6fff6
 8003618:	0087      	.short	0x0087
 800361a:	0026      	movs	r6, r4
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	3642      	adds	r6, #66	; 0x42
 8003620:	1d11      	adds	r1, r2, #4
 8003622:	6019      	str	r1, [r3, #0]
 8003624:	6813      	ldr	r3, [r2, #0]
 8003626:	7033      	strb	r3, [r6, #0]
 8003628:	2301      	movs	r3, #1
 800362a:	e0a2      	b.n	8003772 <_printf_i+0x1c6>
 800362c:	6818      	ldr	r0, [r3, #0]
 800362e:	6809      	ldr	r1, [r1, #0]
 8003630:	1d02      	adds	r2, r0, #4
 8003632:	060d      	lsls	r5, r1, #24
 8003634:	d50b      	bpl.n	800364e <_printf_i+0xa2>
 8003636:	6805      	ldr	r5, [r0, #0]
 8003638:	601a      	str	r2, [r3, #0]
 800363a:	2d00      	cmp	r5, #0
 800363c:	da03      	bge.n	8003646 <_printf_i+0x9a>
 800363e:	232d      	movs	r3, #45	; 0x2d
 8003640:	9a04      	ldr	r2, [sp, #16]
 8003642:	426d      	negs	r5, r5
 8003644:	7013      	strb	r3, [r2, #0]
 8003646:	4b5f      	ldr	r3, [pc, #380]	; (80037c4 <_printf_i+0x218>)
 8003648:	270a      	movs	r7, #10
 800364a:	9303      	str	r3, [sp, #12]
 800364c:	e01b      	b.n	8003686 <_printf_i+0xda>
 800364e:	6805      	ldr	r5, [r0, #0]
 8003650:	601a      	str	r2, [r3, #0]
 8003652:	0649      	lsls	r1, r1, #25
 8003654:	d5f1      	bpl.n	800363a <_printf_i+0x8e>
 8003656:	b22d      	sxth	r5, r5
 8003658:	e7ef      	b.n	800363a <_printf_i+0x8e>
 800365a:	680d      	ldr	r5, [r1, #0]
 800365c:	6819      	ldr	r1, [r3, #0]
 800365e:	1d08      	adds	r0, r1, #4
 8003660:	6018      	str	r0, [r3, #0]
 8003662:	062e      	lsls	r6, r5, #24
 8003664:	d501      	bpl.n	800366a <_printf_i+0xbe>
 8003666:	680d      	ldr	r5, [r1, #0]
 8003668:	e003      	b.n	8003672 <_printf_i+0xc6>
 800366a:	066d      	lsls	r5, r5, #25
 800366c:	d5fb      	bpl.n	8003666 <_printf_i+0xba>
 800366e:	680d      	ldr	r5, [r1, #0]
 8003670:	b2ad      	uxth	r5, r5
 8003672:	4b54      	ldr	r3, [pc, #336]	; (80037c4 <_printf_i+0x218>)
 8003674:	2708      	movs	r7, #8
 8003676:	9303      	str	r3, [sp, #12]
 8003678:	2a6f      	cmp	r2, #111	; 0x6f
 800367a:	d000      	beq.n	800367e <_printf_i+0xd2>
 800367c:	3702      	adds	r7, #2
 800367e:	0023      	movs	r3, r4
 8003680:	2200      	movs	r2, #0
 8003682:	3343      	adds	r3, #67	; 0x43
 8003684:	701a      	strb	r2, [r3, #0]
 8003686:	6863      	ldr	r3, [r4, #4]
 8003688:	60a3      	str	r3, [r4, #8]
 800368a:	2b00      	cmp	r3, #0
 800368c:	db03      	blt.n	8003696 <_printf_i+0xea>
 800368e:	2104      	movs	r1, #4
 8003690:	6822      	ldr	r2, [r4, #0]
 8003692:	438a      	bics	r2, r1
 8003694:	6022      	str	r2, [r4, #0]
 8003696:	2d00      	cmp	r5, #0
 8003698:	d102      	bne.n	80036a0 <_printf_i+0xf4>
 800369a:	9e04      	ldr	r6, [sp, #16]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00c      	beq.n	80036ba <_printf_i+0x10e>
 80036a0:	9e04      	ldr	r6, [sp, #16]
 80036a2:	0028      	movs	r0, r5
 80036a4:	0039      	movs	r1, r7
 80036a6:	f7fc fdc7 	bl	8000238 <__aeabi_uidivmod>
 80036aa:	9b03      	ldr	r3, [sp, #12]
 80036ac:	3e01      	subs	r6, #1
 80036ae:	5c5b      	ldrb	r3, [r3, r1]
 80036b0:	7033      	strb	r3, [r6, #0]
 80036b2:	002b      	movs	r3, r5
 80036b4:	0005      	movs	r5, r0
 80036b6:	429f      	cmp	r7, r3
 80036b8:	d9f3      	bls.n	80036a2 <_printf_i+0xf6>
 80036ba:	2f08      	cmp	r7, #8
 80036bc:	d109      	bne.n	80036d2 <_printf_i+0x126>
 80036be:	6823      	ldr	r3, [r4, #0]
 80036c0:	07db      	lsls	r3, r3, #31
 80036c2:	d506      	bpl.n	80036d2 <_printf_i+0x126>
 80036c4:	6862      	ldr	r2, [r4, #4]
 80036c6:	6923      	ldr	r3, [r4, #16]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	dc02      	bgt.n	80036d2 <_printf_i+0x126>
 80036cc:	2330      	movs	r3, #48	; 0x30
 80036ce:	3e01      	subs	r6, #1
 80036d0:	7033      	strb	r3, [r6, #0]
 80036d2:	9b04      	ldr	r3, [sp, #16]
 80036d4:	1b9b      	subs	r3, r3, r6
 80036d6:	6123      	str	r3, [r4, #16]
 80036d8:	9b07      	ldr	r3, [sp, #28]
 80036da:	0021      	movs	r1, r4
 80036dc:	9300      	str	r3, [sp, #0]
 80036de:	9805      	ldr	r0, [sp, #20]
 80036e0:	9b06      	ldr	r3, [sp, #24]
 80036e2:	aa09      	add	r2, sp, #36	; 0x24
 80036e4:	f7ff fef2 	bl	80034cc <_printf_common>
 80036e8:	3001      	adds	r0, #1
 80036ea:	d147      	bne.n	800377c <_printf_i+0x1d0>
 80036ec:	2001      	movs	r0, #1
 80036ee:	4240      	negs	r0, r0
 80036f0:	b00b      	add	sp, #44	; 0x2c
 80036f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036f4:	2220      	movs	r2, #32
 80036f6:	6809      	ldr	r1, [r1, #0]
 80036f8:	430a      	orrs	r2, r1
 80036fa:	6022      	str	r2, [r4, #0]
 80036fc:	2278      	movs	r2, #120	; 0x78
 80036fe:	4932      	ldr	r1, [pc, #200]	; (80037c8 <_printf_i+0x21c>)
 8003700:	9103      	str	r1, [sp, #12]
 8003702:	0021      	movs	r1, r4
 8003704:	3145      	adds	r1, #69	; 0x45
 8003706:	700a      	strb	r2, [r1, #0]
 8003708:	6819      	ldr	r1, [r3, #0]
 800370a:	6822      	ldr	r2, [r4, #0]
 800370c:	c920      	ldmia	r1!, {r5}
 800370e:	0610      	lsls	r0, r2, #24
 8003710:	d402      	bmi.n	8003718 <_printf_i+0x16c>
 8003712:	0650      	lsls	r0, r2, #25
 8003714:	d500      	bpl.n	8003718 <_printf_i+0x16c>
 8003716:	b2ad      	uxth	r5, r5
 8003718:	6019      	str	r1, [r3, #0]
 800371a:	07d3      	lsls	r3, r2, #31
 800371c:	d502      	bpl.n	8003724 <_printf_i+0x178>
 800371e:	2320      	movs	r3, #32
 8003720:	4313      	orrs	r3, r2
 8003722:	6023      	str	r3, [r4, #0]
 8003724:	2710      	movs	r7, #16
 8003726:	2d00      	cmp	r5, #0
 8003728:	d1a9      	bne.n	800367e <_printf_i+0xd2>
 800372a:	2220      	movs	r2, #32
 800372c:	6823      	ldr	r3, [r4, #0]
 800372e:	4393      	bics	r3, r2
 8003730:	6023      	str	r3, [r4, #0]
 8003732:	e7a4      	b.n	800367e <_printf_i+0xd2>
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	680d      	ldr	r5, [r1, #0]
 8003738:	1d10      	adds	r0, r2, #4
 800373a:	6949      	ldr	r1, [r1, #20]
 800373c:	6018      	str	r0, [r3, #0]
 800373e:	6813      	ldr	r3, [r2, #0]
 8003740:	062e      	lsls	r6, r5, #24
 8003742:	d501      	bpl.n	8003748 <_printf_i+0x19c>
 8003744:	6019      	str	r1, [r3, #0]
 8003746:	e002      	b.n	800374e <_printf_i+0x1a2>
 8003748:	066d      	lsls	r5, r5, #25
 800374a:	d5fb      	bpl.n	8003744 <_printf_i+0x198>
 800374c:	8019      	strh	r1, [r3, #0]
 800374e:	2300      	movs	r3, #0
 8003750:	9e04      	ldr	r6, [sp, #16]
 8003752:	6123      	str	r3, [r4, #16]
 8003754:	e7c0      	b.n	80036d8 <_printf_i+0x12c>
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	1d11      	adds	r1, r2, #4
 800375a:	6019      	str	r1, [r3, #0]
 800375c:	6816      	ldr	r6, [r2, #0]
 800375e:	2100      	movs	r1, #0
 8003760:	0030      	movs	r0, r6
 8003762:	6862      	ldr	r2, [r4, #4]
 8003764:	f000 f858 	bl	8003818 <memchr>
 8003768:	2800      	cmp	r0, #0
 800376a:	d001      	beq.n	8003770 <_printf_i+0x1c4>
 800376c:	1b80      	subs	r0, r0, r6
 800376e:	6060      	str	r0, [r4, #4]
 8003770:	6863      	ldr	r3, [r4, #4]
 8003772:	6123      	str	r3, [r4, #16]
 8003774:	2300      	movs	r3, #0
 8003776:	9a04      	ldr	r2, [sp, #16]
 8003778:	7013      	strb	r3, [r2, #0]
 800377a:	e7ad      	b.n	80036d8 <_printf_i+0x12c>
 800377c:	0032      	movs	r2, r6
 800377e:	6923      	ldr	r3, [r4, #16]
 8003780:	9906      	ldr	r1, [sp, #24]
 8003782:	9805      	ldr	r0, [sp, #20]
 8003784:	9d07      	ldr	r5, [sp, #28]
 8003786:	47a8      	blx	r5
 8003788:	3001      	adds	r0, #1
 800378a:	d0af      	beq.n	80036ec <_printf_i+0x140>
 800378c:	6823      	ldr	r3, [r4, #0]
 800378e:	079b      	lsls	r3, r3, #30
 8003790:	d415      	bmi.n	80037be <_printf_i+0x212>
 8003792:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003794:	68e0      	ldr	r0, [r4, #12]
 8003796:	4298      	cmp	r0, r3
 8003798:	daaa      	bge.n	80036f0 <_printf_i+0x144>
 800379a:	0018      	movs	r0, r3
 800379c:	e7a8      	b.n	80036f0 <_printf_i+0x144>
 800379e:	0022      	movs	r2, r4
 80037a0:	2301      	movs	r3, #1
 80037a2:	9906      	ldr	r1, [sp, #24]
 80037a4:	9805      	ldr	r0, [sp, #20]
 80037a6:	9e07      	ldr	r6, [sp, #28]
 80037a8:	3219      	adds	r2, #25
 80037aa:	47b0      	blx	r6
 80037ac:	3001      	adds	r0, #1
 80037ae:	d09d      	beq.n	80036ec <_printf_i+0x140>
 80037b0:	3501      	adds	r5, #1
 80037b2:	68e3      	ldr	r3, [r4, #12]
 80037b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80037b6:	1a9b      	subs	r3, r3, r2
 80037b8:	42ab      	cmp	r3, r5
 80037ba:	dcf0      	bgt.n	800379e <_printf_i+0x1f2>
 80037bc:	e7e9      	b.n	8003792 <_printf_i+0x1e6>
 80037be:	2500      	movs	r5, #0
 80037c0:	e7f7      	b.n	80037b2 <_printf_i+0x206>
 80037c2:	46c0      	nop			; (mov r8, r8)
 80037c4:	080039b5 	.word	0x080039b5
 80037c8:	080039c6 	.word	0x080039c6

080037cc <memmove>:
 80037cc:	b510      	push	{r4, lr}
 80037ce:	4288      	cmp	r0, r1
 80037d0:	d902      	bls.n	80037d8 <memmove+0xc>
 80037d2:	188b      	adds	r3, r1, r2
 80037d4:	4298      	cmp	r0, r3
 80037d6:	d303      	bcc.n	80037e0 <memmove+0x14>
 80037d8:	2300      	movs	r3, #0
 80037da:	e007      	b.n	80037ec <memmove+0x20>
 80037dc:	5c8b      	ldrb	r3, [r1, r2]
 80037de:	5483      	strb	r3, [r0, r2]
 80037e0:	3a01      	subs	r2, #1
 80037e2:	d2fb      	bcs.n	80037dc <memmove+0x10>
 80037e4:	bd10      	pop	{r4, pc}
 80037e6:	5ccc      	ldrb	r4, [r1, r3]
 80037e8:	54c4      	strb	r4, [r0, r3]
 80037ea:	3301      	adds	r3, #1
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d1fa      	bne.n	80037e6 <memmove+0x1a>
 80037f0:	e7f8      	b.n	80037e4 <memmove+0x18>
	...

080037f4 <_sbrk_r>:
 80037f4:	2300      	movs	r3, #0
 80037f6:	b570      	push	{r4, r5, r6, lr}
 80037f8:	4d06      	ldr	r5, [pc, #24]	; (8003814 <_sbrk_r+0x20>)
 80037fa:	0004      	movs	r4, r0
 80037fc:	0008      	movs	r0, r1
 80037fe:	602b      	str	r3, [r5, #0]
 8003800:	f7fd f8f2 	bl	80009e8 <_sbrk>
 8003804:	1c43      	adds	r3, r0, #1
 8003806:	d103      	bne.n	8003810 <_sbrk_r+0x1c>
 8003808:	682b      	ldr	r3, [r5, #0]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d000      	beq.n	8003810 <_sbrk_r+0x1c>
 800380e:	6023      	str	r3, [r4, #0]
 8003810:	bd70      	pop	{r4, r5, r6, pc}
 8003812:	46c0      	nop			; (mov r8, r8)
 8003814:	20000294 	.word	0x20000294

08003818 <memchr>:
 8003818:	b2c9      	uxtb	r1, r1
 800381a:	1882      	adds	r2, r0, r2
 800381c:	4290      	cmp	r0, r2
 800381e:	d101      	bne.n	8003824 <memchr+0xc>
 8003820:	2000      	movs	r0, #0
 8003822:	4770      	bx	lr
 8003824:	7803      	ldrb	r3, [r0, #0]
 8003826:	428b      	cmp	r3, r1
 8003828:	d0fb      	beq.n	8003822 <memchr+0xa>
 800382a:	3001      	adds	r0, #1
 800382c:	e7f6      	b.n	800381c <memchr+0x4>

0800382e <memcpy>:
 800382e:	2300      	movs	r3, #0
 8003830:	b510      	push	{r4, lr}
 8003832:	429a      	cmp	r2, r3
 8003834:	d100      	bne.n	8003838 <memcpy+0xa>
 8003836:	bd10      	pop	{r4, pc}
 8003838:	5ccc      	ldrb	r4, [r1, r3]
 800383a:	54c4      	strb	r4, [r0, r3]
 800383c:	3301      	adds	r3, #1
 800383e:	e7f8      	b.n	8003832 <memcpy+0x4>

08003840 <_realloc_r>:
 8003840:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003842:	0007      	movs	r7, r0
 8003844:	000e      	movs	r6, r1
 8003846:	0014      	movs	r4, r2
 8003848:	2900      	cmp	r1, #0
 800384a:	d105      	bne.n	8003858 <_realloc_r+0x18>
 800384c:	0011      	movs	r1, r2
 800384e:	f7ff fc49 	bl	80030e4 <_malloc_r>
 8003852:	0005      	movs	r5, r0
 8003854:	0028      	movs	r0, r5
 8003856:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003858:	2a00      	cmp	r2, #0
 800385a:	d103      	bne.n	8003864 <_realloc_r+0x24>
 800385c:	f7ff fbd6 	bl	800300c <_free_r>
 8003860:	0025      	movs	r5, r4
 8003862:	e7f7      	b.n	8003854 <_realloc_r+0x14>
 8003864:	f000 f81b 	bl	800389e <_malloc_usable_size_r>
 8003868:	9001      	str	r0, [sp, #4]
 800386a:	4284      	cmp	r4, r0
 800386c:	d803      	bhi.n	8003876 <_realloc_r+0x36>
 800386e:	0035      	movs	r5, r6
 8003870:	0843      	lsrs	r3, r0, #1
 8003872:	42a3      	cmp	r3, r4
 8003874:	d3ee      	bcc.n	8003854 <_realloc_r+0x14>
 8003876:	0021      	movs	r1, r4
 8003878:	0038      	movs	r0, r7
 800387a:	f7ff fc33 	bl	80030e4 <_malloc_r>
 800387e:	1e05      	subs	r5, r0, #0
 8003880:	d0e8      	beq.n	8003854 <_realloc_r+0x14>
 8003882:	9b01      	ldr	r3, [sp, #4]
 8003884:	0022      	movs	r2, r4
 8003886:	429c      	cmp	r4, r3
 8003888:	d900      	bls.n	800388c <_realloc_r+0x4c>
 800388a:	001a      	movs	r2, r3
 800388c:	0031      	movs	r1, r6
 800388e:	0028      	movs	r0, r5
 8003890:	f7ff ffcd 	bl	800382e <memcpy>
 8003894:	0031      	movs	r1, r6
 8003896:	0038      	movs	r0, r7
 8003898:	f7ff fbb8 	bl	800300c <_free_r>
 800389c:	e7da      	b.n	8003854 <_realloc_r+0x14>

0800389e <_malloc_usable_size_r>:
 800389e:	1f0b      	subs	r3, r1, #4
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	1f18      	subs	r0, r3, #4
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	da01      	bge.n	80038ac <_malloc_usable_size_r+0xe>
 80038a8:	580b      	ldr	r3, [r1, r0]
 80038aa:	18c0      	adds	r0, r0, r3
 80038ac:	4770      	bx	lr
	...

080038b0 <_init>:
 80038b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038b2:	46c0      	nop			; (mov r8, r8)
 80038b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038b6:	bc08      	pop	{r3}
 80038b8:	469e      	mov	lr, r3
 80038ba:	4770      	bx	lr

080038bc <_fini>:
 80038bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038be:	46c0      	nop			; (mov r8, r8)
 80038c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038c2:	bc08      	pop	{r3}
 80038c4:	469e      	mov	lr, r3
 80038c6:	4770      	bx	lr
