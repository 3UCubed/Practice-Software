
Tutorial3-RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bf8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08003cb8  08003cb8  00013cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d64  08003d64  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08003d64  08003d64  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d64  08003d64  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d64  08003d64  00013d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d68  08003d68  00013d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003d6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  20000068  08003dd4  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  08003dd4  00020280  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008c4b  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017bd  00000000  00000000  00028d1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000788  00000000  00000000  0002a4e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005bd  00000000  00000000  0002ac68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00012e67  00000000  00000000  0002b225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a482  00000000  00000000  0003e08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006f51b  00000000  00000000  0004850e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000222c  00000000  00000000  000b7a2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000b9c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003ca0 	.word	0x08003ca0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08003ca0 	.word	0x08003ca0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000246:	b09b      	sub	sp, #108	; 0x6c
 8000248:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800024a:	f000 fb61 	bl	8000910 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800024e:	f000 f83d 	bl	80002cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000252:	f000 f98f 	bl	8000574 <MX_GPIO_Init>
  MX_RTC_Init();
 8000256:	f000 f8a3 	bl	80003a0 <MX_RTC_Init>
  MX_USART1_UART_Init();
 800025a:	f000 f95b 	bl	8000514 <MX_USART1_UART_Init>
	  //char* transmitString2 = "Got Data!\r\n";
	  //HAL_UART_Transmit(&huart1, (const uint8_t*)transmitString, strlen(transmitString), 100000);

	  RTC_DateTypeDef dateData;
	  RTC_TimeTypeDef timeData;
	  HAL_RTC_GetTime(&hrtc, &timeData, RTC_FORMAT_BIN);
 800025e:	2340      	movs	r3, #64	; 0x40
 8000260:	18f9      	adds	r1, r7, r3
 8000262:	4b18      	ldr	r3, [pc, #96]	; (80002c4 <main+0x80>)
 8000264:	2200      	movs	r2, #0
 8000266:	0018      	movs	r0, r3
 8000268:	f001 fc96 	bl	8001b98 <HAL_RTC_GetTime>
	  if(HAL_RTC_GetDate(&hrtc, &dateData, RTC_FORMAT_BIN) == HAL_OK)
 800026c:	2454      	movs	r4, #84	; 0x54
 800026e:	1939      	adds	r1, r7, r4
 8000270:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <main+0x80>)
 8000272:	2200      	movs	r2, #0
 8000274:	0018      	movs	r0, r3
 8000276:	f001 fd7d 	bl	8001d74 <HAL_RTC_GetDate>
 800027a:	1e03      	subs	r3, r0, #0
 800027c:	d11b      	bne.n	80002b6 <main+0x72>
	  {
		  char dateBuffer[60];
		  sprintf(dateBuffer, "D=%d, M=%d, Day=%d, Y=%d, hour1=%d\r\n", dateData.Date, dateData.Month, dateData.WeekDay, dateData.Year, timeData.Hours);
 800027e:	193b      	adds	r3, r7, r4
 8000280:	789b      	ldrb	r3, [r3, #2]
 8000282:	001d      	movs	r5, r3
 8000284:	193b      	adds	r3, r7, r4
 8000286:	785b      	ldrb	r3, [r3, #1]
 8000288:	001e      	movs	r6, r3
 800028a:	193b      	adds	r3, r7, r4
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	001a      	movs	r2, r3
 8000290:	193b      	adds	r3, r7, r4
 8000292:	78db      	ldrb	r3, [r3, #3]
 8000294:	001c      	movs	r4, r3
 8000296:	2340      	movs	r3, #64	; 0x40
 8000298:	18fb      	adds	r3, r7, r3
 800029a:	781b      	ldrb	r3, [r3, #0]
 800029c:	490a      	ldr	r1, [pc, #40]	; (80002c8 <main+0x84>)
 800029e:	1d38      	adds	r0, r7, #4
 80002a0:	9302      	str	r3, [sp, #8]
 80002a2:	9401      	str	r4, [sp, #4]
 80002a4:	9200      	str	r2, [sp, #0]
 80002a6:	0033      	movs	r3, r6
 80002a8:	002a      	movs	r2, r5
 80002aa:	f002 fc8d 	bl	8002bc8 <siprintf>
		  //HAL_UART_Transmit(&huart1, (const uint8_t*)dateBuffer, strlen(dateBuffer)+1, 100000);
		  printf(dateBuffer);
 80002ae:	1d3b      	adds	r3, r7, #4
 80002b0:	0018      	movs	r0, r3
 80002b2:	f002 fc79 	bl	8002ba8 <iprintf>
	  }
//HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
//HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
	  HAL_Delay(500);
 80002b6:	23fa      	movs	r3, #250	; 0xfa
 80002b8:	005b      	lsls	r3, r3, #1
 80002ba:	0018      	movs	r0, r3
 80002bc:	f000 fb8c 	bl	80009d8 <HAL_Delay>
  {
 80002c0:	e7cd      	b.n	800025e <main+0x1a>
 80002c2:	46c0      	nop			; (mov r8, r8)
 80002c4:	20000084 	.word	0x20000084
 80002c8:	08003cb8 	.word	0x08003cb8

080002cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002cc:	b590      	push	{r4, r7, lr}
 80002ce:	b097      	sub	sp, #92	; 0x5c
 80002d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d2:	2428      	movs	r4, #40	; 0x28
 80002d4:	193b      	adds	r3, r7, r4
 80002d6:	0018      	movs	r0, r3
 80002d8:	2330      	movs	r3, #48	; 0x30
 80002da:	001a      	movs	r2, r3
 80002dc:	2100      	movs	r1, #0
 80002de:	f002 fcdf 	bl	8002ca0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e2:	2318      	movs	r3, #24
 80002e4:	18fb      	adds	r3, r7, r3
 80002e6:	0018      	movs	r0, r3
 80002e8:	2310      	movs	r3, #16
 80002ea:	001a      	movs	r2, r3
 80002ec:	2100      	movs	r1, #0
 80002ee:	f002 fcd7 	bl	8002ca0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	0018      	movs	r0, r3
 80002f6:	2314      	movs	r3, #20
 80002f8:	001a      	movs	r2, r3
 80002fa:	2100      	movs	r1, #0
 80002fc:	f002 fcd0 	bl	8002ca0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000300:	0021      	movs	r1, r4
 8000302:	187b      	adds	r3, r7, r1
 8000304:	220a      	movs	r2, #10
 8000306:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000308:	187b      	adds	r3, r7, r1
 800030a:	2201      	movs	r2, #1
 800030c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800030e:	187b      	adds	r3, r7, r1
 8000310:	2210      	movs	r2, #16
 8000312:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000314:	187b      	adds	r3, r7, r1
 8000316:	2201      	movs	r2, #1
 8000318:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800031a:	187b      	adds	r3, r7, r1
 800031c:	2202      	movs	r2, #2
 800031e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000320:	187b      	adds	r3, r7, r1
 8000322:	2200      	movs	r2, #0
 8000324:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000326:	187b      	adds	r3, r7, r1
 8000328:	22a0      	movs	r2, #160	; 0xa0
 800032a:	0392      	lsls	r2, r2, #14
 800032c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800032e:	187b      	adds	r3, r7, r1
 8000330:	2200      	movs	r2, #0
 8000332:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000334:	187b      	adds	r3, r7, r1
 8000336:	0018      	movs	r0, r3
 8000338:	f000 fdb4 	bl	8000ea4 <HAL_RCC_OscConfig>
 800033c:	1e03      	subs	r3, r0, #0
 800033e:	d001      	beq.n	8000344 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000340:	f000 f974 	bl	800062c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000344:	2118      	movs	r1, #24
 8000346:	187b      	adds	r3, r7, r1
 8000348:	2207      	movs	r2, #7
 800034a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800034c:	187b      	adds	r3, r7, r1
 800034e:	2202      	movs	r2, #2
 8000350:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000352:	187b      	adds	r3, r7, r1
 8000354:	2200      	movs	r2, #0
 8000356:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000358:	187b      	adds	r3, r7, r1
 800035a:	2200      	movs	r2, #0
 800035c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800035e:	187b      	adds	r3, r7, r1
 8000360:	2101      	movs	r1, #1
 8000362:	0018      	movs	r0, r3
 8000364:	f001 f8b8 	bl	80014d8 <HAL_RCC_ClockConfig>
 8000368:	1e03      	subs	r3, r0, #0
 800036a:	d001      	beq.n	8000370 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800036c:	f000 f95e 	bl	800062c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_RTC;
 8000370:	1d3b      	adds	r3, r7, #4
 8000372:	4a0a      	ldr	r2, [pc, #40]	; (800039c <SystemClock_Config+0xd0>)
 8000374:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000376:	1d3b      	adds	r3, r7, #4
 8000378:	2200      	movs	r2, #0
 800037a:	609a      	str	r2, [r3, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800037c:	1d3b      	adds	r3, r7, #4
 800037e:	2280      	movs	r2, #128	; 0x80
 8000380:	0092      	lsls	r2, r2, #2
 8000382:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000384:	1d3b      	adds	r3, r7, #4
 8000386:	0018      	movs	r0, r3
 8000388:	f001 f9ea 	bl	8001760 <HAL_RCCEx_PeriphCLKConfig>
 800038c:	1e03      	subs	r3, r0, #0
 800038e:	d001      	beq.n	8000394 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000390:	f000 f94c 	bl	800062c <Error_Handler>
  }
}
 8000394:	46c0      	nop			; (mov r8, r8)
 8000396:	46bd      	mov	sp, r7
 8000398:	b017      	add	sp, #92	; 0x5c
 800039a:	bd90      	pop	{r4, r7, pc}
 800039c:	00010001 	.word	0x00010001

080003a0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80003a0:	b5b0      	push	{r4, r5, r7, lr}
 80003a2:	b0a4      	sub	sp, #144	; 0x90
 80003a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80003a6:	237c      	movs	r3, #124	; 0x7c
 80003a8:	18fb      	adds	r3, r7, r3
 80003aa:	0018      	movs	r0, r3
 80003ac:	2314      	movs	r3, #20
 80003ae:	001a      	movs	r2, r3
 80003b0:	2100      	movs	r1, #0
 80003b2:	f002 fc75 	bl	8002ca0 <memset>
  RTC_DateTypeDef sDate = {0};
 80003b6:	2378      	movs	r3, #120	; 0x78
 80003b8:	18fb      	adds	r3, r7, r3
 80003ba:	2200      	movs	r2, #0
 80003bc:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80003be:	4b50      	ldr	r3, [pc, #320]	; (8000500 <MX_RTC_Init+0x160>)
 80003c0:	4a50      	ldr	r2, [pc, #320]	; (8000504 <MX_RTC_Init+0x164>)
 80003c2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80003c4:	4b4e      	ldr	r3, [pc, #312]	; (8000500 <MX_RTC_Init+0x160>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80003ca:	4b4d      	ldr	r3, [pc, #308]	; (8000500 <MX_RTC_Init+0x160>)
 80003cc:	227f      	movs	r2, #127	; 0x7f
 80003ce:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80003d0:	4b4b      	ldr	r3, [pc, #300]	; (8000500 <MX_RTC_Init+0x160>)
 80003d2:	22ff      	movs	r2, #255	; 0xff
 80003d4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80003d6:	4b4a      	ldr	r3, [pc, #296]	; (8000500 <MX_RTC_Init+0x160>)
 80003d8:	2200      	movs	r2, #0
 80003da:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80003dc:	4b48      	ldr	r3, [pc, #288]	; (8000500 <MX_RTC_Init+0x160>)
 80003de:	2200      	movs	r2, #0
 80003e0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80003e2:	4b47      	ldr	r3, [pc, #284]	; (8000500 <MX_RTC_Init+0x160>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80003e8:	4b45      	ldr	r3, [pc, #276]	; (8000500 <MX_RTC_Init+0x160>)
 80003ea:	0018      	movs	r0, r3
 80003ec:	f001 fa96 	bl	800191c <HAL_RTC_Init>
 80003f0:	1e03      	subs	r3, r0, #0
 80003f2:	d001      	beq.n	80003f8 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80003f4:	f000 f91a 	bl	800062c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80003f8:	217c      	movs	r1, #124	; 0x7c
 80003fa:	187b      	adds	r3, r7, r1
 80003fc:	2200      	movs	r2, #0
 80003fe:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8000400:	187b      	adds	r3, r7, r1
 8000402:	2200      	movs	r2, #0
 8000404:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8000406:	187b      	adds	r3, r7, r1
 8000408:	2200      	movs	r2, #0
 800040a:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800040c:	187b      	adds	r3, r7, r1
 800040e:	2200      	movs	r2, #0
 8000410:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000412:	187b      	adds	r3, r7, r1
 8000414:	2200      	movs	r2, #0
 8000416:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000418:	1879      	adds	r1, r7, r1
 800041a:	4b39      	ldr	r3, [pc, #228]	; (8000500 <MX_RTC_Init+0x160>)
 800041c:	2200      	movs	r2, #0
 800041e:	0018      	movs	r0, r3
 8000420:	f001 fb14 	bl	8001a4c <HAL_RTC_SetTime>
 8000424:	1e03      	subs	r3, r0, #0
 8000426:	d001      	beq.n	800042c <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 8000428:	f000 f900 	bl	800062c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800042c:	2178      	movs	r1, #120	; 0x78
 800042e:	187b      	adds	r3, r7, r1
 8000430:	2201      	movs	r2, #1
 8000432:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000434:	187b      	adds	r3, r7, r1
 8000436:	2201      	movs	r2, #1
 8000438:	705a      	strb	r2, [r3, #1]
  sDate.Date = 2;
 800043a:	187b      	adds	r3, r7, r1
 800043c:	2202      	movs	r2, #2
 800043e:	709a      	strb	r2, [r3, #2]
  sDate.Year = 3;
 8000440:	187b      	adds	r3, r7, r1
 8000442:	2203      	movs	r2, #3
 8000444:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000446:	1879      	adds	r1, r7, r1
 8000448:	4b2d      	ldr	r3, [pc, #180]	; (8000500 <MX_RTC_Init+0x160>)
 800044a:	2200      	movs	r2, #0
 800044c:	0018      	movs	r0, r3
 800044e:	f001 fc01 	bl	8001c54 <HAL_RTC_SetDate>
 8000452:	1e03      	subs	r3, r0, #0
 8000454:	d001      	beq.n	800045a <MX_RTC_Init+0xba>
  {
    Error_Handler();
 8000456:	f000 f8e9 	bl	800062c <Error_Handler>
	//HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)

  	  char sendBuffer[60];
  	  char recieveBuffer[60];

  	  strcpy(sendBuffer, "Enter in the hour:\r\n");
 800045a:	253c      	movs	r5, #60	; 0x3c
 800045c:	197b      	adds	r3, r7, r5
 800045e:	4a2a      	ldr	r2, [pc, #168]	; (8000508 <MX_RTC_Init+0x168>)
 8000460:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000462:	c313      	stmia	r3!, {r0, r1, r4}
 8000464:	ca03      	ldmia	r2!, {r0, r1}
 8000466:	c303      	stmia	r3!, {r0, r1}
 8000468:	7812      	ldrb	r2, [r2, #0]
 800046a:	701a      	strb	r2, [r3, #0]
  	  HAL_UART_Transmit(&huart1, (const uint8_t*) sendBuffer, strlen(sendBuffer)+1, 100000);
 800046c:	002c      	movs	r4, r5
 800046e:	193b      	adds	r3, r7, r4
 8000470:	0018      	movs	r0, r3
 8000472:	f7ff fe49 	bl	8000108 <strlen>
 8000476:	0003      	movs	r3, r0
 8000478:	b29b      	uxth	r3, r3
 800047a:	3301      	adds	r3, #1
 800047c:	b29a      	uxth	r2, r3
 800047e:	4b23      	ldr	r3, [pc, #140]	; (800050c <MX_RTC_Init+0x16c>)
 8000480:	1939      	adds	r1, r7, r4
 8000482:	4823      	ldr	r0, [pc, #140]	; (8000510 <MX_RTC_Init+0x170>)
 8000484:	f001 fdee 	bl	8002064 <HAL_UART_Transmit>
  	  //printf();
  	  HAL_UART_Receive(&huart1, (const uint8_t*) recieveBuffer, 60, 100000);
 8000488:	4b20      	ldr	r3, [pc, #128]	; (800050c <MX_RTC_Init+0x16c>)
 800048a:	0039      	movs	r1, r7
 800048c:	4820      	ldr	r0, [pc, #128]	; (8000510 <MX_RTC_Init+0x170>)
 800048e:	223c      	movs	r2, #60	; 0x3c
 8000490:	f001 fe88 	bl	80021a4 <HAL_UART_Receive>

    sTime.Hours = 0;
 8000494:	217c      	movs	r1, #124	; 0x7c
 8000496:	187b      	adds	r3, r7, r1
 8000498:	2200      	movs	r2, #0
 800049a:	701a      	strb	r2, [r3, #0]
    sTime.Minutes = 0;
 800049c:	187b      	adds	r3, r7, r1
 800049e:	2200      	movs	r2, #0
 80004a0:	705a      	strb	r2, [r3, #1]
    sTime.Seconds = 0;
 80004a2:	187b      	adds	r3, r7, r1
 80004a4:	2200      	movs	r2, #0
 80004a6:	709a      	strb	r2, [r3, #2]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80004a8:	187b      	adds	r3, r7, r1
 80004aa:	2200      	movs	r2, #0
 80004ac:	60da      	str	r2, [r3, #12]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80004ae:	187b      	adds	r3, r7, r1
 80004b0:	2200      	movs	r2, #0
 80004b2:	611a      	str	r2, [r3, #16]
    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80004b4:	1879      	adds	r1, r7, r1
 80004b6:	4b12      	ldr	r3, [pc, #72]	; (8000500 <MX_RTC_Init+0x160>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	0018      	movs	r0, r3
 80004bc:	f001 fac6 	bl	8001a4c <HAL_RTC_SetTime>
 80004c0:	1e03      	subs	r3, r0, #0
 80004c2:	d001      	beq.n	80004c8 <MX_RTC_Init+0x128>
    {
      Error_Handler();
 80004c4:	f000 f8b2 	bl	800062c <Error_Handler>
    }
    sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80004c8:	2178      	movs	r1, #120	; 0x78
 80004ca:	187b      	adds	r3, r7, r1
 80004cc:	2201      	movs	r2, #1
 80004ce:	701a      	strb	r2, [r3, #0]
    sDate.Month = RTC_MONTH_JANUARY;
 80004d0:	187b      	adds	r3, r7, r1
 80004d2:	2201      	movs	r2, #1
 80004d4:	705a      	strb	r2, [r3, #1]
    sDate.Date = 2;
 80004d6:	187b      	adds	r3, r7, r1
 80004d8:	2202      	movs	r2, #2
 80004da:	709a      	strb	r2, [r3, #2]
    sDate.Year = 3;
 80004dc:	187b      	adds	r3, r7, r1
 80004de:	2203      	movs	r2, #3
 80004e0:	70da      	strb	r2, [r3, #3]

    if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80004e2:	1879      	adds	r1, r7, r1
 80004e4:	4b06      	ldr	r3, [pc, #24]	; (8000500 <MX_RTC_Init+0x160>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	0018      	movs	r0, r3
 80004ea:	f001 fbb3 	bl	8001c54 <HAL_RTC_SetDate>
 80004ee:	1e03      	subs	r3, r0, #0
 80004f0:	d001      	beq.n	80004f6 <MX_RTC_Init+0x156>
    {
      Error_Handler();
 80004f2:	f000 f89b 	bl	800062c <Error_Handler>
    }


  /* USER CODE END RTC_Init 2 */

}
 80004f6:	46c0      	nop			; (mov r8, r8)
 80004f8:	46bd      	mov	sp, r7
 80004fa:	b024      	add	sp, #144	; 0x90
 80004fc:	bdb0      	pop	{r4, r5, r7, pc}
 80004fe:	46c0      	nop			; (mov r8, r8)
 8000500:	20000084 	.word	0x20000084
 8000504:	40002800 	.word	0x40002800
 8000508:	08003ce0 	.word	0x08003ce0
 800050c:	000186a0 	.word	0x000186a0
 8000510:	200000a4 	.word	0x200000a4

08000514 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000518:	4b14      	ldr	r3, [pc, #80]	; (800056c <MX_USART1_UART_Init+0x58>)
 800051a:	4a15      	ldr	r2, [pc, #84]	; (8000570 <MX_USART1_UART_Init+0x5c>)
 800051c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800051e:	4b13      	ldr	r3, [pc, #76]	; (800056c <MX_USART1_UART_Init+0x58>)
 8000520:	2296      	movs	r2, #150	; 0x96
 8000522:	0192      	lsls	r2, r2, #6
 8000524:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000526:	4b11      	ldr	r3, [pc, #68]	; (800056c <MX_USART1_UART_Init+0x58>)
 8000528:	2200      	movs	r2, #0
 800052a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800052c:	4b0f      	ldr	r3, [pc, #60]	; (800056c <MX_USART1_UART_Init+0x58>)
 800052e:	2200      	movs	r2, #0
 8000530:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000532:	4b0e      	ldr	r3, [pc, #56]	; (800056c <MX_USART1_UART_Init+0x58>)
 8000534:	2200      	movs	r2, #0
 8000536:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000538:	4b0c      	ldr	r3, [pc, #48]	; (800056c <MX_USART1_UART_Init+0x58>)
 800053a:	220c      	movs	r2, #12
 800053c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800053e:	4b0b      	ldr	r3, [pc, #44]	; (800056c <MX_USART1_UART_Init+0x58>)
 8000540:	2200      	movs	r2, #0
 8000542:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000544:	4b09      	ldr	r3, [pc, #36]	; (800056c <MX_USART1_UART_Init+0x58>)
 8000546:	2200      	movs	r2, #0
 8000548:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800054a:	4b08      	ldr	r3, [pc, #32]	; (800056c <MX_USART1_UART_Init+0x58>)
 800054c:	2200      	movs	r2, #0
 800054e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000550:	4b06      	ldr	r3, [pc, #24]	; (800056c <MX_USART1_UART_Init+0x58>)
 8000552:	2200      	movs	r2, #0
 8000554:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000556:	4b05      	ldr	r3, [pc, #20]	; (800056c <MX_USART1_UART_Init+0x58>)
 8000558:	0018      	movs	r0, r3
 800055a:	f001 fd2f 	bl	8001fbc <HAL_UART_Init>
 800055e:	1e03      	subs	r3, r0, #0
 8000560:	d001      	beq.n	8000566 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000562:	f000 f863 	bl	800062c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000566:	46c0      	nop			; (mov r8, r8)
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	200000a4 	.word	0x200000a4
 8000570:	40013800 	.word	0x40013800

08000574 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000574:	b590      	push	{r4, r7, lr}
 8000576:	b089      	sub	sp, #36	; 0x24
 8000578:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057a:	240c      	movs	r4, #12
 800057c:	193b      	adds	r3, r7, r4
 800057e:	0018      	movs	r0, r3
 8000580:	2314      	movs	r3, #20
 8000582:	001a      	movs	r2, r3
 8000584:	2100      	movs	r1, #0
 8000586:	f002 fb8b 	bl	8002ca0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800058a:	4b26      	ldr	r3, [pc, #152]	; (8000624 <MX_GPIO_Init+0xb0>)
 800058c:	695a      	ldr	r2, [r3, #20]
 800058e:	4b25      	ldr	r3, [pc, #148]	; (8000624 <MX_GPIO_Init+0xb0>)
 8000590:	2180      	movs	r1, #128	; 0x80
 8000592:	0289      	lsls	r1, r1, #10
 8000594:	430a      	orrs	r2, r1
 8000596:	615a      	str	r2, [r3, #20]
 8000598:	4b22      	ldr	r3, [pc, #136]	; (8000624 <MX_GPIO_Init+0xb0>)
 800059a:	695a      	ldr	r2, [r3, #20]
 800059c:	2380      	movs	r3, #128	; 0x80
 800059e:	029b      	lsls	r3, r3, #10
 80005a0:	4013      	ands	r3, r2
 80005a2:	60bb      	str	r3, [r7, #8]
 80005a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a6:	4b1f      	ldr	r3, [pc, #124]	; (8000624 <MX_GPIO_Init+0xb0>)
 80005a8:	695a      	ldr	r2, [r3, #20]
 80005aa:	4b1e      	ldr	r3, [pc, #120]	; (8000624 <MX_GPIO_Init+0xb0>)
 80005ac:	2180      	movs	r1, #128	; 0x80
 80005ae:	0309      	lsls	r1, r1, #12
 80005b0:	430a      	orrs	r2, r1
 80005b2:	615a      	str	r2, [r3, #20]
 80005b4:	4b1b      	ldr	r3, [pc, #108]	; (8000624 <MX_GPIO_Init+0xb0>)
 80005b6:	695a      	ldr	r2, [r3, #20]
 80005b8:	2380      	movs	r3, #128	; 0x80
 80005ba:	031b      	lsls	r3, r3, #12
 80005bc:	4013      	ands	r3, r2
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 80005c2:	23c0      	movs	r3, #192	; 0xc0
 80005c4:	009b      	lsls	r3, r3, #2
 80005c6:	4818      	ldr	r0, [pc, #96]	; (8000628 <MX_GPIO_Init+0xb4>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	0019      	movs	r1, r3
 80005cc:	f000 fc4c 	bl	8000e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005d0:	193b      	adds	r3, r7, r4
 80005d2:	2201      	movs	r2, #1
 80005d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80005d6:	193b      	adds	r3, r7, r4
 80005d8:	2290      	movs	r2, #144	; 0x90
 80005da:	0352      	lsls	r2, r2, #13
 80005dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005de:	193b      	adds	r3, r7, r4
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005e4:	193a      	adds	r2, r7, r4
 80005e6:	2390      	movs	r3, #144	; 0x90
 80005e8:	05db      	lsls	r3, r3, #23
 80005ea:	0011      	movs	r1, r2
 80005ec:	0018      	movs	r0, r3
 80005ee:	f000 facb 	bl	8000b88 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 80005f2:	0021      	movs	r1, r4
 80005f4:	187b      	adds	r3, r7, r1
 80005f6:	22c0      	movs	r2, #192	; 0xc0
 80005f8:	0092      	lsls	r2, r2, #2
 80005fa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fc:	187b      	adds	r3, r7, r1
 80005fe:	2201      	movs	r2, #1
 8000600:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000602:	187b      	adds	r3, r7, r1
 8000604:	2200      	movs	r2, #0
 8000606:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000608:	187b      	adds	r3, r7, r1
 800060a:	2200      	movs	r2, #0
 800060c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800060e:	187b      	adds	r3, r7, r1
 8000610:	4a05      	ldr	r2, [pc, #20]	; (8000628 <MX_GPIO_Init+0xb4>)
 8000612:	0019      	movs	r1, r3
 8000614:	0010      	movs	r0, r2
 8000616:	f000 fab7 	bl	8000b88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	46bd      	mov	sp, r7
 800061e:	b009      	add	sp, #36	; 0x24
 8000620:	bd90      	pop	{r4, r7, pc}
 8000622:	46c0      	nop			; (mov r8, r8)
 8000624:	40021000 	.word	0x40021000
 8000628:	48000800 	.word	0x48000800

0800062c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000630:	b672      	cpsid	i
}
 8000632:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000634:	e7fe      	b.n	8000634 <Error_Handler+0x8>
	...

08000638 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800063e:	4b0f      	ldr	r3, [pc, #60]	; (800067c <HAL_MspInit+0x44>)
 8000640:	699a      	ldr	r2, [r3, #24]
 8000642:	4b0e      	ldr	r3, [pc, #56]	; (800067c <HAL_MspInit+0x44>)
 8000644:	2101      	movs	r1, #1
 8000646:	430a      	orrs	r2, r1
 8000648:	619a      	str	r2, [r3, #24]
 800064a:	4b0c      	ldr	r3, [pc, #48]	; (800067c <HAL_MspInit+0x44>)
 800064c:	699b      	ldr	r3, [r3, #24]
 800064e:	2201      	movs	r2, #1
 8000650:	4013      	ands	r3, r2
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000656:	4b09      	ldr	r3, [pc, #36]	; (800067c <HAL_MspInit+0x44>)
 8000658:	69da      	ldr	r2, [r3, #28]
 800065a:	4b08      	ldr	r3, [pc, #32]	; (800067c <HAL_MspInit+0x44>)
 800065c:	2180      	movs	r1, #128	; 0x80
 800065e:	0549      	lsls	r1, r1, #21
 8000660:	430a      	orrs	r2, r1
 8000662:	61da      	str	r2, [r3, #28]
 8000664:	4b05      	ldr	r3, [pc, #20]	; (800067c <HAL_MspInit+0x44>)
 8000666:	69da      	ldr	r2, [r3, #28]
 8000668:	2380      	movs	r3, #128	; 0x80
 800066a:	055b      	lsls	r3, r3, #21
 800066c:	4013      	ands	r3, r2
 800066e:	603b      	str	r3, [r7, #0]
 8000670:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	46bd      	mov	sp, r7
 8000676:	b002      	add	sp, #8
 8000678:	bd80      	pop	{r7, pc}
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	40021000 	.word	0x40021000

08000680 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a06      	ldr	r2, [pc, #24]	; (80006a8 <HAL_RTC_MspInit+0x28>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d106      	bne.n	80006a0 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000692:	4b06      	ldr	r3, [pc, #24]	; (80006ac <HAL_RTC_MspInit+0x2c>)
 8000694:	6a1a      	ldr	r2, [r3, #32]
 8000696:	4b05      	ldr	r3, [pc, #20]	; (80006ac <HAL_RTC_MspInit+0x2c>)
 8000698:	2180      	movs	r1, #128	; 0x80
 800069a:	0209      	lsls	r1, r1, #8
 800069c:	430a      	orrs	r2, r1
 800069e:	621a      	str	r2, [r3, #32]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80006a0:	46c0      	nop			; (mov r8, r8)
 80006a2:	46bd      	mov	sp, r7
 80006a4:	b002      	add	sp, #8
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40002800 	.word	0x40002800
 80006ac:	40021000 	.word	0x40021000

080006b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006b0:	b590      	push	{r4, r7, lr}
 80006b2:	b08b      	sub	sp, #44	; 0x2c
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b8:	2414      	movs	r4, #20
 80006ba:	193b      	adds	r3, r7, r4
 80006bc:	0018      	movs	r0, r3
 80006be:	2314      	movs	r3, #20
 80006c0:	001a      	movs	r2, r3
 80006c2:	2100      	movs	r1, #0
 80006c4:	f002 faec 	bl	8002ca0 <memset>
  if(huart->Instance==USART1)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a1d      	ldr	r2, [pc, #116]	; (8000744 <HAL_UART_MspInit+0x94>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d133      	bne.n	800073a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006d2:	4b1d      	ldr	r3, [pc, #116]	; (8000748 <HAL_UART_MspInit+0x98>)
 80006d4:	699a      	ldr	r2, [r3, #24]
 80006d6:	4b1c      	ldr	r3, [pc, #112]	; (8000748 <HAL_UART_MspInit+0x98>)
 80006d8:	2180      	movs	r1, #128	; 0x80
 80006da:	01c9      	lsls	r1, r1, #7
 80006dc:	430a      	orrs	r2, r1
 80006de:	619a      	str	r2, [r3, #24]
 80006e0:	4b19      	ldr	r3, [pc, #100]	; (8000748 <HAL_UART_MspInit+0x98>)
 80006e2:	699a      	ldr	r2, [r3, #24]
 80006e4:	2380      	movs	r3, #128	; 0x80
 80006e6:	01db      	lsls	r3, r3, #7
 80006e8:	4013      	ands	r3, r2
 80006ea:	613b      	str	r3, [r7, #16]
 80006ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ee:	4b16      	ldr	r3, [pc, #88]	; (8000748 <HAL_UART_MspInit+0x98>)
 80006f0:	695a      	ldr	r2, [r3, #20]
 80006f2:	4b15      	ldr	r3, [pc, #84]	; (8000748 <HAL_UART_MspInit+0x98>)
 80006f4:	2180      	movs	r1, #128	; 0x80
 80006f6:	0289      	lsls	r1, r1, #10
 80006f8:	430a      	orrs	r2, r1
 80006fa:	615a      	str	r2, [r3, #20]
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <HAL_UART_MspInit+0x98>)
 80006fe:	695a      	ldr	r2, [r3, #20]
 8000700:	2380      	movs	r3, #128	; 0x80
 8000702:	029b      	lsls	r3, r3, #10
 8000704:	4013      	ands	r3, r2
 8000706:	60fb      	str	r3, [r7, #12]
 8000708:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800070a:	193b      	adds	r3, r7, r4
 800070c:	22c0      	movs	r2, #192	; 0xc0
 800070e:	00d2      	lsls	r2, r2, #3
 8000710:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000712:	0021      	movs	r1, r4
 8000714:	187b      	adds	r3, r7, r1
 8000716:	2202      	movs	r2, #2
 8000718:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	187b      	adds	r3, r7, r1
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000720:	187b      	adds	r3, r7, r1
 8000722:	2203      	movs	r2, #3
 8000724:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000726:	187b      	adds	r3, r7, r1
 8000728:	2201      	movs	r2, #1
 800072a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072c:	187a      	adds	r2, r7, r1
 800072e:	2390      	movs	r3, #144	; 0x90
 8000730:	05db      	lsls	r3, r3, #23
 8000732:	0011      	movs	r1, r2
 8000734:	0018      	movs	r0, r3
 8000736:	f000 fa27 	bl	8000b88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	46bd      	mov	sp, r7
 800073e:	b00b      	add	sp, #44	; 0x2c
 8000740:	bd90      	pop	{r4, r7, pc}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	40013800 	.word	0x40013800
 8000748:	40021000 	.word	0x40021000

0800074c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000750:	e7fe      	b.n	8000750 <NMI_Handler+0x4>

08000752 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000752:	b580      	push	{r7, lr}
 8000754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000756:	e7fe      	b.n	8000756 <HardFault_Handler+0x4>

08000758 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800075c:	46c0      	nop			; (mov r8, r8)
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}

08000762 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000762:	b580      	push	{r7, lr}
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000770:	f000 f916 	bl	80009a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000774:	46c0      	nop			; (mov r8, r8)
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}

0800077a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800077a:	b580      	push	{r7, lr}
 800077c:	b086      	sub	sp, #24
 800077e:	af00      	add	r7, sp, #0
 8000780:	60f8      	str	r0, [r7, #12]
 8000782:	60b9      	str	r1, [r7, #8]
 8000784:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000786:	2300      	movs	r3, #0
 8000788:	617b      	str	r3, [r7, #20]
 800078a:	e00a      	b.n	80007a2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800078c:	e000      	b.n	8000790 <_read+0x16>
 800078e:	bf00      	nop
 8000790:	0001      	movs	r1, r0
 8000792:	68bb      	ldr	r3, [r7, #8]
 8000794:	1c5a      	adds	r2, r3, #1
 8000796:	60ba      	str	r2, [r7, #8]
 8000798:	b2ca      	uxtb	r2, r1
 800079a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	3301      	adds	r3, #1
 80007a0:	617b      	str	r3, [r7, #20]
 80007a2:	697a      	ldr	r2, [r7, #20]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	429a      	cmp	r2, r3
 80007a8:	dbf0      	blt.n	800078c <_read+0x12>
  }

  return len;
 80007aa:	687b      	ldr	r3, [r7, #4]
}
 80007ac:	0018      	movs	r0, r3
 80007ae:	46bd      	mov	sp, r7
 80007b0:	b006      	add	sp, #24
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b086      	sub	sp, #24
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	60f8      	str	r0, [r7, #12]
 80007bc:	60b9      	str	r1, [r7, #8]
 80007be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]
 80007c4:	e009      	b.n	80007da <_write+0x26>
  {
    __io_putchar(*ptr++);
 80007c6:	68bb      	ldr	r3, [r7, #8]
 80007c8:	1c5a      	adds	r2, r3, #1
 80007ca:	60ba      	str	r2, [r7, #8]
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	0018      	movs	r0, r3
 80007d0:	e000      	b.n	80007d4 <_write+0x20>
 80007d2:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	3301      	adds	r3, #1
 80007d8:	617b      	str	r3, [r7, #20]
 80007da:	697a      	ldr	r2, [r7, #20]
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	429a      	cmp	r2, r3
 80007e0:	dbf1      	blt.n	80007c6 <_write+0x12>
  }
  return len;
 80007e2:	687b      	ldr	r3, [r7, #4]
}
 80007e4:	0018      	movs	r0, r3
 80007e6:	46bd      	mov	sp, r7
 80007e8:	b006      	add	sp, #24
 80007ea:	bd80      	pop	{r7, pc}

080007ec <_close>:

int _close(int file)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80007f4:	2301      	movs	r3, #1
 80007f6:	425b      	negs	r3, r3
}
 80007f8:	0018      	movs	r0, r3
 80007fa:	46bd      	mov	sp, r7
 80007fc:	b002      	add	sp, #8
 80007fe:	bd80      	pop	{r7, pc}

08000800 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
 8000808:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	2280      	movs	r2, #128	; 0x80
 800080e:	0192      	lsls	r2, r2, #6
 8000810:	605a      	str	r2, [r3, #4]
  return 0;
 8000812:	2300      	movs	r3, #0
}
 8000814:	0018      	movs	r0, r3
 8000816:	46bd      	mov	sp, r7
 8000818:	b002      	add	sp, #8
 800081a:	bd80      	pop	{r7, pc}

0800081c <_isatty>:

int _isatty(int file)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000824:	2301      	movs	r3, #1
}
 8000826:	0018      	movs	r0, r3
 8000828:	46bd      	mov	sp, r7
 800082a:	b002      	add	sp, #8
 800082c:	bd80      	pop	{r7, pc}

0800082e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800082e:	b580      	push	{r7, lr}
 8000830:	b084      	sub	sp, #16
 8000832:	af00      	add	r7, sp, #0
 8000834:	60f8      	str	r0, [r7, #12]
 8000836:	60b9      	str	r1, [r7, #8]
 8000838:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800083a:	2300      	movs	r3, #0
}
 800083c:	0018      	movs	r0, r3
 800083e:	46bd      	mov	sp, r7
 8000840:	b004      	add	sp, #16
 8000842:	bd80      	pop	{r7, pc}

08000844 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b086      	sub	sp, #24
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800084c:	4a14      	ldr	r2, [pc, #80]	; (80008a0 <_sbrk+0x5c>)
 800084e:	4b15      	ldr	r3, [pc, #84]	; (80008a4 <_sbrk+0x60>)
 8000850:	1ad3      	subs	r3, r2, r3
 8000852:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000858:	4b13      	ldr	r3, [pc, #76]	; (80008a8 <_sbrk+0x64>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d102      	bne.n	8000866 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000860:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <_sbrk+0x64>)
 8000862:	4a12      	ldr	r2, [pc, #72]	; (80008ac <_sbrk+0x68>)
 8000864:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000866:	4b10      	ldr	r3, [pc, #64]	; (80008a8 <_sbrk+0x64>)
 8000868:	681a      	ldr	r2, [r3, #0]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	18d3      	adds	r3, r2, r3
 800086e:	693a      	ldr	r2, [r7, #16]
 8000870:	429a      	cmp	r2, r3
 8000872:	d207      	bcs.n	8000884 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000874:	f002 fa6a 	bl	8002d4c <__errno>
 8000878:	0003      	movs	r3, r0
 800087a:	220c      	movs	r2, #12
 800087c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800087e:	2301      	movs	r3, #1
 8000880:	425b      	negs	r3, r3
 8000882:	e009      	b.n	8000898 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000884:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <_sbrk+0x64>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800088a:	4b07      	ldr	r3, [pc, #28]	; (80008a8 <_sbrk+0x64>)
 800088c:	681a      	ldr	r2, [r3, #0]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	18d2      	adds	r2, r2, r3
 8000892:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <_sbrk+0x64>)
 8000894:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000896:	68fb      	ldr	r3, [r7, #12]
}
 8000898:	0018      	movs	r0, r3
 800089a:	46bd      	mov	sp, r7
 800089c:	b006      	add	sp, #24
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20002000 	.word	0x20002000
 80008a4:	00000400 	.word	0x00000400
 80008a8:	2000012c 	.word	0x2000012c
 80008ac:	20000280 	.word	0x20000280

080008b0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80008b4:	46c0      	nop			; (mov r8, r8)
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
	...

080008bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008bc:	480d      	ldr	r0, [pc, #52]	; (80008f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008be:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 80008c0:	f7ff fff6 	bl	80008b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008c4:	480c      	ldr	r0, [pc, #48]	; (80008f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80008c6:	490d      	ldr	r1, [pc, #52]	; (80008fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80008c8:	4a0d      	ldr	r2, [pc, #52]	; (8000900 <LoopForever+0xe>)
  movs r3, #0
 80008ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008cc:	e002      	b.n	80008d4 <LoopCopyDataInit>

080008ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008d2:	3304      	adds	r3, #4

080008d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008d8:	d3f9      	bcc.n	80008ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008da:	4a0a      	ldr	r2, [pc, #40]	; (8000904 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008dc:	4c0a      	ldr	r4, [pc, #40]	; (8000908 <LoopForever+0x16>)
  movs r3, #0
 80008de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008e0:	e001      	b.n	80008e6 <LoopFillZerobss>

080008e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008e4:	3204      	adds	r2, #4

080008e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008e8:	d3fb      	bcc.n	80008e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008ea:	f002 fa35 	bl	8002d58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008ee:	f7ff fca9 	bl	8000244 <main>

080008f2 <LoopForever>:

LoopForever:
    b LoopForever
 80008f2:	e7fe      	b.n	80008f2 <LoopForever>
  ldr   r0, =_estack
 80008f4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80008f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008fc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000900:	08003d6c 	.word	0x08003d6c
  ldr r2, =_sbss
 8000904:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000908:	20000280 	.word	0x20000280

0800090c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800090c:	e7fe      	b.n	800090c <ADC1_COMP_IRQHandler>
	...

08000910 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000914:	4b07      	ldr	r3, [pc, #28]	; (8000934 <HAL_Init+0x24>)
 8000916:	681a      	ldr	r2, [r3, #0]
 8000918:	4b06      	ldr	r3, [pc, #24]	; (8000934 <HAL_Init+0x24>)
 800091a:	2110      	movs	r1, #16
 800091c:	430a      	orrs	r2, r1
 800091e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000920:	2000      	movs	r0, #0
 8000922:	f000 f809 	bl	8000938 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000926:	f7ff fe87 	bl	8000638 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800092a:	2300      	movs	r3, #0
}
 800092c:	0018      	movs	r0, r3
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	40022000 	.word	0x40022000

08000938 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000938:	b590      	push	{r4, r7, lr}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000940:	4b14      	ldr	r3, [pc, #80]	; (8000994 <HAL_InitTick+0x5c>)
 8000942:	681c      	ldr	r4, [r3, #0]
 8000944:	4b14      	ldr	r3, [pc, #80]	; (8000998 <HAL_InitTick+0x60>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	0019      	movs	r1, r3
 800094a:	23fa      	movs	r3, #250	; 0xfa
 800094c:	0098      	lsls	r0, r3, #2
 800094e:	f7ff fbed 	bl	800012c <__udivsi3>
 8000952:	0003      	movs	r3, r0
 8000954:	0019      	movs	r1, r3
 8000956:	0020      	movs	r0, r4
 8000958:	f7ff fbe8 	bl	800012c <__udivsi3>
 800095c:	0003      	movs	r3, r0
 800095e:	0018      	movs	r0, r3
 8000960:	f000 f905 	bl	8000b6e <HAL_SYSTICK_Config>
 8000964:	1e03      	subs	r3, r0, #0
 8000966:	d001      	beq.n	800096c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000968:	2301      	movs	r3, #1
 800096a:	e00f      	b.n	800098c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2b03      	cmp	r3, #3
 8000970:	d80b      	bhi.n	800098a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000972:	6879      	ldr	r1, [r7, #4]
 8000974:	2301      	movs	r3, #1
 8000976:	425b      	negs	r3, r3
 8000978:	2200      	movs	r2, #0
 800097a:	0018      	movs	r0, r3
 800097c:	f000 f8e2 	bl	8000b44 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <HAL_InitTick+0x64>)
 8000982:	687a      	ldr	r2, [r7, #4]
 8000984:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000986:	2300      	movs	r3, #0
 8000988:	e000      	b.n	800098c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800098a:	2301      	movs	r3, #1
}
 800098c:	0018      	movs	r0, r3
 800098e:	46bd      	mov	sp, r7
 8000990:	b003      	add	sp, #12
 8000992:	bd90      	pop	{r4, r7, pc}
 8000994:	20000000 	.word	0x20000000
 8000998:	20000008 	.word	0x20000008
 800099c:	20000004 	.word	0x20000004

080009a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009a4:	4b05      	ldr	r3, [pc, #20]	; (80009bc <HAL_IncTick+0x1c>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	001a      	movs	r2, r3
 80009aa:	4b05      	ldr	r3, [pc, #20]	; (80009c0 <HAL_IncTick+0x20>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	18d2      	adds	r2, r2, r3
 80009b0:	4b03      	ldr	r3, [pc, #12]	; (80009c0 <HAL_IncTick+0x20>)
 80009b2:	601a      	str	r2, [r3, #0]
}
 80009b4:	46c0      	nop			; (mov r8, r8)
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	46c0      	nop			; (mov r8, r8)
 80009bc:	20000008 	.word	0x20000008
 80009c0:	20000130 	.word	0x20000130

080009c4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  return uwTick;
 80009c8:	4b02      	ldr	r3, [pc, #8]	; (80009d4 <HAL_GetTick+0x10>)
 80009ca:	681b      	ldr	r3, [r3, #0]
}
 80009cc:	0018      	movs	r0, r3
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	46c0      	nop			; (mov r8, r8)
 80009d4:	20000130 	.word	0x20000130

080009d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009e0:	f7ff fff0 	bl	80009c4 <HAL_GetTick>
 80009e4:	0003      	movs	r3, r0
 80009e6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	3301      	adds	r3, #1
 80009f0:	d005      	beq.n	80009fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009f2:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <HAL_Delay+0x44>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	001a      	movs	r2, r3
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	189b      	adds	r3, r3, r2
 80009fc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	f7ff ffe0 	bl	80009c4 <HAL_GetTick>
 8000a04:	0002      	movs	r2, r0
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	1ad3      	subs	r3, r2, r3
 8000a0a:	68fa      	ldr	r2, [r7, #12]
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	d8f7      	bhi.n	8000a00 <HAL_Delay+0x28>
  {
  }
}
 8000a10:	46c0      	nop			; (mov r8, r8)
 8000a12:	46c0      	nop			; (mov r8, r8)
 8000a14:	46bd      	mov	sp, r7
 8000a16:	b004      	add	sp, #16
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	46c0      	nop			; (mov r8, r8)
 8000a1c:	20000008 	.word	0x20000008

08000a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a20:	b590      	push	{r4, r7, lr}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	0002      	movs	r2, r0
 8000a28:	6039      	str	r1, [r7, #0]
 8000a2a:	1dfb      	adds	r3, r7, #7
 8000a2c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a2e:	1dfb      	adds	r3, r7, #7
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	2b7f      	cmp	r3, #127	; 0x7f
 8000a34:	d828      	bhi.n	8000a88 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a36:	4a2f      	ldr	r2, [pc, #188]	; (8000af4 <__NVIC_SetPriority+0xd4>)
 8000a38:	1dfb      	adds	r3, r7, #7
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	b25b      	sxtb	r3, r3
 8000a3e:	089b      	lsrs	r3, r3, #2
 8000a40:	33c0      	adds	r3, #192	; 0xc0
 8000a42:	009b      	lsls	r3, r3, #2
 8000a44:	589b      	ldr	r3, [r3, r2]
 8000a46:	1dfa      	adds	r2, r7, #7
 8000a48:	7812      	ldrb	r2, [r2, #0]
 8000a4a:	0011      	movs	r1, r2
 8000a4c:	2203      	movs	r2, #3
 8000a4e:	400a      	ands	r2, r1
 8000a50:	00d2      	lsls	r2, r2, #3
 8000a52:	21ff      	movs	r1, #255	; 0xff
 8000a54:	4091      	lsls	r1, r2
 8000a56:	000a      	movs	r2, r1
 8000a58:	43d2      	mvns	r2, r2
 8000a5a:	401a      	ands	r2, r3
 8000a5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	019b      	lsls	r3, r3, #6
 8000a62:	22ff      	movs	r2, #255	; 0xff
 8000a64:	401a      	ands	r2, r3
 8000a66:	1dfb      	adds	r3, r7, #7
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	4003      	ands	r3, r0
 8000a70:	00db      	lsls	r3, r3, #3
 8000a72:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a74:	481f      	ldr	r0, [pc, #124]	; (8000af4 <__NVIC_SetPriority+0xd4>)
 8000a76:	1dfb      	adds	r3, r7, #7
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	b25b      	sxtb	r3, r3
 8000a7c:	089b      	lsrs	r3, r3, #2
 8000a7e:	430a      	orrs	r2, r1
 8000a80:	33c0      	adds	r3, #192	; 0xc0
 8000a82:	009b      	lsls	r3, r3, #2
 8000a84:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a86:	e031      	b.n	8000aec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a88:	4a1b      	ldr	r2, [pc, #108]	; (8000af8 <__NVIC_SetPriority+0xd8>)
 8000a8a:	1dfb      	adds	r3, r7, #7
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	0019      	movs	r1, r3
 8000a90:	230f      	movs	r3, #15
 8000a92:	400b      	ands	r3, r1
 8000a94:	3b08      	subs	r3, #8
 8000a96:	089b      	lsrs	r3, r3, #2
 8000a98:	3306      	adds	r3, #6
 8000a9a:	009b      	lsls	r3, r3, #2
 8000a9c:	18d3      	adds	r3, r2, r3
 8000a9e:	3304      	adds	r3, #4
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	1dfa      	adds	r2, r7, #7
 8000aa4:	7812      	ldrb	r2, [r2, #0]
 8000aa6:	0011      	movs	r1, r2
 8000aa8:	2203      	movs	r2, #3
 8000aaa:	400a      	ands	r2, r1
 8000aac:	00d2      	lsls	r2, r2, #3
 8000aae:	21ff      	movs	r1, #255	; 0xff
 8000ab0:	4091      	lsls	r1, r2
 8000ab2:	000a      	movs	r2, r1
 8000ab4:	43d2      	mvns	r2, r2
 8000ab6:	401a      	ands	r2, r3
 8000ab8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	019b      	lsls	r3, r3, #6
 8000abe:	22ff      	movs	r2, #255	; 0xff
 8000ac0:	401a      	ands	r2, r3
 8000ac2:	1dfb      	adds	r3, r7, #7
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	2303      	movs	r3, #3
 8000aca:	4003      	ands	r3, r0
 8000acc:	00db      	lsls	r3, r3, #3
 8000ace:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ad0:	4809      	ldr	r0, [pc, #36]	; (8000af8 <__NVIC_SetPriority+0xd8>)
 8000ad2:	1dfb      	adds	r3, r7, #7
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	001c      	movs	r4, r3
 8000ad8:	230f      	movs	r3, #15
 8000ada:	4023      	ands	r3, r4
 8000adc:	3b08      	subs	r3, #8
 8000ade:	089b      	lsrs	r3, r3, #2
 8000ae0:	430a      	orrs	r2, r1
 8000ae2:	3306      	adds	r3, #6
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	18c3      	adds	r3, r0, r3
 8000ae8:	3304      	adds	r3, #4
 8000aea:	601a      	str	r2, [r3, #0]
}
 8000aec:	46c0      	nop			; (mov r8, r8)
 8000aee:	46bd      	mov	sp, r7
 8000af0:	b003      	add	sp, #12
 8000af2:	bd90      	pop	{r4, r7, pc}
 8000af4:	e000e100 	.word	0xe000e100
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	1e5a      	subs	r2, r3, #1
 8000b08:	2380      	movs	r3, #128	; 0x80
 8000b0a:	045b      	lsls	r3, r3, #17
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d301      	bcc.n	8000b14 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b10:	2301      	movs	r3, #1
 8000b12:	e010      	b.n	8000b36 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b14:	4b0a      	ldr	r3, [pc, #40]	; (8000b40 <SysTick_Config+0x44>)
 8000b16:	687a      	ldr	r2, [r7, #4]
 8000b18:	3a01      	subs	r2, #1
 8000b1a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	425b      	negs	r3, r3
 8000b20:	2103      	movs	r1, #3
 8000b22:	0018      	movs	r0, r3
 8000b24:	f7ff ff7c 	bl	8000a20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b28:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <SysTick_Config+0x44>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b2e:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <SysTick_Config+0x44>)
 8000b30:	2207      	movs	r2, #7
 8000b32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b34:	2300      	movs	r3, #0
}
 8000b36:	0018      	movs	r0, r3
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	b002      	add	sp, #8
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	e000e010 	.word	0xe000e010

08000b44 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60b9      	str	r1, [r7, #8]
 8000b4c:	607a      	str	r2, [r7, #4]
 8000b4e:	210f      	movs	r1, #15
 8000b50:	187b      	adds	r3, r7, r1
 8000b52:	1c02      	adds	r2, r0, #0
 8000b54:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b56:	68ba      	ldr	r2, [r7, #8]
 8000b58:	187b      	adds	r3, r7, r1
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	b25b      	sxtb	r3, r3
 8000b5e:	0011      	movs	r1, r2
 8000b60:	0018      	movs	r0, r3
 8000b62:	f7ff ff5d 	bl	8000a20 <__NVIC_SetPriority>
}
 8000b66:	46c0      	nop			; (mov r8, r8)
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	b004      	add	sp, #16
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b082      	sub	sp, #8
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	0018      	movs	r0, r3
 8000b7a:	f7ff ffbf 	bl	8000afc <SysTick_Config>
 8000b7e:	0003      	movs	r3, r0
}
 8000b80:	0018      	movs	r0, r3
 8000b82:	46bd      	mov	sp, r7
 8000b84:	b002      	add	sp, #8
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b96:	e14f      	b.n	8000e38 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	697a      	ldr	r2, [r7, #20]
 8000ba0:	4091      	lsls	r1, r2
 8000ba2:	000a      	movs	r2, r1
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d100      	bne.n	8000bb0 <HAL_GPIO_Init+0x28>
 8000bae:	e140      	b.n	8000e32 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	2203      	movs	r2, #3
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d005      	beq.n	8000bc8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	2203      	movs	r2, #3
 8000bc2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000bc4:	2b02      	cmp	r3, #2
 8000bc6:	d130      	bne.n	8000c2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	689b      	ldr	r3, [r3, #8]
 8000bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	2203      	movs	r2, #3
 8000bd4:	409a      	lsls	r2, r3
 8000bd6:	0013      	movs	r3, r2
 8000bd8:	43da      	mvns	r2, r3
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	4013      	ands	r3, r2
 8000bde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	68da      	ldr	r2, [r3, #12]
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	005b      	lsls	r3, r3, #1
 8000be8:	409a      	lsls	r2, r3
 8000bea:	0013      	movs	r3, r2
 8000bec:	693a      	ldr	r2, [r7, #16]
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	693a      	ldr	r2, [r7, #16]
 8000bf6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bfe:	2201      	movs	r2, #1
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	409a      	lsls	r2, r3
 8000c04:	0013      	movs	r3, r2
 8000c06:	43da      	mvns	r2, r3
 8000c08:	693b      	ldr	r3, [r7, #16]
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	091b      	lsrs	r3, r3, #4
 8000c14:	2201      	movs	r2, #1
 8000c16:	401a      	ands	r2, r3
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	409a      	lsls	r2, r3
 8000c1c:	0013      	movs	r3, r2
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	2203      	movs	r2, #3
 8000c30:	4013      	ands	r3, r2
 8000c32:	2b03      	cmp	r3, #3
 8000c34:	d017      	beq.n	8000c66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	68db      	ldr	r3, [r3, #12]
 8000c3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	2203      	movs	r2, #3
 8000c42:	409a      	lsls	r2, r3
 8000c44:	0013      	movs	r3, r2
 8000c46:	43da      	mvns	r2, r3
 8000c48:	693b      	ldr	r3, [r7, #16]
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	689a      	ldr	r2, [r3, #8]
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	409a      	lsls	r2, r3
 8000c58:	0013      	movs	r3, r2
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	2203      	movs	r2, #3
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	2b02      	cmp	r3, #2
 8000c70:	d123      	bne.n	8000cba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	08da      	lsrs	r2, r3, #3
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	3208      	adds	r2, #8
 8000c7a:	0092      	lsls	r2, r2, #2
 8000c7c:	58d3      	ldr	r3, [r2, r3]
 8000c7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	2207      	movs	r2, #7
 8000c84:	4013      	ands	r3, r2
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	220f      	movs	r2, #15
 8000c8a:	409a      	lsls	r2, r3
 8000c8c:	0013      	movs	r3, r2
 8000c8e:	43da      	mvns	r2, r3
 8000c90:	693b      	ldr	r3, [r7, #16]
 8000c92:	4013      	ands	r3, r2
 8000c94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	691a      	ldr	r2, [r3, #16]
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	2107      	movs	r1, #7
 8000c9e:	400b      	ands	r3, r1
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	409a      	lsls	r2, r3
 8000ca4:	0013      	movs	r3, r2
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	08da      	lsrs	r2, r3, #3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	3208      	adds	r2, #8
 8000cb4:	0092      	lsls	r2, r2, #2
 8000cb6:	6939      	ldr	r1, [r7, #16]
 8000cb8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	2203      	movs	r2, #3
 8000cc6:	409a      	lsls	r2, r3
 8000cc8:	0013      	movs	r3, r2
 8000cca:	43da      	mvns	r2, r3
 8000ccc:	693b      	ldr	r3, [r7, #16]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	2203      	movs	r2, #3
 8000cd8:	401a      	ands	r2, r3
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	005b      	lsls	r3, r3, #1
 8000cde:	409a      	lsls	r2, r3
 8000ce0:	0013      	movs	r3, r2
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685a      	ldr	r2, [r3, #4]
 8000cf2:	23c0      	movs	r3, #192	; 0xc0
 8000cf4:	029b      	lsls	r3, r3, #10
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	d100      	bne.n	8000cfc <HAL_GPIO_Init+0x174>
 8000cfa:	e09a      	b.n	8000e32 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cfc:	4b54      	ldr	r3, [pc, #336]	; (8000e50 <HAL_GPIO_Init+0x2c8>)
 8000cfe:	699a      	ldr	r2, [r3, #24]
 8000d00:	4b53      	ldr	r3, [pc, #332]	; (8000e50 <HAL_GPIO_Init+0x2c8>)
 8000d02:	2101      	movs	r1, #1
 8000d04:	430a      	orrs	r2, r1
 8000d06:	619a      	str	r2, [r3, #24]
 8000d08:	4b51      	ldr	r3, [pc, #324]	; (8000e50 <HAL_GPIO_Init+0x2c8>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	4013      	ands	r3, r2
 8000d10:	60bb      	str	r3, [r7, #8]
 8000d12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d14:	4a4f      	ldr	r2, [pc, #316]	; (8000e54 <HAL_GPIO_Init+0x2cc>)
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	089b      	lsrs	r3, r3, #2
 8000d1a:	3302      	adds	r3, #2
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	589b      	ldr	r3, [r3, r2]
 8000d20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	2203      	movs	r2, #3
 8000d26:	4013      	ands	r3, r2
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	220f      	movs	r2, #15
 8000d2c:	409a      	lsls	r2, r3
 8000d2e:	0013      	movs	r3, r2
 8000d30:	43da      	mvns	r2, r3
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	4013      	ands	r3, r2
 8000d36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d38:	687a      	ldr	r2, [r7, #4]
 8000d3a:	2390      	movs	r3, #144	; 0x90
 8000d3c:	05db      	lsls	r3, r3, #23
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	d013      	beq.n	8000d6a <HAL_GPIO_Init+0x1e2>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4a44      	ldr	r2, [pc, #272]	; (8000e58 <HAL_GPIO_Init+0x2d0>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d00d      	beq.n	8000d66 <HAL_GPIO_Init+0x1de>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4a43      	ldr	r2, [pc, #268]	; (8000e5c <HAL_GPIO_Init+0x2d4>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d007      	beq.n	8000d62 <HAL_GPIO_Init+0x1da>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4a42      	ldr	r2, [pc, #264]	; (8000e60 <HAL_GPIO_Init+0x2d8>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d101      	bne.n	8000d5e <HAL_GPIO_Init+0x1d6>
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	e006      	b.n	8000d6c <HAL_GPIO_Init+0x1e4>
 8000d5e:	2305      	movs	r3, #5
 8000d60:	e004      	b.n	8000d6c <HAL_GPIO_Init+0x1e4>
 8000d62:	2302      	movs	r3, #2
 8000d64:	e002      	b.n	8000d6c <HAL_GPIO_Init+0x1e4>
 8000d66:	2301      	movs	r3, #1
 8000d68:	e000      	b.n	8000d6c <HAL_GPIO_Init+0x1e4>
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	697a      	ldr	r2, [r7, #20]
 8000d6e:	2103      	movs	r1, #3
 8000d70:	400a      	ands	r2, r1
 8000d72:	0092      	lsls	r2, r2, #2
 8000d74:	4093      	lsls	r3, r2
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d7c:	4935      	ldr	r1, [pc, #212]	; (8000e54 <HAL_GPIO_Init+0x2cc>)
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	089b      	lsrs	r3, r3, #2
 8000d82:	3302      	adds	r3, #2
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d8a:	4b36      	ldr	r3, [pc, #216]	; (8000e64 <HAL_GPIO_Init+0x2dc>)
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	43da      	mvns	r2, r3
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	4013      	ands	r3, r2
 8000d98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685a      	ldr	r2, [r3, #4]
 8000d9e:	2380      	movs	r3, #128	; 0x80
 8000da0:	035b      	lsls	r3, r3, #13
 8000da2:	4013      	ands	r3, r2
 8000da4:	d003      	beq.n	8000dae <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000dae:	4b2d      	ldr	r3, [pc, #180]	; (8000e64 <HAL_GPIO_Init+0x2dc>)
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000db4:	4b2b      	ldr	r3, [pc, #172]	; (8000e64 <HAL_GPIO_Init+0x2dc>)
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	43da      	mvns	r2, r3
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685a      	ldr	r2, [r3, #4]
 8000dc8:	2380      	movs	r3, #128	; 0x80
 8000dca:	039b      	lsls	r3, r3, #14
 8000dcc:	4013      	ands	r3, r2
 8000dce:	d003      	beq.n	8000dd8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000dd8:	4b22      	ldr	r3, [pc, #136]	; (8000e64 <HAL_GPIO_Init+0x2dc>)
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000dde:	4b21      	ldr	r3, [pc, #132]	; (8000e64 <HAL_GPIO_Init+0x2dc>)
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	43da      	mvns	r2, r3
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	4013      	ands	r3, r2
 8000dec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685a      	ldr	r2, [r3, #4]
 8000df2:	2380      	movs	r3, #128	; 0x80
 8000df4:	029b      	lsls	r3, r3, #10
 8000df6:	4013      	ands	r3, r2
 8000df8:	d003      	beq.n	8000e02 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e02:	4b18      	ldr	r3, [pc, #96]	; (8000e64 <HAL_GPIO_Init+0x2dc>)
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000e08:	4b16      	ldr	r3, [pc, #88]	; (8000e64 <HAL_GPIO_Init+0x2dc>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	43da      	mvns	r2, r3
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	4013      	ands	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685a      	ldr	r2, [r3, #4]
 8000e1c:	2380      	movs	r3, #128	; 0x80
 8000e1e:	025b      	lsls	r3, r3, #9
 8000e20:	4013      	ands	r3, r2
 8000e22:	d003      	beq.n	8000e2c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e2c:	4b0d      	ldr	r3, [pc, #52]	; (8000e64 <HAL_GPIO_Init+0x2dc>)
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	3301      	adds	r3, #1
 8000e36:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	40da      	lsrs	r2, r3
 8000e40:	1e13      	subs	r3, r2, #0
 8000e42:	d000      	beq.n	8000e46 <HAL_GPIO_Init+0x2be>
 8000e44:	e6a8      	b.n	8000b98 <HAL_GPIO_Init+0x10>
  } 
}
 8000e46:	46c0      	nop			; (mov r8, r8)
 8000e48:	46c0      	nop			; (mov r8, r8)
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	b006      	add	sp, #24
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40021000 	.word	0x40021000
 8000e54:	40010000 	.word	0x40010000
 8000e58:	48000400 	.word	0x48000400
 8000e5c:	48000800 	.word	0x48000800
 8000e60:	48000c00 	.word	0x48000c00
 8000e64:	40010400 	.word	0x40010400

08000e68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	0008      	movs	r0, r1
 8000e72:	0011      	movs	r1, r2
 8000e74:	1cbb      	adds	r3, r7, #2
 8000e76:	1c02      	adds	r2, r0, #0
 8000e78:	801a      	strh	r2, [r3, #0]
 8000e7a:	1c7b      	adds	r3, r7, #1
 8000e7c:	1c0a      	adds	r2, r1, #0
 8000e7e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e80:	1c7b      	adds	r3, r7, #1
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d004      	beq.n	8000e92 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e88:	1cbb      	adds	r3, r7, #2
 8000e8a:	881a      	ldrh	r2, [r3, #0]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e90:	e003      	b.n	8000e9a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e92:	1cbb      	adds	r3, r7, #2
 8000e94:	881a      	ldrh	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e9a:	46c0      	nop			; (mov r8, r8)
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	b002      	add	sp, #8
 8000ea0:	bd80      	pop	{r7, pc}
	...

08000ea4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b088      	sub	sp, #32
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d101      	bne.n	8000eb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e301      	b.n	80014ba <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2201      	movs	r2, #1
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	d100      	bne.n	8000ec2 <HAL_RCC_OscConfig+0x1e>
 8000ec0:	e08d      	b.n	8000fde <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ec2:	4bc3      	ldr	r3, [pc, #780]	; (80011d0 <HAL_RCC_OscConfig+0x32c>)
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	220c      	movs	r2, #12
 8000ec8:	4013      	ands	r3, r2
 8000eca:	2b04      	cmp	r3, #4
 8000ecc:	d00e      	beq.n	8000eec <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ece:	4bc0      	ldr	r3, [pc, #768]	; (80011d0 <HAL_RCC_OscConfig+0x32c>)
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	220c      	movs	r2, #12
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	2b08      	cmp	r3, #8
 8000ed8:	d116      	bne.n	8000f08 <HAL_RCC_OscConfig+0x64>
 8000eda:	4bbd      	ldr	r3, [pc, #756]	; (80011d0 <HAL_RCC_OscConfig+0x32c>)
 8000edc:	685a      	ldr	r2, [r3, #4]
 8000ede:	2380      	movs	r3, #128	; 0x80
 8000ee0:	025b      	lsls	r3, r3, #9
 8000ee2:	401a      	ands	r2, r3
 8000ee4:	2380      	movs	r3, #128	; 0x80
 8000ee6:	025b      	lsls	r3, r3, #9
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d10d      	bne.n	8000f08 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eec:	4bb8      	ldr	r3, [pc, #736]	; (80011d0 <HAL_RCC_OscConfig+0x32c>)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	2380      	movs	r3, #128	; 0x80
 8000ef2:	029b      	lsls	r3, r3, #10
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	d100      	bne.n	8000efa <HAL_RCC_OscConfig+0x56>
 8000ef8:	e070      	b.n	8000fdc <HAL_RCC_OscConfig+0x138>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d000      	beq.n	8000f04 <HAL_RCC_OscConfig+0x60>
 8000f02:	e06b      	b.n	8000fdc <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000f04:	2301      	movs	r3, #1
 8000f06:	e2d8      	b.n	80014ba <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d107      	bne.n	8000f20 <HAL_RCC_OscConfig+0x7c>
 8000f10:	4baf      	ldr	r3, [pc, #700]	; (80011d0 <HAL_RCC_OscConfig+0x32c>)
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	4bae      	ldr	r3, [pc, #696]	; (80011d0 <HAL_RCC_OscConfig+0x32c>)
 8000f16:	2180      	movs	r1, #128	; 0x80
 8000f18:	0249      	lsls	r1, r1, #9
 8000f1a:	430a      	orrs	r2, r1
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	e02f      	b.n	8000f80 <HAL_RCC_OscConfig+0xdc>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d10c      	bne.n	8000f42 <HAL_RCC_OscConfig+0x9e>
 8000f28:	4ba9      	ldr	r3, [pc, #676]	; (80011d0 <HAL_RCC_OscConfig+0x32c>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	4ba8      	ldr	r3, [pc, #672]	; (80011d0 <HAL_RCC_OscConfig+0x32c>)
 8000f2e:	49a9      	ldr	r1, [pc, #676]	; (80011d4 <HAL_RCC_OscConfig+0x330>)
 8000f30:	400a      	ands	r2, r1
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	4ba6      	ldr	r3, [pc, #664]	; (80011d0 <HAL_RCC_OscConfig+0x32c>)
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	4ba5      	ldr	r3, [pc, #660]	; (80011d0 <HAL_RCC_OscConfig+0x32c>)
 8000f3a:	49a7      	ldr	r1, [pc, #668]	; (80011d8 <HAL_RCC_OscConfig+0x334>)
 8000f3c:	400a      	ands	r2, r1
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	e01e      	b.n	8000f80 <HAL_RCC_OscConfig+0xdc>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	2b05      	cmp	r3, #5
 8000f48:	d10e      	bne.n	8000f68 <HAL_RCC_OscConfig+0xc4>
 8000f4a:	4ba1      	ldr	r3, [pc, #644]	; (80011d0 <HAL_RCC_OscConfig+0x32c>)
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	4ba0      	ldr	r3, [pc, #640]	; (80011d0 <HAL_RCC_OscConfig+0x32c>)
 8000f50:	2180      	movs	r1, #128	; 0x80
 8000f52:	02c9      	lsls	r1, r1, #11
 8000f54:	430a      	orrs	r2, r1
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	4b9d      	ldr	r3, [pc, #628]	; (80011d0 <HAL_RCC_OscConfig+0x32c>)
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	4b9c      	ldr	r3, [pc, #624]	; (80011d0 <HAL_RCC_OscConfig+0x32c>)
 8000f5e:	2180      	movs	r1, #128	; 0x80
 8000f60:	0249      	lsls	r1, r1, #9
 8000f62:	430a      	orrs	r2, r1
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	e00b      	b.n	8000f80 <HAL_RCC_OscConfig+0xdc>
 8000f68:	4b99      	ldr	r3, [pc, #612]	; (80011d0 <HAL_RCC_OscConfig+0x32c>)
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	4b98      	ldr	r3, [pc, #608]	; (80011d0 <HAL_RCC_OscConfig+0x32c>)
 8000f6e:	4999      	ldr	r1, [pc, #612]	; (80011d4 <HAL_RCC_OscConfig+0x330>)
 8000f70:	400a      	ands	r2, r1
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	4b96      	ldr	r3, [pc, #600]	; (80011d0 <HAL_RCC_OscConfig+0x32c>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	4b95      	ldr	r3, [pc, #596]	; (80011d0 <HAL_RCC_OscConfig+0x32c>)
 8000f7a:	4997      	ldr	r1, [pc, #604]	; (80011d8 <HAL_RCC_OscConfig+0x334>)
 8000f7c:	400a      	ands	r2, r1
 8000f7e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d014      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f88:	f7ff fd1c 	bl	80009c4 <HAL_GetTick>
 8000f8c:	0003      	movs	r3, r0
 8000f8e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f90:	e008      	b.n	8000fa4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f92:	f7ff fd17 	bl	80009c4 <HAL_GetTick>
 8000f96:	0002      	movs	r2, r0
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	2b64      	cmp	r3, #100	; 0x64
 8000f9e:	d901      	bls.n	8000fa4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	e28a      	b.n	80014ba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fa4:	4b8a      	ldr	r3, [pc, #552]	; (80011d0 <HAL_RCC_OscConfig+0x32c>)
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	2380      	movs	r3, #128	; 0x80
 8000faa:	029b      	lsls	r3, r3, #10
 8000fac:	4013      	ands	r3, r2
 8000fae:	d0f0      	beq.n	8000f92 <HAL_RCC_OscConfig+0xee>
 8000fb0:	e015      	b.n	8000fde <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb2:	f7ff fd07 	bl	80009c4 <HAL_GetTick>
 8000fb6:	0003      	movs	r3, r0
 8000fb8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fba:	e008      	b.n	8000fce <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fbc:	f7ff fd02 	bl	80009c4 <HAL_GetTick>
 8000fc0:	0002      	movs	r2, r0
 8000fc2:	69bb      	ldr	r3, [r7, #24]
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	2b64      	cmp	r3, #100	; 0x64
 8000fc8:	d901      	bls.n	8000fce <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	e275      	b.n	80014ba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fce:	4b80      	ldr	r3, [pc, #512]	; (80011d0 <HAL_RCC_OscConfig+0x32c>)
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	2380      	movs	r3, #128	; 0x80
 8000fd4:	029b      	lsls	r3, r3, #10
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	d1f0      	bne.n	8000fbc <HAL_RCC_OscConfig+0x118>
 8000fda:	e000      	b.n	8000fde <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fdc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	2202      	movs	r2, #2
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	d100      	bne.n	8000fea <HAL_RCC_OscConfig+0x146>
 8000fe8:	e069      	b.n	80010be <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000fea:	4b79      	ldr	r3, [pc, #484]	; (80011d0 <HAL_RCC_OscConfig+0x32c>)
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	220c      	movs	r2, #12
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	d00b      	beq.n	800100c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000ff4:	4b76      	ldr	r3, [pc, #472]	; (80011d0 <HAL_RCC_OscConfig+0x32c>)
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	220c      	movs	r2, #12
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	2b08      	cmp	r3, #8
 8000ffe:	d11c      	bne.n	800103a <HAL_RCC_OscConfig+0x196>
 8001000:	4b73      	ldr	r3, [pc, #460]	; (80011d0 <HAL_RCC_OscConfig+0x32c>)
 8001002:	685a      	ldr	r2, [r3, #4]
 8001004:	2380      	movs	r3, #128	; 0x80
 8001006:	025b      	lsls	r3, r3, #9
 8001008:	4013      	ands	r3, r2
 800100a:	d116      	bne.n	800103a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800100c:	4b70      	ldr	r3, [pc, #448]	; (80011d0 <HAL_RCC_OscConfig+0x32c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2202      	movs	r2, #2
 8001012:	4013      	ands	r3, r2
 8001014:	d005      	beq.n	8001022 <HAL_RCC_OscConfig+0x17e>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	68db      	ldr	r3, [r3, #12]
 800101a:	2b01      	cmp	r3, #1
 800101c:	d001      	beq.n	8001022 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e24b      	b.n	80014ba <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001022:	4b6b      	ldr	r3, [pc, #428]	; (80011d0 <HAL_RCC_OscConfig+0x32c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	22f8      	movs	r2, #248	; 0xf8
 8001028:	4393      	bics	r3, r2
 800102a:	0019      	movs	r1, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	691b      	ldr	r3, [r3, #16]
 8001030:	00da      	lsls	r2, r3, #3
 8001032:	4b67      	ldr	r3, [pc, #412]	; (80011d0 <HAL_RCC_OscConfig+0x32c>)
 8001034:	430a      	orrs	r2, r1
 8001036:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001038:	e041      	b.n	80010be <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	68db      	ldr	r3, [r3, #12]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d024      	beq.n	800108c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001042:	4b63      	ldr	r3, [pc, #396]	; (80011d0 <HAL_RCC_OscConfig+0x32c>)
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	4b62      	ldr	r3, [pc, #392]	; (80011d0 <HAL_RCC_OscConfig+0x32c>)
 8001048:	2101      	movs	r1, #1
 800104a:	430a      	orrs	r2, r1
 800104c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800104e:	f7ff fcb9 	bl	80009c4 <HAL_GetTick>
 8001052:	0003      	movs	r3, r0
 8001054:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001056:	e008      	b.n	800106a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001058:	f7ff fcb4 	bl	80009c4 <HAL_GetTick>
 800105c:	0002      	movs	r2, r0
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b02      	cmp	r3, #2
 8001064:	d901      	bls.n	800106a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e227      	b.n	80014ba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800106a:	4b59      	ldr	r3, [pc, #356]	; (80011d0 <HAL_RCC_OscConfig+0x32c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2202      	movs	r2, #2
 8001070:	4013      	ands	r3, r2
 8001072:	d0f1      	beq.n	8001058 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001074:	4b56      	ldr	r3, [pc, #344]	; (80011d0 <HAL_RCC_OscConfig+0x32c>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	22f8      	movs	r2, #248	; 0xf8
 800107a:	4393      	bics	r3, r2
 800107c:	0019      	movs	r1, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	691b      	ldr	r3, [r3, #16]
 8001082:	00da      	lsls	r2, r3, #3
 8001084:	4b52      	ldr	r3, [pc, #328]	; (80011d0 <HAL_RCC_OscConfig+0x32c>)
 8001086:	430a      	orrs	r2, r1
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	e018      	b.n	80010be <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800108c:	4b50      	ldr	r3, [pc, #320]	; (80011d0 <HAL_RCC_OscConfig+0x32c>)
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	4b4f      	ldr	r3, [pc, #316]	; (80011d0 <HAL_RCC_OscConfig+0x32c>)
 8001092:	2101      	movs	r1, #1
 8001094:	438a      	bics	r2, r1
 8001096:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001098:	f7ff fc94 	bl	80009c4 <HAL_GetTick>
 800109c:	0003      	movs	r3, r0
 800109e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010a0:	e008      	b.n	80010b4 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010a2:	f7ff fc8f 	bl	80009c4 <HAL_GetTick>
 80010a6:	0002      	movs	r2, r0
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d901      	bls.n	80010b4 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80010b0:	2303      	movs	r3, #3
 80010b2:	e202      	b.n	80014ba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010b4:	4b46      	ldr	r3, [pc, #280]	; (80011d0 <HAL_RCC_OscConfig+0x32c>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2202      	movs	r2, #2
 80010ba:	4013      	ands	r3, r2
 80010bc:	d1f1      	bne.n	80010a2 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	2208      	movs	r2, #8
 80010c4:	4013      	ands	r3, r2
 80010c6:	d036      	beq.n	8001136 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	69db      	ldr	r3, [r3, #28]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d019      	beq.n	8001104 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010d0:	4b3f      	ldr	r3, [pc, #252]	; (80011d0 <HAL_RCC_OscConfig+0x32c>)
 80010d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010d4:	4b3e      	ldr	r3, [pc, #248]	; (80011d0 <HAL_RCC_OscConfig+0x32c>)
 80010d6:	2101      	movs	r1, #1
 80010d8:	430a      	orrs	r2, r1
 80010da:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010dc:	f7ff fc72 	bl	80009c4 <HAL_GetTick>
 80010e0:	0003      	movs	r3, r0
 80010e2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010e4:	e008      	b.n	80010f8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010e6:	f7ff fc6d 	bl	80009c4 <HAL_GetTick>
 80010ea:	0002      	movs	r2, r0
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d901      	bls.n	80010f8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80010f4:	2303      	movs	r3, #3
 80010f6:	e1e0      	b.n	80014ba <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010f8:	4b35      	ldr	r3, [pc, #212]	; (80011d0 <HAL_RCC_OscConfig+0x32c>)
 80010fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fc:	2202      	movs	r2, #2
 80010fe:	4013      	ands	r3, r2
 8001100:	d0f1      	beq.n	80010e6 <HAL_RCC_OscConfig+0x242>
 8001102:	e018      	b.n	8001136 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001104:	4b32      	ldr	r3, [pc, #200]	; (80011d0 <HAL_RCC_OscConfig+0x32c>)
 8001106:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001108:	4b31      	ldr	r3, [pc, #196]	; (80011d0 <HAL_RCC_OscConfig+0x32c>)
 800110a:	2101      	movs	r1, #1
 800110c:	438a      	bics	r2, r1
 800110e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001110:	f7ff fc58 	bl	80009c4 <HAL_GetTick>
 8001114:	0003      	movs	r3, r0
 8001116:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001118:	e008      	b.n	800112c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800111a:	f7ff fc53 	bl	80009c4 <HAL_GetTick>
 800111e:	0002      	movs	r2, r0
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	2b02      	cmp	r3, #2
 8001126:	d901      	bls.n	800112c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001128:	2303      	movs	r3, #3
 800112a:	e1c6      	b.n	80014ba <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800112c:	4b28      	ldr	r3, [pc, #160]	; (80011d0 <HAL_RCC_OscConfig+0x32c>)
 800112e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001130:	2202      	movs	r2, #2
 8001132:	4013      	ands	r3, r2
 8001134:	d1f1      	bne.n	800111a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2204      	movs	r2, #4
 800113c:	4013      	ands	r3, r2
 800113e:	d100      	bne.n	8001142 <HAL_RCC_OscConfig+0x29e>
 8001140:	e0b4      	b.n	80012ac <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001142:	201f      	movs	r0, #31
 8001144:	183b      	adds	r3, r7, r0
 8001146:	2200      	movs	r2, #0
 8001148:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800114a:	4b21      	ldr	r3, [pc, #132]	; (80011d0 <HAL_RCC_OscConfig+0x32c>)
 800114c:	69da      	ldr	r2, [r3, #28]
 800114e:	2380      	movs	r3, #128	; 0x80
 8001150:	055b      	lsls	r3, r3, #21
 8001152:	4013      	ands	r3, r2
 8001154:	d110      	bne.n	8001178 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001156:	4b1e      	ldr	r3, [pc, #120]	; (80011d0 <HAL_RCC_OscConfig+0x32c>)
 8001158:	69da      	ldr	r2, [r3, #28]
 800115a:	4b1d      	ldr	r3, [pc, #116]	; (80011d0 <HAL_RCC_OscConfig+0x32c>)
 800115c:	2180      	movs	r1, #128	; 0x80
 800115e:	0549      	lsls	r1, r1, #21
 8001160:	430a      	orrs	r2, r1
 8001162:	61da      	str	r2, [r3, #28]
 8001164:	4b1a      	ldr	r3, [pc, #104]	; (80011d0 <HAL_RCC_OscConfig+0x32c>)
 8001166:	69da      	ldr	r2, [r3, #28]
 8001168:	2380      	movs	r3, #128	; 0x80
 800116a:	055b      	lsls	r3, r3, #21
 800116c:	4013      	ands	r3, r2
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001172:	183b      	adds	r3, r7, r0
 8001174:	2201      	movs	r2, #1
 8001176:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001178:	4b18      	ldr	r3, [pc, #96]	; (80011dc <HAL_RCC_OscConfig+0x338>)
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	2380      	movs	r3, #128	; 0x80
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	4013      	ands	r3, r2
 8001182:	d11a      	bne.n	80011ba <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001184:	4b15      	ldr	r3, [pc, #84]	; (80011dc <HAL_RCC_OscConfig+0x338>)
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	4b14      	ldr	r3, [pc, #80]	; (80011dc <HAL_RCC_OscConfig+0x338>)
 800118a:	2180      	movs	r1, #128	; 0x80
 800118c:	0049      	lsls	r1, r1, #1
 800118e:	430a      	orrs	r2, r1
 8001190:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001192:	f7ff fc17 	bl	80009c4 <HAL_GetTick>
 8001196:	0003      	movs	r3, r0
 8001198:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800119a:	e008      	b.n	80011ae <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800119c:	f7ff fc12 	bl	80009c4 <HAL_GetTick>
 80011a0:	0002      	movs	r2, r0
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	2b64      	cmp	r3, #100	; 0x64
 80011a8:	d901      	bls.n	80011ae <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80011aa:	2303      	movs	r3, #3
 80011ac:	e185      	b.n	80014ba <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011ae:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <HAL_RCC_OscConfig+0x338>)
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	2380      	movs	r3, #128	; 0x80
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	4013      	ands	r3, r2
 80011b8:	d0f0      	beq.n	800119c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d10e      	bne.n	80011e0 <HAL_RCC_OscConfig+0x33c>
 80011c2:	4b03      	ldr	r3, [pc, #12]	; (80011d0 <HAL_RCC_OscConfig+0x32c>)
 80011c4:	6a1a      	ldr	r2, [r3, #32]
 80011c6:	4b02      	ldr	r3, [pc, #8]	; (80011d0 <HAL_RCC_OscConfig+0x32c>)
 80011c8:	2101      	movs	r1, #1
 80011ca:	430a      	orrs	r2, r1
 80011cc:	621a      	str	r2, [r3, #32]
 80011ce:	e035      	b.n	800123c <HAL_RCC_OscConfig+0x398>
 80011d0:	40021000 	.word	0x40021000
 80011d4:	fffeffff 	.word	0xfffeffff
 80011d8:	fffbffff 	.word	0xfffbffff
 80011dc:	40007000 	.word	0x40007000
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d10c      	bne.n	8001202 <HAL_RCC_OscConfig+0x35e>
 80011e8:	4bb6      	ldr	r3, [pc, #728]	; (80014c4 <HAL_RCC_OscConfig+0x620>)
 80011ea:	6a1a      	ldr	r2, [r3, #32]
 80011ec:	4bb5      	ldr	r3, [pc, #724]	; (80014c4 <HAL_RCC_OscConfig+0x620>)
 80011ee:	2101      	movs	r1, #1
 80011f0:	438a      	bics	r2, r1
 80011f2:	621a      	str	r2, [r3, #32]
 80011f4:	4bb3      	ldr	r3, [pc, #716]	; (80014c4 <HAL_RCC_OscConfig+0x620>)
 80011f6:	6a1a      	ldr	r2, [r3, #32]
 80011f8:	4bb2      	ldr	r3, [pc, #712]	; (80014c4 <HAL_RCC_OscConfig+0x620>)
 80011fa:	2104      	movs	r1, #4
 80011fc:	438a      	bics	r2, r1
 80011fe:	621a      	str	r2, [r3, #32]
 8001200:	e01c      	b.n	800123c <HAL_RCC_OscConfig+0x398>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	2b05      	cmp	r3, #5
 8001208:	d10c      	bne.n	8001224 <HAL_RCC_OscConfig+0x380>
 800120a:	4bae      	ldr	r3, [pc, #696]	; (80014c4 <HAL_RCC_OscConfig+0x620>)
 800120c:	6a1a      	ldr	r2, [r3, #32]
 800120e:	4bad      	ldr	r3, [pc, #692]	; (80014c4 <HAL_RCC_OscConfig+0x620>)
 8001210:	2104      	movs	r1, #4
 8001212:	430a      	orrs	r2, r1
 8001214:	621a      	str	r2, [r3, #32]
 8001216:	4bab      	ldr	r3, [pc, #684]	; (80014c4 <HAL_RCC_OscConfig+0x620>)
 8001218:	6a1a      	ldr	r2, [r3, #32]
 800121a:	4baa      	ldr	r3, [pc, #680]	; (80014c4 <HAL_RCC_OscConfig+0x620>)
 800121c:	2101      	movs	r1, #1
 800121e:	430a      	orrs	r2, r1
 8001220:	621a      	str	r2, [r3, #32]
 8001222:	e00b      	b.n	800123c <HAL_RCC_OscConfig+0x398>
 8001224:	4ba7      	ldr	r3, [pc, #668]	; (80014c4 <HAL_RCC_OscConfig+0x620>)
 8001226:	6a1a      	ldr	r2, [r3, #32]
 8001228:	4ba6      	ldr	r3, [pc, #664]	; (80014c4 <HAL_RCC_OscConfig+0x620>)
 800122a:	2101      	movs	r1, #1
 800122c:	438a      	bics	r2, r1
 800122e:	621a      	str	r2, [r3, #32]
 8001230:	4ba4      	ldr	r3, [pc, #656]	; (80014c4 <HAL_RCC_OscConfig+0x620>)
 8001232:	6a1a      	ldr	r2, [r3, #32]
 8001234:	4ba3      	ldr	r3, [pc, #652]	; (80014c4 <HAL_RCC_OscConfig+0x620>)
 8001236:	2104      	movs	r1, #4
 8001238:	438a      	bics	r2, r1
 800123a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d014      	beq.n	800126e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001244:	f7ff fbbe 	bl	80009c4 <HAL_GetTick>
 8001248:	0003      	movs	r3, r0
 800124a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800124c:	e009      	b.n	8001262 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800124e:	f7ff fbb9 	bl	80009c4 <HAL_GetTick>
 8001252:	0002      	movs	r2, r0
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	4a9b      	ldr	r2, [pc, #620]	; (80014c8 <HAL_RCC_OscConfig+0x624>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d901      	bls.n	8001262 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e12b      	b.n	80014ba <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001262:	4b98      	ldr	r3, [pc, #608]	; (80014c4 <HAL_RCC_OscConfig+0x620>)
 8001264:	6a1b      	ldr	r3, [r3, #32]
 8001266:	2202      	movs	r2, #2
 8001268:	4013      	ands	r3, r2
 800126a:	d0f0      	beq.n	800124e <HAL_RCC_OscConfig+0x3aa>
 800126c:	e013      	b.n	8001296 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800126e:	f7ff fba9 	bl	80009c4 <HAL_GetTick>
 8001272:	0003      	movs	r3, r0
 8001274:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001276:	e009      	b.n	800128c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001278:	f7ff fba4 	bl	80009c4 <HAL_GetTick>
 800127c:	0002      	movs	r2, r0
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	4a91      	ldr	r2, [pc, #580]	; (80014c8 <HAL_RCC_OscConfig+0x624>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d901      	bls.n	800128c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e116      	b.n	80014ba <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800128c:	4b8d      	ldr	r3, [pc, #564]	; (80014c4 <HAL_RCC_OscConfig+0x620>)
 800128e:	6a1b      	ldr	r3, [r3, #32]
 8001290:	2202      	movs	r2, #2
 8001292:	4013      	ands	r3, r2
 8001294:	d1f0      	bne.n	8001278 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001296:	231f      	movs	r3, #31
 8001298:	18fb      	adds	r3, r7, r3
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d105      	bne.n	80012ac <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012a0:	4b88      	ldr	r3, [pc, #544]	; (80014c4 <HAL_RCC_OscConfig+0x620>)
 80012a2:	69da      	ldr	r2, [r3, #28]
 80012a4:	4b87      	ldr	r3, [pc, #540]	; (80014c4 <HAL_RCC_OscConfig+0x620>)
 80012a6:	4989      	ldr	r1, [pc, #548]	; (80014cc <HAL_RCC_OscConfig+0x628>)
 80012a8:	400a      	ands	r2, r1
 80012aa:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2210      	movs	r2, #16
 80012b2:	4013      	ands	r3, r2
 80012b4:	d063      	beq.n	800137e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	695b      	ldr	r3, [r3, #20]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d12a      	bne.n	8001314 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80012be:	4b81      	ldr	r3, [pc, #516]	; (80014c4 <HAL_RCC_OscConfig+0x620>)
 80012c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012c2:	4b80      	ldr	r3, [pc, #512]	; (80014c4 <HAL_RCC_OscConfig+0x620>)
 80012c4:	2104      	movs	r1, #4
 80012c6:	430a      	orrs	r2, r1
 80012c8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80012ca:	4b7e      	ldr	r3, [pc, #504]	; (80014c4 <HAL_RCC_OscConfig+0x620>)
 80012cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012ce:	4b7d      	ldr	r3, [pc, #500]	; (80014c4 <HAL_RCC_OscConfig+0x620>)
 80012d0:	2101      	movs	r1, #1
 80012d2:	430a      	orrs	r2, r1
 80012d4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012d6:	f7ff fb75 	bl	80009c4 <HAL_GetTick>
 80012da:	0003      	movs	r3, r0
 80012dc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80012de:	e008      	b.n	80012f2 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80012e0:	f7ff fb70 	bl	80009c4 <HAL_GetTick>
 80012e4:	0002      	movs	r2, r0
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d901      	bls.n	80012f2 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e0e3      	b.n	80014ba <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80012f2:	4b74      	ldr	r3, [pc, #464]	; (80014c4 <HAL_RCC_OscConfig+0x620>)
 80012f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012f6:	2202      	movs	r2, #2
 80012f8:	4013      	ands	r3, r2
 80012fa:	d0f1      	beq.n	80012e0 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80012fc:	4b71      	ldr	r3, [pc, #452]	; (80014c4 <HAL_RCC_OscConfig+0x620>)
 80012fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001300:	22f8      	movs	r2, #248	; 0xf8
 8001302:	4393      	bics	r3, r2
 8001304:	0019      	movs	r1, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	699b      	ldr	r3, [r3, #24]
 800130a:	00da      	lsls	r2, r3, #3
 800130c:	4b6d      	ldr	r3, [pc, #436]	; (80014c4 <HAL_RCC_OscConfig+0x620>)
 800130e:	430a      	orrs	r2, r1
 8001310:	635a      	str	r2, [r3, #52]	; 0x34
 8001312:	e034      	b.n	800137e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	695b      	ldr	r3, [r3, #20]
 8001318:	3305      	adds	r3, #5
 800131a:	d111      	bne.n	8001340 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800131c:	4b69      	ldr	r3, [pc, #420]	; (80014c4 <HAL_RCC_OscConfig+0x620>)
 800131e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001320:	4b68      	ldr	r3, [pc, #416]	; (80014c4 <HAL_RCC_OscConfig+0x620>)
 8001322:	2104      	movs	r1, #4
 8001324:	438a      	bics	r2, r1
 8001326:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001328:	4b66      	ldr	r3, [pc, #408]	; (80014c4 <HAL_RCC_OscConfig+0x620>)
 800132a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800132c:	22f8      	movs	r2, #248	; 0xf8
 800132e:	4393      	bics	r3, r2
 8001330:	0019      	movs	r1, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	699b      	ldr	r3, [r3, #24]
 8001336:	00da      	lsls	r2, r3, #3
 8001338:	4b62      	ldr	r3, [pc, #392]	; (80014c4 <HAL_RCC_OscConfig+0x620>)
 800133a:	430a      	orrs	r2, r1
 800133c:	635a      	str	r2, [r3, #52]	; 0x34
 800133e:	e01e      	b.n	800137e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001340:	4b60      	ldr	r3, [pc, #384]	; (80014c4 <HAL_RCC_OscConfig+0x620>)
 8001342:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001344:	4b5f      	ldr	r3, [pc, #380]	; (80014c4 <HAL_RCC_OscConfig+0x620>)
 8001346:	2104      	movs	r1, #4
 8001348:	430a      	orrs	r2, r1
 800134a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800134c:	4b5d      	ldr	r3, [pc, #372]	; (80014c4 <HAL_RCC_OscConfig+0x620>)
 800134e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001350:	4b5c      	ldr	r3, [pc, #368]	; (80014c4 <HAL_RCC_OscConfig+0x620>)
 8001352:	2101      	movs	r1, #1
 8001354:	438a      	bics	r2, r1
 8001356:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001358:	f7ff fb34 	bl	80009c4 <HAL_GetTick>
 800135c:	0003      	movs	r3, r0
 800135e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001360:	e008      	b.n	8001374 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001362:	f7ff fb2f 	bl	80009c4 <HAL_GetTick>
 8001366:	0002      	movs	r2, r0
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	2b02      	cmp	r3, #2
 800136e:	d901      	bls.n	8001374 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	e0a2      	b.n	80014ba <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001374:	4b53      	ldr	r3, [pc, #332]	; (80014c4 <HAL_RCC_OscConfig+0x620>)
 8001376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001378:	2202      	movs	r2, #2
 800137a:	4013      	ands	r3, r2
 800137c:	d1f1      	bne.n	8001362 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6a1b      	ldr	r3, [r3, #32]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d100      	bne.n	8001388 <HAL_RCC_OscConfig+0x4e4>
 8001386:	e097      	b.n	80014b8 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001388:	4b4e      	ldr	r3, [pc, #312]	; (80014c4 <HAL_RCC_OscConfig+0x620>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	220c      	movs	r2, #12
 800138e:	4013      	ands	r3, r2
 8001390:	2b08      	cmp	r3, #8
 8001392:	d100      	bne.n	8001396 <HAL_RCC_OscConfig+0x4f2>
 8001394:	e06b      	b.n	800146e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6a1b      	ldr	r3, [r3, #32]
 800139a:	2b02      	cmp	r3, #2
 800139c:	d14c      	bne.n	8001438 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800139e:	4b49      	ldr	r3, [pc, #292]	; (80014c4 <HAL_RCC_OscConfig+0x620>)
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	4b48      	ldr	r3, [pc, #288]	; (80014c4 <HAL_RCC_OscConfig+0x620>)
 80013a4:	494a      	ldr	r1, [pc, #296]	; (80014d0 <HAL_RCC_OscConfig+0x62c>)
 80013a6:	400a      	ands	r2, r1
 80013a8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013aa:	f7ff fb0b 	bl	80009c4 <HAL_GetTick>
 80013ae:	0003      	movs	r3, r0
 80013b0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013b2:	e008      	b.n	80013c6 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013b4:	f7ff fb06 	bl	80009c4 <HAL_GetTick>
 80013b8:	0002      	movs	r2, r0
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d901      	bls.n	80013c6 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e079      	b.n	80014ba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013c6:	4b3f      	ldr	r3, [pc, #252]	; (80014c4 <HAL_RCC_OscConfig+0x620>)
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	2380      	movs	r3, #128	; 0x80
 80013cc:	049b      	lsls	r3, r3, #18
 80013ce:	4013      	ands	r3, r2
 80013d0:	d1f0      	bne.n	80013b4 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013d2:	4b3c      	ldr	r3, [pc, #240]	; (80014c4 <HAL_RCC_OscConfig+0x620>)
 80013d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d6:	220f      	movs	r2, #15
 80013d8:	4393      	bics	r3, r2
 80013da:	0019      	movs	r1, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013e0:	4b38      	ldr	r3, [pc, #224]	; (80014c4 <HAL_RCC_OscConfig+0x620>)
 80013e2:	430a      	orrs	r2, r1
 80013e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80013e6:	4b37      	ldr	r3, [pc, #220]	; (80014c4 <HAL_RCC_OscConfig+0x620>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	4a3a      	ldr	r2, [pc, #232]	; (80014d4 <HAL_RCC_OscConfig+0x630>)
 80013ec:	4013      	ands	r3, r2
 80013ee:	0019      	movs	r1, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f8:	431a      	orrs	r2, r3
 80013fa:	4b32      	ldr	r3, [pc, #200]	; (80014c4 <HAL_RCC_OscConfig+0x620>)
 80013fc:	430a      	orrs	r2, r1
 80013fe:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001400:	4b30      	ldr	r3, [pc, #192]	; (80014c4 <HAL_RCC_OscConfig+0x620>)
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	4b2f      	ldr	r3, [pc, #188]	; (80014c4 <HAL_RCC_OscConfig+0x620>)
 8001406:	2180      	movs	r1, #128	; 0x80
 8001408:	0449      	lsls	r1, r1, #17
 800140a:	430a      	orrs	r2, r1
 800140c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800140e:	f7ff fad9 	bl	80009c4 <HAL_GetTick>
 8001412:	0003      	movs	r3, r0
 8001414:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001416:	e008      	b.n	800142a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001418:	f7ff fad4 	bl	80009c4 <HAL_GetTick>
 800141c:	0002      	movs	r2, r0
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b02      	cmp	r3, #2
 8001424:	d901      	bls.n	800142a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e047      	b.n	80014ba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800142a:	4b26      	ldr	r3, [pc, #152]	; (80014c4 <HAL_RCC_OscConfig+0x620>)
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	2380      	movs	r3, #128	; 0x80
 8001430:	049b      	lsls	r3, r3, #18
 8001432:	4013      	ands	r3, r2
 8001434:	d0f0      	beq.n	8001418 <HAL_RCC_OscConfig+0x574>
 8001436:	e03f      	b.n	80014b8 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001438:	4b22      	ldr	r3, [pc, #136]	; (80014c4 <HAL_RCC_OscConfig+0x620>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	4b21      	ldr	r3, [pc, #132]	; (80014c4 <HAL_RCC_OscConfig+0x620>)
 800143e:	4924      	ldr	r1, [pc, #144]	; (80014d0 <HAL_RCC_OscConfig+0x62c>)
 8001440:	400a      	ands	r2, r1
 8001442:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001444:	f7ff fabe 	bl	80009c4 <HAL_GetTick>
 8001448:	0003      	movs	r3, r0
 800144a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800144c:	e008      	b.n	8001460 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800144e:	f7ff fab9 	bl	80009c4 <HAL_GetTick>
 8001452:	0002      	movs	r2, r0
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d901      	bls.n	8001460 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e02c      	b.n	80014ba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001460:	4b18      	ldr	r3, [pc, #96]	; (80014c4 <HAL_RCC_OscConfig+0x620>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	2380      	movs	r3, #128	; 0x80
 8001466:	049b      	lsls	r3, r3, #18
 8001468:	4013      	ands	r3, r2
 800146a:	d1f0      	bne.n	800144e <HAL_RCC_OscConfig+0x5aa>
 800146c:	e024      	b.n	80014b8 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6a1b      	ldr	r3, [r3, #32]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d101      	bne.n	800147a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e01f      	b.n	80014ba <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800147a:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <HAL_RCC_OscConfig+0x620>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001480:	4b10      	ldr	r3, [pc, #64]	; (80014c4 <HAL_RCC_OscConfig+0x620>)
 8001482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001484:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001486:	697a      	ldr	r2, [r7, #20]
 8001488:	2380      	movs	r3, #128	; 0x80
 800148a:	025b      	lsls	r3, r3, #9
 800148c:	401a      	ands	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001492:	429a      	cmp	r2, r3
 8001494:	d10e      	bne.n	80014b4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	220f      	movs	r2, #15
 800149a:	401a      	ands	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d107      	bne.n	80014b4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80014a4:	697a      	ldr	r2, [r7, #20]
 80014a6:	23f0      	movs	r3, #240	; 0xf0
 80014a8:	039b      	lsls	r3, r3, #14
 80014aa:	401a      	ands	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d001      	beq.n	80014b8 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e000      	b.n	80014ba <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	0018      	movs	r0, r3
 80014bc:	46bd      	mov	sp, r7
 80014be:	b008      	add	sp, #32
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	46c0      	nop			; (mov r8, r8)
 80014c4:	40021000 	.word	0x40021000
 80014c8:	00001388 	.word	0x00001388
 80014cc:	efffffff 	.word	0xefffffff
 80014d0:	feffffff 	.word	0xfeffffff
 80014d4:	ffc2ffff 	.word	0xffc2ffff

080014d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d101      	bne.n	80014ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e0b3      	b.n	8001654 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014ec:	4b5b      	ldr	r3, [pc, #364]	; (800165c <HAL_RCC_ClockConfig+0x184>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2201      	movs	r2, #1
 80014f2:	4013      	ands	r3, r2
 80014f4:	683a      	ldr	r2, [r7, #0]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d911      	bls.n	800151e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014fa:	4b58      	ldr	r3, [pc, #352]	; (800165c <HAL_RCC_ClockConfig+0x184>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2201      	movs	r2, #1
 8001500:	4393      	bics	r3, r2
 8001502:	0019      	movs	r1, r3
 8001504:	4b55      	ldr	r3, [pc, #340]	; (800165c <HAL_RCC_ClockConfig+0x184>)
 8001506:	683a      	ldr	r2, [r7, #0]
 8001508:	430a      	orrs	r2, r1
 800150a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800150c:	4b53      	ldr	r3, [pc, #332]	; (800165c <HAL_RCC_ClockConfig+0x184>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2201      	movs	r2, #1
 8001512:	4013      	ands	r3, r2
 8001514:	683a      	ldr	r2, [r7, #0]
 8001516:	429a      	cmp	r2, r3
 8001518:	d001      	beq.n	800151e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e09a      	b.n	8001654 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2202      	movs	r2, #2
 8001524:	4013      	ands	r3, r2
 8001526:	d015      	beq.n	8001554 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2204      	movs	r2, #4
 800152e:	4013      	ands	r3, r2
 8001530:	d006      	beq.n	8001540 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001532:	4b4b      	ldr	r3, [pc, #300]	; (8001660 <HAL_RCC_ClockConfig+0x188>)
 8001534:	685a      	ldr	r2, [r3, #4]
 8001536:	4b4a      	ldr	r3, [pc, #296]	; (8001660 <HAL_RCC_ClockConfig+0x188>)
 8001538:	21e0      	movs	r1, #224	; 0xe0
 800153a:	00c9      	lsls	r1, r1, #3
 800153c:	430a      	orrs	r2, r1
 800153e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001540:	4b47      	ldr	r3, [pc, #284]	; (8001660 <HAL_RCC_ClockConfig+0x188>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	22f0      	movs	r2, #240	; 0xf0
 8001546:	4393      	bics	r3, r2
 8001548:	0019      	movs	r1, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	689a      	ldr	r2, [r3, #8]
 800154e:	4b44      	ldr	r3, [pc, #272]	; (8001660 <HAL_RCC_ClockConfig+0x188>)
 8001550:	430a      	orrs	r2, r1
 8001552:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2201      	movs	r2, #1
 800155a:	4013      	ands	r3, r2
 800155c:	d040      	beq.n	80015e0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d107      	bne.n	8001576 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001566:	4b3e      	ldr	r3, [pc, #248]	; (8001660 <HAL_RCC_ClockConfig+0x188>)
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	2380      	movs	r3, #128	; 0x80
 800156c:	029b      	lsls	r3, r3, #10
 800156e:	4013      	ands	r3, r2
 8001570:	d114      	bne.n	800159c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e06e      	b.n	8001654 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	2b02      	cmp	r3, #2
 800157c:	d107      	bne.n	800158e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800157e:	4b38      	ldr	r3, [pc, #224]	; (8001660 <HAL_RCC_ClockConfig+0x188>)
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	2380      	movs	r3, #128	; 0x80
 8001584:	049b      	lsls	r3, r3, #18
 8001586:	4013      	ands	r3, r2
 8001588:	d108      	bne.n	800159c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e062      	b.n	8001654 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800158e:	4b34      	ldr	r3, [pc, #208]	; (8001660 <HAL_RCC_ClockConfig+0x188>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2202      	movs	r2, #2
 8001594:	4013      	ands	r3, r2
 8001596:	d101      	bne.n	800159c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e05b      	b.n	8001654 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800159c:	4b30      	ldr	r3, [pc, #192]	; (8001660 <HAL_RCC_ClockConfig+0x188>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	2203      	movs	r2, #3
 80015a2:	4393      	bics	r3, r2
 80015a4:	0019      	movs	r1, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685a      	ldr	r2, [r3, #4]
 80015aa:	4b2d      	ldr	r3, [pc, #180]	; (8001660 <HAL_RCC_ClockConfig+0x188>)
 80015ac:	430a      	orrs	r2, r1
 80015ae:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015b0:	f7ff fa08 	bl	80009c4 <HAL_GetTick>
 80015b4:	0003      	movs	r3, r0
 80015b6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015b8:	e009      	b.n	80015ce <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015ba:	f7ff fa03 	bl	80009c4 <HAL_GetTick>
 80015be:	0002      	movs	r2, r0
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	4a27      	ldr	r2, [pc, #156]	; (8001664 <HAL_RCC_ClockConfig+0x18c>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e042      	b.n	8001654 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ce:	4b24      	ldr	r3, [pc, #144]	; (8001660 <HAL_RCC_ClockConfig+0x188>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	220c      	movs	r2, #12
 80015d4:	401a      	ands	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	429a      	cmp	r2, r3
 80015de:	d1ec      	bne.n	80015ba <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015e0:	4b1e      	ldr	r3, [pc, #120]	; (800165c <HAL_RCC_ClockConfig+0x184>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2201      	movs	r2, #1
 80015e6:	4013      	ands	r3, r2
 80015e8:	683a      	ldr	r2, [r7, #0]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d211      	bcs.n	8001612 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ee:	4b1b      	ldr	r3, [pc, #108]	; (800165c <HAL_RCC_ClockConfig+0x184>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2201      	movs	r2, #1
 80015f4:	4393      	bics	r3, r2
 80015f6:	0019      	movs	r1, r3
 80015f8:	4b18      	ldr	r3, [pc, #96]	; (800165c <HAL_RCC_ClockConfig+0x184>)
 80015fa:	683a      	ldr	r2, [r7, #0]
 80015fc:	430a      	orrs	r2, r1
 80015fe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001600:	4b16      	ldr	r3, [pc, #88]	; (800165c <HAL_RCC_ClockConfig+0x184>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2201      	movs	r2, #1
 8001606:	4013      	ands	r3, r2
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	429a      	cmp	r2, r3
 800160c:	d001      	beq.n	8001612 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e020      	b.n	8001654 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2204      	movs	r2, #4
 8001618:	4013      	ands	r3, r2
 800161a:	d009      	beq.n	8001630 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800161c:	4b10      	ldr	r3, [pc, #64]	; (8001660 <HAL_RCC_ClockConfig+0x188>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	4a11      	ldr	r2, [pc, #68]	; (8001668 <HAL_RCC_ClockConfig+0x190>)
 8001622:	4013      	ands	r3, r2
 8001624:	0019      	movs	r1, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	68da      	ldr	r2, [r3, #12]
 800162a:	4b0d      	ldr	r3, [pc, #52]	; (8001660 <HAL_RCC_ClockConfig+0x188>)
 800162c:	430a      	orrs	r2, r1
 800162e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001630:	f000 f820 	bl	8001674 <HAL_RCC_GetSysClockFreq>
 8001634:	0001      	movs	r1, r0
 8001636:	4b0a      	ldr	r3, [pc, #40]	; (8001660 <HAL_RCC_ClockConfig+0x188>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	091b      	lsrs	r3, r3, #4
 800163c:	220f      	movs	r2, #15
 800163e:	4013      	ands	r3, r2
 8001640:	4a0a      	ldr	r2, [pc, #40]	; (800166c <HAL_RCC_ClockConfig+0x194>)
 8001642:	5cd3      	ldrb	r3, [r2, r3]
 8001644:	000a      	movs	r2, r1
 8001646:	40da      	lsrs	r2, r3
 8001648:	4b09      	ldr	r3, [pc, #36]	; (8001670 <HAL_RCC_ClockConfig+0x198>)
 800164a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800164c:	2000      	movs	r0, #0
 800164e:	f7ff f973 	bl	8000938 <HAL_InitTick>
  
  return HAL_OK;
 8001652:	2300      	movs	r3, #0
}
 8001654:	0018      	movs	r0, r3
 8001656:	46bd      	mov	sp, r7
 8001658:	b004      	add	sp, #16
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40022000 	.word	0x40022000
 8001660:	40021000 	.word	0x40021000
 8001664:	00001388 	.word	0x00001388
 8001668:	fffff8ff 	.word	0xfffff8ff
 800166c:	08003cf8 	.word	0x08003cf8
 8001670:	20000000 	.word	0x20000000

08001674 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	2300      	movs	r3, #0
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	2300      	movs	r3, #0
 8001684:	617b      	str	r3, [r7, #20]
 8001686:	2300      	movs	r3, #0
 8001688:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800168a:	2300      	movs	r3, #0
 800168c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800168e:	4b20      	ldr	r3, [pc, #128]	; (8001710 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	220c      	movs	r2, #12
 8001698:	4013      	ands	r3, r2
 800169a:	2b04      	cmp	r3, #4
 800169c:	d002      	beq.n	80016a4 <HAL_RCC_GetSysClockFreq+0x30>
 800169e:	2b08      	cmp	r3, #8
 80016a0:	d003      	beq.n	80016aa <HAL_RCC_GetSysClockFreq+0x36>
 80016a2:	e02c      	b.n	80016fe <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80016a4:	4b1b      	ldr	r3, [pc, #108]	; (8001714 <HAL_RCC_GetSysClockFreq+0xa0>)
 80016a6:	613b      	str	r3, [r7, #16]
      break;
 80016a8:	e02c      	b.n	8001704 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	0c9b      	lsrs	r3, r3, #18
 80016ae:	220f      	movs	r2, #15
 80016b0:	4013      	ands	r3, r2
 80016b2:	4a19      	ldr	r2, [pc, #100]	; (8001718 <HAL_RCC_GetSysClockFreq+0xa4>)
 80016b4:	5cd3      	ldrb	r3, [r2, r3]
 80016b6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80016b8:	4b15      	ldr	r3, [pc, #84]	; (8001710 <HAL_RCC_GetSysClockFreq+0x9c>)
 80016ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016bc:	220f      	movs	r2, #15
 80016be:	4013      	ands	r3, r2
 80016c0:	4a16      	ldr	r2, [pc, #88]	; (800171c <HAL_RCC_GetSysClockFreq+0xa8>)
 80016c2:	5cd3      	ldrb	r3, [r2, r3]
 80016c4:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80016c6:	68fa      	ldr	r2, [r7, #12]
 80016c8:	2380      	movs	r3, #128	; 0x80
 80016ca:	025b      	lsls	r3, r3, #9
 80016cc:	4013      	ands	r3, r2
 80016ce:	d009      	beq.n	80016e4 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80016d0:	68b9      	ldr	r1, [r7, #8]
 80016d2:	4810      	ldr	r0, [pc, #64]	; (8001714 <HAL_RCC_GetSysClockFreq+0xa0>)
 80016d4:	f7fe fd2a 	bl	800012c <__udivsi3>
 80016d8:	0003      	movs	r3, r0
 80016da:	001a      	movs	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	4353      	muls	r3, r2
 80016e0:	617b      	str	r3, [r7, #20]
 80016e2:	e009      	b.n	80016f8 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80016e4:	6879      	ldr	r1, [r7, #4]
 80016e6:	000a      	movs	r2, r1
 80016e8:	0152      	lsls	r2, r2, #5
 80016ea:	1a52      	subs	r2, r2, r1
 80016ec:	0193      	lsls	r3, r2, #6
 80016ee:	1a9b      	subs	r3, r3, r2
 80016f0:	00db      	lsls	r3, r3, #3
 80016f2:	185b      	adds	r3, r3, r1
 80016f4:	021b      	lsls	r3, r3, #8
 80016f6:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	613b      	str	r3, [r7, #16]
      break;
 80016fc:	e002      	b.n	8001704 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016fe:	4b05      	ldr	r3, [pc, #20]	; (8001714 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001700:	613b      	str	r3, [r7, #16]
      break;
 8001702:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001704:	693b      	ldr	r3, [r7, #16]
}
 8001706:	0018      	movs	r0, r3
 8001708:	46bd      	mov	sp, r7
 800170a:	b006      	add	sp, #24
 800170c:	bd80      	pop	{r7, pc}
 800170e:	46c0      	nop			; (mov r8, r8)
 8001710:	40021000 	.word	0x40021000
 8001714:	007a1200 	.word	0x007a1200
 8001718:	08003d10 	.word	0x08003d10
 800171c:	08003d20 	.word	0x08003d20

08001720 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001724:	4b02      	ldr	r3, [pc, #8]	; (8001730 <HAL_RCC_GetHCLKFreq+0x10>)
 8001726:	681b      	ldr	r3, [r3, #0]
}
 8001728:	0018      	movs	r0, r3
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	46c0      	nop			; (mov r8, r8)
 8001730:	20000000 	.word	0x20000000

08001734 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001738:	f7ff fff2 	bl	8001720 <HAL_RCC_GetHCLKFreq>
 800173c:	0001      	movs	r1, r0
 800173e:	4b06      	ldr	r3, [pc, #24]	; (8001758 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	0a1b      	lsrs	r3, r3, #8
 8001744:	2207      	movs	r2, #7
 8001746:	4013      	ands	r3, r2
 8001748:	4a04      	ldr	r2, [pc, #16]	; (800175c <HAL_RCC_GetPCLK1Freq+0x28>)
 800174a:	5cd3      	ldrb	r3, [r2, r3]
 800174c:	40d9      	lsrs	r1, r3
 800174e:	000b      	movs	r3, r1
}    
 8001750:	0018      	movs	r0, r3
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	46c0      	nop			; (mov r8, r8)
 8001758:	40021000 	.word	0x40021000
 800175c:	08003d08 	.word	0x08003d08

08001760 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001768:	2300      	movs	r3, #0
 800176a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800176c:	2300      	movs	r3, #0
 800176e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	2380      	movs	r3, #128	; 0x80
 8001776:	025b      	lsls	r3, r3, #9
 8001778:	4013      	ands	r3, r2
 800177a:	d100      	bne.n	800177e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800177c:	e08e      	b.n	800189c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800177e:	2017      	movs	r0, #23
 8001780:	183b      	adds	r3, r7, r0
 8001782:	2200      	movs	r2, #0
 8001784:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001786:	4b5f      	ldr	r3, [pc, #380]	; (8001904 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001788:	69da      	ldr	r2, [r3, #28]
 800178a:	2380      	movs	r3, #128	; 0x80
 800178c:	055b      	lsls	r3, r3, #21
 800178e:	4013      	ands	r3, r2
 8001790:	d110      	bne.n	80017b4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001792:	4b5c      	ldr	r3, [pc, #368]	; (8001904 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001794:	69da      	ldr	r2, [r3, #28]
 8001796:	4b5b      	ldr	r3, [pc, #364]	; (8001904 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001798:	2180      	movs	r1, #128	; 0x80
 800179a:	0549      	lsls	r1, r1, #21
 800179c:	430a      	orrs	r2, r1
 800179e:	61da      	str	r2, [r3, #28]
 80017a0:	4b58      	ldr	r3, [pc, #352]	; (8001904 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80017a2:	69da      	ldr	r2, [r3, #28]
 80017a4:	2380      	movs	r3, #128	; 0x80
 80017a6:	055b      	lsls	r3, r3, #21
 80017a8:	4013      	ands	r3, r2
 80017aa:	60bb      	str	r3, [r7, #8]
 80017ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017ae:	183b      	adds	r3, r7, r0
 80017b0:	2201      	movs	r2, #1
 80017b2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017b4:	4b54      	ldr	r3, [pc, #336]	; (8001908 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	2380      	movs	r3, #128	; 0x80
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	4013      	ands	r3, r2
 80017be:	d11a      	bne.n	80017f6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017c0:	4b51      	ldr	r3, [pc, #324]	; (8001908 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	4b50      	ldr	r3, [pc, #320]	; (8001908 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80017c6:	2180      	movs	r1, #128	; 0x80
 80017c8:	0049      	lsls	r1, r1, #1
 80017ca:	430a      	orrs	r2, r1
 80017cc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017ce:	f7ff f8f9 	bl	80009c4 <HAL_GetTick>
 80017d2:	0003      	movs	r3, r0
 80017d4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d6:	e008      	b.n	80017ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017d8:	f7ff f8f4 	bl	80009c4 <HAL_GetTick>
 80017dc:	0002      	movs	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b64      	cmp	r3, #100	; 0x64
 80017e4:	d901      	bls.n	80017ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e087      	b.n	80018fa <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ea:	4b47      	ldr	r3, [pc, #284]	; (8001908 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	2380      	movs	r3, #128	; 0x80
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	4013      	ands	r3, r2
 80017f4:	d0f0      	beq.n	80017d8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80017f6:	4b43      	ldr	r3, [pc, #268]	; (8001904 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80017f8:	6a1a      	ldr	r2, [r3, #32]
 80017fa:	23c0      	movs	r3, #192	; 0xc0
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	4013      	ands	r3, r2
 8001800:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d034      	beq.n	8001872 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685a      	ldr	r2, [r3, #4]
 800180c:	23c0      	movs	r3, #192	; 0xc0
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	4013      	ands	r3, r2
 8001812:	68fa      	ldr	r2, [r7, #12]
 8001814:	429a      	cmp	r2, r3
 8001816:	d02c      	beq.n	8001872 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001818:	4b3a      	ldr	r3, [pc, #232]	; (8001904 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800181a:	6a1b      	ldr	r3, [r3, #32]
 800181c:	4a3b      	ldr	r2, [pc, #236]	; (800190c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800181e:	4013      	ands	r3, r2
 8001820:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001822:	4b38      	ldr	r3, [pc, #224]	; (8001904 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001824:	6a1a      	ldr	r2, [r3, #32]
 8001826:	4b37      	ldr	r3, [pc, #220]	; (8001904 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001828:	2180      	movs	r1, #128	; 0x80
 800182a:	0249      	lsls	r1, r1, #9
 800182c:	430a      	orrs	r2, r1
 800182e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001830:	4b34      	ldr	r3, [pc, #208]	; (8001904 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001832:	6a1a      	ldr	r2, [r3, #32]
 8001834:	4b33      	ldr	r3, [pc, #204]	; (8001904 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001836:	4936      	ldr	r1, [pc, #216]	; (8001910 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001838:	400a      	ands	r2, r1
 800183a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800183c:	4b31      	ldr	r3, [pc, #196]	; (8001904 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800183e:	68fa      	ldr	r2, [r7, #12]
 8001840:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2201      	movs	r2, #1
 8001846:	4013      	ands	r3, r2
 8001848:	d013      	beq.n	8001872 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800184a:	f7ff f8bb 	bl	80009c4 <HAL_GetTick>
 800184e:	0003      	movs	r3, r0
 8001850:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001852:	e009      	b.n	8001868 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001854:	f7ff f8b6 	bl	80009c4 <HAL_GetTick>
 8001858:	0002      	movs	r2, r0
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	4a2d      	ldr	r2, [pc, #180]	; (8001914 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d901      	bls.n	8001868 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e048      	b.n	80018fa <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001868:	4b26      	ldr	r3, [pc, #152]	; (8001904 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800186a:	6a1b      	ldr	r3, [r3, #32]
 800186c:	2202      	movs	r2, #2
 800186e:	4013      	ands	r3, r2
 8001870:	d0f0      	beq.n	8001854 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001872:	4b24      	ldr	r3, [pc, #144]	; (8001904 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001874:	6a1b      	ldr	r3, [r3, #32]
 8001876:	4a25      	ldr	r2, [pc, #148]	; (800190c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001878:	4013      	ands	r3, r2
 800187a:	0019      	movs	r1, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685a      	ldr	r2, [r3, #4]
 8001880:	4b20      	ldr	r3, [pc, #128]	; (8001904 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001882:	430a      	orrs	r2, r1
 8001884:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001886:	2317      	movs	r3, #23
 8001888:	18fb      	adds	r3, r7, r3
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d105      	bne.n	800189c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001890:	4b1c      	ldr	r3, [pc, #112]	; (8001904 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001892:	69da      	ldr	r2, [r3, #28]
 8001894:	4b1b      	ldr	r3, [pc, #108]	; (8001904 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001896:	4920      	ldr	r1, [pc, #128]	; (8001918 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001898:	400a      	ands	r2, r1
 800189a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2201      	movs	r2, #1
 80018a2:	4013      	ands	r3, r2
 80018a4:	d009      	beq.n	80018ba <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80018a6:	4b17      	ldr	r3, [pc, #92]	; (8001904 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	2203      	movs	r2, #3
 80018ac:	4393      	bics	r3, r2
 80018ae:	0019      	movs	r1, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	4b13      	ldr	r3, [pc, #76]	; (8001904 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80018b6:	430a      	orrs	r2, r1
 80018b8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2220      	movs	r2, #32
 80018c0:	4013      	ands	r3, r2
 80018c2:	d009      	beq.n	80018d8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80018c4:	4b0f      	ldr	r3, [pc, #60]	; (8001904 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80018c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c8:	2210      	movs	r2, #16
 80018ca:	4393      	bics	r3, r2
 80018cc:	0019      	movs	r1, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	68da      	ldr	r2, [r3, #12]
 80018d2:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80018d4:	430a      	orrs	r2, r1
 80018d6:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	2380      	movs	r3, #128	; 0x80
 80018de:	00db      	lsls	r3, r3, #3
 80018e0:	4013      	ands	r3, r2
 80018e2:	d009      	beq.n	80018f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80018e4:	4b07      	ldr	r3, [pc, #28]	; (8001904 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80018e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e8:	2240      	movs	r2, #64	; 0x40
 80018ea:	4393      	bics	r3, r2
 80018ec:	0019      	movs	r1, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	691a      	ldr	r2, [r3, #16]
 80018f2:	4b04      	ldr	r3, [pc, #16]	; (8001904 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80018f4:	430a      	orrs	r2, r1
 80018f6:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	0018      	movs	r0, r3
 80018fc:	46bd      	mov	sp, r7
 80018fe:	b006      	add	sp, #24
 8001900:	bd80      	pop	{r7, pc}
 8001902:	46c0      	nop			; (mov r8, r8)
 8001904:	40021000 	.word	0x40021000
 8001908:	40007000 	.word	0x40007000
 800190c:	fffffcff 	.word	0xfffffcff
 8001910:	fffeffff 	.word	0xfffeffff
 8001914:	00001388 	.word	0x00001388
 8001918:	efffffff 	.word	0xefffffff

0800191c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800191c:	b5b0      	push	{r4, r5, r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001924:	230f      	movs	r3, #15
 8001926:	18fb      	adds	r3, r7, r3
 8001928:	2201      	movs	r2, #1
 800192a:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d101      	bne.n	8001936 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e081      	b.n	8001a3a <HAL_RTC_Init+0x11e>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	7f5b      	ldrb	r3, [r3, #29]
 800193a:	b2db      	uxtb	r3, r3
 800193c:	2b00      	cmp	r3, #0
 800193e:	d106      	bne.n	800194e <HAL_RTC_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	0018      	movs	r0, r3
 800194a:	f7fe fe99 	bl	8000680 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2202      	movs	r2, #2
 8001952:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	2210      	movs	r2, #16
 800195c:	4013      	ands	r3, r2
 800195e:	2b10      	cmp	r3, #16
 8001960:	d05c      	beq.n	8001a1c <HAL_RTC_Init+0x100>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	22ca      	movs	r2, #202	; 0xca
 8001968:	625a      	str	r2, [r3, #36]	; 0x24
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2253      	movs	r2, #83	; 0x53
 8001970:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8001972:	250f      	movs	r5, #15
 8001974:	197c      	adds	r4, r7, r5
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	0018      	movs	r0, r3
 800197a:	f000 fa73 	bl	8001e64 <RTC_EnterInitMode>
 800197e:	0003      	movs	r3, r0
 8001980:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8001982:	0028      	movs	r0, r5
 8001984:	183b      	adds	r3, r7, r0
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d12c      	bne.n	80019e6 <HAL_RTC_Init+0xca>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	689a      	ldr	r2, [r3, #8]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	492b      	ldr	r1, [pc, #172]	; (8001a44 <HAL_RTC_Init+0x128>)
 8001998:	400a      	ands	r2, r1
 800199a:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6899      	ldr	r1, [r3, #8]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685a      	ldr	r2, [r3, #4]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	691b      	ldr	r3, [r3, #16]
 80019aa:	431a      	orrs	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	695b      	ldr	r3, [r3, #20]
 80019b0:	431a      	orrs	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	430a      	orrs	r2, r1
 80019b8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	68d2      	ldr	r2, [r2, #12]
 80019c2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	6919      	ldr	r1, [r3, #16]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	041a      	lsls	r2, r3, #16
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	430a      	orrs	r2, r1
 80019d6:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80019d8:	183c      	adds	r4, r7, r0
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	0018      	movs	r0, r3
 80019de:	f000 fa84 	bl	8001eea <RTC_ExitInitMode>
 80019e2:	0003      	movs	r3, r0
 80019e4:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 80019e6:	230f      	movs	r3, #15
 80019e8:	18fb      	adds	r3, r7, r3
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d110      	bne.n	8001a12 <HAL_RTC_Init+0xf6>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4913      	ldr	r1, [pc, #76]	; (8001a48 <HAL_RTC_Init+0x12c>)
 80019fc:	400a      	ands	r2, r1
 80019fe:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	699a      	ldr	r2, [r3, #24]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	22ff      	movs	r2, #255	; 0xff
 8001a18:	625a      	str	r2, [r3, #36]	; 0x24
 8001a1a:	e003      	b.n	8001a24 <HAL_RTC_Init+0x108>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8001a1c:	230f      	movs	r3, #15
 8001a1e:	18fb      	adds	r3, r7, r3
 8001a20:	2200      	movs	r2, #0
 8001a22:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8001a24:	230f      	movs	r3, #15
 8001a26:	18fb      	adds	r3, r7, r3
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d102      	bne.n	8001a34 <HAL_RTC_Init+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2201      	movs	r2, #1
 8001a32:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8001a34:	230f      	movs	r3, #15
 8001a36:	18fb      	adds	r3, r7, r3
 8001a38:	781b      	ldrb	r3, [r3, #0]
}
 8001a3a:	0018      	movs	r0, r3
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	b004      	add	sp, #16
 8001a40:	bdb0      	pop	{r4, r5, r7, pc}
 8001a42:	46c0      	nop			; (mov r8, r8)
 8001a44:	ff8fffbf 	.word	0xff8fffbf
 8001a48:	fffbffff 	.word	0xfffbffff

08001a4c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001a4c:	b5b0      	push	{r4, r5, r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	7f1b      	ldrb	r3, [r3, #28]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d101      	bne.n	8001a68 <HAL_RTC_SetTime+0x1c>
 8001a64:	2302      	movs	r3, #2
 8001a66:	e08e      	b.n	8001b86 <HAL_RTC_SetTime+0x13a>
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2202      	movs	r2, #2
 8001a72:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d125      	bne.n	8001ac6 <HAL_RTC_SetTime+0x7a>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	2240      	movs	r2, #64	; 0x40
 8001a82:	4013      	ands	r3, r2
 8001a84:	d102      	bne.n	8001a8c <HAL_RTC_SetTime+0x40>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	0018      	movs	r0, r3
 8001a92:	f000 fa53 	bl	8001f3c <RTC_ByteToBcd2>
 8001a96:	0003      	movs	r3, r0
 8001a98:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	785b      	ldrb	r3, [r3, #1]
 8001a9e:	0018      	movs	r0, r3
 8001aa0:	f000 fa4c 	bl	8001f3c <RTC_ByteToBcd2>
 8001aa4:	0003      	movs	r3, r0
 8001aa6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8001aa8:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	789b      	ldrb	r3, [r3, #2]
 8001aae:	0018      	movs	r0, r3
 8001ab0:	f000 fa44 	bl	8001f3c <RTC_ByteToBcd2>
 8001ab4:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001ab6:	0022      	movs	r2, r4
 8001ab8:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	78db      	ldrb	r3, [r3, #3]
 8001abe:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	617b      	str	r3, [r7, #20]
 8001ac4:	e017      	b.n	8001af6 <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	2240      	movs	r2, #64	; 0x40
 8001ace:	4013      	ands	r3, r2
 8001ad0:	d102      	bne.n	8001ad8 <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	785b      	ldrb	r3, [r3, #1]
 8001ae2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8001ae4:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8001ae6:	68ba      	ldr	r2, [r7, #8]
 8001ae8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8001aea:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	78db      	ldrb	r3, [r3, #3]
 8001af0:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8001af2:	4313      	orrs	r3, r2
 8001af4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	22ca      	movs	r2, #202	; 0xca
 8001afc:	625a      	str	r2, [r3, #36]	; 0x24
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2253      	movs	r2, #83	; 0x53
 8001b04:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8001b06:	2513      	movs	r5, #19
 8001b08:	197c      	adds	r4, r7, r5
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	f000 f9a9 	bl	8001e64 <RTC_EnterInitMode>
 8001b12:	0003      	movs	r3, r0
 8001b14:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8001b16:	0028      	movs	r0, r5
 8001b18:	183b      	adds	r3, r7, r0
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d120      	bne.n	8001b62 <HAL_RTC_SetTime+0x116>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	697a      	ldr	r2, [r7, #20]
 8001b26:	491a      	ldr	r1, [pc, #104]	; (8001b90 <HAL_RTC_SetTime+0x144>)
 8001b28:	400a      	ands	r2, r1
 8001b2a:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	689a      	ldr	r2, [r3, #8]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4917      	ldr	r1, [pc, #92]	; (8001b94 <HAL_RTC_SetTime+0x148>)
 8001b38:	400a      	ands	r2, r1
 8001b3a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6899      	ldr	r1, [r3, #8]
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	68da      	ldr	r2, [r3, #12]
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	691b      	ldr	r3, [r3, #16]
 8001b4a:	431a      	orrs	r2, r3
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	430a      	orrs	r2, r1
 8001b52:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8001b54:	183c      	adds	r4, r7, r0
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	0018      	movs	r0, r3
 8001b5a:	f000 f9c6 	bl	8001eea <RTC_ExitInitMode>
 8001b5e:	0003      	movs	r3, r0
 8001b60:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8001b62:	2313      	movs	r3, #19
 8001b64:	18fb      	adds	r3, r7, r3
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d102      	bne.n	8001b72 <HAL_RTC_SetTime+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	22ff      	movs	r2, #255	; 0xff
 8001b78:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	771a      	strb	r2, [r3, #28]

  return status;
 8001b80:	2313      	movs	r3, #19
 8001b82:	18fb      	adds	r3, r7, r3
 8001b84:	781b      	ldrb	r3, [r3, #0]
}
 8001b86:	0018      	movs	r0, r3
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	b006      	add	sp, #24
 8001b8c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b8e:	46c0      	nop			; (mov r8, r8)
 8001b90:	007f7f7f 	.word	0x007f7f7f
 8001b94:	fffbffff 	.word	0xfffbffff

08001b98 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	691b      	ldr	r3, [r3, #16]
 8001bb8:	045b      	lsls	r3, r3, #17
 8001bba:	0c5a      	lsrs	r2, r3, #17
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a22      	ldr	r2, [pc, #136]	; (8001c50 <HAL_RTC_GetTime+0xb8>)
 8001bc8:	4013      	ands	r3, r2
 8001bca:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	0c1b      	lsrs	r3, r3, #16
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	223f      	movs	r2, #63	; 0x3f
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	b2da      	uxtb	r2, r3
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	0a1b      	lsrs	r3, r3, #8
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	227f      	movs	r2, #127	; 0x7f
 8001be4:	4013      	ands	r3, r2
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	227f      	movs	r2, #127	; 0x7f
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	0d9b      	lsrs	r3, r3, #22
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	2201      	movs	r2, #1
 8001c02:	4013      	ands	r3, r2
 8001c04:	b2da      	uxtb	r2, r3
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d11a      	bne.n	8001c46 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	0018      	movs	r0, r3
 8001c16:	f000 f9b2 	bl	8001f7e <RTC_Bcd2ToByte>
 8001c1a:	0003      	movs	r3, r0
 8001c1c:	001a      	movs	r2, r3
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	785b      	ldrb	r3, [r3, #1]
 8001c26:	0018      	movs	r0, r3
 8001c28:	f000 f9a9 	bl	8001f7e <RTC_Bcd2ToByte>
 8001c2c:	0003      	movs	r3, r0
 8001c2e:	001a      	movs	r2, r3
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	789b      	ldrb	r3, [r3, #2]
 8001c38:	0018      	movs	r0, r3
 8001c3a:	f000 f9a0 	bl	8001f7e <RTC_Bcd2ToByte>
 8001c3e:	0003      	movs	r3, r0
 8001c40:	001a      	movs	r2, r3
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	0018      	movs	r0, r3
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	b006      	add	sp, #24
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	007f7f7f 	.word	0x007f7f7f

08001c54 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001c54:	b5b0      	push	{r4, r5, r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	60b9      	str	r1, [r7, #8]
 8001c5e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8001c60:	2300      	movs	r3, #0
 8001c62:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	7f1b      	ldrb	r3, [r3, #28]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d101      	bne.n	8001c70 <HAL_RTC_SetDate+0x1c>
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	e07a      	b.n	8001d66 <HAL_RTC_SetDate+0x112>
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2201      	movs	r2, #1
 8001c74:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2202      	movs	r2, #2
 8001c7a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d10e      	bne.n	8001ca0 <HAL_RTC_SetDate+0x4c>
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	785b      	ldrb	r3, [r3, #1]
 8001c86:	001a      	movs	r2, r3
 8001c88:	2310      	movs	r3, #16
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	d008      	beq.n	8001ca0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	785b      	ldrb	r3, [r3, #1]
 8001c92:	2210      	movs	r2, #16
 8001c94:	4393      	bics	r3, r2
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	330a      	adds	r3, #10
 8001c9a:	b2da      	uxtb	r2, r3
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d11c      	bne.n	8001ce0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	78db      	ldrb	r3, [r3, #3]
 8001caa:	0018      	movs	r0, r3
 8001cac:	f000 f946 	bl	8001f3c <RTC_ByteToBcd2>
 8001cb0:	0003      	movs	r3, r0
 8001cb2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	785b      	ldrb	r3, [r3, #1]
 8001cb8:	0018      	movs	r0, r3
 8001cba:	f000 f93f 	bl	8001f3c <RTC_ByteToBcd2>
 8001cbe:	0003      	movs	r3, r0
 8001cc0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8001cc2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	789b      	ldrb	r3, [r3, #2]
 8001cc8:	0018      	movs	r0, r3
 8001cca:	f000 f937 	bl	8001f3c <RTC_ByteToBcd2>
 8001cce:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8001cd0:	0022      	movs	r2, r4
 8001cd2:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	617b      	str	r3, [r7, #20]
 8001cde:	e00e      	b.n	8001cfe <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	78db      	ldrb	r3, [r3, #3]
 8001ce4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	785b      	ldrb	r3, [r3, #1]
 8001cea:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8001cec:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8001cee:	68ba      	ldr	r2, [r7, #8]
 8001cf0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8001cf2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	22ca      	movs	r2, #202	; 0xca
 8001d04:	625a      	str	r2, [r3, #36]	; 0x24
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2253      	movs	r2, #83	; 0x53
 8001d0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8001d0e:	2513      	movs	r5, #19
 8001d10:	197c      	adds	r4, r7, r5
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	0018      	movs	r0, r3
 8001d16:	f000 f8a5 	bl	8001e64 <RTC_EnterInitMode>
 8001d1a:	0003      	movs	r3, r0
 8001d1c:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8001d1e:	0028      	movs	r0, r5
 8001d20:	183b      	adds	r3, r7, r0
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d10c      	bne.n	8001d42 <HAL_RTC_SetDate+0xee>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	697a      	ldr	r2, [r7, #20]
 8001d2e:	4910      	ldr	r1, [pc, #64]	; (8001d70 <HAL_RTC_SetDate+0x11c>)
 8001d30:	400a      	ands	r2, r1
 8001d32:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8001d34:	183c      	adds	r4, r7, r0
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	0018      	movs	r0, r3
 8001d3a:	f000 f8d6 	bl	8001eea <RTC_ExitInitMode>
 8001d3e:	0003      	movs	r3, r0
 8001d40:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8001d42:	2313      	movs	r3, #19
 8001d44:	18fb      	adds	r3, r7, r3
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d102      	bne.n	8001d52 <HAL_RTC_SetDate+0xfe>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	22ff      	movs	r2, #255	; 0xff
 8001d58:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	771a      	strb	r2, [r3, #28]

  return status;
 8001d60:	2313      	movs	r3, #19
 8001d62:	18fb      	adds	r3, r7, r3
 8001d64:	781b      	ldrb	r3, [r3, #0]
}
 8001d66:	0018      	movs	r0, r3
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	b006      	add	sp, #24
 8001d6c:	bdb0      	pop	{r4, r5, r7, pc}
 8001d6e:	46c0      	nop			; (mov r8, r8)
 8001d70:	00ffff3f 	.word	0x00ffff3f

08001d74 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8001d80:	2300      	movs	r3, #0
 8001d82:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	4a21      	ldr	r2, [pc, #132]	; (8001e10 <HAL_RTC_GetDate+0x9c>)
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	0c1b      	lsrs	r3, r3, #16
 8001d94:	b2da      	uxtb	r2, r3
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	0a1b      	lsrs	r3, r3, #8
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	221f      	movs	r2, #31
 8001da2:	4013      	ands	r3, r2
 8001da4:	b2da      	uxtb	r2, r3
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	223f      	movs	r2, #63	; 0x3f
 8001db0:	4013      	ands	r3, r2
 8001db2:	b2da      	uxtb	r2, r3
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	0b5b      	lsrs	r3, r3, #13
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2207      	movs	r2, #7
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d11a      	bne.n	8001e04 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	78db      	ldrb	r3, [r3, #3]
 8001dd2:	0018      	movs	r0, r3
 8001dd4:	f000 f8d3 	bl	8001f7e <RTC_Bcd2ToByte>
 8001dd8:	0003      	movs	r3, r0
 8001dda:	001a      	movs	r2, r3
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	785b      	ldrb	r3, [r3, #1]
 8001de4:	0018      	movs	r0, r3
 8001de6:	f000 f8ca 	bl	8001f7e <RTC_Bcd2ToByte>
 8001dea:	0003      	movs	r3, r0
 8001dec:	001a      	movs	r2, r3
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	789b      	ldrb	r3, [r3, #2]
 8001df6:	0018      	movs	r0, r3
 8001df8:	f000 f8c1 	bl	8001f7e <RTC_Bcd2ToByte>
 8001dfc:	0003      	movs	r3, r0
 8001dfe:	001a      	movs	r2, r3
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	0018      	movs	r0, r3
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	b006      	add	sp, #24
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	46c0      	nop			; (mov r8, r8)
 8001e10:	00ffff3f 	.word	0x00ffff3f

08001e14 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a0e      	ldr	r2, [pc, #56]	; (8001e60 <HAL_RTC_WaitForSynchro+0x4c>)
 8001e26:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e28:	f7fe fdcc 	bl	80009c4 <HAL_GetTick>
 8001e2c:	0003      	movs	r3, r0
 8001e2e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8001e30:	e00a      	b.n	8001e48 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001e32:	f7fe fdc7 	bl	80009c4 <HAL_GetTick>
 8001e36:	0002      	movs	r2, r0
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	1ad2      	subs	r2, r2, r3
 8001e3c:	23fa      	movs	r3, #250	; 0xfa
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d901      	bls.n	8001e48 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e006      	b.n	8001e56 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	2220      	movs	r2, #32
 8001e50:	4013      	ands	r3, r2
 8001e52:	d0ee      	beq.n	8001e32 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	0018      	movs	r0, r3
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	b004      	add	sp, #16
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	46c0      	nop			; (mov r8, r8)
 8001e60:	00017959 	.word	0x00017959

08001e64 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001e70:	230f      	movs	r3, #15
 8001e72:	18fb      	adds	r3, r7, r3
 8001e74:	2200      	movs	r2, #0
 8001e76:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	2240      	movs	r2, #64	; 0x40
 8001e80:	4013      	ands	r3, r2
 8001e82:	d12b      	bne.n	8001edc <RTC_EnterInitMode+0x78>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68da      	ldr	r2, [r3, #12]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2180      	movs	r1, #128	; 0x80
 8001e90:	430a      	orrs	r2, r1
 8001e92:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001e94:	f7fe fd96 	bl	80009c4 <HAL_GetTick>
 8001e98:	0003      	movs	r3, r0
 8001e9a:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8001e9c:	e013      	b.n	8001ec6 <RTC_EnterInitMode+0x62>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001e9e:	f7fe fd91 	bl	80009c4 <HAL_GetTick>
 8001ea2:	0002      	movs	r2, r0
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	1ad2      	subs	r2, r2, r3
 8001ea8:	200f      	movs	r0, #15
 8001eaa:	183b      	adds	r3, r7, r0
 8001eac:	1839      	adds	r1, r7, r0
 8001eae:	7809      	ldrb	r1, [r1, #0]
 8001eb0:	7019      	strb	r1, [r3, #0]
 8001eb2:	23fa      	movs	r3, #250	; 0xfa
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d905      	bls.n	8001ec6 <RTC_EnterInitMode+0x62>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2204      	movs	r2, #4
 8001ebe:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8001ec0:	183b      	adds	r3, r7, r0
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	2240      	movs	r2, #64	; 0x40
 8001ece:	4013      	ands	r3, r2
 8001ed0:	d104      	bne.n	8001edc <RTC_EnterInitMode+0x78>
 8001ed2:	230f      	movs	r3, #15
 8001ed4:	18fb      	adds	r3, r7, r3
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d1e0      	bne.n	8001e9e <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8001edc:	230f      	movs	r3, #15
 8001ede:	18fb      	adds	r3, r7, r3
 8001ee0:	781b      	ldrb	r3, [r3, #0]
}
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	b004      	add	sp, #16
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8001eea:	b590      	push	{r4, r7, lr}
 8001eec:	b085      	sub	sp, #20
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ef2:	240f      	movs	r4, #15
 8001ef4:	193b      	adds	r3, r7, r4
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68da      	ldr	r2, [r3, #12]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2180      	movs	r1, #128	; 0x80
 8001f06:	438a      	bics	r2, r1
 8001f08:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	2220      	movs	r2, #32
 8001f12:	4013      	ands	r3, r2
 8001f14:	d10b      	bne.n	8001f2e <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	0018      	movs	r0, r3
 8001f1a:	f7ff ff7b 	bl	8001e14 <HAL_RTC_WaitForSynchro>
 8001f1e:	1e03      	subs	r3, r0, #0
 8001f20:	d005      	beq.n	8001f2e <RTC_ExitInitMode+0x44>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2204      	movs	r2, #4
 8001f26:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8001f28:	193b      	adds	r3, r7, r4
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8001f2e:	230f      	movs	r3, #15
 8001f30:	18fb      	adds	r3, r7, r3
 8001f32:	781b      	ldrb	r3, [r3, #0]
}
 8001f34:	0018      	movs	r0, r3
 8001f36:	46bd      	mov	sp, r7
 8001f38:	b005      	add	sp, #20
 8001f3a:	bd90      	pop	{r4, r7, pc}

08001f3c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	0002      	movs	r2, r0
 8001f44:	1dfb      	adds	r3, r7, #7
 8001f46:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8001f4c:	e007      	b.n	8001f5e <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	3301      	adds	r3, #1
 8001f52:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8001f54:	1dfb      	adds	r3, r7, #7
 8001f56:	1dfa      	adds	r2, r7, #7
 8001f58:	7812      	ldrb	r2, [r2, #0]
 8001f5a:	3a0a      	subs	r2, #10
 8001f5c:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8001f5e:	1dfb      	adds	r3, r7, #7
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	2b09      	cmp	r3, #9
 8001f64:	d8f3      	bhi.n	8001f4e <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	011b      	lsls	r3, r3, #4
 8001f6c:	b2da      	uxtb	r2, r3
 8001f6e:	1dfb      	adds	r3, r7, #7
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	b2db      	uxtb	r3, r3
}
 8001f76:	0018      	movs	r0, r3
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	b004      	add	sp, #16
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b084      	sub	sp, #16
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	0002      	movs	r2, r0
 8001f86:	1dfb      	adds	r3, r7, #7
 8001f88:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8001f8e:	1dfb      	adds	r3, r7, #7
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	091b      	lsrs	r3, r3, #4
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	001a      	movs	r2, r3
 8001f98:	0013      	movs	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	189b      	adds	r3, r3, r2
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	1dfb      	adds	r3, r7, #7
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	210f      	movs	r1, #15
 8001fac:	400b      	ands	r3, r1
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	18d3      	adds	r3, r2, r3
 8001fb2:	b2db      	uxtb	r3, r3
}
 8001fb4:	0018      	movs	r0, r3
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	b004      	add	sp, #16
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d101      	bne.n	8001fce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e044      	b.n	8002058 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d107      	bne.n	8001fe6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2278      	movs	r2, #120	; 0x78
 8001fda:	2100      	movs	r1, #0
 8001fdc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	0018      	movs	r0, r3
 8001fe2:	f7fe fb65 	bl	80006b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2224      	movs	r2, #36	; 0x24
 8001fea:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	438a      	bics	r2, r1
 8001ffa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	0018      	movs	r0, r3
 8002000:	f000 f9a4 	bl	800234c <UART_SetConfig>
 8002004:	0003      	movs	r3, r0
 8002006:	2b01      	cmp	r3, #1
 8002008:	d101      	bne.n	800200e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e024      	b.n	8002058 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	0018      	movs	r0, r3
 800201a:	f000 fad7 	bl	80025cc <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	685a      	ldr	r2, [r3, #4]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	490d      	ldr	r1, [pc, #52]	; (8002060 <HAL_UART_Init+0xa4>)
 800202a:	400a      	ands	r2, r1
 800202c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	689a      	ldr	r2, [r3, #8]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	212a      	movs	r1, #42	; 0x2a
 800203a:	438a      	bics	r2, r1
 800203c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2101      	movs	r1, #1
 800204a:	430a      	orrs	r2, r1
 800204c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	0018      	movs	r0, r3
 8002052:	f000 fb6f 	bl	8002734 <UART_CheckIdleState>
 8002056:	0003      	movs	r3, r0
}
 8002058:	0018      	movs	r0, r3
 800205a:	46bd      	mov	sp, r7
 800205c:	b002      	add	sp, #8
 800205e:	bd80      	pop	{r7, pc}
 8002060:	ffffb7ff 	.word	0xffffb7ff

08002064 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b08a      	sub	sp, #40	; 0x28
 8002068:	af02      	add	r7, sp, #8
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	603b      	str	r3, [r7, #0]
 8002070:	1dbb      	adds	r3, r7, #6
 8002072:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002078:	2b20      	cmp	r3, #32
 800207a:	d000      	beq.n	800207e <HAL_UART_Transmit+0x1a>
 800207c:	e08d      	b.n	800219a <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d003      	beq.n	800208c <HAL_UART_Transmit+0x28>
 8002084:	1dbb      	adds	r3, r7, #6
 8002086:	881b      	ldrh	r3, [r3, #0]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d101      	bne.n	8002090 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e085      	b.n	800219c <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	2380      	movs	r3, #128	; 0x80
 8002096:	015b      	lsls	r3, r3, #5
 8002098:	429a      	cmp	r2, r3
 800209a:	d109      	bne.n	80020b0 <HAL_UART_Transmit+0x4c>
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d105      	bne.n	80020b0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	2201      	movs	r2, #1
 80020a8:	4013      	ands	r3, r2
 80020aa:	d001      	beq.n	80020b0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e075      	b.n	800219c <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2284      	movs	r2, #132	; 0x84
 80020b4:	2100      	movs	r1, #0
 80020b6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2221      	movs	r2, #33	; 0x21
 80020bc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80020be:	f7fe fc81 	bl	80009c4 <HAL_GetTick>
 80020c2:	0003      	movs	r3, r0
 80020c4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	1dba      	adds	r2, r7, #6
 80020ca:	2150      	movs	r1, #80	; 0x50
 80020cc:	8812      	ldrh	r2, [r2, #0]
 80020ce:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	1dba      	adds	r2, r7, #6
 80020d4:	2152      	movs	r1, #82	; 0x52
 80020d6:	8812      	ldrh	r2, [r2, #0]
 80020d8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	689a      	ldr	r2, [r3, #8]
 80020de:	2380      	movs	r3, #128	; 0x80
 80020e0:	015b      	lsls	r3, r3, #5
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d108      	bne.n	80020f8 <HAL_UART_Transmit+0x94>
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d104      	bne.n	80020f8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80020ee:	2300      	movs	r3, #0
 80020f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	61bb      	str	r3, [r7, #24]
 80020f6:	e003      	b.n	8002100 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020fc:	2300      	movs	r3, #0
 80020fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002100:	e030      	b.n	8002164 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002102:	697a      	ldr	r2, [r7, #20]
 8002104:	68f8      	ldr	r0, [r7, #12]
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	9300      	str	r3, [sp, #0]
 800210a:	0013      	movs	r3, r2
 800210c:	2200      	movs	r2, #0
 800210e:	2180      	movs	r1, #128	; 0x80
 8002110:	f000 fbb8 	bl	8002884 <UART_WaitOnFlagUntilTimeout>
 8002114:	1e03      	subs	r3, r0, #0
 8002116:	d004      	beq.n	8002122 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2220      	movs	r2, #32
 800211c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e03c      	b.n	800219c <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d10b      	bne.n	8002140 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	881a      	ldrh	r2, [r3, #0]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	05d2      	lsls	r2, r2, #23
 8002132:	0dd2      	lsrs	r2, r2, #23
 8002134:	b292      	uxth	r2, r2
 8002136:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	3302      	adds	r3, #2
 800213c:	61bb      	str	r3, [r7, #24]
 800213e:	e008      	b.n	8002152 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	781a      	ldrb	r2, [r3, #0]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	b292      	uxth	r2, r2
 800214a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	3301      	adds	r3, #1
 8002150:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2252      	movs	r2, #82	; 0x52
 8002156:	5a9b      	ldrh	r3, [r3, r2]
 8002158:	b29b      	uxth	r3, r3
 800215a:	3b01      	subs	r3, #1
 800215c:	b299      	uxth	r1, r3
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2252      	movs	r2, #82	; 0x52
 8002162:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2252      	movs	r2, #82	; 0x52
 8002168:	5a9b      	ldrh	r3, [r3, r2]
 800216a:	b29b      	uxth	r3, r3
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1c8      	bne.n	8002102 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002170:	697a      	ldr	r2, [r7, #20]
 8002172:	68f8      	ldr	r0, [r7, #12]
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	9300      	str	r3, [sp, #0]
 8002178:	0013      	movs	r3, r2
 800217a:	2200      	movs	r2, #0
 800217c:	2140      	movs	r1, #64	; 0x40
 800217e:	f000 fb81 	bl	8002884 <UART_WaitOnFlagUntilTimeout>
 8002182:	1e03      	subs	r3, r0, #0
 8002184:	d004      	beq.n	8002190 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2220      	movs	r2, #32
 800218a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e005      	b.n	800219c <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2220      	movs	r2, #32
 8002194:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002196:	2300      	movs	r3, #0
 8002198:	e000      	b.n	800219c <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 800219a:	2302      	movs	r3, #2
  }
}
 800219c:	0018      	movs	r0, r3
 800219e:	46bd      	mov	sp, r7
 80021a0:	b008      	add	sp, #32
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b08a      	sub	sp, #40	; 0x28
 80021a8:	af02      	add	r7, sp, #8
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	603b      	str	r3, [r7, #0]
 80021b0:	1dbb      	adds	r3, r7, #6
 80021b2:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2280      	movs	r2, #128	; 0x80
 80021b8:	589b      	ldr	r3, [r3, r2]
 80021ba:	2b20      	cmp	r3, #32
 80021bc:	d000      	beq.n	80021c0 <HAL_UART_Receive+0x1c>
 80021be:	e0bd      	b.n	800233c <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <HAL_UART_Receive+0x2a>
 80021c6:	1dbb      	adds	r3, r7, #6
 80021c8:	881b      	ldrh	r3, [r3, #0]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d101      	bne.n	80021d2 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e0b5      	b.n	800233e <HAL_UART_Receive+0x19a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	689a      	ldr	r2, [r3, #8]
 80021d6:	2380      	movs	r3, #128	; 0x80
 80021d8:	015b      	lsls	r3, r3, #5
 80021da:	429a      	cmp	r2, r3
 80021dc:	d109      	bne.n	80021f2 <HAL_UART_Receive+0x4e>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d105      	bne.n	80021f2 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	2201      	movs	r2, #1
 80021ea:	4013      	ands	r3, r2
 80021ec:	d001      	beq.n	80021f2 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e0a5      	b.n	800233e <HAL_UART_Receive+0x19a>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2284      	movs	r2, #132	; 0x84
 80021f6:	2100      	movs	r1, #0
 80021f8:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2280      	movs	r2, #128	; 0x80
 80021fe:	2122      	movs	r1, #34	; 0x22
 8002200:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2200      	movs	r2, #0
 8002206:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002208:	f7fe fbdc 	bl	80009c4 <HAL_GetTick>
 800220c:	0003      	movs	r3, r0
 800220e:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	1dba      	adds	r2, r7, #6
 8002214:	2158      	movs	r1, #88	; 0x58
 8002216:	8812      	ldrh	r2, [r2, #0]
 8002218:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	1dba      	adds	r2, r7, #6
 800221e:	215a      	movs	r1, #90	; 0x5a
 8002220:	8812      	ldrh	r2, [r2, #0]
 8002222:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	689a      	ldr	r2, [r3, #8]
 8002228:	2380      	movs	r3, #128	; 0x80
 800222a:	015b      	lsls	r3, r3, #5
 800222c:	429a      	cmp	r2, r3
 800222e:	d10d      	bne.n	800224c <HAL_UART_Receive+0xa8>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d104      	bne.n	8002242 <HAL_UART_Receive+0x9e>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	225c      	movs	r2, #92	; 0x5c
 800223c:	4942      	ldr	r1, [pc, #264]	; (8002348 <HAL_UART_Receive+0x1a4>)
 800223e:	5299      	strh	r1, [r3, r2]
 8002240:	e01a      	b.n	8002278 <HAL_UART_Receive+0xd4>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	225c      	movs	r2, #92	; 0x5c
 8002246:	21ff      	movs	r1, #255	; 0xff
 8002248:	5299      	strh	r1, [r3, r2]
 800224a:	e015      	b.n	8002278 <HAL_UART_Receive+0xd4>
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d10d      	bne.n	8002270 <HAL_UART_Receive+0xcc>
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	691b      	ldr	r3, [r3, #16]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d104      	bne.n	8002266 <HAL_UART_Receive+0xc2>
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	225c      	movs	r2, #92	; 0x5c
 8002260:	21ff      	movs	r1, #255	; 0xff
 8002262:	5299      	strh	r1, [r3, r2]
 8002264:	e008      	b.n	8002278 <HAL_UART_Receive+0xd4>
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	225c      	movs	r2, #92	; 0x5c
 800226a:	217f      	movs	r1, #127	; 0x7f
 800226c:	5299      	strh	r1, [r3, r2]
 800226e:	e003      	b.n	8002278 <HAL_UART_Receive+0xd4>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	225c      	movs	r2, #92	; 0x5c
 8002274:	2100      	movs	r1, #0
 8002276:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8002278:	2312      	movs	r3, #18
 800227a:	18fb      	adds	r3, r7, r3
 800227c:	68fa      	ldr	r2, [r7, #12]
 800227e:	215c      	movs	r1, #92	; 0x5c
 8002280:	5a52      	ldrh	r2, [r2, r1]
 8002282:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	2380      	movs	r3, #128	; 0x80
 800228a:	015b      	lsls	r3, r3, #5
 800228c:	429a      	cmp	r2, r3
 800228e:	d108      	bne.n	80022a2 <HAL_UART_Receive+0xfe>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	691b      	ldr	r3, [r3, #16]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d104      	bne.n	80022a2 <HAL_UART_Receive+0xfe>
    {
      pdata8bits  = NULL;
 8002298:	2300      	movs	r3, #0
 800229a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	61bb      	str	r3, [r7, #24]
 80022a0:	e003      	b.n	80022aa <HAL_UART_Receive+0x106>
    }
    else
    {
      pdata8bits  = pData;
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80022a6:	2300      	movs	r3, #0
 80022a8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80022aa:	e03b      	b.n	8002324 <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80022ac:	697a      	ldr	r2, [r7, #20]
 80022ae:	68f8      	ldr	r0, [r7, #12]
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	9300      	str	r3, [sp, #0]
 80022b4:	0013      	movs	r3, r2
 80022b6:	2200      	movs	r2, #0
 80022b8:	2120      	movs	r1, #32
 80022ba:	f000 fae3 	bl	8002884 <UART_WaitOnFlagUntilTimeout>
 80022be:	1e03      	subs	r3, r0, #0
 80022c0:	d005      	beq.n	80022ce <HAL_UART_Receive+0x12a>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2280      	movs	r2, #128	; 0x80
 80022c6:	2120      	movs	r1, #32
 80022c8:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e037      	b.n	800233e <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d10e      	bne.n	80022f2 <HAL_UART_Receive+0x14e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80022da:	b29b      	uxth	r3, r3
 80022dc:	2212      	movs	r2, #18
 80022de:	18ba      	adds	r2, r7, r2
 80022e0:	8812      	ldrh	r2, [r2, #0]
 80022e2:	4013      	ands	r3, r2
 80022e4:	b29a      	uxth	r2, r3
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	3302      	adds	r3, #2
 80022ee:	61bb      	str	r3, [r7, #24]
 80022f0:	e00f      	b.n	8002312 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	2212      	movs	r2, #18
 80022fe:	18ba      	adds	r2, r7, r2
 8002300:	8812      	ldrh	r2, [r2, #0]
 8002302:	b2d2      	uxtb	r2, r2
 8002304:	4013      	ands	r3, r2
 8002306:	b2da      	uxtb	r2, r3
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	3301      	adds	r3, #1
 8002310:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	225a      	movs	r2, #90	; 0x5a
 8002316:	5a9b      	ldrh	r3, [r3, r2]
 8002318:	b29b      	uxth	r3, r3
 800231a:	3b01      	subs	r3, #1
 800231c:	b299      	uxth	r1, r3
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	225a      	movs	r2, #90	; 0x5a
 8002322:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	225a      	movs	r2, #90	; 0x5a
 8002328:	5a9b      	ldrh	r3, [r3, r2]
 800232a:	b29b      	uxth	r3, r3
 800232c:	2b00      	cmp	r3, #0
 800232e:	d1bd      	bne.n	80022ac <HAL_UART_Receive+0x108>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2280      	movs	r2, #128	; 0x80
 8002334:	2120      	movs	r1, #32
 8002336:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002338:	2300      	movs	r3, #0
 800233a:	e000      	b.n	800233e <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 800233c:	2302      	movs	r3, #2
  }
}
 800233e:	0018      	movs	r0, r3
 8002340:	46bd      	mov	sp, r7
 8002342:	b008      	add	sp, #32
 8002344:	bd80      	pop	{r7, pc}
 8002346:	46c0      	nop			; (mov r8, r8)
 8002348:	000001ff 	.word	0x000001ff

0800234c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b088      	sub	sp, #32
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002354:	231e      	movs	r3, #30
 8002356:	18fb      	adds	r3, r7, r3
 8002358:	2200      	movs	r2, #0
 800235a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	431a      	orrs	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	431a      	orrs	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	69db      	ldr	r3, [r3, #28]
 8002370:	4313      	orrs	r3, r2
 8002372:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a8d      	ldr	r2, [pc, #564]	; (80025b0 <UART_SetConfig+0x264>)
 800237c:	4013      	ands	r3, r2
 800237e:	0019      	movs	r1, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	697a      	ldr	r2, [r7, #20]
 8002386:	430a      	orrs	r2, r1
 8002388:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	4a88      	ldr	r2, [pc, #544]	; (80025b4 <UART_SetConfig+0x268>)
 8002392:	4013      	ands	r3, r2
 8002394:	0019      	movs	r1, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	68da      	ldr	r2, [r3, #12]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	430a      	orrs	r2, r1
 80023a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a1b      	ldr	r3, [r3, #32]
 80023ac:	697a      	ldr	r2, [r7, #20]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	4a7f      	ldr	r2, [pc, #508]	; (80025b8 <UART_SetConfig+0x26c>)
 80023ba:	4013      	ands	r3, r2
 80023bc:	0019      	movs	r1, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	430a      	orrs	r2, r1
 80023c6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a7b      	ldr	r2, [pc, #492]	; (80025bc <UART_SetConfig+0x270>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d127      	bne.n	8002422 <UART_SetConfig+0xd6>
 80023d2:	4b7b      	ldr	r3, [pc, #492]	; (80025c0 <UART_SetConfig+0x274>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	2203      	movs	r2, #3
 80023d8:	4013      	ands	r3, r2
 80023da:	2b03      	cmp	r3, #3
 80023dc:	d00d      	beq.n	80023fa <UART_SetConfig+0xae>
 80023de:	d81b      	bhi.n	8002418 <UART_SetConfig+0xcc>
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d014      	beq.n	800240e <UART_SetConfig+0xc2>
 80023e4:	d818      	bhi.n	8002418 <UART_SetConfig+0xcc>
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d002      	beq.n	80023f0 <UART_SetConfig+0xa4>
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d00a      	beq.n	8002404 <UART_SetConfig+0xb8>
 80023ee:	e013      	b.n	8002418 <UART_SetConfig+0xcc>
 80023f0:	231f      	movs	r3, #31
 80023f2:	18fb      	adds	r3, r7, r3
 80023f4:	2200      	movs	r2, #0
 80023f6:	701a      	strb	r2, [r3, #0]
 80023f8:	e021      	b.n	800243e <UART_SetConfig+0xf2>
 80023fa:	231f      	movs	r3, #31
 80023fc:	18fb      	adds	r3, r7, r3
 80023fe:	2202      	movs	r2, #2
 8002400:	701a      	strb	r2, [r3, #0]
 8002402:	e01c      	b.n	800243e <UART_SetConfig+0xf2>
 8002404:	231f      	movs	r3, #31
 8002406:	18fb      	adds	r3, r7, r3
 8002408:	2204      	movs	r2, #4
 800240a:	701a      	strb	r2, [r3, #0]
 800240c:	e017      	b.n	800243e <UART_SetConfig+0xf2>
 800240e:	231f      	movs	r3, #31
 8002410:	18fb      	adds	r3, r7, r3
 8002412:	2208      	movs	r2, #8
 8002414:	701a      	strb	r2, [r3, #0]
 8002416:	e012      	b.n	800243e <UART_SetConfig+0xf2>
 8002418:	231f      	movs	r3, #31
 800241a:	18fb      	adds	r3, r7, r3
 800241c:	2210      	movs	r2, #16
 800241e:	701a      	strb	r2, [r3, #0]
 8002420:	e00d      	b.n	800243e <UART_SetConfig+0xf2>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a67      	ldr	r2, [pc, #412]	; (80025c4 <UART_SetConfig+0x278>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d104      	bne.n	8002436 <UART_SetConfig+0xea>
 800242c:	231f      	movs	r3, #31
 800242e:	18fb      	adds	r3, r7, r3
 8002430:	2200      	movs	r2, #0
 8002432:	701a      	strb	r2, [r3, #0]
 8002434:	e003      	b.n	800243e <UART_SetConfig+0xf2>
 8002436:	231f      	movs	r3, #31
 8002438:	18fb      	adds	r3, r7, r3
 800243a:	2210      	movs	r2, #16
 800243c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	69da      	ldr	r2, [r3, #28]
 8002442:	2380      	movs	r3, #128	; 0x80
 8002444:	021b      	lsls	r3, r3, #8
 8002446:	429a      	cmp	r2, r3
 8002448:	d15c      	bne.n	8002504 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 800244a:	231f      	movs	r3, #31
 800244c:	18fb      	adds	r3, r7, r3
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b08      	cmp	r3, #8
 8002452:	d015      	beq.n	8002480 <UART_SetConfig+0x134>
 8002454:	dc18      	bgt.n	8002488 <UART_SetConfig+0x13c>
 8002456:	2b04      	cmp	r3, #4
 8002458:	d00d      	beq.n	8002476 <UART_SetConfig+0x12a>
 800245a:	dc15      	bgt.n	8002488 <UART_SetConfig+0x13c>
 800245c:	2b00      	cmp	r3, #0
 800245e:	d002      	beq.n	8002466 <UART_SetConfig+0x11a>
 8002460:	2b02      	cmp	r3, #2
 8002462:	d005      	beq.n	8002470 <UART_SetConfig+0x124>
 8002464:	e010      	b.n	8002488 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002466:	f7ff f965 	bl	8001734 <HAL_RCC_GetPCLK1Freq>
 800246a:	0003      	movs	r3, r0
 800246c:	61bb      	str	r3, [r7, #24]
        break;
 800246e:	e012      	b.n	8002496 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002470:	4b55      	ldr	r3, [pc, #340]	; (80025c8 <UART_SetConfig+0x27c>)
 8002472:	61bb      	str	r3, [r7, #24]
        break;
 8002474:	e00f      	b.n	8002496 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002476:	f7ff f8fd 	bl	8001674 <HAL_RCC_GetSysClockFreq>
 800247a:	0003      	movs	r3, r0
 800247c:	61bb      	str	r3, [r7, #24]
        break;
 800247e:	e00a      	b.n	8002496 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002480:	2380      	movs	r3, #128	; 0x80
 8002482:	021b      	lsls	r3, r3, #8
 8002484:	61bb      	str	r3, [r7, #24]
        break;
 8002486:	e006      	b.n	8002496 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002488:	2300      	movs	r3, #0
 800248a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800248c:	231e      	movs	r3, #30
 800248e:	18fb      	adds	r3, r7, r3
 8002490:	2201      	movs	r2, #1
 8002492:	701a      	strb	r2, [r3, #0]
        break;
 8002494:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d100      	bne.n	800249e <UART_SetConfig+0x152>
 800249c:	e07a      	b.n	8002594 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	005a      	lsls	r2, r3, #1
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	085b      	lsrs	r3, r3, #1
 80024a8:	18d2      	adds	r2, r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	0019      	movs	r1, r3
 80024b0:	0010      	movs	r0, r2
 80024b2:	f7fd fe3b 	bl	800012c <__udivsi3>
 80024b6:	0003      	movs	r3, r0
 80024b8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	2b0f      	cmp	r3, #15
 80024be:	d91c      	bls.n	80024fa <UART_SetConfig+0x1ae>
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	2380      	movs	r3, #128	; 0x80
 80024c4:	025b      	lsls	r3, r3, #9
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d217      	bcs.n	80024fa <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	200e      	movs	r0, #14
 80024d0:	183b      	adds	r3, r7, r0
 80024d2:	210f      	movs	r1, #15
 80024d4:	438a      	bics	r2, r1
 80024d6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	085b      	lsrs	r3, r3, #1
 80024dc:	b29b      	uxth	r3, r3
 80024de:	2207      	movs	r2, #7
 80024e0:	4013      	ands	r3, r2
 80024e2:	b299      	uxth	r1, r3
 80024e4:	183b      	adds	r3, r7, r0
 80024e6:	183a      	adds	r2, r7, r0
 80024e8:	8812      	ldrh	r2, [r2, #0]
 80024ea:	430a      	orrs	r2, r1
 80024ec:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	183a      	adds	r2, r7, r0
 80024f4:	8812      	ldrh	r2, [r2, #0]
 80024f6:	60da      	str	r2, [r3, #12]
 80024f8:	e04c      	b.n	8002594 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80024fa:	231e      	movs	r3, #30
 80024fc:	18fb      	adds	r3, r7, r3
 80024fe:	2201      	movs	r2, #1
 8002500:	701a      	strb	r2, [r3, #0]
 8002502:	e047      	b.n	8002594 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002504:	231f      	movs	r3, #31
 8002506:	18fb      	adds	r3, r7, r3
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	2b08      	cmp	r3, #8
 800250c:	d015      	beq.n	800253a <UART_SetConfig+0x1ee>
 800250e:	dc18      	bgt.n	8002542 <UART_SetConfig+0x1f6>
 8002510:	2b04      	cmp	r3, #4
 8002512:	d00d      	beq.n	8002530 <UART_SetConfig+0x1e4>
 8002514:	dc15      	bgt.n	8002542 <UART_SetConfig+0x1f6>
 8002516:	2b00      	cmp	r3, #0
 8002518:	d002      	beq.n	8002520 <UART_SetConfig+0x1d4>
 800251a:	2b02      	cmp	r3, #2
 800251c:	d005      	beq.n	800252a <UART_SetConfig+0x1de>
 800251e:	e010      	b.n	8002542 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002520:	f7ff f908 	bl	8001734 <HAL_RCC_GetPCLK1Freq>
 8002524:	0003      	movs	r3, r0
 8002526:	61bb      	str	r3, [r7, #24]
        break;
 8002528:	e012      	b.n	8002550 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800252a:	4b27      	ldr	r3, [pc, #156]	; (80025c8 <UART_SetConfig+0x27c>)
 800252c:	61bb      	str	r3, [r7, #24]
        break;
 800252e:	e00f      	b.n	8002550 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002530:	f7ff f8a0 	bl	8001674 <HAL_RCC_GetSysClockFreq>
 8002534:	0003      	movs	r3, r0
 8002536:	61bb      	str	r3, [r7, #24]
        break;
 8002538:	e00a      	b.n	8002550 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800253a:	2380      	movs	r3, #128	; 0x80
 800253c:	021b      	lsls	r3, r3, #8
 800253e:	61bb      	str	r3, [r7, #24]
        break;
 8002540:	e006      	b.n	8002550 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002542:	2300      	movs	r3, #0
 8002544:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002546:	231e      	movs	r3, #30
 8002548:	18fb      	adds	r3, r7, r3
 800254a:	2201      	movs	r2, #1
 800254c:	701a      	strb	r2, [r3, #0]
        break;
 800254e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d01e      	beq.n	8002594 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	085a      	lsrs	r2, r3, #1
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	18d2      	adds	r2, r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	0019      	movs	r1, r3
 8002566:	0010      	movs	r0, r2
 8002568:	f7fd fde0 	bl	800012c <__udivsi3>
 800256c:	0003      	movs	r3, r0
 800256e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	2b0f      	cmp	r3, #15
 8002574:	d90a      	bls.n	800258c <UART_SetConfig+0x240>
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	2380      	movs	r3, #128	; 0x80
 800257a:	025b      	lsls	r3, r3, #9
 800257c:	429a      	cmp	r2, r3
 800257e:	d205      	bcs.n	800258c <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	b29a      	uxth	r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	60da      	str	r2, [r3, #12]
 800258a:	e003      	b.n	8002594 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 800258c:	231e      	movs	r3, #30
 800258e:	18fb      	adds	r3, r7, r3
 8002590:	2201      	movs	r2, #1
 8002592:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80025a0:	231e      	movs	r3, #30
 80025a2:	18fb      	adds	r3, r7, r3
 80025a4:	781b      	ldrb	r3, [r3, #0]
}
 80025a6:	0018      	movs	r0, r3
 80025a8:	46bd      	mov	sp, r7
 80025aa:	b008      	add	sp, #32
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	46c0      	nop			; (mov r8, r8)
 80025b0:	ffff69f3 	.word	0xffff69f3
 80025b4:	ffffcfff 	.word	0xffffcfff
 80025b8:	fffff4ff 	.word	0xfffff4ff
 80025bc:	40013800 	.word	0x40013800
 80025c0:	40021000 	.word	0x40021000
 80025c4:	40004400 	.word	0x40004400
 80025c8:	007a1200 	.word	0x007a1200

080025cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d8:	2201      	movs	r2, #1
 80025da:	4013      	ands	r3, r2
 80025dc:	d00b      	beq.n	80025f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	4a4a      	ldr	r2, [pc, #296]	; (8002710 <UART_AdvFeatureConfig+0x144>)
 80025e6:	4013      	ands	r3, r2
 80025e8:	0019      	movs	r1, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	430a      	orrs	r2, r1
 80025f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fa:	2202      	movs	r2, #2
 80025fc:	4013      	ands	r3, r2
 80025fe:	d00b      	beq.n	8002618 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	4a43      	ldr	r2, [pc, #268]	; (8002714 <UART_AdvFeatureConfig+0x148>)
 8002608:	4013      	ands	r3, r2
 800260a:	0019      	movs	r1, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	430a      	orrs	r2, r1
 8002616:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261c:	2204      	movs	r2, #4
 800261e:	4013      	ands	r3, r2
 8002620:	d00b      	beq.n	800263a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	4a3b      	ldr	r2, [pc, #236]	; (8002718 <UART_AdvFeatureConfig+0x14c>)
 800262a:	4013      	ands	r3, r2
 800262c:	0019      	movs	r1, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	430a      	orrs	r2, r1
 8002638:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263e:	2208      	movs	r2, #8
 8002640:	4013      	ands	r3, r2
 8002642:	d00b      	beq.n	800265c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	4a34      	ldr	r2, [pc, #208]	; (800271c <UART_AdvFeatureConfig+0x150>)
 800264c:	4013      	ands	r3, r2
 800264e:	0019      	movs	r1, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	430a      	orrs	r2, r1
 800265a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002660:	2210      	movs	r2, #16
 8002662:	4013      	ands	r3, r2
 8002664:	d00b      	beq.n	800267e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	4a2c      	ldr	r2, [pc, #176]	; (8002720 <UART_AdvFeatureConfig+0x154>)
 800266e:	4013      	ands	r3, r2
 8002670:	0019      	movs	r1, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	430a      	orrs	r2, r1
 800267c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	2220      	movs	r2, #32
 8002684:	4013      	ands	r3, r2
 8002686:	d00b      	beq.n	80026a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	4a25      	ldr	r2, [pc, #148]	; (8002724 <UART_AdvFeatureConfig+0x158>)
 8002690:	4013      	ands	r3, r2
 8002692:	0019      	movs	r1, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	430a      	orrs	r2, r1
 800269e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a4:	2240      	movs	r2, #64	; 0x40
 80026a6:	4013      	ands	r3, r2
 80026a8:	d01d      	beq.n	80026e6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	4a1d      	ldr	r2, [pc, #116]	; (8002728 <UART_AdvFeatureConfig+0x15c>)
 80026b2:	4013      	ands	r3, r2
 80026b4:	0019      	movs	r1, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	430a      	orrs	r2, r1
 80026c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026c6:	2380      	movs	r3, #128	; 0x80
 80026c8:	035b      	lsls	r3, r3, #13
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d10b      	bne.n	80026e6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	4a15      	ldr	r2, [pc, #84]	; (800272c <UART_AdvFeatureConfig+0x160>)
 80026d6:	4013      	ands	r3, r2
 80026d8:	0019      	movs	r1, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	430a      	orrs	r2, r1
 80026e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ea:	2280      	movs	r2, #128	; 0x80
 80026ec:	4013      	ands	r3, r2
 80026ee:	d00b      	beq.n	8002708 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	4a0e      	ldr	r2, [pc, #56]	; (8002730 <UART_AdvFeatureConfig+0x164>)
 80026f8:	4013      	ands	r3, r2
 80026fa:	0019      	movs	r1, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	430a      	orrs	r2, r1
 8002706:	605a      	str	r2, [r3, #4]
  }
}
 8002708:	46c0      	nop			; (mov r8, r8)
 800270a:	46bd      	mov	sp, r7
 800270c:	b002      	add	sp, #8
 800270e:	bd80      	pop	{r7, pc}
 8002710:	fffdffff 	.word	0xfffdffff
 8002714:	fffeffff 	.word	0xfffeffff
 8002718:	fffbffff 	.word	0xfffbffff
 800271c:	ffff7fff 	.word	0xffff7fff
 8002720:	ffffefff 	.word	0xffffefff
 8002724:	ffffdfff 	.word	0xffffdfff
 8002728:	ffefffff 	.word	0xffefffff
 800272c:	ff9fffff 	.word	0xff9fffff
 8002730:	fff7ffff 	.word	0xfff7ffff

08002734 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b092      	sub	sp, #72	; 0x48
 8002738:	af02      	add	r7, sp, #8
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2284      	movs	r2, #132	; 0x84
 8002740:	2100      	movs	r1, #0
 8002742:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002744:	f7fe f93e 	bl	80009c4 <HAL_GetTick>
 8002748:	0003      	movs	r3, r0
 800274a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2208      	movs	r2, #8
 8002754:	4013      	ands	r3, r2
 8002756:	2b08      	cmp	r3, #8
 8002758:	d12c      	bne.n	80027b4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800275a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800275c:	2280      	movs	r2, #128	; 0x80
 800275e:	0391      	lsls	r1, r2, #14
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	4a46      	ldr	r2, [pc, #280]	; (800287c <UART_CheckIdleState+0x148>)
 8002764:	9200      	str	r2, [sp, #0]
 8002766:	2200      	movs	r2, #0
 8002768:	f000 f88c 	bl	8002884 <UART_WaitOnFlagUntilTimeout>
 800276c:	1e03      	subs	r3, r0, #0
 800276e:	d021      	beq.n	80027b4 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002770:	f3ef 8310 	mrs	r3, PRIMASK
 8002774:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002778:	63bb      	str	r3, [r7, #56]	; 0x38
 800277a:	2301      	movs	r3, #1
 800277c:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800277e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002780:	f383 8810 	msr	PRIMASK, r3
}
 8002784:	46c0      	nop			; (mov r8, r8)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2180      	movs	r1, #128	; 0x80
 8002792:	438a      	bics	r2, r1
 8002794:	601a      	str	r2, [r3, #0]
 8002796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002798:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800279a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800279c:	f383 8810 	msr	PRIMASK, r3
}
 80027a0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2220      	movs	r2, #32
 80027a6:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2278      	movs	r2, #120	; 0x78
 80027ac:	2100      	movs	r1, #0
 80027ae:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e05f      	b.n	8002874 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2204      	movs	r2, #4
 80027bc:	4013      	ands	r3, r2
 80027be:	2b04      	cmp	r3, #4
 80027c0:	d146      	bne.n	8002850 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80027c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027c4:	2280      	movs	r2, #128	; 0x80
 80027c6:	03d1      	lsls	r1, r2, #15
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	4a2c      	ldr	r2, [pc, #176]	; (800287c <UART_CheckIdleState+0x148>)
 80027cc:	9200      	str	r2, [sp, #0]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f000 f858 	bl	8002884 <UART_WaitOnFlagUntilTimeout>
 80027d4:	1e03      	subs	r3, r0, #0
 80027d6:	d03b      	beq.n	8002850 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027d8:	f3ef 8310 	mrs	r3, PRIMASK
 80027dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80027de:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027e0:	637b      	str	r3, [r7, #52]	; 0x34
 80027e2:	2301      	movs	r3, #1
 80027e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	f383 8810 	msr	PRIMASK, r3
}
 80027ec:	46c0      	nop			; (mov r8, r8)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4921      	ldr	r1, [pc, #132]	; (8002880 <UART_CheckIdleState+0x14c>)
 80027fa:	400a      	ands	r2, r1
 80027fc:	601a      	str	r2, [r3, #0]
 80027fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002800:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	f383 8810 	msr	PRIMASK, r3
}
 8002808:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800280a:	f3ef 8310 	mrs	r3, PRIMASK
 800280e:	61bb      	str	r3, [r7, #24]
  return(result);
 8002810:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002812:	633b      	str	r3, [r7, #48]	; 0x30
 8002814:	2301      	movs	r3, #1
 8002816:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	f383 8810 	msr	PRIMASK, r3
}
 800281e:	46c0      	nop			; (mov r8, r8)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	689a      	ldr	r2, [r3, #8]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2101      	movs	r1, #1
 800282c:	438a      	bics	r2, r1
 800282e:	609a      	str	r2, [r3, #8]
 8002830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002832:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002834:	6a3b      	ldr	r3, [r7, #32]
 8002836:	f383 8810 	msr	PRIMASK, r3
}
 800283a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2280      	movs	r2, #128	; 0x80
 8002840:	2120      	movs	r1, #32
 8002842:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2278      	movs	r2, #120	; 0x78
 8002848:	2100      	movs	r1, #0
 800284a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e011      	b.n	8002874 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2220      	movs	r2, #32
 8002854:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2280      	movs	r2, #128	; 0x80
 800285a:	2120      	movs	r1, #32
 800285c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2278      	movs	r2, #120	; 0x78
 800286e:	2100      	movs	r1, #0
 8002870:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002872:	2300      	movs	r3, #0
}
 8002874:	0018      	movs	r0, r3
 8002876:	46bd      	mov	sp, r7
 8002878:	b010      	add	sp, #64	; 0x40
 800287a:	bd80      	pop	{r7, pc}
 800287c:	01ffffff 	.word	0x01ffffff
 8002880:	fffffedf 	.word	0xfffffedf

08002884 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	603b      	str	r3, [r7, #0]
 8002890:	1dfb      	adds	r3, r7, #7
 8002892:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002894:	e04b      	b.n	800292e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	3301      	adds	r3, #1
 800289a:	d048      	beq.n	800292e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800289c:	f7fe f892 	bl	80009c4 <HAL_GetTick>
 80028a0:	0002      	movs	r2, r0
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d302      	bcc.n	80028b2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e04b      	b.n	800294e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2204      	movs	r2, #4
 80028be:	4013      	ands	r3, r2
 80028c0:	d035      	beq.n	800292e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	69db      	ldr	r3, [r3, #28]
 80028c8:	2208      	movs	r2, #8
 80028ca:	4013      	ands	r3, r2
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	d111      	bne.n	80028f4 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2208      	movs	r2, #8
 80028d6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	0018      	movs	r0, r3
 80028dc:	f000 f83c 	bl	8002958 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2284      	movs	r2, #132	; 0x84
 80028e4:	2108      	movs	r1, #8
 80028e6:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2278      	movs	r2, #120	; 0x78
 80028ec:	2100      	movs	r1, #0
 80028ee:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e02c      	b.n	800294e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	69da      	ldr	r2, [r3, #28]
 80028fa:	2380      	movs	r3, #128	; 0x80
 80028fc:	011b      	lsls	r3, r3, #4
 80028fe:	401a      	ands	r2, r3
 8002900:	2380      	movs	r3, #128	; 0x80
 8002902:	011b      	lsls	r3, r3, #4
 8002904:	429a      	cmp	r2, r3
 8002906:	d112      	bne.n	800292e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2280      	movs	r2, #128	; 0x80
 800290e:	0112      	lsls	r2, r2, #4
 8002910:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	0018      	movs	r0, r3
 8002916:	f000 f81f 	bl	8002958 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2284      	movs	r2, #132	; 0x84
 800291e:	2120      	movs	r1, #32
 8002920:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2278      	movs	r2, #120	; 0x78
 8002926:	2100      	movs	r1, #0
 8002928:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e00f      	b.n	800294e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	69db      	ldr	r3, [r3, #28]
 8002934:	68ba      	ldr	r2, [r7, #8]
 8002936:	4013      	ands	r3, r2
 8002938:	68ba      	ldr	r2, [r7, #8]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	425a      	negs	r2, r3
 800293e:	4153      	adcs	r3, r2
 8002940:	b2db      	uxtb	r3, r3
 8002942:	001a      	movs	r2, r3
 8002944:	1dfb      	adds	r3, r7, #7
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	429a      	cmp	r2, r3
 800294a:	d0a4      	beq.n	8002896 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	0018      	movs	r0, r3
 8002950:	46bd      	mov	sp, r7
 8002952:	b004      	add	sp, #16
 8002954:	bd80      	pop	{r7, pc}
	...

08002958 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b08e      	sub	sp, #56	; 0x38
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002960:	f3ef 8310 	mrs	r3, PRIMASK
 8002964:	617b      	str	r3, [r7, #20]
  return(result);
 8002966:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002968:	637b      	str	r3, [r7, #52]	; 0x34
 800296a:	2301      	movs	r3, #1
 800296c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	f383 8810 	msr	PRIMASK, r3
}
 8002974:	46c0      	nop			; (mov r8, r8)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4926      	ldr	r1, [pc, #152]	; (8002a1c <UART_EndRxTransfer+0xc4>)
 8002982:	400a      	ands	r2, r1
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002988:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	f383 8810 	msr	PRIMASK, r3
}
 8002990:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002992:	f3ef 8310 	mrs	r3, PRIMASK
 8002996:	623b      	str	r3, [r7, #32]
  return(result);
 8002998:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800299a:	633b      	str	r3, [r7, #48]	; 0x30
 800299c:	2301      	movs	r3, #1
 800299e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a2:	f383 8810 	msr	PRIMASK, r3
}
 80029a6:	46c0      	nop			; (mov r8, r8)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689a      	ldr	r2, [r3, #8]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2101      	movs	r1, #1
 80029b4:	438a      	bics	r2, r1
 80029b6:	609a      	str	r2, [r3, #8]
 80029b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ba:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029be:	f383 8810 	msr	PRIMASK, r3
}
 80029c2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d118      	bne.n	80029fe <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029cc:	f3ef 8310 	mrs	r3, PRIMASK
 80029d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80029d2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029d6:	2301      	movs	r3, #1
 80029d8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f383 8810 	msr	PRIMASK, r3
}
 80029e0:	46c0      	nop			; (mov r8, r8)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2110      	movs	r1, #16
 80029ee:	438a      	bics	r2, r1
 80029f0:	601a      	str	r2, [r3, #0]
 80029f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	f383 8810 	msr	PRIMASK, r3
}
 80029fc:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2280      	movs	r2, #128	; 0x80
 8002a02:	2120      	movs	r1, #32
 8002a04:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002a12:	46c0      	nop			; (mov r8, r8)
 8002a14:	46bd      	mov	sp, r7
 8002a16:	b00e      	add	sp, #56	; 0x38
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	46c0      	nop			; (mov r8, r8)
 8002a1c:	fffffedf 	.word	0xfffffedf

08002a20 <std>:
 8002a20:	2300      	movs	r3, #0
 8002a22:	b510      	push	{r4, lr}
 8002a24:	0004      	movs	r4, r0
 8002a26:	6003      	str	r3, [r0, #0]
 8002a28:	6043      	str	r3, [r0, #4]
 8002a2a:	6083      	str	r3, [r0, #8]
 8002a2c:	8181      	strh	r1, [r0, #12]
 8002a2e:	6643      	str	r3, [r0, #100]	; 0x64
 8002a30:	81c2      	strh	r2, [r0, #14]
 8002a32:	6103      	str	r3, [r0, #16]
 8002a34:	6143      	str	r3, [r0, #20]
 8002a36:	6183      	str	r3, [r0, #24]
 8002a38:	0019      	movs	r1, r3
 8002a3a:	2208      	movs	r2, #8
 8002a3c:	305c      	adds	r0, #92	; 0x5c
 8002a3e:	f000 f92f 	bl	8002ca0 <memset>
 8002a42:	4b0b      	ldr	r3, [pc, #44]	; (8002a70 <std+0x50>)
 8002a44:	6224      	str	r4, [r4, #32]
 8002a46:	6263      	str	r3, [r4, #36]	; 0x24
 8002a48:	4b0a      	ldr	r3, [pc, #40]	; (8002a74 <std+0x54>)
 8002a4a:	62a3      	str	r3, [r4, #40]	; 0x28
 8002a4c:	4b0a      	ldr	r3, [pc, #40]	; (8002a78 <std+0x58>)
 8002a4e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002a50:	4b0a      	ldr	r3, [pc, #40]	; (8002a7c <std+0x5c>)
 8002a52:	6323      	str	r3, [r4, #48]	; 0x30
 8002a54:	4b0a      	ldr	r3, [pc, #40]	; (8002a80 <std+0x60>)
 8002a56:	429c      	cmp	r4, r3
 8002a58:	d005      	beq.n	8002a66 <std+0x46>
 8002a5a:	4b0a      	ldr	r3, [pc, #40]	; (8002a84 <std+0x64>)
 8002a5c:	429c      	cmp	r4, r3
 8002a5e:	d002      	beq.n	8002a66 <std+0x46>
 8002a60:	4b09      	ldr	r3, [pc, #36]	; (8002a88 <std+0x68>)
 8002a62:	429c      	cmp	r4, r3
 8002a64:	d103      	bne.n	8002a6e <std+0x4e>
 8002a66:	0020      	movs	r0, r4
 8002a68:	3058      	adds	r0, #88	; 0x58
 8002a6a:	f000 f999 	bl	8002da0 <__retarget_lock_init_recursive>
 8002a6e:	bd10      	pop	{r4, pc}
 8002a70:	08002c09 	.word	0x08002c09
 8002a74:	08002c31 	.word	0x08002c31
 8002a78:	08002c69 	.word	0x08002c69
 8002a7c:	08002c95 	.word	0x08002c95
 8002a80:	20000134 	.word	0x20000134
 8002a84:	2000019c 	.word	0x2000019c
 8002a88:	20000204 	.word	0x20000204

08002a8c <stdio_exit_handler>:
 8002a8c:	b510      	push	{r4, lr}
 8002a8e:	4a03      	ldr	r2, [pc, #12]	; (8002a9c <stdio_exit_handler+0x10>)
 8002a90:	4903      	ldr	r1, [pc, #12]	; (8002aa0 <stdio_exit_handler+0x14>)
 8002a92:	4804      	ldr	r0, [pc, #16]	; (8002aa4 <stdio_exit_handler+0x18>)
 8002a94:	f000 f86c 	bl	8002b70 <_fwalk_sglue>
 8002a98:	bd10      	pop	{r4, pc}
 8002a9a:	46c0      	nop			; (mov r8, r8)
 8002a9c:	2000000c 	.word	0x2000000c
 8002aa0:	08003905 	.word	0x08003905
 8002aa4:	20000018 	.word	0x20000018

08002aa8 <cleanup_stdio>:
 8002aa8:	6841      	ldr	r1, [r0, #4]
 8002aaa:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <cleanup_stdio+0x30>)
 8002aac:	b510      	push	{r4, lr}
 8002aae:	0004      	movs	r4, r0
 8002ab0:	4299      	cmp	r1, r3
 8002ab2:	d001      	beq.n	8002ab8 <cleanup_stdio+0x10>
 8002ab4:	f000 ff26 	bl	8003904 <_fflush_r>
 8002ab8:	68a1      	ldr	r1, [r4, #8]
 8002aba:	4b08      	ldr	r3, [pc, #32]	; (8002adc <cleanup_stdio+0x34>)
 8002abc:	4299      	cmp	r1, r3
 8002abe:	d002      	beq.n	8002ac6 <cleanup_stdio+0x1e>
 8002ac0:	0020      	movs	r0, r4
 8002ac2:	f000 ff1f 	bl	8003904 <_fflush_r>
 8002ac6:	68e1      	ldr	r1, [r4, #12]
 8002ac8:	4b05      	ldr	r3, [pc, #20]	; (8002ae0 <cleanup_stdio+0x38>)
 8002aca:	4299      	cmp	r1, r3
 8002acc:	d002      	beq.n	8002ad4 <cleanup_stdio+0x2c>
 8002ace:	0020      	movs	r0, r4
 8002ad0:	f000 ff18 	bl	8003904 <_fflush_r>
 8002ad4:	bd10      	pop	{r4, pc}
 8002ad6:	46c0      	nop			; (mov r8, r8)
 8002ad8:	20000134 	.word	0x20000134
 8002adc:	2000019c 	.word	0x2000019c
 8002ae0:	20000204 	.word	0x20000204

08002ae4 <global_stdio_init.part.0>:
 8002ae4:	b510      	push	{r4, lr}
 8002ae6:	4b09      	ldr	r3, [pc, #36]	; (8002b0c <global_stdio_init.part.0+0x28>)
 8002ae8:	4a09      	ldr	r2, [pc, #36]	; (8002b10 <global_stdio_init.part.0+0x2c>)
 8002aea:	2104      	movs	r1, #4
 8002aec:	601a      	str	r2, [r3, #0]
 8002aee:	4809      	ldr	r0, [pc, #36]	; (8002b14 <global_stdio_init.part.0+0x30>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	f7ff ff95 	bl	8002a20 <std>
 8002af6:	2201      	movs	r2, #1
 8002af8:	2109      	movs	r1, #9
 8002afa:	4807      	ldr	r0, [pc, #28]	; (8002b18 <global_stdio_init.part.0+0x34>)
 8002afc:	f7ff ff90 	bl	8002a20 <std>
 8002b00:	2202      	movs	r2, #2
 8002b02:	2112      	movs	r1, #18
 8002b04:	4805      	ldr	r0, [pc, #20]	; (8002b1c <global_stdio_init.part.0+0x38>)
 8002b06:	f7ff ff8b 	bl	8002a20 <std>
 8002b0a:	bd10      	pop	{r4, pc}
 8002b0c:	2000026c 	.word	0x2000026c
 8002b10:	08002a8d 	.word	0x08002a8d
 8002b14:	20000134 	.word	0x20000134
 8002b18:	2000019c 	.word	0x2000019c
 8002b1c:	20000204 	.word	0x20000204

08002b20 <__sfp_lock_acquire>:
 8002b20:	b510      	push	{r4, lr}
 8002b22:	4802      	ldr	r0, [pc, #8]	; (8002b2c <__sfp_lock_acquire+0xc>)
 8002b24:	f000 f93d 	bl	8002da2 <__retarget_lock_acquire_recursive>
 8002b28:	bd10      	pop	{r4, pc}
 8002b2a:	46c0      	nop			; (mov r8, r8)
 8002b2c:	20000275 	.word	0x20000275

08002b30 <__sfp_lock_release>:
 8002b30:	b510      	push	{r4, lr}
 8002b32:	4802      	ldr	r0, [pc, #8]	; (8002b3c <__sfp_lock_release+0xc>)
 8002b34:	f000 f936 	bl	8002da4 <__retarget_lock_release_recursive>
 8002b38:	bd10      	pop	{r4, pc}
 8002b3a:	46c0      	nop			; (mov r8, r8)
 8002b3c:	20000275 	.word	0x20000275

08002b40 <__sinit>:
 8002b40:	b510      	push	{r4, lr}
 8002b42:	0004      	movs	r4, r0
 8002b44:	f7ff ffec 	bl	8002b20 <__sfp_lock_acquire>
 8002b48:	6a23      	ldr	r3, [r4, #32]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d002      	beq.n	8002b54 <__sinit+0x14>
 8002b4e:	f7ff ffef 	bl	8002b30 <__sfp_lock_release>
 8002b52:	bd10      	pop	{r4, pc}
 8002b54:	4b04      	ldr	r3, [pc, #16]	; (8002b68 <__sinit+0x28>)
 8002b56:	6223      	str	r3, [r4, #32]
 8002b58:	4b04      	ldr	r3, [pc, #16]	; (8002b6c <__sinit+0x2c>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1f6      	bne.n	8002b4e <__sinit+0xe>
 8002b60:	f7ff ffc0 	bl	8002ae4 <global_stdio_init.part.0>
 8002b64:	e7f3      	b.n	8002b4e <__sinit+0xe>
 8002b66:	46c0      	nop			; (mov r8, r8)
 8002b68:	08002aa9 	.word	0x08002aa9
 8002b6c:	2000026c 	.word	0x2000026c

08002b70 <_fwalk_sglue>:
 8002b70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002b72:	0014      	movs	r4, r2
 8002b74:	2600      	movs	r6, #0
 8002b76:	9000      	str	r0, [sp, #0]
 8002b78:	9101      	str	r1, [sp, #4]
 8002b7a:	68a5      	ldr	r5, [r4, #8]
 8002b7c:	6867      	ldr	r7, [r4, #4]
 8002b7e:	3f01      	subs	r7, #1
 8002b80:	d504      	bpl.n	8002b8c <_fwalk_sglue+0x1c>
 8002b82:	6824      	ldr	r4, [r4, #0]
 8002b84:	2c00      	cmp	r4, #0
 8002b86:	d1f8      	bne.n	8002b7a <_fwalk_sglue+0xa>
 8002b88:	0030      	movs	r0, r6
 8002b8a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002b8c:	89ab      	ldrh	r3, [r5, #12]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d908      	bls.n	8002ba4 <_fwalk_sglue+0x34>
 8002b92:	220e      	movs	r2, #14
 8002b94:	5eab      	ldrsh	r3, [r5, r2]
 8002b96:	3301      	adds	r3, #1
 8002b98:	d004      	beq.n	8002ba4 <_fwalk_sglue+0x34>
 8002b9a:	0029      	movs	r1, r5
 8002b9c:	9800      	ldr	r0, [sp, #0]
 8002b9e:	9b01      	ldr	r3, [sp, #4]
 8002ba0:	4798      	blx	r3
 8002ba2:	4306      	orrs	r6, r0
 8002ba4:	3568      	adds	r5, #104	; 0x68
 8002ba6:	e7ea      	b.n	8002b7e <_fwalk_sglue+0xe>

08002ba8 <iprintf>:
 8002ba8:	b40f      	push	{r0, r1, r2, r3}
 8002baa:	b507      	push	{r0, r1, r2, lr}
 8002bac:	4905      	ldr	r1, [pc, #20]	; (8002bc4 <iprintf+0x1c>)
 8002bae:	ab04      	add	r3, sp, #16
 8002bb0:	6808      	ldr	r0, [r1, #0]
 8002bb2:	cb04      	ldmia	r3!, {r2}
 8002bb4:	6881      	ldr	r1, [r0, #8]
 8002bb6:	9301      	str	r3, [sp, #4]
 8002bb8:	f000 fb7e 	bl	80032b8 <_vfiprintf_r>
 8002bbc:	b003      	add	sp, #12
 8002bbe:	bc08      	pop	{r3}
 8002bc0:	b004      	add	sp, #16
 8002bc2:	4718      	bx	r3
 8002bc4:	20000064 	.word	0x20000064

08002bc8 <siprintf>:
 8002bc8:	b40e      	push	{r1, r2, r3}
 8002bca:	b500      	push	{lr}
 8002bcc:	490b      	ldr	r1, [pc, #44]	; (8002bfc <siprintf+0x34>)
 8002bce:	b09c      	sub	sp, #112	; 0x70
 8002bd0:	ab1d      	add	r3, sp, #116	; 0x74
 8002bd2:	9002      	str	r0, [sp, #8]
 8002bd4:	9006      	str	r0, [sp, #24]
 8002bd6:	9107      	str	r1, [sp, #28]
 8002bd8:	9104      	str	r1, [sp, #16]
 8002bda:	4809      	ldr	r0, [pc, #36]	; (8002c00 <siprintf+0x38>)
 8002bdc:	4909      	ldr	r1, [pc, #36]	; (8002c04 <siprintf+0x3c>)
 8002bde:	cb04      	ldmia	r3!, {r2}
 8002be0:	9105      	str	r1, [sp, #20]
 8002be2:	6800      	ldr	r0, [r0, #0]
 8002be4:	a902      	add	r1, sp, #8
 8002be6:	9301      	str	r3, [sp, #4]
 8002be8:	f000 fa3e 	bl	8003068 <_svfiprintf_r>
 8002bec:	2200      	movs	r2, #0
 8002bee:	9b02      	ldr	r3, [sp, #8]
 8002bf0:	701a      	strb	r2, [r3, #0]
 8002bf2:	b01c      	add	sp, #112	; 0x70
 8002bf4:	bc08      	pop	{r3}
 8002bf6:	b003      	add	sp, #12
 8002bf8:	4718      	bx	r3
 8002bfa:	46c0      	nop			; (mov r8, r8)
 8002bfc:	7fffffff 	.word	0x7fffffff
 8002c00:	20000064 	.word	0x20000064
 8002c04:	ffff0208 	.word	0xffff0208

08002c08 <__sread>:
 8002c08:	b570      	push	{r4, r5, r6, lr}
 8002c0a:	000c      	movs	r4, r1
 8002c0c:	250e      	movs	r5, #14
 8002c0e:	5f49      	ldrsh	r1, [r1, r5]
 8002c10:	f000 f874 	bl	8002cfc <_read_r>
 8002c14:	2800      	cmp	r0, #0
 8002c16:	db03      	blt.n	8002c20 <__sread+0x18>
 8002c18:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002c1a:	181b      	adds	r3, r3, r0
 8002c1c:	6563      	str	r3, [r4, #84]	; 0x54
 8002c1e:	bd70      	pop	{r4, r5, r6, pc}
 8002c20:	89a3      	ldrh	r3, [r4, #12]
 8002c22:	4a02      	ldr	r2, [pc, #8]	; (8002c2c <__sread+0x24>)
 8002c24:	4013      	ands	r3, r2
 8002c26:	81a3      	strh	r3, [r4, #12]
 8002c28:	e7f9      	b.n	8002c1e <__sread+0x16>
 8002c2a:	46c0      	nop			; (mov r8, r8)
 8002c2c:	ffffefff 	.word	0xffffefff

08002c30 <__swrite>:
 8002c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c32:	001f      	movs	r7, r3
 8002c34:	898b      	ldrh	r3, [r1, #12]
 8002c36:	0005      	movs	r5, r0
 8002c38:	000c      	movs	r4, r1
 8002c3a:	0016      	movs	r6, r2
 8002c3c:	05db      	lsls	r3, r3, #23
 8002c3e:	d505      	bpl.n	8002c4c <__swrite+0x1c>
 8002c40:	230e      	movs	r3, #14
 8002c42:	5ec9      	ldrsh	r1, [r1, r3]
 8002c44:	2200      	movs	r2, #0
 8002c46:	2302      	movs	r3, #2
 8002c48:	f000 f844 	bl	8002cd4 <_lseek_r>
 8002c4c:	89a3      	ldrh	r3, [r4, #12]
 8002c4e:	4a05      	ldr	r2, [pc, #20]	; (8002c64 <__swrite+0x34>)
 8002c50:	0028      	movs	r0, r5
 8002c52:	4013      	ands	r3, r2
 8002c54:	81a3      	strh	r3, [r4, #12]
 8002c56:	0032      	movs	r2, r6
 8002c58:	230e      	movs	r3, #14
 8002c5a:	5ee1      	ldrsh	r1, [r4, r3]
 8002c5c:	003b      	movs	r3, r7
 8002c5e:	f000 f861 	bl	8002d24 <_write_r>
 8002c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c64:	ffffefff 	.word	0xffffefff

08002c68 <__sseek>:
 8002c68:	b570      	push	{r4, r5, r6, lr}
 8002c6a:	000c      	movs	r4, r1
 8002c6c:	250e      	movs	r5, #14
 8002c6e:	5f49      	ldrsh	r1, [r1, r5]
 8002c70:	f000 f830 	bl	8002cd4 <_lseek_r>
 8002c74:	89a3      	ldrh	r3, [r4, #12]
 8002c76:	1c42      	adds	r2, r0, #1
 8002c78:	d103      	bne.n	8002c82 <__sseek+0x1a>
 8002c7a:	4a05      	ldr	r2, [pc, #20]	; (8002c90 <__sseek+0x28>)
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	81a3      	strh	r3, [r4, #12]
 8002c80:	bd70      	pop	{r4, r5, r6, pc}
 8002c82:	2280      	movs	r2, #128	; 0x80
 8002c84:	0152      	lsls	r2, r2, #5
 8002c86:	4313      	orrs	r3, r2
 8002c88:	81a3      	strh	r3, [r4, #12]
 8002c8a:	6560      	str	r0, [r4, #84]	; 0x54
 8002c8c:	e7f8      	b.n	8002c80 <__sseek+0x18>
 8002c8e:	46c0      	nop			; (mov r8, r8)
 8002c90:	ffffefff 	.word	0xffffefff

08002c94 <__sclose>:
 8002c94:	b510      	push	{r4, lr}
 8002c96:	230e      	movs	r3, #14
 8002c98:	5ec9      	ldrsh	r1, [r1, r3]
 8002c9a:	f000 f809 	bl	8002cb0 <_close_r>
 8002c9e:	bd10      	pop	{r4, pc}

08002ca0 <memset>:
 8002ca0:	0003      	movs	r3, r0
 8002ca2:	1882      	adds	r2, r0, r2
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d100      	bne.n	8002caa <memset+0xa>
 8002ca8:	4770      	bx	lr
 8002caa:	7019      	strb	r1, [r3, #0]
 8002cac:	3301      	adds	r3, #1
 8002cae:	e7f9      	b.n	8002ca4 <memset+0x4>

08002cb0 <_close_r>:
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	b570      	push	{r4, r5, r6, lr}
 8002cb4:	4d06      	ldr	r5, [pc, #24]	; (8002cd0 <_close_r+0x20>)
 8002cb6:	0004      	movs	r4, r0
 8002cb8:	0008      	movs	r0, r1
 8002cba:	602b      	str	r3, [r5, #0]
 8002cbc:	f7fd fd96 	bl	80007ec <_close>
 8002cc0:	1c43      	adds	r3, r0, #1
 8002cc2:	d103      	bne.n	8002ccc <_close_r+0x1c>
 8002cc4:	682b      	ldr	r3, [r5, #0]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d000      	beq.n	8002ccc <_close_r+0x1c>
 8002cca:	6023      	str	r3, [r4, #0]
 8002ccc:	bd70      	pop	{r4, r5, r6, pc}
 8002cce:	46c0      	nop			; (mov r8, r8)
 8002cd0:	20000270 	.word	0x20000270

08002cd4 <_lseek_r>:
 8002cd4:	b570      	push	{r4, r5, r6, lr}
 8002cd6:	0004      	movs	r4, r0
 8002cd8:	0008      	movs	r0, r1
 8002cda:	0011      	movs	r1, r2
 8002cdc:	001a      	movs	r2, r3
 8002cde:	2300      	movs	r3, #0
 8002ce0:	4d05      	ldr	r5, [pc, #20]	; (8002cf8 <_lseek_r+0x24>)
 8002ce2:	602b      	str	r3, [r5, #0]
 8002ce4:	f7fd fda3 	bl	800082e <_lseek>
 8002ce8:	1c43      	adds	r3, r0, #1
 8002cea:	d103      	bne.n	8002cf4 <_lseek_r+0x20>
 8002cec:	682b      	ldr	r3, [r5, #0]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d000      	beq.n	8002cf4 <_lseek_r+0x20>
 8002cf2:	6023      	str	r3, [r4, #0]
 8002cf4:	bd70      	pop	{r4, r5, r6, pc}
 8002cf6:	46c0      	nop			; (mov r8, r8)
 8002cf8:	20000270 	.word	0x20000270

08002cfc <_read_r>:
 8002cfc:	b570      	push	{r4, r5, r6, lr}
 8002cfe:	0004      	movs	r4, r0
 8002d00:	0008      	movs	r0, r1
 8002d02:	0011      	movs	r1, r2
 8002d04:	001a      	movs	r2, r3
 8002d06:	2300      	movs	r3, #0
 8002d08:	4d05      	ldr	r5, [pc, #20]	; (8002d20 <_read_r+0x24>)
 8002d0a:	602b      	str	r3, [r5, #0]
 8002d0c:	f7fd fd35 	bl	800077a <_read>
 8002d10:	1c43      	adds	r3, r0, #1
 8002d12:	d103      	bne.n	8002d1c <_read_r+0x20>
 8002d14:	682b      	ldr	r3, [r5, #0]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d000      	beq.n	8002d1c <_read_r+0x20>
 8002d1a:	6023      	str	r3, [r4, #0]
 8002d1c:	bd70      	pop	{r4, r5, r6, pc}
 8002d1e:	46c0      	nop			; (mov r8, r8)
 8002d20:	20000270 	.word	0x20000270

08002d24 <_write_r>:
 8002d24:	b570      	push	{r4, r5, r6, lr}
 8002d26:	0004      	movs	r4, r0
 8002d28:	0008      	movs	r0, r1
 8002d2a:	0011      	movs	r1, r2
 8002d2c:	001a      	movs	r2, r3
 8002d2e:	2300      	movs	r3, #0
 8002d30:	4d05      	ldr	r5, [pc, #20]	; (8002d48 <_write_r+0x24>)
 8002d32:	602b      	str	r3, [r5, #0]
 8002d34:	f7fd fd3e 	bl	80007b4 <_write>
 8002d38:	1c43      	adds	r3, r0, #1
 8002d3a:	d103      	bne.n	8002d44 <_write_r+0x20>
 8002d3c:	682b      	ldr	r3, [r5, #0]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d000      	beq.n	8002d44 <_write_r+0x20>
 8002d42:	6023      	str	r3, [r4, #0]
 8002d44:	bd70      	pop	{r4, r5, r6, pc}
 8002d46:	46c0      	nop			; (mov r8, r8)
 8002d48:	20000270 	.word	0x20000270

08002d4c <__errno>:
 8002d4c:	4b01      	ldr	r3, [pc, #4]	; (8002d54 <__errno+0x8>)
 8002d4e:	6818      	ldr	r0, [r3, #0]
 8002d50:	4770      	bx	lr
 8002d52:	46c0      	nop			; (mov r8, r8)
 8002d54:	20000064 	.word	0x20000064

08002d58 <__libc_init_array>:
 8002d58:	b570      	push	{r4, r5, r6, lr}
 8002d5a:	2600      	movs	r6, #0
 8002d5c:	4c0c      	ldr	r4, [pc, #48]	; (8002d90 <__libc_init_array+0x38>)
 8002d5e:	4d0d      	ldr	r5, [pc, #52]	; (8002d94 <__libc_init_array+0x3c>)
 8002d60:	1b64      	subs	r4, r4, r5
 8002d62:	10a4      	asrs	r4, r4, #2
 8002d64:	42a6      	cmp	r6, r4
 8002d66:	d109      	bne.n	8002d7c <__libc_init_array+0x24>
 8002d68:	2600      	movs	r6, #0
 8002d6a:	f000 ff99 	bl	8003ca0 <_init>
 8002d6e:	4c0a      	ldr	r4, [pc, #40]	; (8002d98 <__libc_init_array+0x40>)
 8002d70:	4d0a      	ldr	r5, [pc, #40]	; (8002d9c <__libc_init_array+0x44>)
 8002d72:	1b64      	subs	r4, r4, r5
 8002d74:	10a4      	asrs	r4, r4, #2
 8002d76:	42a6      	cmp	r6, r4
 8002d78:	d105      	bne.n	8002d86 <__libc_init_array+0x2e>
 8002d7a:	bd70      	pop	{r4, r5, r6, pc}
 8002d7c:	00b3      	lsls	r3, r6, #2
 8002d7e:	58eb      	ldr	r3, [r5, r3]
 8002d80:	4798      	blx	r3
 8002d82:	3601      	adds	r6, #1
 8002d84:	e7ee      	b.n	8002d64 <__libc_init_array+0xc>
 8002d86:	00b3      	lsls	r3, r6, #2
 8002d88:	58eb      	ldr	r3, [r5, r3]
 8002d8a:	4798      	blx	r3
 8002d8c:	3601      	adds	r6, #1
 8002d8e:	e7f2      	b.n	8002d76 <__libc_init_array+0x1e>
 8002d90:	08003d64 	.word	0x08003d64
 8002d94:	08003d64 	.word	0x08003d64
 8002d98:	08003d68 	.word	0x08003d68
 8002d9c:	08003d64 	.word	0x08003d64

08002da0 <__retarget_lock_init_recursive>:
 8002da0:	4770      	bx	lr

08002da2 <__retarget_lock_acquire_recursive>:
 8002da2:	4770      	bx	lr

08002da4 <__retarget_lock_release_recursive>:
 8002da4:	4770      	bx	lr
	...

08002da8 <_free_r>:
 8002da8:	b570      	push	{r4, r5, r6, lr}
 8002daa:	0005      	movs	r5, r0
 8002dac:	2900      	cmp	r1, #0
 8002dae:	d010      	beq.n	8002dd2 <_free_r+0x2a>
 8002db0:	1f0c      	subs	r4, r1, #4
 8002db2:	6823      	ldr	r3, [r4, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	da00      	bge.n	8002dba <_free_r+0x12>
 8002db8:	18e4      	adds	r4, r4, r3
 8002dba:	0028      	movs	r0, r5
 8002dbc:	f000 f8e2 	bl	8002f84 <__malloc_lock>
 8002dc0:	4a1d      	ldr	r2, [pc, #116]	; (8002e38 <_free_r+0x90>)
 8002dc2:	6813      	ldr	r3, [r2, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d105      	bne.n	8002dd4 <_free_r+0x2c>
 8002dc8:	6063      	str	r3, [r4, #4]
 8002dca:	6014      	str	r4, [r2, #0]
 8002dcc:	0028      	movs	r0, r5
 8002dce:	f000 f8e1 	bl	8002f94 <__malloc_unlock>
 8002dd2:	bd70      	pop	{r4, r5, r6, pc}
 8002dd4:	42a3      	cmp	r3, r4
 8002dd6:	d908      	bls.n	8002dea <_free_r+0x42>
 8002dd8:	6820      	ldr	r0, [r4, #0]
 8002dda:	1821      	adds	r1, r4, r0
 8002ddc:	428b      	cmp	r3, r1
 8002dde:	d1f3      	bne.n	8002dc8 <_free_r+0x20>
 8002de0:	6819      	ldr	r1, [r3, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	1809      	adds	r1, r1, r0
 8002de6:	6021      	str	r1, [r4, #0]
 8002de8:	e7ee      	b.n	8002dc8 <_free_r+0x20>
 8002dea:	001a      	movs	r2, r3
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <_free_r+0x4e>
 8002df2:	42a3      	cmp	r3, r4
 8002df4:	d9f9      	bls.n	8002dea <_free_r+0x42>
 8002df6:	6811      	ldr	r1, [r2, #0]
 8002df8:	1850      	adds	r0, r2, r1
 8002dfa:	42a0      	cmp	r0, r4
 8002dfc:	d10b      	bne.n	8002e16 <_free_r+0x6e>
 8002dfe:	6820      	ldr	r0, [r4, #0]
 8002e00:	1809      	adds	r1, r1, r0
 8002e02:	1850      	adds	r0, r2, r1
 8002e04:	6011      	str	r1, [r2, #0]
 8002e06:	4283      	cmp	r3, r0
 8002e08:	d1e0      	bne.n	8002dcc <_free_r+0x24>
 8002e0a:	6818      	ldr	r0, [r3, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	1841      	adds	r1, r0, r1
 8002e10:	6011      	str	r1, [r2, #0]
 8002e12:	6053      	str	r3, [r2, #4]
 8002e14:	e7da      	b.n	8002dcc <_free_r+0x24>
 8002e16:	42a0      	cmp	r0, r4
 8002e18:	d902      	bls.n	8002e20 <_free_r+0x78>
 8002e1a:	230c      	movs	r3, #12
 8002e1c:	602b      	str	r3, [r5, #0]
 8002e1e:	e7d5      	b.n	8002dcc <_free_r+0x24>
 8002e20:	6820      	ldr	r0, [r4, #0]
 8002e22:	1821      	adds	r1, r4, r0
 8002e24:	428b      	cmp	r3, r1
 8002e26:	d103      	bne.n	8002e30 <_free_r+0x88>
 8002e28:	6819      	ldr	r1, [r3, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	1809      	adds	r1, r1, r0
 8002e2e:	6021      	str	r1, [r4, #0]
 8002e30:	6063      	str	r3, [r4, #4]
 8002e32:	6054      	str	r4, [r2, #4]
 8002e34:	e7ca      	b.n	8002dcc <_free_r+0x24>
 8002e36:	46c0      	nop			; (mov r8, r8)
 8002e38:	20000278 	.word	0x20000278

08002e3c <sbrk_aligned>:
 8002e3c:	b570      	push	{r4, r5, r6, lr}
 8002e3e:	4e0f      	ldr	r6, [pc, #60]	; (8002e7c <sbrk_aligned+0x40>)
 8002e40:	000d      	movs	r5, r1
 8002e42:	6831      	ldr	r1, [r6, #0]
 8002e44:	0004      	movs	r4, r0
 8002e46:	2900      	cmp	r1, #0
 8002e48:	d102      	bne.n	8002e50 <sbrk_aligned+0x14>
 8002e4a:	f000 fe41 	bl	8003ad0 <_sbrk_r>
 8002e4e:	6030      	str	r0, [r6, #0]
 8002e50:	0029      	movs	r1, r5
 8002e52:	0020      	movs	r0, r4
 8002e54:	f000 fe3c 	bl	8003ad0 <_sbrk_r>
 8002e58:	1c43      	adds	r3, r0, #1
 8002e5a:	d00a      	beq.n	8002e72 <sbrk_aligned+0x36>
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	1cc5      	adds	r5, r0, #3
 8002e60:	439d      	bics	r5, r3
 8002e62:	42a8      	cmp	r0, r5
 8002e64:	d007      	beq.n	8002e76 <sbrk_aligned+0x3a>
 8002e66:	1a29      	subs	r1, r5, r0
 8002e68:	0020      	movs	r0, r4
 8002e6a:	f000 fe31 	bl	8003ad0 <_sbrk_r>
 8002e6e:	3001      	adds	r0, #1
 8002e70:	d101      	bne.n	8002e76 <sbrk_aligned+0x3a>
 8002e72:	2501      	movs	r5, #1
 8002e74:	426d      	negs	r5, r5
 8002e76:	0028      	movs	r0, r5
 8002e78:	bd70      	pop	{r4, r5, r6, pc}
 8002e7a:	46c0      	nop			; (mov r8, r8)
 8002e7c:	2000027c 	.word	0x2000027c

08002e80 <_malloc_r>:
 8002e80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e82:	2203      	movs	r2, #3
 8002e84:	1ccb      	adds	r3, r1, #3
 8002e86:	4393      	bics	r3, r2
 8002e88:	3308      	adds	r3, #8
 8002e8a:	0006      	movs	r6, r0
 8002e8c:	001f      	movs	r7, r3
 8002e8e:	2b0c      	cmp	r3, #12
 8002e90:	d238      	bcs.n	8002f04 <_malloc_r+0x84>
 8002e92:	270c      	movs	r7, #12
 8002e94:	42b9      	cmp	r1, r7
 8002e96:	d837      	bhi.n	8002f08 <_malloc_r+0x88>
 8002e98:	0030      	movs	r0, r6
 8002e9a:	f000 f873 	bl	8002f84 <__malloc_lock>
 8002e9e:	4b38      	ldr	r3, [pc, #224]	; (8002f80 <_malloc_r+0x100>)
 8002ea0:	9300      	str	r3, [sp, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	001c      	movs	r4, r3
 8002ea6:	2c00      	cmp	r4, #0
 8002ea8:	d133      	bne.n	8002f12 <_malloc_r+0x92>
 8002eaa:	0039      	movs	r1, r7
 8002eac:	0030      	movs	r0, r6
 8002eae:	f7ff ffc5 	bl	8002e3c <sbrk_aligned>
 8002eb2:	0004      	movs	r4, r0
 8002eb4:	1c43      	adds	r3, r0, #1
 8002eb6:	d15e      	bne.n	8002f76 <_malloc_r+0xf6>
 8002eb8:	9b00      	ldr	r3, [sp, #0]
 8002eba:	681c      	ldr	r4, [r3, #0]
 8002ebc:	0025      	movs	r5, r4
 8002ebe:	2d00      	cmp	r5, #0
 8002ec0:	d14e      	bne.n	8002f60 <_malloc_r+0xe0>
 8002ec2:	2c00      	cmp	r4, #0
 8002ec4:	d051      	beq.n	8002f6a <_malloc_r+0xea>
 8002ec6:	6823      	ldr	r3, [r4, #0]
 8002ec8:	0029      	movs	r1, r5
 8002eca:	18e3      	adds	r3, r4, r3
 8002ecc:	0030      	movs	r0, r6
 8002ece:	9301      	str	r3, [sp, #4]
 8002ed0:	f000 fdfe 	bl	8003ad0 <_sbrk_r>
 8002ed4:	9b01      	ldr	r3, [sp, #4]
 8002ed6:	4283      	cmp	r3, r0
 8002ed8:	d147      	bne.n	8002f6a <_malloc_r+0xea>
 8002eda:	6823      	ldr	r3, [r4, #0]
 8002edc:	0030      	movs	r0, r6
 8002ede:	1aff      	subs	r7, r7, r3
 8002ee0:	0039      	movs	r1, r7
 8002ee2:	f7ff ffab 	bl	8002e3c <sbrk_aligned>
 8002ee6:	3001      	adds	r0, #1
 8002ee8:	d03f      	beq.n	8002f6a <_malloc_r+0xea>
 8002eea:	6823      	ldr	r3, [r4, #0]
 8002eec:	19db      	adds	r3, r3, r7
 8002eee:	6023      	str	r3, [r4, #0]
 8002ef0:	9b00      	ldr	r3, [sp, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d040      	beq.n	8002f7a <_malloc_r+0xfa>
 8002ef8:	685a      	ldr	r2, [r3, #4]
 8002efa:	42a2      	cmp	r2, r4
 8002efc:	d133      	bne.n	8002f66 <_malloc_r+0xe6>
 8002efe:	2200      	movs	r2, #0
 8002f00:	605a      	str	r2, [r3, #4]
 8002f02:	e014      	b.n	8002f2e <_malloc_r+0xae>
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	dac5      	bge.n	8002e94 <_malloc_r+0x14>
 8002f08:	230c      	movs	r3, #12
 8002f0a:	2500      	movs	r5, #0
 8002f0c:	6033      	str	r3, [r6, #0]
 8002f0e:	0028      	movs	r0, r5
 8002f10:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002f12:	6821      	ldr	r1, [r4, #0]
 8002f14:	1bc9      	subs	r1, r1, r7
 8002f16:	d420      	bmi.n	8002f5a <_malloc_r+0xda>
 8002f18:	290b      	cmp	r1, #11
 8002f1a:	d918      	bls.n	8002f4e <_malloc_r+0xce>
 8002f1c:	19e2      	adds	r2, r4, r7
 8002f1e:	6027      	str	r7, [r4, #0]
 8002f20:	42a3      	cmp	r3, r4
 8002f22:	d112      	bne.n	8002f4a <_malloc_r+0xca>
 8002f24:	9b00      	ldr	r3, [sp, #0]
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	6863      	ldr	r3, [r4, #4]
 8002f2a:	6011      	str	r1, [r2, #0]
 8002f2c:	6053      	str	r3, [r2, #4]
 8002f2e:	0030      	movs	r0, r6
 8002f30:	0025      	movs	r5, r4
 8002f32:	f000 f82f 	bl	8002f94 <__malloc_unlock>
 8002f36:	2207      	movs	r2, #7
 8002f38:	350b      	adds	r5, #11
 8002f3a:	1d23      	adds	r3, r4, #4
 8002f3c:	4395      	bics	r5, r2
 8002f3e:	1aea      	subs	r2, r5, r3
 8002f40:	429d      	cmp	r5, r3
 8002f42:	d0e4      	beq.n	8002f0e <_malloc_r+0x8e>
 8002f44:	1b5b      	subs	r3, r3, r5
 8002f46:	50a3      	str	r3, [r4, r2]
 8002f48:	e7e1      	b.n	8002f0e <_malloc_r+0x8e>
 8002f4a:	605a      	str	r2, [r3, #4]
 8002f4c:	e7ec      	b.n	8002f28 <_malloc_r+0xa8>
 8002f4e:	6862      	ldr	r2, [r4, #4]
 8002f50:	42a3      	cmp	r3, r4
 8002f52:	d1d5      	bne.n	8002f00 <_malloc_r+0x80>
 8002f54:	9b00      	ldr	r3, [sp, #0]
 8002f56:	601a      	str	r2, [r3, #0]
 8002f58:	e7e9      	b.n	8002f2e <_malloc_r+0xae>
 8002f5a:	0023      	movs	r3, r4
 8002f5c:	6864      	ldr	r4, [r4, #4]
 8002f5e:	e7a2      	b.n	8002ea6 <_malloc_r+0x26>
 8002f60:	002c      	movs	r4, r5
 8002f62:	686d      	ldr	r5, [r5, #4]
 8002f64:	e7ab      	b.n	8002ebe <_malloc_r+0x3e>
 8002f66:	0013      	movs	r3, r2
 8002f68:	e7c4      	b.n	8002ef4 <_malloc_r+0x74>
 8002f6a:	230c      	movs	r3, #12
 8002f6c:	0030      	movs	r0, r6
 8002f6e:	6033      	str	r3, [r6, #0]
 8002f70:	f000 f810 	bl	8002f94 <__malloc_unlock>
 8002f74:	e7cb      	b.n	8002f0e <_malloc_r+0x8e>
 8002f76:	6027      	str	r7, [r4, #0]
 8002f78:	e7d9      	b.n	8002f2e <_malloc_r+0xae>
 8002f7a:	605b      	str	r3, [r3, #4]
 8002f7c:	deff      	udf	#255	; 0xff
 8002f7e:	46c0      	nop			; (mov r8, r8)
 8002f80:	20000278 	.word	0x20000278

08002f84 <__malloc_lock>:
 8002f84:	b510      	push	{r4, lr}
 8002f86:	4802      	ldr	r0, [pc, #8]	; (8002f90 <__malloc_lock+0xc>)
 8002f88:	f7ff ff0b 	bl	8002da2 <__retarget_lock_acquire_recursive>
 8002f8c:	bd10      	pop	{r4, pc}
 8002f8e:	46c0      	nop			; (mov r8, r8)
 8002f90:	20000274 	.word	0x20000274

08002f94 <__malloc_unlock>:
 8002f94:	b510      	push	{r4, lr}
 8002f96:	4802      	ldr	r0, [pc, #8]	; (8002fa0 <__malloc_unlock+0xc>)
 8002f98:	f7ff ff04 	bl	8002da4 <__retarget_lock_release_recursive>
 8002f9c:	bd10      	pop	{r4, pc}
 8002f9e:	46c0      	nop			; (mov r8, r8)
 8002fa0:	20000274 	.word	0x20000274

08002fa4 <__ssputs_r>:
 8002fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	9301      	str	r3, [sp, #4]
 8002faa:	9203      	str	r2, [sp, #12]
 8002fac:	688e      	ldr	r6, [r1, #8]
 8002fae:	9a01      	ldr	r2, [sp, #4]
 8002fb0:	0007      	movs	r7, r0
 8002fb2:	000c      	movs	r4, r1
 8002fb4:	680b      	ldr	r3, [r1, #0]
 8002fb6:	4296      	cmp	r6, r2
 8002fb8:	d831      	bhi.n	800301e <__ssputs_r+0x7a>
 8002fba:	898a      	ldrh	r2, [r1, #12]
 8002fbc:	2190      	movs	r1, #144	; 0x90
 8002fbe:	00c9      	lsls	r1, r1, #3
 8002fc0:	420a      	tst	r2, r1
 8002fc2:	d029      	beq.n	8003018 <__ssputs_r+0x74>
 8002fc4:	2003      	movs	r0, #3
 8002fc6:	6921      	ldr	r1, [r4, #16]
 8002fc8:	1a5b      	subs	r3, r3, r1
 8002fca:	9302      	str	r3, [sp, #8]
 8002fcc:	6963      	ldr	r3, [r4, #20]
 8002fce:	4343      	muls	r3, r0
 8002fd0:	0fdd      	lsrs	r5, r3, #31
 8002fd2:	18ed      	adds	r5, r5, r3
 8002fd4:	9b01      	ldr	r3, [sp, #4]
 8002fd6:	9802      	ldr	r0, [sp, #8]
 8002fd8:	3301      	adds	r3, #1
 8002fda:	181b      	adds	r3, r3, r0
 8002fdc:	106d      	asrs	r5, r5, #1
 8002fde:	42ab      	cmp	r3, r5
 8002fe0:	d900      	bls.n	8002fe4 <__ssputs_r+0x40>
 8002fe2:	001d      	movs	r5, r3
 8002fe4:	0552      	lsls	r2, r2, #21
 8002fe6:	d529      	bpl.n	800303c <__ssputs_r+0x98>
 8002fe8:	0029      	movs	r1, r5
 8002fea:	0038      	movs	r0, r7
 8002fec:	f7ff ff48 	bl	8002e80 <_malloc_r>
 8002ff0:	1e06      	subs	r6, r0, #0
 8002ff2:	d02d      	beq.n	8003050 <__ssputs_r+0xac>
 8002ff4:	9a02      	ldr	r2, [sp, #8]
 8002ff6:	6921      	ldr	r1, [r4, #16]
 8002ff8:	f000 fd87 	bl	8003b0a <memcpy>
 8002ffc:	89a2      	ldrh	r2, [r4, #12]
 8002ffe:	4b19      	ldr	r3, [pc, #100]	; (8003064 <__ssputs_r+0xc0>)
 8003000:	401a      	ands	r2, r3
 8003002:	2380      	movs	r3, #128	; 0x80
 8003004:	4313      	orrs	r3, r2
 8003006:	81a3      	strh	r3, [r4, #12]
 8003008:	9b02      	ldr	r3, [sp, #8]
 800300a:	6126      	str	r6, [r4, #16]
 800300c:	18f6      	adds	r6, r6, r3
 800300e:	6026      	str	r6, [r4, #0]
 8003010:	6165      	str	r5, [r4, #20]
 8003012:	9e01      	ldr	r6, [sp, #4]
 8003014:	1aed      	subs	r5, r5, r3
 8003016:	60a5      	str	r5, [r4, #8]
 8003018:	9b01      	ldr	r3, [sp, #4]
 800301a:	429e      	cmp	r6, r3
 800301c:	d900      	bls.n	8003020 <__ssputs_r+0x7c>
 800301e:	9e01      	ldr	r6, [sp, #4]
 8003020:	0032      	movs	r2, r6
 8003022:	9903      	ldr	r1, [sp, #12]
 8003024:	6820      	ldr	r0, [r4, #0]
 8003026:	f000 fd3f 	bl	8003aa8 <memmove>
 800302a:	2000      	movs	r0, #0
 800302c:	68a3      	ldr	r3, [r4, #8]
 800302e:	1b9b      	subs	r3, r3, r6
 8003030:	60a3      	str	r3, [r4, #8]
 8003032:	6823      	ldr	r3, [r4, #0]
 8003034:	199b      	adds	r3, r3, r6
 8003036:	6023      	str	r3, [r4, #0]
 8003038:	b005      	add	sp, #20
 800303a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800303c:	002a      	movs	r2, r5
 800303e:	0038      	movs	r0, r7
 8003040:	f000 fd6c 	bl	8003b1c <_realloc_r>
 8003044:	1e06      	subs	r6, r0, #0
 8003046:	d1df      	bne.n	8003008 <__ssputs_r+0x64>
 8003048:	0038      	movs	r0, r7
 800304a:	6921      	ldr	r1, [r4, #16]
 800304c:	f7ff feac 	bl	8002da8 <_free_r>
 8003050:	230c      	movs	r3, #12
 8003052:	2001      	movs	r0, #1
 8003054:	603b      	str	r3, [r7, #0]
 8003056:	89a2      	ldrh	r2, [r4, #12]
 8003058:	3334      	adds	r3, #52	; 0x34
 800305a:	4313      	orrs	r3, r2
 800305c:	81a3      	strh	r3, [r4, #12]
 800305e:	4240      	negs	r0, r0
 8003060:	e7ea      	b.n	8003038 <__ssputs_r+0x94>
 8003062:	46c0      	nop			; (mov r8, r8)
 8003064:	fffffb7f 	.word	0xfffffb7f

08003068 <_svfiprintf_r>:
 8003068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800306a:	b0a1      	sub	sp, #132	; 0x84
 800306c:	9003      	str	r0, [sp, #12]
 800306e:	001d      	movs	r5, r3
 8003070:	898b      	ldrh	r3, [r1, #12]
 8003072:	000f      	movs	r7, r1
 8003074:	0016      	movs	r6, r2
 8003076:	061b      	lsls	r3, r3, #24
 8003078:	d511      	bpl.n	800309e <_svfiprintf_r+0x36>
 800307a:	690b      	ldr	r3, [r1, #16]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d10e      	bne.n	800309e <_svfiprintf_r+0x36>
 8003080:	2140      	movs	r1, #64	; 0x40
 8003082:	f7ff fefd 	bl	8002e80 <_malloc_r>
 8003086:	6038      	str	r0, [r7, #0]
 8003088:	6138      	str	r0, [r7, #16]
 800308a:	2800      	cmp	r0, #0
 800308c:	d105      	bne.n	800309a <_svfiprintf_r+0x32>
 800308e:	230c      	movs	r3, #12
 8003090:	9a03      	ldr	r2, [sp, #12]
 8003092:	3801      	subs	r0, #1
 8003094:	6013      	str	r3, [r2, #0]
 8003096:	b021      	add	sp, #132	; 0x84
 8003098:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800309a:	2340      	movs	r3, #64	; 0x40
 800309c:	617b      	str	r3, [r7, #20]
 800309e:	2300      	movs	r3, #0
 80030a0:	ac08      	add	r4, sp, #32
 80030a2:	6163      	str	r3, [r4, #20]
 80030a4:	3320      	adds	r3, #32
 80030a6:	7663      	strb	r3, [r4, #25]
 80030a8:	3310      	adds	r3, #16
 80030aa:	76a3      	strb	r3, [r4, #26]
 80030ac:	9507      	str	r5, [sp, #28]
 80030ae:	0035      	movs	r5, r6
 80030b0:	782b      	ldrb	r3, [r5, #0]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <_svfiprintf_r+0x52>
 80030b6:	2b25      	cmp	r3, #37	; 0x25
 80030b8:	d148      	bne.n	800314c <_svfiprintf_r+0xe4>
 80030ba:	1bab      	subs	r3, r5, r6
 80030bc:	9305      	str	r3, [sp, #20]
 80030be:	42b5      	cmp	r5, r6
 80030c0:	d00b      	beq.n	80030da <_svfiprintf_r+0x72>
 80030c2:	0032      	movs	r2, r6
 80030c4:	0039      	movs	r1, r7
 80030c6:	9803      	ldr	r0, [sp, #12]
 80030c8:	f7ff ff6c 	bl	8002fa4 <__ssputs_r>
 80030cc:	3001      	adds	r0, #1
 80030ce:	d100      	bne.n	80030d2 <_svfiprintf_r+0x6a>
 80030d0:	e0af      	b.n	8003232 <_svfiprintf_r+0x1ca>
 80030d2:	6963      	ldr	r3, [r4, #20]
 80030d4:	9a05      	ldr	r2, [sp, #20]
 80030d6:	189b      	adds	r3, r3, r2
 80030d8:	6163      	str	r3, [r4, #20]
 80030da:	782b      	ldrb	r3, [r5, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d100      	bne.n	80030e2 <_svfiprintf_r+0x7a>
 80030e0:	e0a7      	b.n	8003232 <_svfiprintf_r+0x1ca>
 80030e2:	2201      	movs	r2, #1
 80030e4:	2300      	movs	r3, #0
 80030e6:	4252      	negs	r2, r2
 80030e8:	6062      	str	r2, [r4, #4]
 80030ea:	a904      	add	r1, sp, #16
 80030ec:	3254      	adds	r2, #84	; 0x54
 80030ee:	1852      	adds	r2, r2, r1
 80030f0:	1c6e      	adds	r6, r5, #1
 80030f2:	6023      	str	r3, [r4, #0]
 80030f4:	60e3      	str	r3, [r4, #12]
 80030f6:	60a3      	str	r3, [r4, #8]
 80030f8:	7013      	strb	r3, [r2, #0]
 80030fa:	65a3      	str	r3, [r4, #88]	; 0x58
 80030fc:	4b55      	ldr	r3, [pc, #340]	; (8003254 <_svfiprintf_r+0x1ec>)
 80030fe:	2205      	movs	r2, #5
 8003100:	0018      	movs	r0, r3
 8003102:	7831      	ldrb	r1, [r6, #0]
 8003104:	9305      	str	r3, [sp, #20]
 8003106:	f000 fcf5 	bl	8003af4 <memchr>
 800310a:	1c75      	adds	r5, r6, #1
 800310c:	2800      	cmp	r0, #0
 800310e:	d11f      	bne.n	8003150 <_svfiprintf_r+0xe8>
 8003110:	6822      	ldr	r2, [r4, #0]
 8003112:	06d3      	lsls	r3, r2, #27
 8003114:	d504      	bpl.n	8003120 <_svfiprintf_r+0xb8>
 8003116:	2353      	movs	r3, #83	; 0x53
 8003118:	a904      	add	r1, sp, #16
 800311a:	185b      	adds	r3, r3, r1
 800311c:	2120      	movs	r1, #32
 800311e:	7019      	strb	r1, [r3, #0]
 8003120:	0713      	lsls	r3, r2, #28
 8003122:	d504      	bpl.n	800312e <_svfiprintf_r+0xc6>
 8003124:	2353      	movs	r3, #83	; 0x53
 8003126:	a904      	add	r1, sp, #16
 8003128:	185b      	adds	r3, r3, r1
 800312a:	212b      	movs	r1, #43	; 0x2b
 800312c:	7019      	strb	r1, [r3, #0]
 800312e:	7833      	ldrb	r3, [r6, #0]
 8003130:	2b2a      	cmp	r3, #42	; 0x2a
 8003132:	d016      	beq.n	8003162 <_svfiprintf_r+0xfa>
 8003134:	0035      	movs	r5, r6
 8003136:	2100      	movs	r1, #0
 8003138:	200a      	movs	r0, #10
 800313a:	68e3      	ldr	r3, [r4, #12]
 800313c:	782a      	ldrb	r2, [r5, #0]
 800313e:	1c6e      	adds	r6, r5, #1
 8003140:	3a30      	subs	r2, #48	; 0x30
 8003142:	2a09      	cmp	r2, #9
 8003144:	d94e      	bls.n	80031e4 <_svfiprintf_r+0x17c>
 8003146:	2900      	cmp	r1, #0
 8003148:	d111      	bne.n	800316e <_svfiprintf_r+0x106>
 800314a:	e017      	b.n	800317c <_svfiprintf_r+0x114>
 800314c:	3501      	adds	r5, #1
 800314e:	e7af      	b.n	80030b0 <_svfiprintf_r+0x48>
 8003150:	9b05      	ldr	r3, [sp, #20]
 8003152:	6822      	ldr	r2, [r4, #0]
 8003154:	1ac0      	subs	r0, r0, r3
 8003156:	2301      	movs	r3, #1
 8003158:	4083      	lsls	r3, r0
 800315a:	4313      	orrs	r3, r2
 800315c:	002e      	movs	r6, r5
 800315e:	6023      	str	r3, [r4, #0]
 8003160:	e7cc      	b.n	80030fc <_svfiprintf_r+0x94>
 8003162:	9b07      	ldr	r3, [sp, #28]
 8003164:	1d19      	adds	r1, r3, #4
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	9107      	str	r1, [sp, #28]
 800316a:	2b00      	cmp	r3, #0
 800316c:	db01      	blt.n	8003172 <_svfiprintf_r+0x10a>
 800316e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003170:	e004      	b.n	800317c <_svfiprintf_r+0x114>
 8003172:	425b      	negs	r3, r3
 8003174:	60e3      	str	r3, [r4, #12]
 8003176:	2302      	movs	r3, #2
 8003178:	4313      	orrs	r3, r2
 800317a:	6023      	str	r3, [r4, #0]
 800317c:	782b      	ldrb	r3, [r5, #0]
 800317e:	2b2e      	cmp	r3, #46	; 0x2e
 8003180:	d10a      	bne.n	8003198 <_svfiprintf_r+0x130>
 8003182:	786b      	ldrb	r3, [r5, #1]
 8003184:	2b2a      	cmp	r3, #42	; 0x2a
 8003186:	d135      	bne.n	80031f4 <_svfiprintf_r+0x18c>
 8003188:	9b07      	ldr	r3, [sp, #28]
 800318a:	3502      	adds	r5, #2
 800318c:	1d1a      	adds	r2, r3, #4
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	9207      	str	r2, [sp, #28]
 8003192:	2b00      	cmp	r3, #0
 8003194:	db2b      	blt.n	80031ee <_svfiprintf_r+0x186>
 8003196:	9309      	str	r3, [sp, #36]	; 0x24
 8003198:	4e2f      	ldr	r6, [pc, #188]	; (8003258 <_svfiprintf_r+0x1f0>)
 800319a:	2203      	movs	r2, #3
 800319c:	0030      	movs	r0, r6
 800319e:	7829      	ldrb	r1, [r5, #0]
 80031a0:	f000 fca8 	bl	8003af4 <memchr>
 80031a4:	2800      	cmp	r0, #0
 80031a6:	d006      	beq.n	80031b6 <_svfiprintf_r+0x14e>
 80031a8:	2340      	movs	r3, #64	; 0x40
 80031aa:	1b80      	subs	r0, r0, r6
 80031ac:	4083      	lsls	r3, r0
 80031ae:	6822      	ldr	r2, [r4, #0]
 80031b0:	3501      	adds	r5, #1
 80031b2:	4313      	orrs	r3, r2
 80031b4:	6023      	str	r3, [r4, #0]
 80031b6:	7829      	ldrb	r1, [r5, #0]
 80031b8:	2206      	movs	r2, #6
 80031ba:	4828      	ldr	r0, [pc, #160]	; (800325c <_svfiprintf_r+0x1f4>)
 80031bc:	1c6e      	adds	r6, r5, #1
 80031be:	7621      	strb	r1, [r4, #24]
 80031c0:	f000 fc98 	bl	8003af4 <memchr>
 80031c4:	2800      	cmp	r0, #0
 80031c6:	d03c      	beq.n	8003242 <_svfiprintf_r+0x1da>
 80031c8:	4b25      	ldr	r3, [pc, #148]	; (8003260 <_svfiprintf_r+0x1f8>)
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d125      	bne.n	800321a <_svfiprintf_r+0x1b2>
 80031ce:	2207      	movs	r2, #7
 80031d0:	9b07      	ldr	r3, [sp, #28]
 80031d2:	3307      	adds	r3, #7
 80031d4:	4393      	bics	r3, r2
 80031d6:	3308      	adds	r3, #8
 80031d8:	9307      	str	r3, [sp, #28]
 80031da:	6963      	ldr	r3, [r4, #20]
 80031dc:	9a04      	ldr	r2, [sp, #16]
 80031de:	189b      	adds	r3, r3, r2
 80031e0:	6163      	str	r3, [r4, #20]
 80031e2:	e764      	b.n	80030ae <_svfiprintf_r+0x46>
 80031e4:	4343      	muls	r3, r0
 80031e6:	0035      	movs	r5, r6
 80031e8:	2101      	movs	r1, #1
 80031ea:	189b      	adds	r3, r3, r2
 80031ec:	e7a6      	b.n	800313c <_svfiprintf_r+0xd4>
 80031ee:	2301      	movs	r3, #1
 80031f0:	425b      	negs	r3, r3
 80031f2:	e7d0      	b.n	8003196 <_svfiprintf_r+0x12e>
 80031f4:	2300      	movs	r3, #0
 80031f6:	200a      	movs	r0, #10
 80031f8:	001a      	movs	r2, r3
 80031fa:	3501      	adds	r5, #1
 80031fc:	6063      	str	r3, [r4, #4]
 80031fe:	7829      	ldrb	r1, [r5, #0]
 8003200:	1c6e      	adds	r6, r5, #1
 8003202:	3930      	subs	r1, #48	; 0x30
 8003204:	2909      	cmp	r1, #9
 8003206:	d903      	bls.n	8003210 <_svfiprintf_r+0x1a8>
 8003208:	2b00      	cmp	r3, #0
 800320a:	d0c5      	beq.n	8003198 <_svfiprintf_r+0x130>
 800320c:	9209      	str	r2, [sp, #36]	; 0x24
 800320e:	e7c3      	b.n	8003198 <_svfiprintf_r+0x130>
 8003210:	4342      	muls	r2, r0
 8003212:	0035      	movs	r5, r6
 8003214:	2301      	movs	r3, #1
 8003216:	1852      	adds	r2, r2, r1
 8003218:	e7f1      	b.n	80031fe <_svfiprintf_r+0x196>
 800321a:	aa07      	add	r2, sp, #28
 800321c:	9200      	str	r2, [sp, #0]
 800321e:	0021      	movs	r1, r4
 8003220:	003a      	movs	r2, r7
 8003222:	4b10      	ldr	r3, [pc, #64]	; (8003264 <_svfiprintf_r+0x1fc>)
 8003224:	9803      	ldr	r0, [sp, #12]
 8003226:	e000      	b.n	800322a <_svfiprintf_r+0x1c2>
 8003228:	bf00      	nop
 800322a:	9004      	str	r0, [sp, #16]
 800322c:	9b04      	ldr	r3, [sp, #16]
 800322e:	3301      	adds	r3, #1
 8003230:	d1d3      	bne.n	80031da <_svfiprintf_r+0x172>
 8003232:	89bb      	ldrh	r3, [r7, #12]
 8003234:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003236:	065b      	lsls	r3, r3, #25
 8003238:	d400      	bmi.n	800323c <_svfiprintf_r+0x1d4>
 800323a:	e72c      	b.n	8003096 <_svfiprintf_r+0x2e>
 800323c:	2001      	movs	r0, #1
 800323e:	4240      	negs	r0, r0
 8003240:	e729      	b.n	8003096 <_svfiprintf_r+0x2e>
 8003242:	aa07      	add	r2, sp, #28
 8003244:	9200      	str	r2, [sp, #0]
 8003246:	0021      	movs	r1, r4
 8003248:	003a      	movs	r2, r7
 800324a:	4b06      	ldr	r3, [pc, #24]	; (8003264 <_svfiprintf_r+0x1fc>)
 800324c:	9803      	ldr	r0, [sp, #12]
 800324e:	f000 f9bf 	bl	80035d0 <_printf_i>
 8003252:	e7ea      	b.n	800322a <_svfiprintf_r+0x1c2>
 8003254:	08003d30 	.word	0x08003d30
 8003258:	08003d36 	.word	0x08003d36
 800325c:	08003d3a 	.word	0x08003d3a
 8003260:	00000000 	.word	0x00000000
 8003264:	08002fa5 	.word	0x08002fa5

08003268 <__sfputc_r>:
 8003268:	6893      	ldr	r3, [r2, #8]
 800326a:	b510      	push	{r4, lr}
 800326c:	3b01      	subs	r3, #1
 800326e:	6093      	str	r3, [r2, #8]
 8003270:	2b00      	cmp	r3, #0
 8003272:	da04      	bge.n	800327e <__sfputc_r+0x16>
 8003274:	6994      	ldr	r4, [r2, #24]
 8003276:	42a3      	cmp	r3, r4
 8003278:	db07      	blt.n	800328a <__sfputc_r+0x22>
 800327a:	290a      	cmp	r1, #10
 800327c:	d005      	beq.n	800328a <__sfputc_r+0x22>
 800327e:	6813      	ldr	r3, [r2, #0]
 8003280:	1c58      	adds	r0, r3, #1
 8003282:	6010      	str	r0, [r2, #0]
 8003284:	7019      	strb	r1, [r3, #0]
 8003286:	0008      	movs	r0, r1
 8003288:	bd10      	pop	{r4, pc}
 800328a:	f000 fb66 	bl	800395a <__swbuf_r>
 800328e:	0001      	movs	r1, r0
 8003290:	e7f9      	b.n	8003286 <__sfputc_r+0x1e>

08003292 <__sfputs_r>:
 8003292:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003294:	0006      	movs	r6, r0
 8003296:	000f      	movs	r7, r1
 8003298:	0014      	movs	r4, r2
 800329a:	18d5      	adds	r5, r2, r3
 800329c:	42ac      	cmp	r4, r5
 800329e:	d101      	bne.n	80032a4 <__sfputs_r+0x12>
 80032a0:	2000      	movs	r0, #0
 80032a2:	e007      	b.n	80032b4 <__sfputs_r+0x22>
 80032a4:	7821      	ldrb	r1, [r4, #0]
 80032a6:	003a      	movs	r2, r7
 80032a8:	0030      	movs	r0, r6
 80032aa:	f7ff ffdd 	bl	8003268 <__sfputc_r>
 80032ae:	3401      	adds	r4, #1
 80032b0:	1c43      	adds	r3, r0, #1
 80032b2:	d1f3      	bne.n	800329c <__sfputs_r+0xa>
 80032b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080032b8 <_vfiprintf_r>:
 80032b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032ba:	b0a1      	sub	sp, #132	; 0x84
 80032bc:	000f      	movs	r7, r1
 80032be:	0015      	movs	r5, r2
 80032c0:	001e      	movs	r6, r3
 80032c2:	9003      	str	r0, [sp, #12]
 80032c4:	2800      	cmp	r0, #0
 80032c6:	d004      	beq.n	80032d2 <_vfiprintf_r+0x1a>
 80032c8:	6a03      	ldr	r3, [r0, #32]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <_vfiprintf_r+0x1a>
 80032ce:	f7ff fc37 	bl	8002b40 <__sinit>
 80032d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032d4:	07db      	lsls	r3, r3, #31
 80032d6:	d405      	bmi.n	80032e4 <_vfiprintf_r+0x2c>
 80032d8:	89bb      	ldrh	r3, [r7, #12]
 80032da:	059b      	lsls	r3, r3, #22
 80032dc:	d402      	bmi.n	80032e4 <_vfiprintf_r+0x2c>
 80032de:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80032e0:	f7ff fd5f 	bl	8002da2 <__retarget_lock_acquire_recursive>
 80032e4:	89bb      	ldrh	r3, [r7, #12]
 80032e6:	071b      	lsls	r3, r3, #28
 80032e8:	d502      	bpl.n	80032f0 <_vfiprintf_r+0x38>
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d113      	bne.n	8003318 <_vfiprintf_r+0x60>
 80032f0:	0039      	movs	r1, r7
 80032f2:	9803      	ldr	r0, [sp, #12]
 80032f4:	f000 fb74 	bl	80039e0 <__swsetup_r>
 80032f8:	2800      	cmp	r0, #0
 80032fa:	d00d      	beq.n	8003318 <_vfiprintf_r+0x60>
 80032fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032fe:	07db      	lsls	r3, r3, #31
 8003300:	d503      	bpl.n	800330a <_vfiprintf_r+0x52>
 8003302:	2001      	movs	r0, #1
 8003304:	4240      	negs	r0, r0
 8003306:	b021      	add	sp, #132	; 0x84
 8003308:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800330a:	89bb      	ldrh	r3, [r7, #12]
 800330c:	059b      	lsls	r3, r3, #22
 800330e:	d4f8      	bmi.n	8003302 <_vfiprintf_r+0x4a>
 8003310:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003312:	f7ff fd47 	bl	8002da4 <__retarget_lock_release_recursive>
 8003316:	e7f4      	b.n	8003302 <_vfiprintf_r+0x4a>
 8003318:	2300      	movs	r3, #0
 800331a:	ac08      	add	r4, sp, #32
 800331c:	6163      	str	r3, [r4, #20]
 800331e:	3320      	adds	r3, #32
 8003320:	7663      	strb	r3, [r4, #25]
 8003322:	3310      	adds	r3, #16
 8003324:	76a3      	strb	r3, [r4, #26]
 8003326:	9607      	str	r6, [sp, #28]
 8003328:	002e      	movs	r6, r5
 800332a:	7833      	ldrb	r3, [r6, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <_vfiprintf_r+0x7c>
 8003330:	2b25      	cmp	r3, #37	; 0x25
 8003332:	d148      	bne.n	80033c6 <_vfiprintf_r+0x10e>
 8003334:	1b73      	subs	r3, r6, r5
 8003336:	9305      	str	r3, [sp, #20]
 8003338:	42ae      	cmp	r6, r5
 800333a:	d00b      	beq.n	8003354 <_vfiprintf_r+0x9c>
 800333c:	002a      	movs	r2, r5
 800333e:	0039      	movs	r1, r7
 8003340:	9803      	ldr	r0, [sp, #12]
 8003342:	f7ff ffa6 	bl	8003292 <__sfputs_r>
 8003346:	3001      	adds	r0, #1
 8003348:	d100      	bne.n	800334c <_vfiprintf_r+0x94>
 800334a:	e0af      	b.n	80034ac <_vfiprintf_r+0x1f4>
 800334c:	6963      	ldr	r3, [r4, #20]
 800334e:	9a05      	ldr	r2, [sp, #20]
 8003350:	189b      	adds	r3, r3, r2
 8003352:	6163      	str	r3, [r4, #20]
 8003354:	7833      	ldrb	r3, [r6, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d100      	bne.n	800335c <_vfiprintf_r+0xa4>
 800335a:	e0a7      	b.n	80034ac <_vfiprintf_r+0x1f4>
 800335c:	2201      	movs	r2, #1
 800335e:	2300      	movs	r3, #0
 8003360:	4252      	negs	r2, r2
 8003362:	6062      	str	r2, [r4, #4]
 8003364:	a904      	add	r1, sp, #16
 8003366:	3254      	adds	r2, #84	; 0x54
 8003368:	1852      	adds	r2, r2, r1
 800336a:	1c75      	adds	r5, r6, #1
 800336c:	6023      	str	r3, [r4, #0]
 800336e:	60e3      	str	r3, [r4, #12]
 8003370:	60a3      	str	r3, [r4, #8]
 8003372:	7013      	strb	r3, [r2, #0]
 8003374:	65a3      	str	r3, [r4, #88]	; 0x58
 8003376:	4b59      	ldr	r3, [pc, #356]	; (80034dc <_vfiprintf_r+0x224>)
 8003378:	2205      	movs	r2, #5
 800337a:	0018      	movs	r0, r3
 800337c:	7829      	ldrb	r1, [r5, #0]
 800337e:	9305      	str	r3, [sp, #20]
 8003380:	f000 fbb8 	bl	8003af4 <memchr>
 8003384:	1c6e      	adds	r6, r5, #1
 8003386:	2800      	cmp	r0, #0
 8003388:	d11f      	bne.n	80033ca <_vfiprintf_r+0x112>
 800338a:	6822      	ldr	r2, [r4, #0]
 800338c:	06d3      	lsls	r3, r2, #27
 800338e:	d504      	bpl.n	800339a <_vfiprintf_r+0xe2>
 8003390:	2353      	movs	r3, #83	; 0x53
 8003392:	a904      	add	r1, sp, #16
 8003394:	185b      	adds	r3, r3, r1
 8003396:	2120      	movs	r1, #32
 8003398:	7019      	strb	r1, [r3, #0]
 800339a:	0713      	lsls	r3, r2, #28
 800339c:	d504      	bpl.n	80033a8 <_vfiprintf_r+0xf0>
 800339e:	2353      	movs	r3, #83	; 0x53
 80033a0:	a904      	add	r1, sp, #16
 80033a2:	185b      	adds	r3, r3, r1
 80033a4:	212b      	movs	r1, #43	; 0x2b
 80033a6:	7019      	strb	r1, [r3, #0]
 80033a8:	782b      	ldrb	r3, [r5, #0]
 80033aa:	2b2a      	cmp	r3, #42	; 0x2a
 80033ac:	d016      	beq.n	80033dc <_vfiprintf_r+0x124>
 80033ae:	002e      	movs	r6, r5
 80033b0:	2100      	movs	r1, #0
 80033b2:	200a      	movs	r0, #10
 80033b4:	68e3      	ldr	r3, [r4, #12]
 80033b6:	7832      	ldrb	r2, [r6, #0]
 80033b8:	1c75      	adds	r5, r6, #1
 80033ba:	3a30      	subs	r2, #48	; 0x30
 80033bc:	2a09      	cmp	r2, #9
 80033be:	d94e      	bls.n	800345e <_vfiprintf_r+0x1a6>
 80033c0:	2900      	cmp	r1, #0
 80033c2:	d111      	bne.n	80033e8 <_vfiprintf_r+0x130>
 80033c4:	e017      	b.n	80033f6 <_vfiprintf_r+0x13e>
 80033c6:	3601      	adds	r6, #1
 80033c8:	e7af      	b.n	800332a <_vfiprintf_r+0x72>
 80033ca:	9b05      	ldr	r3, [sp, #20]
 80033cc:	6822      	ldr	r2, [r4, #0]
 80033ce:	1ac0      	subs	r0, r0, r3
 80033d0:	2301      	movs	r3, #1
 80033d2:	4083      	lsls	r3, r0
 80033d4:	4313      	orrs	r3, r2
 80033d6:	0035      	movs	r5, r6
 80033d8:	6023      	str	r3, [r4, #0]
 80033da:	e7cc      	b.n	8003376 <_vfiprintf_r+0xbe>
 80033dc:	9b07      	ldr	r3, [sp, #28]
 80033de:	1d19      	adds	r1, r3, #4
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	9107      	str	r1, [sp, #28]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	db01      	blt.n	80033ec <_vfiprintf_r+0x134>
 80033e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80033ea:	e004      	b.n	80033f6 <_vfiprintf_r+0x13e>
 80033ec:	425b      	negs	r3, r3
 80033ee:	60e3      	str	r3, [r4, #12]
 80033f0:	2302      	movs	r3, #2
 80033f2:	4313      	orrs	r3, r2
 80033f4:	6023      	str	r3, [r4, #0]
 80033f6:	7833      	ldrb	r3, [r6, #0]
 80033f8:	2b2e      	cmp	r3, #46	; 0x2e
 80033fa:	d10a      	bne.n	8003412 <_vfiprintf_r+0x15a>
 80033fc:	7873      	ldrb	r3, [r6, #1]
 80033fe:	2b2a      	cmp	r3, #42	; 0x2a
 8003400:	d135      	bne.n	800346e <_vfiprintf_r+0x1b6>
 8003402:	9b07      	ldr	r3, [sp, #28]
 8003404:	3602      	adds	r6, #2
 8003406:	1d1a      	adds	r2, r3, #4
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	9207      	str	r2, [sp, #28]
 800340c:	2b00      	cmp	r3, #0
 800340e:	db2b      	blt.n	8003468 <_vfiprintf_r+0x1b0>
 8003410:	9309      	str	r3, [sp, #36]	; 0x24
 8003412:	4d33      	ldr	r5, [pc, #204]	; (80034e0 <_vfiprintf_r+0x228>)
 8003414:	2203      	movs	r2, #3
 8003416:	0028      	movs	r0, r5
 8003418:	7831      	ldrb	r1, [r6, #0]
 800341a:	f000 fb6b 	bl	8003af4 <memchr>
 800341e:	2800      	cmp	r0, #0
 8003420:	d006      	beq.n	8003430 <_vfiprintf_r+0x178>
 8003422:	2340      	movs	r3, #64	; 0x40
 8003424:	1b40      	subs	r0, r0, r5
 8003426:	4083      	lsls	r3, r0
 8003428:	6822      	ldr	r2, [r4, #0]
 800342a:	3601      	adds	r6, #1
 800342c:	4313      	orrs	r3, r2
 800342e:	6023      	str	r3, [r4, #0]
 8003430:	7831      	ldrb	r1, [r6, #0]
 8003432:	2206      	movs	r2, #6
 8003434:	482b      	ldr	r0, [pc, #172]	; (80034e4 <_vfiprintf_r+0x22c>)
 8003436:	1c75      	adds	r5, r6, #1
 8003438:	7621      	strb	r1, [r4, #24]
 800343a:	f000 fb5b 	bl	8003af4 <memchr>
 800343e:	2800      	cmp	r0, #0
 8003440:	d043      	beq.n	80034ca <_vfiprintf_r+0x212>
 8003442:	4b29      	ldr	r3, [pc, #164]	; (80034e8 <_vfiprintf_r+0x230>)
 8003444:	2b00      	cmp	r3, #0
 8003446:	d125      	bne.n	8003494 <_vfiprintf_r+0x1dc>
 8003448:	2207      	movs	r2, #7
 800344a:	9b07      	ldr	r3, [sp, #28]
 800344c:	3307      	adds	r3, #7
 800344e:	4393      	bics	r3, r2
 8003450:	3308      	adds	r3, #8
 8003452:	9307      	str	r3, [sp, #28]
 8003454:	6963      	ldr	r3, [r4, #20]
 8003456:	9a04      	ldr	r2, [sp, #16]
 8003458:	189b      	adds	r3, r3, r2
 800345a:	6163      	str	r3, [r4, #20]
 800345c:	e764      	b.n	8003328 <_vfiprintf_r+0x70>
 800345e:	4343      	muls	r3, r0
 8003460:	002e      	movs	r6, r5
 8003462:	2101      	movs	r1, #1
 8003464:	189b      	adds	r3, r3, r2
 8003466:	e7a6      	b.n	80033b6 <_vfiprintf_r+0xfe>
 8003468:	2301      	movs	r3, #1
 800346a:	425b      	negs	r3, r3
 800346c:	e7d0      	b.n	8003410 <_vfiprintf_r+0x158>
 800346e:	2300      	movs	r3, #0
 8003470:	200a      	movs	r0, #10
 8003472:	001a      	movs	r2, r3
 8003474:	3601      	adds	r6, #1
 8003476:	6063      	str	r3, [r4, #4]
 8003478:	7831      	ldrb	r1, [r6, #0]
 800347a:	1c75      	adds	r5, r6, #1
 800347c:	3930      	subs	r1, #48	; 0x30
 800347e:	2909      	cmp	r1, #9
 8003480:	d903      	bls.n	800348a <_vfiprintf_r+0x1d2>
 8003482:	2b00      	cmp	r3, #0
 8003484:	d0c5      	beq.n	8003412 <_vfiprintf_r+0x15a>
 8003486:	9209      	str	r2, [sp, #36]	; 0x24
 8003488:	e7c3      	b.n	8003412 <_vfiprintf_r+0x15a>
 800348a:	4342      	muls	r2, r0
 800348c:	002e      	movs	r6, r5
 800348e:	2301      	movs	r3, #1
 8003490:	1852      	adds	r2, r2, r1
 8003492:	e7f1      	b.n	8003478 <_vfiprintf_r+0x1c0>
 8003494:	aa07      	add	r2, sp, #28
 8003496:	9200      	str	r2, [sp, #0]
 8003498:	0021      	movs	r1, r4
 800349a:	003a      	movs	r2, r7
 800349c:	4b13      	ldr	r3, [pc, #76]	; (80034ec <_vfiprintf_r+0x234>)
 800349e:	9803      	ldr	r0, [sp, #12]
 80034a0:	e000      	b.n	80034a4 <_vfiprintf_r+0x1ec>
 80034a2:	bf00      	nop
 80034a4:	9004      	str	r0, [sp, #16]
 80034a6:	9b04      	ldr	r3, [sp, #16]
 80034a8:	3301      	adds	r3, #1
 80034aa:	d1d3      	bne.n	8003454 <_vfiprintf_r+0x19c>
 80034ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034ae:	07db      	lsls	r3, r3, #31
 80034b0:	d405      	bmi.n	80034be <_vfiprintf_r+0x206>
 80034b2:	89bb      	ldrh	r3, [r7, #12]
 80034b4:	059b      	lsls	r3, r3, #22
 80034b6:	d402      	bmi.n	80034be <_vfiprintf_r+0x206>
 80034b8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80034ba:	f7ff fc73 	bl	8002da4 <__retarget_lock_release_recursive>
 80034be:	89bb      	ldrh	r3, [r7, #12]
 80034c0:	065b      	lsls	r3, r3, #25
 80034c2:	d500      	bpl.n	80034c6 <_vfiprintf_r+0x20e>
 80034c4:	e71d      	b.n	8003302 <_vfiprintf_r+0x4a>
 80034c6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80034c8:	e71d      	b.n	8003306 <_vfiprintf_r+0x4e>
 80034ca:	aa07      	add	r2, sp, #28
 80034cc:	9200      	str	r2, [sp, #0]
 80034ce:	0021      	movs	r1, r4
 80034d0:	003a      	movs	r2, r7
 80034d2:	4b06      	ldr	r3, [pc, #24]	; (80034ec <_vfiprintf_r+0x234>)
 80034d4:	9803      	ldr	r0, [sp, #12]
 80034d6:	f000 f87b 	bl	80035d0 <_printf_i>
 80034da:	e7e3      	b.n	80034a4 <_vfiprintf_r+0x1ec>
 80034dc:	08003d30 	.word	0x08003d30
 80034e0:	08003d36 	.word	0x08003d36
 80034e4:	08003d3a 	.word	0x08003d3a
 80034e8:	00000000 	.word	0x00000000
 80034ec:	08003293 	.word	0x08003293

080034f0 <_printf_common>:
 80034f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80034f2:	0016      	movs	r6, r2
 80034f4:	9301      	str	r3, [sp, #4]
 80034f6:	688a      	ldr	r2, [r1, #8]
 80034f8:	690b      	ldr	r3, [r1, #16]
 80034fa:	000c      	movs	r4, r1
 80034fc:	9000      	str	r0, [sp, #0]
 80034fe:	4293      	cmp	r3, r2
 8003500:	da00      	bge.n	8003504 <_printf_common+0x14>
 8003502:	0013      	movs	r3, r2
 8003504:	0022      	movs	r2, r4
 8003506:	6033      	str	r3, [r6, #0]
 8003508:	3243      	adds	r2, #67	; 0x43
 800350a:	7812      	ldrb	r2, [r2, #0]
 800350c:	2a00      	cmp	r2, #0
 800350e:	d001      	beq.n	8003514 <_printf_common+0x24>
 8003510:	3301      	adds	r3, #1
 8003512:	6033      	str	r3, [r6, #0]
 8003514:	6823      	ldr	r3, [r4, #0]
 8003516:	069b      	lsls	r3, r3, #26
 8003518:	d502      	bpl.n	8003520 <_printf_common+0x30>
 800351a:	6833      	ldr	r3, [r6, #0]
 800351c:	3302      	adds	r3, #2
 800351e:	6033      	str	r3, [r6, #0]
 8003520:	6822      	ldr	r2, [r4, #0]
 8003522:	2306      	movs	r3, #6
 8003524:	0015      	movs	r5, r2
 8003526:	401d      	ands	r5, r3
 8003528:	421a      	tst	r2, r3
 800352a:	d027      	beq.n	800357c <_printf_common+0x8c>
 800352c:	0023      	movs	r3, r4
 800352e:	3343      	adds	r3, #67	; 0x43
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	1e5a      	subs	r2, r3, #1
 8003534:	4193      	sbcs	r3, r2
 8003536:	6822      	ldr	r2, [r4, #0]
 8003538:	0692      	lsls	r2, r2, #26
 800353a:	d430      	bmi.n	800359e <_printf_common+0xae>
 800353c:	0022      	movs	r2, r4
 800353e:	9901      	ldr	r1, [sp, #4]
 8003540:	9800      	ldr	r0, [sp, #0]
 8003542:	9d08      	ldr	r5, [sp, #32]
 8003544:	3243      	adds	r2, #67	; 0x43
 8003546:	47a8      	blx	r5
 8003548:	3001      	adds	r0, #1
 800354a:	d025      	beq.n	8003598 <_printf_common+0xa8>
 800354c:	2206      	movs	r2, #6
 800354e:	6823      	ldr	r3, [r4, #0]
 8003550:	2500      	movs	r5, #0
 8003552:	4013      	ands	r3, r2
 8003554:	2b04      	cmp	r3, #4
 8003556:	d105      	bne.n	8003564 <_printf_common+0x74>
 8003558:	6833      	ldr	r3, [r6, #0]
 800355a:	68e5      	ldr	r5, [r4, #12]
 800355c:	1aed      	subs	r5, r5, r3
 800355e:	43eb      	mvns	r3, r5
 8003560:	17db      	asrs	r3, r3, #31
 8003562:	401d      	ands	r5, r3
 8003564:	68a3      	ldr	r3, [r4, #8]
 8003566:	6922      	ldr	r2, [r4, #16]
 8003568:	4293      	cmp	r3, r2
 800356a:	dd01      	ble.n	8003570 <_printf_common+0x80>
 800356c:	1a9b      	subs	r3, r3, r2
 800356e:	18ed      	adds	r5, r5, r3
 8003570:	2600      	movs	r6, #0
 8003572:	42b5      	cmp	r5, r6
 8003574:	d120      	bne.n	80035b8 <_printf_common+0xc8>
 8003576:	2000      	movs	r0, #0
 8003578:	e010      	b.n	800359c <_printf_common+0xac>
 800357a:	3501      	adds	r5, #1
 800357c:	68e3      	ldr	r3, [r4, #12]
 800357e:	6832      	ldr	r2, [r6, #0]
 8003580:	1a9b      	subs	r3, r3, r2
 8003582:	42ab      	cmp	r3, r5
 8003584:	ddd2      	ble.n	800352c <_printf_common+0x3c>
 8003586:	0022      	movs	r2, r4
 8003588:	2301      	movs	r3, #1
 800358a:	9901      	ldr	r1, [sp, #4]
 800358c:	9800      	ldr	r0, [sp, #0]
 800358e:	9f08      	ldr	r7, [sp, #32]
 8003590:	3219      	adds	r2, #25
 8003592:	47b8      	blx	r7
 8003594:	3001      	adds	r0, #1
 8003596:	d1f0      	bne.n	800357a <_printf_common+0x8a>
 8003598:	2001      	movs	r0, #1
 800359a:	4240      	negs	r0, r0
 800359c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800359e:	2030      	movs	r0, #48	; 0x30
 80035a0:	18e1      	adds	r1, r4, r3
 80035a2:	3143      	adds	r1, #67	; 0x43
 80035a4:	7008      	strb	r0, [r1, #0]
 80035a6:	0021      	movs	r1, r4
 80035a8:	1c5a      	adds	r2, r3, #1
 80035aa:	3145      	adds	r1, #69	; 0x45
 80035ac:	7809      	ldrb	r1, [r1, #0]
 80035ae:	18a2      	adds	r2, r4, r2
 80035b0:	3243      	adds	r2, #67	; 0x43
 80035b2:	3302      	adds	r3, #2
 80035b4:	7011      	strb	r1, [r2, #0]
 80035b6:	e7c1      	b.n	800353c <_printf_common+0x4c>
 80035b8:	0022      	movs	r2, r4
 80035ba:	2301      	movs	r3, #1
 80035bc:	9901      	ldr	r1, [sp, #4]
 80035be:	9800      	ldr	r0, [sp, #0]
 80035c0:	9f08      	ldr	r7, [sp, #32]
 80035c2:	321a      	adds	r2, #26
 80035c4:	47b8      	blx	r7
 80035c6:	3001      	adds	r0, #1
 80035c8:	d0e6      	beq.n	8003598 <_printf_common+0xa8>
 80035ca:	3601      	adds	r6, #1
 80035cc:	e7d1      	b.n	8003572 <_printf_common+0x82>
	...

080035d0 <_printf_i>:
 80035d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035d2:	b08b      	sub	sp, #44	; 0x2c
 80035d4:	9206      	str	r2, [sp, #24]
 80035d6:	000a      	movs	r2, r1
 80035d8:	3243      	adds	r2, #67	; 0x43
 80035da:	9307      	str	r3, [sp, #28]
 80035dc:	9005      	str	r0, [sp, #20]
 80035de:	9204      	str	r2, [sp, #16]
 80035e0:	7e0a      	ldrb	r2, [r1, #24]
 80035e2:	000c      	movs	r4, r1
 80035e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80035e6:	2a78      	cmp	r2, #120	; 0x78
 80035e8:	d809      	bhi.n	80035fe <_printf_i+0x2e>
 80035ea:	2a62      	cmp	r2, #98	; 0x62
 80035ec:	d80b      	bhi.n	8003606 <_printf_i+0x36>
 80035ee:	2a00      	cmp	r2, #0
 80035f0:	d100      	bne.n	80035f4 <_printf_i+0x24>
 80035f2:	e0be      	b.n	8003772 <_printf_i+0x1a2>
 80035f4:	497c      	ldr	r1, [pc, #496]	; (80037e8 <_printf_i+0x218>)
 80035f6:	9103      	str	r1, [sp, #12]
 80035f8:	2a58      	cmp	r2, #88	; 0x58
 80035fa:	d100      	bne.n	80035fe <_printf_i+0x2e>
 80035fc:	e093      	b.n	8003726 <_printf_i+0x156>
 80035fe:	0026      	movs	r6, r4
 8003600:	3642      	adds	r6, #66	; 0x42
 8003602:	7032      	strb	r2, [r6, #0]
 8003604:	e022      	b.n	800364c <_printf_i+0x7c>
 8003606:	0010      	movs	r0, r2
 8003608:	3863      	subs	r0, #99	; 0x63
 800360a:	2815      	cmp	r0, #21
 800360c:	d8f7      	bhi.n	80035fe <_printf_i+0x2e>
 800360e:	f7fc fd83 	bl	8000118 <__gnu_thumb1_case_shi>
 8003612:	0016      	.short	0x0016
 8003614:	fff6001f 	.word	0xfff6001f
 8003618:	fff6fff6 	.word	0xfff6fff6
 800361c:	001ffff6 	.word	0x001ffff6
 8003620:	fff6fff6 	.word	0xfff6fff6
 8003624:	fff6fff6 	.word	0xfff6fff6
 8003628:	003600a3 	.word	0x003600a3
 800362c:	fff60083 	.word	0xfff60083
 8003630:	00b4fff6 	.word	0x00b4fff6
 8003634:	0036fff6 	.word	0x0036fff6
 8003638:	fff6fff6 	.word	0xfff6fff6
 800363c:	0087      	.short	0x0087
 800363e:	0026      	movs	r6, r4
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	3642      	adds	r6, #66	; 0x42
 8003644:	1d11      	adds	r1, r2, #4
 8003646:	6019      	str	r1, [r3, #0]
 8003648:	6813      	ldr	r3, [r2, #0]
 800364a:	7033      	strb	r3, [r6, #0]
 800364c:	2301      	movs	r3, #1
 800364e:	e0a2      	b.n	8003796 <_printf_i+0x1c6>
 8003650:	6818      	ldr	r0, [r3, #0]
 8003652:	6809      	ldr	r1, [r1, #0]
 8003654:	1d02      	adds	r2, r0, #4
 8003656:	060d      	lsls	r5, r1, #24
 8003658:	d50b      	bpl.n	8003672 <_printf_i+0xa2>
 800365a:	6805      	ldr	r5, [r0, #0]
 800365c:	601a      	str	r2, [r3, #0]
 800365e:	2d00      	cmp	r5, #0
 8003660:	da03      	bge.n	800366a <_printf_i+0x9a>
 8003662:	232d      	movs	r3, #45	; 0x2d
 8003664:	9a04      	ldr	r2, [sp, #16]
 8003666:	426d      	negs	r5, r5
 8003668:	7013      	strb	r3, [r2, #0]
 800366a:	4b5f      	ldr	r3, [pc, #380]	; (80037e8 <_printf_i+0x218>)
 800366c:	270a      	movs	r7, #10
 800366e:	9303      	str	r3, [sp, #12]
 8003670:	e01b      	b.n	80036aa <_printf_i+0xda>
 8003672:	6805      	ldr	r5, [r0, #0]
 8003674:	601a      	str	r2, [r3, #0]
 8003676:	0649      	lsls	r1, r1, #25
 8003678:	d5f1      	bpl.n	800365e <_printf_i+0x8e>
 800367a:	b22d      	sxth	r5, r5
 800367c:	e7ef      	b.n	800365e <_printf_i+0x8e>
 800367e:	680d      	ldr	r5, [r1, #0]
 8003680:	6819      	ldr	r1, [r3, #0]
 8003682:	1d08      	adds	r0, r1, #4
 8003684:	6018      	str	r0, [r3, #0]
 8003686:	062e      	lsls	r6, r5, #24
 8003688:	d501      	bpl.n	800368e <_printf_i+0xbe>
 800368a:	680d      	ldr	r5, [r1, #0]
 800368c:	e003      	b.n	8003696 <_printf_i+0xc6>
 800368e:	066d      	lsls	r5, r5, #25
 8003690:	d5fb      	bpl.n	800368a <_printf_i+0xba>
 8003692:	680d      	ldr	r5, [r1, #0]
 8003694:	b2ad      	uxth	r5, r5
 8003696:	4b54      	ldr	r3, [pc, #336]	; (80037e8 <_printf_i+0x218>)
 8003698:	2708      	movs	r7, #8
 800369a:	9303      	str	r3, [sp, #12]
 800369c:	2a6f      	cmp	r2, #111	; 0x6f
 800369e:	d000      	beq.n	80036a2 <_printf_i+0xd2>
 80036a0:	3702      	adds	r7, #2
 80036a2:	0023      	movs	r3, r4
 80036a4:	2200      	movs	r2, #0
 80036a6:	3343      	adds	r3, #67	; 0x43
 80036a8:	701a      	strb	r2, [r3, #0]
 80036aa:	6863      	ldr	r3, [r4, #4]
 80036ac:	60a3      	str	r3, [r4, #8]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	db03      	blt.n	80036ba <_printf_i+0xea>
 80036b2:	2104      	movs	r1, #4
 80036b4:	6822      	ldr	r2, [r4, #0]
 80036b6:	438a      	bics	r2, r1
 80036b8:	6022      	str	r2, [r4, #0]
 80036ba:	2d00      	cmp	r5, #0
 80036bc:	d102      	bne.n	80036c4 <_printf_i+0xf4>
 80036be:	9e04      	ldr	r6, [sp, #16]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00c      	beq.n	80036de <_printf_i+0x10e>
 80036c4:	9e04      	ldr	r6, [sp, #16]
 80036c6:	0028      	movs	r0, r5
 80036c8:	0039      	movs	r1, r7
 80036ca:	f7fc fdb5 	bl	8000238 <__aeabi_uidivmod>
 80036ce:	9b03      	ldr	r3, [sp, #12]
 80036d0:	3e01      	subs	r6, #1
 80036d2:	5c5b      	ldrb	r3, [r3, r1]
 80036d4:	7033      	strb	r3, [r6, #0]
 80036d6:	002b      	movs	r3, r5
 80036d8:	0005      	movs	r5, r0
 80036da:	429f      	cmp	r7, r3
 80036dc:	d9f3      	bls.n	80036c6 <_printf_i+0xf6>
 80036de:	2f08      	cmp	r7, #8
 80036e0:	d109      	bne.n	80036f6 <_printf_i+0x126>
 80036e2:	6823      	ldr	r3, [r4, #0]
 80036e4:	07db      	lsls	r3, r3, #31
 80036e6:	d506      	bpl.n	80036f6 <_printf_i+0x126>
 80036e8:	6862      	ldr	r2, [r4, #4]
 80036ea:	6923      	ldr	r3, [r4, #16]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	dc02      	bgt.n	80036f6 <_printf_i+0x126>
 80036f0:	2330      	movs	r3, #48	; 0x30
 80036f2:	3e01      	subs	r6, #1
 80036f4:	7033      	strb	r3, [r6, #0]
 80036f6:	9b04      	ldr	r3, [sp, #16]
 80036f8:	1b9b      	subs	r3, r3, r6
 80036fa:	6123      	str	r3, [r4, #16]
 80036fc:	9b07      	ldr	r3, [sp, #28]
 80036fe:	0021      	movs	r1, r4
 8003700:	9300      	str	r3, [sp, #0]
 8003702:	9805      	ldr	r0, [sp, #20]
 8003704:	9b06      	ldr	r3, [sp, #24]
 8003706:	aa09      	add	r2, sp, #36	; 0x24
 8003708:	f7ff fef2 	bl	80034f0 <_printf_common>
 800370c:	3001      	adds	r0, #1
 800370e:	d147      	bne.n	80037a0 <_printf_i+0x1d0>
 8003710:	2001      	movs	r0, #1
 8003712:	4240      	negs	r0, r0
 8003714:	b00b      	add	sp, #44	; 0x2c
 8003716:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003718:	2220      	movs	r2, #32
 800371a:	6809      	ldr	r1, [r1, #0]
 800371c:	430a      	orrs	r2, r1
 800371e:	6022      	str	r2, [r4, #0]
 8003720:	2278      	movs	r2, #120	; 0x78
 8003722:	4932      	ldr	r1, [pc, #200]	; (80037ec <_printf_i+0x21c>)
 8003724:	9103      	str	r1, [sp, #12]
 8003726:	0021      	movs	r1, r4
 8003728:	3145      	adds	r1, #69	; 0x45
 800372a:	700a      	strb	r2, [r1, #0]
 800372c:	6819      	ldr	r1, [r3, #0]
 800372e:	6822      	ldr	r2, [r4, #0]
 8003730:	c920      	ldmia	r1!, {r5}
 8003732:	0610      	lsls	r0, r2, #24
 8003734:	d402      	bmi.n	800373c <_printf_i+0x16c>
 8003736:	0650      	lsls	r0, r2, #25
 8003738:	d500      	bpl.n	800373c <_printf_i+0x16c>
 800373a:	b2ad      	uxth	r5, r5
 800373c:	6019      	str	r1, [r3, #0]
 800373e:	07d3      	lsls	r3, r2, #31
 8003740:	d502      	bpl.n	8003748 <_printf_i+0x178>
 8003742:	2320      	movs	r3, #32
 8003744:	4313      	orrs	r3, r2
 8003746:	6023      	str	r3, [r4, #0]
 8003748:	2710      	movs	r7, #16
 800374a:	2d00      	cmp	r5, #0
 800374c:	d1a9      	bne.n	80036a2 <_printf_i+0xd2>
 800374e:	2220      	movs	r2, #32
 8003750:	6823      	ldr	r3, [r4, #0]
 8003752:	4393      	bics	r3, r2
 8003754:	6023      	str	r3, [r4, #0]
 8003756:	e7a4      	b.n	80036a2 <_printf_i+0xd2>
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	680d      	ldr	r5, [r1, #0]
 800375c:	1d10      	adds	r0, r2, #4
 800375e:	6949      	ldr	r1, [r1, #20]
 8003760:	6018      	str	r0, [r3, #0]
 8003762:	6813      	ldr	r3, [r2, #0]
 8003764:	062e      	lsls	r6, r5, #24
 8003766:	d501      	bpl.n	800376c <_printf_i+0x19c>
 8003768:	6019      	str	r1, [r3, #0]
 800376a:	e002      	b.n	8003772 <_printf_i+0x1a2>
 800376c:	066d      	lsls	r5, r5, #25
 800376e:	d5fb      	bpl.n	8003768 <_printf_i+0x198>
 8003770:	8019      	strh	r1, [r3, #0]
 8003772:	2300      	movs	r3, #0
 8003774:	9e04      	ldr	r6, [sp, #16]
 8003776:	6123      	str	r3, [r4, #16]
 8003778:	e7c0      	b.n	80036fc <_printf_i+0x12c>
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	1d11      	adds	r1, r2, #4
 800377e:	6019      	str	r1, [r3, #0]
 8003780:	6816      	ldr	r6, [r2, #0]
 8003782:	2100      	movs	r1, #0
 8003784:	0030      	movs	r0, r6
 8003786:	6862      	ldr	r2, [r4, #4]
 8003788:	f000 f9b4 	bl	8003af4 <memchr>
 800378c:	2800      	cmp	r0, #0
 800378e:	d001      	beq.n	8003794 <_printf_i+0x1c4>
 8003790:	1b80      	subs	r0, r0, r6
 8003792:	6060      	str	r0, [r4, #4]
 8003794:	6863      	ldr	r3, [r4, #4]
 8003796:	6123      	str	r3, [r4, #16]
 8003798:	2300      	movs	r3, #0
 800379a:	9a04      	ldr	r2, [sp, #16]
 800379c:	7013      	strb	r3, [r2, #0]
 800379e:	e7ad      	b.n	80036fc <_printf_i+0x12c>
 80037a0:	0032      	movs	r2, r6
 80037a2:	6923      	ldr	r3, [r4, #16]
 80037a4:	9906      	ldr	r1, [sp, #24]
 80037a6:	9805      	ldr	r0, [sp, #20]
 80037a8:	9d07      	ldr	r5, [sp, #28]
 80037aa:	47a8      	blx	r5
 80037ac:	3001      	adds	r0, #1
 80037ae:	d0af      	beq.n	8003710 <_printf_i+0x140>
 80037b0:	6823      	ldr	r3, [r4, #0]
 80037b2:	079b      	lsls	r3, r3, #30
 80037b4:	d415      	bmi.n	80037e2 <_printf_i+0x212>
 80037b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037b8:	68e0      	ldr	r0, [r4, #12]
 80037ba:	4298      	cmp	r0, r3
 80037bc:	daaa      	bge.n	8003714 <_printf_i+0x144>
 80037be:	0018      	movs	r0, r3
 80037c0:	e7a8      	b.n	8003714 <_printf_i+0x144>
 80037c2:	0022      	movs	r2, r4
 80037c4:	2301      	movs	r3, #1
 80037c6:	9906      	ldr	r1, [sp, #24]
 80037c8:	9805      	ldr	r0, [sp, #20]
 80037ca:	9e07      	ldr	r6, [sp, #28]
 80037cc:	3219      	adds	r2, #25
 80037ce:	47b0      	blx	r6
 80037d0:	3001      	adds	r0, #1
 80037d2:	d09d      	beq.n	8003710 <_printf_i+0x140>
 80037d4:	3501      	adds	r5, #1
 80037d6:	68e3      	ldr	r3, [r4, #12]
 80037d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80037da:	1a9b      	subs	r3, r3, r2
 80037dc:	42ab      	cmp	r3, r5
 80037de:	dcf0      	bgt.n	80037c2 <_printf_i+0x1f2>
 80037e0:	e7e9      	b.n	80037b6 <_printf_i+0x1e6>
 80037e2:	2500      	movs	r5, #0
 80037e4:	e7f7      	b.n	80037d6 <_printf_i+0x206>
 80037e6:	46c0      	nop			; (mov r8, r8)
 80037e8:	08003d41 	.word	0x08003d41
 80037ec:	08003d52 	.word	0x08003d52

080037f0 <__sflush_r>:
 80037f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80037f2:	898b      	ldrh	r3, [r1, #12]
 80037f4:	0005      	movs	r5, r0
 80037f6:	000c      	movs	r4, r1
 80037f8:	071a      	lsls	r2, r3, #28
 80037fa:	d45c      	bmi.n	80038b6 <__sflush_r+0xc6>
 80037fc:	684a      	ldr	r2, [r1, #4]
 80037fe:	2a00      	cmp	r2, #0
 8003800:	dc04      	bgt.n	800380c <__sflush_r+0x1c>
 8003802:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8003804:	2a00      	cmp	r2, #0
 8003806:	dc01      	bgt.n	800380c <__sflush_r+0x1c>
 8003808:	2000      	movs	r0, #0
 800380a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800380c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800380e:	2f00      	cmp	r7, #0
 8003810:	d0fa      	beq.n	8003808 <__sflush_r+0x18>
 8003812:	2200      	movs	r2, #0
 8003814:	2080      	movs	r0, #128	; 0x80
 8003816:	682e      	ldr	r6, [r5, #0]
 8003818:	602a      	str	r2, [r5, #0]
 800381a:	001a      	movs	r2, r3
 800381c:	0140      	lsls	r0, r0, #5
 800381e:	6a21      	ldr	r1, [r4, #32]
 8003820:	4002      	ands	r2, r0
 8003822:	4203      	tst	r3, r0
 8003824:	d034      	beq.n	8003890 <__sflush_r+0xa0>
 8003826:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003828:	89a3      	ldrh	r3, [r4, #12]
 800382a:	075b      	lsls	r3, r3, #29
 800382c:	d506      	bpl.n	800383c <__sflush_r+0x4c>
 800382e:	6863      	ldr	r3, [r4, #4]
 8003830:	1ac0      	subs	r0, r0, r3
 8003832:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003834:	2b00      	cmp	r3, #0
 8003836:	d001      	beq.n	800383c <__sflush_r+0x4c>
 8003838:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800383a:	1ac0      	subs	r0, r0, r3
 800383c:	0002      	movs	r2, r0
 800383e:	2300      	movs	r3, #0
 8003840:	0028      	movs	r0, r5
 8003842:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003844:	6a21      	ldr	r1, [r4, #32]
 8003846:	47b8      	blx	r7
 8003848:	89a2      	ldrh	r2, [r4, #12]
 800384a:	1c43      	adds	r3, r0, #1
 800384c:	d106      	bne.n	800385c <__sflush_r+0x6c>
 800384e:	6829      	ldr	r1, [r5, #0]
 8003850:	291d      	cmp	r1, #29
 8003852:	d82c      	bhi.n	80038ae <__sflush_r+0xbe>
 8003854:	4b2a      	ldr	r3, [pc, #168]	; (8003900 <__sflush_r+0x110>)
 8003856:	410b      	asrs	r3, r1
 8003858:	07db      	lsls	r3, r3, #31
 800385a:	d428      	bmi.n	80038ae <__sflush_r+0xbe>
 800385c:	2300      	movs	r3, #0
 800385e:	6063      	str	r3, [r4, #4]
 8003860:	6923      	ldr	r3, [r4, #16]
 8003862:	6023      	str	r3, [r4, #0]
 8003864:	04d2      	lsls	r2, r2, #19
 8003866:	d505      	bpl.n	8003874 <__sflush_r+0x84>
 8003868:	1c43      	adds	r3, r0, #1
 800386a:	d102      	bne.n	8003872 <__sflush_r+0x82>
 800386c:	682b      	ldr	r3, [r5, #0]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d100      	bne.n	8003874 <__sflush_r+0x84>
 8003872:	6560      	str	r0, [r4, #84]	; 0x54
 8003874:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003876:	602e      	str	r6, [r5, #0]
 8003878:	2900      	cmp	r1, #0
 800387a:	d0c5      	beq.n	8003808 <__sflush_r+0x18>
 800387c:	0023      	movs	r3, r4
 800387e:	3344      	adds	r3, #68	; 0x44
 8003880:	4299      	cmp	r1, r3
 8003882:	d002      	beq.n	800388a <__sflush_r+0x9a>
 8003884:	0028      	movs	r0, r5
 8003886:	f7ff fa8f 	bl	8002da8 <_free_r>
 800388a:	2000      	movs	r0, #0
 800388c:	6360      	str	r0, [r4, #52]	; 0x34
 800388e:	e7bc      	b.n	800380a <__sflush_r+0x1a>
 8003890:	2301      	movs	r3, #1
 8003892:	0028      	movs	r0, r5
 8003894:	47b8      	blx	r7
 8003896:	1c43      	adds	r3, r0, #1
 8003898:	d1c6      	bne.n	8003828 <__sflush_r+0x38>
 800389a:	682b      	ldr	r3, [r5, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d0c3      	beq.n	8003828 <__sflush_r+0x38>
 80038a0:	2b1d      	cmp	r3, #29
 80038a2:	d001      	beq.n	80038a8 <__sflush_r+0xb8>
 80038a4:	2b16      	cmp	r3, #22
 80038a6:	d101      	bne.n	80038ac <__sflush_r+0xbc>
 80038a8:	602e      	str	r6, [r5, #0]
 80038aa:	e7ad      	b.n	8003808 <__sflush_r+0x18>
 80038ac:	89a2      	ldrh	r2, [r4, #12]
 80038ae:	2340      	movs	r3, #64	; 0x40
 80038b0:	4313      	orrs	r3, r2
 80038b2:	81a3      	strh	r3, [r4, #12]
 80038b4:	e7a9      	b.n	800380a <__sflush_r+0x1a>
 80038b6:	690e      	ldr	r6, [r1, #16]
 80038b8:	2e00      	cmp	r6, #0
 80038ba:	d0a5      	beq.n	8003808 <__sflush_r+0x18>
 80038bc:	680f      	ldr	r7, [r1, #0]
 80038be:	600e      	str	r6, [r1, #0]
 80038c0:	1bba      	subs	r2, r7, r6
 80038c2:	9201      	str	r2, [sp, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	079b      	lsls	r3, r3, #30
 80038c8:	d100      	bne.n	80038cc <__sflush_r+0xdc>
 80038ca:	694a      	ldr	r2, [r1, #20]
 80038cc:	60a2      	str	r2, [r4, #8]
 80038ce:	9b01      	ldr	r3, [sp, #4]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	dd99      	ble.n	8003808 <__sflush_r+0x18>
 80038d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80038d6:	0032      	movs	r2, r6
 80038d8:	001f      	movs	r7, r3
 80038da:	0028      	movs	r0, r5
 80038dc:	9b01      	ldr	r3, [sp, #4]
 80038de:	6a21      	ldr	r1, [r4, #32]
 80038e0:	47b8      	blx	r7
 80038e2:	2800      	cmp	r0, #0
 80038e4:	dc06      	bgt.n	80038f4 <__sflush_r+0x104>
 80038e6:	2340      	movs	r3, #64	; 0x40
 80038e8:	2001      	movs	r0, #1
 80038ea:	89a2      	ldrh	r2, [r4, #12]
 80038ec:	4240      	negs	r0, r0
 80038ee:	4313      	orrs	r3, r2
 80038f0:	81a3      	strh	r3, [r4, #12]
 80038f2:	e78a      	b.n	800380a <__sflush_r+0x1a>
 80038f4:	9b01      	ldr	r3, [sp, #4]
 80038f6:	1836      	adds	r6, r6, r0
 80038f8:	1a1b      	subs	r3, r3, r0
 80038fa:	9301      	str	r3, [sp, #4]
 80038fc:	e7e7      	b.n	80038ce <__sflush_r+0xde>
 80038fe:	46c0      	nop			; (mov r8, r8)
 8003900:	dfbffffe 	.word	0xdfbffffe

08003904 <_fflush_r>:
 8003904:	690b      	ldr	r3, [r1, #16]
 8003906:	b570      	push	{r4, r5, r6, lr}
 8003908:	0005      	movs	r5, r0
 800390a:	000c      	movs	r4, r1
 800390c:	2b00      	cmp	r3, #0
 800390e:	d102      	bne.n	8003916 <_fflush_r+0x12>
 8003910:	2500      	movs	r5, #0
 8003912:	0028      	movs	r0, r5
 8003914:	bd70      	pop	{r4, r5, r6, pc}
 8003916:	2800      	cmp	r0, #0
 8003918:	d004      	beq.n	8003924 <_fflush_r+0x20>
 800391a:	6a03      	ldr	r3, [r0, #32]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d101      	bne.n	8003924 <_fflush_r+0x20>
 8003920:	f7ff f90e 	bl	8002b40 <__sinit>
 8003924:	220c      	movs	r2, #12
 8003926:	5ea3      	ldrsh	r3, [r4, r2]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d0f1      	beq.n	8003910 <_fflush_r+0xc>
 800392c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800392e:	07d2      	lsls	r2, r2, #31
 8003930:	d404      	bmi.n	800393c <_fflush_r+0x38>
 8003932:	059b      	lsls	r3, r3, #22
 8003934:	d402      	bmi.n	800393c <_fflush_r+0x38>
 8003936:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003938:	f7ff fa33 	bl	8002da2 <__retarget_lock_acquire_recursive>
 800393c:	0028      	movs	r0, r5
 800393e:	0021      	movs	r1, r4
 8003940:	f7ff ff56 	bl	80037f0 <__sflush_r>
 8003944:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003946:	0005      	movs	r5, r0
 8003948:	07db      	lsls	r3, r3, #31
 800394a:	d4e2      	bmi.n	8003912 <_fflush_r+0xe>
 800394c:	89a3      	ldrh	r3, [r4, #12]
 800394e:	059b      	lsls	r3, r3, #22
 8003950:	d4df      	bmi.n	8003912 <_fflush_r+0xe>
 8003952:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003954:	f7ff fa26 	bl	8002da4 <__retarget_lock_release_recursive>
 8003958:	e7db      	b.n	8003912 <_fflush_r+0xe>

0800395a <__swbuf_r>:
 800395a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800395c:	0006      	movs	r6, r0
 800395e:	000d      	movs	r5, r1
 8003960:	0014      	movs	r4, r2
 8003962:	2800      	cmp	r0, #0
 8003964:	d004      	beq.n	8003970 <__swbuf_r+0x16>
 8003966:	6a03      	ldr	r3, [r0, #32]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d101      	bne.n	8003970 <__swbuf_r+0x16>
 800396c:	f7ff f8e8 	bl	8002b40 <__sinit>
 8003970:	69a3      	ldr	r3, [r4, #24]
 8003972:	60a3      	str	r3, [r4, #8]
 8003974:	89a3      	ldrh	r3, [r4, #12]
 8003976:	071b      	lsls	r3, r3, #28
 8003978:	d528      	bpl.n	80039cc <__swbuf_r+0x72>
 800397a:	6923      	ldr	r3, [r4, #16]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d025      	beq.n	80039cc <__swbuf_r+0x72>
 8003980:	6923      	ldr	r3, [r4, #16]
 8003982:	6820      	ldr	r0, [r4, #0]
 8003984:	b2ef      	uxtb	r7, r5
 8003986:	1ac0      	subs	r0, r0, r3
 8003988:	6963      	ldr	r3, [r4, #20]
 800398a:	b2ed      	uxtb	r5, r5
 800398c:	4283      	cmp	r3, r0
 800398e:	dc05      	bgt.n	800399c <__swbuf_r+0x42>
 8003990:	0021      	movs	r1, r4
 8003992:	0030      	movs	r0, r6
 8003994:	f7ff ffb6 	bl	8003904 <_fflush_r>
 8003998:	2800      	cmp	r0, #0
 800399a:	d11d      	bne.n	80039d8 <__swbuf_r+0x7e>
 800399c:	68a3      	ldr	r3, [r4, #8]
 800399e:	3001      	adds	r0, #1
 80039a0:	3b01      	subs	r3, #1
 80039a2:	60a3      	str	r3, [r4, #8]
 80039a4:	6823      	ldr	r3, [r4, #0]
 80039a6:	1c5a      	adds	r2, r3, #1
 80039a8:	6022      	str	r2, [r4, #0]
 80039aa:	701f      	strb	r7, [r3, #0]
 80039ac:	6963      	ldr	r3, [r4, #20]
 80039ae:	4283      	cmp	r3, r0
 80039b0:	d004      	beq.n	80039bc <__swbuf_r+0x62>
 80039b2:	89a3      	ldrh	r3, [r4, #12]
 80039b4:	07db      	lsls	r3, r3, #31
 80039b6:	d507      	bpl.n	80039c8 <__swbuf_r+0x6e>
 80039b8:	2d0a      	cmp	r5, #10
 80039ba:	d105      	bne.n	80039c8 <__swbuf_r+0x6e>
 80039bc:	0021      	movs	r1, r4
 80039be:	0030      	movs	r0, r6
 80039c0:	f7ff ffa0 	bl	8003904 <_fflush_r>
 80039c4:	2800      	cmp	r0, #0
 80039c6:	d107      	bne.n	80039d8 <__swbuf_r+0x7e>
 80039c8:	0028      	movs	r0, r5
 80039ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039cc:	0021      	movs	r1, r4
 80039ce:	0030      	movs	r0, r6
 80039d0:	f000 f806 	bl	80039e0 <__swsetup_r>
 80039d4:	2800      	cmp	r0, #0
 80039d6:	d0d3      	beq.n	8003980 <__swbuf_r+0x26>
 80039d8:	2501      	movs	r5, #1
 80039da:	426d      	negs	r5, r5
 80039dc:	e7f4      	b.n	80039c8 <__swbuf_r+0x6e>
	...

080039e0 <__swsetup_r>:
 80039e0:	4b30      	ldr	r3, [pc, #192]	; (8003aa4 <__swsetup_r+0xc4>)
 80039e2:	b570      	push	{r4, r5, r6, lr}
 80039e4:	0005      	movs	r5, r0
 80039e6:	6818      	ldr	r0, [r3, #0]
 80039e8:	000c      	movs	r4, r1
 80039ea:	2800      	cmp	r0, #0
 80039ec:	d004      	beq.n	80039f8 <__swsetup_r+0x18>
 80039ee:	6a03      	ldr	r3, [r0, #32]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d101      	bne.n	80039f8 <__swsetup_r+0x18>
 80039f4:	f7ff f8a4 	bl	8002b40 <__sinit>
 80039f8:	230c      	movs	r3, #12
 80039fa:	5ee2      	ldrsh	r2, [r4, r3]
 80039fc:	b293      	uxth	r3, r2
 80039fe:	0711      	lsls	r1, r2, #28
 8003a00:	d423      	bmi.n	8003a4a <__swsetup_r+0x6a>
 8003a02:	06d9      	lsls	r1, r3, #27
 8003a04:	d407      	bmi.n	8003a16 <__swsetup_r+0x36>
 8003a06:	2309      	movs	r3, #9
 8003a08:	2001      	movs	r0, #1
 8003a0a:	602b      	str	r3, [r5, #0]
 8003a0c:	3337      	adds	r3, #55	; 0x37
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	81a3      	strh	r3, [r4, #12]
 8003a12:	4240      	negs	r0, r0
 8003a14:	bd70      	pop	{r4, r5, r6, pc}
 8003a16:	075b      	lsls	r3, r3, #29
 8003a18:	d513      	bpl.n	8003a42 <__swsetup_r+0x62>
 8003a1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a1c:	2900      	cmp	r1, #0
 8003a1e:	d008      	beq.n	8003a32 <__swsetup_r+0x52>
 8003a20:	0023      	movs	r3, r4
 8003a22:	3344      	adds	r3, #68	; 0x44
 8003a24:	4299      	cmp	r1, r3
 8003a26:	d002      	beq.n	8003a2e <__swsetup_r+0x4e>
 8003a28:	0028      	movs	r0, r5
 8003a2a:	f7ff f9bd 	bl	8002da8 <_free_r>
 8003a2e:	2300      	movs	r3, #0
 8003a30:	6363      	str	r3, [r4, #52]	; 0x34
 8003a32:	2224      	movs	r2, #36	; 0x24
 8003a34:	89a3      	ldrh	r3, [r4, #12]
 8003a36:	4393      	bics	r3, r2
 8003a38:	81a3      	strh	r3, [r4, #12]
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	6063      	str	r3, [r4, #4]
 8003a3e:	6923      	ldr	r3, [r4, #16]
 8003a40:	6023      	str	r3, [r4, #0]
 8003a42:	2308      	movs	r3, #8
 8003a44:	89a2      	ldrh	r2, [r4, #12]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	81a3      	strh	r3, [r4, #12]
 8003a4a:	6923      	ldr	r3, [r4, #16]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d10b      	bne.n	8003a68 <__swsetup_r+0x88>
 8003a50:	21a0      	movs	r1, #160	; 0xa0
 8003a52:	2280      	movs	r2, #128	; 0x80
 8003a54:	89a3      	ldrh	r3, [r4, #12]
 8003a56:	0089      	lsls	r1, r1, #2
 8003a58:	0092      	lsls	r2, r2, #2
 8003a5a:	400b      	ands	r3, r1
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d003      	beq.n	8003a68 <__swsetup_r+0x88>
 8003a60:	0021      	movs	r1, r4
 8003a62:	0028      	movs	r0, r5
 8003a64:	f000 f8b2 	bl	8003bcc <__smakebuf_r>
 8003a68:	220c      	movs	r2, #12
 8003a6a:	5ea3      	ldrsh	r3, [r4, r2]
 8003a6c:	2001      	movs	r0, #1
 8003a6e:	001a      	movs	r2, r3
 8003a70:	b299      	uxth	r1, r3
 8003a72:	4002      	ands	r2, r0
 8003a74:	4203      	tst	r3, r0
 8003a76:	d00f      	beq.n	8003a98 <__swsetup_r+0xb8>
 8003a78:	2200      	movs	r2, #0
 8003a7a:	60a2      	str	r2, [r4, #8]
 8003a7c:	6962      	ldr	r2, [r4, #20]
 8003a7e:	4252      	negs	r2, r2
 8003a80:	61a2      	str	r2, [r4, #24]
 8003a82:	2000      	movs	r0, #0
 8003a84:	6922      	ldr	r2, [r4, #16]
 8003a86:	4282      	cmp	r2, r0
 8003a88:	d1c4      	bne.n	8003a14 <__swsetup_r+0x34>
 8003a8a:	0609      	lsls	r1, r1, #24
 8003a8c:	d5c2      	bpl.n	8003a14 <__swsetup_r+0x34>
 8003a8e:	2240      	movs	r2, #64	; 0x40
 8003a90:	4313      	orrs	r3, r2
 8003a92:	81a3      	strh	r3, [r4, #12]
 8003a94:	3801      	subs	r0, #1
 8003a96:	e7bd      	b.n	8003a14 <__swsetup_r+0x34>
 8003a98:	0788      	lsls	r0, r1, #30
 8003a9a:	d400      	bmi.n	8003a9e <__swsetup_r+0xbe>
 8003a9c:	6962      	ldr	r2, [r4, #20]
 8003a9e:	60a2      	str	r2, [r4, #8]
 8003aa0:	e7ef      	b.n	8003a82 <__swsetup_r+0xa2>
 8003aa2:	46c0      	nop			; (mov r8, r8)
 8003aa4:	20000064 	.word	0x20000064

08003aa8 <memmove>:
 8003aa8:	b510      	push	{r4, lr}
 8003aaa:	4288      	cmp	r0, r1
 8003aac:	d902      	bls.n	8003ab4 <memmove+0xc>
 8003aae:	188b      	adds	r3, r1, r2
 8003ab0:	4298      	cmp	r0, r3
 8003ab2:	d303      	bcc.n	8003abc <memmove+0x14>
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	e007      	b.n	8003ac8 <memmove+0x20>
 8003ab8:	5c8b      	ldrb	r3, [r1, r2]
 8003aba:	5483      	strb	r3, [r0, r2]
 8003abc:	3a01      	subs	r2, #1
 8003abe:	d2fb      	bcs.n	8003ab8 <memmove+0x10>
 8003ac0:	bd10      	pop	{r4, pc}
 8003ac2:	5ccc      	ldrb	r4, [r1, r3]
 8003ac4:	54c4      	strb	r4, [r0, r3]
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d1fa      	bne.n	8003ac2 <memmove+0x1a>
 8003acc:	e7f8      	b.n	8003ac0 <memmove+0x18>
	...

08003ad0 <_sbrk_r>:
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	b570      	push	{r4, r5, r6, lr}
 8003ad4:	4d06      	ldr	r5, [pc, #24]	; (8003af0 <_sbrk_r+0x20>)
 8003ad6:	0004      	movs	r4, r0
 8003ad8:	0008      	movs	r0, r1
 8003ada:	602b      	str	r3, [r5, #0]
 8003adc:	f7fc feb2 	bl	8000844 <_sbrk>
 8003ae0:	1c43      	adds	r3, r0, #1
 8003ae2:	d103      	bne.n	8003aec <_sbrk_r+0x1c>
 8003ae4:	682b      	ldr	r3, [r5, #0]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d000      	beq.n	8003aec <_sbrk_r+0x1c>
 8003aea:	6023      	str	r3, [r4, #0]
 8003aec:	bd70      	pop	{r4, r5, r6, pc}
 8003aee:	46c0      	nop			; (mov r8, r8)
 8003af0:	20000270 	.word	0x20000270

08003af4 <memchr>:
 8003af4:	b2c9      	uxtb	r1, r1
 8003af6:	1882      	adds	r2, r0, r2
 8003af8:	4290      	cmp	r0, r2
 8003afa:	d101      	bne.n	8003b00 <memchr+0xc>
 8003afc:	2000      	movs	r0, #0
 8003afe:	4770      	bx	lr
 8003b00:	7803      	ldrb	r3, [r0, #0]
 8003b02:	428b      	cmp	r3, r1
 8003b04:	d0fb      	beq.n	8003afe <memchr+0xa>
 8003b06:	3001      	adds	r0, #1
 8003b08:	e7f6      	b.n	8003af8 <memchr+0x4>

08003b0a <memcpy>:
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	b510      	push	{r4, lr}
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d100      	bne.n	8003b14 <memcpy+0xa>
 8003b12:	bd10      	pop	{r4, pc}
 8003b14:	5ccc      	ldrb	r4, [r1, r3]
 8003b16:	54c4      	strb	r4, [r0, r3]
 8003b18:	3301      	adds	r3, #1
 8003b1a:	e7f8      	b.n	8003b0e <memcpy+0x4>

08003b1c <_realloc_r>:
 8003b1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b1e:	0007      	movs	r7, r0
 8003b20:	000e      	movs	r6, r1
 8003b22:	0014      	movs	r4, r2
 8003b24:	2900      	cmp	r1, #0
 8003b26:	d105      	bne.n	8003b34 <_realloc_r+0x18>
 8003b28:	0011      	movs	r1, r2
 8003b2a:	f7ff f9a9 	bl	8002e80 <_malloc_r>
 8003b2e:	0005      	movs	r5, r0
 8003b30:	0028      	movs	r0, r5
 8003b32:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003b34:	2a00      	cmp	r2, #0
 8003b36:	d103      	bne.n	8003b40 <_realloc_r+0x24>
 8003b38:	f7ff f936 	bl	8002da8 <_free_r>
 8003b3c:	0025      	movs	r5, r4
 8003b3e:	e7f7      	b.n	8003b30 <_realloc_r+0x14>
 8003b40:	f000 f8a6 	bl	8003c90 <_malloc_usable_size_r>
 8003b44:	9001      	str	r0, [sp, #4]
 8003b46:	4284      	cmp	r4, r0
 8003b48:	d803      	bhi.n	8003b52 <_realloc_r+0x36>
 8003b4a:	0035      	movs	r5, r6
 8003b4c:	0843      	lsrs	r3, r0, #1
 8003b4e:	42a3      	cmp	r3, r4
 8003b50:	d3ee      	bcc.n	8003b30 <_realloc_r+0x14>
 8003b52:	0021      	movs	r1, r4
 8003b54:	0038      	movs	r0, r7
 8003b56:	f7ff f993 	bl	8002e80 <_malloc_r>
 8003b5a:	1e05      	subs	r5, r0, #0
 8003b5c:	d0e8      	beq.n	8003b30 <_realloc_r+0x14>
 8003b5e:	9b01      	ldr	r3, [sp, #4]
 8003b60:	0022      	movs	r2, r4
 8003b62:	429c      	cmp	r4, r3
 8003b64:	d900      	bls.n	8003b68 <_realloc_r+0x4c>
 8003b66:	001a      	movs	r2, r3
 8003b68:	0031      	movs	r1, r6
 8003b6a:	0028      	movs	r0, r5
 8003b6c:	f7ff ffcd 	bl	8003b0a <memcpy>
 8003b70:	0031      	movs	r1, r6
 8003b72:	0038      	movs	r0, r7
 8003b74:	f7ff f918 	bl	8002da8 <_free_r>
 8003b78:	e7da      	b.n	8003b30 <_realloc_r+0x14>
	...

08003b7c <__swhatbuf_r>:
 8003b7c:	b570      	push	{r4, r5, r6, lr}
 8003b7e:	000e      	movs	r6, r1
 8003b80:	001d      	movs	r5, r3
 8003b82:	230e      	movs	r3, #14
 8003b84:	5ec9      	ldrsh	r1, [r1, r3]
 8003b86:	0014      	movs	r4, r2
 8003b88:	b096      	sub	sp, #88	; 0x58
 8003b8a:	2900      	cmp	r1, #0
 8003b8c:	da0c      	bge.n	8003ba8 <__swhatbuf_r+0x2c>
 8003b8e:	89b2      	ldrh	r2, [r6, #12]
 8003b90:	2380      	movs	r3, #128	; 0x80
 8003b92:	0011      	movs	r1, r2
 8003b94:	4019      	ands	r1, r3
 8003b96:	421a      	tst	r2, r3
 8003b98:	d013      	beq.n	8003bc2 <__swhatbuf_r+0x46>
 8003b9a:	2100      	movs	r1, #0
 8003b9c:	3b40      	subs	r3, #64	; 0x40
 8003b9e:	2000      	movs	r0, #0
 8003ba0:	6029      	str	r1, [r5, #0]
 8003ba2:	6023      	str	r3, [r4, #0]
 8003ba4:	b016      	add	sp, #88	; 0x58
 8003ba6:	bd70      	pop	{r4, r5, r6, pc}
 8003ba8:	466a      	mov	r2, sp
 8003baa:	f000 f84d 	bl	8003c48 <_fstat_r>
 8003bae:	2800      	cmp	r0, #0
 8003bb0:	dbed      	blt.n	8003b8e <__swhatbuf_r+0x12>
 8003bb2:	23f0      	movs	r3, #240	; 0xf0
 8003bb4:	9901      	ldr	r1, [sp, #4]
 8003bb6:	021b      	lsls	r3, r3, #8
 8003bb8:	4019      	ands	r1, r3
 8003bba:	4b03      	ldr	r3, [pc, #12]	; (8003bc8 <__swhatbuf_r+0x4c>)
 8003bbc:	18c9      	adds	r1, r1, r3
 8003bbe:	424b      	negs	r3, r1
 8003bc0:	4159      	adcs	r1, r3
 8003bc2:	2380      	movs	r3, #128	; 0x80
 8003bc4:	00db      	lsls	r3, r3, #3
 8003bc6:	e7ea      	b.n	8003b9e <__swhatbuf_r+0x22>
 8003bc8:	ffffe000 	.word	0xffffe000

08003bcc <__smakebuf_r>:
 8003bcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003bce:	2602      	movs	r6, #2
 8003bd0:	898b      	ldrh	r3, [r1, #12]
 8003bd2:	0005      	movs	r5, r0
 8003bd4:	000c      	movs	r4, r1
 8003bd6:	4233      	tst	r3, r6
 8003bd8:	d006      	beq.n	8003be8 <__smakebuf_r+0x1c>
 8003bda:	0023      	movs	r3, r4
 8003bdc:	3347      	adds	r3, #71	; 0x47
 8003bde:	6023      	str	r3, [r4, #0]
 8003be0:	6123      	str	r3, [r4, #16]
 8003be2:	2301      	movs	r3, #1
 8003be4:	6163      	str	r3, [r4, #20]
 8003be6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8003be8:	466a      	mov	r2, sp
 8003bea:	ab01      	add	r3, sp, #4
 8003bec:	f7ff ffc6 	bl	8003b7c <__swhatbuf_r>
 8003bf0:	9900      	ldr	r1, [sp, #0]
 8003bf2:	0007      	movs	r7, r0
 8003bf4:	0028      	movs	r0, r5
 8003bf6:	f7ff f943 	bl	8002e80 <_malloc_r>
 8003bfa:	2800      	cmp	r0, #0
 8003bfc:	d108      	bne.n	8003c10 <__smakebuf_r+0x44>
 8003bfe:	220c      	movs	r2, #12
 8003c00:	5ea3      	ldrsh	r3, [r4, r2]
 8003c02:	059a      	lsls	r2, r3, #22
 8003c04:	d4ef      	bmi.n	8003be6 <__smakebuf_r+0x1a>
 8003c06:	2203      	movs	r2, #3
 8003c08:	4393      	bics	r3, r2
 8003c0a:	431e      	orrs	r6, r3
 8003c0c:	81a6      	strh	r6, [r4, #12]
 8003c0e:	e7e4      	b.n	8003bda <__smakebuf_r+0xe>
 8003c10:	2380      	movs	r3, #128	; 0x80
 8003c12:	89a2      	ldrh	r2, [r4, #12]
 8003c14:	6020      	str	r0, [r4, #0]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	81a3      	strh	r3, [r4, #12]
 8003c1a:	9b00      	ldr	r3, [sp, #0]
 8003c1c:	6120      	str	r0, [r4, #16]
 8003c1e:	6163      	str	r3, [r4, #20]
 8003c20:	9b01      	ldr	r3, [sp, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00c      	beq.n	8003c40 <__smakebuf_r+0x74>
 8003c26:	0028      	movs	r0, r5
 8003c28:	230e      	movs	r3, #14
 8003c2a:	5ee1      	ldrsh	r1, [r4, r3]
 8003c2c:	f000 f81e 	bl	8003c6c <_isatty_r>
 8003c30:	2800      	cmp	r0, #0
 8003c32:	d005      	beq.n	8003c40 <__smakebuf_r+0x74>
 8003c34:	2303      	movs	r3, #3
 8003c36:	89a2      	ldrh	r2, [r4, #12]
 8003c38:	439a      	bics	r2, r3
 8003c3a:	3b02      	subs	r3, #2
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	81a3      	strh	r3, [r4, #12]
 8003c40:	89a3      	ldrh	r3, [r4, #12]
 8003c42:	433b      	orrs	r3, r7
 8003c44:	81a3      	strh	r3, [r4, #12]
 8003c46:	e7ce      	b.n	8003be6 <__smakebuf_r+0x1a>

08003c48 <_fstat_r>:
 8003c48:	2300      	movs	r3, #0
 8003c4a:	b570      	push	{r4, r5, r6, lr}
 8003c4c:	4d06      	ldr	r5, [pc, #24]	; (8003c68 <_fstat_r+0x20>)
 8003c4e:	0004      	movs	r4, r0
 8003c50:	0008      	movs	r0, r1
 8003c52:	0011      	movs	r1, r2
 8003c54:	602b      	str	r3, [r5, #0]
 8003c56:	f7fc fdd3 	bl	8000800 <_fstat>
 8003c5a:	1c43      	adds	r3, r0, #1
 8003c5c:	d103      	bne.n	8003c66 <_fstat_r+0x1e>
 8003c5e:	682b      	ldr	r3, [r5, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d000      	beq.n	8003c66 <_fstat_r+0x1e>
 8003c64:	6023      	str	r3, [r4, #0]
 8003c66:	bd70      	pop	{r4, r5, r6, pc}
 8003c68:	20000270 	.word	0x20000270

08003c6c <_isatty_r>:
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	b570      	push	{r4, r5, r6, lr}
 8003c70:	4d06      	ldr	r5, [pc, #24]	; (8003c8c <_isatty_r+0x20>)
 8003c72:	0004      	movs	r4, r0
 8003c74:	0008      	movs	r0, r1
 8003c76:	602b      	str	r3, [r5, #0]
 8003c78:	f7fc fdd0 	bl	800081c <_isatty>
 8003c7c:	1c43      	adds	r3, r0, #1
 8003c7e:	d103      	bne.n	8003c88 <_isatty_r+0x1c>
 8003c80:	682b      	ldr	r3, [r5, #0]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d000      	beq.n	8003c88 <_isatty_r+0x1c>
 8003c86:	6023      	str	r3, [r4, #0]
 8003c88:	bd70      	pop	{r4, r5, r6, pc}
 8003c8a:	46c0      	nop			; (mov r8, r8)
 8003c8c:	20000270 	.word	0x20000270

08003c90 <_malloc_usable_size_r>:
 8003c90:	1f0b      	subs	r3, r1, #4
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	1f18      	subs	r0, r3, #4
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	da01      	bge.n	8003c9e <_malloc_usable_size_r+0xe>
 8003c9a:	580b      	ldr	r3, [r1, r0]
 8003c9c:	18c0      	adds	r0, r0, r3
 8003c9e:	4770      	bx	lr

08003ca0 <_init>:
 8003ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ca2:	46c0      	nop			; (mov r8, r8)
 8003ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ca6:	bc08      	pop	{r3}
 8003ca8:	469e      	mov	lr, r3
 8003caa:	4770      	bx	lr

08003cac <_fini>:
 8003cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cae:	46c0      	nop			; (mov r8, r8)
 8003cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cb2:	bc08      	pop	{r3}
 8003cb4:	469e      	mov	lr, r3
 8003cb6:	4770      	bx	lr
